void sub_22414AA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  atomic_ullong *volatile *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  atomic_ullong *volatile v31;
  void *v32;
  uint64_t v33;
  atomic_ullong *volatile v34;
  unsigned int v35;
  atomic_ullong *volatile v36;
  void *v37;
  atomic_ullong *volatile v38;

  v19 = *(void **)(v17 - 224);
  if (v19)
  {
    *(void *)(v17 - 216) = v19;
    operator delete(v19);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&__p);
  switch(*(unsigned char *)(v17 - 116))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v20 = *(void *)(v17 - 128);
      if (!v20) {
        break;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      v21 = (void *)v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_20;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v25 = *(void **)(v17 - 128);
      if (!v25) {
        break;
      }
      v26 = (void *)v25[1];
      if (v26)
      {
        v25[2] = v26;
        operator delete(v26);
      }
      v21 = v25;
      v22 = 0x1080C409938AC02;
      goto LABEL_20;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v23 = *(void **)(v17 - 128);
      if (!v23) {
        break;
      }
      *(void *)(v17 - 136) = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));
      v21 = v23;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_20;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v27 = *(void *)(v17 - 128);
      if (!v27) {
        goto LABEL_28;
      }
      *(void *)(v17 - 136) = v27 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));
      v28 = v27;
      v29 = 0x1020C405E66F15BLL;
      goto LABEL_27;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v30 = *(void *)(v17 - 128);
      if (!v30) {
        goto LABEL_28;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v30 + 16));
      v28 = v30;
      v29 = 0x1030C40F1F0227BLL;
LABEL_27:
      MEMORY[0x22A614FA0](v28, v29);
LABEL_28:
      *(void *)(v17 - 128) = 0;
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      v24 = *(void **)(v17 - 128);
      if (!v24) {
        break;
      }
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      v22 = 0x1030C407B73B9F7;
LABEL_20:
      MEMORY[0x22A614FA0](v21, v22);
      break;
    default:
      break;
  }
  switch(*((unsigned char *)v16 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      v31 = *v16;
      if (!*v16) {
        goto LABEL_55;
      }
      if (*((char *)v31 + 31) < 0) {
        operator delete((void *)v31[1]);
      }
      v32 = v31;
      v33 = 0x1012C404EF22A49;
      goto LABEL_54;
    case 3:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      v36 = *v16;
      if (!*v16) {
        goto LABEL_55;
      }
      v37 = (void *)v36[1];
      if (v37)
      {
        v36[2] = (atomic_ullong)v37;
        operator delete(v37);
      }
      v32 = v36;
      v33 = 0x1080C409938AC02;
      goto LABEL_54;
    case 4:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      v34 = *v16;
      if (!*v16) {
        goto LABEL_55;
      }
      *(void *)(v17 - 128) = v34 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
      goto LABEL_49;
    case 5:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      v34 = *v16;
      if (!*v16) {
        goto LABEL_55;
      }
      *(void *)(v17 - 128) = v34 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
LABEL_49:
      v32 = v34;
      v33 = 0x1020C405E66F15BLL;
      goto LABEL_54;
    case 8:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      v38 = *v16;
      if (!*v16) {
        goto LABEL_55;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v38 + 2);
      v32 = v38;
      v35 = -235920773;
      goto LABEL_53;
    case 9:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_56;
      }
      if (!*v16) {
        goto LABEL_55;
      }
      v32 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v16);
      v35 = 2071181815;
LABEL_53:
      v33 = v35 | 0x1030C4000000000;
LABEL_54:
      MEMORY[0x22A614FA0](v32, v33);
LABEL_55:
      *v16 = 0;
LABEL_56:
      *v16 = 0;
      *((_DWORD *)v16 + 2) = 0;
      *((unsigned char *)v16 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_56;
  }
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26D76CD20;
  return result;
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76CD20;
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = 1;
  switch(a1[12])
  {
    case 0:
      double v4 = *(double *)a1;
      goto LABEL_9;
    case 1:
      BOOL v3 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a1 + 31) < 0) {
        double v4 = *(double *)(*(void *)a1 + 16);
      }
      else {
        *(void *)&double v4 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
LABEL_9:
      BOOL v3 = *(void *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v3 = *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a1 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      BOOL v3 = *(void *)(*(void *)a1 + 64) == 3;
LABEL_10:
      int v2 = v3;
LABEL_13:
      *(unsigned char *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(void *)a2 = v2 ^ 1u;
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::swap(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    BOOL v3 = result;
    double v4 = (void *)result[3];
    v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22414B870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~__func()
{
}

void *std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26D76CDA0;
  return result;
}

void std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76CDA0;
}

uint64_t std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::operator()(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(a3, a4, a1);
}

uint64_t std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target_type()
{
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(uint64_t a1, uint64_t a2, __n128 a3)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
          BOOL v3 = *(void *)a1 < *(void *)a2;
          goto LABEL_26;
        case 1:
          double v12 = *(double *)a1;
          double v13 = (double)*(uint64_t *)a2;
          goto LABEL_36;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          BOOL v11 = *(void *)a2 <= (uint64_t)(*(void *)a1 << 8) >> 8;
          return !v11;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
          BOOL v11 = *(double *)a2 <= (double)*(uint64_t *)a1;
          return !v11;
        case 1:
          double v12 = *(double *)a1;
          double v13 = *(double *)a2;
LABEL_36:
          BOOL v14 = v12 < v13;
          goto LABEL_38;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          BOOL v14 = (double)*(int *)(a1 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8) < *(double *)a2;
LABEL_38:
          uint64_t result = v14;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 2:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 2:
          return std::string::compare[abi:ne180100]((const void **)(*(void *)a1 + 8), (unsigned char *)(*(void *)a2 + 8)) >> 31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 3:
          v5 = *(double **)(*(void *)a1 + 8);
          v6 = *(double **)(*(void *)a2 + 8);
          unint64_t v7 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v6) >> 3;
          unint64_t v8 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v5) >> 3;
          if (*(double **)(*(void *)a1 + 16) == v5) {
            return v8 < v7;
          }
          if (v8 <= 1) {
            uint64_t v9 = 1;
          }
          else {
            uint64_t v9 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v5) >> 3;
          }
          uint64_t v10 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v6) >> 3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 4:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 4:
          return turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v16, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_30;
    case 6:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
          BOOL v3 = *(void *)a1 < (uint64_t)(*(void *)a2 << 8) >> 8;
          goto LABEL_26;
        case 1:
          BOOL v11 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) <= *(double *)a1;
          return !v11;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          uint64_t v15 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v15 < (uint64_t)(*(void *)a2 << 8) >> 8) {
            return 1;
          }
          if (v15 != (uint64_t)(*(void *)a2 << 8) >> 8) {
            return 0;
          }
          BOOL v3 = *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
LABEL_26:
          uint64_t result = v3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 7:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_30;
    case 8:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_30;
    case 9:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_30:
      turi::flexible_type_fail(0);
      return 0;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (!v10 || *v5 > *v6) {
      return 0;
    }
    if (*v5 < *v6) {
      break;
    }
    --v10;
    ++v5;
    ++v6;
    if (!--v9) {
      return v8 < v7;
    }
  }
  return 1;
}

void std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76CE48;
  return result;
}

void std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76CE48;
}

uint64_t std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::operator()(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(a3, a4, a1) ^ 1;
}

uint64_t std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target_type()
{
}

uint64_t std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void std::vector<boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    double v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 7;
        unint64_t v7 = (void **)(v4 - 3);
        std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](&v7);
        std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function(v6);
        double v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v9 = v4 >> 1;
    uint64_t v10 = (uint64_t *)(v6 + 32 * (v4 >> 1));
    BOOL v11 = (uint64_t *)(a2 - 32);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 48))(v7, v10, a2 - 32);
    if (result)
    {
      uint64_t v12 = *v11;
      *(void *)&v15[5] = *(uint64_t *)((char *)v11 + 5);
      *(void *)uint64_t v15 = v12;
      v15[12] = *(unsigned char *)(a2 - 20);
      *(unsigned char *)(a2 - 20) = 0;
      long long v16 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v13 = (uint64_t)v10;
        turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v11, v10);
        if (!v9) {
          break;
        }
        uint64_t v14 = *(void *)(a3 + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (uint64_t *)(v6 + 32 * v9);
        BOOL v11 = (uint64_t *)v13;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v14 + 48))(v14, v10, v15) & 1) != 0);
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v13, (uint64_t *)v15);
      return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v15);
    }
  }
  return result;
}

void sub_22414C2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            uint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1::operator()(void **a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)**a1 + 32))(v12);
  (*(void (**)(void *__return_ptr))(*(void *)**a1 + 40))(v11);
  uint64_t v4 = 0;
  while (v12[0] != v11[0] || v12[1] != v11[1] || v14 != v11[4])
  {
    if (v13[12] != 7)
    {
      if (v13[12] == 1)
      {
        atomic_ullong *volatile v5 = (void *)(*a1[1] + 56 * a2);
        *(void *)&v8[5] = *(void *)&v13[5];
        *(void *)unint64_t v8 = *(void *)v13;
        v8[12] = 1;
      }
      else
      {
        atomic_ullong *volatile v5 = (void *)(*a1[1] + 56 * a2);
        *(void *)&v8[5] = *(void *)&v13[5];
        *(void *)unint64_t v8 = *(void *)v13;
        v8[12] = v13[12];
        switch(v13[12])
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            atomic_fetch_add(*(atomic_ullong *volatile *)v8, 1uLL);
            break;
          default:
            break;
        }
      }
      uint64_t v9 = a2;
      uint64_t v10 = v4;
      boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::push(v5, (uint64_t)v8);
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v8);
      uint64_t v6 = *a1[1];
      if (*a1[2] < (unint64_t)((uint64_t)(*(void *)(v6 + 56 * a2 + 40) - *(void *)(v6 + 56 * a2 + 32)) >> 5)) {
        boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::pop(v6 + 56 * a2);
      }
    }
    ++v4;
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v12);
  }
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v11);
  return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v12);
}

void sub_22414C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = result;
    do
      uint64_t result = turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1::operator()(*(void ***)v2, v1++);
    while (v1 < *(void *)(v2 + 16));
  }
  return result;
}

void *turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2::operator()(uint64_t a1, uint64_t a2)
{
  v51[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(***(void ***)a1 + 32))(v48);
  unint64_t v4 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), a2);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(**(void **)(a1 + 16) + 24 * a2);
      if (v5 >= (*(void *)(**(void **)(a1 + 16) + 24 * a2 + 8) - v7) >> 3) {
        break;
      }
      if (v6 == *(void *)(v7 + 8 * v5))
      {
        BYTE4(v47[1]) = 0;
        LODWORD(v47[1]) = 0;
        v47[0] = (atomic_ullong *)1;
        if (!v50) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v50 + 48))(v50, v47);
        switch(BYTE4(v47[1]))
        {
          case 2:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v8 = v47[0];
              if (v47[0])
              {
                if (*((char *)v47[0] + 31) < 0) {
                  operator delete(*((void **)v47[0] + 1));
                }
                uint64_t v9 = v8;
                uint64_t v10 = 0x1012C404EF22A49;
                goto LABEL_65;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v26 = v47[0];
              if (v47[0])
              {
                v27 = (void *)v47[0][1];
                if (v27)
                {
                  v47[0][2] = (atomic_ullong)v27;
                  operator delete(v27);
                }
                uint64_t v9 = v26;
                uint64_t v10 = 0x1080C409938AC02;
                goto LABEL_65;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v14 = v47[0];
              if (v47[0])
              {
                v46 = (void **)(v47[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
                goto LABEL_56;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v14 = v47[0];
              if (v47[0])
              {
                v46 = (void **)(v47[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_56:
                uint64_t v9 = v14;
                uint64_t v10 = 0x1020C405E66F15BLL;
                goto LABEL_65;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v30 = v47[0];
              if (v47[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v47[0] + 2);
                uint64_t v9 = v30;
                unsigned int v20 = -235920773;
                goto LABEL_64;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v16 = v47[0];
              if (v47[0])
              {
                uint64_t v17 = (void *)v47[0][6];
                if (v17)
                {
                  v47[0][7] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                v18 = (void *)v16[3];
                if (v18)
                {
                  v16[4] = (atomic_ullong)v18;
                  operator delete(v18);
                }
                v19 = (std::__shared_weak_count *)v16[2];
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
                uint64_t v9 = v16;
                unsigned int v20 = 2071181815;
LABEL_64:
                uint64_t v10 = v20 | 0x1030C4000000000;
LABEL_65:
                MEMORY[0x22A614FA0](v9, v10);
              }
            }
            break;
          default:
            break;
        }
        ++v5;
      }
      else
      {
        memset(v47, 0, 13);
        if (!v50) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v50 + 48))(v50, v47);
        switch(BYTE4(v47[1]))
        {
          case 2:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unsigned int v11 = v47[0];
              if (v47[0])
              {
                if (*((char *)v47[0] + 31) < 0) {
                  operator delete(*((void **)v47[0] + 1));
                }
                atomic_ullong *volatile v12 = v11;
                uint64_t v13 = 0x1012C404EF22A49;
                goto LABEL_71;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v28 = v47[0];
              if (v47[0])
              {
                v29 = (void *)v47[0][1];
                if (v29)
                {
                  v47[0][2] = (atomic_ullong)v29;
                  operator delete(v29);
                }
                atomic_ullong *volatile v12 = v28;
                uint64_t v13 = 0x1080C409938AC02;
                goto LABEL_71;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v15 = v47[0];
              if (v47[0])
              {
                v46 = (void **)(v47[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
                goto LABEL_60;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v15 = v47[0];
              if (v47[0])
              {
                v46 = (void **)(v47[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_60:
                atomic_ullong *volatile v12 = v15;
                uint64_t v13 = 0x1020C405E66F15BLL;
                goto LABEL_71;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v31 = v47[0];
              if (v47[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v47[0] + 2);
                atomic_ullong *volatile v12 = v31;
                unsigned int v25 = -235920773;
                goto LABEL_70;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v21 = v47[0];
              if (v47[0])
              {
                v22 = (void *)v47[0][6];
                if (v22)
                {
                  v47[0][7] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                v23 = (void *)v21[3];
                if (v23)
                {
                  v21[4] = (atomic_ullong)v23;
                  operator delete(v23);
                }
                v24 = (std::__shared_weak_count *)v21[2];
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                }
                atomic_ullong *volatile v12 = v21;
                unsigned int v25 = 2071181815;
LABEL_70:
                uint64_t v13 = v25 | 0x1030C4000000000;
LABEL_71:
                MEMORY[0x22A614FA0](v12, v13);
              }
            }
            break;
          default:
            break;
        }
      }
      if (v4 == ++v6) {
        goto LABEL_110;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v32 = v4 - v6;
  if (v4 > v6)
  {
    do
    {
      memset(v47, 0, 13);
      if (!v50) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v50 + 48))(v50, v47);
      switch(BYTE4(v47[1]))
      {
        case 2:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v33 = v47[0];
            if (v47[0])
            {
              if (*((char *)v47[0] + 31) < 0) {
                operator delete(*((void **)v47[0] + 1));
              }
              v34 = v33;
              uint64_t v35 = 0x1012C404EF22A49;
              goto LABEL_108;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v42 = v47[0];
            if (v47[0])
            {
              v43 = (void *)v47[0][1];
              if (v43)
              {
                v47[0][2] = (atomic_ullong)v43;
                operator delete(v43);
              }
              v34 = v42;
              uint64_t v35 = 0x1080C409938AC02;
              goto LABEL_108;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v36 = v47[0];
            if (v47[0])
            {
              v46 = (void **)(v47[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
              goto LABEL_103;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v36 = v47[0];
            if (v47[0])
            {
              v46 = (void **)(v47[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_103:
              v34 = v36;
              uint64_t v35 = 0x1020C405E66F15BLL;
              goto LABEL_108;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v44 = v47[0];
            if (v47[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v47[0] + 2);
              v34 = v44;
              unsigned int v41 = -235920773;
              goto LABEL_107;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v47[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v37 = v47[0];
            if (v47[0])
            {
              v38 = (void *)v47[0][6];
              if (v38)
              {
                v47[0][7] = (atomic_ullong)v38;
                operator delete(v38);
              }
              v39 = (void *)v37[3];
              if (v39)
              {
                v37[4] = (atomic_ullong)v39;
                operator delete(v39);
              }
              v40 = (std::__shared_weak_count *)v37[2];
              if (v40) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v40);
              }
              v34 = v37;
              unsigned int v41 = 2071181815;
LABEL_107:
              uint64_t v35 = v41 | 0x1030C4000000000;
LABEL_108:
              MEMORY[0x22A614FA0](v34, v35);
            }
          }
          break;
        default:
          break;
      }
      --v32;
    }
    while (v32);
  }
LABEL_110:
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v51);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v49);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v48);
}

void sub_22414CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      uint64_t result = turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(uint64_t a1, uint64_t (***a2)(void))
{
  v3[16] = *MEMORY[0x263EF8340];
  uint64_t v2 = (**a2)(a2);
  std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(v3, v2);
}

void sub_22414D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  atomic_ullong *volatile v12 = va_arg(va1, void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void *);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  unsigned int v20 = va_arg(va2, std::__shared_weak_count *);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 - 120);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v12);
  std::pair<std::string const,turi::any>::~pair(v7 - 112);
  if (a7) {
    (*(void (**)(uint64_t))(*(void *)a7 + 8))(a7);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v17);
  std::pair<std::string const,turi::flexible_type>::~pair(v7 - 80);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::add_element_simple(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 12) == 7) {
    ++*(void *)(result + 24);
  }
  return result;
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::emit(uint64_t a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v2);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1);
}

void sub_22414D8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414DA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414DC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414DE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414E22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::add_element_simple(uint64_t result, unsigned char *a2)
{
  int v2 = 1;
  switch(a2[12])
  {
    case 0:
      double v4 = *(double *)a2;
      goto LABEL_9;
    case 1:
      BOOL v3 = *(double *)a2 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a2 + 31) < 0) {
        double v4 = *(double *)(*(void *)a2 + 16);
      }
      else {
        *(void *)&double v4 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
LABEL_9:
      BOOL v3 = *(void *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v3 = *(void *)(*(void *)a2 + 8) == *(void *)(*(void *)a2 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      BOOL v3 = *(void *)(*(void *)a2 + 64) == 3;
LABEL_10:
      int v2 = v3;
LABEL_13:
      int v5 = *(_DWORD *)(result + 16) & (v2 ^ 1);
      *(_DWORD *)(result + 16) = v5;
      if (!v5)
      {
        exception = __cxa_allocate_exception(1uLL);
      }
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::emit(uint64_t a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v2);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1);
}

void sub_22414E62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414E7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414EBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414EDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414EFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::add_element_simple(uint64_t result, unsigned char *a2)
{
  int v2 = 1;
  switch(a2[12])
  {
    case 0:
      double v4 = *(double *)a2;
      goto LABEL_9;
    case 1:
      BOOL v3 = *(double *)a2 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a2 + 31) < 0) {
        double v4 = *(double *)(*(void *)a2 + 16);
      }
      else {
        *(void *)&double v4 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
LABEL_9:
      BOOL v3 = *(void *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v3 = *(void *)(*(void *)a2 + 8) == *(void *)(*(void *)a2 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      BOOL v3 = *(void *)(*(void *)a2 + 64) == 3;
LABEL_10:
      int v2 = v3;
LABEL_13:
      int v5 = *(_DWORD *)(result + 16) | v2 ^ 1;
      *(_DWORD *)(result + 16) = v5;
      if (v5 == 1)
      {
        exception = __cxa_allocate_exception(1uLL);
      }
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::emit(uint64_t a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v2);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1);
}

void sub_22414F3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414F530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414F930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414FB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22414FD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_26D76D0E8;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  BOOL v3 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    double v4 = *(atomic_ullong **)a3;
    *(void *)(result + 21) = *(void *)(a3 + 5);
    *BOOL v3 = v4;
    unsigned int v5 = *(unsigned __int8 *)(a3 + 12);
    *(unsigned char *)(result + 28) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  *(void *)(result + 32) = 0;
  unint64_t v6 = (atomic_ullong *volatile *)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 44) = 0;
  if (result + 32 != a3)
  {
    char v7 = *(atomic_ullong **)a3;
    *(void *)(result + 37) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v6 = v7;
    unsigned int v8 = *(unsigned __int8 *)(a3 + 12);
    *(unsigned char *)(result + 44) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  return result;
}

uint64_t turi::unity_sarray::max(void)::$_0::operator()(uint64_t result, uint64_t a2, uint64_t a3, __n128 a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 7) {
    return result;
  }
  unsigned int v7 = *(unsigned __int8 *)(a3 + 12);
  if (v7 == 7)
  {
    unsigned int v8 = *(uint64_t **)result;
    if (*(void *)result == a3)
    {
LABEL_51:
      if (v4 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return turi::flexible_type_fail(0);
    }
    uint64_t v9 = *v8;
    *(void *)(a3 + 5) = *(uint64_t *)((char *)v8 + 5);
    *(void *)a3 = v9;
    unsigned int v7 = *((unsigned __int8 *)v8 + 12);
    *(unsigned char *)(a3 + 12) = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
      unsigned int v7 = *(unsigned __int8 *)(a3 + 12);
    }
  }
  switch(v7)
  {
    case 0u:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          if (a2 == a3) {
            return result;
          }
          uint64_t v11 = *(void *)a2;
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a3;
          goto LABEL_62;
        case 1:
          if (a2 == a3) {
            return result;
          }
          a4.n128_u64[0] = *(void *)a2;
          double v23 = (double)*(uint64_t *)a3;
          goto LABEL_66;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          if (a2 == a3) {
            return result;
          }
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a3;
          uint64_t v11 = (uint64_t)(*(void *)a2 << 8) >> 8;
LABEL_62:
          if (v11 <= (uint64_t)v12) {
            return result;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1u:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          if (a2 == a3) {
            return result;
          }
          a4.n128_u64[0] = *(void *)a3;
          if (*(double *)a3 >= (double)*(uint64_t *)a2) {
            return result;
          }
          goto LABEL_76;
        case 1:
          if (a2 == a3) {
            return result;
          }
          a4.n128_u64[0] = *(void *)a2;
          double v23 = *(double *)a3;
LABEL_66:
          if (a4.n128_f64[0] <= v23) {
            return result;
          }
          goto LABEL_76;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          if (a2 == a3) {
            return result;
          }
          a4.n128_f64[0] = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
          if (a4.n128_f64[0] <= *(double *)a3) {
            return result;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2u:
      unsigned int v13 = *(unsigned __int8 *)(a2 + 12);
      if (v13 - 3 < 7 || v13 < 2) {
        return turi::flexible_type_fail(0);
      }
      if (v13 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t result = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)a3 + 8), (void *)(*(void *)a2 + 8));
      goto LABEL_41;
    case 3u:
      unsigned int v15 = *(unsigned __int8 *)(a2 + 12);
      if (v15 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v15 != 3) {
        return turi::flexible_type_fail(0);
      }
      uint64_t v16 = *(unint64_t **)(*(void *)a2 + 8);
      uint64_t v17 = *(double **)(*(void *)a3 + 8);
      unint64_t v18 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3;
      unint64_t v19 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v16) >> 3;
      if (*(unint64_t **)(*(void *)a2 + 16) == v16) {
        goto LABEL_35;
      }
      if (v19 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v16) >> 3;
      }
      uint64_t v21 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3;
      break;
    case 4u:
      unsigned int v22 = *(unsigned __int8 *)(a2 + 12);
      if (v22 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v22 != 4) {
        return turi::flexible_type_fail(0);
      }
      uint64_t result = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v34, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)a3 + 8));
LABEL_41:
      if (a2 == a3 || (result & 1) == 0) {
        return result;
      }
      goto LABEL_76;
    case 5u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return turi::flexible_type_fail(0);
    case 6u:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          if (a2 == a3 || (uint64_t)(*(void *)a3 << 8) >> 8 >= *(void *)a2) {
            return result;
          }
          goto LABEL_76;
        case 1:
          if (a2 == a3) {
            return result;
          }
          a4.n128_f64[0] = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
          if (a4.n128_f64[0] >= *(double *)a2) {
            return result;
          }
          goto LABEL_76;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          uint64_t v24 = (uint64_t)(*(void *)a2 << 8) >> 8;
          if (v24 > (uint64_t)(*(void *)a3 << 8) >> 8) {
            goto LABEL_75;
          }
          if (v24 != (uint64_t)(*(void *)a3 << 8) >> 8 || a2 == a3 || *(_DWORD *)(a2 + 8) <= *(_DWORD *)(a3 + 8)) {
            return result;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7u:
      unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
      goto LABEL_51;
    case 8u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return turi::flexible_type_fail(0);
    case 9u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return turi::flexible_type_fail(0);
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (!v21 || (a4.n128_u64[0] = *v16, *(double *)v16 > *v17))
    {
LABEL_75:
      if (a2 == a3) {
        return result;
      }
      goto LABEL_76;
    }
    if (*(double *)v16 < *v17) {
      return result;
    }
    --v21;
    ++v17;
    ++v16;
    --v20;
  }
  while (v20);
LABEL_35:
  if (a2 == a3 || v19 <= v18) {
    return result;
  }
LABEL_76:
  switch(*(unsigned char *)(a3 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)a3;
        if (!*(void *)a3) {
          goto LABEL_102;
        }
        if (*((char *)v25 + 31) < 0) {
          operator delete((void *)v25[1]);
        }
        v26 = v25;
        uint64_t v27 = 0x1012C404EF22A49;
        goto LABEL_101;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)a3;
        if (!*(void *)a3) {
          goto LABEL_102;
        }
        v29 = (void *)v28[1];
        if (v29)
        {
          v28[2] = (atomic_ullong)v29;
          operator delete(v29);
        }
        v26 = v28;
        uint64_t v27 = 0x1080C409938AC02;
        goto LABEL_101;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)a3;
        if (!*(void *)a3) {
          goto LABEL_102;
        }
        v34 = (void **)(v30 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
        goto LABEL_93;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)a3;
        if (!*(void *)a3) {
          goto LABEL_102;
        }
        v34 = (void **)(v30 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_93:
        v26 = v30;
        uint64_t v27 = 0x1020C405E66F15BLL;
        goto LABEL_101;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)a3;
        if (!*(void *)a3) {
          goto LABEL_102;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
        v26 = v31;
        unsigned int v32 = -235920773;
        goto LABEL_100;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t result = *(void *)a3;
        if (*(void *)a3)
        {
          v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
          unsigned int v32 = 2071181815;
LABEL_100:
          uint64_t v27 = v32 | 0x1030C4000000000;
LABEL_101:
          uint64_t result = MEMORY[0x22A614FA0](v26, v27, a4);
        }
LABEL_102:
        *(void *)a3 = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v33 = *(void *)a2;
  *(void *)(a3 + 5) = *(void *)(a2 + 5);
  *(void *)a3 = v33;
  LODWORD(v33) = *(unsigned __int8 *)(a2 + 12);
  *(unsigned char *)(a3 + 12) = v33;
  switch((int)v33)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D0E8;
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          BOOL v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v5 = *(void **)(a1 + 32);
        if (v5)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          BOOL v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          BOOL v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          BOOL v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          BOOL v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          unsigned int v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = *(void **)(a1 + 16);
        if (v17)
        {
          unint64_t v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = v18;
            operator delete(v18);
          }
          unsigned int v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          unsigned int v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void *)(a1 + 16);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          unsigned int v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v22 = *(void **)(a1 + 16);
        if (v22)
        {
          double v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          atomic_ullong *volatile v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          unsigned int v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::add_element_simple(uint64_t a1, uint64_t a2, __n128 a3)
{
  return turi::unity_sarray::max(void)::$_0::operator()(a1 + 8, a2, a1 + 32, a3);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v4, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_224150C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224150DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224150FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241511B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241513B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241515B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_26D76D188;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  BOOL v3 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    uint64_t v4 = *(atomic_ullong **)a3;
    *(void *)(result + 21) = *(void *)(a3 + 5);
    *BOOL v3 = v4;
    unsigned int v5 = *(unsigned __int8 *)(a3 + 12);
    *(unsigned char *)(result + 28) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  *(void *)(result + 32) = 0;
  long long v6 = (atomic_ullong *volatile *)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 44) = 0;
  if (result + 32 != a3)
  {
    char v7 = *(atomic_ullong **)a3;
    *(void *)(result + 37) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v6 = v7;
    unsigned int v8 = *(unsigned __int8 *)(a3 + 12);
    *(unsigned char *)(result + 44) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  return result;
}

uint64_t turi::unity_sarray::min(void)::$_0::operator()(uint64_t result, uint64_t *a2, unsigned __int8 *a3, __n128 a4)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 != 7)
  {
    unsigned int v7 = a3[12];
    if (v7 != 7)
    {
LABEL_9:
      switch(v7)
      {
        case 0u:
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              uint64_t v11 = *a2;
              uint64_t v12 = *(void *)a3;
              goto LABEL_63;
            case 1:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              a4.n128_u64[0] = *a2;
              double v23 = (double)*(uint64_t *)a3;
              goto LABEL_67;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              uint64_t v12 = *(void *)a3;
              uint64_t v11 = *a2 << 8 >> 8;
LABEL_63:
              if (v11 >= v12) {
                return result;
              }
              goto LABEL_81;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1u:
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              a4.n128_u64[0] = *(void *)a3;
              if (*(double *)a3 <= (double)*a2) {
                return result;
              }
              goto LABEL_81;
            case 1:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              a4.n128_u64[0] = *a2;
              double v23 = *(double *)a3;
LABEL_67:
              if (a4.n128_f64[0] >= v23) {
                return result;
              }
              goto LABEL_81;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              a4.n128_f64[0] = (double)*((int *)a2 + 2) / 1000000.0 + (double)(*a2 << 8 >> 8);
              if (a4.n128_f64[0] >= *(double *)a3) {
                return result;
              }
              goto LABEL_81;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2u:
          unsigned int v13 = *((unsigned __int8 *)a2 + 12);
          if (v13 - 3 < 7 || v13 < 2) {
            return turi::flexible_type_fail(0);
          }
          if (v13 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t result = std::string::compare[abi:ne180100]((const void **)(*a2 + 8), (unsigned char *)(*(void *)a3 + 8));
          if (a2 == (uint64_t *)a3 || (result & 0x80000000) == 0) {
            return result;
          }
          goto LABEL_81;
        case 3u:
          unsigned int v15 = *((unsigned __int8 *)a2 + 12);
          if (v15 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v15 != 3) {
            return turi::flexible_type_fail(0);
          }
          uint64_t v16 = *(unint64_t **)(*a2 + 8);
          uint64_t v17 = *(double **)(*(void *)a3 + 8);
          unint64_t v18 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3;
          unint64_t v19 = (uint64_t)(*(void *)(*a2 + 16) - (void)v16) >> 3;
          if (*(unint64_t **)(*a2 + 16) == v16) {
            goto LABEL_37;
          }
          if (v19 <= 1) {
            uint64_t v20 = 1;
          }
          else {
            uint64_t v20 = (uint64_t)(*(void *)(*a2 + 16) - (void)v16) >> 3;
          }
          uint64_t v21 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3;
          break;
        case 4u:
          unsigned int v22 = *((unsigned __int8 *)a2 + 12);
          if (v22 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v22 != 4) {
            return turi::flexible_type_fail(0);
          }
          uint64_t result = turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v34, (uint64_t *)(*a2 + 8), (void *)(*(void *)a3 + 8));
          if (a2 == (uint64_t *)a3 || (result & 1) == 0) {
            return result;
          }
          goto LABEL_81;
        case 5u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 6u:
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3 || (uint64_t)(*(void *)a3 << 8) >> 8 <= *a2) {
                return result;
              }
              goto LABEL_81;
            case 1:
              if (a2 == (uint64_t *)a3) {
                return result;
              }
              a4.n128_f64[0] = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
              if (a4.n128_f64[0] <= *(double *)a2) {
                return result;
              }
              goto LABEL_81;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              uint64_t v24 = *a2 << 8 >> 8;
              if (v24 < (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_76;
              }
              if (v24 == (uint64_t)(*(void *)a3 << 8) >> 8
                && a2 != (uint64_t *)a3
                && *((_DWORD *)a2 + 2) < *((_DWORD *)a3 + 2))
              {
                goto LABEL_81;
              }
              return result;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7u:
          unsigned int v4 = *((unsigned __int8 *)a2 + 12);
          goto LABEL_52;
        case 8u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 9u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        if (!v21) {
          return result;
        }
        a4.n128_u64[0] = *v16;
        if (*(double *)v16 > *v17) {
          return result;
        }
        if (*(double *)v16 < *v17) {
          break;
        }
        --v21;
        ++v16;
        ++v17;
        if (!--v20)
        {
LABEL_37:
          if (a2 == (uint64_t *)a3 || v19 >= v18) {
            return result;
          }
          goto LABEL_81;
        }
      }
LABEL_76:
      if (a2 == (uint64_t *)a3) {
        return result;
      }
LABEL_81:
      switch(a3[12])
      {
        case 2u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v25 = *(void *)a3;
            if (!*(void *)a3) {
              goto LABEL_107;
            }
            if (*(char *)(v25 + 31) < 0) {
              operator delete(*(void **)(v25 + 8));
            }
            v26 = (void *)v25;
            uint64_t v27 = 0x1012C404EF22A49;
            goto LABEL_106;
          }
          break;
        case 3u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)a3;
            if (!*(void *)a3) {
              goto LABEL_107;
            }
            v29 = (void *)v28[1];
            if (v29)
            {
              v28[2] = (atomic_ullong)v29;
              operator delete(v29);
            }
            v26 = v28;
            uint64_t v27 = 0x1080C409938AC02;
            goto LABEL_106;
          }
          break;
        case 4u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)a3;
            if (!*(void *)a3) {
              goto LABEL_107;
            }
            v34 = (void **)(v30 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
            goto LABEL_98;
          }
          break;
        case 5u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)a3;
            if (!*(void *)a3) {
              goto LABEL_107;
            }
            v34 = (void **)(v30 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_98:
            v26 = v30;
            uint64_t v27 = 0x1020C405E66F15BLL;
            goto LABEL_106;
          }
          break;
        case 8u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)a3;
            if (!*(void *)a3) {
              goto LABEL_107;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
            v26 = v31;
            unsigned int v32 = -235920773;
            goto LABEL_105;
          }
          break;
        case 9u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = *(void *)a3;
            if (*(void *)a3)
            {
              v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
              unsigned int v32 = 2071181815;
LABEL_105:
              uint64_t v27 = v32 | 0x1030C4000000000;
LABEL_106:
              uint64_t result = MEMORY[0x22A614FA0](v26, v27, a4);
            }
LABEL_107:
            *(void *)a3 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v33 = *a2;
      *(void *)(a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(void *)a3 = v33;
      LODWORD(v33) = *((unsigned __int8 *)a2 + 12);
      a3[12] = v33;
      switch((int)v33)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return result;
      }
      return result;
    }
    unsigned int v8 = *(uint64_t **)result;
    if (*(unsigned __int8 **)result != a3)
    {
      uint64_t v9 = *v8;
      *(void *)(a3 + 5) = *(uint64_t *)((char *)v8 + 5);
      *(void *)a3 = v9;
      unsigned int v7 = *((unsigned __int8 *)v8 + 12);
      a3[12] = v7;
      if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
      {
        atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
        unsigned int v7 = a3[12];
      }
      goto LABEL_9;
    }
LABEL_52:
    if (v4 >= 0xA) {
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    return turi::flexible_type_fail(0);
  }
  return result;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D188;
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          BOOL v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v5 = *(void **)(a1 + 32);
        if (v5)
        {
          long long v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          BOOL v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          BOOL v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          BOOL v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          BOOL v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          unsigned int v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = *(void **)(a1 + 16);
        if (v17)
        {
          unint64_t v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = v18;
            operator delete(v18);
          }
          unsigned int v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          unsigned int v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void *)(a1 + 16);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          unsigned int v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v22 = *(void **)(a1 + 16);
        if (v22)
        {
          double v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          unsigned int v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::add_element_simple(uint64_t a1, uint64_t *a2, __n128 a3)
{
  return turi::unity_sarray::min(void)::$_0::operator()(a1 + 8, a2, (unsigned __int8 *)(a1 + 32), a3);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v4, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_224152498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224152A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224152C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224152E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26D76D228;
  *(void *)(result + 16) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (result + 16 != a2)
  {
    BOOL v3 = *(atomic_ullong **)a2;
    *(void *)(result + 21) = *(void *)(a2 + 5);
    *uint64_t v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(result + 28) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  *(void *)(result + 32) = 0;
  char v7 = (atomic_ullong *volatile *)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 44) = 0;
  if (result + 32 != a2)
  {
    uint64_t v8 = *(atomic_ullong **)a2;
    *(void *)(result + 37) = *(void *)(a2 + 5);
    *char v7 = v8;
    unsigned int v9 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(result + 44) = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

void turi::unity_sarray::sum(void)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          uint64_t v2 = *(void *)a2 + *(void *)a1;
          goto LABEL_12;
        case 1:
          double v94 = *(double *)a2 + (double)*(uint64_t *)a1;
          goto LABEL_161;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          v66 = *(double **)(*(void *)a2 + 8);
          uint64_t v67 = *(void *)(*(void *)a2 + 16) - (void)v66;
          if (v67)
          {
            unint64_t v68 = v67 >> 3;
            double v69 = (double)*(uint64_t *)a1;
            if (v68 <= 1) {
              unint64_t v68 = 1;
            }
            do
            {
              double *v66 = *v66 + v69;
              ++v66;
              --v68;
            }
            while (v68);
          }
          return;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 6:
          *(void *)a2 = *(void *)a2 & 0xFF00000000000000 | (*(void *)a2 + *(void *)a1) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_203;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          v70 = *(uint64_t **)a2;
          v72 = *(uint64_t **)(*(void *)a2 + 24);
          v71 = *(uint64_t **)(*(void *)a2 + 32);
          if (v71 == v72) {
            return;
          }
          if (!v70[1]) {
            return;
          }
          double v73 = (double)*(uint64_t *)a1;
          uint64_t v74 = 1;
          do
          {
            uint64_t v75 = *v72++;
            v74 *= v75;
          }
          while (v72 != v71);
          if (!v74) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
          unint64_t v76 = (v70[4] - v70[3]) >> 3;
          uint64_t v110 = 0;
          std::vector<unsigned long>::vector(&v111, v76, &v110);
          uint64_t v16 = v111;
          v77 = v112;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v78 = 0;
        uint64_t v79 = v77 - v16;
        if (v79)
        {
          unint64_t v80 = v79 >> 3;
          v81 = (uint64_t *)v70[6];
          if (v80 <= 1) {
            unint64_t v80 = 1;
          }
          do
          {
            uint64_t v83 = *(void *)v16;
            v16 += 8;
            uint64_t v82 = v83;
            uint64_t v84 = *v81++;
            v78 += v84 * v82;
            --v80;
          }
          while (v80);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
        *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) = *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) + v73;
        uint64_t v16 = v111;
        v77 = v112;
        uint64_t v85 = (v112 - v111) >> 3;
        uint64_t v86 = v85 - 1;
        if (v112 - v111 < 1) {
          goto LABEL_127;
        }
        uint64_t v87 = v70[3];
        unint64_t v88 = *(void *)&v111[8 * v86] + 1;
        *(void *)&v111[8 * v86] = v88;
        if (v88 < *(void *)(v87 + 8 * v86))
        {
LABEL_126:
          uint64_t v85 = 1;
LABEL_127:
          if (v86 < 0 || !v85) {
            goto LABEL_129;
          }
          continue;
        }
        break;
      }
      v89 = (unint64_t *)&v16[8 * v85 - 16];
      uint64_t v90 = v87 - 16;
      while (1)
      {
        uint64_t v91 = v85 - 1;
        v89[1] = 0;
        if (v85 - 1 <= 0) {
          goto LABEL_130;
        }
        unint64_t v92 = *v89 + 1;
        *v89-- = v92;
        unint64_t v93 = *(void *)(v90 + 8 * v85--);
        if (v92 < v93)
        {
          uint64_t v86 = v91 - 1;
          goto LABEL_126;
        }
      }
    case 1:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          uint64_t v2 = (uint64_t)(*(double *)a1 + (double)*(uint64_t *)a2);
LABEL_12:
          *(void *)a2 = v2;
          return;
        case 1:
          double v94 = *(double *)a1 + *(double *)a2;
LABEL_161:
          *(double *)a2 = v94;
          return;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          v102 = *(double **)(*(void *)a2 + 8);
          uint64_t v103 = *(void *)(*(void *)a2 + 16) - (void)v102;
          if (v103)
          {
            double v104 = *(double *)a1;
            unint64_t v105 = v103 >> 3;
            if (v105 <= 1) {
              unint64_t v105 = 1;
            }
            do
            {
              double *v102 = v104 + *v102;
              ++v102;
              --v105;
            }
            while (v105);
          }
          return;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 6:
          double v106 = (*(double *)a1 - (double)(uint64_t)floor(*(double *)a1)) * 1000000.0;
          v107 = *(uint64_t **)a2;
          unint64_t v108 = *(void *)a2 + vcvtmd_s64_f64(*(double *)a1);
          *(void *)a2 = *(void *)a2 & 0xFF00000000000000 | v108 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v109 = (uint64_t)v106 + *(int *)(a2 + 8);
          if (v109 >= 1000000)
          {
            *(void *)a2 = (v108 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v107 & 0xFF00000000000000;
            LODWORD(v109) = v109 - 1000000;
          }
          if (v109 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a2 + 8) = v109;
          return;
        case 7:
          goto LABEL_203;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          v42 = *(uint64_t **)a2;
          v44 = *(uint64_t **)(*(void *)a2 + 24);
          v43 = *(uint64_t **)(*(void *)a2 + 32);
          if (v43 == v44) {
            return;
          }
          if (!v42[1]) {
            return;
          }
          double v45 = *(double *)a1;
          uint64_t v46 = 1;
          do
          {
            uint64_t v47 = *v44++;
            v46 *= v47;
          }
          while (v44 != v43);
          if (!v46) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v42 + 1);
          unint64_t v48 = (v42[4] - v42[3]) >> 3;
          uint64_t v110 = 0;
          std::vector<unsigned long>::vector(&v111, v48, &v110);
          uint64_t v16 = v111;
          v49 = v112;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v50 = 0;
        uint64_t v51 = v49 - v16;
        if (v51)
        {
          unint64_t v52 = v51 >> 3;
          v53 = (uint64_t *)v42[6];
          if (v52 <= 1) {
            unint64_t v52 = 1;
          }
          do
          {
            uint64_t v55 = *(void *)v16;
            v16 += 8;
            uint64_t v54 = v55;
            uint64_t v56 = *v53++;
            v50 += v56 * v54;
            --v52;
          }
          while (v52);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v42 + 1);
        *(double *)(*(void *)v42[1] + 8 * (v42[9] + v50)) = v45 + *(double *)(*(void *)v42[1] + 8 * (v42[9] + v50));
        uint64_t v16 = v111;
        v49 = v112;
        uint64_t v57 = (v112 - v111) >> 3;
        uint64_t v58 = v57 - 1;
        if (v112 - v111 < 1) {
          goto LABEL_90;
        }
        uint64_t v59 = v42[3];
        unint64_t v60 = *(void *)&v111[8 * v58] + 1;
        *(void *)&v111[8 * v58] = v60;
        if (v60 < *(void *)(v59 + 8 * v58))
        {
LABEL_89:
          uint64_t v57 = 1;
LABEL_90:
          if (v58 < 0 || !v57) {
            goto LABEL_129;
          }
          continue;
        }
        break;
      }
      v61 = (unint64_t *)&v16[8 * v57 - 16];
      uint64_t v62 = v59 - 16;
      while (1)
      {
        uint64_t v63 = v57 - 1;
        v61[1] = 0;
        if (v57 - 1 <= 0) {
          goto LABEL_130;
        }
        unint64_t v64 = *v61 + 1;
        *v61-- = v64;
        unint64_t v65 = *(void *)(v62 + 8 * v57--);
        if (v64 < v65)
        {
          uint64_t v58 = v63 - 1;
          goto LABEL_89;
        }
      }
    case 2:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          double v3 = *(double *)a1;
          if (**(void **)a2 != 1) {
            operator new();
          }
          BOOL v4 = (std::string *)(*(void *)a2 + 8);
          int v5 = *(char *)(*(void *)&v3 + 31);
          if (v5 >= 0) {
            long long v6 = (const std::string::value_type *)(*(void *)&v3 + 8);
          }
          else {
            long long v6 = *(const std::string::value_type **)(*(void *)&v3 + 8);
          }
          if (v5 >= 0) {
            std::string::size_type v7 = *(unsigned __int8 *)(*(void *)&v3 + 31);
          }
          else {
            std::string::size_type v7 = *(void *)(*(void *)&v3 + 16);
          }
          std::string::append(v4, v6, v7);
          return;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          double v95 = *(double *)a1;
          if (**(void **)a2 != 1) {
            operator new();
          }
          v96 = *(uint64_t **)a2;
          turi::flexible_type_fail(v96[2] - v96[1] == *(void *)(*(void *)&v95 + 16)
                                                    - *(void *)(*(void *)&v95 + 8));
          v97 = (double *)v96[1];
          uint64_t v98 = v96[2] - (void)v97;
          if (v98)
          {
            unint64_t v99 = v98 >> 3;
            v100 = *(double **)(*(void *)&v95 + 8);
            if (v99 <= 1) {
              unint64_t v99 = 1;
            }
            do
            {
              double v101 = *v100++;
              double *v97 = v101 + *v97;
              ++v97;
              --v99;
            }
            while (v99);
          }
          return;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 4:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 6:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      return;
    case 8:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 8:
          goto LABEL_37;
        case 9:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 9:
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_203;
        case 2:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 3:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_203;
        case 4:
          if (**(void **)a2 != 1) {
            operator new();
          }
          goto LABEL_208;
        case 5:
          if (**(void **)a2 != 1) {
            operator new();
          }
LABEL_208:
          turi::flexible_type_fail(0);
          return;
        case 8:
LABEL_37:
          if (**(void **)a2 != 1) {
            operator new();
          }
LABEL_203:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v8 = *(double *)a1;
          if (**(void **)a2 != 1) {
            operator new();
          }
          unsigned int v9 = *(uint64_t **)a2;
          uint64_t v10 = (uint64_t *)(*(void *)a2 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v10, *(void *)&v8 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v12 = (uint64_t *)v9[3];
          uint64_t v11 = (uint64_t *)v9[4];
          if (v11 == v12) {
            return;
          }
          if (!*v10) {
            return;
          }
          uint64_t v13 = 1;
          do
          {
            uint64_t v14 = *v12++;
            v13 *= v14;
          }
          while (v12 != v11);
          if (!v13) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v10);
          unint64_t v15 = (v9[4] - v9[3]) >> 3;
          uint64_t v110 = 0;
          std::vector<unsigned long>::vector(&v111, v15, &v110);
          uint64_t v16 = v111;
          uint64_t v17 = v112;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    uint64_t v18 = v17 - v16;
    if (v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = v18 >> 3;
      unsigned int v21 = *(uint64_t **)(*(void *)&v8 + 48);
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      unsigned int v22 = (uint64_t *)v16;
      unint64_t v23 = v20;
      do
      {
        uint64_t v25 = *v22++;
        uint64_t v24 = v25;
        uint64_t v26 = *v21++;
        v19 += v26 * v24;
        --v23;
      }
      while (v23);
      uint64_t v27 = 0;
      double v28 = *(double *)(**(void **)(*(void *)&v8 + 8) + 8 * (*(void *)(*(void *)&v8 + 72) + v19));
      v29 = (uint64_t *)v9[6];
      do
      {
        uint64_t v31 = *(void *)v16;
        v16 += 8;
        uint64_t v30 = v31;
        uint64_t v32 = *v29++;
        v27 += v32 * v30;
        --v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v27 = 0;
      double v28 = *(double *)(**(void **)(*(void *)&v8 + 8) + 8 * *(void *)(*(void *)&v8 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v10);
    *(double *)(*(void *)v9[1] + 8 * (v9[9] + v27)) = v28 + *(double *)(*(void *)v9[1] + 8 * (v9[9] + v27));
    uint64_t v16 = v111;
    uint64_t v17 = v112;
    uint64_t v33 = (v112 - v111) >> 3;
    uint64_t v34 = v33 - 1;
    if (v112 - v111 >= 1)
    {
      uint64_t v35 = v9[3];
      unint64_t v36 = *(void *)&v111[8 * v34] + 1;
      *(void *)&v111[8 * v34] = v36;
      if (v36 >= *(void *)(v35 + 8 * v34))
      {
        v37 = (unint64_t *)&v16[8 * v33 - 16];
        uint64_t v38 = v35 - 16;
        while (1)
        {
          uint64_t v39 = v33 - 1;
          v37[1] = 0;
          if (v33 - 1 <= 0) {
            goto LABEL_130;
          }
          unint64_t v40 = *v37 + 1;
          *v37-- = v40;
          unint64_t v41 = *(void *)(v38 + 8 * v33--);
          if (v40 < v41)
          {
            uint64_t v34 = v39 - 1;
            break;
          }
        }
      }
      uint64_t v33 = 1;
    }
  }
  while ((v34 & 0x8000000000000000) == 0 && v33);
LABEL_129:
  if (!v16) {
    return;
  }
LABEL_130:
  v112 = v16;
  operator delete(v16);
}

void sub_224154608(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_224154734(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x22415472CLL);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D228;
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          double v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v5 = *(void **)(a1 + 32);
        if (v5)
        {
          long long v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          double v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          double v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          double v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          double v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          unint64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = *(void **)(a1 + 16);
        if (v17)
        {
          uint64_t v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = v18;
            operator delete(v18);
          }
          unint64_t v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          unint64_t v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void *)(a1 + 16);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          unint64_t v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v22 = *(void **)(a1 + 16);
        if (v22)
        {
          unint64_t v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          unint64_t v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::new_instance()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::add_element_simple(uint64_t a1, uint64_t a2)
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v4, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_224154F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241550B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241552B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241554B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241556B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241558B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::generic_aggregator(uint64_t result, uint64_t a2, char *a3)
{
  *(void *)uint64_t result = &unk_26D76D2C8;
  *(void *)(result + 8) = a2;
  *(unsigned char *)(result + 16) = *a3;
  *(void *)(result + 24) = 0;
  double v3 = (atomic_ullong *volatile *)(result + 24);
  *(_DWORD *)(result + 32) = 0;
  *(unsigned char *)(result + 36) = 0;
  if ((char *)(result + 16) != a3)
  {
    uint64_t v4 = (atomic_ullong *)*((void *)a3 + 1);
    *(void *)(result + 29) = *(void *)(a3 + 13);
    *double v3 = v4;
    unsigned int v5 = a3[20];
    *(unsigned char *)(result + 36) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  char v6 = *a3;
  *(void *)(result + 48) = 0;
  char v7 = (atomic_ullong *volatile *)(result + 48);
  *(unsigned char *)(result + 40) = v6;
  *(_DWORD *)(result + 56) = 0;
  *(unsigned char *)(result + 60) = 0;
  if ((char *)(result + 40) != a3)
  {
    uint64_t v8 = (atomic_ullong *)*((void *)a3 + 1);
    *(void *)(result + 53) = *(void *)(a3 + 13);
    *char v7 = v8;
    unsigned int v9 = a3[20];
    *(unsigned char *)(result + 60) = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

void turi::unity_sarray::sum(void)::$_2::operator()(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)a3)
  {
    std::pair<BOOL,turi::flexible_type>::operator=[abi:ne180100]((unsigned char *)a3, (unsigned char *)a2);
    return;
  }
  if (!*(unsigned char *)a2) {
    return;
  }
  char v6 = (uint64_t **)(a3 + 8);
  int v7 = *(unsigned __int8 *)(a3 + 20);
  if (v7 == 9)
  {
    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(*v6 + 1), *(void *)(a2 + 8) + 8))
    {
LABEL_23:
      **a1 = 1;
      return;
    }
    int v7 = *(unsigned __int8 *)(a3 + 20);
  }
  uint64_t v8 = 1;
  switch(v7)
  {
    case 3:
      unsigned int v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 3;
      goto LABEL_13;
    case 4:
      unsigned int v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 4;
      goto LABEL_13;
    case 5:
      unsigned int v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 5;
LABEL_13:
      uint64_t v8 = (uint64_t)(*v10 - *v9) >> v11;
      break;
    case 9:
      unsigned int v21 = (uint64_t *)(*v6)[3];
      uint64_t v20 = (uint64_t *)(*v6)[4];
      if (v20 == v21)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = (*v6)[1];
        if (v8)
        {
          uint64_t v8 = 1;
          do
          {
            uint64_t v22 = *v21++;
            v8 *= v22;
          }
          while (v21 != v20);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v12 = 1;
  switch(*(unsigned char *)(a2 + 20))
  {
    case 3:
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v13 + 8);
      unint64_t v15 = (void *)(v13 + 16);
      char v16 = 3;
      goto LABEL_18;
    case 4:
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v18 + 8);
      unint64_t v15 = (void *)(v18 + 16);
      char v16 = 4;
      goto LABEL_18;
    case 5:
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v17 + 8);
      unint64_t v15 = (void *)(v17 + 16);
      char v16 = 5;
LABEL_18:
      uint64_t v12 = (uint64_t)(*v15 - *v14) >> v16;
      break;
    case 9:
      unint64_t v23 = *(void **)(a2 + 8);
      uint64_t v25 = (uint64_t *)v23[3];
      uint64_t v24 = (uint64_t *)v23[4];
      if (v24 == v25)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = v23[1];
        if (v12)
        {
          uint64_t v12 = 1;
          do
          {
            uint64_t v26 = *v25++;
            v12 *= v26;
          }
          while (v25 != v24);
        }
      }
      break;
    default:
      break;
  }
  if (v8 != v12) {
    goto LABEL_23;
  }
  switch(*(unsigned char *)(a2 + 20))
  {
    case 0:
      switch(v7)
      {
        case 0:
          uint64_t v19 = (uint64_t)*v6 + *(void *)(a2 + 8);
          goto LABEL_63;
        case 1:
          double v118 = *(double *)v6 + (double)*(uint64_t *)(a2 + 8);
          goto LABEL_196;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          v66 = (double *)(*v6)[1];
          uint64_t v67 = (*v6)[2] - (void)v66;
          if (v67)
          {
            unint64_t v68 = v67 >> 3;
            double v69 = (double)*(uint64_t *)(a2 + 8);
            if (v68 <= 1) {
              unint64_t v68 = 1;
            }
            do
            {
              double *v66 = *v66 + v69;
              ++v66;
              --v68;
            }
            while (v68);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 6:
          void *v6 = (uint64_t *)((unint64_t)*v6 & 0xFF00000000000000 | ((unint64_t)*v6 + *(void *)(a2 + 8)) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_247;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          v70 = *v6;
          v72 = (uint64_t *)(*v6)[3];
          v71 = (uint64_t *)(*v6)[4];
          if (v71 == v72) {
            return;
          }
          if (!v70[1]) {
            return;
          }
          double v73 = (double)*(uint64_t *)(a2 + 8);
          uint64_t v74 = 1;
          do
          {
            uint64_t v75 = *v72++;
            v74 *= v75;
          }
          while (v72 != v71);
          if (!v74) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
          unint64_t v76 = (v70[4] - v70[3]) >> 3;
          uint64_t v134 = 0;
          std::vector<unsigned long>::vector(&v135, v76, &v134);
          unint64_t v40 = v135;
          v77 = v136;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v78 = 0;
        uint64_t v79 = v77 - v40;
        if (v79)
        {
          unint64_t v80 = v79 >> 3;
          v81 = (uint64_t *)v70[6];
          if (v80 <= 1) {
            unint64_t v80 = 1;
          }
          do
          {
            uint64_t v83 = *(void *)v40;
            v40 += 8;
            uint64_t v82 = v83;
            uint64_t v84 = *v81++;
            v78 += v84 * v82;
            --v80;
          }
          while (v80);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
        *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) = *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) + v73;
        unint64_t v40 = v135;
        v77 = v136;
        uint64_t v85 = (v136 - v135) >> 3;
        uint64_t v86 = v85 - 1;
        if (v136 - v135 < 1) {
          goto LABEL_143;
        }
        uint64_t v87 = v70[3];
        unint64_t v88 = *(void *)&v135[8 * v86] + 1;
        *(void *)&v135[8 * v86] = v88;
        if (v88 < *(void *)(v87 + 8 * v86))
        {
LABEL_142:
          uint64_t v85 = 1;
LABEL_143:
          if (v86 < 0 || !v85) {
            goto LABEL_167;
          }
          continue;
        }
        break;
      }
      v89 = (unint64_t *)&v40[8 * v85 - 16];
      uint64_t v90 = v87 - 16;
      while (1)
      {
        uint64_t v91 = v85 - 1;
        v89[1] = 0;
        if (v85 - 1 <= 0) {
          goto LABEL_168;
        }
        unint64_t v92 = *v89 + 1;
        *v89-- = v92;
        unint64_t v93 = *(void *)(v90 + 8 * v85--);
        if (v92 < v93)
        {
          uint64_t v86 = v91 - 1;
          goto LABEL_142;
        }
      }
    case 1:
      switch(v7)
      {
        case 0:
          uint64_t v19 = (uint64_t)(*(double *)(a2 + 8) + (double)(uint64_t)*v6);
LABEL_63:
          void *v6 = (uint64_t *)v19;
          return;
        case 1:
          double v118 = *(double *)(a2 + 8) + *(double *)v6;
LABEL_196:
          *(double *)char v6 = v118;
          return;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          v126 = (double *)(*v6)[1];
          uint64_t v127 = (*v6)[2] - (void)v126;
          if (v127)
          {
            double v128 = *(double *)(a2 + 8);
            unint64_t v129 = v127 >> 3;
            if (v129 <= 1) {
              unint64_t v129 = 1;
            }
            do
            {
              double *v126 = v128 + *v126;
              ++v126;
              --v129;
            }
            while (v129);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 6:
          double v130 = *(double *)(a2 + 8);
          uint64_t v131 = *(void *)(a3 + 8);
          uint64_t v132 = v131 + vcvtmd_s64_f64(v130);
          *(void *)(a3 + 8) = v131 & 0xFF00000000000000 | v132 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v133 = (uint64_t)((v130 - (double)(uint64_t)floor(v130)) * 1000000.0) + *(int *)(a3 + 16);
          if (v133 >= 1000000)
          {
            void *v6 = (uint64_t *)((v132 + 1) & 0xFFFFFFFFFFFFFFLL | v131 & 0xFF00000000000000);
            LODWORD(v133) = v133 - 1000000;
          }
          if (v133 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 16) = v133;
          return;
        case 7:
          goto LABEL_247;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          double v94 = *v6;
          v96 = (uint64_t *)(*v6)[3];
          double v95 = (uint64_t *)(*v6)[4];
          if (v95 == v96) {
            return;
          }
          if (!v94[1]) {
            return;
          }
          double v97 = *(double *)(a2 + 8);
          uint64_t v98 = 1;
          do
          {
            uint64_t v99 = *v96++;
            v98 *= v99;
          }
          while (v96 != v95);
          if (!v98) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v94 + 1);
          unint64_t v100 = (v94[4] - v94[3]) >> 3;
          uint64_t v134 = 0;
          std::vector<unsigned long>::vector(&v135, v100, &v134);
          unint64_t v40 = v135;
          double v101 = v136;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v102 = 0;
        uint64_t v103 = v101 - v40;
        if (v103)
        {
          unint64_t v104 = v103 >> 3;
          unint64_t v105 = (uint64_t *)v94[6];
          if (v104 <= 1) {
            unint64_t v104 = 1;
          }
          do
          {
            uint64_t v107 = *(void *)v40;
            v40 += 8;
            uint64_t v106 = v107;
            uint64_t v108 = *v105++;
            v102 += v108 * v106;
            --v104;
          }
          while (v104);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v94 + 1);
        *(double *)(*(void *)v94[1] + 8 * (v94[9] + v102)) = v97
                                                             + *(double *)(*(void *)v94[1] + 8 * (v94[9] + v102));
        unint64_t v40 = v135;
        double v101 = v136;
        uint64_t v109 = (v136 - v135) >> 3;
        uint64_t v110 = v109 - 1;
        if (v136 - v135 < 1) {
          goto LABEL_165;
        }
        uint64_t v111 = v94[3];
        unint64_t v112 = *(void *)&v135[8 * v110] + 1;
        *(void *)&v135[8 * v110] = v112;
        if (v112 < *(void *)(v111 + 8 * v110))
        {
LABEL_164:
          uint64_t v109 = 1;
LABEL_165:
          if (v110 < 0 || !v109) {
            goto LABEL_167;
          }
          continue;
        }
        break;
      }
      v113 = (unint64_t *)&v40[8 * v109 - 16];
      uint64_t v114 = v111 - 16;
      while (1)
      {
        uint64_t v115 = v109 - 1;
        v113[1] = 0;
        if (v109 - 1 <= 0) {
          goto LABEL_168;
        }
        unint64_t v116 = *v113 + 1;
        *v113-- = v116;
        unint64_t v117 = *(void *)(v114 + 8 * v109--);
        if (v116 < v117)
        {
          uint64_t v110 = v115 - 1;
          goto LABEL_164;
        }
      }
    case 2:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          uint64_t v27 = *(void *)(a2 + 8);
          if (**v6 != 1) {
            operator new();
          }
          double v28 = (std::string *)(*v6 + 1);
          int v29 = *(char *)(v27 + 31);
          if (v29 >= 0) {
            uint64_t v30 = (const std::string::value_type *)(v27 + 8);
          }
          else {
            uint64_t v30 = *(const std::string::value_type **)(v27 + 8);
          }
          if (v29 >= 0) {
            std::string::size_type v31 = *(unsigned __int8 *)(v27 + 31);
          }
          else {
            std::string::size_type v31 = *(void *)(v27 + 16);
          }
          std::string::append(v28, v30, v31);
          return;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          uint64_t v119 = *(void *)(a2 + 8);
          if (**v6 != 1) {
            operator new();
          }
          v120 = *v6;
          turi::flexible_type_fail((*v6)[2] - (*v6)[1] == *(void *)(v119 + 16) - *(void *)(v119 + 8));
          v121 = (double *)v120[1];
          uint64_t v122 = v120[2] - (void)v121;
          if (v122)
          {
            unint64_t v123 = v122 >> 3;
            v124 = *(double **)(v119 + 8);
            if (v123 <= 1) {
              unint64_t v123 = 1;
            }
            do
            {
              double v125 = *v124++;
              double *v121 = v125 + *v121;
              ++v121;
              --v123;
            }
            while (v123);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 4:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 6:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 8:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
          goto LABEL_73;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 9:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_247;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_247;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_249;
        case 8:
LABEL_73:
          if (**v6 != 1) {
            operator new();
          }
LABEL_247:
LABEL_249:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v32 = *(void *)(a2 + 8);
          if (**v6 != 1) {
            operator new();
          }
          uint64_t v33 = *v6;
          uint64_t v34 = *v6 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v34, v32 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          unint64_t v36 = (uint64_t *)v33[3];
          uint64_t v35 = (uint64_t *)v33[4];
          if (v35 == v36) {
            return;
          }
          if (!*v34) {
            return;
          }
          uint64_t v37 = 1;
          do
          {
            uint64_t v38 = *v36++;
            v37 *= v38;
          }
          while (v36 != v35);
          if (!v37) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v34);
          unint64_t v39 = (v33[4] - v33[3]) >> 3;
          uint64_t v134 = 0;
          std::vector<unsigned long>::vector(&v135, v39, &v134);
          unint64_t v40 = v135;
          unint64_t v41 = v136;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    uint64_t v42 = v41 - v40;
    if (v42)
    {
      uint64_t v43 = 0;
      unint64_t v44 = v42 >> 3;
      double v45 = *(uint64_t **)(v32 + 48);
      if (v44 <= 1) {
        unint64_t v44 = 1;
      }
      uint64_t v46 = (uint64_t *)v40;
      unint64_t v47 = v44;
      do
      {
        uint64_t v49 = *v46++;
        uint64_t v48 = v49;
        uint64_t v50 = *v45++;
        v43 += v50 * v48;
        --v47;
      }
      while (v47);
      uint64_t v51 = 0;
      double v52 = *(double *)(**(void **)(v32 + 8) + 8 * (*(void *)(v32 + 72) + v43));
      v53 = (uint64_t *)v33[6];
      do
      {
        uint64_t v55 = *(void *)v40;
        v40 += 8;
        uint64_t v54 = v55;
        uint64_t v56 = *v53++;
        v51 += v56 * v54;
        --v44;
      }
      while (v44);
    }
    else
    {
      uint64_t v51 = 0;
      double v52 = *(double *)(**(void **)(v32 + 8) + 8 * *(void *)(v32 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v34);
    *(double *)(*(void *)v33[1] + 8 * (v33[9] + v51)) = v52 + *(double *)(*(void *)v33[1] + 8 * (v33[9] + v51));
    unint64_t v40 = v135;
    unint64_t v41 = v136;
    uint64_t v57 = (v136 - v135) >> 3;
    uint64_t v58 = v57 - 1;
    if (v136 - v135 >= 1)
    {
      uint64_t v59 = v33[3];
      unint64_t v60 = *(void *)&v135[8 * v58] + 1;
      *(void *)&v135[8 * v58] = v60;
      if (v60 >= *(void *)(v59 + 8 * v58))
      {
        v61 = (unint64_t *)&v40[8 * v57 - 16];
        uint64_t v62 = v59 - 16;
        while (1)
        {
          uint64_t v63 = v57 - 1;
          v61[1] = 0;
          if (v57 - 1 <= 0) {
            goto LABEL_168;
          }
          unint64_t v64 = *v61 + 1;
          *v61-- = v64;
          unint64_t v65 = *(void *)(v62 + 8 * v57--);
          if (v64 < v65)
          {
            uint64_t v58 = v63 - 1;
            break;
          }
        }
      }
      uint64_t v57 = 1;
    }
  }
  while ((v58 & 0x8000000000000000) == 0 && v57);
LABEL_167:
  if (!v40) {
    return;
  }
LABEL_168:
  v136 = v40;
  operator delete(v40);
}

void sub_2241573D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_224157514(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x22415750CLL);
}

void *turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::~generic_aggregator(void *a1)
{
  *a1 = &unk_26D76D2C8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)(a1 + 5));
  std::pair<BOOL,turi::flexible_type>::~pair(v2);
  return a1;
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::new_instance()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::add_element_simple(uint64_t a1, unsigned char *a2)
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec((uint64_t)&v4, a1 + 40);
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_224157988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load()
{
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::~generic_aggregator(void *a1)
{
  *a1 = &unk_26D76D2C8;
  uint64_t v1 = (uint64_t)(a1 + 2);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)(a1 + 5));
  std::pair<BOOL,turi::flexible_type>::~pair(v1);
  JUMPOUT(0x22A614FA0);
}

void turi::unity_sarray::sum(void)::$_1::operator()(unsigned char **a1, unsigned char *a2, uint64_t a3)
{
  if (a2[12] == 7) {
    return;
  }
  if (!*(unsigned char *)a3)
  {
    *(unsigned char *)a3 = 1;
    uint64_t v12 = (atomic_ullong *volatile *)(a3 + 8);
    if ((unsigned char *)(a3 + 8) != a2)
    {
      switch(*(unsigned char *)(a3 + 20))
      {
        case 2:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v13 = *v12;
            if (!*v12) {
              goto LABEL_60;
            }
            if (*((char *)v13 + 31) < 0) {
              operator delete((void *)v13[1]);
            }
            uint64_t v14 = v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v29 = *v12;
            if (!*v12) {
              goto LABEL_60;
            }
            uint64_t v30 = (void *)v29[1];
            if (v30)
            {
              v29[2] = (atomic_ullong)v30;
              operator delete(v30);
            }
            uint64_t v14 = v29;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v12;
            if (!*v12) {
              goto LABEL_60;
            }
            v141 = (void **)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v141);
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v12;
            if (!*v12) {
              goto LABEL_60;
            }
            v141 = (void **)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v141);
LABEL_54:
            uint64_t v14 = v27;
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v31 = *v12;
            if (!*v12) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
            uint64_t v14 = v31;
            unsigned int v28 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v12)
            {
              uint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
              unsigned int v28 = 2071181815;
LABEL_58:
              uint64_t v15 = v28 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x22A614FA0](v14, v15);
            }
LABEL_60:
            *uint64_t v12 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v32 = *(atomic_ullong **)a2;
      *(void *)(a3 + 13) = *(void *)(a2 + 5);
      *uint64_t v12 = v32;
      LODWORD(v32) = a2[12];
      *(unsigned char *)(a3 + 20) = (_BYTE)v32;
      switch((int)v32)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*v12, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  long long v6 = (uint64_t **)(a3 + 8);
  int v7 = *(unsigned __int8 *)(a3 + 20);
  if (v7 == 9)
  {
    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(*v6 + 1), *(void *)a2 + 8))
    {
LABEL_27:
      **a1 = 1;
      return;
    }
    int v7 = *(unsigned __int8 *)(a3 + 20);
  }
  uint64_t v8 = 1;
  switch(v7)
  {
    case 3:
      uint64_t v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 3;
      goto LABEL_17;
    case 4:
      uint64_t v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 4;
      goto LABEL_17;
    case 5:
      uint64_t v9 = *v6 + 1;
      uint64_t v10 = *v6 + 2;
      char v11 = 5;
LABEL_17:
      uint64_t v8 = (uint64_t)(*v10 - *v9) >> v11;
      break;
    case 9:
      uint64_t v22 = (uint64_t *)(*v6)[3];
      unsigned int v21 = (uint64_t *)(*v6)[4];
      if (v21 == v22)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = (*v6)[1];
        if (v8)
        {
          uint64_t v8 = 1;
          do
          {
            uint64_t v23 = *v22++;
            v8 *= v23;
          }
          while (v22 != v21);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v16 = 1;
  switch(a2[12])
  {
    case 3:
      uint64_t v17 = (void *)(*(void *)a2 + 8);
      uint64_t v18 = (void *)(*(void *)a2 + 16);
      char v19 = 3;
      goto LABEL_22;
    case 4:
      uint64_t v17 = (void *)(*(void *)a2 + 8);
      uint64_t v18 = (void *)(*(void *)a2 + 16);
      char v19 = 4;
      goto LABEL_22;
    case 5:
      uint64_t v17 = (void *)(*(void *)a2 + 8);
      uint64_t v18 = (void *)(*(void *)a2 + 16);
      char v19 = 5;
LABEL_22:
      uint64_t v16 = (uint64_t)(*v18 - *v17) >> v19;
      break;
    case 9:
      uint64_t v25 = *(uint64_t **)(*(void *)a2 + 24);
      uint64_t v24 = *(uint64_t **)(*(void *)a2 + 32);
      if (v24 == v25)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(*(void *)a2 + 8);
        if (v16)
        {
          uint64_t v16 = 1;
          do
          {
            uint64_t v26 = *v25++;
            v16 *= v26;
          }
          while (v25 != v24);
        }
      }
      break;
    default:
      break;
  }
  if (v8 != v16) {
    goto LABEL_27;
  }
  switch(a2[12])
  {
    case 0:
      switch(v7)
      {
        case 0:
          uint64_t v20 = (uint64_t)*v6 + *(void *)a2;
          goto LABEL_90;
        case 1:
          double v124 = *(double *)v6 + (double)*(uint64_t *)a2;
          goto LABEL_223;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          v72 = (double *)(*v6)[1];
          uint64_t v73 = (*v6)[2] - (void)v72;
          if (v73)
          {
            unint64_t v74 = v73 >> 3;
            double v75 = (double)*(uint64_t *)a2;
            if (v74 <= 1) {
              unint64_t v74 = 1;
            }
            do
            {
              double *v72 = *v72 + v75;
              ++v72;
              --v74;
            }
            while (v74);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 6:
          void *v6 = (uint64_t *)((unint64_t)*v6 & 0xFF00000000000000 | ((unint64_t)*v6 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_274;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          unint64_t v76 = *v6;
          uint64_t v78 = (uint64_t *)(*v6)[3];
          v77 = (uint64_t *)(*v6)[4];
          if (v77 == v78) {
            return;
          }
          if (!v76[1]) {
            return;
          }
          double v79 = (double)*(uint64_t *)a2;
          uint64_t v80 = 1;
          do
          {
            uint64_t v81 = *v78++;
            v80 *= v81;
          }
          while (v78 != v77);
          if (!v80) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v76 + 1);
          unint64_t v82 = (v76[4] - v76[3]) >> 3;
          uint64_t v140 = 0;
          std::vector<unsigned long>::vector(&v141, v82, &v140);
          uint64_t v46 = v141;
          uint64_t v83 = v142;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v84 = 0;
        uint64_t v85 = (char *)v83 - (char *)v46;
        if (v85)
        {
          unint64_t v86 = v85 >> 3;
          uint64_t v87 = (uint64_t *)v76[6];
          if (v86 <= 1) {
            unint64_t v86 = 1;
          }
          do
          {
            uint64_t v89 = (uint64_t)*v46++;
            uint64_t v88 = v89;
            uint64_t v90 = *v87++;
            v84 += v90 * v88;
            --v86;
          }
          while (v86);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v76 + 1);
        *(double *)(*(void *)v76[1] + 8 * (v76[9] + v84)) = *(double *)(*(void *)v76[1] + 8 * (v76[9] + v84)) + v79;
        uint64_t v46 = v141;
        uint64_t v83 = v142;
        uint64_t v91 = v142 - v141;
        uint64_t v92 = v91 - 1;
        if ((char *)v142 - (char *)v141 < 1) {
          goto LABEL_170;
        }
        uint64_t v93 = v76[3];
        double v94 = (char *)v141[v92] + 1;
        v141[v92] = v94;
        if ((unint64_t)v94 < *(void *)(v93 + 8 * v92))
        {
LABEL_169:
          uint64_t v91 = 1;
LABEL_170:
          if (v92 < 0 || !v91) {
            goto LABEL_194;
          }
          continue;
        }
        break;
      }
      double v95 = (unint64_t *)&v46[v91 - 2];
      uint64_t v96 = v93 - 16;
      while (1)
      {
        uint64_t v97 = v91 - 1;
        v95[1] = 0;
        if (v91 - 1 <= 0) {
          goto LABEL_195;
        }
        unint64_t v98 = *v95 + 1;
        *v95-- = v98;
        unint64_t v99 = *(void *)(v96 + 8 * v91--);
        if (v98 < v99)
        {
          uint64_t v92 = v97 - 1;
          goto LABEL_169;
        }
      }
    case 1:
      switch(v7)
      {
        case 0:
          uint64_t v20 = (uint64_t)(*(double *)a2 + (double)(uint64_t)*v6);
LABEL_90:
          void *v6 = (uint64_t *)v20;
          return;
        case 1:
          double v124 = *(double *)a2 + *(double *)v6;
LABEL_223:
          *(double *)long long v6 = v124;
          return;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          uint64_t v132 = (double *)(*v6)[1];
          uint64_t v133 = (*v6)[2] - (void)v132;
          if (v133)
          {
            double v134 = *(double *)a2;
            unint64_t v135 = v133 >> 3;
            if (v135 <= 1) {
              unint64_t v135 = 1;
            }
            do
            {
              *uint64_t v132 = v134 + *v132;
              ++v132;
              --v135;
            }
            while (v135);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 6:
          double v136 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          uint64_t v137 = *(void *)(a3 + 8);
          uint64_t v138 = v137 + vcvtmd_s64_f64(*(double *)a2);
          *(void *)(a3 + 8) = v137 & 0xFF00000000000000 | v138 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v139 = (uint64_t)v136 + *(int *)(a3 + 16);
          if (v139 >= 1000000)
          {
            void *v6 = (uint64_t *)((v138 + 1) & 0xFFFFFFFFFFFFFFLL | v137 & 0xFF00000000000000);
            LODWORD(v139) = v139 - 1000000;
          }
          if (v139 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 16) = v139;
          return;
        case 7:
          goto LABEL_274;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          unint64_t v100 = *v6;
          uint64_t v102 = (uint64_t *)(*v6)[3];
          double v101 = (uint64_t *)(*v6)[4];
          if (v101 == v102) {
            return;
          }
          if (!v100[1]) {
            return;
          }
          double v103 = *(double *)a2;
          uint64_t v104 = 1;
          do
          {
            uint64_t v105 = *v102++;
            v104 *= v105;
          }
          while (v102 != v101);
          if (!v104) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v100 + 1);
          unint64_t v106 = (v100[4] - v100[3]) >> 3;
          uint64_t v140 = 0;
          std::vector<unsigned long>::vector(&v141, v106, &v140);
          uint64_t v46 = v141;
          uint64_t v107 = v142;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v108 = 0;
        uint64_t v109 = (char *)v107 - (char *)v46;
        if (v109)
        {
          unint64_t v110 = v109 >> 3;
          uint64_t v111 = (uint64_t *)v100[6];
          if (v110 <= 1) {
            unint64_t v110 = 1;
          }
          do
          {
            uint64_t v113 = (uint64_t)*v46++;
            uint64_t v112 = v113;
            uint64_t v114 = *v111++;
            v108 += v114 * v112;
            --v110;
          }
          while (v110);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v100 + 1);
        *(double *)(*(void *)v100[1] + 8 * (v100[9] + v108)) = v103
                                                               + *(double *)(*(void *)v100[1] + 8 * (v100[9] + v108));
        uint64_t v46 = v141;
        uint64_t v107 = v142;
        uint64_t v115 = v142 - v141;
        uint64_t v116 = v115 - 1;
        if ((char *)v142 - (char *)v141 < 1) {
          goto LABEL_192;
        }
        uint64_t v117 = v100[3];
        double v118 = (char *)v141[v116] + 1;
        v141[v116] = v118;
        if ((unint64_t)v118 < *(void *)(v117 + 8 * v116))
        {
LABEL_191:
          uint64_t v115 = 1;
LABEL_192:
          if (v116 < 0 || !v115) {
            goto LABEL_194;
          }
          continue;
        }
        break;
      }
      uint64_t v119 = (unint64_t *)&v46[v115 - 2];
      uint64_t v120 = v117 - 16;
      while (1)
      {
        uint64_t v121 = v115 - 1;
        v119[1] = 0;
        if (v115 - 1 <= 0) {
          goto LABEL_195;
        }
        unint64_t v122 = *v119 + 1;
        *v119-- = v122;
        unint64_t v123 = *(void *)(v120 + 8 * v115--);
        if (v122 < v123)
        {
          uint64_t v116 = v121 - 1;
          goto LABEL_191;
        }
      }
    case 2:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          double v33 = *(double *)a2;
          if (**v6 != 1) {
            operator new();
          }
          uint64_t v34 = (std::string *)(*v6 + 1);
          int v35 = *(char *)(*(void *)&v33 + 31);
          if (v35 >= 0) {
            unint64_t v36 = (const std::string::value_type *)(*(void *)&v33 + 8);
          }
          else {
            unint64_t v36 = *(const std::string::value_type **)(*(void *)&v33 + 8);
          }
          if (v35 >= 0) {
            std::string::size_type v37 = *(unsigned __int8 *)(*(void *)&v33 + 31);
          }
          else {
            std::string::size_type v37 = *(void *)(*(void *)&v33 + 16);
          }
          std::string::append(v34, v36, v37);
          return;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          double v125 = *(double *)a2;
          if (**v6 != 1) {
            operator new();
          }
          v126 = *v6;
          turi::flexible_type_fail((*v6)[2] - (*v6)[1] == *(void *)(*(void *)&v125 + 16)
                                                        - *(void *)(*(void *)&v125 + 8));
          uint64_t v127 = (double *)v126[1];
          uint64_t v128 = v126[2] - (void)v127;
          if (v128)
          {
            unint64_t v129 = v128 >> 3;
            double v130 = *(double **)(*(void *)&v125 + 8);
            if (v129 <= 1) {
              unint64_t v129 = 1;
            }
            do
            {
              double v131 = *v130++;
              *uint64_t v127 = v131 + *v127;
              ++v127;
              --v129;
            }
            while (v129);
          }
          return;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 4:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 6:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 8:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
          goto LABEL_100;
        case 9:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 9:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_274;
        case 2:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 3:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_274;
        case 4:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 5:
          if (**v6 != 1) {
            operator new();
          }
          goto LABEL_276;
        case 8:
LABEL_100:
          if (**v6 != 1) {
            operator new();
          }
LABEL_274:
LABEL_276:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v38 = *(double *)a2;
          if (**v6 != 1) {
            operator new();
          }
          unint64_t v39 = *v6;
          unint64_t v40 = *v6 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v40, *(void *)&v38 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v42 = (uint64_t *)v39[3];
          unint64_t v41 = (uint64_t *)v39[4];
          if (v41 == v42) {
            return;
          }
          if (!*v40) {
            return;
          }
          uint64_t v43 = 1;
          do
          {
            uint64_t v44 = *v42++;
            v43 *= v44;
          }
          while (v42 != v41);
          if (!v43) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
          unint64_t v45 = (v39[4] - v39[3]) >> 3;
          uint64_t v140 = 0;
          std::vector<unsigned long>::vector(&v141, v45, &v140);
          uint64_t v46 = v141;
          unint64_t v47 = v142;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    uint64_t v48 = (char *)v47 - (char *)v46;
    if (v48)
    {
      uint64_t v49 = 0;
      unint64_t v50 = v48 >> 3;
      uint64_t v51 = *(uint64_t **)(*(void *)&v38 + 48);
      if (v50 <= 1) {
        unint64_t v50 = 1;
      }
      double v52 = v46;
      unint64_t v53 = v50;
      do
      {
        uint64_t v55 = (uint64_t)*v52++;
        uint64_t v54 = v55;
        uint64_t v56 = *v51++;
        v49 += v56 * v54;
        --v53;
      }
      while (v53);
      uint64_t v57 = 0;
      double v58 = *(double *)(**(void **)(*(void *)&v38 + 8) + 8 * (*(void *)(*(void *)&v38 + 72) + v49));
      uint64_t v59 = (uint64_t *)v39[6];
      do
      {
        uint64_t v61 = (uint64_t)*v46++;
        uint64_t v60 = v61;
        uint64_t v62 = *v59++;
        v57 += v62 * v60;
        --v50;
      }
      while (v50);
    }
    else
    {
      uint64_t v57 = 0;
      double v58 = *(double *)(**(void **)(*(void *)&v38 + 8) + 8 * *(void *)(*(void *)&v38 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
    *(double *)(*(void *)v39[1] + 8 * (v39[9] + v57)) = v58 + *(double *)(*(void *)v39[1] + 8 * (v39[9] + v57));
    uint64_t v46 = v141;
    unint64_t v47 = v142;
    uint64_t v63 = v142 - v141;
    uint64_t v64 = v63 - 1;
    if ((char *)v142 - (char *)v141 >= 1)
    {
      uint64_t v65 = v39[3];
      v66 = (char *)v141[v64] + 1;
      v141[v64] = v66;
      if ((unint64_t)v66 >= *(void *)(v65 + 8 * v64))
      {
        uint64_t v67 = (unint64_t *)&v46[v63 - 2];
        uint64_t v68 = v65 - 16;
        while (1)
        {
          uint64_t v69 = v63 - 1;
          v67[1] = 0;
          if (v63 - 1 <= 0) {
            goto LABEL_195;
          }
          unint64_t v70 = *v67 + 1;
          *v67-- = v70;
          unint64_t v71 = *(void *)(v68 + 8 * v63--);
          if (v70 < v71)
          {
            uint64_t v64 = v69 - 1;
            break;
          }
        }
      }
      uint64_t v63 = 1;
    }
  }
  while ((v64 & 0x8000000000000000) == 0 && v63);
LABEL_194:
  if (!v46) {
    return;
  }
LABEL_195:
  v142 = v46;
  operator delete(v46);
}

void sub_224159574(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_2241596B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x2241596ACLL);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224159A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::serialize_impl<turi::oarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v4)
    {
      size_t v6 = 2 * v4 + 2;
      *(void *)(a1 + 40) = v6;
      char v7 = *(void **)(a1 + 16);
      if (v7)
      {
        long long v5 = (unsigned char *)*v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
          long long v5 = **(unsigned char ***)(a1 + 16);
        }
        else if (!v9)
        {
          v7[1] = &v5[v6];
        }
      }
      else
      {
        long long v5 = malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v5;
    }
    else
    {
      long long v5 = *(unsigned char **)(a1 + 24);
    }
    v5[(*(void *)(a1 + 32))++] = *(unsigned char *)a2;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, (uint64_t *)(a2 + 8));
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224159CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224159EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415A0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4) {
    *(unsigned char *)a2 = *(unsigned char *)(v4 + (*((void *)a1 + 3))++);
  }
  else {
    std::istream::read();
  }
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (unint64_t *)(a2 + 8));
}

unsigned char *std::pair<BOOL,turi::flexible_type>::operator=[abi:ne180100](unsigned char *a1, unsigned char *a2)
{
  double v3 = (uint64_t *)(a2 + 8);
  *a1 = *a2;
  uint64_t v4 = a1 + 8;
  if (a2 != a1)
  {
    switch(a1[20])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          std::vector<char>::size_type v10 = (void *)v9[1];
          if (v10)
          {
            v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          uint64_t v23 = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          uint64_t v23 = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v23);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v4;
          if (*(void *)v4)
          {
            uint64_t v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (void *)v14[3];
            if (v16)
            {
              v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *(void *)uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v18 = *v3;
    *(void *)(v4 + 5) = *(uint64_t *)((char *)v3 + 5);
    *(void *)uint64_t v4 = v18;
    LODWORD(v18) = a2[20];
    a1[20] = v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v4, 1uLL);
    }
  }
  return a1;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::new_instance()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::add_element_simple(uint64_t a1, int *a2)
{
  if (*((unsigned char *)a2 + 12) != 7)
  {
    ++*(void *)(a1 + 40);
    double v3 = 0.0;
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        double v3 = (double)*(uint64_t *)a2;
        break;
      case 1:
        double v3 = *(double *)a2;
        break;
      case 2:
        uint64_t v5 = *(void *)a2;
        atomic_ullong *volatile v6 = (char **)(*(void *)a2 + 8);
        size_t __idx = 0;
        atomic_ullong *volatile v7 = (char *)v6;
        if (*(char *)(v5 + 31) < 0) {
          atomic_ullong *volatile v7 = *v6;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v7);
        double v8 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v21[0]) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v5 + 31) < 0) {
          uint64_t v9 = *(void *)(v5 + 16);
        }
        else {
          uint64_t v9 = *(unsigned __int8 *)(v5 + 31);
        }
        if (__idx != v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v18 = std::string::append(&v24, " cannot be interpreted as a float");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v21[0] = (void *)v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v16 = v8;
        double v3 = v16;
        break;
      case 3:
        uint64_t v4 = *(void *)a2;
        __p[1] = 0;
        v21[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        uint64_t v10 = *(void *)a2;
        __p[1] = 0;
        v21[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
        break;
      case 5:
        uint64_t v11 = *(void *)a2;
        __p[1] = 0;
        v21[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
        break;
      case 6:
        double v3 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        uint64_t v12 = *(void *)a2;
        unsigned int v13 = *(atomic_uint **)(*(void *)a2 + 16);
        __p[0] = *(void **)(*(void *)a2 + 8);
        __p[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
        }
        long long v14 = *(_OWORD *)(v12 + 24);
        long long v15 = *(_OWORD *)(v12 + 56);
        long long v22 = *(_OWORD *)(v12 + 40);
        long long v23 = v15;
        *(_OWORD *)unsigned int v21 = v14;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v22 + 1))
        {
          *(void *)&long long v23 = *((void *)&v22 + 1);
          operator delete(*((void **)&v22 + 1));
        }
        if (v21[0])
        {
          v21[1] = v21[0];
          operator delete(v21[0]);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        break;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) + (v3 - *(double *)(a1 + 32)) / (double)*(unint64_t *)(a1 + 40);
  }
}

void sub_22415AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)&v4, (void *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_22415AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415AE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec(uint64_t a1, void *a2)
{
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v4)
    {
      size_t v9 = 2 * v4 + 16;
      *(void *)(a1 + 40) = v9;
      uint64_t v10 = *(char ***)(a1 + 16);
      if (v10)
      {
        long long v5 = *v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v13);
          long long v5 = **(char ***)(a1 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        long long v5 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v9, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v5;
    }
    else
    {
      long long v5 = *(char **)(a1 + 24);
    }
    *(void *)&v5[*(void *)(a1 + 32)] = *a2;
    *(void *)(a1 + 32) += 8;
  }
  long long v6 = a2 + 1;
  if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v8)
    {
      size_t v14 = 2 * v8 + 16;
      *(void *)(a1 + 40) = v14;
      long long v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &result[v14];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a1 + 24);
    }
    *(void *)&result[*(void *)(a1 + 32)] = *v6;
    *(void *)(a1 + 32) += 8;
  }
  return result;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415B21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415B61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22415B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<double,unsigned long>,false,void>::exec(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    *a2 = *(void *)(v4 + *(void *)(result + 24));
    *(void *)(result + 24) += 8;
  }
  else
  {
    uint64_t result = std::istream::read();
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    a2[1] = *(void *)(v5 + *(void *)(v3 + 24));
    *(void *)(v3 + 24) += 8;
  }
  else
  {
    return std::istream::read();
  }
  return result;
}

uint64_t turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::generic_aggregator(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26D76D408;
  *(void *)(result + 16) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (result + 16 != a2)
  {
    uint64_t v3 = *(atomic_ullong **)a2;
    *(void *)(result + 21) = *(void *)(a2 + 5);
    *uint64_t v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(result + 28) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(result + 40) = 0;
  unint64_t v8 = (atomic_ullong *volatile *)(result + 40);
  *(void *)(result + 32) = v7;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = 0;
  if (result + 40 != a2)
  {
    size_t v9 = *(atomic_ullong **)a2;
    *(void *)(result + 45) = *(void *)(a2 + 5);
    *unint64_t v8 = v9;
    unsigned int v10 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(result + 52) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0) {
      atomic_fetch_add(*v8, 1uLL);
    }
  }
  *(void *)(result + 56) = *(void *)(a2 + 16);
  return result;
}

void turi::unity_sarray::mean(void)::$_3::operator()(atomic_ullong **a1, atomic_ullong **a2)
{
  uint64_t v392 = *MEMORY[0x263EF8340];
  unint64_t v4 = (unint64_t)a2[2];
  int v5 = a1[2];
  if (v4)
  {
    if (!v5) {
      return;
    }
    int v6 = *((unsigned __int8 *)a2 + 12);
    if (v6 == 9)
    {
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(*a2 + 1), (uint64_t)(*a1 + 1))) {
        turi::unity_sarray::mean(void)::$_3::operator() const(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long>&)::{lambda(void)#2}::operator()();
      }
      unint64_t v4 = (unint64_t)a2[2];
      int v5 = a1[2];
    }
    else if (v6 == 3)
    {
      uint64_t v7 = 1;
      switch(*((unsigned char *)a1 + 12))
      {
        case 3:
          unint64_t v8 = *a1 + 1;
          size_t v9 = *a1 + 2;
          char v10 = 3;
          goto LABEL_19;
        case 4:
          unint64_t v8 = *a1 + 1;
          size_t v9 = *a1 + 2;
          char v10 = 4;
          goto LABEL_19;
        case 5:
          unint64_t v8 = *a1 + 1;
          size_t v9 = *a1 + 2;
          char v10 = 5;
LABEL_19:
          uint64_t v7 = (uint64_t)(*v9 - *v8) >> v10;
          break;
        case 9:
          size_t v16 = (uint64_t *)(*a1)[3];
          long long v15 = (uint64_t *)(*a1)[4];
          if (v15 == v16)
          {
            uint64_t v7 = 0;
          }
          else
          {
            uint64_t v7 = (*a1)[1];
            if (v7)
            {
              uint64_t v7 = 1;
              do
              {
                uint64_t v17 = *v16++;
                v7 *= v17;
              }
              while (v16 != v15);
            }
          }
          break;
        default:
          break;
      }
      if (v7 != ((*a2)[2] - (*a2)[1]) >> 3) {
        turi::unity_sarray::mean(void)::$_3::operator() const(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long>&)::{lambda(void)#1}::operator()();
      }
    }
    double v381 = (double)v4 / (double)((unint64_t)v5 + v4);
    double v389 = 0.0;
    int v390 = 0;
    char v391 = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v389, &v381);
    memset(v387, 0, 13);
    if (v387 != a2)
    {
      *(atomic_ullong **)((char *)v387 + 5) = *(atomic_ullong **)((char *)a2 + 5);
      v387[0] = *a2;
      BYTE4(v387[1]) = *((unsigned char *)a2 + 12);
      if (BYTE4(v387[1]) <= 9u && ((1 << SBYTE4(v387[1])) & 0x33C) != 0) {
        atomic_fetch_add(v387[0], 1uLL);
      }
    }
    switch(v391)
    {
      case 0:
        switch(BYTE4(v387[1]))
        {
          case 0:
            uint64_t v14 = (uint64_t)v387[0] * *(void *)&v389;
            goto LABEL_45;
          case 1:
            double v117 = *(double *)v387 * (double)*(uint64_t *)&v389;
            goto LABEL_216;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            double v118 = (double *)v387[0][1];
            uint64_t v119 = v387[0][2] - (void)v118;
            if (v119)
            {
              unint64_t v120 = v119 >> 3;
              double v121 = (double)*(uint64_t *)&v389;
              if (v120 <= 1) {
                unint64_t v120 = 1;
              }
              do
              {
                *double v118 = *v118 * v121;
                ++v118;
                --v120;
              }
              while (v120);
            }
            goto LABEL_278;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 6:
          case 7:
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            uint64_t v69 = v387[0];
            unint64_t v71 = (uint64_t *)v387[0][3];
            atomic_ullong v70 = v387[0][4];
            if ((uint64_t *)v70 == v71) {
              goto LABEL_278;
            }
            if (!v387[0][1]) {
              goto LABEL_278;
            }
            double v72 = (double)*(uint64_t *)&v389;
            uint64_t v73 = 1;
            do
            {
              uint64_t v74 = *v71++;
              v73 *= v74;
            }
            while (v71 != (uint64_t *)v70);
            if (!v73) {
              goto LABEL_278;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v387[0] + 1);
            unint64_t v75 = (v69[4] - v69[3]) >> 3;
            uint64_t v385 = 0;
            std::vector<unsigned long>::vector(&v383, v75, &v385);
            uint64_t v43 = v383;
            unint64_t v76 = v384;
            break;
          default:
            goto LABEL_907;
        }
        do
        {
          uint64_t v77 = 0;
          uint64_t v78 = (char *)v76 - (char *)v43;
          if (v78)
          {
            unint64_t v79 = v78 >> 3;
            uint64_t v80 = (uint64_t *)v69[6];
            if (v79 <= 1) {
              unint64_t v79 = 1;
            }
            do
            {
              uint64_t v82 = (uint64_t)*v43++;
              uint64_t v81 = v82;
              uint64_t v83 = *v80++;
              v77 += v83 * v81;
              --v79;
            }
            while (v79);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v69 + 1);
          *(double *)(*(void *)v69[1] + 8 * (v69[9] + v77)) = *(double *)(*(void *)v69[1] + 8 * (v69[9] + v77))
                                                              * v72;
          uint64_t v43 = v383;
          unint64_t v76 = v384;
          uint64_t v84 = v384 - v383;
          uint64_t v85 = v84 - 1;
          if ((char *)v384 - (char *)v383 >= 1)
          {
            atomic_ullong v86 = v69[3];
            uint64_t v87 = (char *)v383[v85] + 1;
            v383[v85] = v87;
            if ((unint64_t)v87 >= *(void *)(v86 + 8 * v85))
            {
              uint64_t v88 = (unint64_t *)&v43[v84 - 2];
              atomic_ullong v89 = v86 - 16;
              do
              {
                uint64_t v90 = v84 - 1;
                v88[1] = 0;
                if (v84 - 1 <= 0) {
                  goto LABEL_197;
                }
                unint64_t v91 = *v88 + 1;
                *v88-- = v91;
                unint64_t v92 = *(void *)(v89 + 8 * v84--);
              }
              while (v91 >= v92);
              uint64_t v85 = v90 - 1;
            }
            uint64_t v84 = 1;
          }
        }
        while ((v85 & 0x8000000000000000) == 0 && v84);
        goto LABEL_196;
      case 1:
        switch(BYTE4(v387[1]))
        {
          case 0:
            uint64_t v14 = (uint64_t)(v389 * (double)(uint64_t)v387[0]);
LABEL_45:
            v387[0] = (atomic_ullong *)v14;
            goto LABEL_278;
          case 1:
            double v117 = v389 * *(double *)v387;
LABEL_216:
            v387[0] = *(atomic_ullong **)&v117;
            goto LABEL_278;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            unint64_t v122 = (double *)v387[0][1];
            uint64_t v123 = v387[0][2] - (void)v122;
            if (v123)
            {
              double v124 = v389;
              unint64_t v125 = v123 >> 3;
              if (v125 <= 1) {
                unint64_t v125 = 1;
              }
              do
              {
                *unint64_t v122 = v124 * *v122;
                ++v122;
                --v125;
              }
              while (v125);
            }
            goto LABEL_278;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 6:
          case 7:
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            uint64_t v93 = v387[0];
            double v95 = (uint64_t *)v387[0][3];
            atomic_ullong v94 = v387[0][4];
            if ((uint64_t *)v94 == v95) {
              goto LABEL_278;
            }
            if (!v387[0][1]) {
              goto LABEL_278;
            }
            double v96 = v389;
            uint64_t v97 = 1;
            do
            {
              uint64_t v98 = *v95++;
              v97 *= v98;
            }
            while (v95 != (uint64_t *)v94);
            if (!v97) {
              goto LABEL_278;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v387[0] + 1);
            unint64_t v99 = (v93[4] - v93[3]) >> 3;
            uint64_t v385 = 0;
            std::vector<unsigned long>::vector(&v383, v99, &v385);
            uint64_t v43 = v383;
            unint64_t v100 = v384;
            break;
          default:
            goto LABEL_907;
        }
        do
        {
          uint64_t v101 = 0;
          uint64_t v102 = (char *)v100 - (char *)v43;
          if (v102)
          {
            unint64_t v103 = v102 >> 3;
            uint64_t v104 = (uint64_t *)v93[6];
            if (v103 <= 1) {
              unint64_t v103 = 1;
            }
            do
            {
              uint64_t v106 = (uint64_t)*v43++;
              uint64_t v105 = v106;
              uint64_t v107 = *v104++;
              v101 += v107 * v105;
              --v103;
            }
            while (v103);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v93 + 1);
          *(double *)(*(void *)v93[1] + 8 * (v93[9] + v101)) = v96
                                                               * *(double *)(*(void *)v93[1] + 8 * (v93[9] + v101));
          uint64_t v43 = v383;
          unint64_t v100 = v384;
          uint64_t v108 = v384 - v383;
          uint64_t v109 = v108 - 1;
          if ((char *)v384 - (char *)v383 >= 1)
          {
            atomic_ullong v110 = v93[3];
            uint64_t v111 = (char *)v383[v109] + 1;
            v383[v109] = v111;
            if ((unint64_t)v111 >= *(void *)(v110 + 8 * v109))
            {
              uint64_t v112 = (unint64_t *)&v43[v108 - 2];
              atomic_ullong v113 = v110 - 16;
              do
              {
                uint64_t v114 = v108 - 1;
                v112[1] = 0;
                if (v108 - 1 <= 0) {
                  goto LABEL_196;
                }
                unint64_t v115 = *v112 + 1;
                *v112-- = v115;
                unint64_t v116 = *(void *)(v113 + 8 * v108--);
              }
              while (v115 >= v116);
              uint64_t v109 = v114 - 1;
            }
            uint64_t v108 = 1;
          }
        }
        while ((v109 & 0x8000000000000000) == 0 && v108);
        goto LABEL_196;
      case 2:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 3:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            double v28 = v389;
            if (*v387[0] != 1) {
              operator new();
            }
            atomic_ullong *volatile v29 = v387[0];
            turi::flexible_type_fail(v387[0][2] - v387[0][1] == *(void *)(*(void *)&v389 + 16)
                                                              - *(void *)(*(void *)&v389 + 8));
            uint64_t v30 = (double *)v29[1];
            uint64_t v31 = v29[2] - (void)v30;
            if (v31)
            {
              unint64_t v32 = v31 >> 3;
              double v33 = *(double **)(*(void *)&v28 + 8);
              if (v32 <= 1) {
                unint64_t v32 = 1;
              }
              do
              {
                double v34 = *v33++;
                double *v30 = v34 * *v30;
                ++v30;
                --v32;
              }
              while (v32);
            }
            goto LABEL_278;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 4:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 5:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 6:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 7:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 8:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 9:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          default:
            goto LABEL_907;
        }
      case 9:
        switch(BYTE4(v387[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_277;
          case 2:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 3:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 4:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 5:
            if (*v387[0] != 1) {
              operator new();
            }
            goto LABEL_277;
          case 8:
            if (*v387[0] != 1) {
              operator new();
            }
LABEL_277:
            turi::flexible_type_fail(0);
            goto LABEL_278;
          case 9:
            double v35 = v389;
            if (*v387[0] != 1) {
              operator new();
            }
            unint64_t v36 = v387[0];
            std::string::size_type v37 = v387[0] + 1;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v387[0] + 1), *(void *)&v389 + 8)) {
              turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            }
            unint64_t v39 = (uint64_t *)v36[3];
            double v38 = (uint64_t *)v36[4];
            if (v38 == v39) {
              goto LABEL_278;
            }
            if (!*v37) {
              goto LABEL_278;
            }
            uint64_t v40 = 1;
            do
            {
              uint64_t v41 = *v39++;
              v40 *= v41;
            }
            while (v39 != v38);
            if (!v40) {
              goto LABEL_278;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v37);
            unint64_t v42 = (v36[4] - v36[3]) >> 3;
            uint64_t v385 = 0;
            std::vector<unsigned long>::vector(&v383, v42, &v385);
            uint64_t v43 = v383;
            uint64_t v44 = v384;
            break;
          default:
            goto LABEL_907;
        }
        break;
      default:
LABEL_907:
        turi::flexible_type_fail(0);
LABEL_910:
        __break(1u);
        return;
    }
    while (1)
    {
      uint64_t v45 = (char *)v44 - (char *)v43;
      if (v45)
      {
        uint64_t v46 = 0;
        unint64_t v47 = v45 >> 3;
        uint64_t v48 = *(uint64_t **)(*(void *)&v35 + 48);
        if (v47 <= 1) {
          unint64_t v47 = 1;
        }
        uint64_t v49 = v43;
        unint64_t v50 = v47;
        do
        {
          uint64_t v52 = (uint64_t)*v49++;
          uint64_t v51 = v52;
          uint64_t v53 = *v48++;
          v46 += v53 * v51;
          --v50;
        }
        while (v50);
        uint64_t v54 = 0;
        double v55 = *(double *)(**(void **)(*(void *)&v35 + 8) + 8 * (*(void *)(*(void *)&v35 + 72) + v46));
        uint64_t v56 = (uint64_t *)v36[6];
        do
        {
          uint64_t v58 = (uint64_t)*v43++;
          uint64_t v57 = v58;
          uint64_t v59 = *v56++;
          v54 += v59 * v57;
          --v47;
        }
        while (v47);
      }
      else
      {
        uint64_t v54 = 0;
        double v55 = *(double *)(**(void **)(*(void *)&v35 + 8) + 8 * *(void *)(*(void *)&v35 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v37);
      *(double *)(*(void *)v36[1] + 8 * (v36[9] + v54)) = v55 * *(double *)(*(void *)v36[1] + 8 * (v36[9] + v54));
      uint64_t v43 = v383;
      uint64_t v44 = v384;
      uint64_t v60 = v384 - v383;
      uint64_t v61 = v60 - 1;
      if ((char *)v384 - (char *)v383 >= 1)
      {
        atomic_ullong v62 = v36[3];
        uint64_t v63 = (char *)v383[v61] + 1;
        v383[v61] = v63;
        if ((unint64_t)v63 >= *(void *)(v62 + 8 * v61))
        {
          uint64_t v64 = (unint64_t *)&v43[v60 - 2];
          atomic_ullong v65 = v62 - 16;
          do
          {
            uint64_t v66 = v60 - 1;
            v64[1] = 0;
            if (v60 - 1 <= 0) {
              goto LABEL_196;
            }
            unint64_t v67 = *v64 + 1;
            *v64-- = v67;
            unint64_t v68 = *(void *)(v65 + 8 * v60--);
          }
          while (v67 >= v68);
          uint64_t v61 = v66 - 1;
        }
        uint64_t v60 = 1;
      }
      if (v61 < 0 || !v60)
      {
LABEL_196:
        if (v43)
        {
LABEL_197:
          v384 = v43;
          operator delete(v43);
        }
LABEL_278:
        switch(v391)
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v126 = v389;
              if (v389 != 0.0)
              {
                if (*(char *)(*(void *)&v389 + 31) < 0) {
                  operator delete(*(void **)(*(void *)&v389 + 8));
                }
                double v127 = v126;
                uint64_t v128 = 0x1012C404EF22A49;
                goto LABEL_303;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v131 = v389;
              if (v389 != 0.0)
              {
                uint64_t v132 = *(void **)(*(void *)&v389 + 8);
                if (v132)
                {
                  *(void *)(*(void *)&v389 + 16) = v132;
                  operator delete(v132);
                }
                double v127 = v131;
                uint64_t v128 = 0x1080C409938AC02;
                goto LABEL_303;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v129 = v389;
              if (v389 != 0.0)
              {
                v383 = (void **)(*(void *)&v389 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                goto LABEL_298;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v129 = v389;
              if (v389 != 0.0)
              {
                v383 = (void **)(*(void *)&v389 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_298:
                double v127 = v129;
                uint64_t v128 = 0x1020C405E66F15BLL;
                goto LABEL_303;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v133 = v389;
              if (v389 != 0.0)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v389 + 16));
                double v127 = v133;
                unsigned int v130 = -235920773;
                goto LABEL_302;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1 && v389 != 0.0)
            {
              double v127 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v389));
              unsigned int v130 = 2071181815;
LABEL_302:
              uint64_t v128 = v130 | 0x1030C4000000000;
LABEL_303:
              MEMORY[0x22A614FA0](*(void *)&v127, v128);
            }
            break;
          default:
            break;
        }
        double v380 = (double)(unint64_t)a1[2] / (double)((unint64_t)a1[2] + (unint64_t)a2[2]);
        double v389 = 0.0;
        int v390 = 0;
        char v391 = 0;
        turi::flexible_type::operator=<double>((uint64_t)&v389, &v380);
        memset(v386, 0, 13);
        if (v386 != a1)
        {
          *(atomic_ullong **)((char *)v386 + 5) = *(atomic_ullong **)((char *)a1 + 5);
          v386[0] = *a1;
          BYTE4(v386[1]) = *((unsigned char *)a1 + 12);
          if (BYTE4(v386[1]) <= 9u && ((1 << SBYTE4(v386[1])) & 0x33C) != 0) {
            atomic_fetch_add(v386[0], 1uLL);
          }
        }
        switch(v391)
        {
          case 0:
            switch(BYTE4(v386[1]))
            {
              case 0:
                uint64_t v134 = (uint64_t)v386[0] * *(void *)&v389;
                goto LABEL_328;
              case 1:
                double v224 = *(double *)v386 * (double)*(uint64_t *)&v389;
                goto LABEL_466;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                v225 = (double *)v386[0][1];
                uint64_t v226 = v386[0][2] - (void)v225;
                if (v226)
                {
                  unint64_t v227 = v226 >> 3;
                  double v228 = (double)*(uint64_t *)&v389;
                  if (v227 <= 1) {
                    unint64_t v227 = 1;
                  }
                  do
                  {
                    double *v225 = *v225 * v228;
                    ++v225;
                    --v227;
                  }
                  while (v227);
                }
                goto LABEL_528;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 6:
              case 7:
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                v176 = v386[0];
                v178 = (uint64_t *)v386[0][3];
                atomic_ullong v177 = v386[0][4];
                if ((uint64_t *)v177 == v178) {
                  goto LABEL_528;
                }
                if (!v386[0][1]) {
                  goto LABEL_528;
                }
                double v179 = (double)*(uint64_t *)&v389;
                uint64_t v180 = 1;
                do
                {
                  uint64_t v181 = *v178++;
                  v180 *= v181;
                }
                while (v178 != (uint64_t *)v177);
                if (!v180) {
                  goto LABEL_528;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v386[0] + 1);
                unint64_t v182 = (v176[4] - v176[3]) >> 3;
                uint64_t v382 = 0;
                std::vector<unsigned long>::vector(&v383, v182, &v382);
                v150 = v383;
                v183 = v384;
                break;
              default:
                goto LABEL_908;
            }
            do
            {
              uint64_t v184 = 0;
              uint64_t v185 = (char *)v183 - (char *)v150;
              if (v185)
              {
                unint64_t v186 = v185 >> 3;
                v187 = (uint64_t *)v176[6];
                if (v186 <= 1) {
                  unint64_t v186 = 1;
                }
                do
                {
                  uint64_t v189 = (uint64_t)*v150++;
                  uint64_t v188 = v189;
                  uint64_t v190 = *v187++;
                  v184 += v190 * v188;
                  --v186;
                }
                while (v186);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v176 + 1);
              *(double *)(*(void *)v176[1] + 8 * (v176[9] + v184)) = *(double *)(*(void *)v176[1]
                                                                                 + 8 * (v176[9] + v184))
                                                                     * v179;
              v150 = v383;
              v183 = v384;
              uint64_t v191 = v384 - v383;
              uint64_t v192 = v191 - 1;
              if ((char *)v384 - (char *)v383 >= 1)
              {
                atomic_ullong v193 = v176[3];
                v194 = (char *)v383[v192] + 1;
                v383[v192] = v194;
                if ((unint64_t)v194 >= *(void *)(v193 + 8 * v192))
                {
                  v195 = (unint64_t *)&v150[v191 - 2];
                  atomic_ullong v196 = v193 - 16;
                  do
                  {
                    uint64_t v197 = v191 - 1;
                    v195[1] = 0;
                    if (v191 - 1 <= 0) {
                      goto LABEL_447;
                    }
                    unint64_t v198 = *v195 + 1;
                    *v195-- = v198;
                    unint64_t v199 = *(void *)(v196 + 8 * v191--);
                  }
                  while (v198 >= v199);
                  uint64_t v192 = v197 - 1;
                }
                uint64_t v191 = 1;
              }
            }
            while ((v192 & 0x8000000000000000) == 0 && v191);
            goto LABEL_446;
          case 1:
            switch(BYTE4(v386[1]))
            {
              case 0:
                uint64_t v134 = (uint64_t)(v389 * (double)(uint64_t)v386[0]);
LABEL_328:
                v386[0] = (atomic_ullong *)v134;
                goto LABEL_528;
              case 1:
                double v224 = v389 * *(double *)v386;
LABEL_466:
                v386[0] = *(atomic_ullong **)&v224;
                goto LABEL_528;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                v229 = (double *)v386[0][1];
                uint64_t v230 = v386[0][2] - (void)v229;
                if (v230)
                {
                  double v231 = v389;
                  unint64_t v232 = v230 >> 3;
                  if (v232 <= 1) {
                    unint64_t v232 = 1;
                  }
                  do
                  {
                    double *v229 = v231 * *v229;
                    ++v229;
                    --v232;
                  }
                  while (v232);
                }
                goto LABEL_528;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 6:
              case 7:
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                v200 = v386[0];
                v202 = (uint64_t *)v386[0][3];
                atomic_ullong v201 = v386[0][4];
                if ((uint64_t *)v201 == v202) {
                  goto LABEL_528;
                }
                if (!v386[0][1]) {
                  goto LABEL_528;
                }
                double v203 = v389;
                uint64_t v204 = 1;
                do
                {
                  uint64_t v205 = *v202++;
                  v204 *= v205;
                }
                while (v202 != (uint64_t *)v201);
                if (!v204) {
                  goto LABEL_528;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v386[0] + 1);
                unint64_t v206 = (v200[4] - v200[3]) >> 3;
                uint64_t v382 = 0;
                std::vector<unsigned long>::vector(&v383, v206, &v382);
                v150 = v383;
                v207 = v384;
                break;
              default:
                goto LABEL_908;
            }
            do
            {
              uint64_t v208 = 0;
              uint64_t v209 = (char *)v207 - (char *)v150;
              if (v209)
              {
                unint64_t v210 = v209 >> 3;
                v211 = (uint64_t *)v200[6];
                if (v210 <= 1) {
                  unint64_t v210 = 1;
                }
                do
                {
                  uint64_t v213 = (uint64_t)*v150++;
                  uint64_t v212 = v213;
                  uint64_t v214 = *v211++;
                  v208 += v214 * v212;
                  --v210;
                }
                while (v210);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v200 + 1);
              *(double *)(*(void *)v200[1] + 8 * (v200[9] + v208)) = v203
                                                                     * *(double *)(*(void *)v200[1]
                                                                                 + 8 * (v200[9] + v208));
              v150 = v383;
              v207 = v384;
              uint64_t v215 = v384 - v383;
              uint64_t v216 = v215 - 1;
              if ((char *)v384 - (char *)v383 >= 1)
              {
                atomic_ullong v217 = v200[3];
                v218 = (char *)v383[v216] + 1;
                v383[v216] = v218;
                if ((unint64_t)v218 >= *(void *)(v217 + 8 * v216))
                {
                  v219 = (unint64_t *)&v150[v215 - 2];
                  atomic_ullong v220 = v217 - 16;
                  do
                  {
                    uint64_t v221 = v215 - 1;
                    v219[1] = 0;
                    if (v215 - 1 <= 0) {
                      goto LABEL_446;
                    }
                    unint64_t v222 = *v219 + 1;
                    *v219-- = v222;
                    unint64_t v223 = *(void *)(v220 + 8 * v215--);
                  }
                  while (v222 >= v223);
                  uint64_t v216 = v221 - 1;
                }
                uint64_t v215 = 1;
              }
            }
            while ((v216 & 0x8000000000000000) == 0 && v215);
            goto LABEL_446;
          case 2:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 3:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                double v135 = v389;
                if (*v386[0] != 1) {
                  operator new();
                }
                double v136 = v386[0];
                turi::flexible_type_fail(v386[0][2] - v386[0][1] == *(void *)(*(void *)&v389 + 16)
                                                                  - *(void *)(*(void *)&v389 + 8));
                uint64_t v137 = (double *)v136[1];
                uint64_t v138 = v136[2] - (void)v137;
                if (v138)
                {
                  unint64_t v139 = v138 >> 3;
                  uint64_t v140 = *(double **)(*(void *)&v135 + 8);
                  if (v139 <= 1) {
                    unint64_t v139 = 1;
                  }
                  do
                  {
                    double v141 = *v140++;
                    *uint64_t v137 = v141 * *v137;
                    ++v137;
                    --v139;
                  }
                  while (v139);
                }
                goto LABEL_528;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 4:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 5:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 6:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 7:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 8:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 9:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              default:
                goto LABEL_908;
            }
          case 9:
            switch(BYTE4(v386[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_527;
              case 2:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 3:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 4:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 5:
                if (*v386[0] != 1) {
                  operator new();
                }
                goto LABEL_527;
              case 8:
                if (*v386[0] != 1) {
                  operator new();
                }
LABEL_527:
                turi::flexible_type_fail(0);
                goto LABEL_528;
              case 9:
                double v142 = v389;
                if (*v386[0] != 1) {
                  operator new();
                }
                v143 = v386[0];
                v144 = v386[0] + 1;
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v386[0] + 1), *(void *)&v389 + 8)) {
                  turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                }
                v146 = (uint64_t *)v143[3];
                v145 = (uint64_t *)v143[4];
                if (v145 == v146) {
                  goto LABEL_528;
                }
                if (!*v144) {
                  goto LABEL_528;
                }
                uint64_t v147 = 1;
                do
                {
                  uint64_t v148 = *v146++;
                  v147 *= v148;
                }
                while (v146 != v145);
                if (!v147) {
                  goto LABEL_528;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v144);
                unint64_t v149 = (v143[4] - v143[3]) >> 3;
                uint64_t v382 = 0;
                std::vector<unsigned long>::vector(&v383, v149, &v382);
                v150 = v383;
                v151 = v384;
                break;
              default:
                goto LABEL_908;
            }
            break;
          default:
LABEL_908:
            turi::flexible_type_fail(0);
            goto LABEL_910;
        }
        while (1)
        {
          uint64_t v152 = (char *)v151 - (char *)v150;
          if (v152)
          {
            uint64_t v153 = 0;
            unint64_t v154 = v152 >> 3;
            v155 = *(uint64_t **)(*(void *)&v142 + 48);
            if (v154 <= 1) {
              unint64_t v154 = 1;
            }
            v156 = v150;
            unint64_t v157 = v154;
            do
            {
              uint64_t v159 = (uint64_t)*v156++;
              uint64_t v158 = v159;
              uint64_t v160 = *v155++;
              v153 += v160 * v158;
              --v157;
            }
            while (v157);
            uint64_t v161 = 0;
            double v162 = *(double *)(**(void **)(*(void *)&v142 + 8) + 8 * (*(void *)(*(void *)&v142 + 72) + v153));
            v163 = (uint64_t *)v143[6];
            do
            {
              uint64_t v165 = (uint64_t)*v150++;
              uint64_t v164 = v165;
              uint64_t v166 = *v163++;
              v161 += v166 * v164;
              --v154;
            }
            while (v154);
          }
          else
          {
            uint64_t v161 = 0;
            double v162 = *(double *)(**(void **)(*(void *)&v142 + 8) + 8 * *(void *)(*(void *)&v142 + 72));
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v144);
          *(double *)(*(void *)v143[1] + 8 * (v143[9] + v161)) = v162
                                                                 * *(double *)(*(void *)v143[1] + 8 * (v143[9] + v161));
          v150 = v383;
          v151 = v384;
          uint64_t v167 = v384 - v383;
          uint64_t v168 = v167 - 1;
          if ((char *)v384 - (char *)v383 >= 1)
          {
            atomic_ullong v169 = v143[3];
            v170 = (char *)v383[v168] + 1;
            v383[v168] = v170;
            if ((unint64_t)v170 >= *(void *)(v169 + 8 * v168))
            {
              v171 = (unint64_t *)&v150[v167 - 2];
              atomic_ullong v172 = v169 - 16;
              do
              {
                uint64_t v173 = v167 - 1;
                v171[1] = 0;
                if (v167 - 1 <= 0) {
                  goto LABEL_446;
                }
                unint64_t v174 = *v171 + 1;
                *v171-- = v174;
                unint64_t v175 = *(void *)(v172 + 8 * v167--);
              }
              while (v174 >= v175);
              uint64_t v168 = v173 - 1;
            }
            uint64_t v167 = 1;
          }
          if (v168 < 0 || !v167)
          {
LABEL_446:
            if (v150)
            {
LABEL_447:
              v384 = v150;
              operator delete(v150);
            }
LABEL_528:
            switch(v391)
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v233 = v389;
                  if (v389 != 0.0)
                  {
                    if (*(char *)(*(void *)&v389 + 31) < 0) {
                      operator delete(*(void **)(*(void *)&v389 + 8));
                    }
                    double v234 = v233;
                    uint64_t v235 = 0x1012C404EF22A49;
                    goto LABEL_553;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v238 = v389;
                  if (v389 != 0.0)
                  {
                    v239 = *(void **)(*(void *)&v389 + 8);
                    if (v239)
                    {
                      *(void *)(*(void *)&v389 + 16) = v239;
                      operator delete(v239);
                    }
                    double v234 = v238;
                    uint64_t v235 = 0x1080C409938AC02;
                    goto LABEL_553;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v236 = v389;
                  if (v389 != 0.0)
                  {
                    v383 = (void **)(*(void *)&v389 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                    goto LABEL_548;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v236 = v389;
                  if (v389 != 0.0)
                  {
                    v383 = (void **)(*(void *)&v389 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_548:
                    double v234 = v236;
                    uint64_t v235 = 0x1020C405E66F15BLL;
                    goto LABEL_553;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v240 = v389;
                  if (v389 != 0.0)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v389 + 16));
                    double v234 = v240;
                    unsigned int v237 = -235920773;
                    goto LABEL_552;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v389, 0xFFFFFFFFFFFFFFFFLL) == 1 && v389 != 0.0)
                {
                  double v234 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v389));
                  unsigned int v237 = 2071181815;
LABEL_552:
                  uint64_t v235 = v237 | 0x1030C4000000000;
LABEL_553:
                  MEMORY[0x22A614FA0](*(void *)&v234, v235);
                }
                break;
              default:
                break;
            }
            *(atomic_ullong **)((char *)v388 + 5) = *(atomic_ullong **)((char *)v387 + 5);
            v388[0] = v387[0];
            BYTE4(v388[1]) = BYTE4(v387[1]);
            if (BYTE4(v387[1]) <= 9u && ((1 << SBYTE4(v387[1])) & 0x33C) != 0) {
              atomic_fetch_add(v388[0], 1uLL);
            }
            switch(BYTE4(v386[1]))
            {
              case 0:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                    v242 = (atomic_ullong *)((char *)v388[0] + (unint64_t)v386[0]);
                    goto LABEL_586;
                  case 1:
                    double v343 = *(double *)v388 + (double)(uint64_t)v386[0];
                    goto LABEL_747;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v287 = (double *)v388[0][1];
                    uint64_t v288 = v388[0][2] - (void)v287;
                    if (v288)
                    {
                      unint64_t v289 = v288 >> 3;
                      double v290 = (double)(uint64_t)v386[0];
                      if (v289 <= 1) {
                        unint64_t v289 = 1;
                      }
                      do
                      {
                        double *v287 = *v287 + v290;
                        ++v287;
                        --v289;
                      }
                      while (v289);
                    }
                    goto LABEL_791;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 6:
                    v388[0] = (atomic_ullong *)((unint64_t)v388[0] & 0xFF00000000000000 | ((unint64_t)v388[0]
                                                                                                  + (unint64_t)v386[0]) & 0xFFFFFFFFFFFFFFLL);
                    goto LABEL_791;
                  case 7:
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v295 = v388[0];
                    v297 = (uint64_t *)v388[0][3];
                    atomic_ullong v296 = v388[0][4];
                    if ((uint64_t *)v296 == v297) {
                      goto LABEL_791;
                    }
                    if (!v388[0][1]) {
                      goto LABEL_791;
                    }
                    double v298 = (double)(uint64_t)v386[0];
                    uint64_t v299 = 1;
                    do
                    {
                      uint64_t v300 = *v297++;
                      v299 *= v300;
                    }
                    while (v297 != (uint64_t *)v296);
                    if (!v299) {
                      goto LABEL_791;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v388[0] + 1);
                    unint64_t v301 = (v295[4] - v295[3]) >> 3;
                    uint64_t v385 = 0;
                    std::vector<unsigned long>::vector(&v383, v301, &v385);
                    v261 = v383;
                    v302 = v384;
                    break;
                  default:
                    goto LABEL_908;
                }
                while (2)
                {
                  uint64_t v303 = 0;
                  uint64_t v304 = (char *)v302 - (char *)v261;
                  if (v304)
                  {
                    unint64_t v305 = v304 >> 3;
                    v306 = (uint64_t *)v295[6];
                    if (v305 <= 1) {
                      unint64_t v305 = 1;
                    }
                    do
                    {
                      uint64_t v308 = (uint64_t)*v261++;
                      uint64_t v307 = v308;
                      uint64_t v309 = *v306++;
                      v303 += v309 * v307;
                      --v305;
                    }
                    while (v305);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v295 + 1);
                  *(double *)(*(void *)v295[1] + 8 * (v295[9] + v303)) = *(double *)(*(void *)v295[1]
                                                                                     + 8 * (v295[9] + v303))
                                                                         + v298;
                  v261 = v383;
                  v302 = v384;
                  uint64_t v310 = v384 - v383;
                  uint64_t v311 = v310 - 1;
                  if ((char *)v384 - (char *)v383 < 1) {
                    goto LABEL_690;
                  }
                  atomic_ullong v312 = v295[3];
                  v313 = (char *)v383[v311] + 1;
                  v383[v311] = v313;
                  if ((unint64_t)v313 < *(void *)(v312 + 8 * v311))
                  {
LABEL_689:
                    uint64_t v310 = 1;
LABEL_690:
                    if (v311 < 0 || !v310) {
                      goto LABEL_714;
                    }
                    continue;
                  }
                  break;
                }
                v314 = (unint64_t *)&v261[v310 - 2];
                atomic_ullong v315 = v312 - 16;
                while (1)
                {
                  uint64_t v316 = v310 - 1;
                  v314[1] = 0;
                  if (v310 - 1 <= 0) {
                    goto LABEL_715;
                  }
                  unint64_t v317 = *v314 + 1;
                  *v314-- = v317;
                  unint64_t v318 = *(void *)(v315 + 8 * v310--);
                  if (v317 < v318)
                  {
                    uint64_t v311 = v316 - 1;
                    goto LABEL_689;
                  }
                }
              case 1:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                    v242 = (atomic_ullong *)(uint64_t)(*(double *)v386 + (double)(uint64_t)v388[0]);
LABEL_586:
                    v388[0] = v242;
                    goto LABEL_791;
                  case 1:
                    double v343 = *(double *)v386 + *(double *)v388;
LABEL_747:
                    v388[0] = *(atomic_ullong **)&v343;
                    goto LABEL_791;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v291 = (double *)v388[0][1];
                    uint64_t v292 = v388[0][2] - (void)v291;
                    if (v292)
                    {
                      v293 = v386[0];
                      unint64_t v294 = v292 >> 3;
                      if (v294 <= 1) {
                        unint64_t v294 = 1;
                      }
                      do
                      {
                        double *v291 = *(double *)&v293 + *v291;
                        ++v291;
                        --v294;
                      }
                      while (v294);
                    }
                    goto LABEL_791;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 6:
                    unint64_t v344 = vcvtmd_s64_f64(*(double *)v386);
                    unint64_t v345 = (unint64_t)v388[0];
                    v346 = (char *)v388[0] + v344;
                    v388[0] = (atomic_ullong *)((unint64_t)v388[0] & 0xFF00000000000000 | ((unint64_t)v388[0]
                                                                                                  + v344) & 0xFFFFFFFFFFFFFFLL);
                    uint64_t v347 = (uint64_t)((*(double *)v386 - (double)(uint64_t)floor(*(double *)v386)) * 1000000.0)
                         + SLODWORD(v388[1]);
                    if (v347 >= 1000000)
                    {
                      v388[0] = (atomic_ullong *)((unint64_t)(v346 + 1) & 0xFFFFFFFFFFFFFFLL | v345 & 0xFF00000000000000);
                      LODWORD(v347) = v347 - 1000000;
                    }
                    if (v347 >= 0xF4240) {
                      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                    }
                    LODWORD(v388[1]) = v347;
                    goto LABEL_791;
                  case 7:
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v319 = v388[0];
                    v321 = (uint64_t *)v388[0][3];
                    atomic_ullong v320 = v388[0][4];
                    if ((uint64_t *)v320 == v321) {
                      goto LABEL_791;
                    }
                    if (!v388[0][1]) {
                      goto LABEL_791;
                    }
                    v322 = v386[0];
                    uint64_t v323 = 1;
                    do
                    {
                      uint64_t v324 = *v321++;
                      v323 *= v324;
                    }
                    while (v321 != (uint64_t *)v320);
                    if (!v323) {
                      goto LABEL_791;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v388[0] + 1);
                    unint64_t v325 = (v319[4] - v319[3]) >> 3;
                    uint64_t v385 = 0;
                    std::vector<unsigned long>::vector(&v383, v325, &v385);
                    v261 = v383;
                    v326 = v384;
                    break;
                  default:
                    goto LABEL_908;
                }
                while (2)
                {
                  uint64_t v327 = 0;
                  uint64_t v328 = (char *)v326 - (char *)v261;
                  if (v328)
                  {
                    unint64_t v329 = v328 >> 3;
                    v330 = (uint64_t *)v319[6];
                    if (v329 <= 1) {
                      unint64_t v329 = 1;
                    }
                    do
                    {
                      uint64_t v332 = (uint64_t)*v261++;
                      uint64_t v331 = v332;
                      uint64_t v333 = *v330++;
                      v327 += v333 * v331;
                      --v329;
                    }
                    while (v329);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v319 + 1);
                  *(double *)(*(void *)v319[1] + 8 * (v319[9] + v327)) = *(double *)&v322
                                                                         + *(double *)(*(void *)v319[1]
                                                                                     + 8 * (v319[9] + v327));
                  v261 = v383;
                  v326 = v384;
                  uint64_t v334 = v384 - v383;
                  uint64_t v335 = v334 - 1;
                  if ((char *)v384 - (char *)v383 < 1) {
                    goto LABEL_712;
                  }
                  atomic_ullong v336 = v319[3];
                  v337 = (char *)v383[v335] + 1;
                  v383[v335] = v337;
                  if ((unint64_t)v337 < *(void *)(v336 + 8 * v335))
                  {
LABEL_711:
                    uint64_t v334 = 1;
LABEL_712:
                    if (v335 < 0 || !v334) {
                      goto LABEL_714;
                    }
                    continue;
                  }
                  break;
                }
                v338 = (unint64_t *)&v261[v334 - 2];
                atomic_ullong v339 = v336 - 16;
                while (1)
                {
                  uint64_t v340 = v334 - 1;
                  v338[1] = 0;
                  if (v334 - 1 <= 0) {
                    goto LABEL_714;
                  }
                  unint64_t v341 = *v338 + 1;
                  *v338-- = v341;
                  unint64_t v342 = *(void *)(v339 + 8 * v334--);
                  if (v341 < v342)
                  {
                    uint64_t v335 = v340 - 1;
                    goto LABEL_711;
                  }
                }
              case 2:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    int v243 = *((char *)v386[0] + 31);
                    if (v243 >= 0) {
                      v244 = (const std::string::value_type *)(v386[0] + 1);
                    }
                    else {
                      v244 = (const std::string::value_type *)v386[0][1];
                    }
                    if (v243 >= 0) {
                      std::string::size_type v245 = *((unsigned __int8 *)v386[0] + 31);
                    }
                    else {
                      std::string::size_type v245 = v386[0][2];
                    }
                    std::string::append((std::string *)(v388[0] + 1), v244, v245);
                    goto LABEL_791;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 3:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    v246 = v386[0];
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v247 = v388[0];
                    turi::flexible_type_fail(v388[0][2] - v388[0][1] == v386[0][2] - v386[0][1]);
                    v248 = (double *)v247[1];
                    uint64_t v249 = v247[2] - (void)v248;
                    if (v249)
                    {
                      unint64_t v250 = v249 >> 3;
                      v251 = (double *)v246[1];
                      if (v250 <= 1) {
                        unint64_t v250 = 1;
                      }
                      do
                      {
                        double v252 = *v251++;
                        double *v248 = v252 + *v248;
                        ++v248;
                        --v250;
                      }
                      while (v250);
                    }
                    goto LABEL_791;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 4:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 5:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 6:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 7:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 8:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 9:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  default:
                    goto LABEL_908;
                }
              case 9:
                switch(BYTE4(v388[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_790;
                  case 2:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 3:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 4:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 5:
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    goto LABEL_790;
                  case 8:
                    if (*v388[0] != 1) {
                      operator new();
                    }
LABEL_790:
                    turi::flexible_type_fail(0);
                    goto LABEL_791;
                  case 9:
                    v253 = v386[0];
                    if (*v388[0] != 1) {
                      operator new();
                    }
                    v254 = v388[0];
                    v255 = v388[0] + 1;
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v388[0] + 1), (uint64_t)(v386[0] + 1))) {
                      turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    }
                    v257 = (uint64_t *)v254[3];
                    v256 = (uint64_t *)v254[4];
                    if (v256 == v257) {
                      goto LABEL_791;
                    }
                    if (!*v255) {
                      goto LABEL_791;
                    }
                    uint64_t v258 = 1;
                    do
                    {
                      uint64_t v259 = *v257++;
                      v258 *= v259;
                    }
                    while (v257 != v256);
                    if (!v258) {
                      goto LABEL_791;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v255);
                    unint64_t v260 = (v254[4] - v254[3]) >> 3;
                    uint64_t v385 = 0;
                    std::vector<unsigned long>::vector(&v383, v260, &v385);
                    v261 = v383;
                    v262 = v384;
                    break;
                  default:
                    goto LABEL_908;
                }
                break;
              default:
                goto LABEL_908;
            }
            while (1)
            {
              uint64_t v263 = (char *)v262 - (char *)v261;
              if (v263)
              {
                uint64_t v264 = 0;
                unint64_t v265 = v263 >> 3;
                v266 = (uint64_t *)v253[6];
                if (v265 <= 1) {
                  unint64_t v265 = 1;
                }
                v267 = v261;
                unint64_t v268 = v265;
                do
                {
                  uint64_t v270 = (uint64_t)*v267++;
                  uint64_t v269 = v270;
                  uint64_t v271 = *v266++;
                  v264 += v271 * v269;
                  --v268;
                }
                while (v268);
                uint64_t v272 = 0;
                double v273 = *(double *)(*(void *)v253[1] + 8 * (v253[9] + v264));
                v274 = (uint64_t *)v254[6];
                do
                {
                  uint64_t v276 = (uint64_t)*v261++;
                  uint64_t v275 = v276;
                  uint64_t v277 = *v274++;
                  v272 += v277 * v275;
                  --v265;
                }
                while (v265);
              }
              else
              {
                uint64_t v272 = 0;
                double v273 = *(double *)(*(void *)v253[1] + 8 * v253[9]);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v255);
              *(double *)(*(void *)v254[1] + 8 * (v254[9] + v272)) = v273
                                                                     + *(double *)(*(void *)v254[1]
                                                                                 + 8 * (v254[9] + v272));
              v261 = v383;
              v262 = v384;
              uint64_t v278 = v384 - v383;
              uint64_t v279 = v278 - 1;
              if ((char *)v384 - (char *)v383 >= 1)
              {
                atomic_ullong v280 = v254[3];
                v281 = (char *)v383[v279] + 1;
                v383[v279] = v281;
                if ((unint64_t)v281 >= *(void *)(v280 + 8 * v279))
                {
                  v282 = (unint64_t *)&v261[v278 - 2];
                  atomic_ullong v283 = v280 - 16;
                  while (1)
                  {
                    uint64_t v284 = v278 - 1;
                    v282[1] = 0;
                    if (v278 - 1 <= 0) {
                      break;
                    }
                    unint64_t v285 = *v282 + 1;
                    *v282-- = v285;
                    unint64_t v286 = *(void *)(v283 + 8 * v278--);
                    if (v285 < v286)
                    {
                      uint64_t v279 = v284 - 1;
                      goto LABEL_637;
                    }
                  }
LABEL_714:
                  if (v261)
                  {
LABEL_715:
                    v384 = v261;
                    operator delete(v261);
                  }
LABEL_791:
                  if (v388 == a2)
                  {
                    switch(BYTE4(v388[1]))
                    {
                      case 2:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v372 = *a2;
                          if (!*a2) {
                            goto LABEL_901;
                          }
                          if (*((char *)v372 + 31) < 0) {
                            operator delete((void *)v372[1]);
                          }
                          v373 = v372;
                          uint64_t v374 = 0x1012C404EF22A49;
                          goto LABEL_900;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v377 = *a2;
                          if (!*a2) {
                            goto LABEL_901;
                          }
                          v378 = (void *)v377[1];
                          if (v378)
                          {
                            v377[2] = (atomic_ullong)v378;
                            operator delete(v378);
                          }
                          v373 = v377;
                          uint64_t v374 = 0x1080C409938AC02;
                          goto LABEL_900;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v375 = *a2;
                          if (!*a2) {
                            goto LABEL_901;
                          }
                          v383 = (void **)(v375 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                          goto LABEL_895;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v375 = *a2;
                          if (!*a2) {
                            goto LABEL_901;
                          }
                          v383 = (void **)(v375 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_895:
                          v373 = v375;
                          uint64_t v374 = 0x1020C405E66F15BLL;
                          goto LABEL_900;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v379 = *a2;
                          if (!*a2) {
                            goto LABEL_901;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v379 + 2);
                          v373 = v379;
                          unsigned int v376 = -235920773;
                          goto LABEL_899;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          if (*a2)
                          {
                            v373 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
                            unsigned int v376 = 2071181815;
LABEL_899:
                            uint64_t v374 = v376 | 0x1030C4000000000;
LABEL_900:
                            MEMORY[0x22A614FA0](v373, v374);
                          }
LABEL_901:
                          *a2 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                  }
                  else
                  {
                    switch(*((unsigned char *)a2 + 12))
                    {
                      case 2:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v348 = *a2;
                          if (!*a2) {
                            goto LABEL_818;
                          }
                          if (*((char *)v348 + 31) < 0) {
                            operator delete((void *)v348[1]);
                          }
                          v349 = v348;
                          uint64_t v350 = 0x1012C404EF22A49;
                          goto LABEL_817;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v353 = *a2;
                          if (!*a2) {
                            goto LABEL_818;
                          }
                          v354 = (void *)v353[1];
                          if (v354)
                          {
                            v353[2] = (atomic_ullong)v354;
                            operator delete(v354);
                          }
                          v349 = v353;
                          uint64_t v350 = 0x1080C409938AC02;
                          goto LABEL_817;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v351 = *a2;
                          if (!*a2) {
                            goto LABEL_818;
                          }
                          v383 = (void **)(v351 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                          goto LABEL_812;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v351 = *a2;
                          if (!*a2) {
                            goto LABEL_818;
                          }
                          v383 = (void **)(v351 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_812:
                          v349 = v351;
                          uint64_t v350 = 0x1020C405E66F15BLL;
                          goto LABEL_817;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v355 = *a2;
                          if (!*a2) {
                            goto LABEL_818;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v355 + 2);
                          v349 = v355;
                          unsigned int v352 = -235920773;
                          goto LABEL_816;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          if (*a2)
                          {
                            v349 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
                            unsigned int v352 = 2071181815;
LABEL_816:
                            uint64_t v350 = v352 | 0x1030C4000000000;
LABEL_817:
                            MEMORY[0x22A614FA0](v349, v350);
                          }
LABEL_818:
                          *a2 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    *(atomic_ullong **)((char *)a2 + 5) = *(atomic_ullong **)((char *)v388 + 5);
                    *a2 = v388[0];
                    *((unsigned char *)a2 + 12) = BYTE4(v388[1]);
                    BYTE4(v388[1]) = 0;
                  }
                  memset(v388, 0, 13);
                  switch(BYTE4(v386[1]))
                  {
                    case 2:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v356 = v386[0];
                        if (v386[0])
                        {
                          if (*((char *)v386[0] + 31) < 0) {
                            operator delete(*((void **)v386[0] + 1));
                          }
                          v357 = v356;
                          uint64_t v358 = 0x1012C404EF22A49;
                          goto LABEL_845;
                        }
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v361 = v386[0];
                        if (v386[0])
                        {
                          v362 = (void *)v386[0][1];
                          if (v362)
                          {
                            v386[0][2] = (atomic_ullong)v362;
                            operator delete(v362);
                          }
                          v357 = v361;
                          uint64_t v358 = 0x1080C409938AC02;
                          goto LABEL_845;
                        }
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v359 = v386[0];
                        if (v386[0])
                        {
                          v383 = (void **)(v386[0] + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                          goto LABEL_840;
                        }
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v359 = v386[0];
                        if (v386[0])
                        {
                          v383 = (void **)(v386[0] + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_840:
                          v357 = v359;
                          uint64_t v358 = 0x1020C405E66F15BLL;
                          goto LABEL_845;
                        }
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v363 = v386[0];
                        if (v386[0])
                        {
                          boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
                          v357 = v363;
                          unsigned int v360 = -235920773;
                          goto LABEL_844;
                        }
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v386[0])
                      {
                        v357 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v386[0]);
                        unsigned int v360 = 2071181815;
LABEL_844:
                        uint64_t v358 = v360 | 0x1030C4000000000;
LABEL_845:
                        MEMORY[0x22A614FA0](v357, v358);
                      }
                      break;
                    default:
                      break;
                  }
                  switch(BYTE4(v387[1]))
                  {
                    case 2:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v364 = v387[0];
                        if (v387[0])
                        {
                          if (*((char *)v387[0] + 31) < 0) {
                            operator delete(*((void **)v387[0] + 1));
                          }
                          v365 = v364;
                          uint64_t v366 = 0x1012C404EF22A49;
                          goto LABEL_871;
                        }
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v369 = v387[0];
                        if (v387[0])
                        {
                          v370 = (void *)v387[0][1];
                          if (v370)
                          {
                            v387[0][2] = (atomic_ullong)v370;
                            operator delete(v370);
                          }
                          v365 = v369;
                          uint64_t v366 = 0x1080C409938AC02;
                          goto LABEL_871;
                        }
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v367 = v387[0];
                        if (v387[0])
                        {
                          v383 = (void **)(v387[0] + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
                          goto LABEL_866;
                        }
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v367 = v387[0];
                        if (v387[0])
                        {
                          v383 = (void **)(v387[0] + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_866:
                          v365 = v367;
                          uint64_t v366 = 0x1020C405E66F15BLL;
                          goto LABEL_871;
                        }
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        v371 = v387[0];
                        if (v387[0])
                        {
                          boost::detail::shared_count::~shared_count((atomic_uint **)v387[0] + 2);
                          v365 = v371;
                          unsigned int v368 = -235920773;
                          goto LABEL_870;
                        }
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(v387[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v387[0])
                      {
                        v365 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v387[0]);
                        unsigned int v368 = 2071181815;
LABEL_870:
                        uint64_t v366 = v368 | 0x1030C4000000000;
LABEL_871:
                        MEMORY[0x22A614FA0](v365, v366);
                      }
                      break;
                    default:
                      break;
                  }
                  atomic_ullong *volatile v27 = (atomic_ullong *)((char *)a1[2] + (void)a2[2]);
LABEL_873:
                  a2[2] = v27;
                  return;
                }
LABEL_637:
                uint64_t v278 = 1;
              }
              if (v279 < 0 || !v278) {
                goto LABEL_714;
              }
            }
          }
        }
      }
    }
  }
  if (v5)
  {
    if (a1 != a2)
    {
      switch(*((unsigned char *)a2 + 12))
      {
        case 2:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v11 = *a2;
            if (!*a2) {
              goto LABEL_80;
            }
            if (*((char *)v11 + 31) < 0) {
              operator delete((void *)v11[1]);
            }
            BOOL v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_79;
          }
          break;
        case 3:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v20 = *a2;
            if (!*a2) {
              goto LABEL_80;
            }
            unsigned int v21 = (void *)v20[1];
            if (v21)
            {
              v20[2] = (atomic_ullong)v21;
              operator delete(v21);
            }
            BOOL v12 = v20;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_79;
          }
          break;
        case 4:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::vector<char>::size_type v18 = *a2;
            if (!*a2) {
              goto LABEL_80;
            }
            v383 = (void **)(v18 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
            goto LABEL_74;
          }
          break;
        case 5:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::vector<char>::size_type v18 = *a2;
            if (!*a2) {
              goto LABEL_80;
            }
            v383 = (void **)(v18 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v383);
LABEL_74:
            BOOL v12 = v18;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_79;
          }
          break;
        case 8:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v22 = *a2;
            if (!*a2) {
              goto LABEL_80;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v22 + 2);
            BOOL v12 = v22;
            unsigned int v19 = -235920773;
            goto LABEL_78;
          }
          break;
        case 9:
          if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*a2)
            {
              BOOL v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
              unsigned int v19 = 2071181815;
LABEL_78:
              uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_79:
              MEMORY[0x22A614FA0](v12, v13);
            }
LABEL_80:
            *a2 = 0;
          }
          break;
        default:
          break;
      }
      long long v23 = *a1;
      *(atomic_ullong **)((char *)a2 + 5) = *(atomic_ullong **)((char *)a1 + 5);
      *a2 = v23;
      LODWORD(v23) = *((unsigned __int8 *)a1 + 12);
      *((unsigned char *)a2 + 12) = (_BYTE)v23;
      BOOL v24 = v23 > 9;
      int v25 = (1 << (char)v23) & 0x33C;
      if (!v24 && v25 != 0) {
        atomic_fetch_add(*a2, 1uLL);
      }
    }
    atomic_ullong *volatile v27 = a1[2];
    goto LABEL_873;
  }
}

void sub_224160F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21,uint64_t a22,int a23,char a24)
{
  MEMORY[0x22A614FA0](v24, 0x1020C405E66F15BLL);
  switch(a24)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      if (*(char *)(a22 + 31) < 0) {
        operator delete(*(void **)(a22 + 8));
      }
      double v28 = (void *)v27;
      uint64_t v29 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v32 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      double v33 = *(void **)(a22 + 8);
      if (v33)
      {
        *(void *)(a22 + 16) = v33;
        operator delete(v33);
      }
      double v28 = (void *)v32;
      uint64_t v29 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      *(void *)(v25 - 88) = a22 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      *(void *)(v25 - 88) = a22 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
LABEL_21:
      double v28 = (void *)v30;
      uint64_t v29 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v34 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a22 + 16));
      double v28 = (void *)v34;
      unsigned int v31 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a22) {
        goto LABEL_27;
      }
      double v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a22);
      unsigned int v31 = 2071181815;
LABEL_25:
      uint64_t v29 = v31 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v28, v29);
LABEL_27:
      a22 = 0;
      a23 = 0;
      a24 = 0;
      switch(a18)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v35 = a16;
          if (!a16) {
            goto LABEL_53;
          }
          if (*(char *)(a16 + 31) < 0) {
            operator delete(*(void **)(a16 + 8));
          }
          unint64_t v36 = (void *)v35;
          uint64_t v37 = 0x1012C404EF22A49;
          goto LABEL_52;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v40 = a16;
          if (!a16) {
            goto LABEL_53;
          }
          uint64_t v41 = *(void **)(a16 + 8);
          if (v41)
          {
            *(void *)(a16 + 16) = v41;
            operator delete(v41);
          }
          unint64_t v36 = (void *)v40;
          uint64_t v37 = 0x1080C409938AC02;
          goto LABEL_52;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v38 = a16;
          if (!a16) {
            goto LABEL_53;
          }
          *(void *)(v25 - 88) = a16 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
          goto LABEL_47;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v38 = a16;
          if (!a16) {
            goto LABEL_53;
          }
          *(void *)(v25 - 88) = a16 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
LABEL_47:
          unint64_t v36 = (void *)v38;
          uint64_t v37 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v42 = a16;
          if (!a16) {
            goto LABEL_53;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(a16 + 16));
          unint64_t v36 = (void *)v42;
          unsigned int v39 = -235920773;
          goto LABEL_51;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a16) {
            goto LABEL_53;
          }
          unint64_t v36 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a16);
          unsigned int v39 = 2071181815;
LABEL_51:
          uint64_t v37 = v39 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x22A614FA0](v36, v37);
LABEL_53:
          a16 = 0;
          a17 = 0;
          switch(a21)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_85;
              }
              uint64_t v43 = a19;
              if (!a19) {
                goto LABEL_85;
              }
              if (*(char *)(a19 + 31) < 0) {
                operator delete(*(void **)(a19 + 8));
              }
              unint64_t v47 = (void *)v43;
              uint64_t v48 = 0x1012C404EF22A49;
              goto LABEL_84;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_85;
              }
              uint64_t v45 = a19;
              if (!a19) {
                goto LABEL_85;
              }
              unint64_t v50 = *(void **)(a19 + 8);
              if (v50)
              {
                *(void *)(a19 + 16) = v50;
                operator delete(v50);
              }
              unint64_t v47 = (void *)v45;
              uint64_t v48 = 0x1080C409938AC02;
              goto LABEL_84;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_85;
              }
              uint64_t v44 = a19;
              if (!a19) {
                goto LABEL_85;
              }
              a16 = a19 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
              goto LABEL_81;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_85;
              }
              uint64_t v44 = a19;
              if (!a19) {
                goto LABEL_85;
              }
              a16 = a19 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_81:
              unint64_t v47 = (void *)v44;
              uint64_t v48 = 0x1020C405E66F15BLL;
              goto LABEL_84;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_85;
              }
              uint64_t v46 = a19;
              if (!a19) {
                goto LABEL_85;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(a19 + 16));
              unint64_t v47 = (void *)v46;
              unsigned int v49 = -235920773;
              goto LABEL_83;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a19) {
                goto LABEL_85;
              }
              unint64_t v47 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a19);
              unsigned int v49 = 2071181815;
LABEL_83:
              uint64_t v48 = v49 | 0x1030C4000000000;
LABEL_84:
              MEMORY[0x22A614FA0](v47, v48);
LABEL_85:
              _Unwind_Resume(a1);
              return;
            default:
              goto LABEL_85;
          }
        default:
          goto LABEL_53;
      }
    default:
      goto LABEL_27;
  }
}

void *turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::~generic_aggregator(void *a1)
{
  *a1 = &unk_26D76D408;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)(a1 + 5));
  std::pair<turi::flexible_type,unsigned long>::~pair(v2);
  return a1;
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::new_instance()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::add_element_simple(uint64_t a1, atomic_ullong **a2)
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  unint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec((uint64_t)&v4, (uint64_t *)(a1 + 40));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_22416293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load()
{
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::~generic_aggregator(void *a1)
{
  *a1 = &unk_26D76D408;
  uint64_t v1 = (uint64_t)(a1 + 2);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)(a1 + 5));
  std::pair<turi::flexible_type,unsigned long>::~pair(v1);
  JUMPOUT(0x22A614FA0);
}

void turi::unity_sarray::mean(void)::$_2::operator()(atomic_ullong **a1, unint64_t *a2)
{
  uint64_t v358 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)a1 + 12);
  if (v2 == 7) {
    return;
  }
  long long v5 = (void *)a2[2];
  if (!v5)
  {
    a2[2] = 1;
    if (a1 != (atomic_ullong **)a2)
    {
      switch(*((unsigned char *)a2 + 12))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v11 = (atomic_ullong *volatile)*a2;
            if (!*a2) {
              goto LABEL_81;
            }
            if (*((char *)v11 + 31) < 0) {
              operator delete((void *)v11[1]);
            }
            BOOL v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_80;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = (atomic_ullong *volatile)*a2;
            if (!*a2) {
              goto LABEL_81;
            }
            unsigned int v21 = (void *)v20[1];
            if (v21)
            {
              v20[2] = (atomic_ullong)v21;
              operator delete(v21);
            }
            BOOL v12 = v20;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_80;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = (atomic_ullong *volatile)*a2;
            if (!*a2) {
              goto LABEL_81;
            }
            v351 = (void **)(v18 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v351);
            goto LABEL_75;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = (atomic_ullong *volatile)*a2;
            if (!*a2) {
              goto LABEL_81;
            }
            v351 = (void **)(v18 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v351);
LABEL_75:
            BOOL v12 = v18;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_80;
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v22 = (atomic_ullong *volatile)*a2;
            if (!*a2) {
              goto LABEL_81;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v22 + 2);
            BOOL v12 = v22;
            unsigned int v19 = -235920773;
            goto LABEL_79;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*a2)
            {
              BOOL v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a2);
              unsigned int v19 = 2071181815;
LABEL_79:
              uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_80:
              MEMORY[0x22A614FA0](v12, v13);
            }
LABEL_81:
            *a2 = 0;
          }
          break;
        default:
          break;
      }
      long long v23 = *a1;
      *(unint64_t *)((char *)a2 + 5) = *(unint64_t *)((char *)a1 + 5);
      *a2 = (unint64_t)v23;
      LODWORD(v23) = *((unsigned __int8 *)a1 + 12);
      *((unsigned char *)a2 + 12) = (_BYTE)v23;
      switch((int)v23)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add((atomic_ullong *volatile)*a2, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  if (v2 == 3)
  {
    int v6 = *((unsigned __int8 *)a2 + 12);
    uint64_t v7 = 1;
    switch(*((unsigned char *)a2 + 12))
    {
      case 3:
        uint64_t v8 = (void *)(*a2 + 8);
        uint64_t v9 = (void *)(*a2 + 16);
        char v10 = 3;
        goto LABEL_17;
      case 4:
        uint64_t v8 = (void *)(*a2 + 8);
        uint64_t v9 = (void *)(*a2 + 16);
        char v10 = 4;
        goto LABEL_17;
      case 5:
        uint64_t v8 = (void *)(*a2 + 8);
        uint64_t v9 = (void *)(*a2 + 16);
        char v10 = 5;
LABEL_17:
        uint64_t v7 = (uint64_t)(*v9 - *v8) >> v10;
        break;
      case 9:
        size_t v16 = *(uint64_t **)(*a2 + 24);
        long long v15 = *(uint64_t **)(*a2 + 32);
        if (v15 == v16)
        {
          uint64_t v7 = 0;
        }
        else
        {
          uint64_t v7 = *(void *)(*a2 + 8);
          if (v7)
          {
            uint64_t v7 = 1;
            do
            {
              uint64_t v17 = *v16++;
              v7 *= v17;
            }
            while (v16 != v15);
          }
        }
        break;
      default:
        break;
    }
    if (((*a1)[2] - (*a1)[1]) >> 3 != v7) {
      turi::unity_sarray::mean(void)::$_2::operator() const(turi::flexible_type const&,std::pair<turi::flexible_type,unsigned long> &)::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    int v6 = *((unsigned __int8 *)a2 + 12);
  }
  if (v6 == 9)
  {
    if (!turi::flexible_type_impl::ndarray<double>::same_shape(*a2 + 8, (uint64_t)(*a1 + 1))) {
      turi::unity_sarray::mean(void)::$_2::operator() const(turi::flexible_type const&,std::pair<turi::flexible_type,unsigned long> &)::{lambda(void)#2}::operator()();
    }
    long long v5 = (void *)a2[2];
  }
  a2[2] = (unint64_t)v5 + 1;
  memset(v354, 0, 13);
  if (v354 != a1)
  {
    *(atomic_ullong **)((char *)v354 + 5) = *(atomic_ullong **)((char *)a1 + 5);
    v354[0] = *a1;
    BYTE4(v354[1]) = *((unsigned char *)a1 + 12);
    if (BYTE4(v354[1]) <= 9u && ((1 << SBYTE4(v354[1])) & 0x33C) != 0) {
      atomic_fetch_add(v354[0], 1uLL);
    }
  }
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      switch(BYTE4(v354[1]))
      {
        case 0:
          uint64_t v14 = (atomic_ullong *)((char *)v354[0] - *a2);
          goto LABEL_51;
        case 1:
          double v121 = (double)(uint64_t)*a2;
          goto LABEL_236;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          atomic_ullong v65 = (double *)v354[0][1];
          uint64_t v66 = v354[0][2] - (void)v65;
          if (v66)
          {
            unint64_t v67 = v66 >> 3;
            double v68 = (double)(uint64_t)*a2;
            if (v67 <= 1) {
              unint64_t v67 = 1;
            }
            do
            {
              *atomic_ullong v65 = *v65 - v68;
              ++v65;
              --v67;
            }
            while (v67);
          }
          goto LABEL_280;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 6:
          v354[0] = (atomic_ullong *)((unint64_t)v354[0] & 0xFF00000000000000 | ((unint64_t)v354[0] - *a2) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_280;
        case 7:
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          uint64_t v73 = v354[0];
          unint64_t v75 = (uint64_t *)v354[0][3];
          atomic_ullong v74 = v354[0][4];
          if ((uint64_t *)v74 == v75) {
            goto LABEL_280;
          }
          if (!v354[0][1]) {
            goto LABEL_280;
          }
          double v76 = (double)(uint64_t)*a2;
          uint64_t v77 = 1;
          do
          {
            uint64_t v78 = *v75++;
            v77 *= v78;
          }
          while (v75 != (uint64_t *)v74);
          if (!v77) {
            goto LABEL_280;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v354[0] + 1);
          unint64_t v79 = (v73[4] - v73[3]) >> 3;
          uint64_t v353 = 0;
          std::vector<unsigned long>::vector(&v351, v79, &v353);
          unsigned int v39 = v351;
          uint64_t v80 = v352;
          break;
        default:
          goto LABEL_898;
      }
      while (2)
      {
        uint64_t v81 = 0;
        uint64_t v82 = (char *)v80 - (char *)v39;
        if (v82)
        {
          unint64_t v83 = v82 >> 3;
          uint64_t v84 = (uint64_t *)v73[6];
          if (v83 <= 1) {
            unint64_t v83 = 1;
          }
          do
          {
            uint64_t v86 = (uint64_t)*v39++;
            uint64_t v85 = v86;
            uint64_t v87 = *v84++;
            v81 += v87 * v85;
            --v83;
          }
          while (v83);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v73 + 1);
        *(double *)(*(void *)v73[1] + 8 * (v73[9] + v81)) = *(double *)(*(void *)v73[1] + 8 * (v73[9] + v81)) - v76;
        unsigned int v39 = v351;
        uint64_t v80 = v352;
        uint64_t v88 = v352 - v351;
        uint64_t v89 = v88 - 1;
        if ((char *)v352 - (char *)v351 < 1) {
          goto LABEL_179;
        }
        atomic_ullong v90 = v73[3];
        unint64_t v91 = (char *)v351[v89] + 1;
        v351[v89] = v91;
        if ((unint64_t)v91 < *(void *)(v90 + 8 * v89))
        {
LABEL_178:
          uint64_t v88 = 1;
LABEL_179:
          if (v89 < 0 || !v88) {
            goto LABEL_203;
          }
          continue;
        }
        break;
      }
      unint64_t v92 = (unint64_t *)&v39[v88 - 2];
      atomic_ullong v93 = v90 - 16;
      while (1)
      {
        uint64_t v94 = v88 - 1;
        v92[1] = 0;
        if (v88 - 1 <= 0) {
          goto LABEL_204;
        }
        unint64_t v95 = *v92 + 1;
        *v92-- = v95;
        unint64_t v96 = *(void *)(v93 + 8 * v88--);
        if (v95 < v96)
        {
          uint64_t v89 = v94 - 1;
          goto LABEL_178;
        }
      }
    case 1:
      switch(BYTE4(v354[1]))
      {
        case 0:
          uint64_t v14 = (atomic_ullong *)(uint64_t)((double)(uint64_t)v354[0] - *(double *)a2);
LABEL_51:
          v354[0] = v14;
          goto LABEL_280;
        case 1:
          double v121 = *(double *)a2;
LABEL_236:
          *(double *)v354 = *(double *)v354 - v121;
          goto LABEL_280;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          uint64_t v69 = (double *)v354[0][1];
          uint64_t v70 = v354[0][2] - (void)v69;
          if (v70)
          {
            double v71 = *(double *)a2;
            unint64_t v72 = v70 >> 3;
            if (v72 <= 1) {
              unint64_t v72 = 1;
            }
            do
            {
              *uint64_t v69 = *v69 - v71;
              ++v69;
              --v72;
            }
            while (v72);
          }
          goto LABEL_280;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 6:
          unint64_t v122 = vcvtmd_s64_f64(*(double *)a2);
          uint64_t v123 = (uint64_t)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
          unint64_t v124 = (unint64_t)v354[0];
          unint64_t v125 = (char *)v354[0] - v122;
          v354[0] = (atomic_ullong *)((unint64_t)v354[0] & 0xFF00000000000000 | ((unint64_t)v354[0]
                                                                                        - v122) & 0xFFFFFFFFFFFFFFLL);
          unsigned int v126 = LODWORD(v354[1]) - v123;
          if (SLODWORD(v354[1]) - v123 < 0)
          {
            v354[0] = (atomic_ullong *)((unint64_t)(v125 - 1) & 0xFFFFFFFFFFFFFFLL | v124 & 0xFF00000000000000);
            v126 += 1000000;
          }
          if (v126 > 0xF423F) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          LODWORD(v354[1]) = v126;
          goto LABEL_280;
        case 7:
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          uint64_t v97 = v354[0];
          unint64_t v99 = (uint64_t *)v354[0][3];
          atomic_ullong v98 = v354[0][4];
          if ((uint64_t *)v98 == v99) {
            goto LABEL_280;
          }
          if (!v354[0][1]) {
            goto LABEL_280;
          }
          double v100 = *(double *)a2;
          uint64_t v101 = 1;
          do
          {
            uint64_t v102 = *v99++;
            v101 *= v102;
          }
          while (v99 != (uint64_t *)v98);
          if (!v101) {
            goto LABEL_280;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v354[0] + 1);
          unint64_t v103 = (v97[4] - v97[3]) >> 3;
          uint64_t v353 = 0;
          std::vector<unsigned long>::vector(&v351, v103, &v353);
          unsigned int v39 = v351;
          uint64_t v104 = v352;
          break;
        default:
          goto LABEL_898;
      }
      while (2)
      {
        uint64_t v105 = 0;
        uint64_t v106 = (char *)v104 - (char *)v39;
        if (v106)
        {
          unint64_t v107 = v106 >> 3;
          uint64_t v108 = (uint64_t *)v97[6];
          if (v107 <= 1) {
            unint64_t v107 = 1;
          }
          do
          {
            uint64_t v110 = (uint64_t)*v39++;
            uint64_t v109 = v110;
            uint64_t v111 = *v108++;
            v105 += v111 * v109;
            --v107;
          }
          while (v107);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v97 + 1);
        *(double *)(*(void *)v97[1] + 8 * (v97[9] + v105)) = *(double *)(*(void *)v97[1] + 8 * (v97[9] + v105))
                                                             - v100;
        unsigned int v39 = v351;
        uint64_t v104 = v352;
        uint64_t v112 = v352 - v351;
        uint64_t v113 = v112 - 1;
        if ((char *)v352 - (char *)v351 < 1) {
          goto LABEL_201;
        }
        atomic_ullong v114 = v97[3];
        unint64_t v115 = (char *)v351[v113] + 1;
        v351[v113] = v115;
        if ((unint64_t)v115 < *(void *)(v114 + 8 * v113))
        {
LABEL_200:
          uint64_t v112 = 1;
LABEL_201:
          if (v113 < 0 || !v112) {
            goto LABEL_203;
          }
          continue;
        }
        break;
      }
      unint64_t v116 = (unint64_t *)&v39[v112 - 2];
      atomic_ullong v117 = v114 - 16;
      while (1)
      {
        uint64_t v118 = v112 - 1;
        v116[1] = 0;
        if (v112 - 1 <= 0) {
          goto LABEL_203;
        }
        unint64_t v119 = *v116 + 1;
        *v116-- = v119;
        unint64_t v120 = *(void *)(v117 + 8 * v112--);
        if (v119 < v120)
        {
          uint64_t v113 = v118 - 1;
          goto LABEL_200;
        }
      }
    case 2:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 3:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          atomic_ullong *volatile v24 = (atomic_ullong *volatile)*a2;
          if (*v354[0] != 1) {
            operator new();
          }
          uint64_t v25 = v354[0];
          turi::flexible_type_fail(v354[0][2] - v354[0][1] == v24[2] - v24[1]);
          uint64_t v26 = (double *)v25[1];
          uint64_t v27 = v25[2] - (void)v26;
          if (v27)
          {
            unint64_t v28 = v27 >> 3;
            uint64_t v29 = (double *)v24[1];
            if (v28 <= 1) {
              unint64_t v28 = 1;
            }
            do
            {
              double v30 = *v29++;
              double *v26 = *v26 - v30;
              ++v26;
              --v28;
            }
            while (v28);
          }
          goto LABEL_280;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 4:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 5:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 6:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 7:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 8:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 9:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        default:
          goto LABEL_898;
      }
    case 9:
      switch(BYTE4(v354[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_279;
        case 2:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 3:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 4:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 5:
          if (*v354[0] != 1) {
            operator new();
          }
          goto LABEL_279;
        case 8:
          if (*v354[0] != 1) {
            operator new();
          }
LABEL_279:
          turi::flexible_type_fail(0);
          goto LABEL_280;
        case 9:
          atomic_ullong *volatile v31 = (atomic_ullong *volatile)*a2;
          if (*v354[0] != 1) {
            operator new();
          }
          uint64_t v32 = v354[0];
          double v33 = v354[0] + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v354[0] + 1), (uint64_t)(v31 + 1))) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v35 = (uint64_t *)v32[3];
          uint64_t v34 = (uint64_t *)v32[4];
          if (v34 == v35) {
            goto LABEL_280;
          }
          if (!*v33) {
            goto LABEL_280;
          }
          uint64_t v36 = 1;
          do
          {
            uint64_t v37 = *v35++;
            v36 *= v37;
          }
          while (v35 != v34);
          if (!v36) {
            goto LABEL_280;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v33);
          unint64_t v38 = (v32[4] - v32[3]) >> 3;
          uint64_t v353 = 0;
          std::vector<unsigned long>::vector(&v351, v38, &v353);
          unsigned int v39 = v351;
          uint64_t v40 = v352;
          break;
        default:
          goto LABEL_898;
      }
      break;
    default:
LABEL_898:
      turi::flexible_type_fail(0);
LABEL_902:
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v41 = (char *)v40 - (char *)v39;
    if (v41)
    {
      uint64_t v42 = 0;
      unint64_t v43 = v41 >> 3;
      uint64_t v44 = (uint64_t *)v31[6];
      if (v43 <= 1) {
        unint64_t v43 = 1;
      }
      uint64_t v45 = v39;
      unint64_t v46 = v43;
      do
      {
        uint64_t v48 = (uint64_t)*v45++;
        uint64_t v47 = v48;
        uint64_t v49 = *v44++;
        v42 += v49 * v47;
        --v46;
      }
      while (v46);
      uint64_t v50 = 0;
      double v51 = *(double *)(*(void *)v31[1] + 8 * (v31[9] + v42));
      uint64_t v52 = (uint64_t *)v32[6];
      do
      {
        uint64_t v54 = (uint64_t)*v39++;
        uint64_t v53 = v54;
        uint64_t v55 = *v52++;
        v50 += v55 * v53;
        --v43;
      }
      while (v43);
    }
    else
    {
      uint64_t v50 = 0;
      double v51 = *(double *)(*(void *)v31[1] + 8 * v31[9]);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v33);
    *(double *)(*(void *)v32[1] + 8 * (v32[9] + v50)) = *(double *)(*(void *)v32[1] + 8 * (v32[9] + v50)) - v51;
    unsigned int v39 = v351;
    uint64_t v40 = v352;
    uint64_t v56 = v352 - v351;
    uint64_t v57 = v56 - 1;
    if ((char *)v352 - (char *)v351 < 1) {
      goto LABEL_127;
    }
    atomic_ullong v58 = v32[3];
    uint64_t v59 = (char *)v351[v57] + 1;
    v351[v57] = v59;
    if ((unint64_t)v59 >= *(void *)(v58 + 8 * v57)) {
      break;
    }
LABEL_126:
    uint64_t v56 = 1;
LABEL_127:
    if (v57 < 0 || !v56) {
      goto LABEL_203;
    }
  }
  uint64_t v60 = (unint64_t *)&v39[v56 - 2];
  atomic_ullong v61 = v58 - 16;
  while (1)
  {
    uint64_t v62 = v56 - 1;
    v60[1] = 0;
    if (v56 - 1 <= 0) {
      break;
    }
    unint64_t v63 = *v60 + 1;
    *v60-- = v63;
    unint64_t v64 = *(void *)(v61 + 8 * v56--);
    if (v63 < v64)
    {
      uint64_t v57 = v62 - 1;
      goto LABEL_126;
    }
  }
LABEL_203:
  if (v39)
  {
LABEL_204:
    unsigned int v352 = v39;
    operator delete(v39);
  }
LABEL_280:
  double v349 = (double)a2[2];
  double v355 = 0.0;
  int v356 = 0;
  char v357 = 0;
  turi::flexible_type::operator=<double>((uint64_t)&v355, &v349);
  double v127 = *(double *)v354;
  int v128 = BYTE4(v354[1]);
  if (BYTE4(v354[1]) <= 9u && ((1 << SBYTE4(v354[1])) & 0x33C) != 0) {
    atomic_fetch_add(v354[0], 1uLL);
  }
  switch(v357)
  {
    case 0:
      switch(v128)
      {
        case 0:
          *(uint64_t *)&v127 /= *(uint64_t *)&v355;
LABEL_340:
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              unint64_t v138 = *a2 + *(void *)&v127;
              goto LABEL_407;
            case 1:
              double v169 = (double)*(uint64_t *)&v127;
              goto LABEL_656;
            case 2:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              goto LABEL_415;
            case 3:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              double v142 = *(double **)(*a2 + 8);
              uint64_t v143 = *(void *)(*a2 + 16) - (void)v142;
              if (!v143) {
                goto LABEL_725;
              }
              unint64_t v144 = v143 >> 3;
              if (v144 <= 1) {
                unint64_t v144 = 1;
              }
              do
              {
                *double v142 = *v142 + (double)*(uint64_t *)&v127;
                ++v142;
                --v144;
              }
              while (v144);
              goto LABEL_616;
            case 4:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              goto LABEL_415;
            case 5:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              goto LABEL_415;
            case 6:
              unint64_t v138 = *a2 & 0xFF00000000000000 | (*a2 + *(void *)&v127) & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_407;
            case 7:
              goto LABEL_415;
            case 8:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              goto LABEL_415;
            case 9:
              if (*(void *)*a2 != 1) {
                operator new();
              }
              atomic_ullong *volatile v145 = (atomic_ullong *volatile)*a2;
              uint64_t v147 = *(uint64_t **)(*a2 + 24);
              v146 = *(uint64_t **)(*a2 + 32);
              if (v146 == v147 || !v145[1]) {
                goto LABEL_725;
              }
              uint64_t v148 = 1;
              do
              {
                uint64_t v149 = *v147++;
                v148 *= v149;
              }
              while (v147 != v146);
              if (!v148) {
                goto LABEL_616;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
              unint64_t v150 = (v145[4] - v145[3]) >> 3;
              uint64_t v350 = 0;
              std::vector<unsigned long>::vector(&v351, v150, &v350);
              v151 = v351;
              uint64_t v152 = v352;
              break;
            default:
              goto LABEL_899;
          }
          while (2)
          {
            uint64_t v153 = 0;
            uint64_t v154 = (char *)v152 - (char *)v151;
            if (v154)
            {
              unint64_t v155 = v154 >> 3;
              v156 = (uint64_t *)v145[6];
              if (v155 <= 1) {
                unint64_t v155 = 1;
              }
              do
              {
                uint64_t v158 = (uint64_t)*v151++;
                uint64_t v157 = v158;
                uint64_t v159 = *v156++;
                v153 += v159 * v157;
                --v155;
              }
              while (v155);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
            *(double *)(*(void *)v145[1] + 8 * (v145[9] + v153)) = *(double *)(*(void *)v145[1]
                                                                               + 8 * (v145[9] + v153))
                                                                   + (double)*(uint64_t *)&v127;
            v151 = v351;
            uint64_t v152 = v352;
            uint64_t v160 = v352 - v351;
            uint64_t v161 = v160 - 1;
            if ((char *)v352 - (char *)v351 < 1) {
              goto LABEL_401;
            }
            atomic_ullong v162 = v145[3];
            v163 = (char *)v351[v161] + 1;
            v351[v161] = v163;
            if ((unint64_t)v163 < *(void *)(v162 + 8 * v161))
            {
LABEL_400:
              uint64_t v160 = 1;
LABEL_401:
              if (v161 < 0 || !v160) {
                goto LABEL_614;
              }
              continue;
            }
            break;
          }
          uint64_t v164 = (unint64_t *)&v151[v160 - 2];
          atomic_ullong v165 = v162 - 16;
          while (1)
          {
            uint64_t v166 = v160 - 1;
            v164[1] = 0;
            if (v160 - 1 <= 0) {
              goto LABEL_615;
            }
            unint64_t v167 = *v164 + 1;
            *v164-- = v167;
            unint64_t v168 = *(void *)(v165 + 8 * v160--);
            if (v167 < v168)
            {
              uint64_t v161 = v166 - 1;
              goto LABEL_400;
            }
          }
        case 1:
          double v173 = (double)*(uint64_t *)&v355;
          goto LABEL_486;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          unint64_t v341 = *(double **)(*(void *)&v127 + 8);
          uint64_t v342 = *(void *)(*(void *)&v127 + 16) - (void)v341;
          if (v342)
          {
            unint64_t v343 = v342 >> 3;
            double v344 = (double)*(uint64_t *)&v355;
            if (v343 <= 1) {
              unint64_t v343 = 1;
            }
            do
            {
              *unint64_t v341 = *v341 / v344;
              ++v341;
              --v343;
            }
            while (v343);
          }
          goto LABEL_877;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 6:
        case 7:
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          atomic_ullong v296 = *(uint64_t **)(*(void *)&v127 + 24);
          v295 = *(uint64_t **)(*(void *)&v127 + 32);
          if (v295 == v296) {
            goto LABEL_877;
          }
          if (!*(void *)(*(void *)&v127 + 8)) {
            goto LABEL_877;
          }
          double v297 = (double)*(uint64_t *)&v355;
          uint64_t v298 = 1;
          do
          {
            uint64_t v299 = *v296++;
            v298 *= v299;
          }
          while (v296 != v295);
          if (!v298) {
            goto LABEL_877;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v127 + 8));
          unint64_t v300 = (uint64_t)(*(void *)(*(void *)&v127 + 32) - *(void *)(*(void *)&v127 + 24)) >> 3;
          uint64_t v350 = 0;
          std::vector<unsigned long>::vector(&v351, v300, &v350);
          uint64_t v269 = v351;
          unint64_t v301 = v352;
          break;
        default:
          goto LABEL_899;
      }
      while (2)
      {
        uint64_t v302 = 0;
        uint64_t v303 = (char *)v301 - (char *)v269;
        if (v303)
        {
          unint64_t v304 = v303 >> 3;
          unint64_t v305 = (uint64_t *)v171[6];
          if (v304 <= 1) {
            unint64_t v304 = 1;
          }
          do
          {
            uint64_t v307 = (uint64_t)*v269++;
            uint64_t v306 = v307;
            uint64_t v308 = *v305++;
            v302 += v308 * v306;
            --v304;
          }
          while (v304);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v171 + 1);
        *(double *)(*(void *)v171[1] + 8 * (v171[9] + v302)) = *(double *)(*(void *)v171[1] + 8 * (v171[9] + v302))
                                                               / v297;
        uint64_t v269 = v351;
        unint64_t v301 = v352;
        uint64_t v309 = v352 - v351;
        uint64_t v310 = v309 - 1;
        if ((char *)v352 - (char *)v351 < 1) {
          goto LABEL_821;
        }
        uint64_t v311 = v171[3];
        atomic_ullong v312 = (char *)v351[v310] + 1;
        v351[v310] = v312;
        if ((unint64_t)v312 < *(void *)(v311 + 8 * v310))
        {
LABEL_820:
          uint64_t v309 = 1;
LABEL_821:
          if (v310 < 0 || !v309) {
            goto LABEL_844;
          }
          continue;
        }
        break;
      }
      v313 = (unint64_t *)&v269[v309 - 2];
      uint64_t v314 = v311 - 16;
      while (1)
      {
        uint64_t v315 = v309 - 1;
        v313[1] = 0;
        if (v309 - 1 <= 0) {
          goto LABEL_845;
        }
        unint64_t v316 = *v313 + 1;
        *v313-- = v316;
        unint64_t v317 = *(void *)(v314 + 8 * v309--);
        if (v316 < v317)
        {
          uint64_t v310 = v315 - 1;
          goto LABEL_820;
        }
      }
    case 1:
      switch(v128)
      {
        case 0:
          *(void *)&double v127 = (uint64_t)((double)*(uint64_t *)&v127 / v355);
          goto LABEL_313;
        case 1:
          double v173 = v355;
LABEL_486:
          double v127 = v127 / v173;
          goto LABEL_313;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          unint64_t v345 = *(double **)(*(void *)&v127 + 8);
          uint64_t v346 = *(void *)(*(void *)&v127 + 16) - (void)v345;
          if (v346)
          {
            double v347 = v355;
            unint64_t v348 = v346 >> 3;
            if (v348 <= 1) {
              unint64_t v348 = 1;
            }
            do
            {
              *unint64_t v345 = *v345 / v347;
              ++v345;
              --v348;
            }
            while (v348);
          }
          goto LABEL_877;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 6:
        case 7:
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          v319 = *(uint64_t **)(*(void *)&v127 + 24);
          unint64_t v318 = *(uint64_t **)(*(void *)&v127 + 32);
          if (v318 == v319) {
            goto LABEL_877;
          }
          if (!*(void *)(*(void *)&v127 + 8)) {
            goto LABEL_877;
          }
          double v320 = v355;
          uint64_t v321 = 1;
          do
          {
            uint64_t v322 = *v319++;
            v321 *= v322;
          }
          while (v319 != v318);
          if (!v321) {
            goto LABEL_877;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v127 + 8));
          unint64_t v323 = (uint64_t)(*(void *)(*(void *)&v127 + 32) - *(void *)(*(void *)&v127 + 24)) >> 3;
          uint64_t v350 = 0;
          std::vector<unsigned long>::vector(&v351, v323, &v350);
          uint64_t v269 = v351;
          uint64_t v324 = v352;
          break;
        default:
          goto LABEL_899;
      }
      while (2)
      {
        uint64_t v325 = 0;
        uint64_t v326 = (char *)v324 - (char *)v269;
        if (v326)
        {
          unint64_t v327 = v326 >> 3;
          uint64_t v328 = (uint64_t *)v171[6];
          if (v327 <= 1) {
            unint64_t v327 = 1;
          }
          do
          {
            uint64_t v330 = (uint64_t)*v269++;
            uint64_t v329 = v330;
            uint64_t v331 = *v328++;
            v325 += v331 * v329;
            --v327;
          }
          while (v327);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v171 + 1);
        *(double *)(*(void *)v171[1] + 8 * (v171[9] + v325)) = *(double *)(*(void *)v171[1] + 8 * (v171[9] + v325))
                                                               / v320;
        uint64_t v269 = v351;
        uint64_t v324 = v352;
        uint64_t v332 = v352 - v351;
        uint64_t v333 = v332 - 1;
        if ((char *)v352 - (char *)v351 < 1) {
          goto LABEL_842;
        }
        uint64_t v334 = v171[3];
        uint64_t v335 = (char *)v351[v333] + 1;
        v351[v333] = v335;
        if ((unint64_t)v335 < *(void *)(v334 + 8 * v333))
        {
LABEL_841:
          uint64_t v332 = 1;
LABEL_842:
          if (v333 < 0 || !v332) {
            goto LABEL_844;
          }
          continue;
        }
        break;
      }
      atomic_ullong v336 = (unint64_t *)&v269[v332 - 2];
      uint64_t v337 = v334 - 16;
      while (1)
      {
        uint64_t v338 = v332 - 1;
        v336[1] = 0;
        if (v332 - 1 <= 0) {
          goto LABEL_844;
        }
        unint64_t v339 = *v336 + 1;
        *v336-- = v339;
        unint64_t v340 = *(void *)(v337 + 8 * v332--);
        if (v339 < v340)
        {
          uint64_t v333 = v338 - 1;
          goto LABEL_841;
        }
      }
    case 2:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 3:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          double v170 = v355;
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          turi::flexible_type_fail(v171[2] - v171[1] == *(void *)(*(void *)&v355 + 16)
                                                      - *(void *)(*(void *)&v355 + 8));
          uint64_t v259 = *(double **)(*(void *)&v127 + 8);
          uint64_t v260 = *(void *)(*(void *)&v127 + 16) - (void)v259;
          if (v260)
          {
            unint64_t v261 = v260 >> 3;
            v262 = *(double **)(*(void *)&v170 + 8);
            if (v261 <= 1) {
              unint64_t v261 = 1;
            }
            do
            {
              double v263 = *v262++;
              *uint64_t v259 = *v259 / v263;
              ++v259;
              --v261;
            }
            while (v261);
          }
          goto LABEL_877;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 4:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 5:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 6:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 7:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 8:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 9:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        default:
          goto LABEL_899;
      }
    case 9:
      switch(v128)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_312;
        case 2:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 3:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 4:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 5:
          if (**(void **)&v127 != 1) {
            operator new();
          }
          goto LABEL_312;
        case 8:
          if (**(void **)&v127 != 1) {
            operator new();
          }
LABEL_312:
          turi::flexible_type_fail(0);
          goto LABEL_313;
        case 9:
          double v172 = v355;
          if (**(void **)&v127 != 1) {
            operator new();
          }
          *(double *)&v171 = v127;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v127 + 8, *(void *)&v355 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          unint64_t v265 = *(uint64_t **)(*(void *)&v127 + 24);
          uint64_t v264 = *(uint64_t **)(*(void *)&v127 + 32);
          if (v264 == v265) {
            goto LABEL_877;
          }
          if (!*(void *)(*(void *)&v127 + 8)) {
            goto LABEL_877;
          }
          uint64_t v266 = 1;
          do
          {
            uint64_t v267 = *v265++;
            v266 *= v267;
          }
          while (v265 != v264);
          if (!v266) {
            goto LABEL_877;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v127 + 8));
          unint64_t v268 = (uint64_t)(*(void *)(*(void *)&v127 + 32) - *(void *)(*(void *)&v127 + 24)) >> 3;
          uint64_t v350 = 0;
          std::vector<unsigned long>::vector(&v351, v268, &v350);
          uint64_t v269 = v351;
          uint64_t v270 = v352;
          break;
        default:
          goto LABEL_899;
      }
      break;
    default:
LABEL_899:
      turi::flexible_type_fail(0);
      goto LABEL_902;
  }
  while (2)
  {
    uint64_t v271 = (char *)v270 - (char *)v269;
    if (v271)
    {
      uint64_t v272 = 0;
      unint64_t v273 = v271 >> 3;
      v274 = *(uint64_t **)(*(void *)&v172 + 48);
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      uint64_t v275 = v269;
      unint64_t v276 = v273;
      do
      {
        uint64_t v278 = (uint64_t)*v275++;
        uint64_t v277 = v278;
        uint64_t v279 = *v274++;
        v272 += v279 * v277;
        --v276;
      }
      while (v276);
      uint64_t v280 = 0;
      double v281 = *(double *)(**(void **)(*(void *)&v172 + 8) + 8 * (*(void *)(*(void *)&v172 + 72) + v272));
      v282 = (uint64_t *)v171[6];
      do
      {
        uint64_t v284 = (uint64_t)*v269++;
        uint64_t v283 = v284;
        uint64_t v285 = *v282++;
        v280 += v285 * v283;
        --v273;
      }
      while (v273);
    }
    else
    {
      uint64_t v280 = 0;
      double v281 = *(double *)(**(void **)(*(void *)&v172 + 8) + 8 * *(void *)(*(void *)&v172 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v171 + 1);
    *(double *)(*(void *)v171[1] + 8 * (v171[9] + v280)) = *(double *)(*(void *)v171[1] + 8 * (v171[9] + v280))
                                                           / v281;
    uint64_t v269 = v351;
    uint64_t v270 = v352;
    uint64_t v286 = v352 - v351;
    uint64_t v287 = v286 - 1;
    if ((char *)v352 - (char *)v351 < 1)
    {
LABEL_787:
      if (v287 < 0 || !v286) {
        goto LABEL_844;
      }
      continue;
    }
    break;
  }
  uint64_t v288 = v171[3];
  unint64_t v289 = (char *)v351[v287] + 1;
  v351[v287] = v289;
  if ((unint64_t)v289 < *(void *)(v288 + 8 * v287))
  {
LABEL_786:
    uint64_t v286 = 1;
    goto LABEL_787;
  }
  double v290 = (unint64_t *)&v269[v286 - 2];
  uint64_t v291 = v288 - 16;
  while (1)
  {
    uint64_t v292 = v286 - 1;
    v290[1] = 0;
    if (v286 - 1 <= 0) {
      break;
    }
    unint64_t v293 = *v290 + 1;
    *v290-- = v293;
    unint64_t v294 = *(void *)(v291 + 8 * v286--);
    if (v293 < v294)
    {
      uint64_t v287 = v292 - 1;
      goto LABEL_786;
    }
  }
LABEL_844:
  if (v269)
  {
LABEL_845:
    unsigned int v352 = v269;
    operator delete(v269);
  }
LABEL_877:
  double v127 = *(double *)&v171;
LABEL_313:
  switch(v357)
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v130 = v355;
        if (v355 != 0.0)
        {
          if (*(char *)(*(void *)&v355 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v355 + 8));
          }
          double v131 = v130;
          uint64_t v132 = 0x1012C404EF22A49;
          goto LABEL_338;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v135 = v355;
        if (v355 != 0.0)
        {
          double v136 = *(void **)(*(void *)&v355 + 8);
          if (v136)
          {
            *(void *)(*(void *)&v355 + 16) = v136;
            operator delete(v136);
          }
          double v131 = v135;
          uint64_t v132 = 0x1080C409938AC02;
          goto LABEL_338;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v133 = v355;
        if (v355 != 0.0)
        {
          v351 = (void **)(*(void *)&v355 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v351);
          goto LABEL_333;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v133 = v355;
        if (v355 != 0.0)
        {
          v351 = (void **)(*(void *)&v355 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v351);
LABEL_333:
          double v131 = v133;
          uint64_t v132 = 0x1020C405E66F15BLL;
          goto LABEL_338;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v137 = v355;
        if (v355 != 0.0)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v355 + 16));
          double v131 = v137;
          unsigned int v134 = -235920773;
          goto LABEL_337;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v355, 0xFFFFFFFFFFFFFFFFLL) == 1 && v355 != 0.0)
      {
        double v131 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v355));
        unsigned int v134 = 2071181815;
LABEL_337:
        uint64_t v132 = v134 | 0x1030C4000000000;
LABEL_338:
        MEMORY[0x22A614FA0](*(void *)&v131, v132);
      }
      break;
    default:
      break;
  }
  switch(v128)
  {
    case 0:
      goto LABEL_340;
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          unint64_t v138 = (uint64_t)(v127 + (double)(uint64_t)*a2);
LABEL_407:
          *a2 = v138;
          goto LABEL_725;
        case 1:
          double v169 = v127;
LABEL_656:
          *(double *)a2 = *(double *)a2 + v169;
          goto LABEL_725;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          uint64_t v212 = *(double **)(*a2 + 8);
          uint64_t v213 = *(void *)(*a2 + 16) - (void)v212;
          if (!v213) {
            goto LABEL_725;
          }
          unint64_t v214 = v213 >> 3;
          if (v214 <= 1) {
            unint64_t v214 = 1;
          }
          do
          {
            *uint64_t v212 = *v212 + v127;
            ++v212;
            --v214;
          }
          while (v214);
          goto LABEL_616;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 6:
          unint64_t v239 = *a2;
          unint64_t v240 = *a2 + vcvtmd_s64_f64(v127);
          *a2 = *a2 & 0xFF00000000000000 | v240 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v241 = (uint64_t)((v127 - (double)(uint64_t)floor(v127)) * 1000000.0) + *((int *)a2 + 2);
          if (v241 > 999999)
          {
            *a2 = (v240 + 1) & 0xFFFFFFFFFFFFFFLL | v239 & 0xFF00000000000000;
            LODWORD(v241) = v241 - 1000000;
          }
          if (v241 > 0xF423F) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *((_DWORD *)a2 + 2) = v241;
          goto LABEL_725;
        case 7:
          goto LABEL_415;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          atomic_ullong *volatile v215 = (atomic_ullong *volatile)*a2;
          atomic_ullong v217 = *(uint64_t **)(*a2 + 24);
          uint64_t v216 = *(uint64_t **)(*a2 + 32);
          if (v216 == v217 || !v215[1]) {
            goto LABEL_725;
          }
          uint64_t v218 = 1;
          do
          {
            uint64_t v219 = *v217++;
            v218 *= v219;
          }
          while (v217 != v216);
          if (!v218) {
            goto LABEL_616;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v215 + 1);
          unint64_t v220 = (v215[4] - v215[3]) >> 3;
          uint64_t v350 = 0;
          std::vector<unsigned long>::vector(&v351, v220, &v350);
          v151 = v351;
          uint64_t v221 = v352;
          break;
        default:
          goto LABEL_899;
      }
      break;
    case 2:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_661;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          int v139 = *(char *)(*(void *)&v127 + 31);
          if (v139 >= 0) {
            uint64_t v140 = (const std::string::value_type *)(*(void *)&v127 + 8);
          }
          else {
            uint64_t v140 = *(const std::string::value_type **)(*(void *)&v127 + 8);
          }
          if (v139 >= 0) {
            std::string::size_type v141 = *(unsigned __int8 *)(*(void *)&v127 + 31);
          }
          else {
            std::string::size_type v141 = *(void *)(*(void *)&v127 + 16);
          }
          std::string::append((std::string *)(*a2 + 8), v140, v141);
          goto LABEL_662;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_661;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_661;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_661;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_661;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
LABEL_661:
          turi::flexible_type_fail(0);
LABEL_662:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v127 == 0) {
            goto LABEL_725;
          }
          if (*(char *)(*(void *)&v127 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v127 + 8));
          }
          double v243 = v127;
          uint64_t v246 = 0x1012C404EF22A49;
          break;
        default:
          goto LABEL_899;
      }
      goto LABEL_724;
    case 3:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_681;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_681;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          atomic_ullong *volatile v174 = (atomic_ullong *volatile)*a2;
          turi::flexible_type_fail(v174[2] - v174[1] == *(void *)(*(void *)&v127 + 16)
                                                      - *(void *)(*(void *)&v127 + 8));
          unint64_t v175 = (double *)v174[1];
          uint64_t v176 = v174[2] - (void)v175;
          if (!v176) {
            goto LABEL_682;
          }
          unint64_t v177 = v176 >> 3;
          v178 = *(double **)(*(void *)&v127 + 8);
          if (v177 <= 1) {
            unint64_t v177 = 1;
          }
          do
          {
            double v179 = *v178++;
            *unint64_t v175 = v179 + *v175;
            ++v175;
            --v177;
          }
          while (v177);
          goto LABEL_616;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_681;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_681;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_681;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
LABEL_681:
          turi::flexible_type_fail(0);
LABEL_682:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v127 == 0) {
            goto LABEL_725;
          }
          v248 = *(void **)(*(void *)&v127 + 8);
          if (v248)
          {
            *(void *)(*(void *)&v127 + 16) = v248;
            operator delete(v248);
          }
          double v243 = v127;
          uint64_t v246 = 0x1080C409938AC02;
          break;
        default:
          goto LABEL_899;
      }
      goto LABEL_724;
    case 4:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        default:
          goto LABEL_899;
      }
      turi::flexible_type_fail(0);
LABEL_624:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v127 == 0) {
        goto LABEL_725;
      }
      v351 = (void **)(*(void *)&v127 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v351);
      goto LABEL_707;
    case 5:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        default:
          goto LABEL_899;
      }
      turi::flexible_type_fail(0);
LABEL_702:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v127 == 0) {
        goto LABEL_725;
      }
      v351 = (void **)(*(void *)&v127 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v351);
LABEL_707:
      double v243 = v127;
      uint64_t v246 = 0x1020C405E66F15BLL;
      goto LABEL_724;
    case 6:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_415;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_415;
        default:
          goto LABEL_899;
      }
    case 7:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        default:
          goto LABEL_899;
      }
LABEL_415:
      turi::flexible_type_fail(0);
      goto LABEL_725;
    case 8:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          return;
        default:
          goto LABEL_899;
      }
      turi::flexible_type_fail(0);
LABEL_718:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v127 == 0) {
        goto LABEL_725;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v127 + 16));
      double v243 = v127;
      unsigned int v244 = -235920773;
LABEL_723:
      uint64_t v246 = v244 | 0x1030C4000000000;
LABEL_724:
      MEMORY[0x22A614FA0](*(void *)&v243, v246);
      goto LABEL_725;
    case 9:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_647;
        case 2:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_647;
        case 3:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_647;
        case 4:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_647;
        case 5:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          goto LABEL_647;
        case 8:
          if (*(void *)*a2 != 1) {
            operator new();
          }
LABEL_647:
          turi::flexible_type_fail(0);
          goto LABEL_648;
        case 9:
          if (*(void *)*a2 != 1) {
            operator new();
          }
          atomic_ullong *volatile v180 = (atomic_ullong *volatile)*a2;
          uint64_t v181 = (uint64_t *)(*a2 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v181, *(void *)&v127 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          v183 = (uint64_t *)v180[3];
          unint64_t v182 = (uint64_t *)v180[4];
          if (v182 == v183 || !*v181)
          {
LABEL_648:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v127, 0xFFFFFFFFFFFFFFFFLL) == 1
              && *(void *)&v127 != 0)
            {
              double v243 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v127));
              unsigned int v244 = 2071181815;
              goto LABEL_723;
            }
            goto LABEL_725;
          }
          uint64_t v184 = 1;
          do
          {
            uint64_t v185 = *v183++;
            v184 *= v185;
          }
          while (v183 != v182);
          if (!v184) {
            goto LABEL_616;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v181);
          unint64_t v186 = (v180[4] - v180[3]) >> 3;
          uint64_t v350 = 0;
          std::vector<unsigned long>::vector(&v351, v186, &v350);
          v151 = v351;
          v187 = v352;
          do
          {
            uint64_t v188 = (char *)v187 - (char *)v151;
            if (v188)
            {
              uint64_t v189 = 0;
              unint64_t v190 = v188 >> 3;
              uint64_t v191 = *(uint64_t **)(*(void *)&v127 + 48);
              if (v190 <= 1) {
                unint64_t v190 = 1;
              }
              uint64_t v192 = v151;
              unint64_t v193 = v190;
              do
              {
                uint64_t v195 = (uint64_t)*v192++;
                uint64_t v194 = v195;
                uint64_t v196 = *v191++;
                v189 += v196 * v194;
                --v193;
              }
              while (v193);
              uint64_t v197 = 0;
              double v198 = *(double *)(**(void **)(*(void *)&v127 + 8)
                               + 8 * (*(void *)(*(void *)&v127 + 72) + v189));
              unint64_t v199 = (uint64_t *)v180[6];
              do
              {
                uint64_t v201 = (uint64_t)*v151++;
                uint64_t v200 = v201;
                uint64_t v202 = *v199++;
                v197 += v202 * v200;
                --v190;
              }
              while (v190);
            }
            else
            {
              uint64_t v197 = 0;
              double v198 = *(double *)(**(void **)(*(void *)&v127 + 8) + 8 * *(void *)(*(void *)&v127 + 72));
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v181);
            *(double *)(*(void *)v180[1] + 8 * (v180[9] + v197)) = v198
                                                                   + *(double *)(*(void *)v180[1]
                                                                               + 8 * (v180[9] + v197));
            v151 = v351;
            v187 = v352;
            uint64_t v203 = v352 - v351;
            uint64_t v204 = v203 - 1;
            if ((char *)v352 - (char *)v351 >= 1)
            {
              atomic_ullong v205 = v180[3];
              unint64_t v206 = (char *)v351[v204] + 1;
              v351[v204] = v206;
              if ((unint64_t)v206 >= *(void *)(v205 + 8 * v204))
              {
                v207 = (unint64_t *)&v151[v203 - 2];
                atomic_ullong v208 = v205 - 16;
                do
                {
                  uint64_t v209 = v203 - 1;
                  v207[1] = 0;
                  if (v203 - 1 <= 0) {
                    goto LABEL_614;
                  }
                  unint64_t v210 = *v207 + 1;
                  *v207-- = v210;
                  unint64_t v211 = *(void *)(v208 + 8 * v203--);
                }
                while (v210 >= v211);
                uint64_t v204 = v209 - 1;
              }
              uint64_t v203 = 1;
            }
          }
          while ((v204 & 0x8000000000000000) == 0 && v203);
          break;
        default:
          goto LABEL_899;
      }
      goto LABEL_614;
    default:
      goto LABEL_899;
  }
  do
  {
    uint64_t v222 = 0;
    uint64_t v223 = (char *)v221 - (char *)v151;
    if (v223)
    {
      unint64_t v224 = v223 >> 3;
      v225 = (uint64_t *)v215[6];
      if (v224 <= 1) {
        unint64_t v224 = 1;
      }
      do
      {
        uint64_t v227 = (uint64_t)*v151++;
        uint64_t v226 = v227;
        uint64_t v228 = *v225++;
        v222 += v228 * v226;
        --v224;
      }
      while (v224);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v215 + 1);
    *(double *)(*(void *)v215[1] + 8 * (v215[9] + v222)) = *(double *)(*(void *)v215[1] + 8 * (v215[9] + v222))
                                                           + v127;
    v151 = v351;
    uint64_t v221 = v352;
    uint64_t v229 = v352 - v351;
    uint64_t v230 = v229 - 1;
    if ((char *)v352 - (char *)v351 >= 1)
    {
      atomic_ullong v231 = v215[3];
      unint64_t v232 = (char *)v351[v230] + 1;
      v351[v230] = v232;
      if ((unint64_t)v232 >= *(void *)(v231 + 8 * v230))
      {
        double v233 = (unint64_t *)&v151[v229 - 2];
        atomic_ullong v234 = v231 - 16;
        while (1)
        {
          uint64_t v235 = v229 - 1;
          v233[1] = 0;
          if (v229 - 1 <= 0) {
            goto LABEL_615;
          }
          unint64_t v236 = *v233 + 1;
          *v233-- = v236;
          unint64_t v237 = *(void *)(v234 + 8 * v229--);
          if (v236 < v237)
          {
            uint64_t v230 = v235 - 1;
            break;
          }
        }
      }
      uint64_t v229 = 1;
    }
  }
  while ((v230 & 0x8000000000000000) == 0 && v229);
LABEL_614:
  if (!v151) {
    goto LABEL_616;
  }
LABEL_615:
  unsigned int v352 = v151;
  operator delete(v151);
LABEL_616:
  switch(v128)
  {
    case 2:
      goto LABEL_662;
    case 3:
      goto LABEL_682;
    case 4:
      goto LABEL_624;
    case 5:
      goto LABEL_702;
    case 8:
      goto LABEL_718;
    case 9:
      goto LABEL_648;
    default:
      break;
  }
LABEL_725:
  switch(BYTE4(v354[1]))
  {
    case 2:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v251 = v354[0];
        if (v354[0])
        {
          if (*((char *)v354[0] + 31) < 0) {
            operator delete(*((void **)v354[0] + 1));
          }
          double v252 = v251;
          uint64_t v253 = 0x1012C404EF22A49;
          goto LABEL_750;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v256 = v354[0];
        if (v354[0])
        {
          v257 = (void *)v354[0][1];
          if (v257)
          {
            v354[0][2] = (atomic_ullong)v257;
            operator delete(v257);
          }
          double v252 = v256;
          uint64_t v253 = 0x1080C409938AC02;
          goto LABEL_750;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v254 = v354[0];
        if (v354[0])
        {
          v351 = (void **)(v354[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v351);
          goto LABEL_745;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v254 = v354[0];
        if (v354[0])
        {
          v351 = (void **)(v354[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v351);
LABEL_745:
          double v252 = v254;
          uint64_t v253 = 0x1020C405E66F15BLL;
          goto LABEL_750;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v258 = v354[0];
        if (v354[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v354[0] + 2);
          double v252 = v258;
          unsigned int v255 = -235920773;
          goto LABEL_749;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v354[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v354[0])
      {
        double v252 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v354[0]);
        unsigned int v255 = 2071181815;
LABEL_749:
        uint64_t v253 = v255 | 0x1030C4000000000;
LABEL_750:
        MEMORY[0x22A614FA0](v252, v253);
      }
      break;
    default:
      return;
  }
}

void sub_22416951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21)
{
  MEMORY[0x22A614FA0](v22, 0x1020C405E66F15BLL);
  if (atomic_fetch_add((atomic_ullong *volatile)v21, 0xFFFFFFFFFFFFFFFFLL) == 1 && v21 != 0)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
    MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
  }
  switch(a18)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v25 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      if (*(char *)(a16 + 31) < 0) {
        operator delete(*(void **)(a16 + 8));
      }
      uint64_t v26 = (void *)v25;
      uint64_t v27 = 0x1012C404EF22A49;
      goto LABEL_31;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v30 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      atomic_ullong *volatile v31 = *(void **)(a16 + 8);
      if (v31)
      {
        *(void *)(a16 + 16) = v31;
        operator delete(v31);
      }
      uint64_t v26 = (void *)v30;
      uint64_t v27 = 0x1080C409938AC02;
      goto LABEL_31;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v32 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      a15 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      goto LABEL_30;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v32 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      a15 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
LABEL_30:
      uint64_t v26 = (void *)v32;
      uint64_t v27 = 0x1020C405E66F15BLL;
      goto LABEL_31;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v28 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a16 + 16));
      uint64_t v26 = (void *)v28;
      unsigned int v29 = -235920773;
      goto LABEL_23;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a16) {
        goto LABEL_32;
      }
      uint64_t v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a16);
      unsigned int v29 = 2071181815;
LABEL_23:
      uint64_t v27 = v29 | 0x1030C4000000000;
LABEL_31:
      MEMORY[0x22A614FA0](v26, v27);
LABEL_32:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_32;
  }
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416A9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416ABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416ADB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416B1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::new_instance()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::add_element_simple(uint64_t a1, int *a2)
{
  if (*((unsigned char *)a2 + 12) != 7)
  {
    ++*(void *)(a1 + 40);
    double v4 = 0.0;
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        double v4 = (double)*(uint64_t *)a2;
        break;
      case 1:
        double v4 = *(double *)a2;
        break;
      case 2:
        uint64_t v6 = *(void *)a2;
        char v7 = (char **)(*(void *)a2 + 8);
        size_t __idx = 0;
        uint64_t v8 = (char *)v7;
        if (*(char *)(v6 + 31) < 0) {
          uint64_t v8 = *v7;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v8);
        double v9 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v40[0]) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v6 + 31) < 0) {
          uint64_t v10 = *(void *)(v6 + 16);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(v6 + 31);
        }
        if (__idx != v10)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v34 = std::string::append(&v43, " cannot be interpreted as a float");
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v17 = v9;
        double v4 = v17;
        break;
      case 3:
        uint64_t v5 = *(void *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        uint64_t v11 = *(void *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        break;
      case 5:
        uint64_t v12 = *(void *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        break;
      case 6:
        double v4 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(atomic_uint **)(*(void *)a2 + 16);
        __p[0] = *(void **)(*(void *)a2 + 8);
        __p[1] = v14;
        if (v14) {
          atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
        }
        long long v15 = *(_OWORD *)(v13 + 24);
        long long v16 = *(_OWORD *)(v13 + 56);
        long long v41 = *(_OWORD *)(v13 + 40);
        long long v42 = v16;
        *(_OWORD *)uint64_t v40 = v15;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v41 + 1))
        {
          *(void *)&long long v42 = *((void *)&v41 + 1);
          operator delete(*((void **)&v41 + 1));
        }
        if (v40[0])
        {
          v40[1] = v40[0];
          operator delete(v40[0]);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        break;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    double v18 = *(double *)(a1 + 48);
    double v19 = v4 - v18;
    *(double *)(a1 + 48) = v18 + (v4 - v18) / (double)*(unint64_t *)(a1 + 40);
    double v20 = 0.0;
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        double v20 = (double)*(uint64_t *)a2;
        break;
      case 1:
        double v20 = *(double *)a2;
        break;
      case 2:
        double v22 = *(double *)a2;
        size_t __idx = 0;
        long long v23 = (char *)(*(void *)&v22 + 8);
        if (*(char *)(*(void *)&v22 + 31) < 0) {
          long long v23 = *(char **)(*(void *)&v22 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v23);
        double v24 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v40[0]) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(*(void *)&v22 + 31) < 0) {
          uint64_t v25 = *(void *)(*(void *)&v22 + 16);
        }
        else {
          uint64_t v25 = *(unsigned __int8 *)(*(void *)&v22 + 31);
        }
        if (__idx != v25)
        {
          uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v37 = std::string::append(&v43, " cannot be interpreted as a float");
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v36, (const std::string *)__p);
          __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v32 = v24;
        double v20 = v32;
        break;
      case 3:
        double v21 = *(double *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v21 + 8), *(void *)(*(void *)&v21 + 16), (uint64_t)(*(void *)(*(void *)&v21 + 16) - *(void *)(*(void *)&v21 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        double v26 = *(double *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v26 + 8), *(uint64_t **)(*(void *)&v26 + 16), (uint64_t)(*(void *)(*(void *)&v26 + 16) - *(void *)(*(void *)&v26 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        break;
      case 5:
        double v27 = *(double *)a2;
        __p[1] = 0;
        v40[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v27 + 8), *(uint64_t **)(*(void *)&v27 + 16), (uint64_t)(*(void *)(*(void *)&v27 + 16) - *(void *)(*(void *)&v27 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        break;
      case 6:
        double v20 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        double v28 = *(double *)a2;
        unsigned int v29 = *(atomic_uint **)(*(void *)a2 + 16);
        __p[0] = *(void **)(*(void *)a2 + 8);
        __p[1] = v29;
        if (v29) {
          atomic_fetch_add_explicit(v29 + 2, 1u, memory_order_relaxed);
        }
        long long v30 = *(_OWORD *)(*(void *)&v28 + 24);
        long long v31 = *(_OWORD *)(*(void *)&v28 + 56);
        long long v41 = *(_OWORD *)(*(void *)&v28 + 40);
        long long v42 = v31;
        *(_OWORD *)uint64_t v40 = v30;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v41 + 1))
        {
          *(void *)&long long v42 = *((void *)&v41 + 1);
          operator delete(*((void **)&v41 + 1));
        }
        if (v40[0])
        {
          v40[1] = v40[0];
          operator delete(v40[0]);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        break;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    *(double *)(a1 + 56) = *(double *)(a1 + 56) + v19 * (v20 - *(double *)(a1 + 48));
  }
}

void sub_22416B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::emit(uint64_t a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v2);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1);
}

void sub_22416BC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416BD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416BF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416C390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22416C590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<std::istringstream>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22416C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::shared_ptr<std::istringstream>::shared_ptr[abi:ne180100]<std::istringstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22416C77C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::istream>::shared_ptr[abi:ne180100]<std::ifstream,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::istringstream *,std::shared_ptr<std::istringstream>::__shared_ptr_default_delete<std::istringstream,std::istringstream>,std::allocator<std::istringstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::istringstream *,std::shared_ptr<std::istringstream>::__shared_ptr_default_delete<std::istringstream,std::istringstream>,std::allocator<std::istringstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::vector<std::shared_ptr<std::istringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::istringstream>>,std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22416C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::istringstream>>,std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  double v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *double v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::istringstream>>,std::shared_ptr<std::istringstream>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::istringstream>>,std::shared_ptr<std::istringstream>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D5C0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D76D5C0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0x10B3C40FAD5EF0DLL);
}

char *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D76D5C0;
  std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_22416CA90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76D5C0;
  return std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(turi::thread *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)turi::thread::get_tls_data(a1);
  uint64_t v7 = *((void *)a1 + 1);
  if (*(char *)(*(void *)a2 + 31) < 0)
  {
    if (*(void *)(*(void *)a2 + 16)) {
      goto LABEL_3;
    }
LABEL_15:
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 7;
    return;
  }
  if (!*(unsigned char *)(*(void *)a2 + 31)) {
    goto LABEL_15;
  }
LABEL_3:
  v21[1] = 0;
  double v22 = 0;
  char v8 = (uint64_t **)(v7 + 16 * v6);
  uint64_t time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  boost::detail::shared_count::~shared_count(&v22);
  uint64_t v9 = *v8;
  std::string::operator=((std::string *)(*v8 + 10), (const std::string *)(*(void *)a2 + 8));
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v9 + 2));
  boost::local_time::operator>><char,std::char_traits<char>>(*v8, (uint64_t)&time_rep);
  v21[0] = time_rep;
  uint64_t v10 = turi::flexible_type_impl::ptime_to_time_t(v21);
  unsigned int v11 = turi::flexible_type_impl::ptime_to_fractional_microseconds(v21);
  uint64_t v12 = v24;
  uint64_t v19 = v24;
  double v20 = v25;
  if (v25) {
    atomic_fetch_add_explicit(v25 + 2, 1u, memory_order_relaxed);
  }
  boost::detail::shared_count::~shared_count(&v20);
  if (v12)
  {
    uint64_t v13 = v24;
    uint64_t v19 = v24;
    double v20 = v25;
    if (v25) {
      atomic_fetch_add_explicit(v25 + 2, 1u, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 72))(&v18);
    uint64_t v14 = v18 / 1000000;
    int v15 = (int)(v18 / 1000000) / 900;
    boost::detail::shared_count::~shared_count(&v20);
    if ((v14 - 58500) <= 0xFFFFFC7B && (v15 - 49) <= 0xFFFFFF9E) {
      turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
    }
    if ((int)v14 >= -899) {
      int v16 = 25;
    }
    else {
      int v16 = 231;
    }
    unint64_t v17 = (unint64_t)(v16 + v15) << 56;
  }
  else
  {
    unint64_t v17 = 0x5900000000000000;
  }
  if (v11 >= 0xF4240) {
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  }
  *(unsigned char *)(a3 + 12) = 6;
  *(void *)a3 = v17 | v10 & 0xFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 8) = v11;
  boost::detail::shared_count::~shared_count(&v25);
}

void sub_22416CD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  boost::detail::shared_count::~shared_count(v18);
  boost::detail::shared_count::~shared_count(v17);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    turi::unity_sarray::str_to_datetime(std::string)::$_1::operator() const(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  }
  _Unwind_Resume(a1);
}

void sub_22416CDC4()
{
}

uint64_t std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<std::istringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>(a1, *(void **)a2, *(void **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  double v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_22416CE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = (void **)a1;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::vector<std::shared_ptr<std::ostringstream>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22416CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::shared_ptr<std::ostringstream>::shared_ptr[abi:ne180100]<std::ostringstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22416CFE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::ostringstream *,std::shared_ptr<std::ostringstream>::__shared_ptr_default_delete<std::ostringstream,std::ostringstream>,std::allocator<std::ostringstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::ostringstream *,std::shared_ptr<std::ostringstream>::__shared_ptr_default_delete<std::ostringstream,std::ostringstream>,std::allocator<std::ostringstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, char *a2, uint64_t a3, long long **a4, long long **a5, uint64_t a6)
{
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v17, a3);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, a2, (uint64_t)v17, (long long **)&v16, (long long **)&v15, a6);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  *(void *)a1 = &unk_26D76D6B8;
  std::string::basic_string[abi:ne180100]<0>(&v14, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  unsigned int v11 = std::string::append(&v14, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a1 + 352) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_22416D1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::~time_facet(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D6B8;
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26D76D6B8;
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
}

void boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(uint64_t a1)
{
  boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(a1);
  JUMPOUT(0x22A614FA0);
}

BOOL boost::local_time::custom_time_zone_base<char>::has_dst(uint64_t a1)
{
  return *(void *)(a1 + 136) != 0;
}

uint64_t boost::local_time::custom_time_zone_base<char>::dst_local_start_time(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3) {
    unsigned int v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 16))(v3, a2);
  }
  else {
    unsigned int v4 = -2;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  unsigned int v7 = v4;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v8, &v7, &v6);
  return v8;
}

uint64_t boost::local_time::custom_time_zone_base<char>::dst_local_end_time(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3) {
    unsigned int v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 32))(v3, a2);
  }
  else {
    unsigned int v4 = -2;
  }
  uint64_t v6 = *(void *)(a1 + 128);
  unsigned int v7 = v4;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v8, &v7, &v6);
  return v8;
}

uint64_t boost::local_time::custom_time_zone_base<char>::base_utc_offset@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 104);
  return result;
}

uint64_t boost::local_time::custom_time_zone_base<char>::to_posix_string(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  uint64_t v2 = (const std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24));
  if (v2[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v2);
    uint64_t v3 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale((std::locale *)&v40);
  }
  v2[1].__fmtflags_ = 48;
  uint64_t v41 = 0;
  long long v42 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v40, a1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v4 = &v40;
  }
  else {
    unsigned int v4 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v4, size);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1);
  v40.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
  {
    v40.__r_.__value_.__s.__data_[0] = 45;
    unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    LODWORD(__p) = -1;
    if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2) {
      boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
    }
    std::ostream::operator<<();
  }
  else
  {
    v40.__r_.__value_.__s.__data_[0] = 43;
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
  {
    v40.__r_.__value_.__s.__data_[0] = 58;
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
      std::ostream::operator<<();
    }
  }
  if (*(void *)(a1 + 136) != v41)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v40, a1);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v40;
    }
    else {
      uint64_t v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v40.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v10, v11);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 80))(&__p, a1);
    v40.__r_.__value_.__r.__words[0] = 0;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
    {
      v40.__r_.__value_.__s.__data_[0] = 45;
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      LODWORD(__p) = -1;
      if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2) {
        boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
      }
      std::ostream::operator<<();
    }
    else
    {
      v40.__r_.__value_.__s.__data_[0] = 43;
      long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 80))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      std::string v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v14 + *(void *)(*v14 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
      {
        v40.__r_.__value_.__s.__data_[0] = 58;
        std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
        *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
        std::ostream::operator<<();
      }
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    std::string v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 136) + 24))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0) {
      p_p = (std::string::value_type *)&__p;
    }
    else {
      p_p = (std::string::value_type *)__p;
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v18 = v39;
    }
    else {
      std::string::size_type v18 = v38;
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, p_p, &p_p[v18], v18);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v19 = &v40;
    }
    else {
      char v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
    char v46 = 47;
    double v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v46, 1);
    *(void *)((char *)v22 + *(void *)(*v22 - 24) + 24) = 2;
    char v23 = (void *)std::ostream::operator<<();
    char v46 = 58;
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v46, 1);
    *(void *)((char *)v24 + *(void *)(*v24 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(__p);
    }
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(void *)(a1 + 120) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    double v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 136) + 40))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0) {
      double v27 = (std::string::value_type *)&__p;
    }
    else {
      double v27 = (std::string::value_type *)__p;
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v28 = v39;
    }
    else {
      std::string::size_type v28 = v38;
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, v27, &v27[v28], v28);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v29 = &v40;
    }
    else {
      unsigned int v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v40.__r_.__value_.__l.__size_;
    }
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v29, v30);
    char v46 = 47;
    float v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v46, 1);
    *(void *)((char *)v32 + *(void *)(*v32 - 24) + 24) = 2;
    double v33 = (void *)std::ostream::operator<<();
    char v46 = 58;
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v46, 1);
    *(void *)((char *)v34 + *(void *)(*v34 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(__p);
    }
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(void *)(a1 + 128) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v35 + *(void *)(*v35 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
  }
  std::stringbuf::str();
  boost::detail::shared_count::~shared_count(&v42);
  v43[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v43[1] = MEMORY[0x263F8C318] + 16;
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v45);
}

void sub_22416E2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
}

std::string *boost::date_time::time_zone_names_base<char>::time_zone_names_base(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  unsigned int v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_22416E4A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D718;
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 144));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::custom_time_zone_base<char>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::local_time::custom_time_zone_base<char>>(&v2);
}

void sub_22416E5C8(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::local_time::custom_time_zone_base<char>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_22416E64C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(v1);
  }
  __cxa_rethrow();
}

void sub_22416E664(_Unwind_Exception *a1)
{
}

void *std::vector<std::shared_ptr<std::ostringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::ostringstream>>,std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22416E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::ostringstream>>,std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *long long v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::ostringstream>>,std::shared_ptr<std::ostringstream>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::ostringstream>>,std::shared_ptr<std::ostringstream>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76D800;
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 64));
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D76D800;
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 64));
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return MEMORY[0x22A614FA0](a1, 0x10B3C40962E4BC9);
}

char *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26D76D800;
  std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_22416E908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76D800;
  return std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(turi::thread *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = (void **)(*((void *)a1 + 4) + 16 * *(void *)turi::thread::get_tls_data(a1));
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  uint64_t v7 = *(uint64_t *)a2 >> 56;
  if ((int)v7 < 0) {
    int v8 = 25;
  }
  else {
    int v8 = -25;
  }
  if (v8 + v7 == 64)
  {
    uint64_t v9 = turi::flexible_type_impl::ptime_from_time_t((uint64_t)(*(void *)a2 << 8) >> 8, *(_DWORD *)(a2 + 8));
    std::string::size_type v10 = *((void *)a1 + 7);
    std::string::size_type v11 = (atomic_uint *)*((void *)a1 + 8);
    __p[1] = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(v11 + 2, 1u, memory_order_relaxed);
      __str.__r_.__value_.__r.__words[0] = v9;
      __str.__r_.__value_.__l.__size_ = v10;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__p[1];
      atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 1u, memory_order_relaxed);
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = v9;
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v10;
    }
    boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
    boost::local_time::operator<<<char,std::char_traits<char>>(*v6, (uint64_t *)&__str);
    boost::detail::shared_count::~shared_count((atomic_uint **)&__str.__r_.__value_.__r.__words[2]);
    std::stringbuf::str();
    turi::flexible_type::operator=<std::string>(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "0.");
  int v12 = *(char *)(a2 + 7);
  if (v12 < 0) {
    int v13 = 25;
  }
  else {
    int v13 = -25;
  }
  if (v13 + v12 < 0) {
    MEMORY[0x22A614700](&__str, "-0.");
  }
  operator new();
}

void sub_22416ECB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::operator() const(turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_22416EDB8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(v2, (atomic_ullong **)v1);
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<std::ostringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::ostringstream>*,std::shared_ptr<std::ostringstream>*>(this[1].__r_.__value_.__r.__words, *((void **)a2 + 3), *((void **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  std::string::size_type v5 = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  return this;
}

void sub_22416EEB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](uint64_t a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 56));
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *boost::local_time::operator<<<char,std::char_traits<char>>(void *a1, uint64_t *a2)
{
  long long v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v4->__fmtflags_;
  uint64_t rdbuf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  BOOL has_facet = std::locale::has_facet(&v14, &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v14);
  if (!has_facet) {
    operator new();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v8 = std::locale::use_facet(&v13, &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
  uint64_t v9 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags v10 = v9[1].__fmtflags_;
  if (v10 == -1)
  {
    std::ios_base::getloc(v9);
    std::string::size_type v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v14);
    v9[1].__fmtflags_ = v10;
  }
  boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, v9, (char)v10, a2);
  std::locale::~locale(&v13);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_22416F224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, uint64_t a2, const std::ios_base *a3, uint64_t a4, uint64_t *a5)
{
  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) <= 2)
  {
    int v10 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a5);
    if (v10 == -1) {
      int v11 = 2;
    }
    else {
      int v11 = 5;
    }
    if (v10) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v10 == -2) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12;
    }
    std::locale v14 = *(uint64_t (**)(uint64_t, uint64_t, const std::ios_base *, uint64_t, uint64_t))(*(void *)a1 + 40);
    return v14(a1, a2, a3, a4, v13);
  }
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string v344 = *(std::string *)(a1 + 16);
  }
  unsigned __int8 v16 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v344.__r_.__value_.__l.__size_;
  std::string::size_type v18 = (std::string *)v344.__r_.__value_.__r.__words[0];
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v19 = &v344;
  }
  else {
    char v19 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v20 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v344.__r_.__value_.__l.__size_;
  }
  if (v21)
  {
    double v22 = (std::string *)((char *)v19 + v21);
    std::string::size_type v23 = v21 - 1;
    while (1)
    {
      uint64_t v24 = 0;
      while (v19->__r_.__value_.__s.__data_[v24] == boost::date_time::time_formats<char>::full_24_hour_time_format[v24])
      {
        uint64_t v25 = v24 + 1;
        if (v23 != v24)
        {
          BOOL v26 = v24++ == 1;
          if (!v26) {
            continue;
          }
        }
        double v27 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v25];
        std::string::size_type v28 = (std::string *)((char *)v19 + v25);
        goto LABEL_32;
      }
      double v27 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v24];
      std::string::size_type v28 = (std::string *)((char *)v19 + v24);
LABEL_32:
      if (v27 == (char *)&unk_2246C0FF8) {
        break;
      }
      char v19 = (std::string *)((char *)v19 + 1);
      --v23;
      if (v19 == v22) {
        goto LABEL_37;
      }
    }
    if (v19 != v28)
    {
      v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::full_24_hour_time_format;
      v335[1].__locale_ = (std::locale::__imp *)&unk_2246C0FF8;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v344, (uint64_t *)v335, "%H:%M:%S", "", v19, v28, "%H:%M:%S", "");
      std::string::size_type v20 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v344.__r_.__value_.__l.__size_;
      std::string::size_type v18 = (std::string *)v344.__r_.__value_.__r.__words[0];
      unsigned __int8 v16 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_37:
  if ((v16 & 0x80u) == 0) {
    unsigned int v29 = &v344;
  }
  else {
    unsigned int v29 = v18;
  }
  if ((v16 & 0x80u) != 0) {
    std::string::size_type v20 = size;
  }
  if (v20)
  {
    std::string::size_type v30 = (std::string *)((char *)v29 + v20);
    std::string::size_type v31 = v20 - 1;
    while (1)
    {
      uint64_t v32 = 0;
      while (v29->__r_.__value_.__s.__data_[v32] == boost::date_time::time_formats<char>::short_24_hour_time_format[v32])
      {
        uint64_t v33 = v32 + 1;
        if (v31 != v32)
        {
          BOOL v26 = v32++ == 1;
          if (!v26) {
            continue;
          }
        }
        uint64_t v34 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v33];
        long long v35 = (std::string *)((char *)v29 + v33);
        goto LABEL_51;
      }
      uint64_t v34 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v32];
      long long v35 = (std::string *)((char *)v29 + v32);
LABEL_51:
      if (v34 == (char *)&unk_2246C0FFC) {
        break;
      }
      unsigned int v29 = (std::string *)((char *)v29 + 1);
      --v31;
      if (v29 == v30) {
        goto LABEL_56;
      }
    }
    if (v29 != v35)
    {
      v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::short_24_hour_time_format;
      v335[1].__locale_ = (std::locale::__imp *)&unk_2246C0FFC;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v344, (uint64_t *)v335, "%H:%M", "", v29, v35, "%H:%M", "");
      unsigned __int8 v16 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
  }
LABEL_56:
  uint64_t v328 = a1;
  uint64_t v330 = (std::ios_base *)a3;
  unsigned int v329 = a4;
  long long v342 = 0uLL;
  uint64_t v343 = 0;
  uint64_t v36 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
  if ((v16 & 0x80u) == 0) {
    uint64_t v37 = &v344;
  }
  else {
    uint64_t v37 = v18;
  }
  int64_t v38 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
  if (v38)
  {
    int64_t v39 = v38;
    int64_t v40 = v344.__r_.__value_.__l.__size_;
    if ((v16 & 0x80u) == 0) {
      int64_t v40 = v16;
    }
    if (v40 >= v38)
    {
      uint64_t v41 = (char *)v37 + v40;
      int v42 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
      std::string v43 = v37;
      do
      {
        int64_t v44 = v40 - v39;
        if (v44 == -1) {
          break;
        }
        uint64_t v45 = (char *)memchr(v43, v42, v44 + 1);
        if (!v45) {
          break;
        }
        char v46 = v45;
        if (!memcmp(v45, v36, v39))
        {
          if (v46 == v41 || v46 - (char *)v37 == -1) {
            break;
          }
          goto LABEL_71;
        }
        std::string v43 = (std::string *)(v46 + 1);
        int64_t v40 = v41 - (v46 + 1);
      }
      while (v40 >= v39);
    }
  }
  else
  {
LABEL_71:
    uint64_t v47 = *a5;
    unint64_t v48 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000) {
      unint64_t v48 = 0x8000000000000000;
    }
    if (v47 != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v47 = v48;
    }
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
      uint64_t v47 = *a5 % 86400000000;
    }
    uint64_t v49 = v47 % 1000000;
    if (v49 >= 0) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = -v49;
    }
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v50, 6);
    if (SHIBYTE(v343) < 0) {
      operator delete((void *)v342);
    }
    long long v342 = *(_OWORD *)&v335[0].__locale_;
    uint64_t v343 = v336;
    std::ios_base::getloc(a3);
    double v51 = std::locale::use_facet(v335, MEMORY[0x263F8C150]);
    std::string::value_type v52 = ((uint64_t (*)(const std::locale::facet *))v51->__vftable[1].~facet)(v51);
    std::locale::~locale(v335);
    uint64_t v53 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v345, (char *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_format);
    std::string::push_back(v53, v52);
    if (v343 >= 0) {
      uint64_t v54 = (const std::string::value_type *)&v342;
    }
    else {
      uint64_t v54 = (const std::string::value_type *)v342;
    }
    if (v343 >= 0) {
      std::string::size_type v55 = HIBYTE(v343);
    }
    else {
      std::string::size_type v55 = *((void *)&v342 + 1);
    }
    std::string::append(&v345, v54, v55);
    size_t v56 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
    char v57 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
    std::string::size_type v58 = v345.__r_.__value_.__l.__size_;
    if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v59 = &v345;
    }
    else {
      uint64_t v59 = (std::string *)v345.__r_.__value_.__r.__words[0];
    }
    if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v60 = &v344;
    }
    else {
      uint64_t v60 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v61 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v344.__r_.__value_.__l.__size_;
    }
    if (v61 && v56)
    {
      uint64_t v62 = (char *)v59 + v58;
      unint64_t v63 = (std::string *)((char *)v60 + v61);
      std::string::size_type v64 = v61 - 1;
      while (1)
      {
        uint64_t v65 = 0;
        while (v60->__r_.__value_.__s.__data_[v65] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v65])
        {
          uint64_t v66 = v65 + 1;
          if (v64 != v65)
          {
            BOOL v26 = v56 - 1 == v65++;
            if (!v26) {
              continue;
            }
          }
          unint64_t v67 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v66];
          double v68 = (std::string *)((char *)v60 + v66);
          goto LABEL_109;
        }
        unint64_t v67 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v65];
        double v68 = (std::string *)((char *)v60 + v65);
LABEL_109:
        if (v67 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v56]) {
          break;
        }
        uint64_t v60 = (std::string *)((char *)v60 + 1);
        --v64;
        if (v60 == v63) {
          goto LABEL_114;
        }
      }
      if (v60 != v68)
      {
        v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
        v335[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v56];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v59, v62, v60, v68, (char *)v59, v62);
        char v57 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_114:
    if (v57 < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v16 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    std::string::size_type v18 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  uint64_t v69 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format;
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v18 = &v344;
  }
  int64_t v70 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format);
  if (!v70)
  {
LABEL_131:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, v335);
    if (SBYTE7(v336) < 0)
    {
      locale = v335[1].__locale_;
      operator delete(v335[0].__locale_);
      if (locale) {
        goto LABEL_133;
      }
    }
    else if (BYTE7(v336))
    {
LABEL_133:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_posix_string((uint64_t)a5, &v345);
      size_t v79 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format);
      char v80 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      std::string::size_type v81 = v345.__r_.__value_.__l.__size_;
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v345;
      }
      else {
        uint64_t v82 = (std::string *)v345.__r_.__value_.__r.__words[0];
      }
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v83 = &v344;
      }
      else {
        unint64_t v83 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v344.__r_.__value_.__l.__size_;
      }
      if (v84 && v79)
      {
        uint64_t v85 = (char *)v82 + v81;
        uint64_t v86 = (std::string *)((char *)v83 + v84);
        std::string::size_type v87 = v84 - 1;
        while (1)
        {
          uint64_t v88 = 0;
          while (v83->__r_.__value_.__s.__data_[v88] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                                                                                             + v88))
          {
            uint64_t v89 = v88 + 1;
            if (v87 != v88)
            {
              BOOL v26 = v79 - 1 == v88++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v90 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                + v89;
            unint64_t v91 = (std::string *)((char *)v83 + v89);
            goto LABEL_154;
          }
          uint64_t v90 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
              + v88;
          unint64_t v91 = (std::string *)((char *)v83 + v88);
LABEL_154:
          if (v90 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                    + v79)
            break;
          unint64_t v83 = (std::string *)((char *)v83 + 1);
          --v87;
          if (v83 == v86) {
            goto LABEL_178;
          }
        }
        if (v83 != v91)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                                                   + v79);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v82, v85, v83, v91, (char *)v82, v85);
          char v80 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_178:
      if (v80 < 0) {
        operator delete(v345.__r_.__value_.__l.__data_);
      }
      goto LABEL_182;
    }
    size_t v93 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format);
    std::string::size_type v94 = v344.__r_.__value_.__l.__size_;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v95 = &v344;
    }
    else {
      unint64_t v95 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v94 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    if (v94 && v93)
    {
      unint64_t v96 = (std::string *)((char *)v95 + v94);
      std::string::size_type v97 = v94 - 1;
      while (1)
      {
        uint64_t v98 = 0;
        while (v95->__r_.__value_.__s.__data_[v98] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                                                                                           + v98))
        {
          uint64_t v99 = v98 + 1;
          if (v97 != v98)
          {
            BOOL v26 = v93 - 1 == v98++;
            if (!v26) {
              continue;
            }
          }
          uint64_t v100 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
               + v99;
          uint64_t v101 = (uint64_t)v95 + v99;
          goto LABEL_173;
        }
        uint64_t v100 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
             + v98;
        uint64_t v101 = (uint64_t)v95 + v98;
LABEL_173:
        if (v100 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                   + v93)
          break;
        unint64_t v95 = (std::string *)((char *)v95 + 1);
        --v97;
        if (v95 == v96) {
          goto LABEL_182;
        }
      }
      if (v95 != (std::string *)v101)
      {
        v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format;
        v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format
                                                 + v93);
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)v335, v95, v101);
      }
    }
    goto LABEL_182;
  }
  int64_t v71 = v70;
  int64_t v72 = v344.__r_.__value_.__l.__size_;
  if ((v16 & 0x80u) == 0) {
    int64_t v72 = v16;
  }
  if (v72 >= v70)
  {
    uint64_t v73 = (char *)v18 + v72;
    int v74 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format;
    unint64_t v75 = v18;
    do
    {
      int64_t v76 = v72 - v71;
      if (v76 == -1) {
        break;
      }
      uint64_t v77 = (char *)memchr(v75, v74, v76 + 1);
      if (!v77) {
        break;
      }
      uint64_t v78 = v77;
      if (!memcmp(v77, v69, v71))
      {
        if (v78 == v73 || v78 - (char *)v18 == -1) {
          break;
        }
        goto LABEL_131;
      }
      unint64_t v75 = (std::string *)(v78 + 1);
      int64_t v72 = v73 - (v78 + 1);
    }
    while (v72 >= v71);
  }
LABEL_182:
  uint64_t v102 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v103 = &v344;
  }
  else {
    unint64_t v103 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  int64_t v104 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
  if (!v104)
  {
LABEL_198:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 0, v335);
    if (SBYTE7(v336) < 0)
    {
      unsigned int v126 = v335[1].__locale_;
      operator delete(v335[0].__locale_);
      if (v126) {
        goto LABEL_200;
      }
    }
    else if (BYTE7(v336))
    {
LABEL_200:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 0, &v345);
      size_t v113 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
      char v114 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      std::string::size_type v115 = v345.__r_.__value_.__l.__size_;
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v116 = &v345;
      }
      else {
        unint64_t v116 = (std::string *)v345.__r_.__value_.__r.__words[0];
      }
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v115 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        atomic_ullong v117 = &v344;
      }
      else {
        atomic_ullong v117 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v118 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v118 = v344.__r_.__value_.__l.__size_;
      }
      if (v118 && v113)
      {
        unint64_t v119 = (char *)v116 + v115;
        unint64_t v120 = (std::string *)((char *)v117 + v118);
        std::string::size_type v121 = v118 - 1;
        while (1)
        {
          uint64_t v122 = 0;
          while (v117->__r_.__value_.__s.__data_[v122] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format
                                                                                               + v122))
          {
            uint64_t v123 = v122 + 1;
            if (v121 != v122)
            {
              BOOL v26 = v113 - 1 == v122++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v124 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format
                 + v123;
            unint64_t v125 = (std::string *)((char *)v117 + v123);
            goto LABEL_221;
          }
          uint64_t v124 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format
               + v122;
          unint64_t v125 = (std::string *)((char *)v117 + v122);
LABEL_221:
          if (v124 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format
                     + v113)
            break;
          atomic_ullong v117 = (std::string *)((char *)v117 + 1);
          --v121;
          if (v117 == v120) {
            goto LABEL_249;
          }
        }
        if (v117 != v125)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format
                                                   + v113);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v116, v119, v117, v125, (char *)v116, v119);
          char v114 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_249:
      if (v114 < 0) {
        operator delete(v345.__r_.__value_.__l.__data_);
      }
      goto LABEL_258;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v335);
    v345.__r_.__value_.__s.__data_[0] = 32;
    double v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v335, (uint64_t)&v345, 1);
    size_t v128 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format, v128);
    std::stringbuf::str();
    unsigned __int8 v129 = v334;
    p_p = (char *)__p;
    if ((v334 & 0x80u) != 0)
    {
      uint64_t v131 = v333;
    }
    else
    {
      p_p = (char *)&__p;
      uint64_t v131 = v334;
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v132 = &v344;
    }
    else {
      uint64_t v132 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v133 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v133 = v344.__r_.__value_.__l.__size_;
    }
    if (v133 && v131)
    {
      std::string::size_type v134 = (std::string::size_type)&p_p[v131];
      double v135 = (std::string *)((char *)v132 + v133);
      uint64_t v136 = v131 - 1;
      std::string::size_type v137 = v133 - 1;
      while (1)
      {
        uint64_t v138 = 0;
        while (v132->__r_.__value_.__s.__data_[v138] == p_p[v138])
        {
          uint64_t v139 = v138 + 1;
          if (v137 != v138)
          {
            BOOL v26 = v136 == v138++;
            if (!v26) {
              continue;
            }
          }
          uint64_t v140 = &p_p[v139];
          uint64_t v141 = (uint64_t)v132 + v139;
          goto LABEL_244;
        }
        uint64_t v140 = &p_p[v138];
        uint64_t v141 = (uint64_t)v132 + v138;
LABEL_244:
        if (v140 == (char *)v134) {
          break;
        }
        uint64_t v132 = (std::string *)((char *)v132 + 1);
        --v137;
        if (v132 == v135) {
          goto LABEL_253;
        }
      }
      if (v132 != (std::string *)v141)
      {
        v345.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        v345.__r_.__value_.__l.__size_ = v134;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)&v345, v132, v141);
        unsigned __int8 v129 = v334;
      }
    }
LABEL_253:
    if ((v129 & 0x80) != 0) {
      operator delete(__p);
    }
    v335[0] = *(std::locale *)MEMORY[0x263F8C2C8];
    *(std::locale *)((char *)v335 + *((void *)v335[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2C8] + 24);
    v335[1].__locale_ = (std::locale::__imp *)(MEMORY[0x263F8C318] + 16);
    if (v340 < 0) {
      operator delete(v339);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](v341);
    goto LABEL_258;
  }
  int64_t v105 = v104;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v106 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v106 = v344.__r_.__value_.__l.__size_;
  }
  if (v106 >= v104)
  {
    unint64_t v107 = (char *)v103 + v106;
    int v108 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
    uint64_t v109 = v103;
    do
    {
      int64_t v110 = v106 - v105;
      if (v110 == -1) {
        break;
      }
      uint64_t v111 = (char *)memchr(v109, v108, v110 + 1);
      if (!v111) {
        break;
      }
      uint64_t v112 = v111;
      if (!memcmp(v111, v102, v105))
      {
        if (v112 == v107 || v112 - (char *)v103 == -1) {
          break;
        }
        goto LABEL_198;
      }
      uint64_t v109 = (std::string *)(v112 + 1);
      int64_t v106 = v107 - (v112 + 1);
    }
    while (v106 >= v105);
  }
LABEL_258:
  double v142 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v143 = &v344;
  }
  else {
    uint64_t v143 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  int64_t v144 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
  if (!v144)
  {
LABEL_274:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, v335);
    if (SBYTE7(v336) < 0)
    {
      uint64_t v166 = v335[1].__locale_;
      operator delete(v335[0].__locale_);
      if (v166) {
        goto LABEL_276;
      }
    }
    else if (BYTE7(v336))
    {
LABEL_276:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, &v345);
      size_t v153 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
      char v154 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      std::string::size_type v155 = v345.__r_.__value_.__l.__size_;
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v156 = &v345;
      }
      else {
        v156 = (std::string *)v345.__r_.__value_.__r.__words[0];
      }
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v155 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v157 = &v344;
      }
      else {
        uint64_t v157 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v158 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v158 = v344.__r_.__value_.__l.__size_;
      }
      if (v158 && v153)
      {
        uint64_t v159 = (char *)v156 + v155;
        uint64_t v160 = (std::string *)((char *)v157 + v158);
        std::string::size_type v161 = v158 - 1;
        while (1)
        {
          uint64_t v162 = 0;
          while (v157->__r_.__value_.__s.__data_[v162] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                                                                                               + v162))
          {
            uint64_t v163 = v162 + 1;
            if (v161 != v162)
            {
              BOOL v26 = v153 - 1 == v162++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v164 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                 + v163;
            atomic_ullong v165 = (std::string *)((char *)v157 + v163);
            goto LABEL_297;
          }
          uint64_t v164 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
               + v162;
          atomic_ullong v165 = (std::string *)((char *)v157 + v162);
LABEL_297:
          if (v164 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                     + v153)
            break;
          uint64_t v157 = (std::string *)((char *)v157 + 1);
          --v161;
          if (v157 == v160) {
            goto LABEL_325;
          }
        }
        if (v157 != v165)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                                                   + v153);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v156, v159, v157, v165, (char *)v156, v159);
          char v154 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_325:
      if (v154 < 0) {
        operator delete(v345.__r_.__value_.__l.__data_);
      }
      goto LABEL_334;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v335);
    v345.__r_.__value_.__s.__data_[0] = 32;
    unint64_t v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v335, (uint64_t)&v345, 1);
    size_t v168 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format, v168);
    std::stringbuf::str();
    unsigned __int8 v169 = v334;
    double v170 = (char *)__p;
    if ((v334 & 0x80u) != 0)
    {
      uint64_t v171 = v333;
    }
    else
    {
      double v170 = (char *)&__p;
      uint64_t v171 = v334;
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v172 = &v344;
    }
    else {
      double v172 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v173 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v173 = v344.__r_.__value_.__l.__size_;
    }
    if (v173 && v171)
    {
      std::string::size_type v174 = (std::string::size_type)&v170[v171];
      unint64_t v175 = (std::string *)((char *)v172 + v173);
      uint64_t v176 = v171 - 1;
      std::string::size_type v177 = v173 - 1;
      while (1)
      {
        uint64_t v178 = 0;
        while (v172->__r_.__value_.__s.__data_[v178] == v170[v178])
        {
          uint64_t v179 = v178 + 1;
          if (v177 != v178)
          {
            BOOL v26 = v176 == v178++;
            if (!v26) {
              continue;
            }
          }
          atomic_ullong *volatile v180 = &v170[v179];
          uint64_t v181 = (uint64_t)v172 + v179;
          goto LABEL_320;
        }
        atomic_ullong *volatile v180 = &v170[v178];
        uint64_t v181 = (uint64_t)v172 + v178;
LABEL_320:
        if (v180 == (char *)v174) {
          break;
        }
        double v172 = (std::string *)((char *)v172 + 1);
        --v177;
        if (v172 == v175) {
          goto LABEL_329;
        }
      }
      if (v172 != (std::string *)v181)
      {
        v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
        v345.__r_.__value_.__l.__size_ = v174;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)&v345, v172, v181);
        unsigned __int8 v169 = v334;
      }
    }
LABEL_329:
    if ((v169 & 0x80) != 0) {
      operator delete(__p);
    }
    v335[0] = *(std::locale *)MEMORY[0x263F8C2C8];
    *(std::locale *)((char *)v335 + *((void *)v335[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2C8] + 24);
    v335[1].__locale_ = (std::locale::__imp *)(MEMORY[0x263F8C318] + 16);
    if (v340 < 0) {
      operator delete(v339);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](v341);
    goto LABEL_334;
  }
  int64_t v145 = v144;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v146 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v146 = v344.__r_.__value_.__l.__size_;
  }
  if (v146 >= v144)
  {
    uint64_t v147 = (char *)v143 + v146;
    int v148 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
    uint64_t v149 = v143;
    do
    {
      int64_t v150 = v146 - v145;
      if (v150 == -1) {
        break;
      }
      v151 = (char *)memchr(v149, v148, v150 + 1);
      if (!v151) {
        break;
      }
      uint64_t v152 = v151;
      if (!memcmp(v151, v142, v145))
      {
        if (v152 == v147 || v152 - (char *)v143 == -1) {
          break;
        }
        goto LABEL_274;
      }
      uint64_t v149 = (std::string *)(v152 + 1);
      int64_t v146 = v147 - (v152 + 1);
    }
    while (v146 >= v145);
  }
LABEL_334:
  unint64_t v182 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v183 = &v344;
  }
  else {
    v183 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  int64_t v184 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
  if (!v184)
  {
LABEL_350:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 1, v335);
    if (SBYTE7(v336) < 0)
    {
      unint64_t v206 = v335[1].__locale_;
      operator delete(v335[0].__locale_);
      if (v206) {
        goto LABEL_352;
      }
    }
    else if (BYTE7(v336))
    {
LABEL_352:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 1, &v345);
      size_t v193 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
      char v194 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      std::string::size_type v195 = v345.__r_.__value_.__l.__size_;
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v196 = &v345;
      }
      else {
        uint64_t v196 = (std::string *)v345.__r_.__value_.__r.__words[0];
      }
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v195 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v197 = &v344;
      }
      else {
        uint64_t v197 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v198 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v198 = v344.__r_.__value_.__l.__size_;
      }
      if (v198 && v193)
      {
        unint64_t v199 = (char *)v196 + v195;
        uint64_t v200 = (std::string *)((char *)v197 + v198);
        std::string::size_type v201 = v198 - 1;
        while (1)
        {
          uint64_t v202 = 0;
          while (v197->__r_.__value_.__s.__data_[v202] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                                                                                               + v202))
          {
            uint64_t v203 = v202 + 1;
            if (v201 != v202)
            {
              BOOL v26 = v193 - 1 == v202++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v204 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                 + v203;
            atomic_ullong v205 = (std::string *)((char *)v197 + v203);
            goto LABEL_373;
          }
          uint64_t v204 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
               + v202;
          atomic_ullong v205 = (std::string *)((char *)v197 + v202);
LABEL_373:
          if (v204 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                     + v193)
            break;
          uint64_t v197 = (std::string *)((char *)v197 + 1);
          --v201;
          if (v197 == v200) {
            goto LABEL_397;
          }
        }
        if (v197 != v205)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                                                   + v193);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v196, v199, v197, v205, (char *)v196, v199);
          char v194 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_397:
      if (v194 < 0) {
        operator delete(v345.__r_.__value_.__l.__data_);
      }
      goto LABEL_401;
    }
    size_t v207 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
    std::string::size_type v208 = v344.__r_.__value_.__l.__size_;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v209 = &v344;
    }
    else {
      uint64_t v209 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v208 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    if (v208 && v207)
    {
      unint64_t v210 = (std::string *)((char *)v209 + v208);
      std::string::size_type v211 = v208 - 1;
      while (1)
      {
        uint64_t v212 = 0;
        while (v209->__r_.__value_.__s.__data_[v212] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                                                                                             + v212))
        {
          uint64_t v213 = v212 + 1;
          if (v211 != v212)
          {
            BOOL v26 = v207 - 1 == v212++;
            if (!v26) {
              continue;
            }
          }
          uint64_t v214 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
               + v213;
          uint64_t v215 = (uint64_t)v209 + v213;
          goto LABEL_392;
        }
        uint64_t v214 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
             + v212;
        uint64_t v215 = (uint64_t)v209 + v212;
LABEL_392:
        if (v214 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                   + v207)
          break;
        uint64_t v209 = (std::string *)((char *)v209 + 1);
        --v211;
        if (v209 == v210) {
          goto LABEL_401;
        }
      }
      if (v209 != (std::string *)v215)
      {
        v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
        v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format
                                                 + v207);
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)v335, v209, v215);
      }
    }
    goto LABEL_401;
  }
  int64_t v185 = v184;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v186 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v186 = v344.__r_.__value_.__l.__size_;
  }
  if (v186 >= v184)
  {
    v187 = (char *)v183 + v186;
    int v188 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
    uint64_t v189 = v183;
    do
    {
      int64_t v190 = v186 - v185;
      if (v190 == -1) {
        break;
      }
      uint64_t v191 = (char *)memchr(v189, v188, v190 + 1);
      if (!v191) {
        break;
      }
      uint64_t v192 = v191;
      if (!memcmp(v191, v182, v185))
      {
        if (v192 == v187 || v192 - (char *)v183 == -1) {
          break;
        }
        goto LABEL_350;
      }
      uint64_t v189 = (std::string *)(v192 + 1);
      int64_t v186 = v187 - (v192 + 1);
    }
    while (v186 >= v185);
  }
LABEL_401:
  uint64_t v216 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    atomic_ullong v217 = &v344;
  }
  else {
    atomic_ullong v217 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  int64_t v218 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
  if (v218)
  {
    int64_t v219 = v218;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v220 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v220 = v344.__r_.__value_.__l.__size_;
    }
    if (v220 >= v218)
    {
      uint64_t v221 = (char *)v217 + v220;
      int v222 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
      uint64_t v223 = v217;
      while (1)
      {
        int64_t v224 = v220 - v219;
        if (v224 == -1) {
          break;
        }
        v225 = (char *)memchr(v223, v222, v224 + 1);
        if (!v225) {
          break;
        }
        uint64_t v226 = v225;
        if (!memcmp(v225, v216, v219))
        {
          if (v226 == v221 || v226 - (char *)v217 == -1) {
            goto LABEL_468;
          }
          goto LABEL_417;
        }
        uint64_t v223 = (std::string *)(v226 + 1);
        int64_t v220 = v221 - (v226 + 1);
        if (v220 < v219) {
          goto LABEL_468;
        }
      }
    }
    goto LABEL_468;
  }
LABEL_417:
  boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 1, v335);
  if (SBYTE7(v336) < 0)
  {
    unint64_t v240 = v335[1].__locale_;
    operator delete(v335[0].__locale_);
    if (v240) {
      goto LABEL_419;
    }
LABEL_444:
    size_t v241 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
    std::string::size_type v242 = v344.__r_.__value_.__l.__size_;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v243 = &v344;
    }
    else {
      double v243 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v242 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    if (v242 && v241)
    {
      unsigned int v244 = (std::string *)((char *)v243 + v242);
      std::string::size_type v245 = v242 - 1;
      while (1)
      {
        uint64_t v246 = 0;
        while (v243->__r_.__value_.__s.__data_[v246] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                                                             + v246))
        {
          uint64_t v247 = v246 + 1;
          if (v245 != v246)
          {
            BOOL v26 = v241 - 1 == v246++;
            if (!v26) {
              continue;
            }
          }
          uint64_t v248 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
               + v247;
          uint64_t v249 = (uint64_t)v243 + v247;
          goto LABEL_459;
        }
        uint64_t v248 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
             + v246;
        uint64_t v249 = (uint64_t)v243 + v246;
LABEL_459:
        if (v248 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                   + v241)
          break;
        double v243 = (std::string *)((char *)v243 + 1);
        --v245;
        if (v243 == v244) {
          goto LABEL_468;
        }
      }
      if (v243 != (std::string *)v249)
      {
        v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
        v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                 + v241);
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)v335, v243, v249);
      }
    }
    goto LABEL_468;
  }
  if (!BYTE7(v336)) {
    goto LABEL_444;
  }
LABEL_419:
  boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 1, &v345);
  size_t v227 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
  char v228 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
  std::string::size_type v229 = v345.__r_.__value_.__l.__size_;
  if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v230 = &v345;
  }
  else {
    uint64_t v230 = (std::string *)v345.__r_.__value_.__r.__words[0];
  }
  if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v229 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
  }
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    atomic_ullong v231 = &v344;
  }
  else {
    atomic_ullong v231 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v232 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v232 = v344.__r_.__value_.__l.__size_;
  }
  if (v232 && v227)
  {
    double v233 = (char *)v230 + v229;
    atomic_ullong v234 = (std::string *)((char *)v231 + v232);
    std::string::size_type v235 = v232 - 1;
    while (1)
    {
      uint64_t v236 = 0;
      while (v231->__r_.__value_.__s.__data_[v236] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                                                           + v236))
      {
        uint64_t v237 = v236 + 1;
        if (v235 != v236)
        {
          BOOL v26 = v227 - 1 == v236++;
          if (!v26) {
            continue;
          }
        }
        uint64_t v238 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
             + v237;
        unint64_t v239 = (std::string *)((char *)v231 + v237);
        goto LABEL_440;
      }
      uint64_t v238 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
           + v236;
      unint64_t v239 = (std::string *)((char *)v231 + v236);
LABEL_440:
      if (v238 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                 + v227)
        break;
      atomic_ullong v231 = (std::string *)((char *)v231 + 1);
      --v235;
      if (v231 == v234) {
        goto LABEL_464;
      }
    }
    if (v231 != v239)
    {
      v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
      v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                               + v227);
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v230, v233, v231, v239, (char *)v230, v233);
      char v228 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_464:
  if (v228 < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
LABEL_468:
  unint64_t v250 = (char *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
  unsigned __int8 v251 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  double v252 = (std::string *)v344.__r_.__value_.__r.__words[0];
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v253 = &v344;
  }
  else {
    uint64_t v253 = (std::string *)v344.__r_.__value_.__r.__words[0];
  }
  int64_t v254 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format);
  if (v254)
  {
    int64_t v255 = v254;
    int64_t v256 = v344.__r_.__value_.__l.__size_;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v256 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
    if (v256 >= v254)
    {
      v257 = (char *)v253 + v256;
      int v258 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      uint64_t v259 = v253;
      do
      {
        int64_t v260 = v256 - v255;
        if (v260 == -1) {
          break;
        }
        unint64_t v261 = (char *)memchr(v259, v258, v260 + 1);
        if (!v261) {
          break;
        }
        v262 = v261;
        if (!memcmp(v261, v250, v255))
        {
          if (v262 == v257 || v262 - (char *)v253 == -1) {
            break;
          }
          goto LABEL_483;
        }
        uint64_t v259 = (std::string *)(v262 + 1);
        int64_t v256 = v257 - (v262 + 1);
      }
      while (v256 >= v255);
    }
  }
  else
  {
LABEL_483:
    unint64_t v263 = HIBYTE(v343);
    LOBYTE(v264) = HIBYTE(v343);
    unint64_t v265 = (std::locale::__imp *)*((void *)&v342 + 1);
    if (v343 >= 0) {
      uint64_t v266 = HIBYTE(v343);
    }
    else {
      uint64_t v266 = *((void *)&v342 + 1);
    }
    if (!v266)
    {
      uint64_t v267 = *a5;
      unint64_t v268 = 0x7FFFFFFFFFFFFFFELL;
      if (*a5 == 0x8000000000000000) {
        unint64_t v268 = 0x8000000000000000;
      }
      if (v267 != 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v267 = v268;
      }
      if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
        uint64_t v267 = *a5 % 86400000000;
      }
      uint64_t v269 = v267 % 1000000;
      if (v269 >= 0) {
        uint64_t v270 = v269;
      }
      else {
        uint64_t v270 = -v269;
      }
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v270, 6);
      if (SHIBYTE(v343) < 0) {
        operator delete((void *)v342);
      }
      uint64_t v343 = v336;
      long long v342 = *(_OWORD *)&v335[0].__locale_;
      unint64_t v250 = (char *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      unint64_t v263 = BYTE7(v336);
      unint64_t v265 = v335[1].__locale_;
      unsigned __int8 v251 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      double v252 = (std::string *)v344.__r_.__value_.__r.__words[0];
      unint64_t v264 = BYTE7(v336);
    }
    size_t v271 = strlen(v250);
    if ((v264 & 0x80u) == 0) {
      uint64_t v272 = (char *)&v342;
    }
    else {
      uint64_t v272 = (char *)v342;
    }
    if ((v264 & 0x80u) == 0) {
      unint64_t v273 = v263;
    }
    else {
      unint64_t v273 = (unint64_t)v265;
    }
    if ((v251 & 0x80u) == 0) {
      v274 = &v344;
    }
    else {
      v274 = v252;
    }
    if ((v251 & 0x80u) == 0) {
      std::string::size_type v275 = v251;
    }
    else {
      std::string::size_type v275 = v344.__r_.__value_.__l.__size_;
    }
    if (v275 && v271)
    {
      unint64_t v276 = &v272[v273];
      uint64_t v277 = (std::string *)((char *)v274 + v275);
      std::string::size_type v278 = v275 - 1;
      while (1)
      {
        uint64_t v279 = 0;
        while (v274->__r_.__value_.__s.__data_[v279] == v250[v279])
        {
          uint64_t v280 = v279 + 1;
          if (v278 != v279)
          {
            BOOL v26 = v271 - 1 == v279++;
            if (!v26) {
              continue;
            }
          }
          double v281 = &v250[v280];
          v282 = (std::string *)((char *)v274 + v280);
          goto LABEL_521;
        }
        double v281 = &v250[v279];
        v282 = (std::string *)((char *)v274 + v279);
LABEL_521:
        if (v281 == &v250[v271]) {
          break;
        }
        v274 = (std::string *)((char *)v274 + 1);
        --v278;
        if (v274 == v277) {
          goto LABEL_526;
        }
      }
      if (v274 != v282)
      {
        v335[0].__locale_ = (std::locale::__imp *)v250;
        v335[1].__locale_ = (std::locale::__imp *)&v250[v271];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, v272, v276, v274, v282, v272, v276);
        unsigned __int8 v251 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        double v252 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_526:
  uint64_t v283 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
  if ((v251 & 0x80u) == 0) {
    double v252 = &v344;
  }
  int64_t v284 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
  if (v284)
  {
    int64_t v285 = v284;
    int64_t v286 = v344.__r_.__value_.__l.__size_;
    if ((v251 & 0x80u) == 0) {
      int64_t v286 = v251;
    }
    if (v286 >= v284)
    {
      uint64_t v287 = (char *)v252 + v286;
      int v288 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
      unint64_t v289 = v252;
      do
      {
        int64_t v290 = v286 - v285;
        if (v290 == -1) {
          break;
        }
        uint64_t v291 = (char *)memchr(v289, v288, v290 + 1);
        if (!v291) {
          break;
        }
        uint64_t v292 = v291;
        if (!memcmp(v291, v283, v285))
        {
          if (v292 == v287 || v292 - (char *)v252 == -1) {
            break;
          }
          goto LABEL_540;
        }
        unint64_t v289 = (std::string *)(v292 + 1);
        int64_t v286 = v287 - (v292 + 1);
      }
      while (v286 >= v285);
    }
  }
  else
  {
LABEL_540:
    uint64_t v293 = *a5;
    unint64_t v294 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000) {
      unint64_t v294 = 0x8000000000000000;
    }
    if (v293 != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v293 = v294;
    }
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
      uint64_t v293 = *a5 % 86400000000;
    }
    uint64_t v295 = v293 % 1000000;
    if (v295)
    {
      if (v295 >= 0) {
        uint64_t v296 = v295;
      }
      else {
        uint64_t v296 = -v295;
      }
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v296, 6);
    }
    else
    {
      v335[0].__locale_ = 0;
      v335[1].__locale_ = 0;
      *(void *)&long long v336 = 0;
    }
    if (SHIBYTE(v343) < 0) {
      operator delete((void *)v342);
    }
    uint64_t v343 = v336;
    long long v342 = *(_OWORD *)&v335[0].__locale_;
    unint64_t v297 = BYTE7(v336);
    if (SBYTE7(v336) < 0) {
      unint64_t v297 = *((void *)&v342 + 1);
    }
    if (v297)
    {
      std::ios_base::getloc(v330);
      uint64_t v298 = std::locale::use_facet(v335, MEMORY[0x263F8C150]);
      std::string::value_type v299 = ((uint64_t (*)(const std::locale::facet *))v298->__vftable[1].~facet)(v298);
      std::locale::~locale(v335);
      memset(&v345, 0, sizeof(v345));
      std::string::push_back(&v345, v299);
      if (v343 >= 0) {
        unint64_t v300 = (const std::string::value_type *)&v342;
      }
      else {
        unint64_t v300 = (const std::string::value_type *)v342;
      }
      if (v343 >= 0) {
        std::string::size_type v301 = HIBYTE(v343);
      }
      else {
        std::string::size_type v301 = *((void *)&v342 + 1);
      }
      std::string::append(&v345, v300, v301);
      size_t v302 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      char v303 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      std::string::size_type v304 = v345.__r_.__value_.__l.__size_;
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v305 = &v345;
      }
      else {
        unint64_t v305 = (std::string *)v345.__r_.__value_.__r.__words[0];
      }
      if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v304 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v306 = &v344;
      }
      else {
        uint64_t v306 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v307 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v307 = v344.__r_.__value_.__l.__size_;
      }
      if (v307 && v302)
      {
        uint64_t v308 = (char *)v305 + v304;
        uint64_t v309 = (std::string *)((char *)v306 + v307);
        std::string::size_type v310 = v307 - 1;
        while (1)
        {
          uint64_t v311 = 0;
          while (v306->__r_.__value_.__s.__data_[v311] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v311))
          {
            uint64_t v312 = v311 + 1;
            if (v310 != v311)
            {
              BOOL v26 = v302 - 1 == v311++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v313 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v312;
            uint64_t v314 = (std::string *)((char *)v306 + v312);
            goto LABEL_584;
          }
          uint64_t v313 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v311;
          uint64_t v314 = (std::string *)((char *)v306 + v311);
LABEL_584:
          if (v313 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v302)
            break;
          uint64_t v306 = (std::string *)((char *)v306 + 1);
          --v310;
          if (v306 == v309) {
            goto LABEL_607;
          }
        }
        if (v306 != v314)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v302);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v344, (uint64_t *)v335, (char *)v305, v308, v306, v314, (char *)v305, v308);
          char v303 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_607:
      if (v303 < 0) {
        operator delete(v345.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      size_t v315 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      std::string::size_type v316 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v317 = &v344;
      }
      else {
        unint64_t v317 = (std::string *)v344.__r_.__value_.__r.__words[0];
      }
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v316 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
      if (v316 && v315)
      {
        unint64_t v318 = (std::string *)((char *)v317 + v316);
        std::string::size_type v319 = v316 - 1;
        while (1)
        {
          uint64_t v320 = 0;
          while (v317->__r_.__value_.__s.__data_[v320] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v320))
          {
            uint64_t v321 = v320 + 1;
            if (v319 != v320)
            {
              BOOL v26 = v315 - 1 == v320++;
              if (!v26) {
                continue;
              }
            }
            uint64_t v322 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v321;
            uint64_t v323 = (uint64_t)v317 + v321;
            goto LABEL_602;
          }
          uint64_t v322 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v320;
          uint64_t v323 = (uint64_t)v317 + v320;
LABEL_602:
          if (v322 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v315)
            break;
          unint64_t v317 = (std::string *)((char *)v317 + 1);
          --v319;
          if (v317 == v318) {
            goto LABEL_611;
          }
        }
        if (v317 != (std::string *)v323)
        {
          v335[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v335[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v315);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v344, (uint64_t *)v335, v317, v323);
        }
      }
    }
  }
LABEL_611:
  v345.__r_.__value_.__r.__words[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_time(a5);
  *(_OWORD *)&v335[0].__locale_ = 0u;
  long long v336 = 0u;
  long long v337 = 0u;
  uint64_t v338 = 0;
  LODWORD(__p) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date((uint64_t *)&v345);
  boost::gregorian::to_tm((boost::gregorian *)&__p, (uint64_t)v335);
  int64_t v324 = v345.__r_.__value_.__r.__words[0];
  unint64_t v325 = 0x7FFFFFFFFFFFFFFELL;
  if (v345.__r_.__value_.__r.__words[0] == 0x8000000000000000) {
    unint64_t v325 = 0x8000000000000000;
  }
  if (v345.__r_.__value_.__r.__words[0] != 0x7FFFFFFFFFFFFFFFLL) {
    int64_t v324 = v325;
  }
  if (v345.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL > 2) {
    int64_t v324 = (int64_t)v345.__r_.__value_.__r.__words[0] % 86400000000;
  }
  LODWORD(v335[0].__locale_) = (int)(v324 / 1000000) % 60;
  HIDWORD(v335[0].__locale_) = (int)(v324 / 60000000) % 60;
  LODWORD(v335[1].__locale_) = (int)v324 / -694967296;
  LODWORD(v337) = -1;
  LODWORD(v337) = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a5);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v331, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  }
  else {
    std::string v331 = v344;
  }
  uint64_t v326 = (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, void, std::locale *, std::string *))(*(void *)v328 + 48))(v328, a2, v330, v329, v335, &v331);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v331.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v343) < 0) {
    operator delete((void *)v342);
  }
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v344.__r_.__value_.__l.__data_);
  }
  return v326;
}

void sub_224170F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a25);
  if (*(char *)(v25 - 153) < 0) {
    operator delete(*(void **)(v25 - 176));
  }
  if (*(char *)(v25 - 121) < 0) {
    operator delete(*(void **)(v25 - 144));
  }
  _Unwind_Resume(a1);
}

void boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  __p = 0;
  uint64_t v9 = 0;
  uint64_t v6 = a1[1];
  boost::detail::shared_count::~shared_count(&v9);
  if (v6)
  {
    if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
    {
      if (!a2)
      {
        (*(void (**)(uint64_t))(*(void *)a1[1] + 16))(a1[1]);
        return;
      }
      (*(void (**)(int64_t *__return_ptr))(*(void *)a1[1] + 72))(&v12);
      (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 80))(&__p);
      boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+=((unint64_t *)&v12, (unint64_t *)&__p, &v11);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v12, (uint64_t)&__p);
    }
    else
    {
      if (!a2)
      {
        (*(void (**)(uint64_t))(*(void *)a1[1] + 24))(a1[1]);
        return;
      }
      (*(void (**)(int64_t *__return_ptr))(*(void *)a1[1] + 72))(&v12);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v12, (uint64_t)&__p);
    }
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (a2) {
      uint64_t v7 = "Z";
    }
    else {
      uint64_t v7 = "UTC";
    }
    std::string::basic_string[abi:ne180100]<0>(a3, v7);
  }
}

void sub_224171244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_posix_string@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  boost::detail::shared_count::~shared_count(&v6);
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a2, "UTC+00");
  }
}

void boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  __p = 0;
  uint64_t v9 = 0;
  uint64_t v6 = a1[1];
  boost::detail::shared_count::~shared_count(&v9);
  if (v6)
  {
    if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
    {
      if (!a2)
      {
        (*(void (**)(uint64_t))(*(void *)a1[1] + 32))(a1[1]);
        return;
      }
      (*(void (**)(int64_t *__return_ptr))(*(void *)a1[1] + 72))(&v12);
      (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 80))(&__p);
      boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+=((unint64_t *)&v12, (unint64_t *)&__p, &v11);
      std::string::basic_string[abi:ne180100]<0>(&__p, ":");
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v12, (uint64_t)&__p);
    }
    else
    {
      if (!a2)
      {
        (*(void (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
        return;
      }
      (*(void (**)(int64_t *__return_ptr))(*(void *)a1[1] + 72))(&v12);
      std::string::basic_string[abi:ne180100]<0>(&__p, ":");
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v12, (uint64_t)&__p);
    }
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (a2) {
      uint64_t v7 = "Z";
    }
    else {
      uint64_t v7 = "Coordinated Universal Time";
    }
    std::string::basic_string[abi:ne180100]<0>(a3, v7);
  }
}

void sub_2241714C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(uint64_t *a1)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v2 = a1[1];
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 48))(v2))
  {
    boost::detail::shared_count::~shared_count(&v24);
    return 0;
  }
  unint64_t v3 = *a1 - 0x7FFFFFFFFFFFFFFELL;
  boost::detail::shared_count::~shared_count(&v24);
  if (v3 < 3) {
    return 0;
  }
  uint64_t v4 = a1[1];
  uint64_t v22 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 72))(&v23);
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v22, (unint64_t *)&v23);
  unsigned int v5 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v22);
  uint64_t v6 = v22;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
  if (v22 == 0x8000000000000000) {
    unint64_t v7 = 0x8000000000000000;
  }
  if (v22 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v6 = v7;
  }
  if ((unint64_t)(v22 - 0x7FFFFFFFFFFFFFFELL) <= 2) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v22 % 86400000000;
  }
  uint64_t v9 = (atomic_uint *)a1[2];
  uint64_t v19 = a1[1];
  std::string::size_type v20 = v9;
  int64_t v21 = v8;
  if (v9) {
    atomic_fetch_add_explicit(v9 + 2, 1u, memory_order_relaxed);
  }
  int v10 = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(v5, &v21, &v19);
  boost::detail::shared_count::~shared_count(&v20);
  uint64_t result = 0;
  switch(v10)
  {
    case 0:
      return result;
    case 1:
      goto LABEL_20;
    case 2:
      (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 80))(&v18);
      uint64_t v23 = v18;
      int64_t v12 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v22, &v23);
      uint64_t v13 = a1[1];
      LODWORD(v23) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v22);
      unsigned __int16 v14 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v23);
      if (v12 >= (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 64))(v13, v14)) {
        return 0;
      }
      goto LABEL_20;
    case 3:
      uint64_t v15 = a1[1];
      LODWORD(v23) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v22);
      unsigned __int16 v16 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v23);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)v15 + 56))(v15, v16);
      if (v22 < v17) {
        return 0;
      }
LABEL_20:
      uint64_t result = 1;
      break;
    default:
      return 0;
  }
  return result;
}

void sub_224171778(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator+=@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    unint64_t v5 = *a2;
    if (*a2 - 0x7FFFFFFFFFFFFFFELL >= 3) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_16;
    }
    unint64_t v5 = *a2;
  }
  unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_16;
  }
  if (v3 == 0x8000000000000000)
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
    if (v5 == v6) {
      unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    }
    else {
      unint64_t v4 = *result;
    }
    goto LABEL_16;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0x8000000000000000;
    goto LABEL_10;
  }
  unint64_t v4 = 0x8000000000000000;
  if (v5 != 0x8000000000000000)
  {
    unint64_t v4 = v5;
    if (v5 != 0x7FFFFFFFFFFFFFFFLL) {
LABEL_14:
    }
      unint64_t v4 = v5 + v3;
  }
LABEL_16:
  char *result = v4;
  *a3 = v4;
  return result;
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset(uint64_t a1, int64_t *a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  int64_t v16 = 0;
  if (boost::date_time::int_adapter<long long>::compare(a2, &v16) == -1) {
    unint64_t v5 = "-";
  }
  else {
    unint64_t v5 = "+";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, 1);
  *(void *)((char *)&v13[3] + *(void *)(v13[0] - 24)) = 2;
  LOBYTE(v16) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
  unint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  char v12 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, &v12);
  std::ostream::operator<<();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v15);
}

void sub_224171AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_time(uint64_t *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = a1[1];
  boost::detail::shared_count::~shared_count(&v9);
  if (!v2) {
    return *a1;
  }
  uint64_t v3 = a1[1];
  uint64_t v7 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 72))(&v6);
  uint64_t v8 = v6;
  unint64_t v4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v7, &v8);
  unint64_t v10 = v4;
  if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 80))(&v8);
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=((uint64_t *)&v10, (unint64_t *)&v8);
    return v10;
  }
  return v4;
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_format[0];
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v11, 1, "/", "[", ")", "]");
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(&v10);
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter((uint64_t)v9);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, v4, (uint64_t)v11, (long long **)&v10, v9, a2);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  *(void *)a1 = &unk_26D76D6B8;
  std::string::basic_string[abi:ne180100]<0>(&v8, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  unint64_t v5 = std::string::append(&v8, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(void *)(a1 + 352) = *((void *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_224171D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

unsigned char *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D76D880;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D76D880;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::flexible_type_impl *a1@<X1>, uint64_t a2@<X8>)
{
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      v8[0] = *(void **)MEMORY[0x263F8C2B8];
      unint64_t v5 = *(void **)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)v8 + *((void *)v8[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      v8[2] = v5;
      v8[3] = (void *)(MEMORY[0x263F8C318] + 16);
      if (v9 < 0) {
        operator delete(v8[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v10);
      break;
    case 2:
      uint64_t v3 = *(void *)a1;
      if (*(char *)(*(void *)a1 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 + 8);
        v7.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
        *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v8, (void *)(*(void *)a1 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v8, (uint64_t *)(*(void *)a1 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v8, (void *)(*(void *)a1 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a1, &v7);
      break;
    case 7:
      memset(&v7, 0, sizeof(v7));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v8, (void *)(*(void *)a1 + 8));
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  turi::image_util::load_image(a2);
}

void sub_2241723E4(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76D900;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76D900;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26D76D900;
  std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76D900;
  return std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned char *a1@<X0>, int *a2@<X1>, std::string::size_type a3@<X8>)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  int v4 = *((unsigned __int8 *)a2 + 12);
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v4 == 7)
  {
    if (a2 != (int *)a3)
    {
      *(void *)(a3 + 5) = *(void *)((char *)a2 + 5);
      *(void *)a3 = *(void *)a2;
      *(unsigned char *)(a3 + 12) = 7;
    }
  }
  else
  {
    switch(a1[8])
    {
      case 0:
        switch(v4)
        {
          case 0:
            uint64_t v6 = *(void *)a2;
            goto LABEL_93;
          case 1:
            uint64_t v6 = (uint64_t)*(double *)a2;
            goto LABEL_93;
          case 2:
            uint64_t v34 = *(void *)a2;
            long long v35 = (char **)(*(void *)a2 + 8);
            size_t __idx = 0;
            uint64_t v36 = (char *)v35;
            if (*(char *)(v34 + 31) < 0) {
              uint64_t v36 = *v35;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v36);
            uint64_t v6 = std::stoll((const std::string *)&__str, &__idx, 10);
            if (SBYTE7(__str_16) < 0) {
              operator delete((void *)__str);
            }
            if (*(char *)(v34 + 31) < 0) {
              uint64_t v37 = *(void *)(v34 + 16);
            }
            else {
              uint64_t v37 = *(unsigned __int8 *)(v34 + 31);
            }
            if (__idx != v37)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v66 = std::string::append(&v85, " cannot be interpreted as an integer");
              long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
              *(void *)&long long __str_16 = *((void *)&v66->__r_.__value_.__l + 2);
              long long __str = v67;
              v66->__r_.__value_.__l.__size_ = 0;
              v66->__r_.__value_.__r.__words[2] = 0;
              v66->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)&__str);
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_93;
          case 3:
            uint64_t v42 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v42 + 8), *(void *)(v42 + 16), (uint64_t)(*(void *)(v42 + 16) - *(void *)(v42 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if ((void)__str)
            {
              *((void *)&__str + 1) = __str;
              operator delete((void *)__str);
            }
            goto LABEL_92;
          case 4:
            uint64_t v30 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
            goto LABEL_92;
          case 5:
            uint64_t v32 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
            goto LABEL_92;
          case 6:
            uint64_t v6 = (uint64_t)(*(void *)a2 << 8) >> 8;
            goto LABEL_93;
          case 8:
            uint64_t v38 = *(void *)a2;
            uint64_t v39 = *(void *)(*(void *)a2 + 16);
            *(void *)&long long __str = *(void *)(*(void *)a2 + 8);
            *((void *)&__str + 1) = v39;
            if (v39) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 1u, memory_order_relaxed);
            }
            long long v40 = *(_OWORD *)(v38 + 24);
            long long v41 = *(_OWORD *)(v38 + 56);
            long long v89 = *(_OWORD *)(v38 + 40);
            long long v90 = v41;
            long long __str_16 = v40;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
            goto LABEL_92;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v89 + 1))
            {
              *(void *)&long long v90 = *((void *)&v89 + 1);
              operator delete(*((void **)&v89 + 1));
            }
            if ((void)__str_16)
            {
              *((void *)&__str_16 + 1) = __str_16;
              operator delete((void *)__str_16);
            }
            if (*((void *)&__str + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
            }
LABEL_92:
            uint64_t v6 = 0;
LABEL_93:
            switch(*(unsigned char *)(a3 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v43 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_125;
                  }
                  if (*((char *)v43 + 31) < 0) {
                    operator delete((void *)v43[1]);
                  }
                  atomic_ullong *volatile v44 = v43;
                  uint64_t v45 = 0x1012C404EF22A49;
                  goto LABEL_124;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v52 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_125;
                  }
                  uint64_t v53 = (void *)v52[1];
                  if (v53)
                  {
                    v52[2] = (atomic_ullong)v53;
                    operator delete(v53);
                  }
                  atomic_ullong *volatile v44 = v52;
                  uint64_t v45 = 0x1080C409938AC02;
                  goto LABEL_124;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v46 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_125;
                  }
                  *(void *)&long long __str = v46 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  goto LABEL_119;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v46 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_125;
                  }
                  *(void *)&long long __str = v46 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_119:
                  atomic_ullong *volatile v44 = v46;
                  uint64_t v45 = 0x1020C405E66F15BLL;
                  goto LABEL_124;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_125;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v54 + 2);
                  atomic_ullong *volatile v44 = v54;
                  unsigned int v51 = -235920773;
                  goto LABEL_123;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)a3;
                  if (*(void *)a3)
                  {
                    unint64_t v48 = (void *)v47[6];
                    if (v48)
                    {
                      v47[7] = (atomic_ullong)v48;
                      operator delete(v48);
                    }
                    uint64_t v49 = (void *)v47[3];
                    if (v49)
                    {
                      v47[4] = (atomic_ullong)v49;
                      operator delete(v49);
                    }
                    uint64_t v50 = (std::__shared_weak_count *)v47[2];
                    if (v50) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
                    }
                    atomic_ullong *volatile v44 = v47;
                    unsigned int v51 = 2071181815;
LABEL_123:
                    uint64_t v45 = v51 | 0x1030C4000000000;
LABEL_124:
                    MEMORY[0x22A614FA0](v44, v45);
                  }
LABEL_125:
                  *(void *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(a3 + 8) = 0;
            *(unsigned char *)(a3 + 12) = 0;
            *(void *)a3 = v6;
            break;
          default:
            goto LABEL_188;
        }
        break;
      case 1:
        switch(v4)
        {
          case 0:
            double v10 = (double)*(uint64_t *)a2;
            goto LABEL_149;
          case 1:
            double v10 = *(double *)a2;
            goto LABEL_149;
          case 2:
            uint64_t v55 = *(void *)a2;
            size_t v56 = (char **)(*(void *)a2 + 8);
            size_t __idx = 0;
            char v57 = (char *)v56;
            if (*(char *)(v55 + 31) < 0) {
              char v57 = *v56;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v57);
            double v58 = std::stod((const std::string *)&__str, &__idx);
            if (SBYTE7(__str_16) < 0) {
              operator delete((void *)__str);
            }
            if (*(char *)(v55 + 31) < 0) {
              uint64_t v59 = *(void *)(v55 + 16);
            }
            else {
              uint64_t v59 = *(unsigned __int8 *)(v55 + 31);
            }
            if (__idx != v59)
            {
              std::string::size_type v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v82 = std::string::append(&v85, " cannot be interpreted as a float");
              long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
              *(void *)&long long __str_16 = *((void *)&v82->__r_.__value_.__l + 2);
              long long __str = v83;
              v82->__r_.__value_.__l.__size_ = 0;
              v82->__r_.__value_.__r.__words[2] = 0;
              v82->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v81, (const std::string *)&__str);
              __cxa_throw(v81, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            float v68 = v58;
            double v10 = v68;
            goto LABEL_149;
          case 3:
            uint64_t v64 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v64 + 8), *(void *)(v64 + 16), (uint64_t)(*(void *)(v64 + 16) - *(void *)(v64 + 8)) >> 3);
            turi::flexible_type_fail(0);
            double v10 = 0.0;
            if ((void)__str)
            {
              *((void *)&__str + 1) = __str;
              operator delete((void *)__str);
            }
            goto LABEL_149;
          case 4:
            uint64_t v31 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
            goto LABEL_137;
          case 5:
            uint64_t v33 = *(void *)a2;
            *(void *)&long long __str_16 = 0;
            long long __str = 0uLL;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
            goto LABEL_137;
          case 6:
            double v10 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
            goto LABEL_149;
          case 8:
            uint64_t v60 = *(void *)a2;
            uint64_t v61 = *(void *)(*(void *)a2 + 16);
            *(void *)&long long __str = *(void *)(*(void *)a2 + 8);
            *((void *)&__str + 1) = v61;
            if (v61) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v61 + 8), 1u, memory_order_relaxed);
            }
            long long v62 = *(_OWORD *)(v60 + 24);
            long long v63 = *(_OWORD *)(v60 + 56);
            long long v89 = *(_OWORD *)(v60 + 40);
            long long v90 = v63;
            long long __str_16 = v62;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
LABEL_137:
            double v10 = 0.0;
            goto LABEL_149;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v89 + 1))
            {
              *(void *)&long long v90 = *((void *)&v89 + 1);
              operator delete(*((void **)&v89 + 1));
            }
            if ((void)__str_16)
            {
              *((void *)&__str_16 + 1) = __str_16;
              operator delete((void *)__str_16);
            }
            double v10 = 0.0;
            if (*((void *)&__str + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
            }
LABEL_149:
            switch(*(unsigned char *)(a3 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v69 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_181;
                  }
                  if (*((char *)v69 + 31) < 0) {
                    operator delete((void *)v69[1]);
                  }
                  atomic_ullong *volatile v70 = v69;
                  uint64_t v71 = 0x1012C404EF22A49;
                  goto LABEL_180;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v78 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_181;
                  }
                  size_t v79 = (void *)v78[1];
                  if (v79)
                  {
                    v78[2] = (atomic_ullong)v79;
                    operator delete(v79);
                  }
                  atomic_ullong *volatile v70 = v78;
                  uint64_t v71 = 0x1080C409938AC02;
                  goto LABEL_180;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_181;
                  }
                  *(void *)&long long __str = v72 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  goto LABEL_175;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_181;
                  }
                  *(void *)&long long __str = v72 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_175:
                  atomic_ullong *volatile v70 = v72;
                  uint64_t v71 = 0x1020C405E66F15BLL;
                  goto LABEL_180;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v80 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_181;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v80 + 2);
                  atomic_ullong *volatile v70 = v80;
                  unsigned int v77 = -235920773;
                  goto LABEL_179;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v73 = *(atomic_ullong *volatile *)a3;
                  if (*(void *)a3)
                  {
                    int v74 = (void *)v73[6];
                    if (v74)
                    {
                      v73[7] = (atomic_ullong)v74;
                      operator delete(v74);
                    }
                    unint64_t v75 = (void *)v73[3];
                    if (v75)
                    {
                      v73[4] = (atomic_ullong)v75;
                      operator delete(v75);
                    }
                    int64_t v76 = (std::__shared_weak_count *)v73[2];
                    if (v76) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                    }
                    atomic_ullong *volatile v70 = v73;
                    unsigned int v77 = 2071181815;
LABEL_179:
                    uint64_t v71 = v77 | 0x1030C4000000000;
LABEL_180:
                    MEMORY[0x22A614FA0](v70, v71);
                  }
LABEL_181:
                  *(void *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(a3 + 8) = 0;
            *(unsigned char *)(a3 + 12) = 1;
            *(double *)a3 = v10;
            break;
          default:
LABEL_188:
            turi::flexible_type_fail(0);
            __break(1u);
            break;
        }
        break;
      case 3:
        char v84 = 0;
        uint64_t v7 = *(void *)a2;
        if (*(char *)(*(void *)a2 + 31) < 0)
        {
          size_t v8 = *(void *)(v7 + 8);
          uint64_t v9 = *(void *)(v7 + 16);
        }
        else
        {
          size_t v8 = v7 + 8;
          uint64_t v9 = *(unsigned __int8 *)(*(void *)a2 + 31);
        }
        size_t __idx = v8;
        turi::flexible_type_parser::vector_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v9, (void **)&__str);
        v85.__r_.__value_.__r.__words[0] = a3;
        v85.__r_.__value_.__l.__size_ = (std::string::size_type)&v84;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v85, (uint64_t *)&__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__str);
        if (!v84)
        {
          if (!a1[9]) {
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#1}::operator()();
          }
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(unsigned char *)(a3 + 12))
            {
              case 2:
                goto LABEL_30;
              case 3:
                goto LABEL_47;
              case 4:
                goto LABEL_35;
              case 5:
                goto LABEL_52;
              case 8:
                goto LABEL_56;
              case 9:
                goto LABEL_38;
              default:
                goto LABEL_62;
            }
            goto LABEL_62;
          }
        }
        break;
      case 4:
        char v84 = 0;
        uint64_t v11 = *(void *)a2;
        if (*(char *)(*(void *)a2 + 31) < 0)
        {
          size_t v12 = *(void *)(v11 + 8);
          uint64_t v13 = *(void *)(v11 + 16);
        }
        else
        {
          size_t v12 = v11 + 8;
          uint64_t v13 = *(unsigned __int8 *)(*(void *)a2 + 31);
        }
        size_t __idx = v12;
        turi::flexible_type_parser::recursive_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v13, (void **)&__str);
        v85.__r_.__value_.__r.__words[0] = a3;
        v85.__r_.__value_.__l.__size_ = (std::string::size_type)&v84;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v85, (uint64_t *)&__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__str);
        if (!v84)
        {
          if (!a1[9]) {
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#2}::operator()();
          }
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(unsigned char *)(a3 + 12))
            {
              case 2:
                goto LABEL_30;
              case 3:
                goto LABEL_47;
              case 4:
                goto LABEL_35;
              case 5:
                goto LABEL_52;
              case 8:
                goto LABEL_56;
              case 9:
                goto LABEL_38;
              default:
                goto LABEL_62;
            }
            goto LABEL_62;
          }
        }
        break;
      case 5:
        char v84 = 0;
        uint64_t v14 = *(void *)a2;
        if (*(char *)(*(void *)a2 + 31) < 0)
        {
          size_t v15 = *(void *)(v14 + 8);
          uint64_t v16 = *(void *)(v14 + 16);
        }
        else
        {
          size_t v15 = v14 + 8;
          uint64_t v16 = *(unsigned __int8 *)(*(void *)a2 + 31);
        }
        size_t __idx = v15;
        turi::flexible_type_parser::dict_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v16, (void **)&__str);
        v85.__r_.__value_.__r.__words[0] = a3;
        v85.__r_.__value_.__l.__size_ = (std::string::size_type)&v84;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v85, (uint64_t *)&__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__str);
        if (!v84)
        {
          if (!a1[9]) {
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#3}::operator()();
          }
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(unsigned char *)(a3 + 12))
            {
              case 2:
LABEL_30:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_61;
                  }
                  if (*((char *)v17 + 31) < 0) {
                    operator delete((void *)v17[1]);
                  }
                  atomic_ullong *volatile v18 = v17;
                  uint64_t v19 = 0x1012C404EF22A49;
                  goto LABEL_60;
                }
                break;
              case 3:
LABEL_47:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_61;
                  }
                  double v27 = (void *)v26[1];
                  if (v27)
                  {
                    v26[2] = (atomic_ullong)v27;
                    operator delete(v27);
                  }
                  atomic_ullong *volatile v18 = v26;
                  uint64_t v19 = 0x1080C409938AC02;
                  goto LABEL_60;
                }
                break;
              case 4:
LABEL_35:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_61;
                  }
                  *(void *)&long long __str = v20 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  goto LABEL_55;
                }
                break;
              case 5:
LABEL_52:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_61;
                  }
                  *(void *)&long long __str = v20 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_55:
                  atomic_ullong *volatile v18 = v20;
                  uint64_t v19 = 0x1020C405E66F15BLL;
                  goto LABEL_60;
                }
                break;
              case 8:
LABEL_56:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)a3;
                  if (!*(void *)a3) {
                    goto LABEL_61;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
                  atomic_ullong *volatile v18 = v28;
                  unsigned int v25 = -235920773;
                  goto LABEL_59;
                }
                break;
              case 9:
LABEL_38:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a3;
                  if (*(void *)a3)
                  {
                    uint64_t v22 = (void *)v21[6];
                    if (v22)
                    {
                      v21[7] = (atomic_ullong)v22;
                      operator delete(v22);
                    }
                    uint64_t v23 = (void *)v21[3];
                    if (v23)
                    {
                      v21[4] = (atomic_ullong)v23;
                      operator delete(v23);
                    }
                    uint64_t v24 = (std::__shared_weak_count *)v21[2];
                    if (v24) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                    }
                    atomic_ullong *volatile v18 = v21;
                    unsigned int v25 = 2071181815;
LABEL_59:
                    uint64_t v19 = v25 | 0x1030C4000000000;
LABEL_60:
                    MEMORY[0x22A614FA0](v18, v19);
                  }
LABEL_61:
                  *(void *)a3 = 0;
                }
                break;
              default:
                break;
            }
LABEL_62:
            *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(void *)a3 = turi::FLEX_UNDEFINED;
            unsigned int v29 = byte_268085B9C;
            *(unsigned char *)(a3 + 12) = byte_268085B9C;
            if (v29 <= 9 && ((1 << v29) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
            }
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_22417398C()
{
  __cxa_end_catch();
  switch(*(unsigned char *)(v0 + 12))
  {
    case 2:
      char v1 = turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v0);
      goto LABEL_16;
    case 3:
      char v1 = turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v0);
      goto LABEL_16;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      v6[0] = (void **)(v2 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v6);
      goto LABEL_10;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      v6[0] = (void **)(v2 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v6);
LABEL_10:
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v5 + 2);
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      char v1 = std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((atomic_ullong *volatile *)v0);
LABEL_16:
      if ((v1 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_18;
    default:
      goto LABEL_18;
  }
  MEMORY[0x22A614FA0](v3, v4);
LABEL_17:
  *(void *)uint64_t v0 = 0;
LABEL_18:
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 12) = 0;
  JUMPOUT(0x224173ADCLL);
}

void sub_224173998()
{
  __cxa_end_catch();
  switch(*(unsigned char *)(v0 + 12))
  {
    case 2:
      char v1 = turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v0);
      goto LABEL_16;
    case 3:
      char v1 = turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v0);
      goto LABEL_16;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      v6[0] = (void **)(v2 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v6);
      goto LABEL_10;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      v6[0] = (void **)(v2 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v6);
LABEL_10:
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v0, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_18;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)v0;
      if (!*(void *)v0) {
        goto LABEL_17;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v5 + 2);
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      char v1 = std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((atomic_ullong *volatile *)v0);
LABEL_16:
      if ((v1 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_18;
    default:
      goto LABEL_18;
  }
  MEMORY[0x22A614FA0](v3, v4);
LABEL_17:
  *(void *)uint64_t v0 = 0;
LABEL_18:
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 12) = 0;
  JUMPOUT(0x224173ADCLL);
}

void sub_2241739A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2241739B4()
{
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  *(_WORD *)uint64_t result = *(_WORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 40) = *(unsigned char *)(a2 + 40);
  return result;
}

void std::__function::__alloc_func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

_WORD *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D76D980;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D76D980;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D0>)
{
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3::operator()(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D0>)
{
  uint64_t v5 = 0;
  v104[2] = *MEMORY[0x263EF8340];
  int v6 = *a1;
  memset(v104, 0, 13);
  BYTE4(v104[1]) = v6;
  switch(v6)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      uint64_t v5 = 0x1900000000000000;
      v104[0] = 0x1900000000000000;
      LODWORD(v104[1]) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  if (v104 != (void *)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v104[1]))
        {
          case 0:
            double v7 = *(double *)a2;
            goto LABEL_40;
          case 1:
            double v39 = (double)*(uint64_t *)a2;
            goto LABEL_166;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v35 = v104[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v92);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v36 = v35 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v92);
            if (*(char *)(v35 + 31) < 0) {
              goto LABEL_119;
            }
            goto LABEL_120;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 6:
            v104[0] = *(void *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v104[1]) = 0;
            goto LABEL_217;
          case 7:
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 1:
        switch(BYTE4(v104[1]))
        {
          case 0:
            *(void *)&double v7 = (uint64_t)*(double *)a2;
            goto LABEL_40;
          case 1:
            double v39 = *(double *)a2;
            goto LABEL_166;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v40 = v104[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v92);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v36 = v40 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v92);
            if (*(char *)(v40 + 31) < 0) {
LABEL_119:
            }
              operator delete(*(void **)v36);
LABEL_120:
            long long v37 = v102;
            uint64_t v38 = v103;
            goto LABEL_222;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 6:
            int v41 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v41 >= 999999) {
              int v41 = 999999;
            }
            if (v41 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            v104[0] = vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v104[1]) = v41;
            goto LABEL_217;
          case 7:
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 2:
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            double v13 = *(double *)a2;
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            if (*(char *)(*(void *)&v13 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v92, *(const std::string::value_type **)(*(void *)&v13 + 8), *(void *)(*(void *)&v13 + 16));
            }
            else
            {
              long long v14 = *(_OWORD *)(*(void *)&v13 + 8);
              *(void *)&long long v93 = *(void *)(*(void *)&v13 + 24);
              long long v92 = v14;
            }
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 3:
        double v15 = *(double *)a2;
        uint64_t v16 = (char *)(*(void *)a2 + 8);
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v102, v16);
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            if (v104[0] == *(void *)&v15) {
              goto LABEL_217;
            }
            uint64_t v19 = (char *)(v104[0] + 8);
            unsigned int v29 = (uint64_t *)(*(void *)&v15 + 16);
            break;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v104[0] + 8), *(void **)(*(void *)&v15 + 8), *(void **)(*(void *)&v15 + 16), (uint64_t)(*(void *)(*(void *)&v15 + 16) - *(void *)(*(void *)&v15 + 8)) >> 3);
            goto LABEL_217;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v32 = v104[0];
            long long v102 = 0uLL;
            uint64_t v103 = 0;
            uint64_t v99 = 0;
            uint64_t v100 = 0;
            uint64_t v101 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v16, &v96);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v92, &v96, (uint64_t)&v102, (uint64_t)&v99, 0);
            if (v97) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v97);
            }
            if (v99)
            {
              uint64_t v100 = v99;
              operator delete(v99);
            }
            if ((void)v102)
            {
              *((void *)&v102 + 1) = v102;
              operator delete((void *)v102);
            }
            goto LABEL_155;
          default:
            goto LABEL_280;
        }
LABEL_72:
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v19, *(char **)v16, *v29, (*v29 - *(void *)v16) >> 3);
        break;
      case 4:
        double v8 = *(double *)a2;
        uint64_t v9 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v102, v9);
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v92, (void *)(v104[0] + 8), v9);
            goto LABEL_217;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            if (v104[0] != *(void *)&v8) {
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v104[0] + 8, *(uint64_t **)(*(void *)&v8 + 8), *(uint64_t **)(*(void *)&v8 + 16), (uint64_t)(*(void *)(*(void *)&v8 + 16) - *(void *)(*(void *)&v8 + 8)) >> 4);
            }
            goto LABEL_217;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v24 = v104[0];
            uint64_t v103 = 0;
            long long v102 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v102, *(uint64_t **)(*(void *)&v8 + 8), *(uint64_t **)(*(void *)&v8 + 16), (uint64_t)(*(void *)(*(void *)&v8 + 16) - *(void *)(*(void *)&v8 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v102, &v92);
            long long v25 = v92;
            long long v92 = 0uLL;
            atomic_ullong *volatile v26 = *(std::__shared_weak_count **)(v24 + 16);
            *(_OWORD *)(v24 + 8) = v25;
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            double v27 = *(void **)(v24 + 24);
            if (v27)
            {
              *(void *)(v24 + 32) = v27;
              operator delete(v27);
              *(void *)(v24 + 24) = 0;
              *(void *)(v24 + 32) = 0;
              *(void *)(v24 + 40) = 0;
            }
            atomic_ullong *volatile v28 = *(void **)(v24 + 48);
            *(_OWORD *)(v24 + 24) = v93;
            *(void *)(v24 + 40) = *(void *)v94;
            long long v93 = 0uLL;
            *(void *)std::string::size_type v94 = 0;
            if (v28)
            {
              *(void *)(v24 + 56) = v28;
              operator delete(v28);
              *(void *)(v24 + 48) = 0;
              *(void *)(v24 + 56) = 0;
              *(void *)(v24 + 64) = 0;
            }
            *(_OWORD *)(v24 + 48) = *(_OWORD *)&v94[8];
            *(void *)(v24 + 64) = *(void *)&v94[24];
            memset(&v94[8], 0, 24);
            *(void *)(v24 + 72) = v95;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v92);
            uint64_t v99 = (void **)&v102;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v99);
            goto LABEL_217;
          default:
            goto LABEL_280;
        }
      case 5:
        double v17 = *(double *)a2;
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v102, (void *)(*(void *)&v17 + 8));
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            if (v104[0] != *(void *)&v17) {
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v104[0] + 8), *(uint64_t **)(*(void *)&v17 + 8), *(uint64_t **)(*(void *)&v17 + 16), (uint64_t)(*(void *)(*(void *)&v17 + 16) - *(void *)(*(void *)&v17 + 8)) >> 5);
            }
            goto LABEL_217;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 6:
        switch(BYTE4(v104[1]))
        {
          case 0:
            *(void *)&double v7 = (uint64_t)(*(void *)a2 << 8) >> 8;
            goto LABEL_40;
          case 1:
            double v39 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_166:
            *(double *)int64_t v104 = v39;
            goto LABEL_217;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            int v51 = *(_DWORD *)(a2 + 8);
            *(void *)&long long v102 = *(void *)a2;
            DWORD2(v102) = v51;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v102, (std::string *)&v92);
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 6:
            int v52 = *(_DWORD *)(a2 + 8);
            v104[0] = *(void *)a2;
            LODWORD(v104[1]) = v52;
            goto LABEL_217;
          case 7:
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 7:
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 6:
            goto LABEL_216;
          case 1:
            double v7 = NAN;
LABEL_40:
            *(double *)int64_t v104 = v7;
            goto LABEL_217;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v31 = v104[0] + 8;
            if (*(char *)(v104[0] + 31) < 0) {
              operator delete(*(void **)v31);
            }
            *(void *)uint64_t v31 = 0;
            *(void *)(v31 + 8) = 0;
            *(void *)(v31 + 16) = 0;
            goto LABEL_217;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 7:
            goto LABEL_217;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          default:
            goto LABEL_280;
        }
      case 8:
        atomic_ullong *volatile v18 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_219;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v33 = (void *)v104[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v18, (double **)&v92, a4);
            uint64_t v34 = (void *)v33[1];
            if (v34)
            {
              v33[2] = v34;
              operator delete(v34);
              v33[1] = 0;
              v33[2] = 0;
              v33[3] = 0;
            }
            *(_OWORD *)(v33 + 1) = v92;
            v33[3] = v93;
            goto LABEL_217;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v32 = v104[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v18, &v92, a4);
LABEL_155:
            long long v47 = v92;
            long long v92 = 0uLL;
            unint64_t v48 = *(std::__shared_weak_count **)(v32 + 16);
            *(_OWORD *)(v32 + 8) = v47;
            if (v48) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            }
            uint64_t v49 = *(void **)(v32 + 24);
            if (v49)
            {
              *(void *)(v32 + 32) = v49;
              operator delete(v49);
              *(void *)(v32 + 24) = 0;
              *(void *)(v32 + 32) = 0;
              *(void *)(v32 + 40) = 0;
            }
            uint64_t v50 = *(void **)(v32 + 48);
            *(_OWORD *)(v32 + 24) = v93;
            *(void *)(v32 + 40) = *(void *)v94;
            long long v93 = 0uLL;
            *(void *)std::string::size_type v94 = 0;
            if (v50)
            {
              *(void *)(v32 + 56) = v50;
              operator delete(v50);
              *(void *)(v32 + 48) = 0;
              *(void *)(v32 + 56) = 0;
              *(void *)(v32 + 64) = 0;
            }
            *(_OWORD *)(v32 + 48) = *(_OWORD *)&v94[8];
            *(void *)(v32 + 64) = *(void *)&v94[24];
            memset(&v94[8], 0, 24);
            *(void *)(v32 + 72) = v95;
            goto LABEL_276;
          default:
            goto LABEL_280;
        }
      case 9:
        double v11 = *(double *)a2;
        size_t v12 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v104[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_216;
          case 2:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v10 = v104[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v102, v12);
LABEL_219:
            uint64_t v36 = v10 + 8;
            if (*(char *)(v10 + 31) < 0) {
              operator delete(*(void **)v36);
            }
            long long v37 = v92;
            uint64_t v38 = v93;
LABEL_222:
            *(void *)(v36 + 16) = v38;
            *(_OWORD *)uint64_t v36 = v37;
            goto LABEL_217;
          case 3:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v19 = (char *)(v104[0] + 8);
            if (*(void *)(*(void *)&v11 + 72)) {
              goto LABEL_229;
            }
            atomic_ullong *volatile v21 = *(uint64_t **)(*(void *)&v11 + 24);
            atomic_ullong *volatile v20 = *(uint64_t **)(*(void *)&v11 + 32);
            uint64_t v22 = *(void **)(*(void *)&v11 + 8);
            if (v20 == v21 || v22 == 0)
            {
              uint64_t v53 = 0;
            }
            else
            {
              uint64_t v53 = 1;
              do
              {
                uint64_t v54 = *v21++;
                v53 *= v54;
              }
              while (v21 != v20);
            }
            if (v53 == (uint64_t)(v22[1] - *v22) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v12) == (uint64_t)(*(void *)(*v12 + 8)
                                                                                       - *(void *)*v12) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v12)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              }
              uint64_t v16 = (char *)*v12;
              if (v19 != v16)
              {
                unsigned int v29 = (uint64_t *)(v16 + 8);
                goto LABEL_72;
              }
            }
            else
            {
LABEL_229:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v12)) {
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              }
              if (turi::flexible_type_impl::ndarray<double>::is_full(v12))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v92, (uint64_t)v12);
              }
              else
              {
                long long v102 = 0uLL;
                uint64_t v103 = 0;
                uint64_t v99 = 0;
                uint64_t v100 = 0;
                uint64_t v101 = 0;
                unint64_t v96 = 0;
                std::string::size_type v97 = 0;
                uint64_t v98 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v92, (uint64_t)&v102, (uint64_t)&v99, (uint64_t)&v96, 0);
                if (v96)
                {
                  std::string::size_type v97 = v96;
                  operator delete(v96);
                }
                if (v99)
                {
                  uint64_t v100 = v99;
                  operator delete(v99);
                }
                if ((void)v102)
                {
                  *((void *)&v102 + 1) = v102;
                  operator delete((void *)v102);
                }
                uint64_t v95 = 0;
                if (&v92 != (long long *)(*(void *)&v11 + 8)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v93, *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                }
                size_t v56 = *(uint64_t **)(*(void *)&v11 + 24);
                uint64_t v55 = *(uint64_t **)(*(void *)&v11 + 32);
                if (v55 == v56 || !*v12)
                {
                  unint64_t v57 = 0;
                }
                else
                {
                  unint64_t v57 = 1;
                  do
                  {
                    uint64_t v58 = *v56++;
                    v57 *= v58;
                  }
                  while (v56 != v55);
                }
                std::vector<double>::resize(v92, v57);
                std::vector<unsigned long>::resize((uint64_t)&v94[8], (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                if (*((void *)&v93 + 1) != (void)v93 && *(void *)(v92 + 8) != *(void *)v92)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v102, (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
                  uint64_t v59 = *(void *)(*(void *)&v11 + 48);
                  uint64_t v60 = *(void *)(*(void *)&v11 + 56);
                  uint64_t v61 = (unint64_t *)v102;
                  uint64_t v62 = v60 - v59;
                  if (v60 != v59)
                  {
                    uint64_t v63 = 0;
                    unint64_t v64 = v62 >> 3;
                    if (v64 <= 1) {
                      unint64_t v64 = 1;
                    }
                    uint64_t v65 = (void *)(v102 + 8);
                    do
                    {
                      *(v65 - 1) = *(void *)(v59 + 8 * v63);
                      *uint64_t v65 = v63++;
                      v65 += 2;
                    }
                    while (v64 != v63);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v102 + 1), *((unint64_t **)&v102 + 1), (uint64_t)v61, v61);
                  uint64_t v66 = v102;
                  uint64_t v67 = *(void *)&v94[8];
                  *(void *)(*(void *)&v94[8] + 8 * *(void *)(v102 + 8)) = 1;
                  uint64_t v68 = *(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48);
                  if ((unint64_t)v68 >= 9)
                  {
                    unint64_t v69 = v68 >> 3;
                    uint64_t v70 = v93;
                    if (v69 <= 2) {
                      unint64_t v69 = 2;
                    }
                    uint64_t v71 = (uint64_t *)(v66 + 24);
                    unint64_t v72 = v69 - 1;
                    do
                    {
                      uint64_t v73 = *(void *)(v70 + 8 * *(v71 - 2)) * *(void *)(v67 + 8 * *(v71 - 2));
                      uint64_t v74 = *v71;
                      v71 += 2;
                      *(void *)(v67 + 8 * v74) = v73;
                      --v72;
                    }
                    while (v72);
                  }
                  unint64_t v75 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3;
                  unint64_t v96 = 0;
                  std::vector<unsigned long>::vector(&v99, v75, &v96);
                  do
                  {
                    int64_t v76 = v99;
                    if (v100 == v99)
                    {
                      uint64_t v85 = 0;
                      uint64_t v86 = *(void *)(**(void **)(*(void *)&v11 + 8) + 8 * *(void *)(*(void *)&v11 + 72));
                      std::string::size_type v87 = (void *)v92;
                    }
                    else
                    {
                      uint64_t v77 = 0;
                      unint64_t v78 = v100 - v99;
                      size_t v79 = *(uint64_t **)(*(void *)&v11 + 48);
                      if (v78 <= 1) {
                        unint64_t v78 = 1;
                      }
                      atomic_ullong *volatile v80 = v99;
                      unint64_t v81 = v78;
                      do
                      {
                        uint64_t v83 = (uint64_t)*v80++;
                        uint64_t v82 = v83;
                        uint64_t v84 = *v79++;
                        v77 += v84 * v82;
                        --v81;
                      }
                      while (v81);
                      uint64_t v85 = 0;
                      uint64_t v86 = *(void *)(**(void **)(*(void *)&v11 + 8)
                                      + 8 * (*(void *)(*(void *)&v11 + 72) + v77));
                      std::string::size_type v87 = (void *)v92;
                      uint64_t v88 = *(uint64_t **)&v94[8];
                      do
                      {
                        uint64_t v90 = (uint64_t)*v76++;
                        uint64_t v89 = v90;
                        uint64_t v91 = *v88++;
                        v85 += v91 * v89;
                        --v78;
                      }
                      while (v78);
                    }
                    *(void *)(*v87 + 8 * v85) = v86;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v12, (uint64_t *)&v99));
                  if (v99)
                  {
                    uint64_t v100 = v99;
                    operator delete(v99);
                  }
                  if ((void)v102)
                  {
                    *((void *)&v102 + 1) = v102;
                    operator delete((void *)v102);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v92);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v92)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              }
              if (v19 != (char *)v92) {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v19, *(char **)v92, *(void *)(v92 + 8), (uint64_t)(*(void *)(v92 + 8) - *(void *)v92) >> 3);
              }
LABEL_276:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v92);
            }
            break;
          case 4:
            if (*(void *)v5 != 1) {
              operator new();
            }
            goto LABEL_216;
          case 5:
            if (*(void *)v5 != 1) {
              operator new();
            }
LABEL_216:
            turi::flexible_type_fail(0);
            goto LABEL_217;
          case 8:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v42 = v104[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v12, (turi::image_type *)&v92);
            long long v43 = v92;
            long long v92 = 0uLL;
            long long v44 = *(_OWORD *)(v42 + 8);
            *(_OWORD *)(v42 + 8) = v43;
            long long v102 = v44;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v102 + 1);
            long long v45 = v93;
            long long v46 = *(_OWORD *)v94;
            *(_OWORD *)(v42 + 56) = *(_OWORD *)&v94[16];
            *(_OWORD *)(v42 + 40) = v46;
            *(_OWORD *)(v42 + 24) = v45;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v92 + 1);
            goto LABEL_217;
          case 9:
            if (*(void *)v5 != 1) {
              operator new();
            }
            uint64_t v30 = v104[0];
            std::shared_ptr<std::vector<double>>::operator=[abi:ne180100]((void *)(v104[0] + 8), v12);
            if (v30 != *(void *)&v11)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v30 + 24), *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v30 + 48), *(char **)(*(void *)&v11 + 48), *(void *)(*(void *)&v11 + 56), (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
            }
            *(void *)(v30 + 72) = *(void *)(*(void *)&v11 + 72);
            goto LABEL_217;
          default:
            goto LABEL_280;
        }
        break;
      default:
LABEL_280:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_217:
  *(void *)(a3 + 5) = *(void *)((char *)v104 + 5);
  *(void *)a3 = v104[0];
  *(unsigned char *)(a3 + 12) = BYTE4(v104[1]);
}

void sub_2241763DC()
{
  __cxa_end_catch();
  switch(*(unsigned char *)(v0 - 92))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v1 = *(void *)(v0 - 104);
      if (!v1) {
        goto LABEL_27;
      }
      if (*(char *)(v1 + 31) < 0) {
        operator delete(*(void **)(v1 + 8));
      }
      uint64_t v2 = (void *)v1;
      uint64_t v3 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v4 = *(void **)(v0 - 104);
      if (!v4) {
        goto LABEL_27;
      }
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        v4[2] = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
      uint64_t v3 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v6 = *(void **)(v0 - 104);
      if (!v6) {
        goto LABEL_27;
      }
      *(void *)(v0 - 112) = v6 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 112));
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v6 = *(void **)(v0 - 104);
      if (!v6) {
        goto LABEL_27;
      }
      *(void *)(v0 - 112) = v6 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 112));
LABEL_18:
      uint64_t v2 = v6;
      uint64_t v3 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v7 = *(void *)(v0 - 104);
      if (!v7) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v7 + 16));
      uint64_t v2 = (void *)v7;
      unsigned int v8 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v9 = *(void **)(v0 - 104);
      if (!v9) {
        goto LABEL_27;
      }
      uint64_t v2 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v9);
      unsigned int v8 = 2071181815;
LABEL_25:
      uint64_t v3 = v8 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v2, v3);
LABEL_27:
      JUMPOUT(0x224176174);
    default:
      goto LABEL_27;
  }
}

void *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DA00;
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DA00;
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26D76DA00;
  std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DA00;
  return std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = *(unsigned char *)a2;
  *(void *)(result + 8) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(result + 8);
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  if (a2 == result)
  {
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(unsigned char *)(result + 44) = 0;
  }
  else
  {
    uint64_t v3 = *(atomic_ullong **)(a2 + 8);
    *(void *)(result + 13) = *(void *)(a2 + 13);
    *uint64_t v2 = v3;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 20);
    *(unsigned char *)(result + 20) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
    char v5 = *(unsigned char *)(a2 + 24);
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 24) = v5;
    *(_DWORD *)(result + 40) = 0;
    *(unsigned char *)(result + 44) = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(result + 37) = *(void *)(a2 + 37);
    *(void *)(result + 32) = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a2 + 44);
    *(unsigned char *)(result + 44) = v6;
    switch((int)v6)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)(result + 32), 1uLL);
        break;
      default:
        return result;
    }
  }
  return result;
}

void turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  unsigned int v7 = *(unsigned __int8 *)(a2 + 12);
  if (v7 == 3)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (a2 != a3)
    {
      *(void *)(a3 + 5) = *(void *)(a2 + 5);
      *(void *)a3 = *(void *)a2;
      *(unsigned char *)(a3 + 12) = 3;
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v9 = 1;
      switch(*(unsigned char *)(a3 + 12))
      {
        case 3:
          uint64_t v10 = (void *)(*(void *)a3 + 8);
          double v11 = (void *)(*(void *)a3 + 16);
          char v12 = 3;
          goto LABEL_12;
        case 4:
          uint64_t v10 = (void *)(*(void *)a3 + 8);
          double v11 = (void *)(*(void *)a3 + 16);
          char v12 = 4;
          goto LABEL_12;
        case 5:
          uint64_t v10 = (void *)(*(void *)a3 + 8);
          double v11 = (void *)(*(void *)a3 + 16);
          char v12 = 5;
LABEL_12:
          unint64_t v9 = (uint64_t)(*v11 - *v10) >> v12;
          break;
        case 9:
          long long v14 = *(uint64_t **)(*(void *)a3 + 24);
          double v13 = *(uint64_t **)(*(void *)a3 + 32);
          if (v13 == v14)
          {
            unint64_t v9 = 0;
          }
          else
          {
            unint64_t v9 = *(void *)(*(void *)a3 + 8);
            if (v9)
            {
              unint64_t v9 = 1;
              do
              {
                uint64_t v15 = *v14++;
                v9 *= v15;
              }
              while (v14 != v13);
            }
          }
          break;
        default:
          break;
      }
      if (i >= v9) {
        break;
      }
      if (*(unsigned char *)a1)
      {
        switch(*(unsigned char *)(a3 + 12))
        {
          case 2:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          case 3:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          case 4:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          case 5:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          case 8:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          case 9:
            if (**(void **)a3 != 1) {
              operator new();
            }
            return;
          default:
            break;
        }
        int v16 = *(unsigned __int8 *)(a3 + 12);
        if (v16 == 1)
        {
          atomic_ullong *volatile v20 = (void *)a3;
          if (i) {
            goto LABEL_469;
          }
        }
        else
        {
          if (v16 == 9)
          {
            atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
            double v17 = (void *)v19[1];
            unint64_t v18 = v19[9] + i;
          }
          else
          {
            if (v16 != 3) {
              goto LABEL_469;
            }
            double v17 = (void *)(*(void *)a3 + 8);
            unint64_t v18 = i;
          }
          atomic_ullong *volatile v20 = (void *)(*v17 + 8 * v18);
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        __p.__r_.__value_.__s.__data_[12] = 0;
        turi::flexible_type::operator=<double>((uint64_t)&__p, v20);
        switch(__p.__r_.__value_.__s.__data_[12])
        {
          case 0:
            switch(*(unsigned char *)(a1 + 20))
            {
              case 0:
                BOOL v58 = *(void *)(a1 + 8) <= (int64_t)__p.__r_.__value_.__r.__words[0];
                goto LABEL_303;
              case 1:
                double v121 = *(double *)(a1 + 8);
                double data = (double)(uint64_t)__p.__r_.__value_.__l.__data_;
                goto LABEL_302;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_43;
              case 6:
                BOOL v22 = (int64_t)__p.__r_.__value_.__r.__words[0] < (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
                goto LABEL_44;
              default:
                goto LABEL_469;
            }
          case 1:
            switch(*(unsigned char *)(a1 + 20))
            {
              case 0:
                BOOL v59 = *(double *)&__p.__r_.__value_.__l.__data_ < (double)*(uint64_t *)(a1 + 8);
                goto LABEL_307;
              case 1:
                double v121 = *(double *)(a1 + 8);
                double data = *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_302:
                BOOL v58 = v121 <= data;
                goto LABEL_303;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_43;
              case 6:
                BOOL v58 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8) <= *(double *)&__p.__r_.__value_.__l.__data_;
                goto LABEL_303;
              default:
                goto LABEL_469;
            }
          case 2:
            unsigned int v38 = *(unsigned __int8 *)(a1 + 20);
            if (v38 - 3 < 7 || v38 < 2) {
              goto LABEL_43;
            }
            if (v38 != 2) {
              goto LABEL_469;
            }
            uint64_t v39 = *(void *)(a1 + 8);
            uint64_t v42 = *(const void **)(v39 + 8);
            uint64_t v40 = v39 + 8;
            int v41 = v42;
            int v43 = *(char *)(v40 + 23);
            int v44 = *(char *)(__p.__r_.__value_.__r.__words[0] + 31);
            if (v44 >= 0) {
              size_t v45 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 31);
            }
            else {
              size_t v45 = *(void *)(__p.__r_.__value_.__r.__words[0] + 16);
            }
            if (v44 >= 0) {
              long long v46 = (const void *)(__p.__r_.__value_.__r.__words[0] + 8);
            }
            else {
              long long v46 = *(const void **)(__p.__r_.__value_.__r.__words[0] + 8);
            }
            if (v43 >= 0) {
              size_t v47 = *(unsigned __int8 *)(v40 + 23);
            }
            else {
              size_t v47 = *(void *)(v40 + 8);
            }
            if (v43 >= 0) {
              unint64_t v48 = (const void *)v40;
            }
            else {
              unint64_t v48 = v41;
            }
            if (v47 >= v45) {
              size_t v49 = v45;
            }
            else {
              size_t v49 = v47;
            }
            int v50 = memcmp(v46, v48, v49);
            if (v50) {
              BOOL v22 = v50 < 0;
            }
            else {
              BOOL v22 = v45 < v47;
            }
            goto LABEL_44;
          case 3:
            unsigned int v51 = *(unsigned __int8 *)(a1 + 20);
            if (v51 > 9) {
              goto LABEL_469;
            }
            if (v51 != 3) {
              goto LABEL_43;
            }
            int v52 = *(double **)(*(void *)(a1 + 8) + 8);
            uint64_t v53 = *(double **)(__p.__r_.__value_.__r.__words[0] + 8);
            unint64_t v54 = (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 16) - (void)v53) >> 3;
            unint64_t v55 = (uint64_t)(*(void *)(*(void *)(a1 + 8) + 16) - (void)v52) >> 3;
            if (*(double **)(*(void *)(a1 + 8) + 16) == v52) {
              goto LABEL_118;
            }
            if (v55 <= 1) {
              uint64_t v56 = 1;
            }
            else {
              uint64_t v56 = (uint64_t)(*(void *)(*(void *)(a1 + 8) + 16) - (void)v52) >> 3;
            }
            uint64_t v57 = (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 16) - (void)v53) >> 3;
            break;
          case 4:
            unsigned int v37 = *(unsigned __int8 *)(a1 + 20);
            if (v37 > 9) {
              goto LABEL_469;
            }
            if (v37 == 4)
            {
              BOOL v22 = turi::flexible_type_impl::gt_operator::operator()(v21, (uint64_t)&__idx, (uint64_t *)(*(void *)(a1 + 8) + 8), (void *)(__p.__r_.__value_.__r.__words[0] + 8));
            }
            else
            {
LABEL_43:
              turi::flexible_type_fail(0);
              BOOL v22 = 0;
            }
            goto LABEL_44;
          case 5:
          case 7:
          case 8:
          case 9:
            if (*(unsigned __int8 *)(a1 + 20) < 0xAu) {
              goto LABEL_43;
            }
            goto LABEL_469;
          case 6:
            switch(*(unsigned char *)(a1 + 20))
            {
              case 0:
                BOOL v58 = *(void *)(a1 + 8) <= (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8;
                goto LABEL_303;
              case 1:
                BOOL v59 = (double)SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000.0
                    + (double)((uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) < *(double *)(a1 + 8);
LABEL_307:
                BOOL v22 = v59;
                goto LABEL_44;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_43;
              case 6:
                uint64_t v123 = (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
                if (v123 > (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) {
                  goto LABEL_300;
                }
                if (v123 != (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) {
                  goto LABEL_326;
                }
                BOOL v58 = *(_DWORD *)(a1 + 16) <= SLODWORD(__p.__r_.__value_.__r.__words[1]);
LABEL_303:
                BOOL v22 = !v58;
                break;
              default:
                goto LABEL_469;
            }
            goto LABEL_44;
          default:
            goto LABEL_469;
        }
        while (1)
        {
          if (!v57 || *v52 > *v53)
          {
LABEL_300:
            BOOL v22 = 1;
            goto LABEL_44;
          }
          if (*v52 < *v53) {
            break;
          }
          --v57;
          ++v52;
          ++v53;
          if (!--v56)
          {
LABEL_118:
            BOOL v22 = v55 > v54;
            goto LABEL_44;
          }
        }
LABEL_326:
        BOOL v22 = 0;
LABEL_44:
        switch(__p.__r_.__value_.__s.__data_[12])
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0) {
                  operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
                }
                uint64_t v24 = (void *)v23;
                uint64_t v25 = 0x1012C404EF22A49;
                goto LABEL_75;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                uint64_t v33 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
                if (v33)
                {
                  *(void *)(__p.__r_.__value_.__r.__words[0] + 16) = v33;
                  operator delete(v33);
                }
                uint64_t v24 = (void *)v32;
                uint64_t v25 = 0x1080C409938AC02;
                goto LABEL_75;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                unsigned __int8 v169 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v169);
                goto LABEL_70;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                unsigned __int8 v169 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v169);
LABEL_70:
                uint64_t v24 = (void *)v26;
                uint64_t v25 = 0x1020C405E66F15BLL;
                goto LABEL_75;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(__p.__r_.__value_.__r.__words[0] + 16));
                uint64_t v24 = (void *)v34;
                unsigned int v31 = -235920773;
                goto LABEL_74;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v27 = (void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                atomic_ullong *volatile v28 = *(void **)(__p.__r_.__value_.__r.__words[0] + 48);
                if (v28)
                {
                  *(void *)(__p.__r_.__value_.__r.__words[0] + 56) = v28;
                  operator delete(v28);
                }
                unsigned int v29 = (void *)v27[3];
                if (v29)
                {
                  v27[4] = v29;
                  operator delete(v29);
                }
                uint64_t v30 = (std::__shared_weak_count *)v27[2];
                if (v30) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
                uint64_t v24 = v27;
                unsigned int v31 = 2071181815;
LABEL_74:
                uint64_t v25 = v31 | 0x1030C4000000000;
LABEL_75:
                MEMORY[0x22A614FA0](v24, v25);
              }
            }
            break;
          default:
            break;
        }
        if (v22)
        {
          double v35 = 0.0;
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              double v35 = (double)*(uint64_t *)(a1 + 8);
              goto LABEL_254;
            case 1:
              double v35 = *(double *)(a1 + 8);
              goto LABEL_254;
            case 2:
              uint64_t v61 = *(void *)(a1 + 8);
              size_t __idx = 0;
              uint64_t v62 = (char *)(v61 + 8);
              if (*(char *)(v61 + 31) < 0) {
                uint64_t v62 = *(char **)(v61 + 8);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, v62);
              double v63 = std::stod(&__p, &__idx);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v61 + 31) < 0) {
                uint64_t v64 = *(void *)(v61 + 16);
              }
              else {
                uint64_t v64 = *(unsigned __int8 *)(v61 + 31);
              }
              if (__idx != v64)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v164 = std::string::append(&v174, " cannot be interpreted as a float");
                long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v165;
                v164->__r_.__value_.__l.__size_ = 0;
                v164->__r_.__value_.__r.__words[2] = 0;
                v164->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &__p);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              float v114 = v63;
              double v35 = v114;
              goto LABEL_254;
            case 3:
              uint64_t v60 = *(void *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v60 + 8), *(void *)(v60 + 16), (uint64_t)(*(void *)(v60 + 16) - *(void *)(v60 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_254;
            case 4:
              uint64_t v65 = *(void *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v65 + 8), *(uint64_t **)(v65 + 16), (uint64_t)(*(void *)(v65 + 16) - *(void *)(v65 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
              goto LABEL_254;
            case 5:
              uint64_t v66 = *(void *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(void *)(v66 + 16) - *(void *)(v66 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
              goto LABEL_254;
            case 6:
              double v35 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8);
              goto LABEL_254;
            case 7:
              goto LABEL_254;
            case 8:
              uint64_t v67 = *(void *)(a1 + 8);
              uint64_t v68 = *(atomic_uint **)(v67 + 16);
              unsigned __int8 v169 = *(void ***)(v67 + 8);
              double v170 = v68;
              if (v68) {
                atomic_fetch_add_explicit(v68 + 2, 1u, memory_order_relaxed);
              }
              long long v69 = *(_OWORD *)(v67 + 24);
              long long v70 = *(_OWORD *)(v67 + 56);
              long long v172 = *(_OWORD *)(v67 + 40);
              long long v173 = v70;
              long long v171 = v69;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v170);
              goto LABEL_254;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(a1 + 8) + 8);
              turi::flexible_type_fail(0);
              if (v178)
              {
                uint64_t v179 = v178;
                operator delete(v178);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v177 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              if (__p.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
LABEL_254:
              int v115 = *(unsigned __int8 *)(a3 + 12);
              switch(*(unsigned char *)(a3 + 12))
              {
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_469;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_289;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_469;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_469;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_469;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_292;
                default:
                  if (v115 == 1) {
                    goto LABEL_290;
                  }
                  if (v115 == 9) {
                    goto LABEL_292;
                  }
                  goto LABEL_288;
              }
            default:
              break;
          }
LABEL_469:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
        }
      }
      if (*(unsigned char *)(a1 + 24))
      {
        int v36 = *(unsigned __int8 *)(a3 + 12);
        switch(*(unsigned char *)(a3 + 12))
        {
          case 2:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 3:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_159;
          case 4:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 5:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 8:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 9:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_160;
          default:
            if (v36 == 1)
            {
              uint64_t v74 = (void *)a3;
              if (i) {
                goto LABEL_469;
              }
            }
            else
            {
              if (v36 == 9)
              {
LABEL_160:
                atomic_ullong *volatile v73 = *(atomic_ullong *volatile *)a3;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
                uint64_t v71 = (void *)v73[1];
                unint64_t v72 = v73[9] + i;
              }
              else
              {
                if (v36 != 3) {
                  goto LABEL_469;
                }
LABEL_159:
                uint64_t v71 = (void *)(*(void *)a3 + 8);
                unint64_t v72 = i;
              }
              uint64_t v74 = (void *)(*v71 + 8 * v72);
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            __p.__r_.__value_.__s.__data_[12] = 0;
            turi::flexible_type::operator=<double>((uint64_t)&__p, v74);
            switch(__p.__r_.__value_.__s.__data_[12])
            {
              case 0:
                switch(*(unsigned char *)(a1 + 44))
                {
                  case 0:
                    BOOL v101 = *(void *)(a1 + 32) < (int64_t)__p.__r_.__value_.__r.__words[0];
                    goto LABEL_227;
                  case 1:
                    double v124 = *(double *)(a1 + 32);
                    double v125 = (double)(uint64_t)__p.__r_.__value_.__l.__data_;
                    goto LABEL_316;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_165;
                  case 6:
                    BOOL v102 = (int64_t)__p.__r_.__value_.__r.__words[0] <= (uint64_t)(*(void *)(a1 + 32) << 8) >> 8;
                    goto LABEL_321;
                  default:
                    goto LABEL_469;
                }
              case 1:
                switch(*(unsigned char *)(a1 + 44))
                {
                  case 0:
                    BOOL v102 = *(double *)&__p.__r_.__value_.__l.__data_ <= (double)*(uint64_t *)(a1 + 32);
                    goto LABEL_321;
                  case 1:
                    double v124 = *(double *)(a1 + 32);
                    double v125 = *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_316:
                    BOOL v126 = v124 < v125;
                    goto LABEL_317;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_165;
                  case 6:
                    BOOL v126 = (double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 32) << 8) >> 8) < *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_317:
                    BOOL v76 = v126;
                    goto LABEL_166;
                  default:
                    goto LABEL_469;
                }
              case 2:
                unsigned int v90 = *(unsigned __int8 *)(a1 + 44);
                if (v90 - 3 < 7 || v90 < 2) {
                  goto LABEL_165;
                }
                if (v90 != 2) {
                  goto LABEL_469;
                }
                uint64_t v91 = *(void *)(a1 + 32);
                if (*(char *)(v91 + 31) < 0)
                {
                  long long v92 = *(const void **)(v91 + 8);
                  size_t v93 = *(void *)(v91 + 16);
                }
                else
                {
                  long long v92 = (const void *)(v91 + 8);
                  size_t v93 = *(unsigned __int8 *)(v91 + 31);
                }
                int v128 = *(char *)(__p.__r_.__value_.__r.__words[0] + 31);
                if (v128 >= 0) {
                  size_t v129 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 31);
                }
                else {
                  size_t v129 = *(void *)(__p.__r_.__value_.__r.__words[0] + 16);
                }
                if (v128 >= 0) {
                  double v130 = (const void *)(__p.__r_.__value_.__r.__words[0] + 8);
                }
                else {
                  double v130 = *(const void **)(__p.__r_.__value_.__r.__words[0] + 8);
                }
                if (v129 >= v93) {
                  size_t v131 = v93;
                }
                else {
                  size_t v131 = v129;
                }
                int v132 = memcmp(v92, v130, v131);
                if (v132) {
                  BOOL v76 = v132 < 0;
                }
                else {
                  BOOL v76 = v93 < v129;
                }
                goto LABEL_166;
              case 3:
                unsigned int v94 = *(unsigned __int8 *)(a1 + 44);
                if (v94 > 9) {
                  goto LABEL_469;
                }
                if (v94 != 3) {
                  goto LABEL_165;
                }
                uint64_t v95 = *(double **)(*(void *)(a1 + 32) + 8);
                unint64_t v96 = *(double **)(__p.__r_.__value_.__r.__words[0] + 8);
                unint64_t v97 = (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 16) - (void)v96) >> 3;
                unint64_t v98 = (uint64_t)(*(void *)(*(void *)(a1 + 32) + 16) - (void)v95) >> 3;
                if (*(double **)(*(void *)(a1 + 32) + 16) == v95) {
                  goto LABEL_220;
                }
                if (v98 <= 1) {
                  uint64_t v99 = 1;
                }
                else {
                  uint64_t v99 = (uint64_t)(*(void *)(*(void *)(a1 + 32) + 16) - (void)v95) >> 3;
                }
                uint64_t v100 = (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 16) - (void)v96) >> 3;
                break;
              case 4:
                unsigned int v89 = *(unsigned __int8 *)(a1 + 44);
                if (v89 > 9) {
                  goto LABEL_469;
                }
                if (v89 == 4)
                {
                  BOOL v76 = turi::flexible_type_impl::lt_operator::operator()(v75, (uint64_t)&__idx, (uint64_t *)(*(void *)(a1 + 32) + 8), (void *)(__p.__r_.__value_.__r.__words[0] + 8));
                }
                else
                {
LABEL_165:
                  turi::flexible_type_fail(0);
                  BOOL v76 = 0;
                }
                goto LABEL_166;
              case 5:
              case 7:
              case 8:
              case 9:
                if (*(unsigned __int8 *)(a1 + 44) < 0xAu) {
                  goto LABEL_165;
                }
                goto LABEL_469;
              case 6:
                switch(*(unsigned char *)(a1 + 44))
                {
                  case 0:
                    BOOL v101 = *(void *)(a1 + 32) < (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8;
                    goto LABEL_227;
                  case 1:
                    BOOL v102 = (double)SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000.0
                         + (double)((uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) <= *(double *)(a1 + 32);
LABEL_321:
                    BOOL v76 = !v102;
                    goto LABEL_166;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_165;
                  case 6:
                    uint64_t v127 = (uint64_t)(*(void *)(a1 + 32) << 8) >> 8;
                    if (v127 < (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) {
                      goto LABEL_314;
                    }
                    if (v127 != (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) {
                      goto LABEL_329;
                    }
                    BOOL v101 = *(_DWORD *)(a1 + 40) < SLODWORD(__p.__r_.__value_.__r.__words[1]);
LABEL_227:
                    BOOL v76 = v101;
                    break;
                  default:
                    goto LABEL_469;
                }
                goto LABEL_166;
              default:
                goto LABEL_469;
            }
            while (v100 && *v95 <= *v96)
            {
              if (*v95 < *v96)
              {
LABEL_314:
                BOOL v76 = 1;
                goto LABEL_166;
              }
              --v100;
              ++v95;
              ++v96;
              if (!--v99)
              {
LABEL_220:
                BOOL v76 = v98 < v97;
                goto LABEL_166;
              }
            }
LABEL_329:
            BOOL v76 = 0;
LABEL_166:
            switch(__p.__r_.__value_.__s.__data_[12])
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0) {
                      operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
                    }
                    unint64_t v78 = (void *)v77;
                    uint64_t v79 = 0x1012C404EF22A49;
                    goto LABEL_197;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  std::string::size_type v86 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    std::string::size_type v87 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    if (v87)
                    {
                      *(void *)(__p.__r_.__value_.__r.__words[0] + 16) = v87;
                      operator delete(v87);
                    }
                    unint64_t v78 = (void *)v86;
                    uint64_t v79 = 0x1080C409938AC02;
                    goto LABEL_197;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  std::string::size_type v80 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    unsigned __int8 v169 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v169);
                    goto LABEL_192;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  std::string::size_type v80 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    unsigned __int8 v169 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v169);
LABEL_192:
                    unint64_t v78 = (void *)v80;
                    uint64_t v79 = 0x1020C405E66F15BLL;
                    goto LABEL_197;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  std::string::size_type v88 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(__p.__r_.__value_.__r.__words[0] + 16));
                    unint64_t v78 = (void *)v88;
                    unsigned int v85 = -235920773;
                    goto LABEL_196;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  unint64_t v81 = (void *)__p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    uint64_t v82 = *(void **)(__p.__r_.__value_.__r.__words[0] + 48);
                    if (v82)
                    {
                      *(void *)(__p.__r_.__value_.__r.__words[0] + 56) = v82;
                      operator delete(v82);
                    }
                    uint64_t v83 = (void *)v81[3];
                    if (v83)
                    {
                      v81[4] = v83;
                      operator delete(v83);
                    }
                    uint64_t v84 = (std::__shared_weak_count *)v81[2];
                    if (v84) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                    }
                    unint64_t v78 = v81;
                    unsigned int v85 = 2071181815;
LABEL_196:
                    uint64_t v79 = v85 | 0x1030C4000000000;
LABEL_197:
                    MEMORY[0x22A614FA0](v78, v79);
                  }
                }
                break;
              default:
                break;
            }
            if (!v76) {
              continue;
            }
            double v35 = 0.0;
            switch(*(unsigned char *)(a1 + 44))
            {
              case 0:
                double v35 = (double)*(uint64_t *)(a1 + 32);
                goto LABEL_273;
              case 1:
                double v35 = *(double *)(a1 + 32);
                goto LABEL_273;
              case 2:
                uint64_t v104 = *(void *)(a1 + 32);
                size_t __idx = 0;
                int64_t v105 = (char *)(v104 + 8);
                if (*(char *)(v104 + 31) < 0) {
                  int64_t v105 = *(char **)(v104 + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v105);
                double v106 = std::stod(&__p, &__idx);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v104 + 31) < 0) {
                  uint64_t v107 = *(void *)(v104 + 16);
                }
                else {
                  uint64_t v107 = *(unsigned __int8 *)(v104 + 31);
                }
                if (__idx != v107)
                {
                  uint64_t v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  unint64_t v167 = std::string::append(&v174, " cannot be interpreted as a float");
                  long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v168;
                  v167->__r_.__value_.__l.__size_ = 0;
                  v167->__r_.__value_.__r.__words[2] = 0;
                  v167->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v166, &__p);
                  __cxa_throw(v166, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                float v116 = v106;
                double v35 = v116;
                goto LABEL_273;
              case 3:
                uint64_t v103 = *(void *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v103 + 8), *(void *)(v103 + 16), (uint64_t)(*(void *)(v103 + 16) - *(void *)(v103 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_273;
              case 4:
                uint64_t v108 = *(void *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v108 + 8), *(uint64_t **)(v108 + 16), (uint64_t)(*(void *)(v108 + 16) - *(void *)(v108 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
                goto LABEL_273;
              case 5:
                uint64_t v109 = *(void *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v109 + 8), *(uint64_t **)(v109 + 16), (uint64_t)(*(void *)(v109 + 16) - *(void *)(v109 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
                goto LABEL_273;
              case 6:
                double v35 = (double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 32) << 8) >> 8);
                goto LABEL_273;
              case 7:
                goto LABEL_273;
              case 8:
                uint64_t v110 = *(void *)(a1 + 32);
                uint64_t v111 = *(atomic_uint **)(v110 + 16);
                unsigned __int8 v169 = *(void ***)(v110 + 8);
                double v170 = v111;
                if (v111) {
                  atomic_fetch_add_explicit(v111 + 2, 1u, memory_order_relaxed);
                }
                long long v112 = *(_OWORD *)(v110 + 24);
                long long v113 = *(_OWORD *)(v110 + 56);
                long long v172 = *(_OWORD *)(v110 + 40);
                long long v173 = v113;
                long long v171 = v112;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v170);
                goto LABEL_273;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(a1 + 32) + 8);
                turi::flexible_type_fail(0);
                if (v178)
                {
                  uint64_t v179 = v178;
                  operator delete(v178);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v177 = __p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
                break;
              default:
                goto LABEL_469;
            }
            break;
        }
LABEL_273:
        int v115 = *(unsigned __int8 *)(a3 + 12);
        switch(*(unsigned char *)(a3 + 12))
        {
          case 2:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 3:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_289;
          case 4:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 5:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 8:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_469;
          case 9:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_292;
          default:
            if (v115 == 1)
            {
LABEL_290:
              unint64_t v119 = (double *)a3;
              if (i) {
                goto LABEL_469;
              }
            }
            else
            {
              if (v115 == 9)
              {
LABEL_292:
                atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)a3;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
                atomic_ullong v117 = (void *)v120[1];
                unint64_t v118 = v120[9] + i;
              }
              else
              {
LABEL_288:
                if (v115 != 3) {
                  goto LABEL_469;
                }
LABEL_289:
                atomic_ullong v117 = (void *)(*(void *)a3 + 8);
                unint64_t v118 = i;
              }
              unint64_t v119 = (double *)(*v117 + 8 * v118);
            }
            *unint64_t v119 = v35;
            break;
        }
      }
    }
  }
  else if (v7 == 7)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (a2 != a3)
    {
      *(void *)(a3 + 5) = *(void *)(a2 + 5);
      *(void *)a3 = *(void *)a2;
      *(unsigned char *)(a3 + 12) = 7;
    }
  }
  else if (*(unsigned char *)a1)
  {
    std::string::size_type v133 = (double *)(a1 + 8);
    switch(*(unsigned char *)(a1 + 20))
    {
      case 0:
        switch(*(unsigned char *)(a2 + 12))
        {
          case 0:
            if (*(void *)a2 < *(void *)v133) {
              goto LABEL_452;
            }
            goto LABEL_393;
          case 1:
            a4.n128_u64[0] = *(void *)a2;
            double v156 = (double)*(uint64_t *)v133;
            goto LABEL_449;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_392;
          case 6:
            if (*(void *)v133 > (uint64_t)(*(void *)a2 << 8) >> 8) {
              goto LABEL_452;
            }
            goto LABEL_393;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(*(unsigned char *)(a2 + 12))
        {
          case 0:
            a4.n128_f64[0] = *v133;
            if (*v133 > (double)*(uint64_t *)a2) {
              goto LABEL_452;
            }
            goto LABEL_393;
          case 1:
            a4.n128_u64[0] = *(void *)a2;
            double v156 = *v133;
LABEL_449:
            if (a4.n128_f64[0] < v156) {
              goto LABEL_452;
            }
            goto LABEL_393;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_392;
          case 6:
            a4.n128_f64[0] = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
            if (a4.n128_f64[0] < *v133) {
              goto LABEL_452;
            }
            goto LABEL_393;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        if (v7 > 9) {
          goto LABEL_480;
        }
        if (((1 << v7) & 0x373) != 0) {
          goto LABEL_392;
        }
        if (v7 != 2) {
LABEL_480:
        }
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        if ((std::string::compare[abi:ne180100]((const void **)(*(void *)a2 + 8), (unsigned char *)(*(void *)v133 + 8)) & 0x80000000) != 0) {
          goto LABEL_452;
        }
        goto LABEL_393;
      case 3:
        BOOL v58 = v7 > 9;
        int v136 = (1 << v7) & 0x377;
        if (v58 || v136 == 0) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_392;
      case 4:
        if (v7 > 9) {
          goto LABEL_479;
        }
        if (((1 << v7) & 0x367) != 0)
        {
LABEL_392:
          turi::flexible_type_fail(0);
          goto LABEL_393;
        }
        if (v7 != 4) {
LABEL_479:
        }
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        if (!turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&__p, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)v133 + 8)))goto LABEL_393; {
LABEL_452:
        }
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(unsigned char *)(a3 + 12) = 0;
        if (v133 != (double *)a3)
        {
          *(void *)(a3 + 5) = *(void *)(a1 + 13);
          *(double *)a3 = *v133;
          int v158 = *(unsigned __int8 *)(a1 + 20);
          *(unsigned char *)(a3 + 12) = v158;
          switch(v158)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              goto LABEL_437;
            default:
              return;
          }
        }
        break;
      case 5:
        BOOL v58 = v7 > 9;
        int v140 = (1 << v7) & 0x377;
        if (v58 || v140 == 0) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_392;
      case 6:
        switch(*(unsigned char *)(a2 + 12))
        {
          case 0:
            if (*(void *)a2 < (uint64_t)(*(void *)v133 << 8) >> 8) {
              goto LABEL_452;
            }
            goto LABEL_393;
          case 1:
            a4.n128_f64[0] = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8);
            if (a4.n128_f64[0] > *(double *)a2) {
              goto LABEL_452;
            }
            goto LABEL_393;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_392;
          case 6:
            uint64_t v157 = (uint64_t)(*(void *)a2 << 8) >> 8;
            if (v157 < (uint64_t)(*(void *)v133 << 8) >> 8
              || v157 == (uint64_t)(*(void *)v133 << 8) >> 8 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 16))
            {
              goto LABEL_452;
            }
            goto LABEL_393;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 7:
        BOOL v58 = v7 > 9;
        int v138 = (1 << v7) & 0x377;
        if (v58 || v138 == 0) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_392;
      case 8:
        BOOL v58 = v7 > 9;
        int v142 = (1 << v7) & 0x377;
        if (v58 || v142 == 0) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_392;
      case 9:
        BOOL v58 = v7 > 9;
        int v134 = (1 << v7) & 0x377;
        if (v58 || v134 == 0) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_392;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
  else
  {
LABEL_393:
    if (*(unsigned char *)(a1 + 24))
    {
      int64_t v144 = (double *)(a1 + 32);
      switch(*(unsigned char *)(a1 + 44))
      {
        case 0:
          switch(*(unsigned char *)(a2 + 12))
          {
            case 0:
              if (*(void *)a2 > *(void *)v144) {
                goto LABEL_467;
              }
              goto LABEL_435;
            case 1:
              double v159 = *(double *)a2;
              double v160 = (double)*(uint64_t *)v144;
              goto LABEL_464;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_434;
            case 6:
              if (*(void *)v144 < (uint64_t)(*(void *)a2 << 8) >> 8) {
                goto LABEL_467;
              }
              goto LABEL_435;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(a2 + 12))
          {
            case 0:
              if (*v144 < (double)*(uint64_t *)a2) {
                goto LABEL_467;
              }
              goto LABEL_435;
            case 1:
              double v159 = *(double *)a2;
              double v160 = *v144;
LABEL_464:
              if (v159 > v160) {
                goto LABEL_467;
              }
              goto LABEL_435;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_434;
            case 6:
              if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) > *v144) {
                goto LABEL_467;
              }
              goto LABEL_435;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v147 = *(unsigned __int8 *)(a2 + 12);
          if (v147 - 3 < 7 || v147 < 2) {
            goto LABEL_434;
          }
          if (v147 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          BOOL v146 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)v144 + 8), (void *)(*(void *)a2 + 8));
          goto LABEL_408;
        case 3:
          unsigned int v148 = *(unsigned __int8 *)(a2 + 12);
          if (v148 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v148 != 3) {
            goto LABEL_434;
          }
          uint64_t v149 = *(double **)(*(void *)a2 + 8);
          int64_t v150 = *(double **)(*(void *)v144 + 8);
          unint64_t v151 = (uint64_t)(*(void *)(*(void *)v144 + 16) - (void)v150) >> 3;
          unint64_t v152 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v149) >> 3;
          if (*(double **)(*(void *)a2 + 16) == v149) {
            goto LABEL_421;
          }
          if (v152 <= 1) {
            uint64_t v153 = 1;
          }
          else {
            uint64_t v153 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v149) >> 3;
          }
          uint64_t v154 = (uint64_t)(*(void *)(*(void *)v144 + 16) - (void)v150) >> 3;
          break;
        case 4:
          unsigned int v145 = *(unsigned __int8 *)(a2 + 12);
          if (v145 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v145 != 4) {
            goto LABEL_434;
          }
          BOOL v146 = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&__p, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)v144 + 8));
LABEL_408:
          if (v146) {
            goto LABEL_467;
          }
          goto LABEL_435;
        case 5:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_434;
        case 6:
          switch(*(unsigned char *)(a2 + 12))
          {
            case 0:
              if (*(void *)a2 > (uint64_t)(*(void *)v144 << 8) >> 8) {
                goto LABEL_467;
              }
              goto LABEL_435;
            case 1:
              if ((double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 32) << 8) >> 8) < *(double *)a2) {
                goto LABEL_467;
              }
              goto LABEL_435;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_434;
            case 6:
              uint64_t v161 = (uint64_t)(*(void *)a2 << 8) >> 8;
              if (v161 > (uint64_t)(*(void *)v144 << 8) >> 8
                || v161 == (uint64_t)(*(void *)v144 << 8) >> 8 && *(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 40))
              {
                goto LABEL_467;
              }
              goto LABEL_435;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_434;
        case 8:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_434;
        case 9:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_434:
          turi::flexible_type_fail(0);
          goto LABEL_435;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v154 && *v149 <= *v150)
      {
        if (*v149 < *v150) {
          goto LABEL_435;
        }
        --v154;
        ++v150;
        ++v149;
        if (!--v153)
        {
LABEL_421:
          if (v152 <= v151) {
            goto LABEL_435;
          }
          break;
        }
      }
LABEL_467:
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 12) = 0;
      if (v144 != (double *)a3)
      {
        *(void *)(a3 + 5) = *(void *)(a1 + 37);
        *(double *)a3 = *v144;
        int v162 = *(unsigned __int8 *)(a1 + 44);
        *(unsigned char *)(a3 + 12) = v162;
        switch(v162)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_437;
          default:
            return;
        }
      }
    }
    else
    {
LABEL_435:
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 12) = 0;
      if (a2 != a3)
      {
        *(void *)(a3 + 5) = *(void *)(a2 + 5);
        *(void *)a3 = *(void *)a2;
        int v155 = *(unsigned __int8 *)(a2 + 12);
        *(unsigned char *)(a3 + 12) = v155;
        switch(v155)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_437:
            atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
            break;
          default:
            return;
        }
      }
    }
  }
}

void sub_2241791D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v31)
  {
LABEL_8:
    switch(*((unsigned char *)v29 + 12))
    {
      case 2:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        atomic_ullong *volatile v33 = *v29;
        if (!*v29) {
          goto LABEL_34;
        }
        if (*((char *)v33 + 31) < 0) {
          operator delete((void *)v33[1]);
        }
        std::string::size_type v34 = v33;
        uint64_t v35 = 0x1012C404EF22A49;
        goto LABEL_33;
      case 3:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        atomic_ullong *volatile v38 = *v29;
        if (!*v29) {
          goto LABEL_34;
        }
        uint64_t v39 = (void *)v38[1];
        if (v39)
        {
          v38[2] = (atomic_ullong)v39;
          operator delete(v39);
        }
        std::string::size_type v34 = v38;
        uint64_t v35 = 0x1080C409938AC02;
        goto LABEL_33;
      case 4:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        atomic_ullong *volatile v36 = *v29;
        if (!*v29) {
          goto LABEL_34;
        }
        a17 = v36 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
        goto LABEL_28;
      case 5:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        atomic_ullong *volatile v36 = *v29;
        if (!*v29) {
          goto LABEL_34;
        }
        a17 = v36 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_28:
        std::string::size_type v34 = v36;
        uint64_t v35 = 0x1020C405E66F15BLL;
        goto LABEL_33;
      case 8:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        atomic_ullong *volatile v40 = *v29;
        if (!*v29) {
          goto LABEL_34;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v40 + 2);
        std::string::size_type v34 = v40;
        unsigned int v37 = -235920773;
        goto LABEL_32;
      case 9:
        if (atomic_fetch_add(*v29, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_35;
        }
        if (!*v29) {
          goto LABEL_34;
        }
        std::string::size_type v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v29);
        unsigned int v37 = 2071181815;
LABEL_32:
        uint64_t v35 = v37 | 0x1030C4000000000;
LABEL_33:
        MEMORY[0x22A614FA0](v34, v35);
LABEL_34:
        atomic_ullong *volatile *v29 = 0;
LABEL_35:
        atomic_ullong *volatile *v29 = 0;
        *((_DWORD *)v29 + 2) = 0;
        *((unsigned char *)v29 + 12) = 0;
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_35;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::new_instance()
{
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::add_element_simple(uint64_t result, unsigned char *a2)
{
  switch(a2[12])
  {
    case 0:
      double v2 = *(double *)a2;
      goto LABEL_13;
    case 1:
      if (*(double *)a2 != 0.0) {
        goto LABEL_3;
      }
      return result;
    case 2:
      if (*(char *)(*(void *)a2 + 31) < 0) {
        double v2 = *(double *)(*(void *)a2 + 16);
      }
      else {
        *(void *)&double v2 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
LABEL_13:
      if (v2 == 0.0) {
        return result;
      }
      goto LABEL_3;
    case 3:
    case 4:
    case 5:
      if (*(void *)(*(void *)a2 + 8) != *(void *)(*(void *)a2 + 16)) {
        goto LABEL_3;
      }
      return result;
    case 7:
      return result;
    case 8:
      if (*(void *)(*(void *)a2 + 64) == 3) {
        return result;
      }
LABEL_3:
      ++*(void *)(result + 24);
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::emit(uint64_t a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v2);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1);
}

void sub_224179F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::~generic_aggregator()
{
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22417A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22417A2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22417A4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22417A6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22417A8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  unsigned int v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DB20;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DB20;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26D76DB20;
  std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417AC04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DB20;
  return std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
      goto LABEL_6;
    }
LABEL_9:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
LABEL_6:
  return v3();
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  *(void *)(a1 + 40) = 0;
  unsigned int v4 = (atomic_ullong *volatile *)(a1 + 40);
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (a2 != a1)
  {
    char v5 = *(atomic_ullong **)(a2 + 40);
    *(void *)(a1 + 45) = *(void *)(a2 + 45);
    *unsigned int v4 = v5;
    unsigned int v6 = *(unsigned __int8 *)(a2 + 52);
    *(unsigned char *)(a1 + 52) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  return a1;
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DBA0;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DBA0;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26D76DBA0;
  std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417AF6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DBA0;
  return std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a2 + 12) == 7)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (a2 != a3)
    {
      *(void *)(a3 + 5) = *(void *)(a2 + 5);
      *(void *)a3 = *(void *)a2;
      *(unsigned char *)(a3 + 12) = 7;
    }
    return result;
  }
  int v3 = *(unsigned __int8 *)(result + 8);
  uint64_t v4 = *(void *)(result + 40);
  if (!v3)
  {
    if (v4)
    {
      char v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
      goto LABEL_10;
    }
LABEL_13:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!v4) {
    goto LABEL_13;
  }
  char v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
LABEL_10:
  return v5();
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D76DC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417B208(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DC20;
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(unsigned __int8 *)(****(void ****)a2 + 16 * *(void *)(a2 + 8) + 12);
  int v5 = *(unsigned __int8 *)(****(void ****)a3 + 16 * *(void *)(a3 + 8) + 12);
  if (v4 == 7 || v5 == 7)
  {
    *(unsigned char *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(void *)a4 = v4 == v5;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 32);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    char v7 = *(uint64_t (**)(void))(*(void *)v6 + 48);
    return v7();
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DCB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DCB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D76DCB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417B480(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DCB0;
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(unsigned __int8 *)(****(void ****)a2 + 16 * *(void *)(a2 + 8) + 12);
  int v5 = *(unsigned __int8 *)(****(void ****)a3 + 16 * *(void *)(a3 + 8) + 12);
  if (v4 == 7 || v5 == 7)
  {
    *(unsigned char *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(void *)a4 = v4 != v5;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 32);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    char v7 = *(uint64_t (**)(void))(*(void *)v6 + 48);
    return v7();
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DD30;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DD30;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D76DD30;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417B6F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DD30;
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DDB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76DDB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D76DDB0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22417B93C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DDB0;
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(****(void ****)a2 + 16 * *(void *)(a2 + 8) + 12) == 7
    || *(unsigned char *)(****(void ****)a3 + 16 * *(void *)(a3 + 8) + 12) == 7)
  {
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 12) = 0;
    if ((uint64_t *)a4 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a4 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a4 = turi::FLEX_UNDEFINED;
      int v4 = byte_268085B9C;
      *(unsigned char *)(a4 + 12) = byte_268085B9C;
      switch(v4)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(result + 32);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
    return v6();
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76DE30;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DE30;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::flexible_type *this@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = turi::flexible_type::contains_na(this);
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(void *)a2 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    int v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22417BE8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76DEB0;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DEB0;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::flexible_type *this@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = turi::flexible_type::contains_na(this);
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(void *)a2 = result ^ 1;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76DF30;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DF30;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v2 = *(unsigned __int8 *)(a1 + 12) == 7;
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76DFB0;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76DFB0;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v2 = *(unsigned __int8 *)(a1 + 12) != 7;
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E030;
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E030;
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  *(void *)uint64_t result = &unk_26D76E030;
  *((void *)result + 1) = 0;
  int v3 = (atomic_ullong *volatile *)(result + 8);
  *((_DWORD *)result + 4) = 0;
  result[20] = 0;
  if (result != (char *)a1)
  {
    *(void *)(result + 13) = *(void *)(a1 + 13);
    *int v3 = *(atomic_ullong *volatile *)(a1 + 8);
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    result[20] = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E030;
  *(void *)(a2 + 8) = 0;
  BOOL v2 = (atomic_ullong *volatile *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  if (a2 != result)
  {
    int v3 = *(atomic_ullong **)(result + 8);
    *(void *)(a2 + 13) = *(void *)(result + 13);
    *BOOL v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(unsigned char *)(a2 + 20) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 12);
  if (v3 == 7)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (result + 8 == a3) {
      return result;
    }
    *(void *)(a3 + 5) = *(void *)(result + 13);
    *(void *)a3 = *(void *)(result + 8);
    unsigned int v3 = *(unsigned __int8 *)(result + 20);
  }
  else
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (a2 == a3) {
      return result;
    }
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
  }
  *(unsigned char *)(a3 + 12) = v3;
  BOOL v4 = v3 > 9;
  int v5 = (1 << v3) & 0x33C;
  if (!v4 && v5 != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x18uLL);
  *(void *)BOOL v2 = &unk_26D76E0B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E0B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 8);
  unint64_t v4 = 0xC6A4A7935BD1E995 * (*a2 ^ *(void *)(result + 16) ^ 0xC3A5C85C97CB3127);
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)a3 = 0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47)) <= v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    std::vector<std::string>::size_type v7 = 3 * __n;
    unsigned int v8 = &end[__n];
    uint64_t v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_22417C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D76E130;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D76E130;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3 = *a2 < *(void *)(result + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)a3 = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D76E1B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D76E1B0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v6 = 0xC6A4A7935BD1E995 * (result ^ 0xC3A5C85C97CB3127 ^ *(void *)(a1 + 8));
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)a3 = 0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47));
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<char>::insert[abi:ne180100]<std::__tree_const_iterator<char,std::__tree_node<char,void *> *,long>>(a1, *(char **)a2, (char *)(a2 + 8));
  return a1;
}

void sub_22417C908(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<char>::insert[abi:ne180100]<std::__tree_const_iterator<char,std::__tree_node<char,void *> *,long>>(uint64_t *result, char *a2, char *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      unint64_t result = std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>(v5, v6, v4 + 25, v4 + 25);
      std::vector<std::string>::size_type v7 = (char *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          std::vector<std::string>::size_type v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (char *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E230;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E230;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D76E230;
  *((unsigned char *)v2 + 8) = *(unsigned char *)(a1 + 8);
  std::set<char>::set[abi:ne180100]((uint64_t *)v2 + 2, a1 + 16);
  return v2;
}

void sub_22417CABC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E230;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return std::set<char>::set[abi:ne180100]((uint64_t *)(a2 + 16), a1 + 16);
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void **a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v4 = 0;
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = (const std::string *)(*a2 + 8);
  int v7 = *(char *)(*a2 + 31);
  std::string::size_type v8 = *(unsigned __int8 *)(*a2 + 31);
  uint64_t v10 = a1 + 24;
  uint64_t v9 = *(void *)(a1 + 24);
  while (1)
  {
    std::string::size_type v11 = *(unsigned __int8 *)(*a2 + 31);
    if (v7 < 0) {
      std::string::size_type v11 = *(void *)(v5 + 16);
    }
    if (v4 >= v11) {
      goto LABEL_19;
    }
    uint64_t v12 = *a2 + 8;
    if (v7 < 0) {
      uint64_t v12 = v6->__r_.__value_.__r.__words[0];
    }
    if (!v9) {
      break;
    }
    int v13 = *(char *)(v12 + v4);
    uint64_t v14 = a1 + 24;
    uint64_t v15 = *(void *)(a1 + 24);
    do
    {
      int v16 = *(char *)(v15 + 25);
      BOOL v17 = v16 < v13;
      if (v16 >= v13) {
        unint64_t v18 = (uint64_t *)v15;
      }
      else {
        unint64_t v18 = (uint64_t *)(v15 + 8);
      }
      if (!v17) {
        uint64_t v14 = v15;
      }
      uint64_t v15 = *v18;
    }
    while (*v18);
    if (v14 == v10 || *(char *)(v14 + 25) > v13) {
      goto LABEL_19;
    }
    ++v4;
  }
  std::string::size_type v4 = 0;
LABEL_19:
  memset(&__p, 0, sizeof(__p));
  uint64_t v38 = 0;
  int v39 = 0;
  char v40 = 0;
  std::string::size_type v19 = v4;
  if ((v8 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_20:
  if (v4 >= v8)
  {
    if (v19 < v8) {
      goto LABEL_54;
    }
    goto LABEL_66;
  }
  while (1)
  {
    __n128 v21 = v6;
    if ((char)v8 < 0)
    {
      __n128 v21 = (const std::string *)v6->__r_.__value_.__r.__words[0];
      if (v9)
      {
LABEL_27:
        int v22 = v21->__r_.__value_.__s.__data_[v4];
        uint64_t v23 = a1 + 24;
        uint64_t v24 = v9;
        do
        {
          int v25 = *(char *)(v24 + 25);
          BOOL v26 = v25 < v22;
          if (v25 >= v22) {
            double v27 = (uint64_t *)v24;
          }
          else {
            double v27 = (uint64_t *)(v24 + 8);
          }
          if (!v26) {
            uint64_t v23 = v24;
          }
          uint64_t v24 = *v27;
        }
        while (*v27);
        if (v23 != v10 && *(char *)(v23 + 25) <= v22)
        {
          std::string::basic_string(&v37, v6, v19, v4 - v19, (std::allocator<char> *)&v36);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v37;
          if (*(unsigned char *)(a1 + 8))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              atomic_ullong *volatile v28 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
            }
            else {
              atomic_ullong *volatile v28 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            while (p_p != v28)
            {
              p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
              p_p = (std::string *)((char *)p_p + 1);
            }
          }
          turi::flexible_type::operator=<std::string>((uint64_t)&v38);
        }
      }
    }
    else if (v9)
    {
      goto LABEL_27;
    }
    ++v4;
    if ((v8 & 0x80) == 0) {
      goto LABEL_20;
    }
LABEL_22:
    std::string::size_type v20 = *(void *)(v5 + 16);
    if (v4 >= v20)
    {
      if (v19 < v20)
      {
        std::string::size_type v8 = *(void *)(v5 + 16);
LABEL_54:
        std::string::basic_string(&v37, v6, v19, v8 - v19, (std::allocator<char> *)&v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v37;
        if (*(unsigned char *)(a1 + 8))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
          }
          else {
            uint64_t v30 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v31 = &__p;
          }
          else {
            int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          while (v31 != v30)
          {
            v31->__r_.__value_.__s.__data_[0] = __tolower(v31->__r_.__value_.__s.__data_[0]);
            int v31 = (std::string *)((char *)v31 + 1);
          }
        }
        turi::flexible_type::operator=<std::string>((uint64_t)&v38);
      }
LABEL_66:
      *(void *)(a3 + 5) = 0;
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 12) = 5;
      operator new();
    }
  }
}

void sub_22417D2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  MEMORY[0x22A614FA0](v29, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v32 = *a10;
    if (*a10)
    {
      a28 = v32 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
      MEMORY[0x22A614FA0](v32, 0x1020C405E66F15BLL);
    }
    *a10 = 0;
  }
  *a10 = 0;
  *((_DWORD *)a10 + 2) = 0;
  *((unsigned char *)a10 + 12) = 0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a11);
  switch(*(unsigned char *)(v30 - 100))
  {
    case 2:
      turi::gl_sarray::clip((atomic_ullong *volatile *)(v30 - 112));
      goto LABEL_20;
    case 3:
      turi::gl_sarray::clip((atomic_ullong *volatile *)(v30 - 112));
      goto LABEL_20;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v30 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_20;
      }
      uint64_t v33 = *(void *)(v30 - 112);
      if (!v33) {
        goto LABEL_20;
      }
      a11 = (char *)(v33 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_14;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v30 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_20;
      }
      uint64_t v33 = *(void *)(v30 - 112);
      if (!v33) {
        goto LABEL_20;
      }
      a11 = (char *)(v33 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_14:
      uint64_t v34 = v33;
      uint64_t v35 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v30 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_20;
      }
      uint64_t v36 = *(void *)(v30 - 112);
      if (!v36) {
        goto LABEL_20;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v36 + 16));
      uint64_t v34 = v36;
      uint64_t v35 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::operator()((atomic_ullong *volatile *)(v30 - 112));
      goto LABEL_20;
    default:
      goto LABEL_20;
  }
  MEMORY[0x22A614FA0](v34, v35);
LABEL_20:
  if (a22 < 0) {
    operator delete(__p);
  }
  a11 = &a24;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D76E2B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E2B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v88[4] = *(void **)MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 12) != 7)
  {
    uint64_t v4 = result;
    memset(v86, 0, sizeof(v86));
    int v87 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    int v85 = 1065353216;
    memset(&__p, 0, sizeof(__p));
    if (!*(unsigned char *)(result + 8)) {
      goto LABEL_14;
    }
    uint64_t v5 = *a2;
    MEMORY[0x22A614D20](&v74);
    std::string::size_type v8 = *(char **)(v5 + 8);
    uint64_t v7 = v5 + 8;
    unint64_t v6 = v8;
    int v9 = *(char *)(v7 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (char *)v7;
    }
    else {
      uint64_t v10 = v6;
    }
    uint64_t v11 = *(void *)(v7 + 8);
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&v67, v10, (std::locale *)&v74, &v10[v11]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v67;
    *((unsigned char *)&v67.__r_.__value_.__s + 23) = 0;
    v67.__r_.__value_.__s.__data_[0] = 0;
    std::locale::~locale((std::locale *)&v74);
    if (*(unsigned char *)(v4 + 8)) {
      p_p = &__p;
    }
    else {
LABEL_14:
    }
      p_p = (std::string *)(*a2 + 8);
    unint64_t v13 = 0;
    std::string::size_type v80 = 0;
    std::string::size_type v81 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    long long v75 = 0u;
    int64x2_t v76 = 0u;
    int64x2_t v73 = 0u;
    long long v74 = 0u;
    memset(v72, 0, sizeof(v72));
    uint64_t v70 = 0;
    unint64_t v71 = 0;
    uint64_t v14 = MEMORY[0x263EF8318];
    while (1)
    {
      unint64_t v15 = *(void *)(v4 + 16);
      if (v13 < v15) {
        break;
      }
LABEL_55:
      uint64_t v70 = 0;
      unint64_t v71 = 0xD0421383A5FBCD94;
      if (v15)
      {
        uint64_t v34 = 0;
        unint64_t v35 = v73.i64[0];
        uint64_t v36 = v72[1];
        uint64_t v37 = 0xD0421383A5FBCD94;
        unint64_t v38 = v76.i64[0];
        uint64_t v39 = *((void *)&v74 + 1);
        do
        {
          char v40 = p_p;
          if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
            char v40 = (std::string *)p_p->__r_.__value_.__r.__words[0];
          }
          uint64_t v41 = *(void *)(*(void *)(v39 + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF));
          unint64_t v42 = *(void *)(*(void *)(v36 + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF)) - v41;
          int v43 = (uint64_t *)((char *)v40 + v41);
          if (v42 < 0x10)
          {
            unint64_t v44 = 0xC3A5C85C97CB3127;
            uint64_t v45 = 0xB492B66FBE98F273;
          }
          else
          {
            unint64_t v44 = *v43;
            uint64_t v45 = v43[1] - 0x3C5A37A36834CED9;
            v43 += 2;
            v42 -= 16;
          }
          unint64_t v46 = turi::cityhash_local::CityHash128WithSeed(v43, v42, v44, v45);
          uint64_t v47 = 5
              * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v37) | ((0x87C37B91114253D5 * v37) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
          uint64_t v48 = 5
              * (v47
               + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v34) | ((unint64_t)(0x4CF5AD432745937FLL * v34) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
          uint64_t v34 = 5
              * (__ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v49) | ((0x87C37B91114253D5 * v49) >> 31))) ^ v47, 27)+ v48)+ 1390208809;
          uint64_t v37 = 5 * (v34 + __ROR8__((0xCF853D45B173E5ABLL * v46) ^ v48, 31)) + 944331445;
          uint64_t v70 = v34;
          unint64_t v71 = v37;
          ++v38;
          ++v35;
          --v15;
        }
        while (v15);
      }
      if (!std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(v86, (unint64_t *)&v70))
      {
        std::pair<std::deque<unsigned long>,std::deque<unsigned long>>::pair[abi:ne180100]<std::deque<unsigned long>&,std::deque<unsigned long>&,0>((uint64_t)&v67, &v74, v72);
        double v63 = (unint64_t *)&v70;
        int v50 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v86, (unint64_t *)&v70, (uint64_t)&std::piecewise_construct, &v63);
        std::deque<unsigned long>::__move_assign((uint64_t)(v50 + 4), (uint64_t)&v67);
        std::deque<unsigned long>::__move_assign((uint64_t)(v50 + 10), (uint64_t)v69);
        std::deque<unsigned long>::~deque[abi:ne180100](v69);
        std::deque<unsigned long>::~deque[abi:ne180100](&v67);
      }
      double v63 = (unint64_t *)&v70;
      unsigned int v51 = std::__hash_table<std::__hash_value_type<turi::hash_value,unsigned long>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,unsigned long>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v83, (unint64_t *)&v70, (uint64_t)&std::piecewise_construct, &v63);
      ++v51[4];
      int64x2_t v76 = vaddq_s64(v76, (int64x2_t)xmmword_2246C0940);
      if (v76.i64[0] >= 0x400uLL)
      {
        operator delete(**((void ***)&v74 + 1));
        *((void *)&v74 + 1) += 8;
        v76.i64[0] -= 512;
      }
      int64x2_t v73 = vaddq_s64(v73, (int64x2_t)xmmword_2246C0940);
      if (v73.i64[0] >= 0x400uLL)
      {
        operator delete(*(void **)v72[1]);
        v72[1] += 8;
        v73.i64[0] -= 512;
      }
      unint64_t v13 = v76.u64[1];
    }
    std::string::size_type v16 = v81;
    while (1)
    {
      int v17 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      if (v17 < 0) {
        std::string::size_type size = p_p->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      }
      if (v16 >= size) {
        goto LABEL_35;
      }
      std::string::size_type v20 = p_p;
      if (v17 < 0) {
        std::string::size_type v20 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      }
      unsigned int v21 = v20->__r_.__value_.__s.__data_[v16];
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = __maskrune(v21, 0x2000uLL);
        std::string::size_type v16 = v81;
        if (v22) {
          goto LABEL_32;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v21 + 60) & 0x2000) != 0)
      {
        goto LABEL_32;
      }
      uint64_t v23 = p_p;
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v23 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      }
      unsigned int v24 = v23->__r_.__value_.__s.__data_[v16];
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      int v25 = __maskrune(v24, 0x4000uLL);
      std::string::size_type v16 = v81;
      if (v25)
      {
LABEL_32:
        std::string::size_type v81 = ++v16;
      }
      else
      {
LABEL_34:
        std::string::size_type v18 = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
LABEL_35:
        std::string::size_type v26 = v18;
        if ((v18 & 0x80) != 0) {
          std::string::size_type v26 = p_p->__r_.__value_.__l.__size_;
        }
        if (v16 >= v26)
        {
          memset(&v66, 0, sizeof(v66));
          uint64_t v52 = v84;
          if ((void)v84)
          {
            double v63 = (unint64_t *)(v84 + 16);
            uint64_t v53 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v86, (unint64_t *)(v84 + 16), (uint64_t)&std::piecewise_construct, &v63);
            std::deque<unsigned long>::deque((uint64_t)&v67, v53 + 4);
            v88[0] = (void *)(v52 + 16);
            unint64_t v54 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v86, (unint64_t *)(v52 + 16), (uint64_t)&std::piecewise_construct, v88);
            std::deque<unsigned long>::deque((uint64_t)&v63, v54 + 10);
            std::string::resize(&v66, 0, 32);
            if (*(void *)(v4 + 16) == 1)
            {
              unint64_t v55 = 0;
            }
            else
            {
              unint64_t v56 = 0;
              do
              {
                uint64_t v57 = p_p;
                if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
                  uint64_t v57 = (std::string *)p_p->__r_.__value_.__r.__words[0];
                }
                uint64_t v58 = *(void *)(*(void *)(v67.__r_.__value_.__l.__size_ + (((v56 + v68) >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * ((v56 + v68) & 0x1FF));
                std::string::append(&v66, (const std::string::value_type *)v57 + v58, *(void *)(*(void *)(v64 + (((v56 + v65) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v56 + v65) & 0x1FF))- v58);
                std::string::append(&v66, " ", 1uLL);
                ++v56;
                unint64_t v55 = *(void *)(v4 + 16) - 1;
              }
              while (v56 < v55);
            }
            BOOL v59 = p_p;
            if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
              BOOL v59 = (std::string *)p_p->__r_.__value_.__r.__words[0];
            }
            uint64_t v60 = *(void *)(*(void *)(v64 + (((v65 + v55) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v65 + v55) & 0x1FF));
            uint64_t v61 = *(void *)(*(void *)(v67.__r_.__value_.__l.__size_ + (((v68 + v55) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v68 + v55) & 0x1FF));
            std::string::append(&v66, (const std::string::value_type *)v59 + v61, v60 - v61);
            turi::flexible_type::flexible_type<std::string>((uint64_t)v88);
          }
          *(void *)(a3 + 5) = 0;
          *(void *)a3 = 0;
          *(unsigned char *)(a3 + 12) = 5;
          operator new();
        }
        do
        {
          std::string::size_type v80 = v16;
          double v27 = p_p;
          if ((v18 & 0x80) != 0) {
            double v27 = (std::string *)p_p->__r_.__value_.__r.__words[0];
          }
          unsigned int v28 = v27->__r_.__value_.__s.__data_[v16];
          if ((v28 & 0x80000000) != 0) {
            int v29 = __maskrune(v28, 0x2000uLL);
          }
          else {
            int v29 = *(_DWORD *)(v14 + 4 * v28 + 60) & 0x2000;
          }
          if (v29) {
            break;
          }
          uint64_t v30 = p_p;
          if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v30 = (std::string *)p_p->__r_.__value_.__r.__words[0];
          }
          unsigned int v31 = v30->__r_.__value_.__s.__data_[v80];
          if ((v31 & 0x80000000) != 0 ? __maskrune(v31, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v31 + 60) & 0x4000) {
            break;
          }
          LOBYTE(v18) = *((unsigned char *)&p_p->__r_.__value_.__s + 23);
          std::string::size_type v33 = (char)v18 < 0 ? p_p->__r_.__value_.__l.__size_ : HIBYTE(p_p->__r_.__value_.__r.__words[2]);
          std::string::size_type v16 = v80 + 1;
        }
        while (v80 < v33);
        std::deque<unsigned long>::push_back(&v74, &v81);
        std::deque<unsigned long>::push_back(v72, &v80);
        std::string::size_type v16 = v80 + 1;
        std::string::size_type v81 = v80 + 1;
        unint64_t v15 = *(void *)(v4 + 16);
        if (v76.i64[1] >= v15) {
          goto LABEL_55;
        }
      }
    }
    if ((*(_DWORD *)(v14 + 4 * v24 + 60) & 0x4000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != (uint64_t *)a3)
  {
    *(void *)(a3 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a3 = *a2;
    *(unsigned char *)(a3 + 12) = 7;
  }
  return result;
}

void sub_22417DFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::string v67 = v63;
  MEMORY[0x22A614FA0](v65, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v64, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v69 = *v67;
    if (*v67)
    {
      a26 = (char *)(v69 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      MEMORY[0x22A614FA0](v69, 0x1020C405E66F15BLL);
    }
    *std::string v67 = 0;
  }
  *std::string v67 = 0;
  *((_DWORD *)v67 + 2) = 0;
  *((unsigned char *)v67 + 12) = 0;
  if (a25 < 0) {
    operator delete(__p);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](&a40);
  std::deque<unsigned long>::~deque[abi:ne180100](&a46);
  a26 = &a52;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a63 < 0) {
    operator delete(a58);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v66 - 240);
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::~__hash_table(v66 - 192);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    std::string::size_type v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)std::string::size_type v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      std::string::size_type v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        std::string::size_type v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::string::size_type v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    std::string::size_type v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    std::string::size_type v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      std::string::size_type v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        std::string::size_type v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        std::string::size_type v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22417E4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (a2[1] == result[3] && v3 == result[2]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::pair<std::deque<unsigned long>,std::deque<unsigned long>>::pair[abi:ne180100]<std::deque<unsigned long>&,std::deque<unsigned long>&,0>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = std::deque<unsigned long>::deque(a1, a2);
  std::deque<unsigned long>::deque(v5 + 48, a3);
  return a1;
}

void sub_22417E604(_Unwind_Exception *a1)
{
  std::deque<unsigned long>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (a2[1] == v11[3] && v7 == v11[2]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  BOOL v14 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x80uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v15 = (*a4)[1];
  v11[2] = **a4;
  v11[3] = v15;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v11 = *v23;
LABEL_42:
    void *v23 = v11;
    goto LABEL_43;
  }
  *uint64_t v11 = *v14;
  *BOOL v14 = v11;
  *(void *)(v22 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_22417E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::deque<unsigned long>::~deque[abi:ne180100](__p + 10);
    std::deque<unsigned long>::~deque[abi:ne180100](__p + 4);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::deque<unsigned long>::__move_assign(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  std::deque<unsigned long>::shrink_to_fit((void **)a1);
  uint64_t result = std::__split_buffer<unsigned long *>::operator=(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::deque<unsigned long>::shrink_to_fit(void **a1)
{
  if (a1[5])
  {
    std::deque<std::exception_ptr>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<std::exception_ptr>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    unint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      unint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<unsigned long *>::shrink_to_fit(a1);
}

void std::__split_buffer<unsigned long *>::shrink_to_fit(void **a1)
{
  unint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    BOOL v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  BOOL v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  float v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t std::__split_buffer<unsigned long *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<unsigned long *>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void *std::__hash_table<std::__hash_value_type<turi::hash_value,unsigned long>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,unsigned long>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (a2[1] == i[3] && v7 == i[2]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = (*a4)[1];
  i[2] = **a4;
  i[3] = v14;
  i[4] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_42:
    void *v22 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22417ED60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    unint64_t v8 = &(*v7)[8 * (v4 & 0x1FF)];
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    uint64_t v11 = (char *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }
  std::deque<unsigned long>::__append<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_22417EE0C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<unsigned long>::__append<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  }
  return std::deque<unsigned long>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>(a1, a2, a3, v5);
}

void *std::deque<unsigned long>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  uint64_t result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100]((uint64_t)v23, a4);
  while (v14 != v16)
  {
    BOOL v17 = (void *)(v13 == result ? v16 : *v13 + 4096);
    if ((void *)v14 == v17)
    {
      BOOL v17 = (void *)v14;
    }
    else
    {
      unint64_t v18 = *a2;
      unint64_t v19 = (void *)v14;
      do
      {
        uint64_t v20 = *(void *)a3;
        a3 += 8;
        *v19++ = v20;
        if (a3 - v18 == 4096)
        {
          uint64_t v21 = a2[1];
          ++a2;
          unint64_t v18 = v21;
          a3 = v21;
        }
      }
      while (v19 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v22 = v13[1];
    ++v13;
    uint64_t v14 = v22;
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      BOOL v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }
          double v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          std::string v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              std::string::size_type v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              long long v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      }
      else {
        float v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        std::string::size_type v88 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              unsigned int v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              unint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      BOOL v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_22417F4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 10);
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D76E330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v61[4] = *(void **)MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 12) != 7)
  {
    uint64_t v4 = result;
    long long v58 = 0u;
    long long v59 = 0u;
    int v60 = 1065353216;
    memset(&__p, 0, sizeof(__p));
    if (!*(unsigned char *)(result + 8)) {
      goto LABEL_14;
    }
    uint64_t v5 = *a2;
    MEMORY[0x22A614D20](v51);
    unint64_t v8 = *(char **)(v5 + 8);
    uint64_t v7 = v5 + 8;
    uint64_t v6 = v8;
    int v9 = *(char *)(v7 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (char *)v7;
    }
    else {
      uint64_t v10 = v6;
    }
    uint64_t v11 = *(void *)(v7 + 8);
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&v46, v10, v51, &v10[v11]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v46;
    *((unsigned char *)&v46.__r_.__value_.__s + 23) = 0;
    v46.__r_.__value_.__s.__data_[0] = 0;
    std::locale::~locale(v51);
    if (*(unsigned char *)(v4 + 8)) {
      p_p = &__p;
    }
    else {
LABEL_14:
    }
      p_p = (std::string *)(*a2 + 8);
    unint64_t v13 = 0;
    std::string::size_type v56 = 0;
    long long v54 = 0uLL;
    uint64_t v14 = MEMORY[0x263EF8318];
    uint64_t v55 = 0;
    long long v52 = 0u;
    unsigned long long v53 = 0u;
    *(_OWORD *)&v51[0].__locale_ = 0u;
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    while (1)
    {
      unint64_t v15 = *(void *)(v4 + 16);
      if (v13 < v15) {
        break;
      }
LABEL_42:
      uint64_t v49 = 0;
      unint64_t v50 = 0xD0421383A5FBCD94;
      if (v15)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0xD0421383A5FBCD94;
        unint64_t v27 = v53;
        do
        {
          unint64_t v28 = p_p;
          if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v28 = (std::string *)p_p->__r_.__value_.__r.__words[0];
          }
          uint64_t v29 = v28->__r_.__value_.__s.__data_[*(void *)(*(void *)((char *)v51[1].__locale_
                                                                                      + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                          + 8 * (v27 & 0x1FF))];
          unint64_t v30 = (0x9AE16A3B2F90404FLL * (v29 | (v29 << 8))) ^ (0xE9721725F2CC49CLL * v29 - 0x3C5A37A36834CED9);
          unint64_t v31 = 0x9AE16A3B2F90404FLL * (v30 ^ (v30 >> 47));
          unint64_t v32 = 0x9DDFEA08EB382D69
              * ((v31 - 0x6D8ED9027DD26057) ^ ((0x9DDFEA08EB382D69
                                                * ((v31 - 0x6D8ED9027DD26057) ^ 0xFBF3895D8B822A7ALL)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v31 - 0x6D8ED9027DD26057) ^ 0xFBF3895D8B822A7ALL)));
          unint64_t v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
          unint64_t v34 = 0x9DDFEA08EB382D69
              * ((v31 - 0x719B4FA4F25035DDLL) ^ ((v31 - 0x719B4FA4F25035DDLL) >> 47) ^ 0xB492B66FBE98F273);
          unint64_t v35 = (0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v34 ^ (v34 >> 47) ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (v34 ^ (v34 >> 47) ^ 0xB492B66FBE98F273)) >> 47))) ^ v33;
          unint64_t v36 = 0x9DDFEA08EB382D69 * (v33 ^ ((0x9DDFEA08EB382D69 * v35) >> 47) ^ (0x9DDFEA08EB382D69 * v35));
          uint64_t v37 = 5
              * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v26) | ((0x87C37B91114253D5 * v26) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
          uint64_t v38 = 5
              * (v37
               + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v25) | ((unint64_t)(0x4CF5AD432745937FLL * v25) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
          uint64_t v25 = 5
              * (__ROR8__((0x4CF5AD432745937FLL* ((0x3511A6BA00000000 * (v36 ^ (v36 >> 47))) | ((0x10B828A79A88D35DLL * (v36 ^ (v36 >> 47))) >> 31))) ^ v37, 27)+ v38)+ 1390208809;
          uint64_t v26 = 5 * (v25 + __ROR8__((0xCF853D45B173E5ABLL * v35) ^ v38, 31)) + 944331445;
          uint64_t v49 = v25;
          unint64_t v50 = v26;
          ++v27;
          --v15;
        }
        while (v15);
      }
      if (std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(&v58, (unint64_t *)&v49))
      {
        v61[0] = &v49;
        uint64_t v39 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v58, (unint64_t *)&v49, (uint64_t)&std::piecewise_construct, v61);
        ++v39[10];
      }
      else
      {
        std::deque<unsigned long>::deque((uint64_t)&v46, v51);
        int v48 = 1;
        v61[0] = &v49;
        uint64_t v40 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v58, (unint64_t *)&v49, (uint64_t)&std::piecewise_construct, v61);
        std::deque<unsigned long>::__move_assign((uint64_t)(v40 + 4), (uint64_t)&v46);
        v40[10] = v48;
        std::deque<unsigned long>::~deque[abi:ne180100](&v46);
        uint64_t v14 = MEMORY[0x263EF8318];
      }
      unint64_t v13 = *((void *)&v53 + 1) - 1;
      unint64_t v41 = v53 + 1;
      unsigned long long v53 = __PAIR128__(*((unint64_t *)&v53 + 1), (uint64_t)v53 + 1) + __PAIR128__(-1, 0);
      if (v41 >= 0x400)
      {
        operator delete(*(void **)v51[1].__locale_);
        v51[1].__locale_ = (std::locale::__imp *)((char *)v51[1].__locale_ + 8);
        *(void *)&unsigned long long v53 = v53 - 512;
        unint64_t v13 = *((void *)&v53 + 1);
      }
    }
    std::string::size_type v16 = v56;
    while (1)
    {
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = p_p->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      }
      if (v16 >= size) {
        goto LABEL_37;
      }
      uint64_t v18 = p_p;
      if ((*((unsigned char *)&p_p->__r_.__value_.__s + 23) & 0x80) != 0) {
        uint64_t v18 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      }
      unsigned int v19 = v18->__r_.__value_.__s.__data_[v16];
      if ((v19 & 0x80000000) != 0)
      {
        int v20 = __maskrune(v19, 0x2000uLL);
        std::string::size_type v16 = v56;
        if (v20) {
          goto LABEL_35;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v19 + 60) & 0x2000) != 0)
      {
        goto LABEL_35;
      }
      uint64_t v21 = p_p;
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v21 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      }
      unsigned int v22 = v21->__r_.__value_.__s.__data_[v16];
      if (!((v22 & 0x80000000) != 0 ? __maskrune(v22, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v22 + 60) & 0x4000)) {
        break;
      }
      std::string::size_type v16 = v56;
      if (*(unsigned char *)(v4 + 9))
      {
LABEL_35:
        std::string::size_type v56 = ++v16;
      }
      else
      {
LABEL_37:
        if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v24 = p_p->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v24 = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
        }
        if (v16 >= v24)
        {
          memset(&v45, 0, sizeof(v45));
          if ((void)v59)
          {
            std::deque<unsigned long>::deque((uint64_t)&v46, (void *)(v59 + 32));
            std::string::resize(&v45, 0, 32);
            if (*(void *)(v4 + 16))
            {
              unint64_t v42 = 0;
              do
              {
                uint64_t v43 = p_p;
                if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0) {
                  uint64_t v43 = (std::string *)p_p->__r_.__value_.__r.__words[0];
                }
                std::string::append(&v45, (const std::string::value_type *)v43+ *(void *)(*(void *)(v46.__r_.__value_.__l.__size_ + (((v42 + v47) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v42 + v47) & 0x1FF)), 1uLL);
                ++v42;
              }
              while (v42 < *(void *)(v4 + 16));
            }
            turi::flexible_type::flexible_type<std::string>((uint64_t)v61);
          }
          *(void *)(a3 + 5) = 0;
          *(void *)a3 = 0;
          *(unsigned char *)(a3 + 12) = 5;
          operator new();
        }
        std::deque<unsigned long>::push_back(v51, &v56);
        std::string::size_type v16 = ++v56;
        unint64_t v15 = *(void *)(v4 + 16);
        if (*((void *)&v53 + 1) >= v15) {
          goto LABEL_42;
        }
      }
    }
    std::string::size_type v16 = v56;
    goto LABEL_37;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != (uint64_t *)a3)
  {
    *(void *)(a3 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a3 = *a2;
    *(unsigned char *)(a3 + 12) = 7;
  }
  return result;
}

void sub_22417FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v45 = v41;
  MEMORY[0x22A614FA0](v45, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v47 = *v43;
    if (*v43)
    {
      a17 = (char *)(v47 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      MEMORY[0x22A614FA0](v47, 0x1020C405E66F15BLL);
    }
    uint64_t *v43 = 0;
  }
  uint64_t *v43 = 0;
  *((_DWORD *)v43 + 2) = 0;
  *((unsigned char *)v43 + 12) = 0;
  if (a16 < 0) {
    operator delete(__p);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](&a26);
  a17 = &a32;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a41 < 0) {
    operator delete(a36);
  }
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::~__hash_table(v44 - 176);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (a2[1] == v11[3] && v7 == v11[2]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x60uLL);
  v26[0] = v15;
  v26[1] = a1 + 16;
  *unint64_t v15 = 0;
  v15[1] = v7;
  uint64_t v16 = (*a4)[1];
  v15[2] = **a4;
  v15[3] = v16;
  v15[10] = 0;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v24 >= v8) {
          v24 %= v8;
        }
      }
      else
      {
        v24 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t v11 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v11;
}

void sub_22418036C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::set<turi::flexible_type>::set[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<turi::flexible_type>::insert[abi:ne180100]<std::__tree_const_iterator<turi::flexible_type,std::__tree_node<turi::flexible_type,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8), a3);
  return a1;
}

void sub_22418049C(_Unwind_Exception *a1)
{
  std::__tree<turi::flexible_type>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<turi::flexible_type>::insert[abi:ne180100]<std::__tree_const_iterator<turi::flexible_type,std::__tree_node<turi::flexible_type,void *> *,long>>(uint64_t *result, void *a2, void *a3, __n128 a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = (uint64_t **)result;
    unint64_t v7 = result + 1;
    do
    {
      __n128 result = std::__tree<turi::flexible_type>::__emplace_hint_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v6, v7, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4), a4);
      unint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint8x8_t v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint8x8_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E3B0;
  std::__tree<turi::flexible_type>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E3B0;
  std::__tree<turi::flexible_type>::destroy(a1 + 16, *(void **)(a1 + 24));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D76E3B0;
  *((unsigned char *)v2 + 8) = *(unsigned char *)(a1 + 8);
  std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)v2 + 2, a1 + 16, v3);
  return v2;
}

void sub_224180650(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2, __n128 a3)
{
  *(void *)a2 = &unk_26D76E3B0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)(a2 + 16), a1 + 16, a3);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void **a1)
{
  std::__tree<turi::flexible_type>::destroy((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 12) != 7)
  {
    unint64_t v22 = 0;
    long long v21 = 0uLL;
    uint64_t v5 = *(void *)(*(void *)a2 + 8);
    uint64_t v6 = *(void *)(*(void *)a2 + 16);
    if (v5 != v6)
    {
      uint64_t v7 = result;
      uint64_t v8 = result + 16;
      do
      {
        if (*(unsigned char *)(v5 + 12) == 7) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(v8, v5, a4);
        }
        if (*(unsigned char *)(v7 + 8) != (v9 != 0))
        {
          BOOL v10 = *(atomic_ullong **)v5;
          int v11 = *(_DWORD *)(v5 + 8);
          unsigned int v12 = *(unsigned __int8 *)(v5 + 12);
          if (v12 <= 9 && ((1 << v12) & 0x33C) != 0) {
            atomic_fetch_add(v10, 1uLL);
          }
          uint64_t v14 = *(atomic_ullong **)(v5 + 16);
          int v15 = *(_DWORD *)(v5 + 24);
          unsigned int v16 = *(unsigned __int8 *)(v5 + 28);
          if (v16 <= 9 && ((1 << v16) & 0x33C) != 0) {
            atomic_fetch_add(v14, 1uLL);
          }
          *(void *)uint64_t v23 = v10;
          *(_DWORD *)&v23[8] = v11;
          v23[12] = v12;
          *(void *)unint64_t v24 = v14;
          *(_DWORD *)&v24[8] = v15;
          v24[12] = v16;
          uint64_t v17 = *((void *)&v21 + 1);
          if (*((void *)&v21 + 1) >= v22)
          {
            uint64_t v20 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v21, (uint64_t *)v23);
          }
          else
          {
            **((void **)&v21 + 1) = 0;
            *(_DWORD *)(v17 + 8) = 0;
            *(unsigned char *)(v17 + 12) = 0;
            uint64_t v18 = *(void *)v23;
            *(void *)(v17 + 5) = *(void *)&v23[5];
            *(void *)uint64_t v17 = v18;
            *(unsigned char *)(v17 + 12) = v23[12];
            v23[12] = 0;
            *(void *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            *(unsigned char *)(v17 + 28) = 0;
            uint64_t v19 = *(void *)v24;
            *(void *)(v17 + 21) = *(void *)&v24[5];
            *(void *)(v17 + 16) = v19;
            *(unsigned char *)(v17 + 28) = v24[12];
            v24[12] = 0;
            uint64_t v20 = v17 + 32;
          }
          *((void *)&v21 + 1) = v20;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v23);
        }
        v5 += 32;
      }
      while (v5 != v6);
    }
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 5;
    operator new();
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    *(unsigned char *)(a3 + 12) = 7;
  }
  return result;
}

void sub_2241809E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  MEMORY[0x22A614FA0](v14, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v16 = *v12;
    if (*v12)
    {
      a12 = (void **)(v16 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x22A614FA0](v16, 0x1020C405E66F15BLL);
    }
    *unsigned int v12 = 0;
  }
  *unsigned int v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((unsigned char *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 v3 = *(void **)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = 1;
    do
    {
      if ((std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v5, a2, (uint64_t)(v3 + 4)) & 1) == 0)
      {
        if (!std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v5, (uint64_t)(v3 + 4), a2)) {
          return v6;
        }
        ++v3;
      }
      __n128 v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E430;
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E430;
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26D76E430;
  std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E430;
  return std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 12) != 7)
  {
    unint64_t v224 = 0;
    long long v223 = 0uLL;
    uint64_t v5 = *(void *)(*(void *)a2 + 8);
    uint64_t v6 = *(void *)(*(void *)a2 + 16);
    if (v5 == v6) {
      goto LABEL_384;
    }
    uint64_t v7 = result;
    uint64_t v8 = &v227;
LABEL_6:
    if (!*(unsigned char *)(v7 + 8)
      || !turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * *(char *)(v5 + 28) + *(char *)(v7 + 28)])
    {
      goto LABEL_149;
    }
    unsigned int v9 = *(unsigned __int8 *)(v5 + 28);
    switch(*(unsigned char *)(v7 + 28))
    {
      case 0:
        switch(*(unsigned char *)(v5 + 28))
        {
          case 0:
            if (*(void *)(v5 + 16) > *(void *)(v7 + 16)) {
              goto LABEL_149;
            }
            goto LABEL_11;
          case 1:
            a4.n128_u64[0] = *(void *)(v5 + 16);
            double v97 = (double)*(uint64_t *)(v7 + 16);
            goto LABEL_146;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_10;
          case 6:
            if (*(void *)(v7 + 16) < (uint64_t)(*(void *)(v5 + 16) << 8) >> 8) {
              goto LABEL_149;
            }
            goto LABEL_11;
          default:
            goto LABEL_386;
        }
      case 1:
        switch(*(unsigned char *)(v5 + 28))
        {
          case 0:
            a4.n128_u64[0] = *(void *)(v7 + 16);
            if (a4.n128_f64[0] < (double)*(uint64_t *)(v5 + 16)) {
              goto LABEL_149;
            }
            goto LABEL_11;
          case 1:
            a4.n128_u64[0] = *(void *)(v5 + 16);
            double v97 = *(double *)(v7 + 16);
            goto LABEL_146;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_10;
          case 6:
            double v97 = *(double *)(v7 + 16);
            a4.n128_f64[0] = (double)*(int *)(v5 + 24) / 1000000.0 + (double)((uint64_t)(*(void *)(v5 + 16) << 8) >> 8);
LABEL_146:
            if (a4.n128_f64[0] > v97) {
              goto LABEL_149;
            }
            goto LABEL_11;
          default:
            goto LABEL_386;
        }
      case 2:
        BOOL v12 = v9 - 3 >= 7 && v9 >= 2;
        if (!v12) {
          goto LABEL_10;
        }
        if (v9 != 2)
        {
LABEL_386:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        uint64_t v13 = *(void *)(v7 + 16);
        uint64_t v14 = *(void *)(v5 + 16);
        uint64_t v17 = *(const void **)(v14 + 8);
        uint64_t v15 = v14 + 8;
        uint64_t v16 = v17;
        int v18 = *(char *)(v15 + 23);
        long long v21 = *(const void **)(v13 + 8);
        uint64_t v19 = v13 + 8;
        uint64_t v20 = v21;
        int v22 = *(char *)(v19 + 23);
        if (v22 >= 0) {
          size_t v23 = *(unsigned __int8 *)(v19 + 23);
        }
        else {
          size_t v23 = *(void *)(v19 + 8);
        }
        if (v22 >= 0) {
          unint64_t v24 = (const void *)v19;
        }
        else {
          unint64_t v24 = v20;
        }
        if (v18 >= 0) {
          size_t v25 = *(unsigned __int8 *)(v15 + 23);
        }
        else {
          size_t v25 = *(void *)(v15 + 8);
        }
        if (v18 >= 0) {
          uint64_t v26 = (const void *)v15;
        }
        else {
          uint64_t v26 = v16;
        }
        if (v25 >= v23) {
          size_t v27 = v23;
        }
        else {
          size_t v27 = v25;
        }
        int v28 = memcmp(v24, v26, v27);
        BOOL v29 = v23 < v25;
        if (v28) {
          BOOL v29 = v28 < 0;
        }
        if (v29) {
          goto LABEL_149;
        }
        goto LABEL_11;
      case 3:
        if (v9 > 9) {
          goto LABEL_386;
        }
        if (v9 != 3) {
          goto LABEL_10;
        }
        unint64_t v30 = *(unint64_t **)(*(void *)(v5 + 16) + 8);
        unint64_t v31 = *(double **)(*(void *)(v7 + 16) + 8);
        unint64_t v32 = (uint64_t)(*(void *)(*(void *)(v7 + 16) + 16) - (void)v31) >> 3;
        unint64_t v33 = (uint64_t)(*(void *)(*(void *)(v5 + 16) + 16) - (void)v30) >> 3;
        if (*(unint64_t **)(*(void *)(v5 + 16) + 16) == v30) {
          goto LABEL_54;
        }
        if (v33 <= 1) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = (uint64_t)(*(void *)(*(void *)(v5 + 16) + 16) - (void)v30) >> 3;
        }
        uint64_t v35 = (uint64_t)(*(void *)(*(void *)(v7 + 16) + 16) - (void)v31) >> 3;
        do
        {
          if (!v35) {
            goto LABEL_149;
          }
          a4.n128_u64[0] = *v30;
          if (*(double *)v30 > *v31) {
            goto LABEL_149;
          }
          if (*(double *)v30 < *v31) {
            goto LABEL_11;
          }
          ++v31;
          ++v30;
          --v35;
          --v34;
        }
        while (v34);
LABEL_54:
        if (v33 > v32) {
          goto LABEL_149;
        }
        goto LABEL_11;
      case 4:
        if (v9 > 9) {
          goto LABEL_386;
        }
        if (v9 == 4)
        {
          if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v226, (uint64_t *)(*(void *)(v5 + 16) + 8), (void *)(*(void *)(v7 + 16) + 8)))
          {
LABEL_149:
            BOOL v10 = 1;
            goto LABEL_150;
          }
        }
        else
        {
LABEL_10:
          turi::flexible_type_fail(0);
        }
LABEL_11:
        switch(*(unsigned char *)(v7 + 28))
        {
          case 0:
            BOOL v10 = 0;
            switch(*(unsigned char *)(v5 + 28))
            {
              case 0:
                BOOL v11 = *(void *)(v5 + 16) == *(void *)(v7 + 16);
                goto LABEL_121;
              case 1:
                a4.n128_u64[0] = *(void *)(v5 + 16);
                uint64_t v94 = *(void *)(v7 + 16);
                goto LABEL_305;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_150;
              case 6:
                BOOL v11 = *(void *)(v7 + 16) == (uint64_t)(*(void *)(v5 + 16) << 8) >> 8 && *(_DWORD *)(v5 + 24) == 0;
                goto LABEL_121;
              default:
                goto LABEL_386;
            }
          case 1:
            BOOL v10 = 0;
            switch(*(unsigned char *)(v5 + 28))
            {
              case 0:
                a4.n128_u64[0] = *(void *)(v7 + 16);
                uint64_t v94 = *(void *)(v5 + 16);
LABEL_305:
                BOOL v11 = a4.n128_f64[0] == (double)v94;
                goto LABEL_121;
              case 1:
                a4.n128_u64[0] = *(void *)(v5 + 16);
                BOOL v10 = a4.n128_f64[0] == *(double *)(v7 + 16);
                goto LABEL_150;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_150;
              case 6:
                a4.n128_f64[0] = vabdd_f64((double)*(int *)(v5 + 24) / 1000000.0+ (double)((uint64_t)(*(void *)(v5 + 16) << 8) >> 8), *(double *)(v7 + 16));
                goto LABEL_308;
              default:
                goto LABEL_386;
            }
          case 2:
            unsigned int v77 = *(unsigned __int8 *)(v5 + 28);
            if (v77 - 3 < 7 || v77 < 2) {
              goto LABEL_128;
            }
            if (v77 != 2) {
              goto LABEL_386;
            }
            uint64_t v79 = *(void *)(v5 + 16);
            if (*(char *)(v79 + 31) < 0) {
              size_t v80 = *(void *)(v79 + 16);
            }
            else {
              size_t v80 = *(unsigned __int8 *)(v79 + 31);
            }
            uint64_t v210 = *(void *)(v7 + 16);
            if (*(char *)(v210 + 31) < 0) {
              uint64_t v211 = *(void *)(v210 + 16);
            }
            else {
              uint64_t v211 = *(unsigned __int8 *)(v210 + 31);
            }
            if (v80 != v211) {
              goto LABEL_128;
            }
            uint64_t v212 = (void *)(v79 + 8);
            if ((*(unsigned char *)(v79 + 31) & 0x80) != 0) {
              uint64_t v212 = (void *)*v212;
            }
            uint64_t v213 = (void *)(v210 + 8);
            if ((*(unsigned char *)(v210 + 31) & 0x80) != 0) {
              uint64_t v213 = (void *)*v213;
            }
            if ((*(unsigned char *)(v79 + 31) & 0x80) != 0)
            {
              BOOL v11 = memcmp(v212, v213, v80) == 0;
LABEL_121:
              BOOL v10 = v11;
              goto LABEL_150;
            }
            if (v80)
            {
              size_t v214 = v80 - 1;
              do
              {
                int v216 = *(unsigned __int8 *)v212;
                uint64_t v212 = (void *)((char *)v212 + 1);
                int v215 = v216;
                int v218 = *(unsigned __int8 *)v213;
                uint64_t v213 = (void *)((char *)v213 + 1);
                int v217 = v218;
                BOOL v12 = v214-- != 0;
                char v219 = v12;
                BOOL v10 = v215 == v217;
              }
              while (v215 == v217 && (v219 & 1) != 0);
              goto LABEL_150;
            }
            goto LABEL_149;
          case 3:
            unsigned int v81 = *(unsigned __int8 *)(v5 + 28);
            if (v81 > 9) {
              goto LABEL_386;
            }
            if (v81 != 3) {
              goto LABEL_128;
            }
            uint64_t v82 = *(void *)(v7 + 16);
            uint64_t v83 = *(void *)(v5 + 16);
            int v85 = *(unint64_t **)(v83 + 8);
            uint64_t v84 = *(unint64_t **)(v83 + 16);
            unint64_t v86 = v84 - v85;
            int v87 = *(double **)(v82 + 8);
            if (v86 != (uint64_t)(*(void *)(v82 + 16) - (void)v87) >> 3) {
              goto LABEL_128;
            }
            if (v84 == v85) {
              goto LABEL_149;
            }
            if (v86 <= 1) {
              uint64_t v88 = 1;
            }
            else {
              uint64_t v88 = v84 - v85;
            }
            a4.n128_u64[0] = *v85;
            if (*(double *)v85 != *v87) {
              goto LABEL_128;
            }
            unint64_t v89 = 0;
            long long v90 = v87 + 1;
            uint64_t v91 = v85 + 1;
            while (v88 - 1 != v89)
            {
              a4.n128_u64[0] = v91[v89];
              double v92 = v90[v89++];
              if (a4.n128_f64[0] != v92) {
                goto LABEL_379;
              }
            }
            unint64_t v89 = v88;
LABEL_379:
            BOOL v10 = v89 >= v86;
            goto LABEL_150;
          case 4:
            unsigned int v36 = *(unsigned __int8 *)(v5 + 28);
            if (v36 > 9) {
              goto LABEL_386;
            }
            if (v36 != 4) {
              goto LABEL_128;
            }
            int v37 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v226, (uint64_t *)(*(void *)(v5 + 16) + 8), (void *)(*(void *)(v7 + 16) + 8));
            goto LABEL_300;
          case 5:
            unsigned int v95 = *(unsigned __int8 *)(v5 + 28);
            if (v95 > 9) {
              goto LABEL_386;
            }
            if (v95 != 5) {
              goto LABEL_128;
            }
            int v37 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v226, (uint64_t **)(*(void *)(v5 + 16) + 8), (uint64_t **)(*(void *)(v7 + 16) + 8));
            goto LABEL_300;
          case 6:
            BOOL v10 = 0;
            switch(*(unsigned char *)(v5 + 28))
            {
              case 0:
                BOOL v11 = *(void *)(v5 + 16) == (uint64_t)(*(void *)(v7 + 16) << 8) >> 8 && *(_DWORD *)(v7 + 24) == 0;
                goto LABEL_121;
              case 1:
                a4.n128_f64[0] = vabdd_f64(*(double *)(v5 + 16), (double)*(int *)(v7 + 24) / 1000000.0+ (double)((uint64_t)(*(void *)(v7 + 16) << 8) >> 8));
LABEL_308:
                BOOL v10 = a4.n128_f64[0] < 0.0000005;
                goto LABEL_150;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_150;
              case 6:
                BOOL v11 = ((*(void *)(v7 + 16) ^ *(void *)(v5 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
                   && *(_DWORD *)(v5 + 24) == *(_DWORD *)(v7 + 24);
                goto LABEL_121;
              default:
                goto LABEL_386;
            }
          case 7:
            unsigned int v93 = *(unsigned __int8 *)(v5 + 28);
            if (v93 >= 0xA) {
              goto LABEL_386;
            }
            BOOL v11 = v93 == 7;
            goto LABEL_121;
          case 8:
            BOOL v10 = 0;
            unsigned int v96 = *(unsigned __int8 *)(v5 + 28);
            if (v96 < 8 || v96 == 9) {
              goto LABEL_150;
            }
            if (v96 != 8) {
              goto LABEL_386;
            }
            int v37 = turi::image_type::operator==(*(void *)(v5 + 16) + 8, *(void *)(v7 + 16) + 8);
LABEL_300:
            BOOL v10 = v37;
            goto LABEL_150;
          case 9:
            unsigned int v38 = *(unsigned __int8 *)(v5 + 28);
            if (v38 < 9) {
              goto LABEL_128;
            }
            if (v38 != 9) {
              goto LABEL_386;
            }
            uint64_t v39 = *(void **)(v7 + 16);
            uint64_t v40 = *(void **)(v5 + 16);
            if (v39 == v40) {
              goto LABEL_149;
            }
            uint64_t v221 = *(void *)(v7 + 16);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v40 + 1), (uint64_t)(v39 + 1)))
            {
LABEL_128:
              BOOL v10 = 0;
              goto LABEL_150;
            }
            unint64_t v42 = (char *)v40[3];
            uint64_t v41 = (char *)v40[4];
            uint64_t v43 = v41 - v42;
            if (v41 == v42) {
              goto LABEL_149;
            }
            if (!v40[1]) {
              goto LABEL_149;
            }
            uint64_t v44 = 1;
            do
            {
              uint64_t v45 = *(void *)v42;
              v42 += 8;
              v44 *= v45;
            }
            while (v42 != v41);
            if (!v44) {
              goto LABEL_149;
            }
            v225[0] = 0;
            std::vector<unsigned long>::vector(&v226, v43 >> 3, v225);
            long long v46 = v226;
            uint64_t v47 = **(void **)(v221 + 8);
            uint64_t v48 = *((void *)&v226 + 1) - v226;
            unint64_t v49 = (uint64_t)(*((void *)&v226 + 1) - v226) >> 3;
            unint64_t v50 = v49 - 1;
            if (v49 <= 1) {
              uint64_t v51 = 1;
            }
            else {
              uint64_t v51 = (uint64_t)(*((void *)&v226 + 1) - v226) >> 3;
            }
            break;
          default:
            goto LABEL_386;
        }
        break;
      case 5:
      case 7:
      case 8:
      case 9:
        if (v9 < 0xA) {
          goto LABEL_10;
        }
        goto LABEL_386;
      case 6:
        switch(*(unsigned char *)(v5 + 28))
        {
          case 0:
            if (*(void *)(v5 + 16) > (uint64_t)(*(void *)(v7 + 16) << 8) >> 8) {
              goto LABEL_149;
            }
            goto LABEL_11;
          case 1:
            a4.n128_u64[0] = *(void *)(v5 + 16);
            if ((double)*(int *)(v7 + 24) / 1000000.0 + (double)((uint64_t)(*(void *)(v7 + 16) << 8) >> 8) < a4.n128_f64[0]) {
              goto LABEL_149;
            }
            goto LABEL_11;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_10;
          case 6:
            uint64_t v98 = (uint64_t)(*(void *)(v5 + 16) << 8) >> 8;
            uint64_t v99 = *(void *)(v7 + 16);
            if (v98 > v99 << 8 >> 8 || v98 == v99 << 8 >> 8 && *(_DWORD *)(v5 + 24) > *(_DWORD *)(v7 + 24)) {
              goto LABEL_149;
            }
            goto LABEL_11;
          default:
            goto LABEL_386;
        }
      default:
        goto LABEL_386;
    }
    while (1)
    {
      if (*((void *)&v46 + 1) == (void)v46)
      {
        uint64_t v59 = 0;
        a4.n128_u64[0] = *(void *)(*(void *)v40[1] + 8 * v40[9]);
      }
      else
      {
        uint64_t v52 = 0;
        unsigned long long v53 = (uint64_t *)v40[6];
        long long v54 = (uint64_t *)v46;
        uint64_t v55 = v51;
        do
        {
          uint64_t v57 = *v54++;
          uint64_t v56 = v57;
          uint64_t v58 = *v53++;
          v52 += v58 * v56;
          --v55;
        }
        while (v55);
        uint64_t v59 = 0;
        a4.n128_u64[0] = *(void *)(*(void *)v40[1] + 8 * (v40[9] + v52));
        int v60 = *(uint64_t **)(v221 + 48);
        long long v61 = (uint64_t *)v46;
        uint64_t v62 = v51;
        do
        {
          uint64_t v64 = *v61++;
          uint64_t v63 = v64;
          uint64_t v65 = *v60++;
          v59 += v65 * v63;
          --v62;
        }
        while (v62);
      }
      double v66 = *(double *)(v47 + 8 * (*(void *)(v221 + 72) + v59));
      BOOL v10 = a4.n128_f64[0] == v66;
      if (a4.n128_f64[0] != v66)
      {
LABEL_97:
        if ((void)v46) {
          goto LABEL_383;
        }
        goto LABEL_150;
      }
      uint64_t v67 = v49;
      unint64_t v68 = v49 - 1;
      if (v48 >= 1) {
        break;
      }
LABEL_95:
      if (!v67 || (v68 & 0x8000000000000000) != 0) {
        goto LABEL_97;
      }
    }
    uint64_t v69 = v40[3];
    unint64_t v70 = *(void *)(v46 + 8 * v50) + 1;
    *(void *)(v46 + 8 * v50) = v70;
    if (v70 < *(void *)(v69 + 8 * v50))
    {
      uint64_t v67 = 1;
      unint64_t v68 = v49 - 1;
      goto LABEL_95;
    }
    uint64_t v71 = v69 - 16;
    unint64_t v72 = v49;
    uint64_t v73 = (unint64_t *)(v46 + (v48 & 0xFFFFFFFFFFFFFFF8) - 16);
    while (1)
    {
      unint64_t v74 = v72 - 1;
      v73[1] = 0;
      if ((uint64_t)(v72 - 1) <= 0) {
        break;
      }
      unint64_t v75 = *v73 + 1;
      *v73-- = v75;
      unint64_t v76 = *(void *)(v71 + 8 * v72--);
      if (v75 < v76)
      {
        unint64_t v68 = v74 - 1;
        uint64_t v67 = 1;
        goto LABEL_95;
      }
    }
    BOOL v10 = 1;
LABEL_383:
    *((void *)&v226 + 1) = v46;
    operator delete((void *)v46);
LABEL_150:
    if (*(unsigned char *)(v7 + 32)
      && turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * *(char *)(v5 + 28) + *(char *)(v7 + 52)])
    {
      unsigned int v100 = *(unsigned __int8 *)(v5 + 28);
      switch(*(unsigned char *)(v7 + 52))
      {
        case 0:
          switch(*(unsigned char *)(v5 + 28))
          {
            case 0:
              if (*(void *)(v5 + 16) < *(void *)(v7 + 40)) {
                goto LABEL_322;
              }
              goto LABEL_155;
            case 1:
              a4.n128_u64[0] = *(void *)(v5 + 16);
              double v176 = (double)*(uint64_t *)(v7 + 40);
              goto LABEL_276;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_154;
            case 6:
              if (*(void *)(v7 + 40) > (uint64_t)(*(void *)(v5 + 16) << 8) >> 8) {
                goto LABEL_322;
              }
              goto LABEL_155;
            default:
              goto LABEL_386;
          }
        case 1:
          switch(*(unsigned char *)(v5 + 28))
          {
            case 0:
              a4.n128_u64[0] = *(void *)(v7 + 40);
              if (a4.n128_f64[0] > (double)*(uint64_t *)(v5 + 16)) {
                goto LABEL_322;
              }
              goto LABEL_155;
            case 1:
              a4.n128_u64[0] = *(void *)(v5 + 16);
              double v176 = *(double *)(v7 + 40);
              goto LABEL_276;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_154;
            case 6:
              double v176 = *(double *)(v7 + 40);
              a4.n128_f64[0] = (double)*(int *)(v5 + 24) / 1000000.0
                             + (double)((uint64_t)(*(void *)(v5 + 16) << 8) >> 8);
LABEL_276:
              if (a4.n128_f64[0] < v176) {
                goto LABEL_322;
              }
              goto LABEL_155;
            default:
              goto LABEL_386;
          }
        case 2:
          if (v100 - 3 < 7 || v100 < 2) {
            goto LABEL_154;
          }
          if (v100 != 2) {
            goto LABEL_386;
          }
          uint64_t v104 = *(void *)(v5 + 16);
          int v222 = v8;
          if (*(char *)(v104 + 31) < 0)
          {
            int64_t v105 = *(const void **)(v104 + 8);
            size_t v106 = *(void *)(v104 + 16);
          }
          else
          {
            int64_t v105 = (const void *)(v104 + 8);
            size_t v106 = *(unsigned __int8 *)(v104 + 31);
          }
          uint64_t v179 = *(void *)(v7 + 40);
          uint64_t v180 = (const void *)(v179 + 8);
          size_t v181 = *(unsigned __int8 *)(v179 + 31);
          v183 = *(const void **)(v179 + 8);
          size_t v182 = *(void *)(v179 + 16);
          if ((v181 & 0x80u) == 0) {
            size_t v184 = v181;
          }
          else {
            size_t v184 = v182;
          }
          if ((v181 & 0x80u) == 0) {
            int64_t v185 = v180;
          }
          else {
            int64_t v185 = v183;
          }
          if (v184 >= v106) {
            size_t v186 = v106;
          }
          else {
            size_t v186 = v184;
          }
          int v187 = memcmp(v105, v185, v186);
          BOOL v188 = v106 < v184;
          if (v187) {
            BOOL v188 = v187 < 0;
          }
          uint64_t v8 = v222;
          if (v188) {
            break;
          }
          goto LABEL_155;
        case 3:
          if (v100 > 9) {
            goto LABEL_386;
          }
          if (v100 != 3) {
            goto LABEL_154;
          }
          uint64_t v107 = *(unint64_t **)(*(void *)(v5 + 16) + 8);
          uint64_t v108 = *(double **)(*(void *)(v7 + 40) + 8);
          unint64_t v109 = (uint64_t)(*(void *)(*(void *)(v7 + 40) + 16) - (void)v108) >> 3;
          unint64_t v110 = (uint64_t)(*(void *)(*(void *)(v5 + 16) + 16) - (void)v107) >> 3;
          if (*(unint64_t **)(*(void *)(v5 + 16) + 16) == v107) {
            goto LABEL_181;
          }
          if (v110 <= 1) {
            uint64_t v111 = 1;
          }
          else {
            uint64_t v111 = (uint64_t)(*(void *)(*(void *)(v5 + 16) + 16) - (void)v107) >> 3;
          }
          uint64_t v112 = (uint64_t)(*(void *)(*(void *)(v7 + 40) + 16) - (void)v108) >> 3;
          do
          {
            if (!v112) {
              goto LABEL_155;
            }
            a4.n128_u64[0] = *v107;
            if (*(double *)v107 > *v108) {
              goto LABEL_155;
            }
            if (*(double *)v107 < *v108) {
              goto LABEL_322;
            }
            ++v108;
            ++v107;
            --v112;
            --v111;
          }
          while (v111);
LABEL_181:
          if (v110 < v109) {
            break;
          }
          goto LABEL_155;
        case 4:
          if (v100 > 9) {
            goto LABEL_386;
          }
          if (v100 == 4)
          {
            if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v226, (uint64_t *)(*(void *)(v5 + 16) + 8), (void *)(*(void *)(v7 + 40) + 8)))
            {
              break;
            }
          }
          else
          {
LABEL_154:
            turi::flexible_type_fail(0);
          }
LABEL_155:
          switch(*(unsigned char *)(v7 + 52))
          {
            case 0:
              BOOL v101 = 0;
              switch(*(unsigned char *)(v5 + 28))
              {
                case 0:
                  BOOL v102 = *(void *)(v5 + 16) == *(void *)(v7 + 40);
                  goto LABEL_249;
                case 1:
                  a4.n128_u64[0] = *(void *)(v5 + 16);
                  uint64_t v172 = *(void *)(v7 + 40);
                  goto LABEL_291;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_323;
                case 6:
                  BOOL v102 = *(void *)(v7 + 40) == (uint64_t)(*(void *)(v5 + 16) << 8) >> 8 && *(_DWORD *)(v5 + 24) == 0;
                  goto LABEL_249;
                default:
                  goto LABEL_386;
              }
            case 1:
              BOOL v101 = 0;
              switch(*(unsigned char *)(v5 + 28))
              {
                case 0:
                  a4.n128_u64[0] = *(void *)(v7 + 40);
                  uint64_t v172 = *(void *)(v5 + 16);
LABEL_291:
                  BOOL v102 = a4.n128_f64[0] == (double)v172;
                  goto LABEL_249;
                case 1:
                  a4.n128_u64[0] = *(void *)(v5 + 16);
                  BOOL v101 = a4.n128_f64[0] == *(double *)(v7 + 40);
                  goto LABEL_323;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_323;
                case 6:
                  a4.n128_f64[0] = vabdd_f64((double)*(int *)(v5 + 24) / 1000000.0+ (double)((uint64_t)(*(void *)(v5 + 16) << 8) >> 8), *(double *)(v7 + 40));
                  goto LABEL_294;
                default:
                  goto LABEL_386;
              }
            case 2:
              unsigned int v155 = *(unsigned __int8 *)(v5 + 28);
              if (v155 - 3 < 7 || v155 < 2) {
                goto LABEL_266;
              }
              if (v155 != 2) {
                goto LABEL_386;
              }
              uint64_t v157 = *(void *)(v5 + 16);
              if (*(char *)(v157 + 31) < 0) {
                size_t v158 = *(void *)(v157 + 16);
              }
              else {
                size_t v158 = *(unsigned __int8 *)(v157 + 31);
              }
              uint64_t v200 = *(void *)(v7 + 40);
              if (*(char *)(v200 + 31) < 0) {
                uint64_t v201 = *(void *)(v200 + 16);
              }
              else {
                uint64_t v201 = *(unsigned __int8 *)(v200 + 31);
              }
              if (v158 != v201) {
                goto LABEL_266;
              }
              uint64_t v202 = (void *)(v157 + 8);
              if ((*(unsigned char *)(v157 + 31) & 0x80) != 0) {
                uint64_t v202 = (void *)*v202;
              }
              uint64_t v203 = (void *)(v200 + 8);
              if ((*(unsigned char *)(v200 + 31) & 0x80) != 0) {
                uint64_t v203 = (void *)*v203;
              }
              if ((*(unsigned char *)(v157 + 31) & 0x80) != 0)
              {
                BOOL v102 = memcmp(v202, v203, v158) == 0;
LABEL_249:
                BOOL v101 = v102;
                goto LABEL_323;
              }
              if (v158)
              {
                size_t v204 = v158 - 1;
                do
                {
                  int v206 = *(unsigned __int8 *)v202;
                  uint64_t v202 = (void *)((char *)v202 + 1);
                  int v205 = v206;
                  int v208 = *(unsigned __int8 *)v203;
                  uint64_t v203 = (void *)((char *)v203 + 1);
                  int v207 = v208;
                  BOOL v12 = v204-- != 0;
                  char v209 = v12;
                  BOOL v101 = v205 == v207;
                }
                while (v205 == v207 && (v209 & 1) != 0);
                goto LABEL_323;
              }
              goto LABEL_322;
            case 3:
              unsigned int v159 = *(unsigned __int8 *)(v5 + 28);
              if (v159 > 9) {
                goto LABEL_386;
              }
              if (v159 != 3) {
                goto LABEL_266;
              }
              uint64_t v160 = *(void *)(v7 + 40);
              uint64_t v161 = *(void *)(v5 + 16);
              uint64_t v163 = *(unint64_t **)(v161 + 8);
              int v162 = *(unint64_t **)(v161 + 16);
              unint64_t v164 = v162 - v163;
              long long v165 = *(double **)(v160 + 8);
              if (v164 != (uint64_t)(*(void *)(v160 + 16) - (void)v165) >> 3) {
                goto LABEL_266;
              }
              if (v162 == v163) {
                goto LABEL_322;
              }
              if (v164 <= 1) {
                uint64_t v166 = 1;
              }
              else {
                uint64_t v166 = v162 - v163;
              }
              a4.n128_u64[0] = *v163;
              if (*(double *)v163 != *v165) {
                goto LABEL_266;
              }
              unint64_t v167 = 0;
              long long v168 = v165 + 1;
              unsigned __int8 v169 = v163 + 1;
              while (v166 - 1 != v167)
              {
                a4.n128_u64[0] = v169[v167];
                double v170 = v168[v167++];
                if (a4.n128_f64[0] != v170) {
                  goto LABEL_377;
                }
              }
              unint64_t v167 = v166;
LABEL_377:
              BOOL v101 = v167 >= v164;
              goto LABEL_323;
            case 4:
              unsigned int v113 = *(unsigned __int8 *)(v5 + 28);
              if (v113 > 9) {
                goto LABEL_386;
              }
              if (v113 != 4) {
                goto LABEL_266;
              }
              int v114 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v226, (uint64_t *)(*(void *)(v5 + 16) + 8), (void *)(*(void *)(v7 + 40) + 8));
              goto LABEL_282;
            case 5:
              unsigned int v173 = *(unsigned __int8 *)(v5 + 28);
              if (v173 > 9) {
                goto LABEL_386;
              }
              if (v173 != 5) {
                goto LABEL_266;
              }
              int v114 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v226, (uint64_t **)(*(void *)(v5 + 16) + 8), (uint64_t **)(*(void *)(v7 + 40) + 8));
              goto LABEL_282;
            case 6:
              BOOL v101 = 0;
              switch(*(unsigned char *)(v5 + 28))
              {
                case 0:
                  BOOL v102 = *(void *)(v5 + 16) == (uint64_t)(*(void *)(v7 + 40) << 8) >> 8 && *(_DWORD *)(v7 + 48) == 0;
                  goto LABEL_249;
                case 1:
                  a4.n128_f64[0] = vabdd_f64(*(double *)(v5 + 16), (double)*(int *)(v7 + 48) / 1000000.0+ (double)((uint64_t)(*(void *)(v7 + 40) << 8) >> 8));
LABEL_294:
                  BOOL v101 = a4.n128_f64[0] < 0.0000005;
                  goto LABEL_323;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_323;
                case 6:
                  BOOL v102 = ((*(void *)(v7 + 40) ^ *(void *)(v5 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
                      && *(_DWORD *)(v5 + 24) == *(_DWORD *)(v7 + 48);
                  goto LABEL_249;
                default:
                  goto LABEL_386;
              }
            case 7:
              unsigned int v171 = *(unsigned __int8 *)(v5 + 28);
              if (v171 >= 0xA) {
                goto LABEL_386;
              }
              BOOL v102 = v171 == 7;
              goto LABEL_249;
            case 8:
              unsigned int v174 = *(unsigned __int8 *)(v5 + 28);
              if (v174 < 8 || v174 == 9) {
                goto LABEL_266;
              }
              if (v174 != 8) {
                goto LABEL_386;
              }
              int v114 = turi::image_type::operator==(*(void *)(v5 + 16) + 8, *(void *)(v7 + 40) + 8);
LABEL_282:
              BOOL v101 = v114;
              goto LABEL_323;
            case 9:
              unsigned int v115 = *(unsigned __int8 *)(v5 + 28);
              if (v115 < 9) {
                goto LABEL_266;
              }
              if (v115 != 9) {
                goto LABEL_386;
              }
              float v116 = *(void **)(v7 + 40);
              atomic_ullong v117 = *(void **)(v5 + 16);
              if (v116 == v117) {
                goto LABEL_322;
              }
              uint64_t v220 = *(void *)(v7 + 40);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v117 + 1), (uint64_t)(v116 + 1)))
              {
LABEL_266:
                BOOL v101 = 0;
                goto LABEL_323;
              }
              unint64_t v119 = (char *)v117[3];
              unint64_t v118 = (char *)v117[4];
              uint64_t v120 = v118 - v119;
              if (v118 == v119) {
                goto LABEL_322;
              }
              if (!v117[1]) {
                goto LABEL_322;
              }
              uint64_t v121 = 1;
              do
              {
                uint64_t v122 = *(void *)v119;
                v119 += 8;
                v121 *= v122;
              }
              while (v119 != v118);
              if (!v121) {
                goto LABEL_322;
              }
              v225[0] = 0;
              std::vector<unsigned long>::vector(&v226, v120 >> 3, v225);
              long long v123 = v226;
              uint64_t v124 = **(void **)(v220 + 8);
              uint64_t v125 = *((void *)&v226 + 1) - v226;
              unint64_t v126 = (uint64_t)(*((void *)&v226 + 1) - v226) >> 3;
              unint64_t v127 = v126 - 1;
              if (v126 <= 1) {
                uint64_t v128 = 1;
              }
              else {
                uint64_t v128 = (uint64_t)(*((void *)&v226 + 1) - v226) >> 3;
              }
              size_t v129 = v117;
              break;
            default:
              goto LABEL_386;
          }
          while (1)
          {
            if (*((void *)&v123 + 1) == (void)v123)
            {
              uint64_t v137 = 0;
              a4.n128_u64[0] = *(void *)(*(void *)v129[1] + 8 * v129[9]);
            }
            else
            {
              uint64_t v130 = 0;
              size_t v131 = (uint64_t *)v129[6];
              int v132 = (uint64_t *)v123;
              uint64_t v133 = v128;
              do
              {
                uint64_t v135 = *v132++;
                uint64_t v134 = v135;
                uint64_t v136 = *v131++;
                v130 += v136 * v134;
                --v133;
              }
              while (v133);
              uint64_t v137 = 0;
              a4.n128_u64[0] = *(void *)(*(void *)v129[1] + 8 * (v129[9] + v130));
              int v138 = *(uint64_t **)(v220 + 48);
              uint64_t v139 = (uint64_t *)v123;
              uint64_t v140 = v128;
              do
              {
                uint64_t v142 = *v139++;
                uint64_t v141 = v142;
                uint64_t v143 = *v138++;
                v137 += v143 * v141;
                --v140;
              }
              while (v140);
            }
            double v144 = *(double *)(v124 + 8 * (*(void *)(v220 + 72) + v137));
            BOOL v101 = a4.n128_f64[0] == v144;
            if (a4.n128_f64[0] != v144)
            {
LABEL_225:
              if ((void)v123) {
                goto LABEL_381;
              }
              goto LABEL_323;
            }
            uint64_t v145 = v126;
            unint64_t v146 = v126 - 1;
            if (v125 >= 1)
            {
              uint64_t v147 = v129[3];
              unint64_t v148 = *(void *)(v123 + 8 * v127) + 1;
              *(void *)(v123 + 8 * v127) = v148;
              if (v148 >= *(void *)(v147 + 8 * v127))
              {
                uint64_t v149 = v147 - 16;
                unint64_t v150 = v126;
                unint64_t v151 = (unint64_t *)(v123 + (v125 & 0xFFFFFFFFFFFFFFF8) - 16);
                while (1)
                {
                  unint64_t v152 = v150 - 1;
                  v151[1] = 0;
                  if ((uint64_t)(v150 - 1) <= 0) {
                    break;
                  }
                  unint64_t v153 = *v151 + 1;
                  *v151-- = v153;
                  unint64_t v154 = *(void *)(v149 + 8 * v150--);
                  if (v153 < v154)
                  {
                    unint64_t v146 = v152 - 1;
                    uint64_t v145 = 1;
                    goto LABEL_223;
                  }
                }
                BOOL v101 = 1;
LABEL_381:
                *((void *)&v226 + 1) = v123;
                operator delete((void *)v123);
LABEL_323:
                if (v10 && v101)
                {
                  uint64_t v189 = *(atomic_ullong **)v5;
                  int v190 = *(_DWORD *)(v5 + 8);
                  unsigned int v191 = *(unsigned __int8 *)(v5 + 12);
                  if (v191 <= 9 && ((1 << v191) & 0x33C) != 0) {
                    atomic_fetch_add(v189, 1uLL);
                  }
                  size_t v193 = *(atomic_ullong **)(v5 + 16);
                  int v194 = *(_DWORD *)(v5 + 24);
                  unsigned int v195 = *(unsigned __int8 *)(v5 + 28);
                  if (v195 <= 9 && ((1 << v195) & 0x33C) != 0) {
                    atomic_fetch_add(v193, 1uLL);
                  }
                  *(void *)&long long v226 = v189;
                  DWORD2(v226) = v190;
                  BYTE12(v226) = v191;
                  size_t v227 = v193;
                  int v228 = v194;
                  char v229 = v195;
                  uint64_t v196 = *((void *)&v223 + 1);
                  if (*((void *)&v223 + 1) >= v224)
                  {
                    uint64_t v199 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v223, (uint64_t *)&v226);
                  }
                  else
                  {
                    **((void **)&v223 + 1) = 0;
                    *(_DWORD *)(v196 + 8) = 0;
                    *(unsigned char *)(v196 + 12) = 0;
                    uint64_t v197 = v226;
                    *(void *)(v196 + 5) = *(void *)((char *)&v226 + 5);
                    *(void *)uint64_t v196 = v197;
                    *(unsigned char *)(v196 + 12) = BYTE12(v226);
                    BYTE12(v226) = 0;
                    *(void *)(v196 + 16) = 0;
                    *(_DWORD *)(v196 + 24) = 0;
                    *(unsigned char *)(v196 + 28) = 0;
                    std::string::size_type v198 = *v8;
                    *(void *)(v196 + 21) = *(atomic_ullong **)((char *)v8 + 5);
                    *(void *)(v196 + 16) = v198;
                    *(unsigned char *)(v196 + 28) = v229;
                    char v229 = 0;
                    uint64_t v199 = v196 + 32;
                  }
                  *((void *)&v223 + 1) = v199;
                  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v226);
                }
                v5 += 32;
                if (v5 == v6)
                {
LABEL_384:
                  *(void *)(a3 + 5) = 0;
                  *(void *)a3 = 0;
                  *(unsigned char *)(a3 + 12) = 5;
                  operator new();
                }
                goto LABEL_6;
              }
              uint64_t v145 = 1;
              unint64_t v146 = v126 - 1;
            }
LABEL_223:
            if (!v145 || (v146 & 0x8000000000000000) != 0) {
              goto LABEL_225;
            }
          }
        case 5:
        case 7:
        case 8:
        case 9:
          if (v100 < 0xA) {
            goto LABEL_154;
          }
          goto LABEL_386;
        case 6:
          switch(*(unsigned char *)(v5 + 28))
          {
            case 0:
              if (*(void *)(v5 + 16) < (uint64_t)(*(void *)(v7 + 40) << 8) >> 8) {
                goto LABEL_322;
              }
              goto LABEL_155;
            case 1:
              a4.n128_u64[0] = *(void *)(v5 + 16);
              if ((double)*(int *)(v7 + 48) / 1000000.0 + (double)((uint64_t)(*(void *)(v7 + 40) << 8) >> 8) > a4.n128_f64[0]) {
                goto LABEL_322;
              }
              goto LABEL_155;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_154;
            case 6:
              uint64_t v177 = (uint64_t)(*(void *)(v5 + 16) << 8) >> 8;
              uint64_t v178 = *(void *)(v7 + 40);
              if (v177 < v178 << 8 >> 8 || v177 == v178 << 8 >> 8 && *(_DWORD *)(v5 + 24) < *(_DWORD *)(v7 + 48)) {
                goto LABEL_322;
              }
              goto LABEL_155;
            default:
              goto LABEL_386;
          }
        default:
          goto LABEL_386;
      }
    }
LABEL_322:
    BOOL v101 = 1;
    goto LABEL_323;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    *(unsigned char *)(a3 + 12) = 7;
  }
  return result;
}

void sub_22418212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18)
{
  MEMORY[0x22A614FA0](v20, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v22 = *v18;
    if (*v18)
    {
      a18 = (void **)(v22 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
      MEMORY[0x22A614FA0](v22, 0x1020C405E66F15BLL);
    }
    uint64_t *v18 = 0;
  }
  uint64_t *v18 = 0;
  *((_DWORD *)v18 + 2) = 0;
  *((unsigned char *)v18 + 12) = 0;
  a17 = (void **)&a13;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  *(unsigned char *)__n128 result = *(unsigned char *)a2;
  *(void *)(result + 8) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(result + 8);
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  if (a2 == result)
  {
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(unsigned char *)(result + 44) = 0;
  }
  else
  {
    __n128 v3 = *(atomic_ullong **)(a2 + 8);
    *(void *)(result + 13) = *(void *)(a2 + 13);
    *uint64_t v2 = v3;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 20);
    *(unsigned char *)(result + 20) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
    char v5 = *(unsigned char *)(a2 + 24);
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 24) = v5;
    *(_DWORD *)(result + 40) = 0;
    *(unsigned char *)(result + 44) = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(result + 37) = *(void *)(a2 + 37);
    *(void *)(result + 32) = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a2 + 44);
    *(unsigned char *)(result + 44) = v6;
    switch((int)v6)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)(result + 32), 1uLL);
        break;
      default:
        return result;
    }
  }
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D76E4B0;
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E4B0;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 12) != 7)
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)v3, (const turi::flexible_type *)a1);
    turi::flex_dict_view::keys(v3);
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 4;
    operator new();
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if (a1 != a2)
  {
    *(void *)(a2 + 5) = *(void *)(a1 + 5);
    *(void *)a2 = *(void *)a1;
    *(unsigned char *)(a2 + 12) = 7;
  }
}

void sub_2241827C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  MEMORY[0x22A614FA0](v19, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v21 = *v17;
    if (*v17)
    {
      a17 = (void **)(v21 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      MEMORY[0x22A614FA0](v21, 0x1020C405E66F15BLL);
    }
    *uint64_t v17 = 0;
  }
  *uint64_t v17 = 0;
  *((_DWORD *)v17 + 2) = 0;
  *((unsigned char *)v17 + 12) = 0;
  a17 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::flex_dict_view::~flex_dict_view(turi::flex_dict_view *this)
{
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D76E530;
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E530;
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 12) != 7)
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)v3, (const turi::flexible_type *)a1);
    turi::flex_dict_view::values(v3);
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 4;
    operator new();
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if (a1 != a2)
  {
    *(void *)(a2 + 5) = *(void *)(a1 + 5);
    *(void *)a2 = *(void *)a1;
    *(unsigned char *)(a2 + 12) = 7;
  }
}

void sub_224182C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  MEMORY[0x22A614FA0](v19, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v21 = *v17;
    if (*v17)
    {
      a17 = (void **)(v21 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      MEMORY[0x22A614FA0](v21, 0x1020C405E66F15BLL);
    }
    *uint64_t v17 = 0;
  }
  *uint64_t v17 = 0;
  *((_DWORD *)v17 + 2) = 0;
  *((unsigned char *)v17 + 12) = 0;
  a17 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E5B0;
  std::__tree<turi::flexible_type>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E5B0;
  std::__tree<turi::flexible_type>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26D76E5B0;
  std::set<turi::flexible_type>::set[abi:ne180100](v2 + 1, v1, v3);
  return v2;
}

void sub_224182FD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2, __n128 a3)
{
  *a2 = &unk_26D76E5B0;
  return std::set<turi::flexible_type>::set[abi:ne180100](a2 + 1, a1 + 8, a3);
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void **a1)
{
  std::__tree<turi::flexible_type>::destroy((uint64_t)(a1 + 1), a1[2]);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  if (a2[12] == 7 || (v5 = *(void *)(*(void *)a2 + 8), uint64_t v6 = *(void *)(*(void *)a2 + 16), v5 == v6))
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = result + 8;
    uint64_t v8 = 1;
    while (1)
    {
      if (*(unsigned char *)(v5 + 12) != 7)
      {
        __n128 result = std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(v7, v5, a4);
        if (result) {
          break;
        }
      }
      v5 += 32;
      if (v5 == v6) {
        goto LABEL_7;
      }
    }
  }
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v8;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E630;
  __n128 v3 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D76E630;
  __n128 v3 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C4030951706);
}

void *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26D76E630;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  return v2;
}

void sub_224183260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E630;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 12) == 7)
  {
    uint64_t v4 = 0;
  }
  else
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v10, a2);
    uint64_t v6 = *(const turi::flexible_type **)(a1 + 8);
    uint64_t v7 = *(const turi::flexible_type **)(a1 + 16);
    if (v6 == v7)
    {
      uint64_t v4 = 1;
    }
    else
    {
      do
      {
        unsigned int has_key = turi::flex_dict_view::has_key(&v10, v6);
        uint64_t v6 = (const turi::flexible_type *)((char *)v6 + 16);
        if (v6 == v7) {
          char v9 = 0;
        }
        else {
          char v9 = has_key;
        }
      }
      while ((v9 & 1) != 0);
      uint64_t v4 = has_key;
    }
    uint64_t v13 = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
    uint64_t v13 = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v4;
}

void sub_2241833D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 - 40) = &a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  *(void *)(v13 - 40) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::set<turi::flex_type_enum>::set[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2241834B4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D76E6B0;
  return result;
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E6B0;
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = 1;
  switch(a1[12])
  {
    case 3:
      __n128 v3 = (void *)(*(void *)a1 + 8);
      uint64_t v4 = (void *)(*(void *)a1 + 16);
      char v5 = 3;
      goto LABEL_5;
    case 4:
      __n128 v3 = (void *)(*(void *)a1 + 8);
      uint64_t v4 = (void *)(*(void *)a1 + 16);
      char v5 = 4;
      goto LABEL_5;
    case 5:
      __n128 v3 = (void *)(*(void *)a1 + 8);
      uint64_t v4 = (void *)(*(void *)a1 + 16);
      char v5 = 5;
LABEL_5:
      uint64_t v2 = (uint64_t)(*v4 - *v3) >> v5;
      goto LABEL_6;
    case 7:
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 12) = 0;
      if (a1 != (unsigned char *)a2)
      {
        *(void *)(a2 + 5) = *(void *)(a1 + 5);
        *(void *)a2 = *(void *)a1;
        *(unsigned char *)(a2 + 12) = 7;
      }
      return;
    case 9:
      uint64_t v7 = *(uint64_t **)(*(void *)a1 + 24);
      uint64_t v6 = *(uint64_t **)(*(void *)a1 + 32);
      if (v6 == v7)
      {
        uint64_t v2 = 0;
      }
      else
      {
        uint64_t v2 = *(void *)(*(void *)a1 + 8);
        if (v2)
        {
          uint64_t v2 = 1;
          do
          {
            uint64_t v8 = *v7++;
            v2 *= v8;
          }
          while (v7 != v6);
        }
      }
      goto LABEL_6;
    default:
LABEL_6:
      *(unsigned char *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(void *)a2 = v2;
      return;
  }
}

uint64_t std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1, a2[1]);
    std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, __n128 a3, uint64_t a4, void **a5)
{
  uint64_t v7 = (uint64_t **)std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, &v12, a2, a3);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    char v9 = v7;
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)a1, a5, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v9, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

char *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __n128 result = (char *)operator new(0x38uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((void *)result + 4) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(result + 32);
  uint64_t v8 = (char *)*a2;
  *((_DWORD *)result + 10) = 0;
  result[44] = 0;
  if (v8 != result + 32)
  {
    char v9 = *(atomic_ullong **)v8;
    *(void *)(result + 37) = *(void *)(v8 + 5);
    *uint64_t v7 = v9;
    unsigned int v10 = v8[12];
    result[44] = v10;
    BOOL v11 = v10 > 9;
    int v12 = (1 << v10) & 0x33C;
    if (!v11 && v12 != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  result[48] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::generic_aggregator(uint64_t a1, __int16 a2, uint64_t a3, __n128 a4)
{
  *(void *)a1 = &unk_26D76E730;
  *(_WORD *)(a1 + 8) = a2;
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)(a1 + 16), a3, a4);
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)(a1 + 40), a3, v6);
  return a1;
}

void sub_224183914(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(v2, *(void **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::~generic_aggregator(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E730;
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::new_instance()
{
}

void sub_2241839CC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C408284B88BLL);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::add_element_simple(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  switch(byte_268085B9C)
  {
    case 0:
      switch(a2[12])
      {
        case 0u:
          if (*(void *)a2 == turi::FLEX_UNDEFINED) {
            return;
          }
          goto LABEL_52;
        case 1u:
          a3.n128_u64[0] = *(void *)a2;
          uint64_t v5 = turi::FLEX_UNDEFINED;
          goto LABEL_102;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
            return;
          }
          goto LABEL_52;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(a2[12])
      {
        case 0u:
          a3.n128_u64[0] = turi::FLEX_UNDEFINED;
          uint64_t v5 = *(void *)a2;
LABEL_102:
          double v68 = (double)v5;
          goto LABEL_103;
        case 1u:
          a3.n128_u64[0] = *(void *)a2;
          double v68 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_103:
          if (a3.n128_f64[0] != v68) {
            goto LABEL_52;
          }
          return;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          a3.n128_f64[0] = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_111;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v6 = a2[12];
      if (v6 - 3 < 7 || v6 < 2) {
        goto LABEL_52;
      }
      if (v6 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v8 = *(void *)a2;
      char v9 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v10 = v9 < 0 ? *(void *)(v8 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v69 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(void *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v10 != v69) {
        goto LABEL_52;
      }
      unint64_t v70 = (unsigned __int8 *)(v8 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        unint64_t v70 = *(unsigned __int8 **)v70;
      }
      uint64_t v71 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        uint64_t v71 = *(unsigned __int8 **)v71;
      }
      if (v9 < 0)
      {
        if (memcmp(v70, v71, v10)) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!v10) {
          return;
        }
        do
        {
          if (*v70 != *v71) {
            goto LABEL_52;
          }
          ++v70;
          ++v71;
          --v10;
        }
        while (v10);
      }
      return;
    case 3:
      unsigned int v11 = a2[12];
      if (v11 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v11 == 3)
      {
        int v12 = *(unint64_t **)(*(void *)a2 + 8);
        uint64_t v13 = *(unint64_t **)(*(void *)a2 + 16);
        unint64_t v14 = v13 - v12;
        uint64_t v15 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v14 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v15) >> 3)
        {
          if (v13 == v12) {
            return;
          }
          uint64_t v16 = v14 <= 1 ? 1 : v13 - v12;
          a3.n128_u64[0] = *v12;
          if (*(double *)v12 == *v15)
          {
            uint64_t v17 = 1;
            do
            {
              unint64_t v18 = v17;
              if (v16 == v17) {
                break;
              }
              a3.n128_u64[0] = v12[v17];
              double v19 = v15[v17++];
            }
            while (a3.n128_f64[0] == v19);
            if (v18 >= v14) {
              return;
            }
          }
        }
      }
      goto LABEL_52;
    case 4:
      unsigned int v20 = a2[12];
      if (v20 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v20 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t *)(*(void *)a2 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_52;
    case 5:
      unsigned int v21 = a2[12];
      if (v21 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v21 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_52;
    case 6:
      switch(a2[12])
      {
        case 0u:
          if (*(void *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268085B98) {
            return;
          }
          goto LABEL_52;
        case 1u:
          a3.n128_f64[0] = vabdd_f64(*(double *)a2, (double)dword_268085B98 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_111:
          if (a3.n128_f64[0] < 0.0000005) {
            return;
          }
          goto LABEL_52;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_268085B98)
          {
            return;
          }
          goto LABEL_52;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v22 = a2[12];
      if (v22 < 7 || v22 - 8 < 2) {
        goto LABEL_52;
      }
      if (v22 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    case 8:
      unsigned int v23 = a2[12];
      if (v23 >= 8 && v23 != 9)
      {
        if (v23 != 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (turi::image_type::operator==(*(void *)a2 + 8, turi::FLEX_UNDEFINED + 8)) {
          return;
        }
      }
      goto LABEL_52;
    case 9:
      unsigned int v25 = a2[12];
      if (v25 < 9) {
        goto LABEL_52;
      }
      if (v25 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v33 = turi::FLEX_UNDEFINED;
      uint64_t v34 = *(void **)a2;
      if (turi::FLEX_UNDEFINED == *(void *)a2) {
        return;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v34 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_52;
      }
      unsigned int v36 = (char *)v34[3];
      uint64_t v35 = (char *)v34[4];
      uint64_t v37 = v35 - v36;
      if (v35 == v36) {
        return;
      }
      if (!v34[1]) {
        return;
      }
      uint64_t v38 = 1;
      do
      {
        uint64_t v39 = *(void *)v36;
        v36 += 8;
        v38 *= v39;
      }
      while (v36 != v35);
      if (!v38) {
        return;
      }
      uint64_t v73 = 0;
      std::vector<unsigned long>::vector(&v74, v37 >> 3, &v73);
      uint64_t v40 = (uint64_t *)v74;
      uint64_t v41 = v75;
      uint64_t v42 = **(void **)(v33 + 8);
      uint64_t v43 = (char *)v75 - v74;
      unint64_t v44 = ((char *)v75 - v74) >> 3;
      unint64_t v45 = v44 - 1;
      if (v44 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = ((char *)v75 - v74) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v41 == v40)
    {
      uint64_t v54 = 0;
      a3.n128_u64[0] = *(void *)(*(void *)v34[1] + 8 * v34[9]);
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t *)v34[6];
      unint64_t v49 = v40;
      uint64_t v50 = v46;
      do
      {
        uint64_t v52 = *v49++;
        uint64_t v51 = v52;
        uint64_t v53 = *v48++;
        v47 += v53 * v51;
        --v50;
      }
      while (v50);
      uint64_t v54 = 0;
      a3.n128_u64[0] = *(void *)(*(void *)v34[1] + 8 * (v34[9] + v47));
      uint64_t v55 = *(uint64_t **)(v33 + 48);
      uint64_t v56 = v40;
      uint64_t v57 = v46;
      do
      {
        uint64_t v59 = *v56++;
        uint64_t v58 = v59;
        uint64_t v60 = *v55++;
        v54 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    if (a3.n128_f64[0] != *(double *)(v42 + 8 * (*(void *)(v33 + 72) + v54))) {
      break;
    }
    uint64_t v61 = v44;
    uint64_t v62 = v44 - 1;
    if (v43 >= 1)
    {
      uint64_t v63 = v34[3];
      unint64_t v64 = v40[v45] + 1;
      v40[v45] = v64;
      unint64_t v65 = (v43 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v62 = v44 - 1;
      if (v64 >= *(void *)(v63 + 8 * v45))
      {
        while (1)
        {
          *(uint64_t *)((char *)v40 + v65 + 8) = 0;
          if (v62 <= 0) {
            break;
          }
          --v62;
          unint64_t v66 = *(uint64_t *)((char *)v40 + v65) + 1;
          *(uint64_t *)((char *)v40 + v65) = v66;
          unint64_t v67 = *(void *)(v63 + v65);
          v65 -= 8;
          if (v66 < v67)
          {
            uint64_t v61 = 1;
            goto LABEL_97;
          }
        }
LABEL_100:
        unint64_t v75 = v40;
        operator delete(v40);
        return;
      }
      uint64_t v61 = 1;
      uint64_t v62 = v44 - 1;
    }
LABEL_97:
    if (!v61 || v62 < 0)
    {
      if (!v40) {
        return;
      }
      goto LABEL_100;
    }
  }
  if (v40)
  {
    unint64_t v75 = v40;
    operator delete(v40);
  }
LABEL_52:
  double v26 = *(double *)a2;
  size_t v27 = *(char **)(*(void *)a2 + 8);
  for (uint64_t i = *(char **)(*(void *)&v26 + 16); v27 != i; v27 += 32)
  {
    uint64_t v29 = v27[28];
    int v30 = v27[28];
    unint64_t v31 = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::find<turi::flexible_type>(a1 + 40, (uint64_t)v27, a3);
    if ((void *)(a1 + 48) == v31)
    {
      if (!*(unsigned char *)(a1 + 8))
      {
        unint64_t v74 = v27;
        *((unsigned char *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)(a1 + 40), (uint64_t)v27, a3, (uint64_t)&std::piecewise_construct, (void **)&v74)+ 48) = v30;
      }
    }
    else
    {
      int v32 = *((unsigned __int8 *)v31 + 48);
      if (v30 != 7)
      {
        if (v32 == 7)
        {
          LOBYTE(v32) = v30;
        }
        else if (v30 || v32 != 1)
        {
          if (v30 != 1 || *((unsigned char *)v31 + 48))
          {
            if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (int)v29 + *((char *)v31 + 48)])
            {
              if (turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v31 + 48) + v29]) {
                LOBYTE(v32) = v30;
              }
              else {
                LOBYTE(v32) = 2;
              }
            }
          }
          else
          {
            LOBYTE(v32) = 1;
          }
        }
      }
      unint64_t v74 = v27;
      *((unsigned char *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)(a1 + 40), (uint64_t)v27, a3, (uint64_t)&std::piecewise_construct, (void **)&v74)+ 48) = v32;
    }
  }
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine()
{
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::emit(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v4 = &v9;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>((uint64_t)&v4, *(void **)(a1 + 40), (void *)(a1 + 48), *(void *)(a1 + 56));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2);
}

void sub_22418439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type()
{
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name()
{
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save()
{
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load()
{
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::~generic_aggregator(uint64_t a1)
{
  *(void *)a1 = &unk_26D76E730;
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  JUMPOUT(0x22A614FA0);
}

void *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::find<turi::flexible_type>(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 v3 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (!v4) {
    return v3;
  }
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (void *)(a1 + 8);
  do
  {
    int v8 = std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v6, (uint64_t)(v4 + 4), a2);
    uint64_t v9 = v4 + 1;
    if (!v8)
    {
      uint64_t v9 = v4;
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v7 == v3 || std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v6, a2, (uint64_t)(v7 + 4))) {
    return v3;
  }
  return v7;
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  __n128 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22418460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v14 = 2 * v9 + 16;
      *(void *)(a1 + 40) = v14;
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,turi::flex_type_enum>,false,void>::exec(a1, a2 + 4);
      unsigned int v11 = (void *)a2[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)a2[2];
          BOOL v13 = *v12 == (void)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,turi::flex_type_enum>,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2);
  uint64_t v4 = a2 + 2;
  if (*(void *)a1)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v6)
    {
      size_t v7 = 2 * v6 + 2;
      *(void *)(a1 + 40) = v7;
      int v8 = *(void **)(a1 + 16);
      if (v8)
      {
        uint64_t result = (unsigned char *)*v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
          uint64_t result = **(unsigned char ***)(a1 + 16);
        }
        else if (!v10)
        {
          v8[1] = &result[v7];
        }
      }
      else
      {
        uint64_t result = malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(unsigned char **)(a1 + 24);
    }
    result[(*(void *)(a1 + 32))++] = *v4;
  }
  return result;
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  __n128 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224184A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  __n128 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224184C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  __n128 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224184E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  __n128 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22418505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  __n128 v3 = (turi::iarchive *)result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return std::istream::read();
  }
  uint64_t v5 = *(void *)(result + 24);
  unint64_t v9 = *(void *)(v4 + v5);
  *(void *)(result + 24) = v5 + 8;
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      memset(v13, 0, 13);
      char v14 = 0;
      turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,false,void>::exec(v3, (uint64_t)v13);
      *(void *)&v11[5] = *(void *)((char *)v13 + 5);
      *(void *)std::vector<char>::size_type v11 = v13[0];
      v11[12] = BYTE4(v13[1]);
      if (BYTE4(v13[1]) <= 9u && ((1 << SBYTE4(v13[1])) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v11, 1uLL);
      }
      char v12 = v14;
      std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>::operator=[abi:ne180100]((uint64_t)v10, (uint64_t)v11, v7);
      std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)v11);
      uint64_t result = std::pair<turi::flexible_type,turi::flex_type_enum>::~pair((uint64_t)v13);
    }
  }
  return result;
}

void sub_224185290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4 = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum>>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, a2, a3);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (uint64_t *)v4[1];
  if (v5)
  {
    do
    {
      unint64_t v6 = v5;
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      unint64_t v6 = (uint64_t *)v4[2];
      BOOL v7 = *v6 == (void)v4;
      uint64_t v4 = v6;
    }
    while (!v7);
  }
  *(void *)(a1 + 8) = v6;
  return a1;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (unint64_t *)a2);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    *(unsigned char *)(a2 + 16) = *(unsigned char *)(v4 + (*((void *)a1 + 3))++);
  }
  else
  {
    std::istream::read();
  }
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum>>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  BOOL v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v19, &v18, a3, a5);
  int v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    unint64_t v9 = (uint64_t **)v7;
    BOOL v10 = (char *)operator new(0x38uLL);
    v16[0] = v10;
    v16[1] = a1 + 1;
    *((void *)v10 + 4) = *(void *)a4;
    char v17 = 0;
    *(void *)(v10 + 37) = *(void *)(a4 + 5);
    unsigned int v11 = *(unsigned __int8 *)(a4 + 12);
    v10[44] = v11;
    BOOL v12 = v11 > 9;
    int v13 = (1 << v11) & 0x33C;
    BOOL v14 = v12 || v13 == 0;
    int v8 = (uint64_t *)v10;
    if (!v14)
    {
      atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 4), 1uLL);
      int v8 = (uint64_t *)v16[0];
    }
    v10[48] = *(unsigned char *)(a4 + 16);
    char v17 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v19, v9, v8);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v8;
}

uint64_t std::pair<turi::flexible_type,turi::flex_type_enum>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unsigned int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          BOOL v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t *std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<turi::flexible_type,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8), a3);
  return a1;
}

void sub_2241856E8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<turi::flexible_type,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(uint64_t *result, void *a2, void *a3, __n128 a4)
{
  if (a2 != a3)
  {
    atomic_ullong *volatile v5 = a2;
    unint64_t v6 = (uint64_t **)result;
    atomic_ullong *volatile v7 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum> const&>(v6, v7, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4), a4);
      atomic_ullong *volatile v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          atomic_ullong *volatile v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          atomic_ullong *volatile v5 = v9;
        }
        while (!v10);
      }
      atomic_ullong *volatile v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum> const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  atomic_ullong *volatile v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v13, &v12, a3, a5);
  atomic_ullong *volatile v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (uint64_t **)v7;
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::pair<turi::flexible_type const,turi::flex_type_enum> const&>((uint64_t)a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v9, v11[0]);
    atomic_ullong *volatile v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

char *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::pair<turi::flexible_type const,turi::flex_type_enum> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = (char *)operator new(0x38uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((void *)result + 4) = 0;
  atomic_ullong *volatile v7 = (atomic_ullong *volatile *)(result + 32);
  *((_DWORD *)result + 10) = 0;
  result[44] = 0;
  if (result + 32 != (char *)a2)
  {
    *(void *)(result + 37) = *(void *)(a2 + 5);
    *atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
    unsigned int v8 = *(unsigned __int8 *)(a2 + 12);
    result[44] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  result[48] = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

char *std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E7D0;
  atomic_ullong *volatile v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E7D0;
  atomic_ullong *volatile v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  atomic_ullong *volatile v2 = operator new(0x20uLL);
  *atomic_ullong *volatile v2 = &unk_26D76E7D0;
  std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v2 + 1, v1);
  return v2;
}

void sub_224185A24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E7D0;
  return std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(a2 + 1, a1 + 8);
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy(uint64_t a1)
{
  atomic_ullong *volatile v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy_deallocate(void *__p)
{
  atomic_ullong *volatile v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  if (*(unsigned char *)(****(void ****)a2 + 16 * *(void *)(a2 + 8) + 12) == 7)
  {
    uint64_t v4 = **a3;
    if ((*a3)[1] != v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = **(void **)(v4 + v5) + 16 * (void)a3[1];
        switch(*(unsigned char *)(v7 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                if (*((char *)v8 + 31) < 0) {
                  operator delete((void *)v8[1]);
                }
                atomic_ullong *volatile v9 = v8;
                uint64_t v10 = 0x1012C404EF22A49;
                goto LABEL_35;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                uint64_t v12 = (void *)v11[1];
                if (v12)
                {
                  v11[2] = (atomic_ullong)v12;
                  operator delete(v12);
                }
                atomic_ullong *volatile v9 = v11;
                uint64_t v10 = 0x1080C409938AC02;
                goto LABEL_35;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                *(void *)&long long v165 = v13 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
                goto LABEL_21;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                *(void *)&long long v165 = v13 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
LABEL_21:
                atomic_ullong *volatile v9 = v13;
                uint64_t v10 = 0x1020C405E66F15BLL;
                goto LABEL_35;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v14 + 2);
                atomic_ullong *volatile v9 = v14;
                unsigned int v15 = -235920773;
                goto LABEL_34;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                char v17 = (void *)v16[6];
                if (v17)
                {
                  v16[7] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                uint64_t v18 = (void *)v16[3];
                if (v18)
                {
                  v16[4] = (atomic_ullong)v18;
                  operator delete(v18);
                }
                uint64_t v19 = (std::__shared_weak_count *)v16[2];
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
                atomic_ullong *volatile v9 = v16;
                unsigned int v15 = 2071181815;
LABEL_34:
                uint64_t v10 = v15 | 0x1030C4000000000;
LABEL_35:
                uint64_t result = MEMORY[0x22A614FA0](v9, v10);
              }
            }
            break;
          default:
            break;
        }
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 7;
        ++v6;
        uint64_t v4 = **a3;
        v5 += 16;
      }
      while (v6 < ((*a3)[1] - v4) >> 4);
    }
  }
  else
  {
    uint64_t v20 = result;
    if (*(void *)(result + 16) != *(void *)(result + 8))
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        uint64_t v24 = ****(void ****)a2 + 16 * *(void *)(a2 + 8);
        uint64_t v25 = *(uint64_t *)v24 >> 56;
        if ((int)v25 < 0) {
          int v26 = 25;
        }
        else {
          int v26 = -25;
        }
        int v27 = v26 + v25;
        if (v27 == 64) {
          int v28 = 0;
        }
        else {
          int v28 = 900 * v27;
        }
        uint64_t v169 = turi::flexible_type_impl::ptime_from_time_t(((uint64_t)(*(void *)v24 << 8) >> 8) + v28, 0);
        uint64_t v168 = 0;
        long long v166 = 0u;
        long long v167 = 0u;
        long long v165 = 0u;
        LODWORD(v170) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v169);
        uint64_t result = boost::gregorian::to_tm((boost::gregorian *)&v170, (uint64_t)&v165);
        uint64_t v29 = v169;
        unint64_t v30 = 0x7FFFFFFFFFFFFFFELL;
        if (v169 == 0x8000000000000000) {
          unint64_t v30 = 0x8000000000000000;
        }
        if (v169 != 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v29 = v30;
        }
        if ((unint64_t)(v169 - 0x7FFFFFFFFFFFFFFELL) > 2) {
          uint64_t v29 = v169 % 86400000000;
        }
        LODWORD(v165) = (int)(v29 / 1000000) % 60;
        DWORD1(v165) = (int)(v29 / 60000000) % 60;
        DWORD2(v165) = (int)v29 / -694967296;
        LODWORD(v167) = -1;
        switch(*(_DWORD *)(*(void *)(v20 + 8) + 4 * v23))
        {
          case 1:
            uint64_t v36 = (int)v166;
            uint64_t v32 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v32 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    if (*((char *)v37 + 31) < 0) {
                      operator delete((void *)v37[1]);
                    }
                    atomic_ullong *volatile v38 = v37;
                    uint64_t v39 = 0x1012C404EF22A49;
                    goto LABEL_174;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v84 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    int v85 = (void *)v84[1];
                    if (v85)
                    {
                      v84[2] = (atomic_ullong)v85;
                      operator delete(v85);
                    }
                    atomic_ullong *volatile v38 = v84;
                    uint64_t v39 = 0x1080C409938AC02;
                    goto LABEL_174;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    double v170 = (void **)(v86 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_160;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    double v170 = (void **)(v86 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_160:
                    atomic_ullong *volatile v38 = v86;
                    uint64_t v39 = 0x1020C405E66F15BLL;
                    goto LABEL_174;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v87 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v87 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v87, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v32 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v88 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    unint64_t v89 = (void *)v88[6];
                    if (v89)
                    {
                      v88[7] = (atomic_ullong)v89;
                      operator delete(v89);
                    }
                    long long v90 = (void *)v88[3];
                    if (v90)
                    {
                      v88[4] = (atomic_ullong)v90;
                      operator delete(v90);
                    }
                    uint64_t v91 = (std::__shared_weak_count *)v88[2];
                    if (v91) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                    }
                    atomic_ullong *volatile v38 = v88;
                    uint64_t v39 = 0x1030C407B73B9F7;
LABEL_174:
                    uint64_t result = MEMORY[0x22A614FA0](v38, v39);
                  }
                }
                break;
              default:
                break;
            }
            uint64_t v83 = v36 + 1;
            goto LABEL_176;
          case 2:
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v41 + 31) < 0) {
                      operator delete((void *)v41[1]);
                    }
                    atomic_ullong *volatile v42 = v41;
                    uint64_t v43 = 0x1012C404EF22A49;
                    goto LABEL_202;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v92 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    unsigned int v93 = (void *)v92[1];
                    if (v93)
                    {
                      v92[2] = (atomic_ullong)v93;
                      operator delete(v93);
                    }
                    atomic_ullong *volatile v42 = v92;
                    uint64_t v43 = 0x1080C409938AC02;
                    goto LABEL_202;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v94 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v94 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_188;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v94 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v94 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_188:
                    atomic_ullong *volatile v42 = v94;
                    uint64_t v43 = 0x1020C405E66F15BLL;
                    goto LABEL_202;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v95 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v95 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v95, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v96 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v97 = (void *)v96[6];
                    if (v97)
                    {
                      v96[7] = (atomic_ullong)v97;
                      operator delete(v97);
                    }
                    uint64_t v98 = (void *)v96[3];
                    if (v98)
                    {
                      v96[4] = (atomic_ullong)v98;
                      operator delete(v98);
                    }
                    uint64_t v99 = (std::__shared_weak_count *)v96[2];
                    if (v99) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
                    }
                    atomic_ullong *volatile v42 = v96;
                    uint64_t v43 = 0x1030C407B73B9F7;
LABEL_202:
                    uint64_t result = MEMORY[0x22A614FA0](v42, v43);
                  }
                }
                break;
              default:
                break;
            }
            *(void *)uint64_t v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = SHIDWORD(v165);
            goto LABEL_367;
          case 3:
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v44 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v44 + 31) < 0) {
                      operator delete((void *)v44[1]);
                    }
                    atomic_ullong *volatile v45 = v44;
                    uint64_t v46 = 0x1012C404EF22A49;
                    goto LABEL_229;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v101 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    BOOL v102 = (void *)v101[1];
                    if (v102)
                    {
                      v101[2] = (atomic_ullong)v102;
                      operator delete(v102);
                    }
                    atomic_ullong *volatile v45 = v101;
                    uint64_t v46 = 0x1080C409938AC02;
                    goto LABEL_229;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v103 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v103 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_215;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v103 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v103 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_215:
                    atomic_ullong *volatile v45 = v103;
                    uint64_t v46 = 0x1020C405E66F15BLL;
                    goto LABEL_229;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v104 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v104 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v104, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v105 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    size_t v106 = (void *)v105[6];
                    if (v106)
                    {
                      v105[7] = (atomic_ullong)v106;
                      operator delete(v106);
                    }
                    uint64_t v107 = (void *)v105[3];
                    if (v107)
                    {
                      v105[4] = (atomic_ullong)v107;
                      operator delete(v107);
                    }
                    uint64_t v108 = (std::__shared_weak_count *)v105[2];
                    if (v108) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v108);
                    }
                    atomic_ullong *volatile v45 = v105;
                    uint64_t v46 = 0x1030C407B73B9F7;
LABEL_229:
                    uint64_t result = MEMORY[0x22A614FA0](v45, v46);
                  }
                }
                break;
              default:
                break;
            }
            *(void *)uint64_t v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = SDWORD2(v165);
            goto LABEL_367;
          case 4:
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v47 + 31) < 0) {
                      operator delete((void *)v47[1]);
                    }
                    atomic_ullong *volatile v48 = v47;
                    uint64_t v49 = 0x1012C404EF22A49;
                    goto LABEL_256;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v109 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    unint64_t v110 = (void *)v109[1];
                    if (v110)
                    {
                      v109[2] = (atomic_ullong)v110;
                      operator delete(v110);
                    }
                    atomic_ullong *volatile v48 = v109;
                    uint64_t v49 = 0x1080C409938AC02;
                    goto LABEL_256;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v111 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v111 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_242;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v111 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v111 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_242:
                    atomic_ullong *volatile v48 = v111;
                    uint64_t v49 = 0x1020C405E66F15BLL;
                    goto LABEL_256;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v112 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v112 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v112, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v113 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    int v114 = (void *)v113[6];
                    if (v114)
                    {
                      v113[7] = (atomic_ullong)v114;
                      operator delete(v114);
                    }
                    unsigned int v115 = (void *)v113[3];
                    if (v115)
                    {
                      v113[4] = (atomic_ullong)v115;
                      operator delete(v115);
                    }
                    float v116 = (std::__shared_weak_count *)v113[2];
                    if (v116) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v116);
                    }
                    atomic_ullong *volatile v48 = v113;
                    uint64_t v49 = 0x1030C407B73B9F7;
LABEL_256:
                    uint64_t result = MEMORY[0x22A614FA0](v48, v49);
                  }
                }
                break;
              default:
                break;
            }
            *(void *)uint64_t v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = SDWORD1(v165);
            goto LABEL_367;
          case 5:
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v50 + 31) < 0) {
                      operator delete((void *)v50[1]);
                    }
                    atomic_ullong *volatile v51 = v50;
                    uint64_t v52 = 0x1012C404EF22A49;
                    goto LABEL_283;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v117 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    unint64_t v118 = (void *)v117[1];
                    if (v118)
                    {
                      v117[2] = (atomic_ullong)v118;
                      operator delete(v118);
                    }
                    atomic_ullong *volatile v51 = v117;
                    uint64_t v52 = 0x1080C409938AC02;
                    goto LABEL_283;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v119 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v119 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_269;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v119 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v119 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_269:
                    atomic_ullong *volatile v51 = v119;
                    uint64_t v52 = 0x1020C405E66F15BLL;
                    goto LABEL_283;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v120 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v120, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v121 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    uint64_t v122 = (void *)v121[6];
                    if (v122)
                    {
                      v121[7] = (atomic_ullong)v122;
                      operator delete(v122);
                    }
                    long long v123 = (void *)v121[3];
                    if (v123)
                    {
                      v121[4] = (atomic_ullong)v123;
                      operator delete(v123);
                    }
                    uint64_t v124 = (std::__shared_weak_count *)v121[2];
                    if (v124) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v124);
                    }
                    atomic_ullong *volatile v51 = v121;
                    uint64_t v52 = 0x1030C407B73B9F7;
LABEL_283:
                    uint64_t result = MEMORY[0x22A614FA0](v51, v52);
                  }
                }
                break;
              default:
                break;
            }
            *(void *)uint64_t v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = (int)v165;
            goto LABEL_367;
          case 6:
            int v53 = DWORD2(v166);
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v54 + 31) < 0) {
                      operator delete((void *)v54[1]);
                    }
                    atomic_ullong *volatile v55 = v54;
                    uint64_t v56 = 0x1012C404EF22A49;
                    goto LABEL_310;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v125 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    unint64_t v126 = (void *)v125[1];
                    if (v126)
                    {
                      v125[2] = (atomic_ullong)v126;
                      operator delete(v126);
                    }
                    atomic_ullong *volatile v55 = v125;
                    uint64_t v56 = 0x1080C409938AC02;
                    goto LABEL_310;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v127 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v127 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_296;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v127 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v127 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_296:
                    atomic_ullong *volatile v55 = v127;
                    uint64_t v56 = 0x1020C405E66F15BLL;
                    goto LABEL_310;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v128 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v128 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v128, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v129 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    uint64_t v130 = (void *)v129[6];
                    if (v130)
                    {
                      v129[7] = (atomic_ullong)v130;
                      operator delete(v130);
                    }
                    size_t v131 = (void *)v129[3];
                    if (v131)
                    {
                      v129[4] = (atomic_ullong)v131;
                      operator delete(v131);
                    }
                    int v132 = (std::__shared_weak_count *)v129[2];
                    if (v132) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v132);
                    }
                    atomic_ullong *volatile v55 = v129;
                    uint64_t v56 = 0x1030C407B73B9F7;
LABEL_310:
                    uint64_t result = MEMORY[0x22A614FA0](v55, v56);
                  }
                }
                break;
              default:
                break;
            }
            LODWORD(v100) = (v53 + 6) % 7;
            goto LABEL_339;
          case 7:
            int v57 = DWORD2(v166);
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v58 + 31) < 0) {
                      operator delete((void *)v58[1]);
                    }
                    atomic_ullong *volatile v59 = v58;
                    uint64_t v60 = 0x1012C404EF22A49;
                    goto LABEL_337;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v133 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    uint64_t v134 = (void *)v133[1];
                    if (v134)
                    {
                      v133[2] = (atomic_ullong)v134;
                      operator delete(v134);
                    }
                    atomic_ullong *volatile v59 = v133;
                    uint64_t v60 = 0x1080C409938AC02;
                    goto LABEL_337;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v135 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v135 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_323;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v135 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v135 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_323:
                    atomic_ullong *volatile v59 = v135;
                    uint64_t v60 = 0x1020C405E66F15BLL;
                    goto LABEL_337;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v136 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v136 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v136, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v137 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    int v138 = (void *)v137[6];
                    if (v138)
                    {
                      v137[7] = (atomic_ullong)v138;
                      operator delete(v138);
                    }
                    uint64_t v139 = (void *)v137[3];
                    if (v139)
                    {
                      v137[4] = (atomic_ullong)v139;
                      operator delete(v139);
                    }
                    uint64_t v140 = (std::__shared_weak_count *)v137[2];
                    if (v140) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v140);
                    }
                    atomic_ullong *volatile v59 = v137;
                    uint64_t v60 = 0x1030C407B73B9F7;
LABEL_337:
                    uint64_t result = MEMORY[0x22A614FA0](v59, v60);
                  }
                }
                break;
              default:
                break;
            }
            LODWORD(v100) = (v57 + 6) % 7 + 1;
LABEL_339:
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = (int)v100;
            goto LABEL_367;
          case 8:
            uint64_t v40 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v40 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v61 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    if (*((char *)v61 + 31) < 0) {
                      operator delete((void *)v61[1]);
                    }
                    atomic_ullong *volatile v62 = v61;
                    uint64_t v63 = 0x1012C404EF22A49;
                    goto LABEL_365;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v141 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    uint64_t v142 = (void *)v141[1];
                    if (v142)
                    {
                      v141[2] = (atomic_ullong)v142;
                      operator delete(v142);
                    }
                    atomic_ullong *volatile v62 = v141;
                    uint64_t v63 = 0x1080C409938AC02;
                    goto LABEL_365;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v143 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v143 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_351;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v143 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    double v170 = (void **)(v143 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_351:
                    atomic_ullong *volatile v62 = v143;
                    uint64_t v63 = 0x1020C405E66F15BLL;
                    goto LABEL_365;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v144 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v144 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v144, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v40 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v40, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v145 = *(atomic_ullong *volatile *)v40;
                  if (*(void *)v40)
                  {
                    unint64_t v146 = (void *)v145[6];
                    if (v146)
                    {
                      v145[7] = (atomic_ullong)v146;
                      operator delete(v146);
                    }
                    uint64_t v147 = (void *)v145[3];
                    if (v147)
                    {
                      v145[4] = (atomic_ullong)v147;
                      operator delete(v147);
                    }
                    unint64_t v148 = (std::__shared_weak_count *)v145[2];
                    if (v148) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v148);
                    }
                    atomic_ullong *volatile v62 = v145;
                    uint64_t v63 = 0x1030C407B73B9F7;
LABEL_365:
                    uint64_t result = MEMORY[0x22A614FA0](v62, v63);
                  }
                }
                break;
              default:
                break;
            }
            *(void *)uint64_t v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            *(unsigned char *)(v40 + 12) = 0;
            uint64_t v100 = SDWORD2(v166);
LABEL_367:
            *(void *)uint64_t v40 = v100;
            break;
          case 9:
            uint64_t v64 = *(int *)(v24 + 8);
            uint64_t v65 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v65 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    if (*((char *)v66 + 31) < 0) {
                      operator delete((void *)v66[1]);
                    }
                    atomic_ullong *volatile v67 = v66;
                    uint64_t v68 = 0x1012C404EF22A49;
                    goto LABEL_393;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v149 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    unint64_t v150 = (void *)v149[1];
                    if (v150)
                    {
                      v149[2] = (atomic_ullong)v150;
                      operator delete(v150);
                    }
                    atomic_ullong *volatile v67 = v149;
                    uint64_t v68 = 0x1080C409938AC02;
                    goto LABEL_393;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v151 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    double v170 = (void **)(v151 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_379;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v151 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    double v170 = (void **)(v151 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_379:
                    atomic_ullong *volatile v67 = v151;
                    uint64_t v68 = 0x1020C405E66F15BLL;
                    goto LABEL_393;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v152 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v152 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v152, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v65 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v153 = *(atomic_ullong *volatile *)v65;
                  if (*(void *)v65)
                  {
                    unint64_t v154 = (void *)v153[6];
                    if (v154)
                    {
                      v153[7] = (atomic_ullong)v154;
                      operator delete(v154);
                    }
                    unsigned int v155 = (void *)v153[3];
                    if (v155)
                    {
                      v153[4] = (atomic_ullong)v155;
                      operator delete(v155);
                    }
                    double v156 = (std::__shared_weak_count *)v153[2];
                    if (v156) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v156);
                    }
                    atomic_ullong *volatile v67 = v153;
                    uint64_t v68 = 0x1030C407B73B9F7;
LABEL_393:
                    uint64_t result = MEMORY[0x22A614FA0](v67, v68);
                  }
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(v65 + 8) = 0;
            *(unsigned char *)(v65 + 12) = 0;
            *(void *)uint64_t v65 = v64;
            break;
          case 0xA:
            int v69 = *(char *)(v24 + 7);
            if (v69 < 0) {
              int v70 = 25;
            }
            else {
              int v70 = -25;
            }
            uint64_t v71 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v71 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    if (*((char *)v72 + 31) < 0) {
                      operator delete((void *)v72[1]);
                    }
                    atomic_ullong *volatile v73 = v72;
                    uint64_t v74 = 0x1012C404EF22A49;
                    goto LABEL_420;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v157 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    size_t v158 = (void *)v157[1];
                    if (v158)
                    {
                      v157[2] = (atomic_ullong)v158;
                      operator delete(v158);
                    }
                    atomic_ullong *volatile v73 = v157;
                    uint64_t v74 = 0x1080C409938AC02;
                    goto LABEL_420;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v159 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    double v170 = (void **)(v159 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_406;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v159 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    double v170 = (void **)(v159 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_406:
                    atomic_ullong *volatile v73 = v159;
                    uint64_t v74 = 0x1020C405E66F15BLL;
                    goto LABEL_420;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v160 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v160 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v160, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v71 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v161 = *(atomic_ullong *volatile *)v71;
                  if (*(void *)v71)
                  {
                    int v162 = (void *)v161[6];
                    if (v162)
                    {
                      v161[7] = (atomic_ullong)v162;
                      operator delete(v162);
                    }
                    uint64_t v163 = (void *)v161[3];
                    if (v163)
                    {
                      v161[4] = (atomic_ullong)v163;
                      operator delete(v163);
                    }
                    unint64_t v164 = (std::__shared_weak_count *)v161[2];
                    if (v164) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v164);
                    }
                    atomic_ullong *volatile v73 = v161;
                    uint64_t v74 = 0x1030C407B73B9F7;
LABEL_420:
                    uint64_t result = MEMORY[0x22A614FA0](v73, v74);
                  }
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(v71 + 8) = 0;
            *(unsigned char *)(v71 + 12) = 1;
            *(double *)uint64_t v71 = (double)(v70 + v69) * 0.25;
            break;
          default:
            uint64_t v31 = SDWORD1(v166);
            uint64_t v32 = **(void **)(**a3 + v22) + 16 * (void)a3[1];
            switch(*(unsigned char *)(v32 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    if (*((char *)v33 + 31) < 0) {
                      operator delete((void *)v33[1]);
                    }
                    atomic_ullong *volatile v34 = v33;
                    uint64_t v35 = 0x1012C404EF22A49;
                    goto LABEL_147;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v75 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    unint64_t v76 = (void *)v75[1];
                    if (v76)
                    {
                      v75[2] = (atomic_ullong)v76;
                      operator delete(v76);
                    }
                    atomic_ullong *volatile v34 = v75;
                    uint64_t v35 = 0x1080C409938AC02;
                    goto LABEL_147;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v77 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    double v170 = (void **)(v77 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v170);
                    goto LABEL_133;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v77 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    double v170 = (void **)(v77 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v170);
LABEL_133:
                    atomic_ullong *volatile v34 = v77;
                    uint64_t v35 = 0x1020C405E66F15BLL;
                    goto LABEL_147;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v78 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v78 + 2);
                    uint64_t result = MEMORY[0x22A614FA0](v78, 0x1030C40F1F0227BLL);
                  }
                  *(void *)uint64_t v32 = 0;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v79 = *(atomic_ullong *volatile *)v32;
                  if (*(void *)v32)
                  {
                    size_t v80 = (void *)v79[6];
                    if (v80)
                    {
                      v79[7] = (atomic_ullong)v80;
                      operator delete(v80);
                    }
                    unsigned int v81 = (void *)v79[3];
                    if (v81)
                    {
                      v79[4] = (atomic_ullong)v81;
                      operator delete(v81);
                    }
                    uint64_t v82 = (std::__shared_weak_count *)v79[2];
                    if (v82) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
                    }
                    atomic_ullong *volatile v34 = v79;
                    uint64_t v35 = 0x1030C407B73B9F7;
LABEL_147:
                    uint64_t result = MEMORY[0x22A614FA0](v34, v35);
                  }
                }
                break;
              default:
                break;
            }
            uint64_t v83 = v31 + 1900;
LABEL_176:
            *(_DWORD *)(v32 + 8) = 0;
            *(unsigned char *)(v32 + 12) = 0;
            *(void *)uint64_t v32 = v83;
            break;
        }
        ++v23;
        v22 += 16;
      }
      while (v23 < (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 2);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E860;
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E860;
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  atomic_ullong *volatile v2 = operator new(0x38uLL);
  *atomic_ullong *volatile v2 = &unk_26D76E860;
  std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_224187818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76E860;
  return std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator()(uint64_t a1, uint64_t a2, uint64_t **a3)
{
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((void *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (atomic_ullong *volatile *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  if (a2 != a1)
  {
    uint64_t v5 = *(atomic_ullong **)(a2 + 32);
    *(void *)(a1 + 37) = *(void *)(a2 + 37);
    *uint64_t v4 = v5;
    unsigned int v6 = *(unsigned __int8 *)(a2 + 44);
    *(unsigned char *)(a1 + 44) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  return a1;
}

void turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::operator()(unsigned __int8 *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)(****(void ****)a2 + 16 * *(void *)(a2 + 8));
  if (v4[12] == 7)
  {
    uint64_t v5 = **a3;
    if ((*a3)[1] != v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = **(void **)(v5 + v6) + 16 * (void)a3[1];
        if ((uint64_t *)v8 != &turi::FLEX_UNDEFINED)
        {
          switch(*(unsigned char *)(v8 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v8;
                if (!*(void *)v8) {
                  goto LABEL_37;
                }
                if (*((char *)v9 + 31) < 0) {
                  operator delete((void *)v9[1]);
                }
                atomic_ullong *volatile v10 = v9;
                uint64_t v11 = 0x1012C404EF22A49;
                goto LABEL_36;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v8;
                if (!*(void *)v8) {
                  goto LABEL_37;
                }
                uint64_t v19 = (void *)v18[1];
                if (v19)
                {
                  v18[2] = (atomic_ullong)v19;
                  operator delete(v19);
                }
                atomic_ullong *volatile v10 = v18;
                uint64_t v11 = 0x1080C409938AC02;
                goto LABEL_36;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v8;
                if (!*(void *)v8) {
                  goto LABEL_37;
                }
                unsigned int v352 = (void **)(v12 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v352);
                goto LABEL_31;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v8;
                if (!*(void *)v8) {
                  goto LABEL_37;
                }
                unsigned int v352 = (void **)(v12 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v352);
LABEL_31:
                atomic_ullong *volatile v10 = v12;
                uint64_t v11 = 0x1020C405E66F15BLL;
                goto LABEL_36;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v8;
                if (!*(void *)v8) {
                  goto LABEL_37;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
                atomic_ullong *volatile v10 = v20;
                unsigned int v17 = -235920773;
                goto LABEL_35;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v8;
                if (*(void *)v8)
                {
                  atomic_ullong *volatile v14 = (void *)v13[6];
                  if (v14)
                  {
                    v13[7] = (atomic_ullong)v14;
                    operator delete(v14);
                  }
                  unsigned int v15 = (void *)v13[3];
                  if (v15)
                  {
                    v13[4] = (atomic_ullong)v15;
                    operator delete(v15);
                  }
                  atomic_ullong *volatile v16 = (std::__shared_weak_count *)v13[2];
                  if (v16) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
                  }
                  atomic_ullong *volatile v10 = v13;
                  unsigned int v17 = 2071181815;
LABEL_35:
                  uint64_t v11 = v17 | 0x1030C4000000000;
LABEL_36:
                  MEMORY[0x22A614FA0](v10, v11);
                }
LABEL_37:
                *(void *)uint64_t v8 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v21 = turi::FLEX_UNDEFINED;
          *(void *)(v8 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
          *(void *)uint64_t v8 = v21;
          LODWORD(v21) = byte_268085B9C;
          *(unsigned char *)(v8 + 12) = byte_268085B9C;
          BOOL v22 = v21 > 9;
          int v23 = (1 << v21) & 0x33C;
          if (!v22 && v23 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v8, 1uLL);
          }
        }
        ++v7;
        uint64_t v5 = **a3;
        v6 += 16;
      }
      while (v7 < ((*a3)[1] - v5) >> 4);
    }
    return;
  }
  int v26 = *a1;
  if (v26 == 5)
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v352, (const turi::flexible_type *)(****(void ****)a2 + 16 * *(void *)(a2 + 8)));
    if ((*a3)[1] == **a3)
    {
LABEL_663:
      double v358 = COERCE_DOUBLE(&v354);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
      double v358 = COERCE_DOUBLE(&v353);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
      return;
    }
    uint64_t v131 = 0;
    while (1)
    {
      if (turi::flex_dict_view::has_key((unsigned __int8 ***)&v352, (const turi::flexible_type *)(*((void *)a1 + 1) + 16 * v131)))
      {
        int v132 = turi::flex_dict_view::operator[]((unsigned __int8 ***)&v352, (turi::flexible_type_impl *)(*((void *)a1 + 1) + 16 * v131));
        switch(a1[44])
        {
          case 0u:
            switch(v132[12])
            {
              case 0u:
                if (*(void *)v132 == *((void *)a1 + 4)) {
                  goto LABEL_386;
                }
                goto LABEL_328;
              case 1u:
                double v189 = *(double *)v132;
                uint64_t v190 = *((void *)a1 + 4);
                goto LABEL_380;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_328;
              case 6u:
                if (*((void *)a1 + 4) == (uint64_t)(*(void *)v132 << 8) >> 8 && !*((_DWORD *)v132 + 2)) {
                  goto LABEL_386;
                }
                goto LABEL_328;
              default:
                goto LABEL_668;
            }
          case 1u:
            switch(v132[12])
            {
              case 0u:
                double v189 = *((double *)a1 + 4);
                uint64_t v190 = *(void *)v132;
LABEL_380:
                double v212 = (double)v190;
                goto LABEL_381;
              case 1u:
                double v189 = *(double *)v132;
                double v212 = *((double *)a1 + 4);
LABEL_381:
                if (v189 != v212) {
                  goto LABEL_328;
                }
                goto LABEL_386;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_328;
              case 6u:
                double v211 = vabdd_f64((double)*((int *)v132 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v132 << 8) >> 8), *((double *)a1 + 4));
                goto LABEL_385;
              default:
                goto LABEL_668;
            }
          case 2u:
            unsigned int v173 = v132[12];
            if (v173 - 3 < 7 || v173 < 2) {
              goto LABEL_328;
            }
            if (v173 != 2) {
              goto LABEL_668;
            }
            double v175 = *(double *)v132;
            char v176 = *(unsigned char *)(*(void *)v132 + 31);
            if (v176 < 0) {
              size_t v177 = *(void *)(*(void *)&v175 + 16);
            }
            else {
              size_t v177 = *(unsigned __int8 *)(*(void *)v132 + 31);
            }
            uint64_t v227 = *((void *)a1 + 4);
            if (*(char *)(v227 + 31) < 0) {
              uint64_t v228 = *(void *)(v227 + 16);
            }
            else {
              uint64_t v228 = *(unsigned __int8 *)(v227 + 31);
            }
            if (v177 != v228) {
              goto LABEL_328;
            }
            char v229 = (unsigned __int8 *)(*(void *)&v175 + 8);
            if (v176 < 0) {
              char v229 = *(unsigned __int8 **)v229;
            }
            uint64_t v230 = (unsigned __int8 *)(v227 + 8);
            if ((*(unsigned char *)(v227 + 31) & 0x80) != 0) {
              uint64_t v230 = *(unsigned __int8 **)v230;
            }
            if (v176 < 0)
            {
              if (memcmp(v229, v230, v177)) {
                goto LABEL_328;
              }
            }
            else
            {
              if (!v177) {
                goto LABEL_386;
              }
              do
              {
                if (*v229 != *v230) {
                  goto LABEL_328;
                }
                ++v229;
                ++v230;
                --v177;
              }
              while (v177);
            }
            goto LABEL_386;
          case 3u:
            unsigned int v178 = v132[12];
            if (v178 > 9) {
              goto LABEL_668;
            }
            if (v178 != 3) {
              goto LABEL_328;
            }
            uint64_t v179 = *(double **)(*(void *)v132 + 8);
            uint64_t v180 = *(double **)(*(void *)v132 + 16);
            unint64_t v181 = v180 - v179;
            size_t v182 = *(double **)(*((void *)a1 + 4) + 8);
            if (v181 != (uint64_t)(*(void *)(*((void *)a1 + 4) + 16) - (void)v182) >> 3) {
              goto LABEL_328;
            }
            if (v180 == v179) {
              goto LABEL_386;
            }
            if (v181 <= 1) {
              uint64_t v183 = 1;
            }
            else {
              uint64_t v183 = v180 - v179;
            }
            if (*v179 == *v182)
            {
              uint64_t v184 = 1;
              do
              {
                unint64_t v185 = v184;
                if (v183 == v184) {
                  break;
                }
                double v186 = v179[v184];
                double v187 = v182[v184++];
              }
              while (v186 == v187);
              char v134 = v185 >= v181;
LABEL_370:
              if (v134) {
                goto LABEL_386;
              }
            }
            goto LABEL_328;
          case 4u:
            unsigned int v133 = v132[12];
            if (v133 > 9) {
              goto LABEL_668;
            }
            if (v133 != 4) {
              goto LABEL_328;
            }
            char v134 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v356, (uint64_t *)(*(void *)v132 + 8), (void *)(*((void *)a1 + 4) + 8));
            goto LABEL_370;
          case 5u:
            unsigned int v191 = v132[12];
            if (v191 > 9) {
              goto LABEL_668;
            }
            if (v191 != 5) {
              goto LABEL_328;
            }
            char v134 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v356, (uint64_t **)(*(void *)v132 + 8), (uint64_t **)(*((void *)a1 + 4) + 8));
            goto LABEL_370;
          case 6u:
            switch(v132[12])
            {
              case 0u:
                if (*(void *)v132 == (uint64_t)(*((void *)a1 + 4) << 8) >> 8 && !*((_DWORD *)a1 + 10)) {
                  goto LABEL_386;
                }
                goto LABEL_328;
              case 1u:
                double v211 = vabdd_f64(*(double *)v132, (double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((void *)a1 + 4) << 8) >> 8));
LABEL_385:
                if (v211 < 0.0000005) {
                  goto LABEL_386;
                }
                goto LABEL_328;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_328;
              case 6u:
                if (((*((void *)a1 + 4) ^ *(void *)v132) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v132 + 2) == *((_DWORD *)a1 + 10))
                {
                  goto LABEL_386;
                }
                goto LABEL_328;
              default:
                goto LABEL_668;
            }
          case 7u:
            unsigned int v188 = v132[12];
            if (v188 < 7 || v188 - 8 < 2) {
              goto LABEL_328;
            }
            if (v188 != 7) {
              goto LABEL_668;
            }
            goto LABEL_386;
          case 8u:
            unsigned int v192 = v132[12];
            if (v192 < 8 || v192 == 9) {
              goto LABEL_328;
            }
            if (v192 != 8) {
              goto LABEL_668;
            }
            char v134 = turi::image_type::operator==(*(void *)v132 + 8, *((void *)a1 + 4) + 8);
            goto LABEL_370;
          case 9u:
            unsigned int v135 = v132[12];
            if (v135 < 9) {
              goto LABEL_328;
            }
            if (v135 != 9) {
              goto LABEL_668;
            }
            uint64_t v136 = *((void *)a1 + 4);
            atomic_ullong *volatile v137 = *(void **)v132;
            if (v136 == *(void *)v132) {
              goto LABEL_386;
            }
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v137 + 1), v136 + 8)) {
              goto LABEL_328;
            }
            uint64_t v139 = (char *)v137[3];
            int v138 = (char *)v137[4];
            uint64_t v140 = v138 - v139;
            if (v138 == v139) {
              goto LABEL_386;
            }
            if (!v137[1]) {
              goto LABEL_386;
            }
            uint64_t v141 = 1;
            do
            {
              uint64_t v142 = *(void *)v139;
              v139 += 8;
              v141 *= v142;
            }
            while (v139 != v138);
            if (!v141) {
              goto LABEL_386;
            }
            uint64_t v357 = 0;
            std::vector<unsigned long>::vector(&v358, v140 >> 3, &v357);
            atomic_ullong *volatile v143 = *(void ***)&v358;
            atomic_ullong *volatile v144 = v359;
            uint64_t v145 = **(void **)(v136 + 8);
            uint64_t v146 = (uint64_t)v359 - *(void *)&v358;
            unint64_t v147 = ((uint64_t)v359 - *(void *)&v358) >> 3;
            unint64_t v148 = v147 - 1;
            if (v147 <= 1) {
              uint64_t v149 = 1;
            }
            else {
              uint64_t v149 = ((uint64_t)v359 - *(void *)&v358) >> 3;
            }
            break;
          default:
            goto LABEL_668;
        }
        do
        {
          if (v144 == v143)
          {
            uint64_t v157 = 0;
            double v158 = *(double *)(*(void *)v137[1] + 8 * v137[9]);
          }
          else
          {
            uint64_t v150 = 0;
            atomic_ullong *volatile v151 = (uint64_t *)v137[6];
            atomic_ullong *volatile v152 = v143;
            uint64_t v153 = v149;
            do
            {
              uint64_t v155 = (uint64_t)*v152++;
              uint64_t v154 = v155;
              uint64_t v156 = *v151++;
              v150 += v156 * v154;
              --v153;
            }
            while (v153);
            uint64_t v157 = 0;
            double v158 = *(double *)(*(void *)v137[1] + 8 * (v137[9] + v150));
            atomic_ullong *volatile v159 = *(uint64_t **)(v136 + 48);
            atomic_ullong *volatile v160 = v143;
            uint64_t v161 = v149;
            do
            {
              uint64_t v163 = (uint64_t)*v160++;
              uint64_t v162 = v163;
              uint64_t v164 = *v159++;
              v157 += v164 * v162;
              --v161;
            }
            while (v161);
          }
          double v165 = *(double *)(v145 + 8 * (*(void *)(v136 + 72) + v157));
          if (v158 != v165) {
            break;
          }
          uint64_t v166 = v147;
          uint64_t v167 = v147 - 1;
          if (v146 >= 1)
          {
            uint64_t v168 = v137[3];
            unint64_t v169 = (unint64_t)v143[v148] + 1;
            v143[v148] = (void *)v169;
            unint64_t v170 = (v146 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v167 = v147 - 1;
            if (v169 >= *(void *)(v168 + 8 * v148))
            {
              while (1)
              {
                *(void **)((char *)v143 + v170 + 8) = 0;
                if (v167 <= 0) {
                  break;
                }
                --v167;
                unint64_t v171 = *(unint64_t *)((char *)v143 + v170) + 1;
                *(void **)((char *)v143 + v170) = (void *)v171;
                unint64_t v172 = *(void *)(v168 + v170);
                v170 -= 8;
                if (v171 < v172)
                {
                  uint64_t v166 = 1;
                  goto LABEL_284;
                }
              }
              v359 = v143;
              operator delete(v143);
              goto LABEL_386;
            }
            uint64_t v166 = 1;
            uint64_t v167 = v147 - 1;
          }
LABEL_284:
          ;
        }
        while ((v167 & 0x8000000000000000) == 0 && v166);
        if (v143)
        {
          v359 = v143;
          operator delete(v143);
        }
        if (v158 == v165) {
          goto LABEL_386;
        }
LABEL_328:
        int v194 = turi::flex_dict_view::operator[]((unsigned __int8 ***)&v352, (turi::flexible_type_impl *)(*((void *)a1 + 1) + 16 * v131));
        uint64_t v195 = **(void **)(**a3 + 16 * v131) + 16 * (void)a3[1];
        if (v194 == (unsigned __int8 *)v195) {
          goto LABEL_423;
        }
        switch(*(unsigned char *)(v195 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v196 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_361;
              }
              if (*((char *)v196 + 31) < 0) {
                operator delete((void *)v196[1]);
              }
              atomic_ullong *volatile v197 = v196;
              uint64_t v198 = 0x1012C404EF22A49;
              goto LABEL_360;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v205 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_361;
              }
              int v206 = (void *)v205[1];
              if (v206)
              {
                v205[2] = (atomic_ullong)v206;
                operator delete(v206);
              }
              atomic_ullong *volatile v197 = v205;
              uint64_t v198 = 0x1080C409938AC02;
              goto LABEL_360;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v199 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_361;
              }
              *(void *)&double v358 = v199 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              goto LABEL_355;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v199 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_361;
              }
              *(void *)&double v358 = v199 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
LABEL_355:
              atomic_ullong *volatile v197 = v199;
              uint64_t v198 = 0x1020C405E66F15BLL;
              goto LABEL_360;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v207 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_361;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v207 + 2);
              atomic_ullong *volatile v197 = v207;
              unsigned int v204 = -235920773;
              goto LABEL_359;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v200 = *(atomic_ullong *volatile *)v195;
              if (*(void *)v195)
              {
                uint64_t v201 = (void *)v200[6];
                if (v201)
                {
                  v200[7] = (atomic_ullong)v201;
                  operator delete(v201);
                }
                uint64_t v202 = (void *)v200[3];
                if (v202)
                {
                  v200[4] = (atomic_ullong)v202;
                  operator delete(v202);
                }
                uint64_t v203 = (std::__shared_weak_count *)v200[2];
                if (v203) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v203);
                }
                atomic_ullong *volatile v197 = v200;
                unsigned int v204 = 2071181815;
LABEL_359:
                uint64_t v198 = v204 | 0x1030C4000000000;
LABEL_360:
                MEMORY[0x22A614FA0](v197, v198);
              }
LABEL_361:
              *(void *)uint64_t v195 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v208 = *(void *)v194;
        *(void *)(v195 + 5) = *(void *)(v194 + 5);
        *(void *)uint64_t v195 = v208;
        LODWORD(v208) = v194[12];
        *(unsigned char *)(v195 + 12) = v208;
        BOOL v22 = v208 > 9;
        int v209 = (1 << v208) & 0x33C;
        if (v22 || v209 == 0) {
          goto LABEL_423;
        }
      }
      else
      {
LABEL_386:
        uint64_t v195 = **(void **)(**a3 + 16 * v131) + 16 * (void)a3[1];
        if ((uint64_t *)v195 == &turi::FLEX_UNDEFINED) {
          goto LABEL_423;
        }
        switch(*(unsigned char *)(v195 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v213 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_419;
              }
              if (*((char *)v213 + 31) < 0) {
                operator delete((void *)v213[1]);
              }
              atomic_ullong *volatile v214 = v213;
              uint64_t v215 = 0x1012C404EF22A49;
              goto LABEL_418;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v222 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_419;
              }
              long long v223 = (void *)v222[1];
              if (v223)
              {
                v222[2] = (atomic_ullong)v223;
                operator delete(v223);
              }
              atomic_ullong *volatile v214 = v222;
              uint64_t v215 = 0x1080C409938AC02;
              goto LABEL_418;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v216 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_419;
              }
              *(void *)&double v358 = v216 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              goto LABEL_413;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v216 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_419;
              }
              *(void *)&double v358 = v216 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
LABEL_413:
              atomic_ullong *volatile v214 = v216;
              uint64_t v215 = 0x1020C405E66F15BLL;
              goto LABEL_418;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v224 = *(atomic_ullong *volatile *)v195;
              if (!*(void *)v195) {
                goto LABEL_419;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v224 + 2);
              atomic_ullong *volatile v214 = v224;
              unsigned int v221 = -235920773;
              goto LABEL_417;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v195, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v217 = *(atomic_ullong *volatile *)v195;
              if (*(void *)v195)
              {
                int v218 = (void *)v217[6];
                if (v218)
                {
                  v217[7] = (atomic_ullong)v218;
                  operator delete(v218);
                }
                char v219 = (void *)v217[3];
                if (v219)
                {
                  v217[4] = (atomic_ullong)v219;
                  operator delete(v219);
                }
                uint64_t v220 = (std::__shared_weak_count *)v217[2];
                if (v220) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v220);
                }
                atomic_ullong *volatile v214 = v217;
                unsigned int v221 = 2071181815;
LABEL_417:
                uint64_t v215 = v221 | 0x1030C4000000000;
LABEL_418:
                MEMORY[0x22A614FA0](v214, v215);
              }
LABEL_419:
              *(void *)uint64_t v195 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v225 = turi::FLEX_UNDEFINED;
        *(void *)(v195 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(void *)uint64_t v195 = v225;
        unsigned int v226 = byte_268085B9C;
        *(unsigned char *)(v195 + 12) = byte_268085B9C;
        if (v226 > 9 || ((1 << v226) & 0x33C) == 0) {
          goto LABEL_423;
        }
      }
      atomic_fetch_add(*(atomic_ullong *volatile *)v195, 1uLL);
LABEL_423:
      if (++v131 >= (unint64_t)(((*a3)[1] - **a3) >> 4)) {
        goto LABEL_663;
      }
    }
  }
  if (v26 == 4)
  {
    if ((*a3)[1] != **a3)
    {
      unint64_t v27 = 0;
      do
      {
        unint64_t v28 = *(void *)(*((void *)a1 + 1) + 16 * v27);
        unint64_t v29 = 1;
        switch(v4[12])
        {
          case 3u:
            unint64_t v30 = (void *)(*(void *)v4 + 8);
            uint64_t v31 = (void *)(*(void *)v4 + 16);
            char v32 = 3;
            goto LABEL_53;
          case 4u:
            unint64_t v30 = (void *)(*(void *)v4 + 8);
            uint64_t v31 = (void *)(*(void *)v4 + 16);
            char v32 = 4;
            goto LABEL_53;
          case 5u:
            unint64_t v30 = (void *)(*(void *)v4 + 8);
            uint64_t v31 = (void *)(*(void *)v4 + 16);
            char v32 = 5;
LABEL_53:
            unint64_t v29 = (uint64_t)(*v31 - *v30) >> v32;
            goto LABEL_54;
          case 9u:
            uint64_t v35 = *(uint64_t **)(*(void *)v4 + 24);
            atomic_ullong *volatile v34 = *(uint64_t **)(*(void *)v4 + 32);
            if (v34 == v35 || !*(void *)(*(void *)v4 + 8)) {
              goto LABEL_192;
            }
            unint64_t v29 = 1;
            do
            {
              uint64_t v36 = *v35++;
              v29 *= v36;
            }
            while (v35 != v34);
LABEL_54:
            if (v29 <= v28) {
              goto LABEL_192;
            }
            break;
          default:
            goto LABEL_54;
        }
        atomic_ullong *volatile v33 = (unsigned __int8 *)(*(void *)(*(void *)v4 + 8) + 16 * v28);
        switch(a1[44])
        {
          case 0u:
            switch(v33[12])
            {
              case 0u:
                if (*(void *)v33 == *((void *)a1 + 4)) {
                  goto LABEL_192;
                }
                goto LABEL_133;
              case 1u:
                double v90 = *(double *)v33;
                uint64_t v91 = *((void *)a1 + 4);
                goto LABEL_186;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_133;
              case 6u:
                if (*((void *)a1 + 4) == (uint64_t)(*(void *)v33 << 8) >> 8 && !*((_DWORD *)v33 + 2)) {
                  goto LABEL_192;
                }
                goto LABEL_133;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 1u:
            switch(v33[12])
            {
              case 0u:
                double v90 = *((double *)a1 + 4);
                uint64_t v91 = *(void *)v33;
LABEL_186:
                double v112 = (double)v91;
                goto LABEL_187;
              case 1u:
                double v90 = *(double *)v33;
                double v112 = *((double *)a1 + 4);
LABEL_187:
                if (v90 != v112) {
                  goto LABEL_133;
                }
                goto LABEL_192;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_133;
              case 6u:
                double v111 = vabdd_f64((double)*((int *)v33 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v33 << 8) >> 8), *((double *)a1 + 4));
                goto LABEL_191;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 2u:
            unsigned int v77 = v33[12];
            BOOL v78 = v77 - 3 >= 7 && v77 >= 2;
            if (!v78) {
              goto LABEL_133;
            }
            if (v77 != 2) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            double v79 = *(double *)v33;
            int v80 = *(char *)(*(void *)v33 + 31);
            uint64_t v81 = *(unsigned __int8 *)(*(void *)v33 + 31);
            size_t v82 = v80 < 0 ? *(void *)(*(void *)&v79 + 16) : v81;
            uint64_t v127 = *((void *)a1 + 4);
            uint64_t v128 = *(char *)(v127 + 31) < 0 ? *(void *)(v127 + 16) : *(unsigned __int8 *)(v127 + 31);
            if (v82 != v128) {
              goto LABEL_133;
            }
            atomic_ullong *volatile v129 = (unsigned __int8 *)(*(void *)&v79 + 8);
            if ((v81 & 0x80) != 0) {
              atomic_ullong *volatile v129 = *(unsigned __int8 **)v129;
            }
            uint64_t v130 = (unsigned __int8 *)(v127 + 8);
            if ((*(unsigned char *)(v127 + 31) & 0x80) != 0) {
              uint64_t v130 = *(unsigned __int8 **)v130;
            }
            if ((v81 & 0x80) != 0)
            {
              if (memcmp(v129, v130, v82)) {
                goto LABEL_133;
              }
            }
            else
            {
              if (!v82) {
                goto LABEL_192;
              }
              do
              {
                if (*v129 != *v130) {
                  goto LABEL_133;
                }
                ++v129;
                ++v130;
                --v82;
              }
              while (v82);
            }
            goto LABEL_192;
          case 3u:
            unsigned int v83 = v33[12];
            if (v83 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v83 != 3) {
              goto LABEL_133;
            }
            uint64_t v86 = *(void *)v33 + 8;
            atomic_ullong *volatile v84 = *(double **)v86;
            int v85 = *(double **)(v86 + 8);
            unint64_t v87 = ((uint64_t)v85 - *(void *)v86) >> 3;
            atomic_ullong *volatile v88 = *(double **)(*((void *)a1 + 4) + 8);
            if (v87 != (uint64_t)(*(void *)(*((void *)a1 + 4) + 16) - (void)v88) >> 3) {
              goto LABEL_133;
            }
            if (v85 == v84) {
              goto LABEL_192;
            }
            if (v87 <= 1) {
              unint64_t v87 = 1;
            }
            while (*v84 == *v88)
            {
              ++v84;
              ++v88;
              if (!--v87) {
                goto LABEL_192;
              }
            }
            goto LABEL_133;
          case 4u:
            unsigned int v37 = v33[12];
            if (v37 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v37 != 4) {
              goto LABEL_133;
            }
            char v38 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v357, (uint64_t *)(*(void *)v33 + 8), (void *)(*((void *)a1 + 4) + 8));
            goto LABEL_126;
          case 5u:
            unsigned int v92 = v33[12];
            if (v92 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v92 != 5) {
              goto LABEL_133;
            }
            char v38 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v357, (uint64_t **)(*(void *)v33 + 8), (uint64_t **)(*((void *)a1 + 4) + 8));
LABEL_126:
            if (v38) {
              goto LABEL_192;
            }
            goto LABEL_133;
          case 6u:
            switch(v33[12])
            {
              case 0u:
                if (*(void *)v33 == (uint64_t)(*((void *)a1 + 4) << 8) >> 8 && !*((_DWORD *)a1 + 10)) {
                  goto LABEL_192;
                }
                goto LABEL_133;
              case 1u:
                double v111 = vabdd_f64(*(double *)v33, (double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((void *)a1 + 4) << 8) >> 8));
LABEL_191:
                if (v111 < 0.0000005) {
                  goto LABEL_192;
                }
                goto LABEL_133;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_133;
              case 6u:
                if (((*((void *)a1 + 4) ^ *(void *)v33) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v33 + 2) == *((_DWORD *)a1 + 10))
                {
                  goto LABEL_192;
                }
                goto LABEL_133;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7u:
            unsigned int v89 = v33[12];
            if (v89 < 7 || v89 - 8 < 2) {
              goto LABEL_133;
            }
            if (v89 != 7) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_192;
          case 8u:
            unsigned int v93 = v33[12];
            if (v93 < 8) {
              goto LABEL_133;
            }
            if (v93 != 8)
            {
              if (v93 != 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_133;
            }
            if (!turi::image_type::operator==(*(void *)v33 + 8, *((void *)a1 + 4) + 8)) {
              goto LABEL_133;
            }
            goto LABEL_192;
          case 9u:
            unsigned int v39 = v33[12];
            if (v39 < 9) {
              goto LABEL_133;
            }
            if (v39 != 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            uint64_t v40 = *((void *)a1 + 4);
            atomic_ullong *volatile v41 = *(void **)v33;
            if (v40 == *(void *)v33) {
              goto LABEL_192;
            }
            uint64_t v350 = *((void *)a1 + 4);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v41 + 1), v40 + 8)) {
              goto LABEL_133;
            }
            uint64_t v43 = (char *)v41[3];
            atomic_ullong *volatile v42 = (char *)v41[4];
            uint64_t v44 = v42 - v43;
            if (v42 == v43) {
              goto LABEL_192;
            }
            if (!v41[1]) {
              goto LABEL_192;
            }
            uint64_t v45 = 1;
            do
            {
              uint64_t v46 = *(void *)v43;
              v43 += 8;
              v45 *= v46;
            }
            while (v43 != v42);
            if (!v45) {
              goto LABEL_192;
            }
            double v358 = 0.0;
            std::vector<unsigned long>::vector(&v352, v44 >> 3, &v358);
            atomic_ullong *volatile v47 = v352;
            atomic_ullong *volatile v48 = v353;
            uint64_t v49 = **(void **)(v350 + 8);
            uint64_t v50 = (char *)v353 - (char *)v352;
            unint64_t v51 = v353 - v352;
            unint64_t v52 = v51 - 1;
            if (v51 <= 1) {
              uint64_t v53 = 1;
            }
            else {
              uint64_t v53 = v353 - v352;
            }
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        do
        {
          if (v48 == v47)
          {
            uint64_t v61 = 0;
            double v62 = *(double *)(*(void *)v41[1] + 8 * v41[9]);
          }
          else
          {
            uint64_t v54 = 0;
            atomic_ullong *volatile v55 = (uint64_t *)v41[6];
            uint64_t v56 = v47;
            uint64_t v57 = v53;
            do
            {
              uint64_t v59 = (uint64_t)*v56++;
              uint64_t v58 = v59;
              uint64_t v60 = *v55++;
              v54 += v60 * v58;
              --v57;
            }
            while (v57);
            uint64_t v61 = 0;
            double v62 = *(double *)(*(void *)v41[1] + 8 * (v41[9] + v54));
            uint64_t v63 = *(uint64_t **)(v350 + 48);
            uint64_t v64 = v47;
            uint64_t v65 = v53;
            do
            {
              uint64_t v67 = (uint64_t)*v64++;
              uint64_t v66 = v67;
              uint64_t v68 = *v63++;
              v61 += v68 * v66;
              --v65;
            }
            while (v65);
          }
          double v69 = *(double *)(v49 + 8 * (*(void *)(v350 + 72) + v61));
          if (v62 != v69) {
            break;
          }
          uint64_t v70 = v51;
          uint64_t v71 = v51 - 1;
          if (v50 >= 1)
          {
            uint64_t v72 = v41[3];
            unint64_t v73 = (unint64_t)v47[v52] + 1;
            v47[v52] = (void *)v73;
            unint64_t v74 = (v50 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v71 = v51 - 1;
            if (v73 >= *(void *)(v72 + 8 * v52))
            {
              while (1)
              {
                *(void **)((char *)v47 + v74 + 8) = 0;
                if (v71 <= 0) {
                  break;
                }
                --v71;
                unint64_t v75 = *(unint64_t *)((char *)v47 + v74) + 1;
                *(void **)((char *)v47 + v74) = (void *)v75;
                unint64_t v76 = *(void *)(v72 + v74);
                v74 -= 8;
                if (v75 < v76)
                {
                  uint64_t v70 = 1;
                  goto LABEL_94;
                }
              }
              uint64_t v353 = v47;
              operator delete(v47);
LABEL_192:
              uint64_t v95 = **(void **)(**a3 + 16 * v27) + 16 * (void)a3[1];
              if ((uint64_t *)v95 != &turi::FLEX_UNDEFINED)
              {
                switch(*(unsigned char *)(v95 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v113 = *(atomic_ullong *volatile *)v95;
                      if (!*(void *)v95) {
                        goto LABEL_225;
                      }
                      if (*((char *)v113 + 31) < 0) {
                        operator delete((void *)v113[1]);
                      }
                      atomic_ullong *volatile v114 = v113;
                      uint64_t v115 = 0x1012C404EF22A49;
                      goto LABEL_224;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v122 = *(atomic_ullong *volatile *)v95;
                      if (!*(void *)v95) {
                        goto LABEL_225;
                      }
                      long long v123 = (void *)v122[1];
                      if (v123)
                      {
                        v122[2] = (atomic_ullong)v123;
                        operator delete(v123);
                      }
                      atomic_ullong *volatile v114 = v122;
                      uint64_t v115 = 0x1080C409938AC02;
                      goto LABEL_224;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v116 = *(atomic_ullong *volatile *)v95;
                      if (!*(void *)v95) {
                        goto LABEL_225;
                      }
                      unsigned int v352 = (void **)(v116 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v352);
                      goto LABEL_219;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v116 = *(atomic_ullong *volatile *)v95;
                      if (!*(void *)v95) {
                        goto LABEL_225;
                      }
                      unsigned int v352 = (void **)(v116 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v352);
LABEL_219:
                      atomic_ullong *volatile v114 = v116;
                      uint64_t v115 = 0x1020C405E66F15BLL;
                      goto LABEL_224;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v124 = *(atomic_ullong *volatile *)v95;
                      if (!*(void *)v95) {
                        goto LABEL_225;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v124 + 2);
                      atomic_ullong *volatile v114 = v124;
                      unsigned int v121 = -235920773;
                      goto LABEL_223;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v117 = *(atomic_ullong *volatile *)v95;
                      if (*(void *)v95)
                      {
                        unint64_t v118 = (void *)v117[6];
                        if (v118)
                        {
                          v117[7] = (atomic_ullong)v118;
                          operator delete(v118);
                        }
                        atomic_ullong *volatile v119 = (void *)v117[3];
                        if (v119)
                        {
                          v117[4] = (atomic_ullong)v119;
                          operator delete(v119);
                        }
                        atomic_ullong *volatile v120 = (std::__shared_weak_count *)v117[2];
                        if (v120) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v120);
                        }
                        atomic_ullong *volatile v114 = v117;
                        unsigned int v121 = 2071181815;
LABEL_223:
                        uint64_t v115 = v121 | 0x1030C4000000000;
LABEL_224:
                        MEMORY[0x22A614FA0](v114, v115);
                      }
LABEL_225:
                      *(void *)uint64_t v95 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v125 = turi::FLEX_UNDEFINED;
                *(void *)(v95 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                *(void *)uint64_t v95 = v125;
                unsigned int v126 = byte_268085B9C;
                *(unsigned char *)(v95 + 12) = byte_268085B9C;
                if (v126 <= 9 && ((1 << v126) & 0x33C) != 0) {
                  goto LABEL_228;
                }
              }
              goto LABEL_229;
            }
            uint64_t v70 = 1;
            uint64_t v71 = v51 - 1;
          }
LABEL_94:
          ;
        }
        while ((v71 & 0x8000000000000000) == 0 && v70);
        if (v47)
        {
          uint64_t v353 = v47;
          operator delete(v47);
        }
        if (v62 == v69) {
          goto LABEL_192;
        }
LABEL_133:
        uint64_t v94 = *(void *)(*(void *)v4 + 8) + 16 * v28;
        uint64_t v95 = **(void **)(**a3 + 16 * v27) + 16 * (void)a3[1];
        if (v94 != v95)
        {
          switch(*(unsigned char *)(v95 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v96 = *(atomic_ullong *volatile *)v95;
                if (!*(void *)v95) {
                  goto LABEL_166;
                }
                if (*((char *)v96 + 31) < 0) {
                  operator delete((void *)v96[1]);
                }
                atomic_ullong *volatile v97 = v96;
                uint64_t v98 = 0x1012C404EF22A49;
                goto LABEL_165;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v105 = *(atomic_ullong *volatile *)v95;
                if (!*(void *)v95) {
                  goto LABEL_166;
                }
                size_t v106 = (void *)v105[1];
                if (v106)
                {
                  v105[2] = (atomic_ullong)v106;
                  operator delete(v106);
                }
                atomic_ullong *volatile v97 = v105;
                uint64_t v98 = 0x1080C409938AC02;
                goto LABEL_165;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v99 = *(atomic_ullong *volatile *)v95;
                if (!*(void *)v95) {
                  goto LABEL_166;
                }
                unsigned int v352 = (void **)(v99 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v352);
                goto LABEL_160;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v99 = *(atomic_ullong *volatile *)v95;
                if (!*(void *)v95) {
                  goto LABEL_166;
                }
                unsigned int v352 = (void **)(v99 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v352);
LABEL_160:
                atomic_ullong *volatile v97 = v99;
                uint64_t v98 = 0x1020C405E66F15BLL;
                goto LABEL_165;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v107 = *(atomic_ullong *volatile *)v95;
                if (!*(void *)v95) {
                  goto LABEL_166;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v107 + 2);
                atomic_ullong *volatile v97 = v107;
                unsigned int v104 = -235920773;
                goto LABEL_164;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v95, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v100 = *(atomic_ullong *volatile *)v95;
                if (*(void *)v95)
                {
                  atomic_ullong *volatile v101 = (void *)v100[6];
                  if (v101)
                  {
                    v100[7] = (atomic_ullong)v101;
                    operator delete(v101);
                  }
                  BOOL v102 = (void *)v100[3];
                  if (v102)
                  {
                    v100[4] = (atomic_ullong)v102;
                    operator delete(v102);
                  }
                  atomic_ullong *volatile v103 = (std::__shared_weak_count *)v100[2];
                  if (v103) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                  }
                  atomic_ullong *volatile v97 = v100;
                  unsigned int v104 = 2071181815;
LABEL_164:
                  uint64_t v98 = v104 | 0x1030C4000000000;
LABEL_165:
                  MEMORY[0x22A614FA0](v97, v98);
                }
LABEL_166:
                *(void *)uint64_t v95 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v108 = *(void *)v94;
          *(void *)(v95 + 5) = *(void *)(v94 + 5);
          *(void *)uint64_t v95 = v108;
          LODWORD(v108) = *(unsigned __int8 *)(v94 + 12);
          *(unsigned char *)(v95 + 12) = v108;
          BOOL v22 = v108 > 9;
          int v109 = (1 << v108) & 0x33C;
          if (!v22 && v109 != 0) {
LABEL_228:
          }
            atomic_fetch_add(*(atomic_ullong *volatile *)v95, 1uLL);
        }
LABEL_229:
        ++v27;
      }
      while (v27 < ((*a3)[1] - **a3) >> 4);
    }
  }
  else if ((*a3)[1] != **a3)
  {
    uint64_t v231 = 0;
    while (1)
    {
      unint64_t v232 = *(void *)(*((void *)a1 + 1) + 16 * v231);
      int v233 = v4[12];
      unint64_t v234 = 1;
      switch(v4[12])
      {
        case 3u:
          std::string::size_type v235 = (void *)(*(void *)v4 + 8);
          uint64_t v236 = (void *)(*(void *)v4 + 16);
          char v237 = 3;
          goto LABEL_448;
        case 4u:
          std::string::size_type v235 = (void *)(*(void *)v4 + 8);
          uint64_t v236 = (void *)(*(void *)v4 + 16);
          char v237 = 4;
          goto LABEL_448;
        case 5u:
          std::string::size_type v235 = (void *)(*(void *)v4 + 8);
          uint64_t v236 = (void *)(*(void *)v4 + 16);
          char v237 = 5;
LABEL_448:
          unint64_t v234 = (uint64_t)(*v236 - *v235) >> v237;
          goto LABEL_449;
        case 9u:
          size_t v241 = *(uint64_t **)(*(void *)v4 + 24);
          unint64_t v240 = *(uint64_t **)(*(void *)v4 + 32);
          if (v240 == v241 || !*(void *)(*(void *)v4 + 8)) {
            goto LABEL_523;
          }
          unint64_t v234 = 1;
          do
          {
            uint64_t v242 = *v241++;
            v234 *= v242;
          }
          while (v241 != v240);
LABEL_449:
          if (v234 <= v232) {
            goto LABEL_523;
          }
          if (v233 == 1)
          {
            std::string::size_type v245 = v4;
            if (v232) {
LABEL_665:
            }
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          else
          {
            if (v233 == 9)
            {
              uint64_t v243 = *(void *)v4;
              unsigned int v244 = (uint64_t *)(*(void *)v4 + 8);
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v244);
              uint64_t v238 = (void *)*v244;
              unint64_t v239 = *(void *)(v243 + 72) + v232;
            }
            else
            {
              if (v233 != 3) {
                goto LABEL_665;
              }
              uint64_t v238 = (void *)(*(void *)v4 + 8);
              unint64_t v239 = *(void *)(*((void *)a1 + 1) + 16 * v231);
            }
            std::string::size_type v245 = (unsigned __int8 *)(*v238 + 8 * v239);
          }
          break;
        default:
          goto LABEL_449;
      }
      double v358 = 0.0;
      LODWORD(v359) = 0;
      BYTE4(v359) = 0;
      turi::flexible_type::operator=<double>((uint64_t)&v358, v245);
      switch(BYTE4(v359))
      {
        case 0:
          switch(a1[44])
          {
            case 0u:
              BOOL v246 = *((void *)a1 + 4) == *(void *)&v358;
              goto LABEL_633;
            case 1u:
              double v264 = *((double *)a1 + 4);
              uint64_t v265 = *(void *)&v358;
              goto LABEL_632;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_530;
            case 6u:
              BOOL v246 = *(void *)&v358 == (uint64_t)(*((void *)a1 + 4) << 8) >> 8 && *((_DWORD *)a1 + 10) == 0;
              goto LABEL_633;
            default:
              goto LABEL_668;
          }
        case 1:
          switch(a1[44])
          {
            case 0u:
              double v264 = v358;
              uint64_t v265 = *((void *)a1 + 4);
LABEL_632:
              BOOL v246 = v264 == (double)v265;
              goto LABEL_633;
            case 1u:
              BOOL v248 = *((double *)a1 + 4) == v358;
              goto LABEL_659;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_530;
            case 6u:
              double v340 = vabdd_f64((double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((void *)a1 + 4) << 8) >> 8), v358);
              goto LABEL_638;
            default:
              goto LABEL_668;
          }
        case 2:
          unsigned int v257 = a1[44];
          if (v257 - 3 >= 7 && v257 >= 2)
          {
            if (v257 != 2)
            {
LABEL_668:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
            }
            uint64_t v329 = *((void *)a1 + 4);
            if (*(char *)(v329 + 31) < 0) {
              size_t v330 = *(void *)(v329 + 16);
            }
            else {
              size_t v330 = *(unsigned __int8 *)(v329 + 31);
            }
            if (*(char *)(*(void *)&v358 + 31) < 0) {
              unint64_t v341 = *(void **)(*(void *)&v358 + 16);
            }
            else {
              unint64_t v341 = (void *)*(unsigned __int8 *)(*(void *)&v358 + 31);
            }
            if ((void *)v330 == v341)
            {
              long long v342 = (void *)(v329 + 8);
              if ((*(unsigned char *)(v329 + 31) & 0x80) != 0) {
                long long v342 = (void *)*v342;
              }
              uint64_t v343 = (void **)(*(void *)&v358 + 8);
              if ((*(unsigned char *)(*(void *)&v358 + 31) & 0x80) != 0) {
                uint64_t v343 = (void **)*v343;
              }
              if ((*(unsigned char *)(v329 + 31) & 0x80) != 0)
              {
                BOOL v246 = memcmp(v342, v343, v330) == 0;
LABEL_633:
                BOOL v248 = v246;
              }
              else if (v330)
              {
                size_t v344 = v330 - 1;
                do
                {
                  int v346 = *(unsigned __int8 *)v342;
                  long long v342 = (void *)((char *)v342 + 1);
                  int v345 = v346;
                  int v348 = *(unsigned __int8 *)v343;
                  uint64_t v343 = (void **)((char *)v343 + 1);
                  int v347 = v348;
                  BOOL v78 = v344-- != 0;
                  char v349 = v78;
                  BOOL v248 = v345 == v347;
                }
                while (v345 == v347 && (v349 & 1) != 0);
              }
              else
              {
LABEL_658:
                BOOL v248 = 1;
              }
            }
            else
            {
LABEL_657:
              BOOL v248 = 0;
            }
LABEL_659:
            switch(BYTE4(v359))
            {
              case 2:
                goto LABEL_485;
              case 3:
                goto LABEL_493;
              case 4:
                goto LABEL_468;
              case 5:
                goto LABEL_507;
              case 8:
                goto LABEL_517;
              case 9:
                goto LABEL_473;
              default:
                break;
            }
          }
          else
          {
            BOOL v248 = 0;
LABEL_485:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v258 = v358;
              if (v358 != 0.0)
              {
                if (*(char *)(*(void *)&v358 + 31) < 0) {
                  operator delete(*(void **)(*(void *)&v358 + 8));
                }
                double v255 = v258;
                uint64_t v259 = 0x1012C404EF22A49;
LABEL_521:
                MEMORY[0x22A614FA0](*(void *)&v255, v259);
              }
            }
          }
LABEL_522:
          if (v248)
          {
LABEL_523:
            uint64_t v269 = **(void **)(**a3 + 16 * v231) + 16 * (void)a3[1];
            if ((uint64_t *)v269 != &turi::FLEX_UNDEFINED)
            {
              switch(*(unsigned char *)(v269 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v270 = *(atomic_ullong *volatile *)v269;
                    if (!*(void *)v269) {
                      goto LABEL_560;
                    }
                    if (*((char *)v270 + 31) < 0) {
                      operator delete((void *)v270[1]);
                    }
                    atomic_ullong *volatile v271 = v270;
                    uint64_t v272 = 0x1012C404EF22A49;
                    goto LABEL_559;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v280 = *(atomic_ullong *volatile *)v269;
                    if (!*(void *)v269) {
                      goto LABEL_560;
                    }
                    double v281 = (void *)v280[1];
                    if (v281)
                    {
                      v280[2] = (atomic_ullong)v281;
                      operator delete(v281);
                    }
                    atomic_ullong *volatile v271 = v280;
                    uint64_t v272 = 0x1080C409938AC02;
                    goto LABEL_559;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v274 = *(atomic_ullong *volatile *)v269;
                    if (!*(void *)v269) {
                      goto LABEL_560;
                    }
                    unsigned int v352 = (void **)(v274 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v352);
                    goto LABEL_554;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v274 = *(atomic_ullong *volatile *)v269;
                    if (!*(void *)v269) {
                      goto LABEL_560;
                    }
                    unsigned int v352 = (void **)(v274 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v352);
LABEL_554:
                    atomic_ullong *volatile v271 = v274;
                    uint64_t v272 = 0x1020C405E66F15BLL;
                    goto LABEL_559;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v282 = *(atomic_ullong *volatile *)v269;
                    if (!*(void *)v269) {
                      goto LABEL_560;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v282 + 2);
                    atomic_ullong *volatile v271 = v282;
                    unsigned int v279 = -235920773;
                    goto LABEL_558;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v275 = *(atomic_ullong *volatile *)v269;
                    if (*(void *)v269)
                    {
                      unint64_t v276 = (void *)v275[6];
                      if (v276)
                      {
                        v275[7] = (atomic_ullong)v276;
                        operator delete(v276);
                      }
                      uint64_t v277 = (void *)v275[3];
                      if (v277)
                      {
                        v275[4] = (atomic_ullong)v277;
                        operator delete(v277);
                      }
                      std::string::size_type v278 = (std::__shared_weak_count *)v275[2];
                      if (v278) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v278);
                      }
                      atomic_ullong *volatile v271 = v275;
                      unsigned int v279 = 2071181815;
LABEL_558:
                      uint64_t v272 = v279 | 0x1030C4000000000;
LABEL_559:
                      MEMORY[0x22A614FA0](v271, v272);
                    }
LABEL_560:
                    *(void *)uint64_t v269 = 0;
                  }
                  break;
                default:
                  break;
              }
              uint64_t v283 = turi::FLEX_UNDEFINED;
              *(void *)(v269 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
              *(void *)uint64_t v269 = v283;
              LODWORD(v283) = byte_268085B9C;
              *(unsigned char *)(v269 + 12) = byte_268085B9C;
              switch((int)v283)
              {
                case 2:
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                  atomic_fetch_add(*(atomic_ullong *volatile *)v269, 1uLL);
                  break;
                default:
                  break;
              }
            }
          }
          else
          {
LABEL_530:
            int v273 = v4[12];
            switch(v273)
            {
              case 1:
                if (v232) {
LABEL_666:
                }
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
                break;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)v4 + 8));
                break;
              case 3:
                break;
              default:
                goto LABEL_666;
            }
            int v284 = v4[12];
            if (v284 == 1)
            {
              int v288 = v4;
              if (v232) {
LABEL_667:
              }
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            else
            {
              if (v284 == 9)
              {
                uint64_t v286 = *(void *)v4;
                uint64_t v287 = (uint64_t *)(*(void *)v4 + 8);
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v287);
                int64_t v285 = (void *)*v287;
                v232 += *(void *)(v286 + 72);
              }
              else
              {
                if (v284 != 3) {
                  goto LABEL_667;
                }
                int64_t v285 = (void *)(*(void *)v4 + 8);
              }
              int v288 = (unsigned __int8 *)(*v285 + 8 * v232);
            }
            turi::flexible_type::operator=<double>(**(void **)(**a3 + 16 * v231) + 16 * (void)a3[1], v288);
          }
          if (++v231 >= (unint64_t)(((*a3)[1] - **a3) >> 4)) {
            return;
          }
          break;
        case 3:
          unsigned int v260 = a1[44];
          if (v260 > 9) {
            goto LABEL_668;
          }
          if (v260 != 3)
          {
            BOOL v248 = 0;
LABEL_493:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v261 = v358;
              if (v358 != 0.0)
              {
                v262 = *(void **)(*(void *)&v358 + 8);
                if (v262)
                {
                  *(void *)(*(void *)&v358 + 16) = v262;
                  operator delete(v262);
                }
                double v255 = v261;
                uint64_t v259 = 0x1080C409938AC02;
                goto LABEL_521;
              }
            }
            goto LABEL_522;
          }
          std::string v331 = *(double **)(*((void *)a1 + 4) + 8);
          uint64_t v332 = *(double **)(*((void *)a1 + 4) + 16);
          unint64_t v333 = v332 - v331;
          unsigned __int8 v334 = *(double **)(*(void *)&v358 + 8);
          if (v333 != (uint64_t)(*(void *)(*(void *)&v358 + 16) - (void)v334) >> 3) {
            goto LABEL_657;
          }
          if (v332 == v331) {
            goto LABEL_658;
          }
          if (v333 <= 1) {
            uint64_t v335 = 1;
          }
          else {
            uint64_t v335 = v332 - v331;
          }
          if (*v331 == *v334)
          {
            uint64_t v336 = 1;
            do
            {
              unint64_t v337 = v336;
              if (v335 == v336) {
                break;
              }
              double v338 = v331[v336];
              double v339 = v334[v336++];
            }
            while (v338 == v339);
            BOOL v248 = v337 >= v333;
            goto LABEL_659;
          }
          goto LABEL_657;
        case 4:
          unsigned int v247 = a1[44];
          if (v247 > 9) {
            goto LABEL_668;
          }
          if (v247 == 4)
          {
            char v289 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v355, (uint64_t *)(*((void *)a1 + 4) + 8), (void *)(*(void *)&v358 + 8));
            goto LABEL_627;
          }
          BOOL v248 = 0;
LABEL_468:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v249 = v358;
            if (v358 != 0.0)
            {
              unsigned int v352 = (void **)(*(void *)&v358 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v352);
              goto LABEL_510;
            }
          }
          goto LABEL_522;
        case 5:
          unsigned int v266 = a1[44];
          if (v266 > 9) {
            goto LABEL_668;
          }
          if (v266 == 5)
          {
            char v289 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v355, (uint64_t **)(*((void *)a1 + 4) + 8), (uint64_t **)(*(void *)&v358 + 8));
            goto LABEL_627;
          }
          BOOL v248 = 0;
LABEL_507:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_522;
          }
          double v249 = v358;
          if (v358 == 0.0) {
            goto LABEL_522;
          }
          unsigned int v352 = (void **)(*(void *)&v358 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v352);
LABEL_510:
          double v255 = v249;
          uint64_t v259 = 0x1020C405E66F15BLL;
          goto LABEL_521;
        case 6:
          switch(a1[44])
          {
            case 0u:
              BOOL v246 = *((void *)a1 + 4) == (uint64_t)(*(void *)&v358 << 8) >> 8 && v359 == 0;
              goto LABEL_633;
            case 1u:
              double v340 = vabdd_f64(*((double *)a1 + 4), (double)(int)v359 / 1000000.0 + (double)((uint64_t)(*(void *)&v358 << 8) >> 8));
LABEL_638:
              BOOL v248 = v340 < 0.0000005;
              goto LABEL_659;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_530;
            case 6u:
              BOOL v246 = ((*(void *)&v358 ^ *((void *)a1 + 4)) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)a1 + 10) == v359;
              goto LABEL_633;
            default:
              goto LABEL_668;
          }
        case 7:
          unsigned int v263 = a1[44];
          if (v263 < 7 || v263 - 8 < 2) {
            goto LABEL_530;
          }
          if (v263 != 7) {
            goto LABEL_668;
          }
          goto LABEL_523;
        case 8:
          unsigned int v267 = a1[44];
          if (v267 >= 8 && v267 != 9)
          {
            if (v267 != 8) {
              goto LABEL_668;
            }
            char v289 = turi::image_type::operator==(*((void *)a1 + 4) + 8, *(void *)&v358 + 8);
LABEL_627:
            BOOL v248 = v289;
            goto LABEL_659;
          }
          BOOL v248 = 0;
LABEL_517:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v268 = v358;
            if (v358 != 0.0)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v358 + 16));
              double v255 = v268;
              unsigned int v256 = -235920773;
              goto LABEL_520;
            }
          }
          goto LABEL_522;
        case 9:
          unsigned int v250 = a1[44];
          if (v250 < 9)
          {
            BOOL v248 = 0;
LABEL_473:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v358, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_522;
            }
            double v251 = v358;
            if (v358 == 0.0) {
              goto LABEL_522;
            }
            double v252 = *(void **)(*(void *)&v358 + 48);
            if (v252)
            {
              *(void *)(*(void *)&v358 + 56) = v252;
              operator delete(v252);
            }
            uint64_t v253 = *(void **)(*(void *)&v251 + 24);
            if (v253)
            {
              *(void *)(*(void *)&v251 + 32) = v253;
              operator delete(v253);
            }
            int64_t v254 = *(std::__shared_weak_count **)(*(void *)&v251 + 16);
            if (v254) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v254);
            }
            double v255 = v251;
            unsigned int v256 = 2071181815;
LABEL_520:
            uint64_t v259 = v256 | 0x1030C4000000000;
            goto LABEL_521;
          }
          if (v250 != 9) {
            goto LABEL_668;
          }
          uint64_t v290 = *((void *)a1 + 4);
          if (*(void *)&v358 != v290)
          {
            double v351 = v358;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(v290 + 8, *(void *)&v358 + 8)) {
              goto LABEL_657;
            }
            uint64_t v292 = *(char **)(v290 + 24);
            uint64_t v291 = *(char **)(v290 + 32);
            uint64_t v293 = v291 - v292;
            if (v291 != v292)
            {
              if (*(void *)(v290 + 8))
              {
                uint64_t v294 = 1;
                do
                {
                  uint64_t v295 = *(void *)v292;
                  v292 += 8;
                  v294 *= v295;
                }
                while (v292 != v291);
                if (v294)
                {
                  uint64_t v356 = 0;
                  std::vector<unsigned long>::vector(&v352, v293 >> 3, &v356);
                  uint64_t v296 = v352;
                  unint64_t v297 = v353;
                  uint64_t v298 = **(void **)(*(void *)&v351 + 8);
                  uint64_t v299 = (char *)v353 - (char *)v352;
                  unint64_t v300 = v353 - v352;
                  unint64_t v301 = v300 - 1;
                  if (v300 <= 1) {
                    uint64_t v302 = 1;
                  }
                  else {
                    uint64_t v302 = v353 - v352;
                  }
                  do
                  {
                    if (v297 == v296)
                    {
                      uint64_t v310 = 0;
                      double v311 = *(double *)(**(void **)(v290 + 8) + 8 * *(void *)(v290 + 72));
                    }
                    else
                    {
                      uint64_t v303 = 0;
                      std::string::size_type v304 = *(uint64_t **)(v290 + 48);
                      unint64_t v305 = v296;
                      uint64_t v306 = v302;
                      do
                      {
                        uint64_t v308 = (uint64_t)*v305++;
                        uint64_t v307 = v308;
                        uint64_t v309 = *v304++;
                        v303 += v309 * v307;
                        --v306;
                      }
                      while (v306);
                      uint64_t v310 = 0;
                      double v311 = *(double *)(**(void **)(v290 + 8) + 8 * (*(void *)(v290 + 72) + v303));
                      uint64_t v312 = *(uint64_t **)(*(void *)&v351 + 48);
                      uint64_t v313 = v296;
                      uint64_t v314 = v302;
                      do
                      {
                        uint64_t v316 = (uint64_t)*v313++;
                        uint64_t v315 = v316;
                        uint64_t v317 = *v312++;
                        v310 += v317 * v315;
                        --v314;
                      }
                      while (v314);
                    }
                    double v318 = *(double *)(v298 + 8 * (*(void *)(*(void *)&v351 + 72) + v310));
                    BOOL v248 = v311 == v318;
                    if (v311 != v318) {
                      break;
                    }
                    uint64_t v319 = v300;
                    unint64_t v320 = v300 - 1;
                    if (v299 >= 1)
                    {
                      uint64_t v321 = *(void *)(v290 + 24);
                      unint64_t v322 = (unint64_t)v296[v301] + 1;
                      v296[v301] = (void *)v322;
                      if (v322 >= *(void *)(v321 + 8 * v301))
                      {
                        uint64_t v323 = v321 - 16;
                        unint64_t v324 = v300;
                        unint64_t v325 = (unint64_t *)((char *)v296 + (v299 & 0xFFFFFFFFFFFFFFF8) - 16);
                        while (1)
                        {
                          unint64_t v326 = v324 - 1;
                          v325[1] = 0;
                          if ((uint64_t)(v324 - 1) <= 0) {
                            break;
                          }
                          unint64_t v327 = *v325 + 1;
                          *v325-- = v327;
                          unint64_t v328 = *(void *)(v323 + 8 * v324--);
                          if (v327 < v328)
                          {
                            unint64_t v320 = v326 - 1;
                            uint64_t v319 = 1;
                            goto LABEL_604;
                          }
                        }
                        BOOL v248 = 1;
                        goto LABEL_662;
                      }
                      uint64_t v319 = 1;
                      unint64_t v320 = v300 - 1;
                    }
LABEL_604:
                    ;
                  }
                  while ((v320 & 0x8000000000000000) == 0 && v319);
                  if (!v296) {
                    goto LABEL_659;
                  }
LABEL_662:
                  uint64_t v353 = v296;
                  operator delete(v296);
                  goto LABEL_659;
                }
              }
            }
          }
          goto LABEL_658;
        default:
          goto LABEL_668;
      }
    }
  }
}

void sub_224189DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  switch(a24)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v25 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      if (*(char *)(a22 + 31) < 0) {
        operator delete(*(void **)(a22 + 8));
      }
      int v26 = (void *)v25;
      uint64_t v27 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      uint64_t v31 = *(void **)(a22 + 8);
      if (v31)
      {
        *(void *)(a22 + 16) = v31;
        operator delete(v31);
      }
      int v26 = (void *)v30;
      uint64_t v27 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      a21 = a22 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      a21 = a22 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_25:
      int v26 = (void *)v28;
      uint64_t v27 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v32 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a22 + 16));
      int v26 = (void *)v32;
      unsigned int v29 = -235920773;
      goto LABEL_24;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a22, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a22) {
        goto LABEL_27;
      }
      int v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a22);
      unsigned int v29 = 2071181815;
LABEL_24:
      uint64_t v27 = v29 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v26, v27);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  atomic_ullong *volatile v2 = (char *)operator new(0x30uLL);
  *(void *)atomic_ullong *volatile v2 = &unk_26D76E8E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E8E0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = a1 + 8;
  int v5 = a2[12];
  switch(v5)
  {
    case 4:
      turi::slicer_impl::slice<std::vector<turi::flexible_type>>(result, (void *)(*(void *)a2 + 8), (uint64_t *)&__p);
      *(void *)(a3 + 5) = 0;
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 12) = 4;
      operator new();
    case 3:
      turi::slicer_impl::slice<std::vector<double>>(result, (uint64_t *)(*(void *)a2 + 8), &__p.__r_.__value_.__l.__data_);
      *(void *)(a3 + 5) = 0;
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 12) = 3;
      operator new();
    case 2:
      turi::slicer_impl::slice<std::string>(result, (uint64_t *)(*(void *)a2 + 8), &__p);
      turi::flexible_type::flexible_type<std::string>(a3);
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 7;
  return result;
}

void sub_22418A734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v18 = v16;
  MEMORY[0x22A614FA0](v18, 0x1080C409938AC02);
  if (atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v20 = *v15;
    if (*v15)
    {
      uint64_t v21 = *(void **)(v20 + 8);
      if (v21)
      {
        *(void *)(v20 + 16) = v21;
        operator delete(v21);
      }
      MEMORY[0x22A614FA0](v20, 0x1080C409938AC02);
    }
    *unsigned int v15 = 0;
  }
  *unsigned int v15 = 0;
  *((_DWORD *)v15 + 2) = 0;
  *((unsigned char *)v15 + 12) = 0;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::slicer_impl::slice<std::string>(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = *(void *)a1;
    if ((*(void *)a1 & 0x8000000000000000) != 0)
    {
      uint64_t v7 = *((unsigned __int8 *)a2 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = a2[1];
      }
      v6 += v7;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 <= 0)
    {
      if ((v8 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      }
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = a2[1];
      }
      uint64_t v6 = v9 - 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10 < 0)
    {
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = a2[1];
      }
      v10 += v11;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12 < 1)
    {
      if ((v12 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      }
      uint64_t v10 = -1;
    }
    else if (*((char *)a2 + 23) < 0)
    {
      uint64_t v10 = a2[1];
    }
    else
    {
      uint64_t v10 = *((unsigned __int8 *)a2 + 23);
    }
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 < 1)
  {
    if (v13 && v6 > v10)
    {
      uint64_t v18 = *((unsigned __int8 *)a2 + 23);
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = a2[1];
      }
      uint64_t v19 = v18 - 1;
      if (v6 >= v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = v6;
      }
      if (v10 < 0) {
        uint64_t v21 = -1;
      }
      else {
        uint64_t v21 = v10;
      }
      while (v20 > v21)
      {
        if (*((char *)a2 + 23) >= 0) {
          BOOL v22 = a2;
        }
        else {
          BOOL v22 = (uint64_t *)*a2;
        }
        std::string::push_back(a3, *((unsigned char *)v22 + v20));
        v20 += *(void *)(a1 + 16);
      }
    }
  }
  else if (v6 < v10)
  {
    uint64_t v14 = v6 & ~(v6 >> 63);
    uint64_t v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = a2[1];
    }
    if (v10 >= v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v10;
    }
    while (v14 < v16)
    {
      if (*((char *)a2 + 23) >= 0) {
        unsigned int v17 = a2;
      }
      else {
        unsigned int v17 = (uint64_t *)*a2;
      }
      std::string::push_back(a3, *((unsigned char *)v17 + v14));
      v14 += *(void *)(a1 + 16);
    }
  }
}

void sub_22418AA94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::slicer_impl::slice<std::vector<double>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = *(void *)a1;
    if ((*(void *)a1 & 0x8000000000000000) != 0) {
      v6 += (a2[1] - *a2) >> 3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7 <= 0)
    {
      if ((v7 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      }
      uint64_t v6 = ((a2[1] - *a2) >> 3) - 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8 < 0) {
      v8 += (a2[1] - *a2) >> 3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 < 1)
    {
      if ((v9 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      }
      uint64_t v8 = -1;
    }
    else
    {
      uint64_t v8 = (a2[1] - *a2) >> 3;
    }
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 < 1)
  {
    if (v10 && v6 > v8)
    {
      uint64_t v26 = v6 >= ((a2[1] - *a2) >> 3) - 1 ? ((a2[1] - *a2) >> 3) - 1 : v6;
      uint64_t v27 = v8 < 0 ? -1 : v8;
      if (v26 > v27)
      {
        uint64_t v28 = 0;
        unsigned int v29 = a3 + 2;
        do
        {
          uint64_t v30 = *a2;
          if ((unint64_t)v28 >= *v29)
          {
            uint64_t v32 = *a3;
            uint64_t v33 = (v28 - *a3) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = *v29 - (void)v32;
            if (v35 >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              unsigned int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v36);
              uint64_t v32 = *a3;
              uint64_t v28 = a3[1];
            }
            else
            {
              unsigned int v37 = 0;
            }
            char v38 = &v37[8 * v33];
            *(void *)char v38 = *(void *)(v30 + 8 * v26);
            uint64_t v31 = v38 + 8;
            while (v28 != v32)
            {
              uint64_t v39 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }
            *a3 = v38;
            a3[1] = v31;
            a3[2] = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)uint64_t v28 = *(void *)(v30 + 8 * v26);
            uint64_t v31 = v28 + 8;
          }
          a3[1] = v31;
          v26 += *(void *)(a1 + 16);
          uint64_t v28 = v31;
        }
        while (v26 > v27);
      }
    }
  }
  else if (v6 < v8)
  {
    uint64_t v11 = v6 & ~(v6 >> 63);
    uint64_t v12 = a2[1] - *a2;
    uint64_t v13 = v8 >= v12 >> 3 ? v12 >> 3 : v8;
    if (v11 < v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a3 + 2;
      do
      {
        uint64_t v16 = *a2;
        if ((unint64_t)v14 >= *v15)
        {
          uint64_t v18 = *a3;
          uint64_t v19 = (v14 - *a3) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = *v15 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v22);
            uint64_t v18 = *a3;
            uint64_t v14 = a3[1];
          }
          else
          {
            int v23 = 0;
          }
          uint64_t v24 = &v23[8 * v19];
          *(void *)uint64_t v24 = *(void *)(v16 + 8 * v11);
          unsigned int v17 = v24 + 8;
          while (v14 != v18)
          {
            uint64_t v25 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v24 - 1) = v25;
            v24 -= 8;
          }
          *a3 = v24;
          a3[1] = v17;
          a3[2] = &v23[8 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(void *)uint64_t v14 = *(void *)(v16 + 8 * v11);
          unsigned int v17 = v14 + 8;
        }
        a3[1] = v17;
        v11 += *(void *)(a1 + 16);
        uint64_t v14 = v17;
      }
      while (v11 < v13);
    }
  }
}

void sub_22418ADD4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::slicer_impl::slice<std::vector<turi::flexible_type>>@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = result;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(unsigned char *)(result + 8))
  {
    atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)result;
    if ((*(void *)result & 0x8000000000000000) != 0) {
      atomic_ullong *volatile v6 = (atomic_ullong *volatile)((char *)v6 + ((uint64_t)(a2[1] - *a2) >> 4));
    }
  }
  else
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7 <= 0)
    {
      if ((v7 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      }
      atomic_ullong *volatile v6 = (atomic_ullong *volatile)(((uint64_t)(a2[1] - *a2) >> 4) - 1);
    }
    else
    {
      atomic_ullong *volatile v6 = 0;
    }
  }
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v8 = *(void *)(result + 32);
    if (v8 < 0) {
      v8 += (uint64_t)(a2[1] - *a2) >> 4;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(result + 16);
    if (v9 < 1)
    {
      if ((v9 & 0x8000000000000000) == 0) {
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      }
      uint64_t v8 = -1;
    }
    else
    {
      uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 4;
    }
  }
  uint64_t v10 = *(void *)(result + 16);
  if (v10 < 1)
  {
    if (v10 && (uint64_t)v6 > v8)
    {
      uint64_t v19 = (uint64_t)v6 >= ((uint64_t)(a2[1] - *a2) >> 4) - 1 ? ((uint64_t)(a2[1] - *a2) >> 4) - 1 : (uint64_t)v6;
      uint64_t v20 = v8 < 0 ? -1 : v8;
      if (v19 > v20)
      {
        unint64_t result = 0;
        do
        {
          uint64_t v21 = *a2 + 16 * v19;
          if (result >= a3[2])
          {
            unint64_t result = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, (atomic_ullong *volatile *)v21);
          }
          else
          {
            *(void *)unint64_t result = 0;
            *(_DWORD *)(result + 8) = 0;
            *(unsigned char *)(result + 12) = 0;
            if (result != v21)
            {
              atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v21;
              *(void *)(result + 5) = *(void *)(v21 + 5);
              *(void *)unint64_t result = v22;
              LODWORD(v22) = *(unsigned __int8 *)(v21 + 12);
              *(unsigned char *)(result + 12) = (_BYTE)v22;
              BOOL v16 = v22 > 9;
              int v23 = (1 << (char)v22) & 0x33C;
              if (!v16 && v23 != 0) {
                atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
              }
            }
            result += 16;
          }
          a3[1] = result;
          v19 += *(void *)(v4 + 16);
        }
        while (v19 > v20);
      }
    }
  }
  else if ((uint64_t)v6 < v8)
  {
    uint64_t v11 = (unint64_t)v6 & ~((uint64_t)v6 >> 63);
    uint64_t v12 = a2[1] - *a2;
    uint64_t v13 = v8 >= v12 >> 4 ? v12 >> 4 : v8;
    if (v11 < v13)
    {
      unint64_t result = 0;
      do
      {
        uint64_t v14 = *a2 + 16 * v11;
        if (result >= a3[2])
        {
          unint64_t result = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, (atomic_ullong *volatile *)v14);
        }
        else
        {
          *(void *)unint64_t result = 0;
          *(_DWORD *)(result + 8) = 0;
          *(unsigned char *)(result + 12) = 0;
          if (result != v14)
          {
            atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v14;
            *(void *)(result + 5) = *(void *)(v14 + 5);
            *(void *)unint64_t result = v15;
            LODWORD(v15) = *(unsigned __int8 *)(v14 + 12);
            *(unsigned char *)(result + 12) = (_BYTE)v15;
            BOOL v16 = v15 > 9;
            int v17 = (1 << (char)v15) & 0x33C;
            if (!v16 && v17 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
            }
          }
          result += 16;
        }
        a3[1] = result;
        v11 += *(void *)(v4 + 16);
      }
      while (v11 < v13);
    }
  }
  return result;
}

void sub_22418B07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E960;
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76E960;
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  unint64_t result = (char *)operator new(0x18uLL);
  *(void *)unint64_t result = &unk_26D76E960;
  *((void *)result + 1) = 0;
  long long v3 = (atomic_ullong *volatile *)(result + 8);
  *((_DWORD *)result + 4) = 0;
  result[20] = 0;
  if (result != (char *)a1)
  {
    *(void *)(result + 13) = *(void *)(a1 + 13);
    *long long v3 = *(atomic_ullong *volatile *)(a1 + 8);
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    result[20] = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D76E960;
  *(void *)(a2 + 8) = 0;
  atomic_ullong *volatile v2 = (atomic_ullong *volatile *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  if (a2 != result)
  {
    long long v3 = *(atomic_ullong **)(result + 8);
    *(void *)(a2 + 13) = *(void *)(result + 13);
    *atomic_ullong *volatile v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(unsigned char *)(a2 + 20) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if (result + 8 != a2)
  {
    *(void *)(a2 + 5) = *(void *)(result + 13);
    *(void *)a2 = *(void *)(result + 8);
    unsigned int v2 = *(unsigned __int8 *)(result + 20);
    *(unsigned char *)(a2 + 12) = v2;
    BOOL v3 = v2 > 9;
    int v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unsigned int v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 604, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22418B444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unsigned int v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 605, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22418B644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type> &)::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      unint64_t result = (turi::thread_pool *)turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_22418B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(void **a1, uint64_t a2)
{
  v19[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**a1 + 32))(v16);
  uint64_t v4 = *a1[1];
  unint64_t v5 = (*(uint64_t (**)(void))(**a1 + 24))();
  uint64_t v6 = *a1[1];
  unint64_t v7 = (*(uint64_t (**)(void))(**a1 + 24))();
  unint64_t v8 = v4 * a2 / v5;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (*a1[2] == 1)
  {
    for (; v8 < v9; v8 += 1024)
      (*(void (**)(void))(*(void *)*a1[4] + 48))();
  }
  else if (v8 < v9)
  {
    do
    {
      unint64_t v10 = *a1[3] + *a1[2] * v8;
      (*(void (**)(void, unint64_t, unint64_t, uint64_t *))(*(void *)*a1[4] + 48))(*a1[4], v10, v10 + 1, &v12);
      if (v13 == v12) {
        break;
      }
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v15 = (void **)&v12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v18);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v16);
}

void sub_22418BB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246D7992 & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246D7992 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    unsigned int v2 = result;
    do
      unint64_t result = turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()((void **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_26D759838;
  turi::unity_sarray::unity_sarray((uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

__n128 OUTLINED_FUNCTION_21_0(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

file_logger *OUTLINED_FUNCTION_22(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 59, 1);
}

file_logger *OUTLINED_FUNCTION_23_0(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 70, 1);
}

file_logger *OUTLINED_FUNCTION_24_0(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 55, 1);
}

file_logger *OUTLINED_FUNCTION_25(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 65, 1);
}

file_logger *OUTLINED_FUNCTION_26(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 74, 1);
}

__n128 OUTLINED_FUNCTION_27(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_30(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_32(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

CoreML::Model *CoreML::LogisticModel::LogisticModel(CoreML::Model *a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  unint64_t v7 = CoreML::Model::Model(a1, a4);
  *(void *)unint64_t v7 = &unk_26D76EA00;
  uint64_t v8 = *((void *)v7 + 1);
  if (*(_DWORD *)(v8 + 44) != 400)
  {
    CoreML::Specification::Model::clear_Type(*((void *)v7 + 1));
    *(_DWORD *)(v8 + 44) = 400;
    operator new();
  }
  *(_DWORD *)(*(void *)(v8 + 32) + 60) = 0;
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    operator new();
  }
  unint64_t v10 = *(std::string **)(v9 + 88);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, a2);
  uint64_t v11 = *(void *)(*((void *)a1 + 1) + 16);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = *(std::string **)(v11 + 96);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v12, a3);
  return a1;
}

void sub_22418BFDC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40FD9EAC30);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setWeights@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 400)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 400;
    operator new();
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = *(void *)(v4 + 32) + 16;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v17, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      uint64_t v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(v7);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      if (v17 != v18)
      {
        uint64_t v11 = v8;
        uint64_t v13 = (unsigned int *)((char *)v8 + 16);
        signed int v12 = *((_DWORD *)v8 + 4);
        do
        {
          uint64_t v14 = *v9;
          if (v12 == *((_DWORD *)v11 + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v13, v12 + 1);
            signed int v12 = *v13;
          }
          uint64_t v15 = *((void *)v11 + 3) + 8 * v12++;
          *((_DWORD *)v11 + 4) = v12;
          *(void *)(v15 + 8) = v14;
          ++v9;
        }
        while (v9 != v10);
        uint64_t v9 = v17;
      }
      if (v9)
      {
        uint64_t v18 = v9;
        operator delete(v9);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  return CoreML::Result::Result(a3);
}

void sub_22418C184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x22A614FA0](v11, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setOffsets@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 400)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 400;
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = *(_DWORD *)(v5 + 40);
    do
    {
      uint64_t v9 = *v6;
      if (v8 == *(_DWORD *)(v5 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v5 + 40), v8 + 1);
        int v8 = *(_DWORD *)(v5 + 40);
      }
      uint64_t v10 = *(void *)(v5 + 48) + 8 * v8++;
      *(_DWORD *)(v5 + 40) = v8;
      *(void *)(v10 + 8) = v9;
      ++v6;
    }
    while (v6 != v7);
  }
  return CoreML::Result::Result(a3);
}

void sub_22418C2B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setClassNames@<X0>(uint64_t a1@<X0>, void *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) != 400)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 400;
    operator new();
  }
  uint64_t v6 = *(void *)(v5 + 32);
  if (*(_DWORD *)(v6 + 84) != 100)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels(v6);
    *(_DWORD *)(v6 + 84) = 100;
    operator new();
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(void *)(v6 + 72) + 16);
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v9 + 44) != 400)
      {
        CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
        *(_DWORD *)(v9 + 44) = 400;
        operator new();
      }
      uint64_t v10 = *(void *)(v9 + 32);
      if (*(_DWORD *)(v10 + 84) != 100)
      {
        CoreML::Specification::GLMClassifier::clear_ClassLabels(v10);
        *(_DWORD *)(v10 + 84) = 100;
        operator new();
      }
      uint64_t v11 = *(void *)(v10 + 72);
      signed int v12 = (_tc_google::protobuf::Arena **)(v11 + 16);
      uint64_t v13 = *(int **)(v11 + 32);
      if (!v13) {
        break;
      }
      uint64_t v14 = *(int *)(v11 + 24);
      int v15 = *v13;
      if ((int)v14 >= *v13)
      {
        if (v15 == *(_DWORD *)(v11 + 28))
        {
LABEL_20:
          _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 16), v15 + 1);
          uint64_t v13 = *(int **)(v11 + 32);
          int v15 = *v13;
        }
        *uint64_t v13 = v15 + 1;
        uint64_t v17 = *v12;
        if (!*v12) {
          operator new();
        }
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
        uint64_t v18 = *(void *)(v11 + 32);
        uint64_t v19 = *(int *)(v11 + 24);
        *(_DWORD *)(v11 + 24) = v19 + 1;
        *(void *)(v18 + 8 * v19 + 8) = Aligned;
        goto LABEL_24;
      }
      *(_DWORD *)(v11 + 24) = v14 + 1;
      Aligned = *(std::string **)&v13[2 * v14 + 2];
LABEL_24:
      std::string::operator=(Aligned, (const std::string *)(*a2 + v7));
      ++v8;
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)) {
        goto LABEL_25;
      }
    }
    int v15 = *(_DWORD *)(v11 + 28);
    goto LABEL_20;
  }
LABEL_25:
  return CoreML::Result::Result(a3);
}

void sub_22418C5A0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setClassNames@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 44) != 400)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v6 + 44) = 400;
    operator new();
  }
  uint64_t v7 = *(void *)(v6 + 32);
  if (*(_DWORD *)(v7 + 84) != 101)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels(v7);
    *(_DWORD *)(v7 + 84) = 101;
    operator new();
  }
  *(_DWORD *)(*(void *)(v7 + 72) + 16) = 0;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v9 + 44) != 400)
      {
        CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
        *(_DWORD *)(v9 + 44) = 400;
        operator new();
      }
      uint64_t v10 = *(void *)(v9 + 32);
      if (*(_DWORD *)(v10 + 84) != 101)
      {
        CoreML::Specification::GLMClassifier::clear_ClassLabels(v10);
        *(_DWORD *)(v10 + 84) = 101;
        operator new();
      }
      uint64_t v11 = *(void *)(v10 + 72);
      uint64_t v12 = *a2;
      uint64_t v13 = *(void *)(*a2 + 8 * v8);
      int v14 = *(_DWORD *)(v11 + 16);
      if (v14 == *(_DWORD *)(v11 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v14 + 1);
        int v14 = *(_DWORD *)(v11 + 16);
        uint64_t v12 = *a2;
      }
      uint64_t v15 = *(void *)(v11 + 24);
      *(_DWORD *)(v11 + 16) = v14 + 1;
      *(void *)(v15 + 8 * v14 + 8) = v13;
      ++v8;
    }
    while (v8 < (a2[1] - v12) >> 3);
  }
  return CoreML::Result::Result(a3);
}

void sub_22418C7D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void CoreML::LogisticModel::~LogisticModel(CoreML::LogisticModel *this)
{
  CoreML::Model::~Model(this);
  JUMPOUT(0x22A614FA0);
}

CoreML::Specification::GLMClassifier_DoubleArray *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::GLMClassifier_DoubleArray **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_22418C964(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

BOOL turi::unity_sarray_binary_operations::check_operation_feasibility(BOOL result, unsigned int a2, unsigned __int8 *a3)
{
  unsigned int v5 = result;
  int v6 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (v6 != 1)
    {
      uint64_t v7 = a3;
      if (v6 != 2) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    unsigned int v10 = *a3;
    BOOL v11 = v10 > 0x2D || ((1 << v10) & 0x2C0000000000) == 0;
    if (v11 && v10 != 47) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  uint64_t v8 = *((void *)a3 + 1);
  if (v8 == 1)
  {
    int v9 = **(unsigned __int8 **)a3;
    if (v9 == 42)
    {
      if (result != 6 || a2 != 6)
      {
LABEL_32:
        uint64_t v12 = *(unsigned char **)a3;
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    if (v9 == 43 || v9 == 45)
    {
LABEL_14:
      if (result != 6 || a2 != 6) {
        goto LABEL_31;
      }
      if ((v6 & 0x80) == 0)
      {
        uint64_t v12 = a3;
        if (v6 != 1)
        {
LABEL_33:
          int v14 = (char)*v12;
          if (v14 <= 59)
          {
            int v15 = v14 - 37;
            BOOL v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::plus_operator;
            switch(v15)
            {
              case 0:
              case 5:
              case 10:
                BOOL v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::other_numeric_operators;
                goto LABEL_42;
              case 6:
                goto LABEL_42;
              case 8:
                BOOL v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::minus_operator;
                goto LABEL_42;
              default:
                goto LABEL_43;
            }
          }
          if (v14 != 60)
          {
            if (v14 == 61)
            {
              BOOL v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::equality_operators;
LABEL_42:
              if (v16[10 * result + (int)a2]) {
                return result;
              }
LABEL_43:
              if (result >= 2)
              {
                if (result == 9)
                {
LABEL_49:
                  if (a2 >= 2 && a2 != 9) {
                    goto LABEL_90;
                  }
                  return result;
                }
                if (result != 3) {
                  goto LABEL_90;
                }
              }
              if (a2 <= 3 && a2 != 2) {
                return result;
              }
              if (result > 1) {
                goto LABEL_90;
              }
              goto LABEL_49;
            }
            if (v14 != 62) {
              goto LABEL_43;
            }
          }
          BOOL v16 = turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators;
          goto LABEL_42;
        }
        goto LABEL_30;
      }
LABEL_29:
      uint64_t v12 = *(unsigned char **)a3;
      if (*((void *)a3 + 1) != 1) {
        goto LABEL_33;
      }
LABEL_30:
      if (*v12 == 45) {
        return result;
      }
LABEL_31:
      uint64_t v12 = a3;
      if ((v6 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    uint64_t v8 = *((void *)a3 + 1);
    if (v8 == 1)
    {
      int v13 = **(unsigned __int8 **)a3;
      if (v13 == 47) {
        goto LABEL_14;
      }
      if ((v6 & 0x80) == 0)
      {
        if (v6 != 1) {
          goto LABEL_59;
        }
LABEL_25:
        if (*a3 != 37) {
          goto LABEL_59;
        }
LABEL_53:
        if (a2 | result) {
          goto LABEL_90;
        }
        return result;
      }
      if (v13 == 37) {
        goto LABEL_53;
      }
      uint64_t v8 = *((void *)a3 + 1);
    }
  }
  if (v8 != 2) {
    goto LABEL_59;
  }
  uint64_t v7 = *(_WORD **)a3;
LABEL_58:
  if (*v7 == 10794) {
    goto LABEL_60;
  }
LABEL_59:
  __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "//");
  if (result)
  {
LABEL_60:
    if (v5 >= 2 && v5 != 3 || a2 >= 2 && a2 != 3) {
      goto LABEL_90;
    }
    return result;
  }
  __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<");
  if (!result)
  {
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">");
    if (!result)
    {
      __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<=");
      if (!result)
      {
        __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">=");
        if (!result)
        {
          __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "==");
          if (result) {
            return result;
          }
          __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "!=");
          if (result) {
            return result;
          }
          __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "&");
          if (result) {
            return result;
          }
          __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "|");
          if (result) {
            return result;
          }
          __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "in");
          if (result)
          {
            if (v5 == 2 && a2 == 2) {
              return result;
            }
            BOOL v17 = v5 != 3 || a2 >= 2;
            BOOL v18 = !v17;
            if ((v5 & 0xFFFFFFFE) == 4 || v18) {
              return result;
            }
          }
          else
          {
            __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "left_abs");
            if (!result) {
              turi::unity_sarray_binary_operations::check_operation_feasibility(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0::operator()();
            }
            if (v5 < 2 || v5 == 3) {
              return result;
            }
          }
LABEL_90:
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v35, "Unsupported type operation. cannot perform operation ");
          int v20 = (char)a3[23];
          if (v20 >= 0) {
            uint64_t v21 = (const std::string::value_type *)a3;
          }
          else {
            uint64_t v21 = *(const std::string::value_type **)a3;
          }
          if (v20 >= 0) {
            std::string::size_type v22 = a3[23];
          }
          else {
            std::string::size_type v22 = *((void *)a3 + 1);
          }
          int v23 = std::string::append(&v35, v21, v22);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          uint64_t v25 = std::string::append(&v36, " between ");
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if (v5 > 9) {
            uint64_t v27 = "undefined";
          }
          else {
            uint64_t v27 = off_2646D6F30[v5];
          }
          uint64_t v28 = std::string::append(&v37, v27);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          uint64_t v30 = std::string::append(&v38, " and ");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (a2 > 9) {
            uint64_t v32 = "undefined";
          }
          else {
            uint64_t v32 = off_2646D6F30[a2];
          }
          uint64_t v33 = std::string::append(&v39, v32);
          long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          exception[2] = *((void *)&v33->__r_.__value_.__l + 2);
          *(_OWORD *)exception = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
        }
      }
    }
  }
  if (!turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * v5 + a2]) {
    goto LABEL_90;
  }
  return result;
}

void sub_22418CEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 41) < 0) {
    operator delete(*(void **)(v37 - 64));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v35 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

uint64_t turi::unity_sarray_binary_operations::get_output_type(int a1, int a2, unsigned __int8 **a3)
{
  uint64_t v3 = a3;
  int v5 = a1;
  int v6 = *((unsigned __int8 *)a3 + 23);
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v7 = a3[1];
    if (v7 == (unsigned __int8 *)1)
    {
      unsigned int v8 = **a3;
      BOOL v9 = v8 > 0x2D;
      uint64_t v10 = (1 << v8) & 0x2C0000000000;
      if (!v9 && v10 != 0)
      {
LABEL_18:
        if (!a1 && a2 == 1) {
          goto LABEL_20;
        }
        if (a1 == 6 && a2 == 6)
        {
          if ((v6 & 0x80) != 0)
          {
            if (a3[1] != (unsigned __int8 *)1) {
              goto LABEL_79;
            }
            uint64_t v3 = *a3;
          }
          else if (v6 != 1)
          {
            goto LABEL_79;
          }
          if (*(unsigned char *)v3 == 45)
          {
LABEL_20:
            LOBYTE(v5) = 1;
            return (char)v5;
          }
        }
LABEL_79:
        char v16 = 9;
        if (a2 == 3 || a1 == 3) {
          char v18 = 3;
        }
        else {
          char v18 = a1;
        }
        goto LABEL_85;
      }
      uint64_t v7 = a3[1];
    }
    if (v7 != (unsigned __int8 *)2) {
      goto LABEL_34;
    }
    if (*(_WORD *)*a3 == 10794) {
      goto LABEL_61;
    }
    uint64_t v7 = a3[1];
    if (v7 != (unsigned __int8 *)2) {
      goto LABEL_34;
    }
    if (*(_WORD *)*a3 == 12079)
    {
LABEL_67:
      char v16 = 3;
      char v18 = a1 == 1 || a2 == 1;
      if (a2 == 3) {
        char v18 = 3;
      }
      BOOL v21 = a1 == 3;
LABEL_88:
      if (v21) {
        LOBYTE(v5) = v16;
      }
      else {
        LOBYTE(v5) = v18;
      }
      return (char)v5;
    }
    if ((v6 & 0x80) == 0)
    {
      int v14 = (unsigned __int8 *)a3;
      if (v6 != 1) {
        goto LABEL_44;
      }
    }
    else
    {
LABEL_34:
      if (v7 != (unsigned __int8 *)1) {
        goto LABEL_44;
      }
      int v14 = *a3;
    }
    unsigned int v12 = *v14;
LABEL_37:
    if (v12 == 37)
    {
      if (a1 == 3) {
        char v15 = 3;
      }
      else {
        char v15 = 0;
      }
      if (a1 == 9) {
        LOBYTE(v5) = 9;
      }
      else {
        LOBYTE(v5) = v15;
      }
      return (char)v5;
    }
    goto LABEL_44;
  }
  if (v6 == 1)
  {
    unsigned int v12 = *(unsigned __int8 *)a3;
    if (v12 <= 0x2D && ((1 << v12) & 0x2C0000000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
  if (v6 == 2)
  {
    if (*(_WORD *)a3 != 10794)
    {
      if (*(_WORD *)a3 == 12079) {
        goto LABEL_67;
      }
      goto LABEL_44;
    }
LABEL_61:
    if (a2 == 3 || a1 == 3) {
      LOBYTE(v5) = 3;
    }
    else {
      LOBYTE(v5) = 1;
    }
    return (char)v5;
  }
LABEL_44:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "/"))
  {
    char v16 = 9;
    if (a2 == 3 || v5 == 3) {
      char v18 = 3;
    }
    else {
      char v18 = 1;
    }
LABEL_85:
    if (a2 == 9) {
      char v18 = 9;
    }
    BOOL v21 = v5 == 9;
    goto LABEL_88;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "<")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, ">")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "<=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, ">=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "==")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "!=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "&")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "|")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "in"))
  {
    LOBYTE(v5) = 0;
  }
  else if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "left_abs"))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid Operation Type");
  }
  return (char)v5;
}

void sub_22418D2E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL turi::unity_sarray_binary_operations::get_binary_operator@<W0>(BOOL result@<X0>, unsigned int a2@<W1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  int v6 = result;
  int v8 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
      {
        if (*(_WORD *)a3 != 10794)
        {
          BOOL v9 = a3;
          goto LABEL_53;
        }
LABEL_65:
        if (result == 3 && a2 == 3)
        {
          int v13 = &unk_26D76F6D8;
        }
        else if (result == 3)
        {
          int v13 = &unk_26D76F758;
        }
        else if (a2 == 3)
        {
          int v13 = &unk_26D76F7D8;
        }
        else
        {
          int v13 = &unk_26D76F858;
        }
        goto LABEL_56;
      }
      goto LABEL_54;
    }
    int v12 = *a3;
    if (v12 != 42)
    {
      if (v12 != 45)
      {
        if (v12 == 43) {
          goto LABEL_14;
        }
        if (v12 != 47) {
          goto LABEL_54;
        }
LABEL_27:
        if (result == 3 && a2 == 3)
        {
          int v13 = &unk_26D76F3D8;
        }
        else if (result == 3)
        {
          int v13 = &unk_26D76F458;
        }
        else if (a2 == 3)
        {
          int v13 = &unk_26D76F4D8;
        }
        else if (result == 9)
        {
          int v13 = &unk_26D76F558;
        }
        else if (a2 == 9)
        {
          int v13 = &unk_26D76F5D8;
        }
        else
        {
          int v13 = &unk_26D76F658;
        }
        goto LABEL_56;
      }
LABEL_17:
      if (result || a2 != 1)
      {
        if (result == 6 && a2 == 6)
        {
          int v13 = &unk_26D76ED58;
        }
        else if (result == 3 && a2 == 3)
        {
          int v13 = &unk_26D76EDD8;
        }
        else if (result == 9 || result == 3)
        {
          int v13 = &unk_26D76EE58;
        }
        else if (a2 == 9 || a2 == 3)
        {
          int v13 = &unk_26D76EED8;
        }
        else
        {
          int v13 = &unk_26D76EF58;
        }
      }
      else
      {
        int v13 = &unk_26D76ECD8;
      }
      goto LABEL_56;
    }
LABEL_20:
    if (result || a2 != 1)
    {
      if (result == 3 && a2 == 3)
      {
        int v13 = &unk_26D76F058;
      }
      else if (result == 9 && a2 == 9)
      {
        int v13 = &unk_26D76F0D8;
      }
      else if (result == 3)
      {
        int v13 = &unk_26D76F158;
      }
      else if (a2 == 3)
      {
        int v13 = &unk_26D76F1D8;
      }
      else if (result == 9)
      {
        int v13 = &unk_26D76F258;
      }
      else if (a2 == 9)
      {
        int v13 = &unk_26D76F2D8;
      }
      else
      {
        int v13 = &unk_26D76F358;
      }
    }
    else
    {
      int v13 = &unk_26D76EFD8;
    }
    goto LABEL_56;
  }
  uint64_t v10 = *((void *)a3 + 1);
  if (v10 == 1)
  {
    int v11 = **(unsigned __int8 **)a3;
    switch(v11)
    {
      case '*':
        goto LABEL_20;
      case '+':
LABEL_14:
        if (result || a2 != 1)
        {
          if (result == 3 && a2 == 3)
          {
            int v13 = &unk_26D76EAD8;
          }
          else if (result == 9 || result == 3)
          {
            int v13 = &unk_26D76EB58;
          }
          else if (a2 == 9 || a2 == 3)
          {
            int v13 = &unk_26D76EBD8;
          }
          else
          {
            int v13 = &unk_26D76EC58;
          }
        }
        else
        {
          int v13 = &unk_26D76EA48;
        }
        goto LABEL_56;
      case '-':
        goto LABEL_17;
    }
    uint64_t v10 = *((void *)a3 + 1);
    if (v10 == 1)
    {
      if (**(unsigned char **)a3 == 47) {
        goto LABEL_27;
      }
      if ((v8 & 0x80) == 0) {
        goto LABEL_54;
      }
    }
  }
  if (v10 == 2)
  {
    if (**(_WORD **)a3 == 10794) {
      goto LABEL_65;
    }
    if (*((void *)a3 + 1) == 2)
    {
      BOOL v9 = *(_WORD **)a3;
LABEL_53:
      if (*v9 == 12079)
      {
        if (result == 3 && a2 == 3)
        {
          int v13 = &unk_26D76F8D8;
        }
        else if (result == 3)
        {
          int v13 = &unk_26D76F958;
        }
        else if (a2 == 3)
        {
          int v13 = &unk_26D76F9D8;
        }
        else if (result || a2 == 1)
        {
          int v13 = &unk_26D76FA58;
        }
        else
        {
          int v13 = &unk_26D76FAD8;
        }
        goto LABEL_56;
      }
    }
  }
LABEL_54:
  __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "%");
  if (result)
  {
    int v13 = &unk_26D76FB58;
    goto LABEL_56;
  }
  __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "in");
  if (result)
  {
    if (v6 == 2 && a2 == 2)
    {
      int v13 = &unk_26D76FBD8;
      goto LABEL_56;
    }
    if (v6 == 3 && a2 <= 1)
    {
      int v13 = &unk_26D76FC58;
      goto LABEL_56;
    }
    if (v6 == 5)
    {
      int v13 = &unk_26D76FD58;
      goto LABEL_56;
    }
    if (v6 == 4)
    {
      int v13 = &unk_26D76FCD8;
      goto LABEL_56;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid operands for flexible_type binary operator");
LABEL_139:
  }
  __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "left_abs");
  if (!result)
  {
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<");
    if (result)
    {
      int v13 = &unk_26D76FF58;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">");
    if (result)
    {
      int v13 = &unk_26D76FFD8;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<=");
    if (result)
    {
      int v13 = &unk_26D770058;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">=");
    if (result)
    {
      int v13 = &unk_26D7700D8;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "==");
    if (result)
    {
      int v13 = &unk_26D770158;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "!=");
    if (result)
    {
      int v13 = &unk_26D7701D8;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "&");
    if (result)
    {
      int v13 = &unk_26D770258;
      goto LABEL_56;
    }
    __n128 result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "|");
    if (result)
    {
      int v13 = &unk_26D7702D8;
      goto LABEL_56;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid Operation Type");
    goto LABEL_139;
  }
  if (v6)
  {
    if (v6 == 3) {
      int v13 = &unk_26D76FDD8;
    }
    else {
      int v13 = &unk_26D76FED8;
    }
  }
  else
  {
    int v13 = &unk_26D76FE58;
  }
LABEL_56:
  *a4 = v13;
  a4[3] = a4;
  return result;
}

void sub_22418DC64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D76EA48;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EA48;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      int v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      BOOL v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        BOOL v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v34 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      char v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v41 = *(_OWORD *)(v14 + 40);
      long long v42 = v17;
      *(_OWORD *)uint64_t v40 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      std::string::size_type v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        std::string::size_type v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        std::string v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v37 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v36, (const std::string *)__p);
        __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      uint64_t v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v41 = *(_OWORD *)(v27 + 40);
      long long v42 = v30;
      *(_OWORD *)uint64_t v40 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double result = v5 + v19;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v5 + v19;
  return result;
}

void sub_22418E28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EAD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EAD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1::operator()(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a1[12];
  uint64_t v5 = 1;
  switch(a1[12])
  {
    case 3u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 3;
      goto LABEL_5;
    case 4u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 4;
      goto LABEL_5;
    case 5u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 5;
LABEL_5:
      uint64_t v5 = (uint64_t)(*v7 - *v6) >> v8;
      break;
    case 9u:
      long long v16 = *(uint64_t **)(*(void *)a1 + 24);
      char v15 = *(uint64_t **)(*(void *)a1 + 32);
      if (v15 == v16)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)a1 + 8);
        if (v5)
        {
          uint64_t v5 = 1;
          do
          {
            uint64_t v17 = *v16++;
            v5 *= v17;
          }
          while (v16 != v15);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v9 = 1;
  switch(a2[12])
  {
    case 3:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 3;
      goto LABEL_10;
    case 4:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 4;
      goto LABEL_10;
    case 5:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 5;
LABEL_10:
      uint64_t v9 = (uint64_t)(*v11 - *v10) >> v12;
      break;
    case 9:
      double v19 = *(uint64_t **)(*(void *)a2 + 24);
      float v18 = *(uint64_t **)(*(void *)a2 + 32);
      if (v18 == v19)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)a2 + 8);
        if (v9)
        {
          uint64_t v9 = 1;
          do
          {
            uint64_t v20 = *v19++;
            v9 *= v20;
          }
          while (v19 != v18);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v5 != v9)
  {
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v14 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v14)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    *(unsigned char *)(a3 + 12) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = *(void *)a3 + *(void *)a2;
          goto LABEL_58;
        case 1:
          double v122 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_219;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v66 = *(double **)(*(void *)a3 + 8);
          uint64_t v67 = *(void *)(*(void *)a3 + 16) - (void)v66;
          if (v67)
          {
            unint64_t v68 = v67 >> 3;
            double v69 = (double)*(uint64_t *)a2;
            if (v68 <= 1) {
              unint64_t v68 = 1;
            }
            do
            {
              double *v66 = *v66 + v69;
              ++v66;
              --v68;
            }
            while (v68);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          unint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          unint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = (double)*(uint64_t *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v127 = 0;
          std::vector<unsigned long>::vector(&v128, v80, &v127);
          uint64_t v40 = v128;
          uint64_t v81 = v129;
          break;
        default:
          goto LABEL_265;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v40;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          int v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v40;
            v40 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) + v77;
        uint64_t v40 = v128;
        uint64_t v81 = v129;
        uint64_t v89 = (v129 - v128) >> 3;
        uint64_t v90 = v89 - 1;
        if (v129 - v128 < 1) {
          goto LABEL_162;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v128[8 * v90] + 1;
        *(void *)&v128[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_161:
          uint64_t v89 = 1;
LABEL_162:
          if (v90 < 0 || !v89) {
            goto LABEL_186;
          }
          continue;
        }
        break;
      }
      unsigned int v93 = (unint64_t *)&v40[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_187;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_161;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)a3);
LABEL_58:
          *(void *)a3 = v13;
          return;
        case 1:
          double v122 = *(double *)a2 + *(double *)a3;
LABEL_219:
          *(double *)a3 = v122;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v70 = *(double **)(*(void *)a3 + 8);
          uint64_t v71 = *(void *)(*(void *)a3 + 16) - (void)v70;
          if (v71)
          {
            double v72 = *(double *)a2;
            unint64_t v73 = v71 >> 3;
            if (v73 <= 1) {
              unint64_t v73 = 1;
            }
            do
            {
              double *v70 = v72 + *v70;
              ++v70;
              --v73;
            }
            while (v73);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 6:
          double v123 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v124 = *(atomic_ullong *volatile *)a3;
          unint64_t v125 = *(void *)a3 + vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v125 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v126 = (uint64_t)v123 + *(int *)(a3 + 8);
          if (v126 >= 1000000)
          {
            *(void *)a3 = (v125 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v124 & 0xFF00000000000000;
            LODWORD(v126) = v126 - 1000000;
          }
          if (v126 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v126;
          return;
        case 7:
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v98 = *(atomic_ullong *volatile *)a3;
          atomic_ullong *volatile v100 = *(uint64_t **)(*(void *)a3 + 24);
          atomic_ullong *volatile v99 = *(uint64_t **)(*(void *)a3 + 32);
          if (v99 == v100) {
            return;
          }
          if (!v98[1]) {
            return;
          }
          double v101 = *(double *)a2;
          uint64_t v102 = 1;
          do
          {
            uint64_t v103 = *v100++;
            v102 *= v103;
          }
          while (v100 != v99);
          if (!v102) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v98 + 1);
          unint64_t v104 = (v98[4] - v98[3]) >> 3;
          uint64_t v127 = 0;
          std::vector<unsigned long>::vector(&v128, v104, &v127);
          uint64_t v40 = v128;
          atomic_ullong *volatile v105 = v129;
          break;
        default:
          goto LABEL_265;
      }
      while (2)
      {
        uint64_t v106 = 0;
        uint64_t v107 = v105 - v40;
        if (v107)
        {
          unint64_t v108 = v107 >> 3;
          int v109 = (uint64_t *)v98[6];
          if (v108 <= 1) {
            unint64_t v108 = 1;
          }
          do
          {
            uint64_t v111 = *(void *)v40;
            v40 += 8;
            uint64_t v110 = v111;
            uint64_t v112 = *v109++;
            v106 += v112 * v110;
            --v108;
          }
          while (v108);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v98 + 1);
        *(double *)(*(void *)v98[1] + 8 * (v98[9] + v106)) = v101
                                                             + *(double *)(*(void *)v98[1] + 8 * (v98[9] + v106));
        uint64_t v40 = v128;
        atomic_ullong *volatile v105 = v129;
        uint64_t v113 = (v129 - v128) >> 3;
        uint64_t v114 = v113 - 1;
        if (v129 - v128 < 1) {
          goto LABEL_184;
        }
        atomic_ullong v115 = v98[3];
        unint64_t v116 = *(void *)&v128[8 * v114] + 1;
        *(void *)&v128[8 * v114] = v116;
        if (v116 < *(void *)(v115 + 8 * v114))
        {
LABEL_183:
          uint64_t v113 = 1;
LABEL_184:
          if (v114 < 0 || !v113) {
            goto LABEL_186;
          }
          continue;
        }
        break;
      }
      atomic_ullong *volatile v117 = (unint64_t *)&v40[8 * v113 - 16];
      atomic_ullong v118 = v115 - 16;
      while (1)
      {
        uint64_t v119 = v113 - 1;
        v117[1] = 0;
        if (v113 - 1 <= 0) {
          goto LABEL_187;
        }
        unint64_t v120 = *v117 + 1;
        *v117-- = v120;
        unint64_t v121 = *(void *)(v118 + 8 * v113--);
        if (v120 < v121)
        {
          uint64_t v114 = v119 - 1;
          goto LABEL_183;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          double v21 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          int v22 = *(char *)(*(void *)&v21 + 31);
          if (v22 >= 0) {
            double v23 = (const std::string::value_type *)(*(void *)&v21 + 8);
          }
          else {
            double v23 = *(const std::string::value_type **)(*(void *)&v21 + 8);
          }
          if (v22 >= 0) {
            std::string::size_type v24 = *(unsigned __int8 *)(*(void *)&v21 + 31);
          }
          else {
            std::string::size_type v24 = *(void *)(*(void *)&v21 + 16);
          }
          std::string::append((std::string *)(*(void *)a3 + 8), v23, v24);
          break;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
      return;
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          double v25 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v25 + 16) - *(void *)(*(void *)&v25 + 8));
          uint64_t v27 = (double *)v26[1];
          uint64_t v28 = v26[2] - (void)v27;
          if (v28)
          {
            unint64_t v29 = v28 >> 3;
            long long v30 = *(double **)(*(void *)&v25 + 8);
            if (v29 <= 1) {
              unint64_t v29 = 1;
            }
            do
            {
              double v31 = *v30++;
              double *v27 = v31 + *v27;
              ++v27;
              --v29;
            }
            while (v29);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        default:
          goto LABEL_265;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_262;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_262;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_262:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v32 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)a3;
          long long v34 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v34, *(void *)&v32 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          std::string v36 = (uint64_t *)v33[3];
          long long v35 = (uint64_t *)v33[4];
          if (v35 == v36) {
            return;
          }
          if (!*v34) {
            return;
          }
          uint64_t v37 = 1;
          do
          {
            uint64_t v38 = *v36++;
            v37 *= v38;
          }
          while (v36 != v35);
          if (!v37) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v34);
          unint64_t v39 = (v33[4] - v33[3]) >> 3;
          uint64_t v127 = 0;
          std::vector<unsigned long>::vector(&v128, v39, &v127);
          uint64_t v40 = v128;
          long long v41 = v129;
          break;
        default:
          goto LABEL_265;
      }
      break;
    default:
LABEL_265:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v42 = v41 - v40;
    if (v42)
    {
      uint64_t v43 = 0;
      unint64_t v44 = v42 >> 3;
      uint64_t v45 = *(uint64_t **)(*(void *)&v32 + 48);
      if (v44 <= 1) {
        unint64_t v44 = 1;
      }
      uint64_t v46 = (uint64_t *)v40;
      unint64_t v47 = v44;
      do
      {
        uint64_t v49 = *v46++;
        uint64_t v48 = v49;
        uint64_t v50 = *v45++;
        v43 += v50 * v48;
        --v47;
      }
      while (v47);
      uint64_t v51 = 0;
      double v52 = *(double *)(**(void **)(*(void *)&v32 + 8) + 8 * (*(void *)(*(void *)&v32 + 72) + v43));
      uint64_t v53 = (uint64_t *)v33[6];
      do
      {
        uint64_t v55 = *(void *)v40;
        v40 += 8;
        uint64_t v54 = v55;
        uint64_t v56 = *v53++;
        v51 += v56 * v54;
        --v44;
      }
      while (v44);
    }
    else
    {
      uint64_t v51 = 0;
      double v52 = *(double *)(**(void **)(*(void *)&v32 + 8) + 8 * *(void *)(*(void *)&v32 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v34);
    *(double *)(*(void *)v33[1] + 8 * (v33[9] + v51)) = v52 + *(double *)(*(void *)v33[1] + 8 * (v33[9] + v51));
    uint64_t v40 = v128;
    long long v41 = v129;
    uint64_t v57 = (v129 - v128) >> 3;
    uint64_t v58 = v57 - 1;
    if (v129 - v128 < 1) {
      goto LABEL_110;
    }
    atomic_ullong v59 = v33[3];
    unint64_t v60 = *(void *)&v128[8 * v58] + 1;
    *(void *)&v128[8 * v58] = v60;
    if (v60 >= *(void *)(v59 + 8 * v58)) {
      break;
    }
LABEL_109:
    uint64_t v57 = 1;
LABEL_110:
    if (v58 < 0 || !v57) {
      goto LABEL_186;
    }
  }
  uint64_t v61 = (unint64_t *)&v40[8 * v57 - 16];
  atomic_ullong v62 = v59 - 16;
  while (1)
  {
    uint64_t v63 = v57 - 1;
    v61[1] = 0;
    if (v57 - 1 <= 0) {
      break;
    }
    unint64_t v64 = *v61 + 1;
    *v61-- = v64;
    unint64_t v65 = *(void *)(v62 + 8 * v57--);
    if (v64 < v65)
    {
      uint64_t v58 = v63 - 1;
      goto LABEL_109;
    }
  }
LABEL_186:
  if (v40)
  {
LABEL_187:
    atomic_ullong *volatile v129 = v40;
    operator delete(v40);
  }
}

void sub_22418FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EB58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EB58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 + *(void *)a2;
          goto LABEL_34;
        case 1:
          double v110 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_195;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v54 = *(double **)(*(void *)a3 + 8);
          uint64_t v55 = *(void *)(*(void *)a3 + 16) - (void)v54;
          if (v55)
          {
            unint64_t v56 = v55 >> 3;
            double v57 = (double)*(uint64_t *)a2;
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 + v57;
              ++v54;
              --v56;
            }
            while (v56);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)a3;
          unint64_t v64 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v63 = *(uint64_t **)(*(void *)a3 + 32);
          if (v63 == v64) {
            return;
          }
          if (!v62[1]) {
            return;
          }
          double v65 = (double)*(uint64_t *)a2;
          uint64_t v66 = 1;
          do
          {
            uint64_t v67 = *v64++;
            v66 *= v67;
          }
          while (v64 != v63);
          if (!v66) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
          unint64_t v68 = (v62[4] - v62[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v68, &v115);
          uint64_t v28 = v116;
          double v69 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v69 - v28;
        if (v71)
        {
          unint64_t v72 = v71 >> 3;
          unint64_t v73 = (uint64_t *)v62[6];
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v75 = *(void *)v28;
            v28 += 8;
            uint64_t v74 = v75;
            uint64_t v76 = *v73++;
            v70 += v76 * v74;
            --v72;
          }
          while (v72);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
        *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) = *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) + v65;
        uint64_t v28 = v116;
        double v69 = v117;
        uint64_t v77 = (v117 - v116) >> 3;
        uint64_t v78 = v77 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_138;
        }
        atomic_ullong v79 = v62[3];
        unint64_t v80 = *(void *)&v116[8 * v78] + 1;
        *(void *)&v116[8 * v78] = v80;
        if (v80 < *(void *)(v79 + 8 * v78))
        {
LABEL_137:
          uint64_t v77 = 1;
LABEL_138:
          if (v78 < 0 || !v77) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      uint64_t v81 = (unint64_t *)&v28[8 * v77 - 16];
      atomic_ullong v82 = v79 - 16;
      while (1)
      {
        uint64_t v83 = v77 - 1;
        v81[1] = 0;
        if (v77 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v84 = *v81 + 1;
        *v81-- = v84;
        unint64_t v85 = *(void *)(v82 + 8 * v77--);
        if (v84 < v85)
        {
          uint64_t v78 = v83 - 1;
          goto LABEL_137;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)a3);
LABEL_34:
          *(void *)a3 = v8;
          return;
        case 1:
          double v110 = *(double *)a2 + *(double *)a3;
LABEL_195:
          *(double *)a3 = v110;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v58 = *(double **)(*(void *)a3 + 8);
          uint64_t v59 = *(void *)(*(void *)a3 + 16) - (void)v58;
          if (v59)
          {
            double v60 = *(double *)a2;
            unint64_t v61 = v59 >> 3;
            if (v61 <= 1) {
              unint64_t v61 = 1;
            }
            do
            {
              *uint64_t v58 = v60 + *v58;
              ++v58;
              --v61;
            }
            while (v61);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          double v111 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v112 = *(atomic_ullong *volatile *)a3;
          unint64_t v113 = *(void *)a3 + vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v114 = (uint64_t)v111 + *(int *)(a3 + 8);
          if (v114 >= 1000000)
          {
            *(void *)a3 = (v113 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v112 & 0xFF00000000000000;
            LODWORD(v114) = v114 - 1000000;
          }
          if (v114 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v114;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)a3;
          uint64_t v88 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v87 = *(uint64_t **)(*(void *)a3 + 32);
          if (v87 == v88) {
            return;
          }
          if (!v86[1]) {
            return;
          }
          double v89 = *(double *)a2;
          uint64_t v90 = 1;
          do
          {
            uint64_t v91 = *v88++;
            v90 *= v91;
          }
          while (v88 != v87);
          if (!v90) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
          unint64_t v92 = (v86[4] - v86[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v92, &v115);
          uint64_t v28 = v116;
          unsigned int v93 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v94 = 0;
        uint64_t v95 = v93 - v28;
        if (v95)
        {
          unint64_t v96 = v95 >> 3;
          unint64_t v97 = (uint64_t *)v86[6];
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)v28;
            v28 += 8;
            uint64_t v98 = v99;
            uint64_t v100 = *v97++;
            v94 += v100 * v98;
            --v96;
          }
          while (v96);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
        *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) = v89 + *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94));
        uint64_t v28 = v116;
        unsigned int v93 = v117;
        uint64_t v101 = (v117 - v116) >> 3;
        uint64_t v102 = v101 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_160;
        }
        atomic_ullong v103 = v86[3];
        unint64_t v104 = *(void *)&v116[8 * v102] + 1;
        *(void *)&v116[8 * v102] = v104;
        if (v104 < *(void *)(v103 + 8 * v102))
        {
LABEL_159:
          uint64_t v101 = 1;
LABEL_160:
          if (v102 < 0 || !v101) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      atomic_ullong *volatile v105 = (unint64_t *)&v28[8 * v101 - 16];
      atomic_ullong v106 = v103 - 16;
      while (1)
      {
        uint64_t v107 = v101 - 1;
        v105[1] = 0;
        if (v101 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v108 = *v105 + 1;
        *v105-- = v108;
        unint64_t v109 = *(void *)(v106 + 8 * v101--);
        if (v108 < v109)
        {
          uint64_t v102 = v107 - 1;
          goto LABEL_159;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          int v10 = *(char *)(*(void *)&v9 + 31);
          if (v10 >= 0) {
            uint64_t v11 = (const std::string::value_type *)(*(void *)&v9 + 8);
          }
          else {
            uint64_t v11 = *(const std::string::value_type **)(*(void *)&v9 + 8);
          }
          if (v10 >= 0) {
            std::string::size_type v12 = *(unsigned __int8 *)(*(void *)&v9 + 31);
          }
          else {
            std::string::size_type v12 = *(void *)(*(void *)&v9 + 16);
          }
          std::string::append((std::string *)(*(void *)a3 + 8), v11, v12);
          break;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          double v13 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v13 + 16) - *(void *)(*(void *)&v13 + 8));
          uint64_t v15 = (double *)v14[1];
          uint64_t v16 = v14[2] - (void)v15;
          if (v16)
          {
            unint64_t v17 = v16 >> 3;
            float v18 = *(double **)(*(void *)&v13 + 8);
            if (v17 <= 1) {
              unint64_t v17 = 1;
            }
            do
            {
              double v19 = *v18++;
              *uint64_t v15 = v19 + *v15;
              ++v15;
              --v17;
            }
            while (v17);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_238:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v20 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a3;
          atomic_ullong *volatile v22 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v22, *(void *)&v20 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v24 = (uint64_t *)v21[3];
          double v23 = (uint64_t *)v21[4];
          if (v23 == v24) {
            return;
          }
          if (!*v22) {
            return;
          }
          uint64_t v25 = 1;
          do
          {
            uint64_t v26 = *v24++;
            v25 *= v26;
          }
          while (v24 != v23);
          if (!v25) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
          unint64_t v27 = (v21[4] - v21[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v27, &v115);
          uint64_t v28 = v116;
          unint64_t v29 = v117;
          break;
        default:
          goto LABEL_241;
      }
      break;
    default:
LABEL_241:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v30 = v29 - v28;
    if (v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = v30 >> 3;
      atomic_ullong *volatile v33 = *(uint64_t **)(*(void *)&v20 + 48);
      if (v32 <= 1) {
        unint64_t v32 = 1;
      }
      long long v34 = (uint64_t *)v28;
      unint64_t v35 = v32;
      do
      {
        uint64_t v37 = *v34++;
        uint64_t v36 = v37;
        uint64_t v38 = *v33++;
        v31 += v38 * v36;
        --v35;
      }
      while (v35);
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * (*(void *)(*(void *)&v20 + 72) + v31));
      long long v41 = (uint64_t *)v21[6];
      do
      {
        uint64_t v43 = *(void *)v28;
        v28 += 8;
        uint64_t v42 = v43;
        uint64_t v44 = *v41++;
        v39 += v44 * v42;
        --v32;
      }
      while (v32);
    }
    else
    {
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * *(void *)(*(void *)&v20 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
    *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39)) = v40 + *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39));
    uint64_t v28 = v116;
    unint64_t v29 = v117;
    uint64_t v45 = (v117 - v116) >> 3;
    uint64_t v46 = v45 - 1;
    if (v117 - v116 < 1) {
      goto LABEL_86;
    }
    atomic_ullong v47 = v21[3];
    unint64_t v48 = *(void *)&v116[8 * v46] + 1;
    *(void *)&v116[8 * v46] = v48;
    if (v48 >= *(void *)(v47 + 8 * v46)) {
      break;
    }
LABEL_85:
    uint64_t v45 = 1;
LABEL_86:
    if (v46 < 0 || !v45) {
      goto LABEL_162;
    }
  }
  uint64_t v49 = (unint64_t *)&v28[8 * v45 - 16];
  atomic_ullong v50 = v47 - 16;
  while (1)
  {
    uint64_t v51 = v45 - 1;
    v49[1] = 0;
    if (v45 - 1 <= 0) {
      break;
    }
    unint64_t v52 = *v49 + 1;
    *v49-- = v52;
    unint64_t v53 = *(void *)(v50 + 8 * v45--);
    if (v52 < v53)
    {
      uint64_t v46 = v51 - 1;
      goto LABEL_85;
    }
  }
LABEL_162:
  if (v28)
  {
LABEL_163:
    atomic_ullong *volatile v117 = v28;
    operator delete(v28);
  }
}

void sub_224191E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *atomic_ullong *volatile v14 = 0;
LABEL_28:
      *atomic_ullong *volatile v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EBD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EBD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 + *(void *)a1;
          goto LABEL_34;
        case 1:
          double v110 = *(double *)a3 + (double)*(uint64_t *)a1;
          goto LABEL_195;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v54 = *(double **)(*(void *)a3 + 8);
          uint64_t v55 = *(void *)(*(void *)a3 + 16) - (void)v54;
          if (v55)
          {
            unint64_t v56 = v55 >> 3;
            double v57 = (double)*(uint64_t *)a1;
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 + v57;
              ++v54;
              --v56;
            }
            while (v56);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 + *(void *)a1) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)a3;
          unint64_t v64 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v63 = *(uint64_t **)(*(void *)a3 + 32);
          if (v63 == v64) {
            return;
          }
          if (!v62[1]) {
            return;
          }
          double v65 = (double)*(uint64_t *)a1;
          uint64_t v66 = 1;
          do
          {
            uint64_t v67 = *v64++;
            v66 *= v67;
          }
          while (v64 != v63);
          if (!v66) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
          unint64_t v68 = (v62[4] - v62[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v68, &v115);
          uint64_t v28 = v116;
          double v69 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v69 - v28;
        if (v71)
        {
          unint64_t v72 = v71 >> 3;
          unint64_t v73 = (uint64_t *)v62[6];
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v75 = *(void *)v28;
            v28 += 8;
            uint64_t v74 = v75;
            uint64_t v76 = *v73++;
            v70 += v76 * v74;
            --v72;
          }
          while (v72);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
        *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) = *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) + v65;
        uint64_t v28 = v116;
        double v69 = v117;
        uint64_t v77 = (v117 - v116) >> 3;
        uint64_t v78 = v77 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_138;
        }
        atomic_ullong v79 = v62[3];
        unint64_t v80 = *(void *)&v116[8 * v78] + 1;
        *(void *)&v116[8 * v78] = v80;
        if (v80 < *(void *)(v79 + 8 * v78))
        {
LABEL_137:
          uint64_t v77 = 1;
LABEL_138:
          if (v78 < 0 || !v77) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      uint64_t v81 = (unint64_t *)&v28[8 * v77 - 16];
      atomic_ullong v82 = v79 - 16;
      while (1)
      {
        uint64_t v83 = v77 - 1;
        v81[1] = 0;
        if (v77 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v84 = *v81 + 1;
        *v81-- = v84;
        unint64_t v85 = *(void *)(v82 + 8 * v77--);
        if (v84 < v85)
        {
          uint64_t v78 = v83 - 1;
          goto LABEL_137;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a1 + (double)*(uint64_t *)a3);
LABEL_34:
          *(void *)a3 = v8;
          return;
        case 1:
          double v110 = *(double *)a1 + *(double *)a3;
LABEL_195:
          *(double *)a3 = v110;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v58 = *(double **)(*(void *)a3 + 8);
          uint64_t v59 = *(void *)(*(void *)a3 + 16) - (void)v58;
          if (v59)
          {
            double v60 = *(double *)a1;
            unint64_t v61 = v59 >> 3;
            if (v61 <= 1) {
              unint64_t v61 = 1;
            }
            do
            {
              *uint64_t v58 = v60 + *v58;
              ++v58;
              --v61;
            }
            while (v61);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          double v111 = (*(double *)a1 - (double)(uint64_t)floor(*(double *)a1)) * 1000000.0;
          atomic_ullong *volatile v112 = *(atomic_ullong *volatile *)a3;
          unint64_t v113 = *(void *)a3 + vcvtmd_s64_f64(*(double *)a1);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v114 = (uint64_t)v111 + *(int *)(a3 + 8);
          if (v114 >= 1000000)
          {
            *(void *)a3 = (v113 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v112 & 0xFF00000000000000;
            LODWORD(v114) = v114 - 1000000;
          }
          if (v114 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v114;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)a3;
          uint64_t v88 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v87 = *(uint64_t **)(*(void *)a3 + 32);
          if (v87 == v88) {
            return;
          }
          if (!v86[1]) {
            return;
          }
          double v89 = *(double *)a1;
          uint64_t v90 = 1;
          do
          {
            uint64_t v91 = *v88++;
            v90 *= v91;
          }
          while (v88 != v87);
          if (!v90) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
          unint64_t v92 = (v86[4] - v86[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v92, &v115);
          uint64_t v28 = v116;
          unsigned int v93 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v94 = 0;
        uint64_t v95 = v93 - v28;
        if (v95)
        {
          unint64_t v96 = v95 >> 3;
          unint64_t v97 = (uint64_t *)v86[6];
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)v28;
            v28 += 8;
            uint64_t v98 = v99;
            uint64_t v100 = *v97++;
            v94 += v100 * v98;
            --v96;
          }
          while (v96);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
        *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) = v89 + *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94));
        uint64_t v28 = v116;
        unsigned int v93 = v117;
        uint64_t v101 = (v117 - v116) >> 3;
        uint64_t v102 = v101 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_160;
        }
        atomic_ullong v103 = v86[3];
        unint64_t v104 = *(void *)&v116[8 * v102] + 1;
        *(void *)&v116[8 * v102] = v104;
        if (v104 < *(void *)(v103 + 8 * v102))
        {
LABEL_159:
          uint64_t v101 = 1;
LABEL_160:
          if (v102 < 0 || !v101) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      atomic_ullong *volatile v105 = (unint64_t *)&v28[8 * v101 - 16];
      atomic_ullong v106 = v103 - 16;
      while (1)
      {
        uint64_t v107 = v101 - 1;
        v105[1] = 0;
        if (v101 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v108 = *v105 + 1;
        *v105-- = v108;
        unint64_t v109 = *(void *)(v106 + 8 * v101--);
        if (v108 < v109)
        {
          uint64_t v102 = v107 - 1;
          goto LABEL_159;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          double v9 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          int v10 = *(char *)(*(void *)&v9 + 31);
          if (v10 >= 0) {
            uint64_t v11 = (const std::string::value_type *)(*(void *)&v9 + 8);
          }
          else {
            uint64_t v11 = *(const std::string::value_type **)(*(void *)&v9 + 8);
          }
          if (v10 >= 0) {
            std::string::size_type v12 = *(unsigned __int8 *)(*(void *)&v9 + 31);
          }
          else {
            std::string::size_type v12 = *(void *)(*(void *)&v9 + 16);
          }
          std::string::append((std::string *)(*(void *)a3 + 8), v11, v12);
          break;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          double v13 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v13 + 16) - *(void *)(*(void *)&v13 + 8));
          uint64_t v15 = (double *)v14[1];
          uint64_t v16 = v14[2] - (void)v15;
          if (v16)
          {
            unint64_t v17 = v16 >> 3;
            float v18 = *(double **)(*(void *)&v13 + 8);
            if (v17 <= 1) {
              unint64_t v17 = 1;
            }
            do
            {
              double v19 = *v18++;
              *uint64_t v15 = v19 + *v15;
              ++v15;
              --v17;
            }
            while (v17);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_238:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v20 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a3;
          atomic_ullong *volatile v22 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v22, *(void *)&v20 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v24 = (uint64_t *)v21[3];
          double v23 = (uint64_t *)v21[4];
          if (v23 == v24) {
            return;
          }
          if (!*v22) {
            return;
          }
          uint64_t v25 = 1;
          do
          {
            uint64_t v26 = *v24++;
            v25 *= v26;
          }
          while (v24 != v23);
          if (!v25) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
          unint64_t v27 = (v21[4] - v21[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v27, &v115);
          uint64_t v28 = v116;
          unint64_t v29 = v117;
          break;
        default:
          goto LABEL_241;
      }
      break;
    default:
LABEL_241:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v30 = v29 - v28;
    if (v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = v30 >> 3;
      atomic_ullong *volatile v33 = *(uint64_t **)(*(void *)&v20 + 48);
      if (v32 <= 1) {
        unint64_t v32 = 1;
      }
      long long v34 = (uint64_t *)v28;
      unint64_t v35 = v32;
      do
      {
        uint64_t v37 = *v34++;
        uint64_t v36 = v37;
        uint64_t v38 = *v33++;
        v31 += v38 * v36;
        --v35;
      }
      while (v35);
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * (*(void *)(*(void *)&v20 + 72) + v31));
      long long v41 = (uint64_t *)v21[6];
      do
      {
        uint64_t v43 = *(void *)v28;
        v28 += 8;
        uint64_t v42 = v43;
        uint64_t v44 = *v41++;
        v39 += v44 * v42;
        --v32;
      }
      while (v32);
    }
    else
    {
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * *(void *)(*(void *)&v20 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
    *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39)) = v40 + *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39));
    uint64_t v28 = v116;
    unint64_t v29 = v117;
    uint64_t v45 = (v117 - v116) >> 3;
    uint64_t v46 = v45 - 1;
    if (v117 - v116 < 1) {
      goto LABEL_86;
    }
    atomic_ullong v47 = v21[3];
    unint64_t v48 = *(void *)&v116[8 * v46] + 1;
    *(void *)&v116[8 * v46] = v48;
    if (v48 >= *(void *)(v47 + 8 * v46)) {
      break;
    }
LABEL_85:
    uint64_t v45 = 1;
LABEL_86:
    if (v46 < 0 || !v45) {
      goto LABEL_162;
    }
  }
  uint64_t v49 = (unint64_t *)&v28[8 * v45 - 16];
  atomic_ullong v50 = v47 - 16;
  while (1)
  {
    uint64_t v51 = v45 - 1;
    v49[1] = 0;
    if (v45 - 1 <= 0) {
      break;
    }
    unint64_t v52 = *v49 + 1;
    *v49-- = v52;
    unint64_t v53 = *(void *)(v50 + 8 * v45--);
    if (v52 < v53)
    {
      uint64_t v46 = v51 - 1;
      goto LABEL_85;
    }
  }
LABEL_162:
  if (v28)
  {
LABEL_163:
    atomic_ullong *volatile v117 = v28;
    operator delete(v28);
  }
}

void sub_224193D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *atomic_ullong *volatile v14 = 0;
LABEL_28:
      *atomic_ullong *volatile v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EC58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EC58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 + *(void *)a2;
          goto LABEL_34;
        case 1:
          double v110 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_195;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v54 = *(double **)(*(void *)a3 + 8);
          uint64_t v55 = *(void *)(*(void *)a3 + 16) - (void)v54;
          if (v55)
          {
            unint64_t v56 = v55 >> 3;
            double v57 = (double)*(uint64_t *)a2;
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 + v57;
              ++v54;
              --v56;
            }
            while (v56);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)a3;
          unint64_t v64 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v63 = *(uint64_t **)(*(void *)a3 + 32);
          if (v63 == v64) {
            return;
          }
          if (!v62[1]) {
            return;
          }
          double v65 = (double)*(uint64_t *)a2;
          uint64_t v66 = 1;
          do
          {
            uint64_t v67 = *v64++;
            v66 *= v67;
          }
          while (v64 != v63);
          if (!v66) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
          unint64_t v68 = (v62[4] - v62[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v68, &v115);
          uint64_t v28 = v116;
          double v69 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v69 - v28;
        if (v71)
        {
          unint64_t v72 = v71 >> 3;
          unint64_t v73 = (uint64_t *)v62[6];
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v75 = *(void *)v28;
            v28 += 8;
            uint64_t v74 = v75;
            uint64_t v76 = *v73++;
            v70 += v76 * v74;
            --v72;
          }
          while (v72);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
        *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) = *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) + v65;
        uint64_t v28 = v116;
        double v69 = v117;
        uint64_t v77 = (v117 - v116) >> 3;
        uint64_t v78 = v77 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_138;
        }
        atomic_ullong v79 = v62[3];
        unint64_t v80 = *(void *)&v116[8 * v78] + 1;
        *(void *)&v116[8 * v78] = v80;
        if (v80 < *(void *)(v79 + 8 * v78))
        {
LABEL_137:
          uint64_t v77 = 1;
LABEL_138:
          if (v78 < 0 || !v77) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      uint64_t v81 = (unint64_t *)&v28[8 * v77 - 16];
      atomic_ullong v82 = v79 - 16;
      while (1)
      {
        uint64_t v83 = v77 - 1;
        v81[1] = 0;
        if (v77 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v84 = *v81 + 1;
        *v81-- = v84;
        unint64_t v85 = *(void *)(v82 + 8 * v77--);
        if (v84 < v85)
        {
          uint64_t v78 = v83 - 1;
          goto LABEL_137;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)a3);
LABEL_34:
          *(void *)a3 = v8;
          return;
        case 1:
          double v110 = *(double *)a2 + *(double *)a3;
LABEL_195:
          *(double *)a3 = v110;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v58 = *(double **)(*(void *)a3 + 8);
          uint64_t v59 = *(void *)(*(void *)a3 + 16) - (void)v58;
          if (v59)
          {
            double v60 = *(double *)a2;
            unint64_t v61 = v59 >> 3;
            if (v61 <= 1) {
              unint64_t v61 = 1;
            }
            do
            {
              *uint64_t v58 = v60 + *v58;
              ++v58;
              --v61;
            }
            while (v61);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 6:
          double v111 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v112 = *(atomic_ullong *volatile *)a3;
          unint64_t v113 = *(void *)a3 + vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v114 = (uint64_t)v111 + *(int *)(a3 + 8);
          if (v114 >= 1000000)
          {
            *(void *)a3 = (v113 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v112 & 0xFF00000000000000;
            LODWORD(v114) = v114 - 1000000;
          }
          if (v114 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v114;
          return;
        case 7:
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)a3;
          uint64_t v88 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v87 = *(uint64_t **)(*(void *)a3 + 32);
          if (v87 == v88) {
            return;
          }
          if (!v86[1]) {
            return;
          }
          double v89 = *(double *)a2;
          uint64_t v90 = 1;
          do
          {
            uint64_t v91 = *v88++;
            v90 *= v91;
          }
          while (v88 != v87);
          if (!v90) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
          unint64_t v92 = (v86[4] - v86[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v92, &v115);
          uint64_t v28 = v116;
          unsigned int v93 = v117;
          break;
        default:
          goto LABEL_241;
      }
      while (2)
      {
        uint64_t v94 = 0;
        uint64_t v95 = v93 - v28;
        if (v95)
        {
          unint64_t v96 = v95 >> 3;
          unint64_t v97 = (uint64_t *)v86[6];
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)v28;
            v28 += 8;
            uint64_t v98 = v99;
            uint64_t v100 = *v97++;
            v94 += v100 * v98;
            --v96;
          }
          while (v96);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
        *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) = v89 + *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94));
        uint64_t v28 = v116;
        unsigned int v93 = v117;
        uint64_t v101 = (v117 - v116) >> 3;
        uint64_t v102 = v101 - 1;
        if (v117 - v116 < 1) {
          goto LABEL_160;
        }
        atomic_ullong v103 = v86[3];
        unint64_t v104 = *(void *)&v116[8 * v102] + 1;
        *(void *)&v116[8 * v102] = v104;
        if (v104 < *(void *)(v103 + 8 * v102))
        {
LABEL_159:
          uint64_t v101 = 1;
LABEL_160:
          if (v102 < 0 || !v101) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      atomic_ullong *volatile v105 = (unint64_t *)&v28[8 * v101 - 16];
      atomic_ullong v106 = v103 - 16;
      while (1)
      {
        uint64_t v107 = v101 - 1;
        v105[1] = 0;
        if (v101 - 1 <= 0) {
          goto LABEL_163;
        }
        unint64_t v108 = *v105 + 1;
        *v105-- = v108;
        unint64_t v109 = *(void *)(v106 + 8 * v101--);
        if (v108 < v109)
        {
          uint64_t v102 = v107 - 1;
          goto LABEL_159;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          int v10 = *(char *)(*(void *)&v9 + 31);
          if (v10 >= 0) {
            uint64_t v11 = (const std::string::value_type *)(*(void *)&v9 + 8);
          }
          else {
            uint64_t v11 = *(const std::string::value_type **)(*(void *)&v9 + 8);
          }
          if (v10 >= 0) {
            std::string::size_type v12 = *(unsigned __int8 *)(*(void *)&v9 + 31);
          }
          else {
            std::string::size_type v12 = *(void *)(*(void *)&v9 + 16);
          }
          std::string::append((std::string *)(*(void *)a3 + 8), v11, v12);
          break;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          double v13 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v13 + 16) - *(void *)(*(void *)&v13 + 8));
          uint64_t v15 = (double *)v14[1];
          uint64_t v16 = v14[2] - (void)v15;
          if (v16)
          {
            unint64_t v17 = v16 >> 3;
            float v18 = *(double **)(*(void *)&v13 + 8);
            if (v17 <= 1) {
              unint64_t v17 = 1;
            }
            do
            {
              double v19 = *v18++;
              *uint64_t v15 = v19 + *v15;
              ++v15;
              --v17;
            }
            while (v17);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        default:
          goto LABEL_241;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_238;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_238:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v20 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a3;
          atomic_ullong *volatile v22 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v22, *(void *)&v20 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v24 = (uint64_t *)v21[3];
          double v23 = (uint64_t *)v21[4];
          if (v23 == v24) {
            return;
          }
          if (!*v22) {
            return;
          }
          uint64_t v25 = 1;
          do
          {
            uint64_t v26 = *v24++;
            v25 *= v26;
          }
          while (v24 != v23);
          if (!v25) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
          unint64_t v27 = (v21[4] - v21[3]) >> 3;
          uint64_t v115 = 0;
          std::vector<unsigned long>::vector(&v116, v27, &v115);
          uint64_t v28 = v116;
          unint64_t v29 = v117;
          break;
        default:
          goto LABEL_241;
      }
      break;
    default:
LABEL_241:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v30 = v29 - v28;
    if (v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = v30 >> 3;
      atomic_ullong *volatile v33 = *(uint64_t **)(*(void *)&v20 + 48);
      if (v32 <= 1) {
        unint64_t v32 = 1;
      }
      long long v34 = (uint64_t *)v28;
      unint64_t v35 = v32;
      do
      {
        uint64_t v37 = *v34++;
        uint64_t v36 = v37;
        uint64_t v38 = *v33++;
        v31 += v38 * v36;
        --v35;
      }
      while (v35);
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * (*(void *)(*(void *)&v20 + 72) + v31));
      long long v41 = (uint64_t *)v21[6];
      do
      {
        uint64_t v43 = *(void *)v28;
        v28 += 8;
        uint64_t v42 = v43;
        uint64_t v44 = *v41++;
        v39 += v44 * v42;
        --v32;
      }
      while (v32);
    }
    else
    {
      uint64_t v39 = 0;
      double v40 = *(double *)(**(void **)(*(void *)&v20 + 8) + 8 * *(void *)(*(void *)&v20 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v22);
    *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39)) = v40 + *(double *)(*(void *)v21[1] + 8 * (v21[9] + v39));
    uint64_t v28 = v116;
    unint64_t v29 = v117;
    uint64_t v45 = (v117 - v116) >> 3;
    uint64_t v46 = v45 - 1;
    if (v117 - v116 < 1) {
      goto LABEL_86;
    }
    atomic_ullong v47 = v21[3];
    unint64_t v48 = *(void *)&v116[8 * v46] + 1;
    *(void *)&v116[8 * v46] = v48;
    if (v48 >= *(void *)(v47 + 8 * v46)) {
      break;
    }
LABEL_85:
    uint64_t v45 = 1;
LABEL_86:
    if (v46 < 0 || !v45) {
      goto LABEL_162;
    }
  }
  uint64_t v49 = (unint64_t *)&v28[8 * v45 - 16];
  atomic_ullong v50 = v47 - 16;
  while (1)
  {
    uint64_t v51 = v45 - 1;
    v49[1] = 0;
    if (v45 - 1 <= 0) {
      break;
    }
    unint64_t v52 = *v49 + 1;
    *v49-- = v52;
    unint64_t v53 = *(void *)(v50 + 8 * v45--);
    if (v52 < v53)
    {
      uint64_t v46 = v51 - 1;
      goto LABEL_85;
    }
  }
LABEL_162:
  if (v28)
  {
LABEL_163:
    atomic_ullong *volatile v117 = v28;
    operator delete(v28);
  }
}

void sub_224195B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *atomic_ullong *volatile v14 = 0;
LABEL_28:
      *atomic_ullong *volatile v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76ECD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76ECD8;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      double v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        double v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v34 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v41 = *(_OWORD *)(v14 + 40);
      long long v42 = v17;
      *(_OWORD *)double v40 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      atomic_ullong *volatile v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        atomic_ullong *volatile v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v37 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v36, (const std::string *)__p);
        __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      uint64_t v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v41 = *(_OWORD *)(v27 + 40);
      long long v42 = v30;
      *(_OWORD *)double v40 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double result = v5 - v19;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v5 - v19;
  return result;
}

void sub_224196684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76ED58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76ED58;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result = (double)*(int *)(a1 + 8) / 1000000.0
         + (double)((uint64_t)(*(void *)a1 << 8) >> 8)
         - ((double)*(int *)(a2 + 8) / 1000000.0
          + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EDD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EDD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7::operator()(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a1[12];
  uint64_t v5 = 1;
  switch(a1[12])
  {
    case 3u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 3;
      goto LABEL_5;
    case 4u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 4;
      goto LABEL_5;
    case 5u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 5;
LABEL_5:
      uint64_t v5 = (uint64_t)(*v7 - *v6) >> v8;
      break;
    case 9u:
      long long v16 = *(uint64_t **)(*(void *)a1 + 24);
      uint64_t v15 = *(uint64_t **)(*(void *)a1 + 32);
      if (v15 == v16)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)a1 + 8);
        if (v5)
        {
          uint64_t v5 = 1;
          do
          {
            uint64_t v17 = *v16++;
            v5 *= v17;
          }
          while (v16 != v15);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v9 = 1;
  switch(a2[12])
  {
    case 3:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 3;
      goto LABEL_10;
    case 4:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 4;
      goto LABEL_10;
    case 5:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 5;
LABEL_10:
      uint64_t v9 = (uint64_t)(*v11 - *v10) >> v12;
      break;
    case 9:
      double v19 = *(uint64_t **)(*(void *)a2 + 24);
      float v18 = *(uint64_t **)(*(void *)a2 + 32);
      if (v18 == v19)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)a2 + 8);
        if (v9)
        {
          uint64_t v9 = 1;
          do
          {
            uint64_t v20 = *v19++;
            v9 *= v20;
          }
          while (v19 != v18);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v5 != v9)
  {
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v14 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v14)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    *(unsigned char *)(a3 + 12) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = *(void *)a3 - *(void *)a2;
          goto LABEL_51;
        case 1:
          double v118 = (double)*(uint64_t *)a2;
          goto LABEL_212;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(double **)(*(void *)a3 + 8);
          uint64_t v63 = *(void *)(*(void *)a3 + 16) - (void)v62;
          if (v63)
          {
            unint64_t v64 = v63 >> 3;
            double v65 = (double)*(uint64_t *)a2;
            if (v64 <= 1) {
              unint64_t v64 = 1;
            }
            do
            {
              *atomic_ullong *volatile v62 = *v62 - v65;
              ++v62;
              --v64;
            }
            while (v64);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 - *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v70 = *(atomic_ullong *volatile *)a3;
          unint64_t v72 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v71 = *(uint64_t **)(*(void *)a3 + 32);
          if (v71 == v72) {
            return;
          }
          if (!v70[1]) {
            return;
          }
          double v73 = (double)*(uint64_t *)a2;
          uint64_t v74 = 1;
          do
          {
            uint64_t v75 = *v72++;
            v74 *= v75;
          }
          while (v72 != v71);
          if (!v74) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
          unint64_t v76 = (v70[4] - v70[3]) >> 3;
          uint64_t v123 = 0;
          std::vector<unsigned long>::vector(&v124, v76, &v123);
          uint64_t v36 = v124;
          uint64_t v77 = v125;
          break;
        default:
          goto LABEL_258;
      }
      while (2)
      {
        uint64_t v78 = 0;
        uint64_t v79 = v77 - v36;
        if (v79)
        {
          unint64_t v80 = v79 >> 3;
          uint64_t v81 = (uint64_t *)v70[6];
          if (v80 <= 1) {
            unint64_t v80 = 1;
          }
          do
          {
            uint64_t v83 = *(void *)v36;
            v36 += 8;
            uint64_t v82 = v83;
            uint64_t v84 = *v81++;
            v78 += v84 * v82;
            --v80;
          }
          while (v80);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
        *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) = *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) - v73;
        uint64_t v36 = v124;
        uint64_t v77 = v125;
        uint64_t v85 = (v125 - v124) >> 3;
        uint64_t v86 = v85 - 1;
        if (v125 - v124 < 1) {
          goto LABEL_155;
        }
        atomic_ullong v87 = v70[3];
        unint64_t v88 = *(void *)&v124[8 * v86] + 1;
        *(void *)&v124[8 * v86] = v88;
        if (v88 < *(void *)(v87 + 8 * v86))
        {
LABEL_154:
          uint64_t v85 = 1;
LABEL_155:
          if (v86 < 0 || !v85) {
            goto LABEL_179;
          }
          continue;
        }
        break;
      }
      double v89 = (unint64_t *)&v36[8 * v85 - 16];
      atomic_ullong v90 = v87 - 16;
      while (1)
      {
        uint64_t v91 = v85 - 1;
        v89[1] = 0;
        if (v85 - 1 <= 0) {
          goto LABEL_180;
        }
        unint64_t v92 = *v89 + 1;
        *v89-- = v92;
        unint64_t v93 = *(void *)(v90 + 8 * v85--);
        if (v92 < v93)
        {
          uint64_t v86 = v91 - 1;
          goto LABEL_154;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = (uint64_t)((double)*(uint64_t *)a3 - *(double *)a2);
LABEL_51:
          *(void *)a3 = v13;
          return;
        case 1:
          double v118 = *(double *)a2;
LABEL_212:
          *(double *)a3 = *(double *)a3 - v118;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v66 = *(double **)(*(void *)a3 + 8);
          uint64_t v67 = *(void *)(*(void *)a3 + 16) - (void)v66;
          if (v67)
          {
            double v68 = *(double *)a2;
            unint64_t v69 = v67 >> 3;
            if (v69 <= 1) {
              unint64_t v69 = 1;
            }
            do
            {
              double *v66 = *v66 - v68;
              ++v66;
              --v69;
            }
            while (v69);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 6:
          double v119 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)a3;
          unint64_t v121 = *(void *)a3 - vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v121 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v122 = *(int *)(a3 + 8) - (uint64_t)v119;
          if (v122 < 0)
          {
            *(void *)a3 = (v121 - 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v120 & 0xFF00000000000000;
            LODWORD(v122) = v122 + 1000000;
          }
          if (v122 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v122;
          return;
        case 7:
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v94 = *(atomic_ullong *volatile *)a3;
          unint64_t v96 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v95 = *(uint64_t **)(*(void *)a3 + 32);
          if (v95 == v96) {
            return;
          }
          if (!v94[1]) {
            return;
          }
          double v97 = *(double *)a2;
          uint64_t v98 = 1;
          do
          {
            uint64_t v99 = *v96++;
            v98 *= v99;
          }
          while (v96 != v95);
          if (!v98) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v94 + 1);
          unint64_t v100 = (v94[4] - v94[3]) >> 3;
          uint64_t v123 = 0;
          std::vector<unsigned long>::vector(&v124, v100, &v123);
          uint64_t v36 = v124;
          uint64_t v101 = v125;
          break;
        default:
          goto LABEL_258;
      }
      while (2)
      {
        uint64_t v102 = 0;
        uint64_t v103 = v101 - v36;
        if (v103)
        {
          unint64_t v104 = v103 >> 3;
          atomic_ullong *volatile v105 = (uint64_t *)v94[6];
          if (v104 <= 1) {
            unint64_t v104 = 1;
          }
          do
          {
            uint64_t v107 = *(void *)v36;
            v36 += 8;
            uint64_t v106 = v107;
            uint64_t v108 = *v105++;
            v102 += v108 * v106;
            --v104;
          }
          while (v104);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v94 + 1);
        *(double *)(*(void *)v94[1] + 8 * (v94[9] + v102)) = *(double *)(*(void *)v94[1] + 8 * (v94[9] + v102))
                                                             - v97;
        uint64_t v36 = v124;
        uint64_t v101 = v125;
        uint64_t v109 = (v125 - v124) >> 3;
        uint64_t v110 = v109 - 1;
        if (v125 - v124 < 1) {
          goto LABEL_177;
        }
        atomic_ullong v111 = v94[3];
        unint64_t v112 = *(void *)&v124[8 * v110] + 1;
        *(void *)&v124[8 * v110] = v112;
        if (v112 < *(void *)(v111 + 8 * v110))
        {
LABEL_176:
          uint64_t v109 = 1;
LABEL_177:
          if (v110 < 0 || !v109) {
            goto LABEL_179;
          }
          continue;
        }
        break;
      }
      unint64_t v113 = (unint64_t *)&v36[8 * v109 - 16];
      atomic_ullong v114 = v111 - 16;
      while (1)
      {
        uint64_t v115 = v109 - 1;
        v113[1] = 0;
        if (v109 - 1 <= 0) {
          goto LABEL_180;
        }
        unint64_t v116 = *v113 + 1;
        *v113-- = v116;
        unint64_t v117 = *(void *)(v114 + 8 * v109--);
        if (v116 < v117)
        {
          uint64_t v110 = v115 - 1;
          goto LABEL_176;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          double v21 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v21 + 16) - *(void *)(*(void *)&v21 + 8));
          double v23 = (double *)v22[1];
          uint64_t v24 = v22[2] - (void)v23;
          if (v24)
          {
            unint64_t v25 = v24 >> 3;
            uint64_t v26 = *(double **)(*(void *)&v21 + 8);
            if (v25 <= 1) {
              unint64_t v25 = 1;
            }
            do
            {
              double v27 = *v26++;
              double *v23 = *v23 - v27;
              ++v23;
              --v25;
            }
            while (v25);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        default:
          goto LABEL_258;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_255;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_255;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_255:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v28 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)a3;
          long long v30 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v30, *(void *)&v28 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          unint64_t v32 = (uint64_t *)v29[3];
          float v31 = (uint64_t *)v29[4];
          if (v31 == v32) {
            return;
          }
          if (!*v30) {
            return;
          }
          uint64_t v33 = 1;
          do
          {
            uint64_t v34 = *v32++;
            v33 *= v34;
          }
          while (v32 != v31);
          if (!v33) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
          unint64_t v35 = (v29[4] - v29[3]) >> 3;
          uint64_t v123 = 0;
          std::vector<unsigned long>::vector(&v124, v35, &v123);
          uint64_t v36 = v124;
          uint64_t v37 = v125;
          break;
        default:
          goto LABEL_258;
      }
      break;
    default:
LABEL_258:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v38 = v37 - v36;
    if (v38)
    {
      uint64_t v39 = 0;
      unint64_t v40 = v38 >> 3;
      long long v41 = *(uint64_t **)(*(void *)&v28 + 48);
      if (v40 <= 1) {
        unint64_t v40 = 1;
      }
      long long v42 = (uint64_t *)v36;
      unint64_t v43 = v40;
      do
      {
        uint64_t v45 = *v42++;
        uint64_t v44 = v45;
        uint64_t v46 = *v41++;
        v39 += v46 * v44;
        --v43;
      }
      while (v43);
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(*(void *)&v28 + 8) + 8 * (*(void *)(*(void *)&v28 + 72) + v39));
      uint64_t v49 = (uint64_t *)v29[6];
      do
      {
        uint64_t v51 = *(void *)v36;
        v36 += 8;
        uint64_t v50 = v51;
        uint64_t v52 = *v49++;
        v47 += v52 * v50;
        --v40;
      }
      while (v40);
    }
    else
    {
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(*(void *)&v28 + 8) + 8 * *(void *)(*(void *)&v28 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
    *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47)) = *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47)) - v48;
    uint64_t v36 = v124;
    uint64_t v37 = v125;
    uint64_t v53 = (v125 - v124) >> 3;
    uint64_t v54 = v53 - 1;
    if (v125 - v124 < 1) {
      goto LABEL_103;
    }
    atomic_ullong v55 = v29[3];
    unint64_t v56 = *(void *)&v124[8 * v54] + 1;
    *(void *)&v124[8 * v54] = v56;
    if (v56 >= *(void *)(v55 + 8 * v54)) {
      break;
    }
LABEL_102:
    uint64_t v53 = 1;
LABEL_103:
    if (v54 < 0 || !v53) {
      goto LABEL_179;
    }
  }
  double v57 = (unint64_t *)&v36[8 * v53 - 16];
  atomic_ullong v58 = v55 - 16;
  while (1)
  {
    uint64_t v59 = v53 - 1;
    v57[1] = 0;
    if (v53 - 1 <= 0) {
      break;
    }
    unint64_t v60 = *v57 + 1;
    *v57-- = v60;
    unint64_t v61 = *(void *)(v58 + 8 * v53--);
    if (v60 < v61)
    {
      uint64_t v54 = v59 - 1;
      goto LABEL_102;
    }
  }
LABEL_179:
  if (v36)
  {
LABEL_180:
    unint64_t v125 = v36;
    operator delete(v36);
  }
}

void sub_22419845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EE58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EE58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 - *(void *)a2;
          goto LABEL_27;
        case 1:
          double v106 = (double)*(uint64_t *)a2;
          goto LABEL_188;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v50 = *(double **)(*(void *)a3 + 8);
          uint64_t v51 = *(void *)(*(void *)a3 + 16) - (void)v50;
          if (v51)
          {
            unint64_t v52 = v51 >> 3;
            double v53 = (double)*(uint64_t *)a2;
            if (v52 <= 1) {
              unint64_t v52 = 1;
            }
            do
            {
              *uint64_t v50 = *v50 - v53;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 - *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)a3;
          unint64_t v60 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v59 = *(uint64_t **)(*(void *)a3 + 32);
          if (v59 == v60) {
            return;
          }
          if (!v58[1]) {
            return;
          }
          double v61 = (double)*(uint64_t *)a2;
          uint64_t v62 = 1;
          do
          {
            uint64_t v63 = *v60++;
            v62 *= v63;
          }
          while (v60 != v59);
          if (!v62) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
          unint64_t v64 = (v58[4] - v58[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v64, &v111);
          atomic_ullong *volatile v24 = v112;
          double v65 = v113;
          break;
        default:
          goto LABEL_234;
      }
      while (2)
      {
        uint64_t v66 = 0;
        uint64_t v67 = v65 - v24;
        if (v67)
        {
          unint64_t v68 = v67 >> 3;
          unint64_t v69 = (uint64_t *)v58[6];
          if (v68 <= 1) {
            unint64_t v68 = 1;
          }
          do
          {
            uint64_t v71 = *(void *)v24;
            v24 += 8;
            uint64_t v70 = v71;
            uint64_t v72 = *v69++;
            v66 += v72 * v70;
            --v68;
          }
          while (v68);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
        *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) = *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) - v61;
        atomic_ullong *volatile v24 = v112;
        double v65 = v113;
        uint64_t v73 = (v113 - v112) >> 3;
        uint64_t v74 = v73 - 1;
        if (v113 - v112 < 1) {
          goto LABEL_131;
        }
        atomic_ullong v75 = v58[3];
        unint64_t v76 = *(void *)&v112[8 * v74] + 1;
        *(void *)&v112[8 * v74] = v76;
        if (v76 < *(void *)(v75 + 8 * v74))
        {
LABEL_130:
          uint64_t v73 = 1;
LABEL_131:
          if (v74 < 0 || !v73) {
            goto LABEL_155;
          }
          continue;
        }
        break;
      }
      uint64_t v77 = (unint64_t *)&v24[8 * v73 - 16];
      atomic_ullong v78 = v75 - 16;
      while (1)
      {
        uint64_t v79 = v73 - 1;
        v77[1] = 0;
        if (v73 - 1 <= 0) {
          goto LABEL_156;
        }
        unint64_t v80 = *v77 + 1;
        *v77-- = v80;
        unint64_t v81 = *(void *)(v78 + 8 * v73--);
        if (v80 < v81)
        {
          uint64_t v74 = v79 - 1;
          goto LABEL_130;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)((double)*(uint64_t *)a3 - *(double *)a2);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v106 = *(double *)a2;
LABEL_188:
          *(double *)a3 = *(double *)a3 - v106;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v54 = *(double **)(*(void *)a3 + 8);
          uint64_t v55 = *(void *)(*(void *)a3 + 16) - (void)v54;
          if (v55)
          {
            double v56 = *(double *)a2;
            unint64_t v57 = v55 >> 3;
            if (v57 <= 1) {
              unint64_t v57 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 - v56;
              ++v54;
              --v57;
            }
            while (v57);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 6:
          double v107 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v108 = *(atomic_ullong *volatile *)a3;
          unint64_t v109 = *(void *)a3 - vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v109 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v110 = *(int *)(a3 + 8) - (uint64_t)v107;
          if (v110 < 0)
          {
            *(void *)a3 = (v109 - 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v108 & 0xFF00000000000000;
            LODWORD(v110) = v110 + 1000000;
          }
          if (v110 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v110;
          return;
        case 7:
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v82 = *(atomic_ullong *volatile *)a3;
          uint64_t v84 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v83 = *(uint64_t **)(*(void *)a3 + 32);
          if (v83 == v84) {
            return;
          }
          if (!v82[1]) {
            return;
          }
          double v85 = *(double *)a2;
          uint64_t v86 = 1;
          do
          {
            uint64_t v87 = *v84++;
            v86 *= v87;
          }
          while (v84 != v83);
          if (!v86) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
          unint64_t v88 = (v82[4] - v82[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v88, &v111);
          atomic_ullong *volatile v24 = v112;
          double v89 = v113;
          break;
        default:
          goto LABEL_234;
      }
      while (2)
      {
        uint64_t v90 = 0;
        uint64_t v91 = v89 - v24;
        if (v91)
        {
          unint64_t v92 = v91 >> 3;
          unint64_t v93 = (uint64_t *)v82[6];
          if (v92 <= 1) {
            unint64_t v92 = 1;
          }
          do
          {
            uint64_t v95 = *(void *)v24;
            v24 += 8;
            uint64_t v94 = v95;
            uint64_t v96 = *v93++;
            v90 += v96 * v94;
            --v92;
          }
          while (v92);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
        *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) = *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) - v85;
        atomic_ullong *volatile v24 = v112;
        double v89 = v113;
        uint64_t v97 = (v113 - v112) >> 3;
        uint64_t v98 = v97 - 1;
        if (v113 - v112 < 1) {
          goto LABEL_153;
        }
        atomic_ullong v99 = v82[3];
        unint64_t v100 = *(void *)&v112[8 * v98] + 1;
        *(void *)&v112[8 * v98] = v100;
        if (v100 < *(void *)(v99 + 8 * v98))
        {
LABEL_152:
          uint64_t v97 = 1;
LABEL_153:
          if (v98 < 0 || !v97) {
            goto LABEL_155;
          }
          continue;
        }
        break;
      }
      uint64_t v101 = (unint64_t *)&v24[8 * v97 - 16];
      atomic_ullong v102 = v99 - 16;
      while (1)
      {
        uint64_t v103 = v97 - 1;
        v101[1] = 0;
        if (v97 - 1 <= 0) {
          goto LABEL_156;
        }
        unint64_t v104 = *v101 + 1;
        *v101-- = v104;
        unint64_t v105 = *(void *)(v102 + 8 * v97--);
        if (v104 < v105)
        {
          uint64_t v98 = v103 - 1;
          goto LABEL_152;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = *v11 - v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_231:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v23, &v111);
          atomic_ullong *volatile v24 = v112;
          unint64_t v25 = v113;
          break;
        default:
          goto LABEL_234;
      }
      break;
    default:
LABEL_234:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      uint64_t v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) - v36;
    atomic_ullong *volatile v24 = v112;
    unint64_t v25 = v113;
    uint64_t v41 = (v113 - v112) >> 3;
    uint64_t v42 = v41 - 1;
    if (v113 - v112 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v112[8 * v42] + 1;
    *(void *)&v112[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_155;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_155:
  if (v24)
  {
LABEL_156:
    unint64_t v113 = v24;
    operator delete(v24);
  }
}

void sub_22419A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EED8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EED8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
  int v7 = *(_DWORD *)(a2 + 8);
  unint64_t v8 = *(void *)a2;
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
LABEL_3:
      unint64_t v8 = -v3;
      goto LABEL_47;
    case 1:
LABEL_4:
      unint64_t v8 = v3 ^ 0x8000000000000000;
      goto LABEL_47;
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      atomic_fetch_add((atomic_ullong *volatile)v3, 1uLL);
      unint64_t v8 = v3;
      switch(v4)
      {
        case 0u:
          goto LABEL_3;
        case 1u:
          goto LABEL_4;
        case 2u:
          if (*(void *)v3 != 1) {
            operator new();
          }
          goto LABEL_16;
        case 3u:
          if (*(void *)v3 != 1) {
            operator new();
          }
          unint64_t v8 = v3;
          uint64_t v32 = *(double **)(v3 + 8);
          uint64_t v33 = *(void *)(v3 + 16) - (void)v32;
          if (v33)
          {
            unint64_t v34 = v33 >> 3;
            if (v34 <= 1) {
              unint64_t v34 = 1;
            }
            do
            {
              *uint64_t v32 = -*v32;
              ++v32;
              --v34;
            }
            while (v34);
          }
          goto LABEL_47;
        case 4u:
          if (*(void *)v3 != 1) {
            operator new();
          }
          goto LABEL_16;
        case 5u:
          if (*(void *)v3 != 1) {
            operator new();
          }
          goto LABEL_16;
        case 6u:
        case 7u:
          goto LABEL_46;
        case 8u:
          if (*(void *)v3 != 1) {
            operator new();
          }
LABEL_16:
          unint64_t v8 = v3;
          goto LABEL_46;
        case 9u:
          if (*(void *)v3 != 1) {
            operator new();
          }
          unint64_t v8 = v3;
          atomic_ullong *volatile v10 = *(uint64_t **)(v3 + 24);
          double v9 = *(uint64_t **)(v3 + 32);
          if (v9 == v10) {
            goto LABEL_47;
          }
          if (!*(void *)(v3 + 8)) {
            goto LABEL_47;
          }
          uint64_t v11 = 1;
          do
          {
            uint64_t v12 = *v10++;
            v11 *= v12;
          }
          while (v10 != v9);
          if (!v11) {
            goto LABEL_47;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v3 + 8));
          unint64_t v13 = (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3;
          uint64_t v155 = 0;
          std::vector<unsigned long>::vector(&v156, v13, &v155);
          int v14 = v156;
          uint64_t v15 = v157;
          break;
        default:
          goto LABEL_329;
      }
      break;
    case 6:
    case 7:
LABEL_46:
      turi::flexible_type_fail(0);
      goto LABEL_47;
    default:
LABEL_329:
      turi::flexible_type_fail(0);
LABEL_331:
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (char *)v15 - (char *)v14;
    if (v17)
    {
      unint64_t v18 = v17 >> 3;
      uint64_t v19 = *(uint64_t **)(v8 + 48);
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      do
      {
        uint64_t v21 = (uint64_t)*v14++;
        uint64_t v20 = v21;
        uint64_t v22 = *v19++;
        v16 += v22 * v20;
        --v18;
      }
      while (v18);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v8 + 8));
    *(double *)(**(void **)(v8 + 8) + 8 * (*(void *)(v8 + 72) + v16)) = -*(double *)(**(void **)(v8 + 8)
                                                                                       + 8
                                                                                       * (*(void *)(v8 + 72) + v16));
    int v14 = v156;
    uint64_t v15 = v157;
    uint64_t v23 = v157 - v156;
    uint64_t v24 = v23 - 1;
    if ((char *)v157 - (char *)v156 < 1) {
      goto LABEL_35;
    }
    uint64_t v25 = *(void *)(v8 + 24);
    uint64_t v26 = (char *)v156[v24] + 1;
    v156[v24] = v26;
    if ((unint64_t)v26 >= *(void *)(v25 + 8 * v24)) {
      break;
    }
LABEL_34:
    uint64_t v23 = 1;
LABEL_35:
    if (v24 < 0 || !v23) {
      goto LABEL_37;
    }
  }
  uint64_t v27 = (unint64_t *)&v14[v23 - 2];
  uint64_t v28 = v25 - 16;
  while (1)
  {
    uint64_t v29 = v23 - 1;
    v27[1] = 0;
    if (v23 - 1 <= 0) {
      break;
    }
    unint64_t v30 = *v27 + 1;
    *v27-- = v30;
    unint64_t v31 = *(void *)(v28 + 8 * v23--);
    if (v30 < v31)
    {
      uint64_t v24 = v29 - 1;
      goto LABEL_34;
    }
  }
LABEL_37:
  if (v14)
  {
    uint64_t v157 = v14;
    operator delete(v14);
  }
LABEL_47:
  *(void *)a3 = v8;
  *(_DWORD *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 12) = v4;
  if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v35 = *(void *)a3 + *(void *)a1;
          goto LABEL_77;
        case 1:
          double v137 = *(double *)a3 + (double)*(uint64_t *)a1;
          goto LABEL_238;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          unint64_t v81 = *(double **)(*(void *)a3 + 8);
          uint64_t v82 = *(void *)(*(void *)a3 + 16) - (void)v81;
          if (v82)
          {
            unint64_t v83 = v82 >> 3;
            double v84 = (double)*(uint64_t *)a1;
            if (v83 <= 1) {
              unint64_t v83 = 1;
            }
            do
            {
              double *v81 = *v81 + v84;
              ++v81;
              --v83;
            }
            while (v83);
          }
          goto LABEL_282;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 + *(void *)a1) & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_282;
        case 7:
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v89 = *(atomic_ullong *volatile *)a3;
          uint64_t v91 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v90 = *(uint64_t **)(*(void *)a3 + 32);
          if (v90 == v91) {
            goto LABEL_282;
          }
          if (!v89[1]) {
            goto LABEL_282;
          }
          double v92 = (double)*(uint64_t *)a1;
          uint64_t v93 = 1;
          do
          {
            uint64_t v94 = *v91++;
            v93 *= v94;
          }
          while (v91 != v90);
          if (!v93) {
            goto LABEL_282;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v89 + 1);
          unint64_t v95 = (v89[4] - v89[3]) >> 3;
          uint64_t v155 = 0;
          std::vector<unsigned long>::vector(&v156, v95, &v155);
          uint64_t v55 = v156;
          uint64_t v96 = v157;
          break;
        default:
          goto LABEL_328;
      }
      while (2)
      {
        uint64_t v97 = 0;
        uint64_t v98 = (char *)v96 - (char *)v55;
        if (v98)
        {
          unint64_t v99 = v98 >> 3;
          unint64_t v100 = (uint64_t *)v89[6];
          if (v99 <= 1) {
            unint64_t v99 = 1;
          }
          do
          {
            uint64_t v102 = (uint64_t)*v55++;
            uint64_t v101 = v102;
            uint64_t v103 = *v100++;
            v97 += v103 * v101;
            --v99;
          }
          while (v99);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v89 + 1);
        *(double *)(*(void *)v89[1] + 8 * (v89[9] + v97)) = *(double *)(*(void *)v89[1] + 8 * (v89[9] + v97)) + v92;
        uint64_t v55 = v156;
        uint64_t v96 = v157;
        uint64_t v104 = v157 - v156;
        uint64_t v105 = v104 - 1;
        if ((char *)v157 - (char *)v156 < 1) {
          goto LABEL_181;
        }
        atomic_ullong v106 = v89[3];
        double v107 = (char *)v156[v105] + 1;
        v156[v105] = v107;
        if ((unint64_t)v107 < *(void *)(v106 + 8 * v105))
        {
LABEL_180:
          uint64_t v104 = 1;
LABEL_181:
          if (v105 < 0 || !v104) {
            goto LABEL_205;
          }
          continue;
        }
        break;
      }
      atomic_ullong *volatile v108 = (unint64_t *)&v55[v104 - 2];
      atomic_ullong v109 = v106 - 16;
      while (1)
      {
        uint64_t v110 = v104 - 1;
        v108[1] = 0;
        if (v104 - 1 <= 0) {
          goto LABEL_206;
        }
        unint64_t v111 = *v108 + 1;
        *v108-- = v111;
        unint64_t v112 = *(void *)(v109 + 8 * v104--);
        if (v111 < v112)
        {
          uint64_t v105 = v110 - 1;
          goto LABEL_180;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v35 = (uint64_t)(*(double *)a1 + (double)*(uint64_t *)a3);
LABEL_77:
          *(void *)a3 = v35;
          goto LABEL_282;
        case 1:
          double v137 = *(double *)a1 + *(double *)a3;
LABEL_238:
          *(double *)a3 = v137;
          goto LABEL_282;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          double v85 = *(double **)(*(void *)a3 + 8);
          uint64_t v86 = *(void *)(*(void *)a3 + 16) - (void)v85;
          if (v86)
          {
            double v87 = *(double *)a1;
            unint64_t v88 = v86 >> 3;
            if (v88 <= 1) {
              unint64_t v88 = 1;
            }
            do
            {
              *double v85 = v87 + *v85;
              ++v85;
              --v88;
            }
            while (v88);
          }
          goto LABEL_282;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 6:
          double v138 = (*(double *)a1 - (double)(uint64_t)floor(*(double *)a1)) * 1000000.0;
          atomic_ullong *volatile v139 = *(atomic_ullong *volatile *)a3;
          unint64_t v140 = *(void *)a3 + vcvtmd_s64_f64(*(double *)a1);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v140 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v141 = (uint64_t)v138 + *(int *)(a3 + 8);
          if (v141 >= 1000000)
          {
            *(void *)a3 = (v140 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v139 & 0xFF00000000000000;
            LODWORD(v141) = v141 - 1000000;
          }
          if (v141 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v141;
          goto LABEL_282;
        case 7:
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v113 = *(atomic_ullong *volatile *)a3;
          uint64_t v115 = *(uint64_t **)(*(void *)a3 + 24);
          atomic_ullong v114 = *(uint64_t **)(*(void *)a3 + 32);
          if (v114 == v115) {
            goto LABEL_282;
          }
          if (!v113[1]) {
            goto LABEL_282;
          }
          double v116 = *(double *)a1;
          uint64_t v117 = 1;
          do
          {
            uint64_t v118 = *v115++;
            v117 *= v118;
          }
          while (v115 != v114);
          if (!v117) {
            goto LABEL_282;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v113 + 1);
          unint64_t v119 = (v113[4] - v113[3]) >> 3;
          uint64_t v155 = 0;
          std::vector<unsigned long>::vector(&v156, v119, &v155);
          uint64_t v55 = v156;
          atomic_ullong *volatile v120 = v157;
          break;
        default:
          goto LABEL_328;
      }
      while (2)
      {
        uint64_t v121 = 0;
        uint64_t v122 = (char *)v120 - (char *)v55;
        if (v122)
        {
          unint64_t v123 = v122 >> 3;
          atomic_ullong *volatile v124 = (uint64_t *)v113[6];
          if (v123 <= 1) {
            unint64_t v123 = 1;
          }
          do
          {
            uint64_t v126 = (uint64_t)*v55++;
            uint64_t v125 = v126;
            uint64_t v127 = *v124++;
            v121 += v127 * v125;
            --v123;
          }
          while (v123);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v113 + 1);
        *(double *)(*(void *)v113[1] + 8 * (v113[9] + v121)) = v116
                                                               + *(double *)(*(void *)v113[1] + 8 * (v113[9] + v121));
        uint64_t v55 = v156;
        atomic_ullong *volatile v120 = v157;
        uint64_t v128 = v157 - v156;
        uint64_t v129 = v128 - 1;
        if ((char *)v157 - (char *)v156 < 1) {
          goto LABEL_203;
        }
        atomic_ullong v130 = v113[3];
        uint64_t v131 = (char *)v156[v129] + 1;
        v156[v129] = v131;
        if ((unint64_t)v131 < *(void *)(v130 + 8 * v129))
        {
LABEL_202:
          uint64_t v128 = 1;
LABEL_203:
          if (v129 < 0 || !v128) {
            goto LABEL_205;
          }
          continue;
        }
        break;
      }
      int v132 = (unint64_t *)&v55[v128 - 2];
      atomic_ullong v133 = v130 - 16;
      while (1)
      {
        uint64_t v134 = v128 - 1;
        v132[1] = 0;
        if (v128 - 1 <= 0) {
          goto LABEL_206;
        }
        unint64_t v135 = *v132 + 1;
        *v132-- = v135;
        unint64_t v136 = *(void *)(v133 + 8 * v128--);
        if (v135 < v136)
        {
          uint64_t v129 = v134 - 1;
          goto LABEL_202;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          double v36 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          int v37 = *(char *)(*(void *)&v36 + 31);
          if (v37 >= 0) {
            uint64_t v38 = (const std::string::value_type *)(*(void *)&v36 + 8);
          }
          else {
            uint64_t v38 = *(const std::string::value_type **)(*(void *)&v36 + 8);
          }
          if (v37 >= 0) {
            std::string::size_type v39 = *(unsigned __int8 *)(*(void *)&v36 + 31);
          }
          else {
            std::string::size_type v39 = *(void *)(*(void *)&v36 + 16);
          }
          std::string::append((std::string *)(*(void *)a3 + 8), v38, v39);
          goto LABEL_282;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          double v40 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v40 + 16) - *(void *)(*(void *)&v40 + 8));
          uint64_t v42 = (double *)v41[1];
          uint64_t v43 = v41[2] - (void)v42;
          if (v43)
          {
            unint64_t v44 = v43 >> 3;
            uint64_t v45 = *(double **)(*(void *)&v40 + 8);
            if (v44 <= 1) {
              unint64_t v44 = 1;
            }
            do
            {
              double v46 = *v45++;
              double *v42 = v46 + *v42;
              ++v42;
              --v44;
            }
            while (v44);
          }
          goto LABEL_282;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        default:
          goto LABEL_328;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_281;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_281;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_281:
          turi::flexible_type_fail(0);
          goto LABEL_282;
        case 9:
          double v47 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v48 = *(atomic_ullong *volatile *)a3;
          unint64_t v49 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v49, *(void *)&v47 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v51 = (uint64_t *)v48[3];
          uint64_t v50 = (uint64_t *)v48[4];
          if (v50 == v51) {
            goto LABEL_282;
          }
          if (!*v49) {
            goto LABEL_282;
          }
          uint64_t v52 = 1;
          do
          {
            uint64_t v53 = *v51++;
            v52 *= v53;
          }
          while (v51 != v50);
          if (!v52) {
            goto LABEL_282;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v49);
          unint64_t v54 = (v48[4] - v48[3]) >> 3;
          uint64_t v155 = 0;
          std::vector<unsigned long>::vector(&v156, v54, &v155);
          uint64_t v55 = v156;
          double v56 = v157;
          break;
        default:
          goto LABEL_328;
      }
      break;
    default:
LABEL_328:
      turi::flexible_type_fail(0);
      goto LABEL_331;
  }
  while (2)
  {
    uint64_t v57 = (char *)v56 - (char *)v55;
    if (v57)
    {
      uint64_t v58 = 0;
      unint64_t v59 = v57 >> 3;
      unint64_t v60 = *(uint64_t **)(*(void *)&v47 + 48);
      if (v59 <= 1) {
        unint64_t v59 = 1;
      }
      double v61 = v55;
      unint64_t v62 = v59;
      do
      {
        uint64_t v64 = (uint64_t)*v61++;
        uint64_t v63 = v64;
        uint64_t v65 = *v60++;
        v58 += v65 * v63;
        --v62;
      }
      while (v62);
      uint64_t v66 = 0;
      double v67 = *(double *)(**(void **)(*(void *)&v47 + 8) + 8 * (*(void *)(*(void *)&v47 + 72) + v58));
      unint64_t v68 = (uint64_t *)v48[6];
      do
      {
        uint64_t v70 = (uint64_t)*v55++;
        uint64_t v69 = v70;
        uint64_t v71 = *v68++;
        v66 += v71 * v69;
        --v59;
      }
      while (v59);
    }
    else
    {
      uint64_t v66 = 0;
      double v67 = *(double *)(**(void **)(*(void *)&v47 + 8) + 8 * *(void *)(*(void *)&v47 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v49);
    *(double *)(*(void *)v48[1] + 8 * (v48[9] + v66)) = v67 + *(double *)(*(void *)v48[1] + 8 * (v48[9] + v66));
    uint64_t v55 = v156;
    double v56 = v157;
    uint64_t v72 = v157 - v156;
    uint64_t v73 = v72 - 1;
    if ((char *)v157 - (char *)v156 < 1)
    {
LABEL_129:
      if (v73 < 0 || !v72) {
        goto LABEL_205;
      }
      continue;
    }
    break;
  }
  atomic_ullong v74 = v48[3];
  atomic_ullong v75 = (char *)v156[v73] + 1;
  v156[v73] = v75;
  if ((unint64_t)v75 < *(void *)(v74 + 8 * v73))
  {
LABEL_128:
    uint64_t v72 = 1;
    goto LABEL_129;
  }
  unint64_t v76 = (unint64_t *)&v55[v72 - 2];
  atomic_ullong v77 = v74 - 16;
  while (1)
  {
    uint64_t v78 = v72 - 1;
    v76[1] = 0;
    if (v72 - 1 <= 0) {
      break;
    }
    unint64_t v79 = *v76 + 1;
    *v76-- = v79;
    unint64_t v80 = *(void *)(v77 + 8 * v72--);
    if (v79 < v80)
    {
      uint64_t v73 = v78 - 1;
      goto LABEL_128;
    }
  }
LABEL_205:
  if (v55)
  {
LABEL_206:
    uint64_t v157 = v55;
    operator delete(v55);
  }
LABEL_282:
  switch(v4)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        if (*(char *)(v8 + 31) < 0) {
          operator delete(*(void **)(v8 + 8));
        }
        unint64_t v143 = v8;
        uint64_t v144 = 0x1012C404EF22A49;
        goto LABEL_325;
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        atomic_ullong *volatile v152 = *(void **)(v8 + 8);
        if (v152)
        {
          *(void *)(v8 + 16) = v152;
          operator delete(v152);
        }
        unint64_t v143 = v8;
        uint64_t v144 = 0x1080C409938AC02;
        goto LABEL_325;
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        uint64_t v156 = (void **)(v8 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v156);
        goto LABEL_318;
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        uint64_t v156 = (void **)(v8 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v156);
LABEL_318:
        unint64_t v143 = v8;
        uint64_t v144 = 0x1020C405E66F15BLL;
        goto LABEL_325;
      }
      break;
    case 8u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
        unint64_t v143 = v8;
        unsigned int v150 = -235920773;
        goto LABEL_324;
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v8, 0xFFFFFFFFFFFFFFFFLL) == 1 && v8 != 0)
      {
        unint64_t v147 = *(void **)(v8 + 48);
        if (v147)
        {
          *(void *)(v8 + 56) = v147;
          operator delete(v147);
        }
        unint64_t v148 = *(void **)(v8 + 24);
        if (v148)
        {
          *(void *)(v8 + 32) = v148;
          operator delete(v148);
        }
        uint64_t v149 = *(std::__shared_weak_count **)(v8 + 16);
        if (v149) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v149);
        }
        unint64_t v143 = v8;
        unsigned int v150 = 2071181815;
LABEL_324:
        uint64_t v144 = v150 | 0x1030C4000000000;
LABEL_325:
        MEMORY[0x22A614FA0](v143, v144);
      }
      break;
    default:
      return;
  }
}

void sub_22419C780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v16 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v16;
      if (!*v16) {
        goto LABEL_27;
      }
      if (*((char *)v19 + 31) < 0) {
        operator delete((void *)v19[1]);
      }
      uint64_t v20 = v19;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v16;
      if (!*v16) {
        goto LABEL_27;
      }
      uint64_t v25 = (void *)v24[1];
      if (v25)
      {
        v24[2] = (atomic_ullong)v25;
        operator delete(v25);
      }
      uint64_t v20 = v24;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v16;
      if (!*v16) {
        goto LABEL_27;
      }
      a14 = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v16;
      if (!*v16) {
        goto LABEL_27;
      }
      a14 = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      uint64_t v20 = v22;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v26 = *v16;
      if (!*v16) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
      uint64_t v20 = v26;
      unsigned int v23 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v16) {
        goto LABEL_27;
      }
      uint64_t v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v16);
      unsigned int v23 = 2071181815;
LABEL_25:
      uint64_t v21 = v23 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_27:
      *uint64_t v16 = 0;
LABEL_28:
      *uint64_t v16 = 0;
      *((_DWORD *)v16 + 2) = 0;
      *((unsigned char *)v16 + 12) = 0;
      switch(v15)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          uint64_t v27 = (void *)v14;
          uint64_t v28 = 0x1012C404EF22A49;
          goto LABEL_53;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          unint64_t v30 = *(void **)(v14 + 8);
          if (v30)
          {
            *(void *)(v14 + 16) = v30;
            operator delete(v30);
          }
          uint64_t v27 = (void *)v14;
          uint64_t v28 = 0x1080C409938AC02;
          goto LABEL_53;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          a14 = (atomic_ullong *volatile)(v14 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
          goto LABEL_48;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          a14 = (atomic_ullong *volatile)(v14 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_48:
          uint64_t v27 = (void *)v14;
          uint64_t v28 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v14 + 16));
          uint64_t v27 = (void *)v14;
          unsigned int v29 = -235920773;
          goto LABEL_52;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v14) {
            goto LABEL_54;
          }
          uint64_t v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v14);
          unsigned int v29 = 2071181815;
LABEL_52:
          uint64_t v28 = v29 | 0x1030C4000000000;
LABEL_53:
          MEMORY[0x22A614FA0](v27, v28);
LABEL_54:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_54;
      }
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EF58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EF58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 - *(void *)a2;
          goto LABEL_27;
        case 1:
          double v106 = (double)*(uint64_t *)a2;
          goto LABEL_188;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v50 = *(double **)(*(void *)a3 + 8);
          uint64_t v51 = *(void *)(*(void *)a3 + 16) - (void)v50;
          if (v51)
          {
            unint64_t v52 = v51 >> 3;
            double v53 = (double)*(uint64_t *)a2;
            if (v52 <= 1) {
              unint64_t v52 = 1;
            }
            do
            {
              *uint64_t v50 = *v50 - v53;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 6:
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | (*(void *)a3 - *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)a3;
          unint64_t v60 = *(uint64_t **)(*(void *)a3 + 24);
          unint64_t v59 = *(uint64_t **)(*(void *)a3 + 32);
          if (v59 == v60) {
            return;
          }
          if (!v58[1]) {
            return;
          }
          double v61 = (double)*(uint64_t *)a2;
          uint64_t v62 = 1;
          do
          {
            uint64_t v63 = *v60++;
            v62 *= v63;
          }
          while (v60 != v59);
          if (!v62) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
          unint64_t v64 = (v58[4] - v58[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v64, &v111);
          atomic_ullong *volatile v24 = v112;
          uint64_t v65 = v113;
          break;
        default:
          goto LABEL_234;
      }
      while (2)
      {
        uint64_t v66 = 0;
        uint64_t v67 = v65 - v24;
        if (v67)
        {
          unint64_t v68 = v67 >> 3;
          uint64_t v69 = (uint64_t *)v58[6];
          if (v68 <= 1) {
            unint64_t v68 = 1;
          }
          do
          {
            uint64_t v71 = *(void *)v24;
            v24 += 8;
            uint64_t v70 = v71;
            uint64_t v72 = *v69++;
            v66 += v72 * v70;
            --v68;
          }
          while (v68);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
        *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) = *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) - v61;
        atomic_ullong *volatile v24 = v112;
        uint64_t v65 = v113;
        uint64_t v73 = (v113 - v112) >> 3;
        uint64_t v74 = v73 - 1;
        if (v113 - v112 < 1) {
          goto LABEL_131;
        }
        atomic_ullong v75 = v58[3];
        unint64_t v76 = *(void *)&v112[8 * v74] + 1;
        *(void *)&v112[8 * v74] = v76;
        if (v76 < *(void *)(v75 + 8 * v74))
        {
LABEL_130:
          uint64_t v73 = 1;
LABEL_131:
          if (v74 < 0 || !v73) {
            goto LABEL_155;
          }
          continue;
        }
        break;
      }
      atomic_ullong v77 = (unint64_t *)&v24[8 * v73 - 16];
      atomic_ullong v78 = v75 - 16;
      while (1)
      {
        uint64_t v79 = v73 - 1;
        v77[1] = 0;
        if (v73 - 1 <= 0) {
          goto LABEL_156;
        }
        unint64_t v80 = *v77 + 1;
        *v77-- = v80;
        unint64_t v81 = *(void *)(v78 + 8 * v73--);
        if (v80 < v81)
        {
          uint64_t v74 = v79 - 1;
          goto LABEL_130;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)((double)*(uint64_t *)a3 - *(double *)a2);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v106 = *(double *)a2;
LABEL_188:
          *(double *)a3 = *(double *)a3 - v106;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          unint64_t v54 = *(double **)(*(void *)a3 + 8);
          uint64_t v55 = *(void *)(*(void *)a3 + 16) - (void)v54;
          if (v55)
          {
            double v56 = *(double *)a2;
            unint64_t v57 = v55 >> 3;
            if (v57 <= 1) {
              unint64_t v57 = 1;
            }
            do
            {
              *unint64_t v54 = *v54 - v56;
              ++v54;
              --v57;
            }
            while (v57);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 6:
          double v107 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          atomic_ullong *volatile v108 = *(atomic_ullong *volatile *)a3;
          unint64_t v109 = *(void *)a3 - vcvtmd_s64_f64(*(double *)a2);
          *(void *)a3 = *(void *)a3 & 0xFF00000000000000 | v109 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v110 = *(int *)(a3 + 8) - (uint64_t)v107;
          if (v110 < 0)
          {
            *(void *)a3 = (v109 - 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v108 & 0xFF00000000000000;
            LODWORD(v110) = v110 + 1000000;
          }
          if (v110 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a3 + 8) = v110;
          return;
        case 7:
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v82 = *(atomic_ullong *volatile *)a3;
          double v84 = *(uint64_t **)(*(void *)a3 + 24);
          unint64_t v83 = *(uint64_t **)(*(void *)a3 + 32);
          if (v83 == v84) {
            return;
          }
          if (!v82[1]) {
            return;
          }
          double v85 = *(double *)a2;
          uint64_t v86 = 1;
          do
          {
            uint64_t v87 = *v84++;
            v86 *= v87;
          }
          while (v84 != v83);
          if (!v86) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
          unint64_t v88 = (v82[4] - v82[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v88, &v111);
          atomic_ullong *volatile v24 = v112;
          atomic_ullong *volatile v89 = v113;
          break;
        default:
          goto LABEL_234;
      }
      while (2)
      {
        uint64_t v90 = 0;
        uint64_t v91 = v89 - v24;
        if (v91)
        {
          unint64_t v92 = v91 >> 3;
          uint64_t v93 = (uint64_t *)v82[6];
          if (v92 <= 1) {
            unint64_t v92 = 1;
          }
          do
          {
            uint64_t v95 = *(void *)v24;
            v24 += 8;
            uint64_t v94 = v95;
            uint64_t v96 = *v93++;
            v90 += v96 * v94;
            --v92;
          }
          while (v92);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
        *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) = *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) - v85;
        atomic_ullong *volatile v24 = v112;
        atomic_ullong *volatile v89 = v113;
        uint64_t v97 = (v113 - v112) >> 3;
        uint64_t v98 = v97 - 1;
        if (v113 - v112 < 1) {
          goto LABEL_153;
        }
        atomic_ullong v99 = v82[3];
        unint64_t v100 = *(void *)&v112[8 * v98] + 1;
        *(void *)&v112[8 * v98] = v100;
        if (v100 < *(void *)(v99 + 8 * v98))
        {
LABEL_152:
          uint64_t v97 = 1;
LABEL_153:
          if (v98 < 0 || !v97) {
            goto LABEL_155;
          }
          continue;
        }
        break;
      }
      uint64_t v101 = (unint64_t *)&v24[8 * v97 - 16];
      atomic_ullong v102 = v99 - 16;
      while (1)
      {
        uint64_t v103 = v97 - 1;
        v101[1] = 0;
        if (v97 - 1 <= 0) {
          goto LABEL_156;
        }
        unint64_t v104 = *v101 + 1;
        *v101-- = v104;
        unint64_t v105 = *(void *)(v102 + 8 * v97--);
        if (v104 < v105)
        {
          uint64_t v98 = v103 - 1;
          goto LABEL_152;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            uint64_t v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = *v11 - v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        default:
          goto LABEL_234;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_231;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_231;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_231:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          unint64_t v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v20 = (uint64_t *)v17[3];
          atomic_ullong *volatile v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v111 = 0;
          std::vector<unsigned long>::vector(&v112, v23, &v111);
          atomic_ullong *volatile v24 = v112;
          uint64_t v25 = v113;
          break;
        default:
          goto LABEL_234;
      }
      break;
    default:
LABEL_234:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      unsigned int v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      unint64_t v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) - v36;
    atomic_ullong *volatile v24 = v112;
    uint64_t v25 = v113;
    uint64_t v41 = (v113 - v112) >> 3;
    uint64_t v42 = v41 - 1;
    if (v113 - v112 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v112[8 * v42] + 1;
    *(void *)&v112[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_155;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_155:
  if (v24)
  {
LABEL_156:
    atomic_ullong *volatile v113 = v24;
    operator delete(v24);
  }
}

void sub_22419E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      unint64_t v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      unint64_t v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      unint64_t v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      unint64_t v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *uint64_t v14 = 0;
LABEL_28:
      *uint64_t v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76EFD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76EFD8;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      double v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        double v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v34 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v41 = *(_OWORD *)(v14 + 40);
      long long v42 = v17;
      *(_OWORD *)uint64_t v40 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      atomic_ullong *volatile v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        atomic_ullong *volatile v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        double v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v37 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v36, (const std::string *)__p);
        __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      unint64_t v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v41 = *(_OWORD *)(v27 + 40);
      long long v42 = v30;
      *(_OWORD *)uint64_t v40 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double result = v5 * v19;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v5 * v19;
  return result;
}

void sub_22419F3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F058;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F058;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12::operator()(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a1[12];
  uint64_t v5 = 1;
  switch(a1[12])
  {
    case 3u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 3;
      goto LABEL_5;
    case 4u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 4;
      goto LABEL_5;
    case 5u:
      uint64_t v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 5;
LABEL_5:
      uint64_t v5 = (uint64_t)(*v7 - *v6) >> v8;
      break;
    case 9u:
      long long v16 = *(uint64_t **)(*(void *)a1 + 24);
      uint64_t v15 = *(uint64_t **)(*(void *)a1 + 32);
      if (v15 == v16)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)a1 + 8);
        if (v5)
        {
          uint64_t v5 = 1;
          do
          {
            uint64_t v17 = *v16++;
            v5 *= v17;
          }
          while (v16 != v15);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v9 = 1;
  switch(a2[12])
  {
    case 3:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 3;
      goto LABEL_10;
    case 4:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 4;
      goto LABEL_10;
    case 5:
      double v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 5;
LABEL_10:
      uint64_t v9 = (uint64_t)(*v11 - *v10) >> v12;
      break;
    case 9:
      double v19 = *(uint64_t **)(*(void *)a2 + 24);
      float v18 = *(uint64_t **)(*(void *)a2 + 32);
      if (v18 == v19)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)a2 + 8);
        if (v9)
        {
          uint64_t v9 = 1;
          do
          {
            uint64_t v20 = *v19++;
            v9 *= v20;
          }
          while (v19 != v18);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v5 != v9)
  {
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v14 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v14)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    *(unsigned char *)(a3 + 12) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = *(void *)a3 * *(void *)a2;
          goto LABEL_51;
        case 1:
          double v110 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_189;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v111 = *(double **)(*(void *)a3 + 8);
          uint64_t v112 = *(void *)(*(void *)a3 + 16) - (void)v111;
          if (v112)
          {
            unint64_t v113 = v112 >> 3;
            double v114 = (double)*(uint64_t *)a2;
            if (v113 <= 1) {
              unint64_t v113 = 1;
            }
            do
            {
              double *v111 = *v111 * v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 6:
        case 7:
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)a3;
          unint64_t v64 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v63 = *(uint64_t **)(*(void *)a3 + 32);
          if (v63 == v64) {
            return;
          }
          if (!v62[1]) {
            return;
          }
          double v65 = (double)*(uint64_t *)a2;
          uint64_t v66 = 1;
          do
          {
            uint64_t v67 = *v64++;
            v66 *= v67;
          }
          while (v64 != v63);
          if (!v66) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
          unint64_t v68 = (v62[4] - v62[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v68, &v119);
          double v36 = v120;
          uint64_t v69 = v121;
          break;
        default:
          goto LABEL_253;
      }
      while (2)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v69 - v36;
        if (v71)
        {
          unint64_t v72 = v71 >> 3;
          uint64_t v73 = (uint64_t *)v62[6];
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v75 = *(void *)v36;
            v36 += 8;
            uint64_t v74 = v75;
            uint64_t v76 = *v73++;
            v70 += v76 * v74;
            --v72;
          }
          while (v72);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
        *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) = *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) * v65;
        double v36 = v120;
        uint64_t v69 = v121;
        uint64_t v77 = (v121 - v120) >> 3;
        uint64_t v78 = v77 - 1;
        if (v121 - v120 < 1) {
          goto LABEL_145;
        }
        atomic_ullong v79 = v62[3];
        unint64_t v80 = *(void *)&v120[8 * v78] + 1;
        *(void *)&v120[8 * v78] = v80;
        if (v80 < *(void *)(v79 + 8 * v78))
        {
LABEL_144:
          uint64_t v77 = 1;
LABEL_145:
          if (v78 < 0 || !v77) {
            goto LABEL_169;
          }
          continue;
        }
        break;
      }
      unint64_t v81 = (unint64_t *)&v36[8 * v77 - 16];
      atomic_ullong v82 = v79 - 16;
      while (1)
      {
        uint64_t v83 = v77 - 1;
        v81[1] = 0;
        if (v77 - 1 <= 0) {
          goto LABEL_170;
        }
        unint64_t v84 = *v81 + 1;
        *v81-- = v84;
        unint64_t v85 = *(void *)(v82 + 8 * v77--);
        if (v84 < v85)
        {
          uint64_t v78 = v83 - 1;
          goto LABEL_144;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = (uint64_t)(*(double *)a2 * (double)*(uint64_t *)a3);
LABEL_51:
          *(void *)a3 = v13;
          return;
        case 1:
          double v110 = *(double *)a2 * *(double *)a3;
LABEL_189:
          *(double *)a3 = v110;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v115 = *(double **)(*(void *)a3 + 8);
          uint64_t v116 = *(void *)(*(void *)a3 + 16) - (void)v115;
          if (v116)
          {
            double v117 = *(double *)a2;
            unint64_t v118 = v116 >> 3;
            if (v118 <= 1) {
              unint64_t v118 = 1;
            }
            do
            {
              *uint64_t v115 = v117 * *v115;
              ++v115;
              --v118;
            }
            while (v118);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 6:
        case 7:
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)a3;
          unint64_t v88 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v87 = *(uint64_t **)(*(void *)a3 + 32);
          if (v87 == v88) {
            return;
          }
          if (!v86[1]) {
            return;
          }
          double v89 = *(double *)a2;
          uint64_t v90 = 1;
          do
          {
            uint64_t v91 = *v88++;
            v90 *= v91;
          }
          while (v88 != v87);
          if (!v90) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
          unint64_t v92 = (v86[4] - v86[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v92, &v119);
          double v36 = v120;
          uint64_t v93 = v121;
          break;
        default:
          goto LABEL_253;
      }
      while (2)
      {
        uint64_t v94 = 0;
        uint64_t v95 = v93 - v36;
        if (v95)
        {
          unint64_t v96 = v95 >> 3;
          uint64_t v97 = (uint64_t *)v86[6];
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)v36;
            v36 += 8;
            uint64_t v98 = v99;
            uint64_t v100 = *v97++;
            v94 += v100 * v98;
            --v96;
          }
          while (v96);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
        *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) = v89 * *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94));
        double v36 = v120;
        uint64_t v93 = v121;
        uint64_t v101 = (v121 - v120) >> 3;
        uint64_t v102 = v101 - 1;
        if (v121 - v120 < 1) {
          goto LABEL_167;
        }
        atomic_ullong v103 = v86[3];
        unint64_t v104 = *(void *)&v120[8 * v102] + 1;
        *(void *)&v120[8 * v102] = v104;
        if (v104 < *(void *)(v103 + 8 * v102))
        {
LABEL_166:
          uint64_t v101 = 1;
LABEL_167:
          if (v102 < 0 || !v101) {
            goto LABEL_169;
          }
          continue;
        }
        break;
      }
      unint64_t v105 = (unint64_t *)&v36[8 * v101 - 16];
      atomic_ullong v106 = v103 - 16;
      while (1)
      {
        uint64_t v107 = v101 - 1;
        v105[1] = 0;
        if (v101 - 1 <= 0) {
          goto LABEL_170;
        }
        unint64_t v108 = *v105 + 1;
        *v105-- = v108;
        unint64_t v109 = *(void *)(v106 + 8 * v101--);
        if (v108 < v109)
        {
          uint64_t v102 = v107 - 1;
          goto LABEL_166;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          uint64_t v21 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(v21 + 16) - *(void *)(v21 + 8));
          double v23 = (double *)v22[1];
          uint64_t v24 = v22[2] - (void)v23;
          if (v24)
          {
            unint64_t v25 = v24 >> 3;
            uint64_t v26 = *(double **)(v21 + 8);
            if (v25 <= 1) {
              unint64_t v25 = 1;
            }
            do
            {
              double v27 = *v26++;
              double *v23 = v27 * *v23;
              ++v23;
              --v25;
            }
            while (v25);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_250:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v28 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)a3;
          long long v30 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v30, v28 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v32 = (uint64_t *)v29[3];
          float v31 = (uint64_t *)v29[4];
          if (v31 == v32) {
            return;
          }
          if (!*v30) {
            return;
          }
          uint64_t v33 = 1;
          do
          {
            uint64_t v34 = *v32++;
            v33 *= v34;
          }
          while (v32 != v31);
          if (!v33) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
          unint64_t v35 = (v29[4] - v29[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v35, &v119);
          double v36 = v120;
          int v37 = v121;
          break;
        default:
          goto LABEL_253;
      }
      break;
    default:
LABEL_253:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v38 = v37 - v36;
    if (v38)
    {
      uint64_t v39 = 0;
      unint64_t v40 = v38 >> 3;
      long long v41 = *(uint64_t **)(v28 + 48);
      if (v40 <= 1) {
        unint64_t v40 = 1;
      }
      long long v42 = (uint64_t *)v36;
      unint64_t v43 = v40;
      do
      {
        uint64_t v45 = *v42++;
        uint64_t v44 = v45;
        uint64_t v46 = *v41++;
        v39 += v46 * v44;
        --v43;
      }
      while (v43);
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(v28 + 8) + 8 * (*(void *)(v28 + 72) + v39));
      unint64_t v49 = (uint64_t *)v29[6];
      do
      {
        uint64_t v51 = *(void *)v36;
        v36 += 8;
        uint64_t v50 = v51;
        uint64_t v52 = *v49++;
        v47 += v52 * v50;
        --v40;
      }
      while (v40);
    }
    else
    {
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(v28 + 8) + 8 * *(void *)(v28 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
    *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47)) = v48 * *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47));
    double v36 = v120;
    int v37 = v121;
    uint64_t v53 = (v121 - v120) >> 3;
    uint64_t v54 = v53 - 1;
    if (v121 - v120 < 1) {
      goto LABEL_103;
    }
    atomic_ullong v55 = v29[3];
    unint64_t v56 = *(void *)&v120[8 * v54] + 1;
    *(void *)&v120[8 * v54] = v56;
    if (v56 >= *(void *)(v55 + 8 * v54)) {
      break;
    }
LABEL_102:
    uint64_t v53 = 1;
LABEL_103:
    if (v54 < 0 || !v53) {
      goto LABEL_169;
    }
  }
  unint64_t v57 = (unint64_t *)&v36[8 * v53 - 16];
  atomic_ullong v58 = v55 - 16;
  while (1)
  {
    uint64_t v59 = v53 - 1;
    v57[1] = 0;
    if (v53 - 1 <= 0) {
      break;
    }
    unint64_t v60 = *v57 + 1;
    *v57-- = v60;
    unint64_t v61 = *(void *)(v58 + 8 * v53--);
    if (v60 < v61)
    {
      uint64_t v54 = v59 - 1;
      goto LABEL_102;
    }
  }
LABEL_169:
  if (v36)
  {
LABEL_170:
    uint64_t v121 = v36;
    operator delete(v36);
  }
}

void sub_2241A1000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      double v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F0D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F0D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a2;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241A2DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F158;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F158;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a2;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241A4B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F1D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F1D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a1;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a1;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a1;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a1;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a1 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a1 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a1;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a1;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241A6890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F258;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F258;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a2;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241A85F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F2D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F2D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a1;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a1;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a1;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a1;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a1 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a1 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a1;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a1;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a1;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241AA360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F358;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F358;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 * *(void *)a2;
          goto LABEL_27;
        case 1:
          double v98 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 * v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) * v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)(*(double *)a2 * (double)*(uint64_t *)a3);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2 * *(double *)a3;
LABEL_165:
          *(double *)a3 = v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = v105 * *v103;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = v77 * *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82));
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          double v9 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(*(void *)&v9 + 16) - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = v15 * *v11;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          double v16 = *(double *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = v36 * *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35));
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241AC0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F3D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F3D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19::operator()(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a1[12];
  uint64_t v5 = 1;
  switch(a1[12])
  {
    case 3u:
      int v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 3;
      goto LABEL_5;
    case 4u:
      int v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 4;
      goto LABEL_5;
    case 5u:
      int v6 = (void *)(*(void *)a1 + 8);
      uint64_t v7 = (void *)(*(void *)a1 + 16);
      char v8 = 5;
LABEL_5:
      uint64_t v5 = (uint64_t)(*v7 - *v6) >> v8;
      break;
    case 9u:
      double v16 = *(uint64_t **)(*(void *)a1 + 24);
      uint64_t v15 = *(uint64_t **)(*(void *)a1 + 32);
      if (v15 == v16)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)a1 + 8);
        if (v5)
        {
          uint64_t v5 = 1;
          do
          {
            uint64_t v17 = *v16++;
            v5 *= v17;
          }
          while (v16 != v15);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v9 = 1;
  switch(a2[12])
  {
    case 3:
      atomic_ullong *volatile v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 3;
      goto LABEL_10;
    case 4:
      atomic_ullong *volatile v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 4;
      goto LABEL_10;
    case 5:
      atomic_ullong *volatile v10 = (void *)(*(void *)a2 + 8);
      uint64_t v11 = (void *)(*(void *)a2 + 16);
      char v12 = 5;
LABEL_10:
      uint64_t v9 = (uint64_t)(*v11 - *v10) >> v12;
      break;
    case 9:
      uint64_t v19 = *(uint64_t **)(*(void *)a2 + 24);
      float v18 = *(uint64_t **)(*(void *)a2 + 32);
      if (v18 == v19)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)a2 + 8);
        if (v9)
        {
          uint64_t v9 = 1;
          do
          {
            uint64_t v20 = *v19++;
            v9 *= v20;
          }
          while (v19 != v18);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v5 != v9)
  {
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v14 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v14)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    *(unsigned char *)(a3 + 12) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = *(void *)a3 / *(uint64_t *)a2;
          goto LABEL_51;
        case 1:
          double v110 = (double)*(uint64_t *)a2;
          goto LABEL_189;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v111 = *(double **)(*(void *)a3 + 8);
          uint64_t v112 = *(void *)(*(void *)a3 + 16) - (void)v111;
          if (v112)
          {
            unint64_t v113 = v112 >> 3;
            double v114 = (double)*(uint64_t *)a2;
            if (v113 <= 1) {
              unint64_t v113 = 1;
            }
            do
            {
              double *v111 = *v111 / v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 6:
        case 7:
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)a3;
          uint64_t v64 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v63 = *(uint64_t **)(*(void *)a3 + 32);
          if (v63 == v64) {
            return;
          }
          if (!v62[1]) {
            return;
          }
          double v65 = (double)*(uint64_t *)a2;
          uint64_t v66 = 1;
          do
          {
            uint64_t v67 = *v64++;
            v66 *= v67;
          }
          while (v64 != v63);
          if (!v66) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
          unint64_t v68 = (v62[4] - v62[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v68, &v119);
          double v36 = v120;
          uint64_t v69 = v121;
          break;
        default:
          goto LABEL_253;
      }
      while (2)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v69 - v36;
        if (v71)
        {
          unint64_t v72 = v71 >> 3;
          unint64_t v73 = (uint64_t *)v62[6];
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          do
          {
            uint64_t v75 = *(void *)v36;
            v36 += 8;
            uint64_t v74 = v75;
            uint64_t v76 = *v73++;
            v70 += v76 * v74;
            --v72;
          }
          while (v72);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62 + 1);
        *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) = *(double *)(*(void *)v62[1] + 8 * (v62[9] + v70)) / v65;
        double v36 = v120;
        uint64_t v69 = v121;
        uint64_t v77 = (v121 - v120) >> 3;
        uint64_t v78 = v77 - 1;
        if (v121 - v120 < 1) {
          goto LABEL_145;
        }
        atomic_ullong v79 = v62[3];
        unint64_t v80 = *(void *)&v120[8 * v78] + 1;
        *(void *)&v120[8 * v78] = v80;
        if (v80 < *(void *)(v79 + 8 * v78))
        {
LABEL_144:
          uint64_t v77 = 1;
LABEL_145:
          if (v78 < 0 || !v77) {
            goto LABEL_169;
          }
          continue;
        }
        break;
      }
      unint64_t v81 = (unint64_t *)&v36[8 * v77 - 16];
      atomic_ullong v82 = v79 - 16;
      while (1)
      {
        uint64_t v83 = v77 - 1;
        v81[1] = 0;
        if (v77 - 1 <= 0) {
          goto LABEL_170;
        }
        unint64_t v84 = *v81 + 1;
        *v81-- = v84;
        unint64_t v85 = *(void *)(v82 + 8 * v77--);
        if (v84 < v85)
        {
          uint64_t v78 = v83 - 1;
          goto LABEL_144;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v13 = (uint64_t)((double)*(uint64_t *)a3 / *(double *)a2);
LABEL_51:
          *(void *)a3 = v13;
          return;
        case 1:
          double v110 = *(double *)a2;
LABEL_189:
          *(double *)a3 = *(double *)a3 / v110;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v115 = *(double **)(*(void *)a3 + 8);
          uint64_t v116 = *(void *)(*(void *)a3 + 16) - (void)v115;
          if (v116)
          {
            double v117 = *(double *)a2;
            unint64_t v118 = v116 >> 3;
            if (v118 <= 1) {
              unint64_t v118 = 1;
            }
            do
            {
              *uint64_t v115 = *v115 / v117;
              ++v115;
              --v118;
            }
            while (v118);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 6:
        case 7:
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)a3;
          uint64_t v88 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v87 = *(uint64_t **)(*(void *)a3 + 32);
          if (v87 == v88) {
            return;
          }
          if (!v86[1]) {
            return;
          }
          double v89 = *(double *)a2;
          uint64_t v90 = 1;
          do
          {
            uint64_t v91 = *v88++;
            v90 *= v91;
          }
          while (v88 != v87);
          if (!v90) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
          unint64_t v92 = (v86[4] - v86[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v92, &v119);
          double v36 = v120;
          uint64_t v93 = v121;
          break;
        default:
          goto LABEL_253;
      }
      while (2)
      {
        uint64_t v94 = 0;
        uint64_t v95 = v93 - v36;
        if (v95)
        {
          unint64_t v96 = v95 >> 3;
          unint64_t v97 = (uint64_t *)v86[6];
          if (v96 <= 1) {
            unint64_t v96 = 1;
          }
          do
          {
            uint64_t v99 = *(void *)v36;
            v36 += 8;
            uint64_t v98 = v99;
            uint64_t v100 = *v97++;
            v94 += v100 * v98;
            --v96;
          }
          while (v96);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v86 + 1);
        *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) = *(double *)(*(void *)v86[1] + 8 * (v86[9] + v94)) / v89;
        double v36 = v120;
        uint64_t v93 = v121;
        uint64_t v101 = (v121 - v120) >> 3;
        uint64_t v102 = v101 - 1;
        if (v121 - v120 < 1) {
          goto LABEL_167;
        }
        atomic_ullong v103 = v86[3];
        unint64_t v104 = *(void *)&v120[8 * v102] + 1;
        *(void *)&v120[8 * v102] = v104;
        if (v104 < *(void *)(v103 + 8 * v102))
        {
LABEL_166:
          uint64_t v101 = 1;
LABEL_167:
          if (v102 < 0 || !v101) {
            goto LABEL_169;
          }
          continue;
        }
        break;
      }
      double v105 = (unint64_t *)&v36[8 * v101 - 16];
      atomic_ullong v106 = v103 - 16;
      while (1)
      {
        uint64_t v107 = v101 - 1;
        v105[1] = 0;
        if (v101 - 1 <= 0) {
          goto LABEL_170;
        }
        unint64_t v108 = *v105 + 1;
        *v105-- = v108;
        unint64_t v109 = *(void *)(v106 + 8 * v101--);
        if (v108 < v109)
        {
          uint64_t v102 = v107 - 1;
          goto LABEL_166;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          uint64_t v21 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(v21 + 16) - *(void *)(v21 + 8));
          unint64_t v23 = (double *)v22[1];
          uint64_t v24 = v22[2] - (void)v23;
          if (v24)
          {
            unint64_t v25 = v24 >> 3;
            uint64_t v26 = *(double **)(v21 + 8);
            if (v25 <= 1) {
              unint64_t v25 = 1;
            }
            do
            {
              double v27 = *v26++;
              double *v23 = *v23 / v27;
              ++v23;
              --v25;
            }
            while (v25);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        default:
          goto LABEL_253;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_250;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_250;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_250:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v28 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)a3;
          long long v30 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v30, v28 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v32 = (uint64_t *)v29[3];
          unint64_t v31 = (uint64_t *)v29[4];
          if (v31 == v32) {
            return;
          }
          if (!*v30) {
            return;
          }
          uint64_t v33 = 1;
          do
          {
            uint64_t v34 = *v32++;
            v33 *= v34;
          }
          while (v32 != v31);
          if (!v33) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
          unint64_t v35 = (v29[4] - v29[3]) >> 3;
          uint64_t v119 = 0;
          std::vector<unsigned long>::vector(&v120, v35, &v119);
          double v36 = v120;
          int v37 = v121;
          break;
        default:
          goto LABEL_253;
      }
      break;
    default:
LABEL_253:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v38 = v37 - v36;
    if (v38)
    {
      uint64_t v39 = 0;
      unint64_t v40 = v38 >> 3;
      uint64_t v41 = *(uint64_t **)(v28 + 48);
      if (v40 <= 1) {
        unint64_t v40 = 1;
      }
      uint64_t v42 = (uint64_t *)v36;
      unint64_t v43 = v40;
      do
      {
        uint64_t v45 = *v42++;
        uint64_t v44 = v45;
        uint64_t v46 = *v41++;
        v39 += v46 * v44;
        --v43;
      }
      while (v43);
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(v28 + 8) + 8 * (*(void *)(v28 + 72) + v39));
      unint64_t v49 = (uint64_t *)v29[6];
      do
      {
        uint64_t v51 = *(void *)v36;
        v36 += 8;
        uint64_t v50 = v51;
        uint64_t v52 = *v49++;
        v47 += v52 * v50;
        --v40;
      }
      while (v40);
    }
    else
    {
      uint64_t v47 = 0;
      double v48 = *(double *)(**(void **)(v28 + 8) + 8 * *(void *)(v28 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v30);
    *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47)) = *(double *)(*(void *)v29[1] + 8 * (v29[9] + v47)) / v48;
    double v36 = v120;
    int v37 = v121;
    uint64_t v53 = (v121 - v120) >> 3;
    uint64_t v54 = v53 - 1;
    if (v121 - v120 < 1) {
      goto LABEL_103;
    }
    atomic_ullong v55 = v29[3];
    unint64_t v56 = *(void *)&v120[8 * v54] + 1;
    *(void *)&v120[8 * v54] = v56;
    if (v56 >= *(void *)(v55 + 8 * v54)) {
      break;
    }
LABEL_102:
    uint64_t v53 = 1;
LABEL_103:
    if (v54 < 0 || !v53) {
      goto LABEL_169;
    }
  }
  unint64_t v57 = (unint64_t *)&v36[8 * v53 - 16];
  atomic_ullong v58 = v55 - 16;
  while (1)
  {
    uint64_t v59 = v53 - 1;
    v57[1] = 0;
    if (v53 - 1 <= 0) {
      break;
    }
    unint64_t v60 = *v57 + 1;
    *v57-- = v60;
    unint64_t v61 = *(void *)(v58 + 8 * v53--);
    if (v60 < v61)
    {
      uint64_t v54 = v59 - 1;
      goto LABEL_102;
    }
  }
LABEL_169:
  if (v36)
  {
LABEL_170:
    uint64_t v121 = v36;
    operator delete(v36);
  }
}

void sub_2241ADFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F458;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F458;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 / *(uint64_t *)a2;
          goto LABEL_27;
        case 1:
          double v98 = (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 / v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) / v53;
        atomic_ullong *volatile v24 = v108;
        unint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)((double)*(uint64_t *)a3 / *(double *)a2);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2;
LABEL_165:
          *(double *)a3 = *(double *)a3 / v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *atomic_ullong v103 = *v103 / v105;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) / v77;
        atomic_ullong *volatile v24 = v108;
        unint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          uint64_t v9 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(v9 + 16) - *(void *)(v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = *v11 / v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v16 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          float v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          atomic_ullong *volatile v24 = v108;
          unint64_t v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      atomic_ullong *volatile v29 = *(uint64_t **)(v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(v16 + 8) + 8 * (*(void *)(v16 + 72) + v27));
      int v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(v16 + 8) + 8 * *(void *)(v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) / v36;
    atomic_ullong *volatile v24 = v108;
    unint64_t v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  uint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241AFDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      float v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      float v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      float v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      float v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      float v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F4D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F4D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v176[6] = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    unsigned int v5 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(a3 + 12) = v5;
    BOOL v6 = v5 > 9;
    int v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  unint64_t v9 = 0;
  atomic_ullong *volatile v10 = (atomic_uint **)&v175;
  uint64_t v11 = v176;
  while (1)
  {
    unint64_t v12 = 1;
    switch(*(unsigned char *)(a3 + 12))
    {
      case 3:
        unint64_t v13 = (void *)(*(void *)a3 + 8);
        int v14 = (void *)(*(void *)a3 + 16);
        char v15 = 3;
        goto LABEL_12;
      case 4:
        unint64_t v13 = (void *)(*(void *)a3 + 8);
        int v14 = (void *)(*(void *)a3 + 16);
        char v15 = 4;
        goto LABEL_12;
      case 5:
        unint64_t v13 = (void *)(*(void *)a3 + 8);
        int v14 = (void *)(*(void *)a3 + 16);
        char v15 = 5;
LABEL_12:
        unint64_t v12 = (uint64_t)(*v14 - *v13) >> v15;
        break;
      case 9:
        atomic_ullong *volatile v17 = *(uint64_t **)(*(void *)a3 + 24);
        uint64_t v16 = *(uint64_t **)(*(void *)a3 + 32);
        if (v16 == v17)
        {
          unint64_t v12 = 0;
        }
        else
        {
          unint64_t v12 = *(void *)(*(void *)a3 + 8);
          if (v12)
          {
            unint64_t v12 = 1;
            do
            {
              uint64_t v18 = *v17++;
              v12 *= v18;
            }
            while (v17 != v16);
          }
        }
        break;
      default:
        break;
    }
    if (v9 >= v12) {
      break;
    }
    switch(*(unsigned char *)(a3 + 12))
    {
      case 2:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      case 3:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      case 4:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      case 5:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      case 8:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      case 9:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return;
      default:
        break;
    }
    int v19 = *(unsigned __int8 *)(a3 + 12);
    if (v19 == 1)
    {
      unint64_t v23 = (void *)a3;
      if (v9) {
        goto LABEL_379;
      }
    }
    else
    {
      if (v19 == 9)
      {
        atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a3;
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
        atomic_ullong *volatile v20 = (void *)v22[1];
        unint64_t v21 = v22[9] + v9;
      }
      else
      {
        if (v19 != 3) {
          goto LABEL_379;
        }
        atomic_ullong *volatile v20 = (void *)(*(void *)a3 + 8);
        unint64_t v21 = v9;
      }
      unint64_t v23 = (void *)(*v20 + 8 * v21);
    }
    double v174 = 0.0;
    LODWORD(v175) = 0;
    BYTE4(v175) = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v174, v23);
    memset(v173, 0, 13);
    if (v173 != (atomic_ullong **)a1)
    {
      *(atomic_ullong **)((char *)v173 + 5) = *(atomic_ullong **)(a1 + 5);
      v173[0] = *(atomic_ullong **)a1;
      BYTE4(v173[1]) = *(unsigned char *)(a1 + 12);
      if (BYTE4(v173[1]) <= 9u && ((1 << SBYTE4(v173[1])) & 0x33C) != 0) {
        atomic_fetch_add(v173[0], 1uLL);
      }
    }
    switch(BYTE4(v175))
    {
      case 0:
        switch(BYTE4(v173[1]))
        {
          case 0:
            uint64_t v24 = (uint64_t)v173[0] / *(void *)&v174;
            goto LABEL_64;
          case 1:
            double v115 = (double)*(uint64_t *)&v174;
            goto LABEL_204;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            uint64_t v116 = (double *)v173[0][1];
            uint64_t v117 = v173[0][2] - (void)v116;
            if (v117)
            {
              unint64_t v118 = v117 >> 3;
              double v119 = (double)*(uint64_t *)&v174;
              if (v118 <= 1) {
                unint64_t v118 = 1;
              }
              do
              {
                *uint64_t v116 = *v116 / v119;
                ++v116;
                --v118;
              }
              while (v118);
            }
            goto LABEL_266;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 6:
          case 7:
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            atomic_ullong v67 = v173[0];
            uint64_t v69 = (uint64_t *)v173[0][3];
            atomic_ullong v68 = v173[0][4];
            if ((uint64_t *)v68 == v69) {
              goto LABEL_266;
            }
            if (!v173[0][1]) {
              goto LABEL_266;
            }
            double v70 = (double)*(uint64_t *)&v174;
            uint64_t v71 = 1;
            do
            {
              uint64_t v72 = *v69++;
              v71 *= v72;
            }
            while (v69 != (uint64_t *)v68);
            if (!v71) {
              goto LABEL_266;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v173[0] + 1);
            unint64_t v73 = (v67[4] - v67[3]) >> 3;
            size_t __idx = 0;
            std::vector<unsigned long>::vector(&__p, v73, &__idx);
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_379;
        }
        while (2)
        {
          uint64_t v75 = 0;
          uint64_t v76 = size - (void)v39;
          if (v76)
          {
            unint64_t v77 = v76 >> 3;
            uint64_t v78 = (uint64_t *)v67[6];
            if (v77 <= 1) {
              unint64_t v77 = 1;
            }
            do
            {
              uint64_t v80 = *v39++;
              uint64_t v79 = v80;
              uint64_t v81 = *v78++;
              v75 += v81 * v79;
              --v77;
            }
            while (v77);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v67 + 1);
          *(double *)(*(void *)v67[1] + 8 * (v67[9] + v75)) = *(double *)(*(void *)v67[1] + 8 * (v67[9] + v75))
                                                              / v70;
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          uint64_t v82 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          uint64_t v83 = v82 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1) {
            goto LABEL_160;
          }
          atomic_ullong v84 = v67[3];
          unint64_t v85 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v83) + 1;
          *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v83) = v85;
          if (v85 < *(void *)(v84 + 8 * v83))
          {
LABEL_159:
            uint64_t v82 = 1;
LABEL_160:
            if (v83 < 0 || !v82) {
              goto LABEL_184;
            }
            continue;
          }
          break;
        }
        uint64_t v86 = (unint64_t *)&v39[v82 - 2];
        atomic_ullong v87 = v84 - 16;
        while (1)
        {
          uint64_t v88 = v82 - 1;
          v86[1] = 0;
          if (v82 - 1 <= 0) {
            goto LABEL_185;
          }
          unint64_t v89 = *v86 + 1;
          *v86-- = v89;
          unint64_t v90 = *(void *)(v87 + 8 * v82--);
          if (v89 < v90)
          {
            uint64_t v83 = v88 - 1;
            goto LABEL_159;
          }
        }
      case 1:
        switch(BYTE4(v173[1]))
        {
          case 0:
            uint64_t v24 = (uint64_t)((double)(uint64_t)v173[0] / v174);
LABEL_64:
            v173[0] = (atomic_ullong *)v24;
            goto LABEL_266;
          case 1:
            double v115 = v174;
LABEL_204:
            *(double *)unsigned int v173 = *(double *)v173 / v115;
            goto LABEL_266;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            atomic_ullong *volatile v120 = (double *)v173[0][1];
            uint64_t v121 = v173[0][2] - (void)v120;
            if (v121)
            {
              double v122 = v174;
              unint64_t v123 = v121 >> 3;
              if (v123 <= 1) {
                unint64_t v123 = 1;
              }
              do
              {
                double *v120 = *v120 / v122;
                ++v120;
                --v123;
              }
              while (v123);
            }
            goto LABEL_266;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 6:
          case 7:
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            atomic_ullong v91 = v173[0];
            uint64_t v93 = (uint64_t *)v173[0][3];
            atomic_ullong v92 = v173[0][4];
            if ((uint64_t *)v92 == v93) {
              goto LABEL_266;
            }
            if (!v173[0][1]) {
              goto LABEL_266;
            }
            double v94 = v174;
            uint64_t v95 = 1;
            do
            {
              uint64_t v96 = *v93++;
              v95 *= v96;
            }
            while (v93 != (uint64_t *)v92);
            if (!v95) {
              goto LABEL_266;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v173[0] + 1);
            unint64_t v97 = (v91[4] - v91[3]) >> 3;
            size_t __idx = 0;
            std::vector<unsigned long>::vector(&__p, v97, &__idx);
            std::string::size_type v98 = __p.__r_.__value_.__l.__size_;
            uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_379;
        }
        while (2)
        {
          uint64_t v99 = 0;
          uint64_t v100 = v98 - (void)v39;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (uint64_t *)v91[6];
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              uint64_t v104 = *v39++;
              uint64_t v103 = v104;
              uint64_t v105 = *v102++;
              v99 += v105 * v103;
              --v101;
            }
            while (v101);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v91 + 1);
          *(double *)(*(void *)v91[1] + 8 * (v91[9] + v99)) = *(double *)(*(void *)v91[1] + 8 * (v91[9] + v99))
                                                              / v94;
          std::string::size_type v98 = __p.__r_.__value_.__l.__size_;
          uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          uint64_t v106 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          uint64_t v107 = v106 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1) {
            goto LABEL_182;
          }
          atomic_ullong v108 = v91[3];
          unint64_t v109 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v107) + 1;
          *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v107) = v109;
          if (v109 < *(void *)(v108 + 8 * v107))
          {
LABEL_181:
            uint64_t v106 = 1;
LABEL_182:
            if (v107 < 0 || !v106) {
              goto LABEL_184;
            }
            continue;
          }
          break;
        }
        double v110 = (unint64_t *)&v39[v106 - 2];
        atomic_ullong v111 = v108 - 16;
        while (1)
        {
          uint64_t v112 = v106 - 1;
          v110[1] = 0;
          if (v106 - 1 <= 0) {
            goto LABEL_185;
          }
          unint64_t v113 = *v110 + 1;
          *v110-- = v113;
          unint64_t v114 = *(void *)(v111 + 8 * v106--);
          if (v113 < v114)
          {
            uint64_t v107 = v112 - 1;
            goto LABEL_181;
          }
        }
      case 2:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 3:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            double v25 = v174;
            if (*v173[0] != 1) {
              operator new();
            }
            uint64_t v26 = v173[0];
            turi::flexible_type_fail(v173[0][2] - v173[0][1] == *(void *)(*(void *)&v174 + 16)
                                                              - *(void *)(*(void *)&v174 + 8));
            uint64_t v27 = (double *)v26[1];
            uint64_t v28 = v26[2] - (void)v27;
            if (v28)
            {
              unint64_t v29 = v28 >> 3;
              long long v30 = *(double **)(*(void *)&v25 + 8);
              if (v29 <= 1) {
                unint64_t v29 = 1;
              }
              do
              {
                double v31 = *v30++;
                double *v27 = *v27 / v31;
                ++v27;
                --v29;
              }
              while (v29);
            }
            goto LABEL_266;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 4:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 5:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 6:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 7:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 8:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 9:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          default:
            goto LABEL_379;
        }
      case 9:
        switch(BYTE4(v173[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_265;
          case 2:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 3:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 4:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 5:
            if (*v173[0] != 1) {
              operator new();
            }
            goto LABEL_265;
          case 8:
            if (*v173[0] != 1) {
              operator new();
            }
LABEL_265:
            turi::flexible_type_fail(0);
            goto LABEL_266;
          case 9:
            double v166 = v174;
            if (*v173[0] != 1) {
              operator new();
            }
            uint64_t v32 = v173[0];
            uint64_t v33 = v173[0] + 1;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v173[0] + 1), *(void *)&v174 + 8)) {
              turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            }
            uint64_t v35 = (uint64_t *)v32[3];
            uint64_t v34 = (uint64_t *)v32[4];
            if (v34 == v35) {
              goto LABEL_266;
            }
            if (!*v33) {
              goto LABEL_266;
            }
            uint64_t v36 = 1;
            do
            {
              uint64_t v37 = *v35++;
              v36 *= v37;
            }
            while (v35 != v34);
            if (!v36) {
              goto LABEL_266;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v33);
            unint64_t v38 = (v32[4] - v32[3]) >> 3;
            size_t __idx = 0;
            std::vector<unsigned long>::vector(&__p, v38, &__idx);
            std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
            uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_379;
        }
        break;
      default:
        goto LABEL_379;
    }
    while (1)
    {
      uint64_t v41 = v11;
      uint64_t v42 = v10;
      uint64_t v43 = v40 - (void)v39;
      if (v43)
      {
        uint64_t v44 = 0;
        unint64_t v45 = v43 >> 3;
        atomic_ullong v46 = *(uint64_t **)(*(void *)&v166 + 48);
        if (v45 <= 1) {
          unint64_t v45 = 1;
        }
        uint64_t v47 = v39;
        unint64_t v48 = v45;
        do
        {
          uint64_t v50 = *v47++;
          uint64_t v49 = v50;
          uint64_t v51 = *v46++;
          v44 += v51 * v49;
          --v48;
        }
        while (v48);
        uint64_t v52 = 0;
        double v53 = *(double *)(**(void **)(*(void *)&v166 + 8) + 8 * (*(void *)(*(void *)&v166 + 72) + v44));
        uint64_t v54 = (uint64_t *)v32[6];
        do
        {
          uint64_t v56 = *v39++;
          uint64_t v55 = v56;
          uint64_t v57 = *v54++;
          v52 += v57 * v55;
          --v45;
        }
        while (v45);
      }
      else
      {
        uint64_t v52 = 0;
        double v53 = *(double *)(**(void **)(*(void *)&v166 + 8) + 8 * *(void *)(*(void *)&v166 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v33);
      *(double *)(*(void *)v32[1] + 8 * (v32[9] + v52)) = *(double *)(*(void *)v32[1] + 8 * (v32[9] + v52)) / v53;
      std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
      uint64_t v39 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      uint64_t v58 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      uint64_t v59 = v58 - 1;
      if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
      {
        atomic_ullong *volatile v10 = v42;
        goto LABEL_113;
      }
      atomic_ullong v60 = v32[3];
      unint64_t v61 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v59) + 1;
      *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v59) = v61;
      atomic_ullong *volatile v10 = v42;
      if (v61 >= *(void *)(v60 + 8 * v59)) {
        break;
      }
      uint64_t v58 = 1;
LABEL_113:
      uint64_t v11 = v41;
      if (v59 < 0) {
        goto LABEL_184;
      }
LABEL_114:
      if (!v58) {
        goto LABEL_184;
      }
    }
    uint64_t v62 = (unint64_t *)&v39[v58 - 2];
    atomic_ullong v63 = v60 - 16;
    uint64_t v11 = v41;
    while (1)
    {
      uint64_t v64 = v58 - 1;
      v62[1] = 0;
      if (v58 - 1 <= 0) {
        break;
      }
      unint64_t v65 = *v62 + 1;
      *v62-- = v65;
      unint64_t v66 = *(void *)(v63 + 8 * v58--);
      if (v65 < v66)
      {
        uint64_t v58 = 1;
        if (((v64 - 1) & 0x8000000000000000) == 0) {
          goto LABEL_114;
        }
        break;
      }
    }
LABEL_184:
    if (v39)
    {
LABEL_185:
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      operator delete(v39);
    }
LABEL_266:
    switch(BYTE4(v175))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v124 = v174;
          if (v174 != 0.0)
          {
            if (*(char *)(*(void *)&v174 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v174 + 8));
            }
            double v125 = v124;
            uint64_t v126 = 0x1012C404EF22A49;
            goto LABEL_297;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v133 = v174;
          if (v174 != 0.0)
          {
            uint64_t v134 = *(void **)(*(void *)&v174 + 8);
            if (v134)
            {
              *(void *)(*(void *)&v174 + 16) = v134;
              operator delete(v134);
            }
            double v125 = v133;
            uint64_t v126 = 0x1080C409938AC02;
            goto LABEL_297;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v127 = v174;
          if (v174 != 0.0)
          {
            __p.__r_.__value_.__r.__words[0] = *(void *)&v174 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_292;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v127 = v174;
          if (v174 != 0.0)
          {
            __p.__r_.__value_.__r.__words[0] = *(void *)&v174 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_292:
            double v125 = v127;
            uint64_t v126 = 0x1020C405E66F15BLL;
            goto LABEL_297;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v135 = v174;
          if (v174 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v174 + 16));
            double v125 = v135;
            unsigned int v132 = -235920773;
            goto LABEL_296;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v174, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v128 = v174;
          if (v174 != 0.0)
          {
            uint64_t v129 = *(void **)(*(void *)&v174 + 48);
            if (v129)
            {
              *(void *)(*(void *)&v174 + 56) = v129;
              operator delete(v129);
            }
            atomic_ullong v130 = *(void **)(*(void *)&v128 + 24);
            if (v130)
            {
              *(void *)(*(void *)&v128 + 32) = v130;
              operator delete(v130);
            }
            uint64_t v131 = *(std::__shared_weak_count **)(*(void *)&v128 + 16);
            if (v131) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v131);
            }
            double v125 = v128;
            unsigned int v132 = 2071181815;
LABEL_296:
            uint64_t v126 = v132 | 0x1030C4000000000;
LABEL_297:
            MEMORY[0x22A614FA0](*(void *)&v125, v126);
          }
        }
        break;
      default:
        break;
    }
    double v136 = 0.0;
    switch(BYTE4(v173[1]))
    {
      case 0:
        double v136 = (double)(uint64_t)v173[0];
        break;
      case 1:
        double v136 = *(double *)v173;
        break;
      case 2:
        double v137 = v173[0];
        size_t __idx = 0;
        double v138 = (char *)(v173[0] + 1);
        if (*((char *)v173[0] + 31) < 0) {
          double v138 = (char *)v173[0][1];
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v138);
        double v139 = std::stod(&__p, &__idx);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*((char *)v137 + 31) < 0) {
          atomic_ullong v140 = v137[2];
        }
        else {
          atomic_ullong v140 = *((unsigned __int8 *)v137 + 31);
        }
        if (__idx != v140)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v164 = std::string::append(&v171, " cannot be interpreted as a float");
          long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v165;
          v164->__r_.__value_.__l.__size_ = 0;
          v164->__r_.__value_.__r.__words[2] = 0;
          v164->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v145 = v139;
        double v136 = v145;
        break;
      case 3:
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *((const void **)v173[0] + 1), v173[0][2], (v173[0][2] - v173[0][1]) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        break;
      case 4:
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *((uint64_t **)v173[0] + 1), *((uint64_t **)v173[0] + 2), (v173[0][2] - v173[0][1]) >> 4);
        turi::flexible_type_fail(0);
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
        break;
      case 5:
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *((uint64_t **)v173[0] + 1), *((uint64_t **)v173[0] + 2), (v173[0][2] - v173[0][1]) >> 5);
        turi::flexible_type_fail(0);
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
        break;
      case 6:
        double v136 = (double)SLODWORD(v173[1]) / 1000000.0 + (double)((uint64_t)v173[0] << 8 >> 8);
        break;
      case 7:
        break;
      case 8:
        uint64_t v141 = v173[0];
        atomic_ullong v142 = v173[0][2];
        double v174 = *((double *)v173[0] + 1);
        atomic_ullong v175 = v142;
        if (v142) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v142 + 8), 1u, memory_order_relaxed);
        }
        long long v143 = *(_OWORD *)(v141 + 3);
        long long v144 = *(_OWORD *)(v141 + 7);
        v11[1] = *(_OWORD *)(v141 + 5);
        v11[2] = v144;
        *uint64_t v11 = v143;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count(v10);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, (uint64_t)(v173[0] + 1));
        turi::flexible_type_fail(0);
        if (v169)
        {
          unint64_t v170 = v169;
          operator delete(v169);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v168 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        break;
      default:
        goto LABEL_379;
    }
    int v146 = *(unsigned __int8 *)(a3 + 12);
    switch(*(unsigned char *)(a3 + 12))
    {
      case 2:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_379;
      case 3:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_340;
      case 4:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_379;
      case 5:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_379;
      case 8:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_379;
      case 9:
        if (**(void **)a3 != 1) {
          operator new();
        }
        goto LABEL_341;
      default:
        if (v146 == 1)
        {
          unsigned int v150 = (double *)a3;
          if (v9)
          {
LABEL_379:
            turi::flexible_type_fail(0);
            __break(1u);
          }
        }
        else
        {
          if (v146 == 9)
          {
LABEL_341:
            atomic_ullong *volatile v149 = *(atomic_ullong *volatile *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
            unint64_t v147 = (void *)v149[1];
            unint64_t v148 = v149[9] + v9;
          }
          else
          {
            if (v146 != 3) {
              goto LABEL_379;
            }
LABEL_340:
            unint64_t v147 = (void *)(*(void *)a3 + 8);
            unint64_t v148 = v9;
          }
          unsigned int v150 = (double *)(*v147 + 8 * v148);
        }
        *unsigned int v150 = v136;
        switch(BYTE4(v173[1]))
        {
          case 2:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v151 = v173[0];
              if (v173[0])
              {
                if (*((char *)v173[0] + 31) < 0) {
                  operator delete(*((void **)v173[0] + 1));
                }
                atomic_ullong *volatile v152 = v151;
                uint64_t v153 = 0x1012C404EF22A49;
                goto LABEL_375;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v160 = v173[0];
              if (v173[0])
              {
                uint64_t v161 = (void *)v173[0][1];
                if (v161)
                {
                  v173[0][2] = (atomic_ullong)v161;
                  operator delete(v161);
                }
                atomic_ullong *volatile v152 = v160;
                uint64_t v153 = 0x1080C409938AC02;
                goto LABEL_375;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v154 = v173[0];
              if (v173[0])
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v173[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_370;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v154 = v173[0];
              if (v173[0])
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v173[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_370:
                atomic_ullong *volatile v152 = v154;
                uint64_t v153 = 0x1020C405E66F15BLL;
                goto LABEL_375;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v162 = v173[0];
              if (v173[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v173[0] + 2);
                atomic_ullong *volatile v152 = v162;
                unsigned int v159 = -235920773;
                goto LABEL_374;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v173[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v155 = v173[0];
              if (v173[0])
              {
                uint64_t v156 = (void *)v173[0][6];
                if (v156)
                {
                  v173[0][7] = (atomic_ullong)v156;
                  operator delete(v156);
                }
                uint64_t v157 = (void *)v155[3];
                if (v157)
                {
                  v155[4] = (atomic_ullong)v157;
                  operator delete(v157);
                }
                double v158 = (std::__shared_weak_count *)v155[2];
                if (v158) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v158);
                }
                atomic_ullong *volatile v152 = v155;
                unsigned int v159 = 2071181815;
LABEL_374:
                uint64_t v153 = v159 | 0x1030C4000000000;
LABEL_375:
                MEMORY[0x22A614FA0](v152, v153);
              }
            }
            break;
          default:
            break;
        }
        ++v9;
        break;
    }
  }
}

void sub_2241B2E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,int a35,char a36)
{
  MEMORY[0x22A614FA0](v37, 0x1012C404EF22A49);
  switch(a33)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v39 = a31;
      if (!a31) {
        goto LABEL_27;
      }
      if (*(char *)(a31 + 31) < 0) {
        operator delete(*(void **)(a31 + 8));
      }
      std::string::size_type v40 = (void *)v39;
      uint64_t v41 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = a31;
      if (!a31) {
        goto LABEL_27;
      }
      unint64_t v45 = *(void **)(a31 + 8);
      if (v45)
      {
        *(void *)(a31 + 16) = v45;
        operator delete(v45);
      }
      std::string::size_type v40 = (void *)v44;
      uint64_t v41 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v42 = a31;
      if (!a31) {
        goto LABEL_27;
      }
      a24 = (void *)(a31 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v42 = a31;
      if (!a31) {
        goto LABEL_27;
      }
      a24 = (void *)(a31 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
LABEL_21:
      std::string::size_type v40 = (void *)v42;
      uint64_t v41 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v46 = a31;
      if (!a31) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a31 + 16));
      std::string::size_type v40 = (void *)v46;
      unsigned int v43 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a31, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a31) {
        goto LABEL_27;
      }
      std::string::size_type v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a31);
      unsigned int v43 = 2071181815;
LABEL_25:
      uint64_t v41 = v43 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v40, v41);
LABEL_27:
      a31 = 0;
      a32 = 0;
      a33 = 0;
      switch(a36)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v47 = a34;
          if (!a34) {
            goto LABEL_53;
          }
          if (*(char *)(a34 + 31) < 0) {
            operator delete(*(void **)(a34 + 8));
          }
          unint64_t v48 = (void *)v47;
          uint64_t v49 = 0x1012C404EF22A49;
          goto LABEL_52;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v52 = a34;
          if (!a34) {
            goto LABEL_53;
          }
          double v53 = *(void **)(a34 + 8);
          if (v53)
          {
            *(void *)(a34 + 16) = v53;
            operator delete(v53);
          }
          unint64_t v48 = (void *)v52;
          uint64_t v49 = 0x1080C409938AC02;
          goto LABEL_52;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v50 = a34;
          if (!a34) {
            goto LABEL_53;
          }
          a24 = (void *)(a34 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
          goto LABEL_47;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v50 = a34;
          if (!a34) {
            goto LABEL_53;
          }
          a24 = (void *)(a34 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
LABEL_47:
          unint64_t v48 = (void *)v50;
          uint64_t v49 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v54 = a34;
          if (!a34) {
            goto LABEL_53;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(a34 + 16));
          unint64_t v48 = (void *)v54;
          unsigned int v51 = -235920773;
          goto LABEL_51;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)a34, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a34) {
            goto LABEL_53;
          }
          unint64_t v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a34);
          unsigned int v51 = 2071181815;
LABEL_51:
          uint64_t v49 = v51 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x22A614FA0](v48, v49);
LABEL_53:
          switch(*((unsigned char *)v36 + 12))
          {
            case 2:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              atomic_ullong *volatile v55 = *v36;
              if (!*v36) {
                goto LABEL_79;
              }
              if (*((char *)v55 + 31) < 0) {
                operator delete((void *)v55[1]);
              }
              uint64_t v56 = v55;
              uint64_t v57 = 0x1012C404EF22A49;
              goto LABEL_78;
            case 3:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              atomic_ullong *volatile v60 = *v36;
              if (!*v36) {
                goto LABEL_79;
              }
              unint64_t v61 = (void *)v60[1];
              if (v61)
              {
                v60[2] = (atomic_ullong)v61;
                operator delete(v61);
              }
              uint64_t v56 = v60;
              uint64_t v57 = 0x1080C409938AC02;
              goto LABEL_78;
            case 4:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              atomic_ullong *volatile v58 = *v36;
              if (!*v36) {
                goto LABEL_79;
              }
              a24 = v58 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
              goto LABEL_73;
            case 5:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              atomic_ullong *volatile v58 = *v36;
              if (!*v36) {
                goto LABEL_79;
              }
              a24 = v58 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
LABEL_73:
              uint64_t v56 = v58;
              uint64_t v57 = 0x1020C405E66F15BLL;
              goto LABEL_78;
            case 8:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              atomic_ullong *volatile v62 = *v36;
              if (!*v36) {
                goto LABEL_79;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v62 + 2);
              uint64_t v56 = v62;
              unsigned int v59 = -235920773;
              goto LABEL_77;
            case 9:
              if (atomic_fetch_add(*v36, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              if (!*v36) {
                goto LABEL_79;
              }
              uint64_t v56 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v36);
              unsigned int v59 = 2071181815;
LABEL_77:
              uint64_t v57 = v59 | 0x1030C4000000000;
LABEL_78:
              MEMORY[0x22A614FA0](v56, v57);
LABEL_79:
              atomic_ullong *volatile *v36 = 0;
LABEL_80:
              atomic_ullong *volatile *v36 = 0;
              *((_DWORD *)v36 + 2) = 0;
              *((unsigned char *)v36 + 12) = 0;
              _Unwind_Resume(a1);
              return;
            default:
              goto LABEL_80;
          }
        default:
          goto LABEL_53;
      }
    default:
      goto LABEL_27;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F558;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F558;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a1 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a1 + 5);
    *(void *)a3 = *(void *)a1;
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(a3 + 12) = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = *(void *)a3 / *(uint64_t *)a2;
          goto LABEL_27;
        case 1:
          double v98 = (double)*(uint64_t *)a2;
          goto LABEL_165;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v99 = *(double **)(*(void *)a3 + 8);
          uint64_t v100 = *(void *)(*(void *)a3 + 16) - (void)v99;
          if (v100)
          {
            unint64_t v101 = v100 >> 3;
            double v102 = (double)*(uint64_t *)a2;
            if (v101 <= 1) {
              unint64_t v101 = 1;
            }
            do
            {
              *uint64_t v99 = *v99 / v102;
              ++v99;
              --v101;
            }
            while (v101);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)a3;
          uint64_t v52 = *(uint64_t **)(*(void *)a3 + 24);
          unsigned int v51 = *(uint64_t **)(*(void *)a3 + 32);
          if (v51 == v52) {
            return;
          }
          if (!v50[1]) {
            return;
          }
          double v53 = (double)*(uint64_t *)a2;
          uint64_t v54 = 1;
          do
          {
            uint64_t v55 = *v52++;
            v54 *= v55;
          }
          while (v52 != v51);
          if (!v54) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
          unint64_t v56 = (v50[4] - v50[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v56, &v107);
          uint64_t v24 = v108;
          uint64_t v57 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v57 - v24;
        if (v59)
        {
          unint64_t v60 = v59 >> 3;
          unint64_t v61 = (uint64_t *)v50[6];
          if (v60 <= 1) {
            unint64_t v60 = 1;
          }
          do
          {
            uint64_t v63 = *(void *)v24;
            v24 += 8;
            uint64_t v62 = v63;
            uint64_t v64 = *v61++;
            v58 += v64 * v62;
            --v60;
          }
          while (v60);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v50 + 1);
        *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) = *(double *)(*(void *)v50[1] + 8 * (v50[9] + v58)) / v53;
        uint64_t v24 = v108;
        uint64_t v57 = v109;
        uint64_t v65 = (v109 - v108) >> 3;
        uint64_t v66 = v65 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_121;
        }
        atomic_ullong v67 = v50[3];
        unint64_t v68 = *(void *)&v108[8 * v66] + 1;
        *(void *)&v108[8 * v66] = v68;
        if (v68 < *(void *)(v67 + 8 * v66))
        {
LABEL_120:
          uint64_t v65 = 1;
LABEL_121:
          if (v66 < 0 || !v65) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v69 = (unint64_t *)&v24[8 * v65 - 16];
      atomic_ullong v70 = v67 - 16;
      while (1)
      {
        uint64_t v71 = v65 - 1;
        v69[1] = 0;
        if (v65 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v72 = *v69 + 1;
        *v69-- = v72;
        unint64_t v73 = *(void *)(v70 + 8 * v65--);
        if (v72 < v73)
        {
          uint64_t v66 = v71 - 1;
          goto LABEL_120;
        }
      }
    case 1:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          uint64_t v8 = (uint64_t)((double)*(uint64_t *)a3 / *(double *)a2);
LABEL_27:
          *(void *)a3 = v8;
          return;
        case 1:
          double v98 = *(double *)a2;
LABEL_165:
          *(double *)a3 = *(double *)a3 / v98;
          return;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          uint64_t v103 = *(double **)(*(void *)a3 + 8);
          uint64_t v104 = *(void *)(*(void *)a3 + 16) - (void)v103;
          if (v104)
          {
            double v105 = *(double *)a2;
            unint64_t v106 = v104 >> 3;
            if (v106 <= 1) {
              unint64_t v106 = 1;
            }
            do
            {
              *uint64_t v103 = *v103 / v105;
              ++v103;
              --v106;
            }
            while (v106);
          }
          return;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 6:
        case 7:
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)a3;
          uint64_t v76 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v75 = *(uint64_t **)(*(void *)a3 + 32);
          if (v75 == v76) {
            return;
          }
          if (!v74[1]) {
            return;
          }
          double v77 = *(double *)a2;
          uint64_t v78 = 1;
          do
          {
            uint64_t v79 = *v76++;
            v78 *= v79;
          }
          while (v76 != v75);
          if (!v78) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
          unint64_t v80 = (v74[4] - v74[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v80, &v107);
          uint64_t v24 = v108;
          uint64_t v81 = v109;
          break;
        default:
          goto LABEL_229;
      }
      while (2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v81 - v24;
        if (v83)
        {
          unint64_t v84 = v83 >> 3;
          unint64_t v85 = (uint64_t *)v74[6];
          if (v84 <= 1) {
            unint64_t v84 = 1;
          }
          do
          {
            uint64_t v87 = *(void *)v24;
            v24 += 8;
            uint64_t v86 = v87;
            uint64_t v88 = *v85++;
            v82 += v88 * v86;
            --v84;
          }
          while (v84);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v74 + 1);
        *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) = *(double *)(*(void *)v74[1] + 8 * (v74[9] + v82)) / v77;
        uint64_t v24 = v108;
        uint64_t v81 = v109;
        uint64_t v89 = (v109 - v108) >> 3;
        uint64_t v90 = v89 - 1;
        if (v109 - v108 < 1) {
          goto LABEL_143;
        }
        atomic_ullong v91 = v74[3];
        unint64_t v92 = *(void *)&v108[8 * v90] + 1;
        *(void *)&v108[8 * v90] = v92;
        if (v92 < *(void *)(v91 + 8 * v90))
        {
LABEL_142:
          uint64_t v89 = 1;
LABEL_143:
          if (v90 < 0 || !v89) {
            goto LABEL_145;
          }
          continue;
        }
        break;
      }
      uint64_t v93 = (unint64_t *)&v24[8 * v89 - 16];
      atomic_ullong v94 = v91 - 16;
      while (1)
      {
        uint64_t v95 = v89 - 1;
        v93[1] = 0;
        if (v89 - 1 <= 0) {
          goto LABEL_146;
        }
        unint64_t v96 = *v93 + 1;
        *v93-- = v96;
        unint64_t v97 = *(void *)(v94 + 8 * v89--);
        if (v96 < v97)
        {
          uint64_t v90 = v95 - 1;
          goto LABEL_142;
        }
      }
    case 2:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 3:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          uint64_t v9 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a3;
          turi::flexible_type_fail(*(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == *(void *)(v9 + 16) - *(void *)(v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            int v14 = *(double **)(v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              *uint64_t v11 = *v11 / v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          break;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
      return;
    case 4:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 5:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 6:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 7:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 8:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 9:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        default:
          goto LABEL_229;
      }
    case 9:
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_226;
        case 2:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 3:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 4:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 5:
          if (**(void **)a3 != 1) {
            operator new();
          }
          goto LABEL_226;
        case 8:
          if (**(void **)a3 != 1) {
            operator new();
          }
LABEL_226:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v16 = *(void *)a2;
          if (**(void **)a3 != 1) {
            operator new();
          }
          atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a3;
          uint64_t v18 = (uint64_t *)(*(void *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v18, v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          atomic_ullong *volatile v20 = (uint64_t *)v17[3];
          int v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            return;
          }
          if (!*v18) {
            return;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          uint64_t v107 = 0;
          std::vector<unsigned long>::vector(&v108, v23, &v107);
          uint64_t v24 = v108;
          double v25 = v109;
          break;
        default:
          goto LABEL_229;
      }
      break;
    default:
LABEL_229:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    uint64_t v26 = v25 - v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      unint64_t v29 = *(uint64_t **)(v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      long long v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(v16 + 8) + 8 * (*(void *)(v16 + 72) + v27));
      uint64_t v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = *(void *)v24;
        v24 += 8;
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(v16 + 8) + 8 * *(void *)(v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v18);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) / v36;
    uint64_t v24 = v108;
    double v25 = v109;
    uint64_t v41 = (v109 - v108) >> 3;
    uint64_t v42 = v41 - 1;
    if (v109 - v108 < 1) {
      goto LABEL_79;
    }
    atomic_ullong v43 = v17[3];
    unint64_t v44 = *(void *)&v108[8 * v42] + 1;
    *(void *)&v108[8 * v42] = v44;
    if (v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_78:
    uint64_t v41 = 1;
LABEL_79:
    if (v42 < 0 || !v41) {
      goto LABEL_145;
    }
  }
  unint64_t v45 = (unint64_t *)&v24[8 * v41 - 16];
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    uint64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      uint64_t v42 = v47 - 1;
      goto LABEL_78;
    }
  }
LABEL_145:
  if (v24)
  {
LABEL_146:
    unint64_t v109 = v24;
    operator delete(v24);
  }
}

void sub_2241B53C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, atomic_ullong *volatile a14)
{
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      uint64_t v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      uint64_t v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_21:
      uint64_t v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      uint64_t v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      uint64_t v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      *int v14 = 0;
LABEL_28:
      *int v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F5D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F5D8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(void *)(a3 + 5) = *(void *)(a2 + 5);
    *(void *)a3 = *(void *)a2;
    unsigned int v5 = *(unsigned __int8 *)(a2 + 12);
    *(unsigned char *)(a3 + 12) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
      unsigned int v5 = *(unsigned __int8 *)(a3 + 12);
    }
    switch(v5)
    {
      case 2u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      case 3u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      case 4u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      case 5u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      case 8u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      case 9u:
        if (**(void **)a3 != 1) {
          operator new();
        }
        return result;
      default:
        break;
    }
  }
  int v7 = (uint64_t *)(*(void *)a3 + 8);
  turi::flexible_type_impl::ndarray<double>::ensure_unique(v7);
  double v8 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v8 = (double)*(uint64_t *)a1;
      goto LABEL_46;
    case 1:
      double v8 = *(double *)a1;
      goto LABEL_46;
    case 2:
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      uint64_t v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0) {
        uint64_t v12 = *v11;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      double v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v29[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v10 + 31) < 0) {
        uint64_t v14 = *(void *)(v10 + 16);
      }
      else {
        uint64_t v14 = *(unsigned __int8 *)(v10 + 31);
      }
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v26 = std::string::append(&v32, " cannot be interpreted as a float");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v29[0] = (void *)v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v21 = v13;
      double v8 = v21;
      goto LABEL_46;
    case 3:
      uint64_t v9 = *(void *)a1;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_46;
    case 4:
      uint64_t v15 = *(void *)a1;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      goto LABEL_46;
    case 5:
      uint64_t v16 = *(void *)a1;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      goto LABEL_46;
    case 6:
      double v8 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      goto LABEL_46;
    case 7:
      goto LABEL_46;
    case 8:
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit(v18 + 2, 1u, memory_order_relaxed);
      }
      long long v19 = *(_OWORD *)(v17 + 24);
      long long v20 = *(_OWORD *)(v17 + 56);
      long long v30 = *(_OWORD *)(v17 + 40);
      long long v31 = v20;
      *(_OWORD *)unint64_t v29 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_46;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v30 + 1))
      {
        *(void *)&long long v31 = *((void *)&v30 + 1);
        operator delete(*((void **)&v30 + 1));
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_46:
      uint64_t result = turi::flexible_type_impl::ndarray<double>::elements(v7);
      unint64_t v23 = *(double **)result;
      atomic_ullong *volatile v24 = *(double **)(result + 8);
      while (v23 != v24)
      {
        double *v23 = v8 / *v23;
        ++v23;
      }
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_2241B6048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MEMORY[0x22A614FA0](v28, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v27 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      if (*((char *)v30 + 31) < 0) {
        operator delete((void *)v30[1]);
      }
      atomic_ullong *volatile v31 = v30;
      uint64_t v32 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      uint64_t v40 = (void *)v39[1];
      if (v40)
      {
        v39[2] = (atomic_ullong)v40;
        operator delete(v40);
      }
      atomic_ullong *volatile v31 = v39;
      uint64_t v32 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      a22 = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      a22 = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_27:
      atomic_ullong *volatile v31 = v33;
      uint64_t v32 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v41 + 2);
      atomic_ullong *volatile v31 = v41;
      unsigned int v38 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v27;
      if (!*(void *)v27) {
        goto LABEL_33;
      }
      uint64_t v35 = (void *)v34[6];
      if (v35)
      {
        v34[7] = (atomic_ullong)v35;
        operator delete(v35);
      }
      double v36 = (void *)v34[3];
      if (v36)
      {
        v34[4] = (atomic_ullong)v36;
        operator delete(v36);
      }
      uint64_t v37 = (std::__shared_weak_count *)v34[2];
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      atomic_ullong *volatile v31 = v34;
      unsigned int v38 = 2071181815;
LABEL_31:
      uint64_t v32 = v38 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v31, v32);
LABEL_33:
      *(void *)uint64_t v27 = 0;
LABEL_34:
      *(void *)uint64_t v27 = 0;
      *(_DWORD *)(v27 + 8) = 0;
      *(unsigned char *)(v27 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_34;
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D76F658;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F658;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      double v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      uint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v34 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v41 = *(_OWORD *)(v14 + 40);
      long long v42 = v17;
      *(_OWORD *)uint64_t v40 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      atomic_ullong *volatile v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        atomic_ullong *volatile v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        double v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v37 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v36, (const std::string *)__p);
        __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      uint64_t v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v41 = *(_OWORD *)(v27 + 40);
      long long v42 = v30;
      *(_OWORD *)uint64_t v40 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double result = v5 / v19;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v5 / v19;
  return result;
}

void sub_2241B6A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F6D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F6D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a1 + 16) - *(void *)(*a1 + 8);
  if (v6 == *(void *)(*a2 + 16) - *(void *)(*a2 + 8))
  {
    std::vector<double>::vector(&v18, v6 >> 3);
    uint64_t v8 = v4 + 8;
    uint64_t v7 = *(double **)(v4 + 8);
    uint64_t v9 = *(void *)(v8 + 8) - (void)v7;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      uint64_t v11 = *(double **)(v5 + 8);
      uint64_t v12 = (long double *)v18;
      if (v10 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v10;
      }
      do
      {
        double v14 = *v7++;
        long double v15 = v14;
        long double v16 = *v11++;
        *v12++ = pow(v15, v16);
        --v13;
      }
      while (v13);
    }
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 3;
    operator new();
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
  {
    *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a3 = turi::FLEX_UNDEFINED;
    int v17 = byte_268085C54;
    *(unsigned char *)(a3 + 12) = byte_268085C54;
    switch(v17)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
        break;
      default:
        return;
    }
  }
}

void sub_2241B6EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v13 = v12;
  MEMORY[0x22A614FA0](v13, 0x1080C409938AC02);
  if (atomic_fetch_add(v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v15 = *v10;
    if (*v10)
    {
      long double v16 = *(void **)(v15 + 8);
      if (v16)
      {
        *(void *)(v15 + 16) = v16;
        operator delete(v16);
      }
      MEMORY[0x22A614FA0](v15, 0x1080C409938AC02);
    }
    *unint64_t v10 = 0;
  }
  *unint64_t v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((unsigned char *)v10 + 12) = 0;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F758;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F758;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  double v5 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v5 = *(double *)a2;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v29[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v26 = std::string::append(&v32, " cannot be interpreted as a float");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v29[0] = (void *)v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a2;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a2;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      break;
    case 5:
      uint64_t v13 = *(void *)a2;
      __p[1] = 0;
      v29[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      break;
    case 6:
      double v5 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a2;
      uint64_t v15 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v30 = *(_OWORD *)(v14 + 40);
      long long v31 = v17;
      *(_OWORD *)long long v29 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v30 + 1))
      {
        *(void *)&long long v31 = *((void *)&v30 + 1);
        operator delete(*((void **)&v30 + 1));
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  std::vector<double>::vector(__p, (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  double v19 = *(double **)(v4 + 8);
  uint64_t v20 = *(void *)(v4 + 16) - (void)v19;
  if (v20)
  {
    unint64_t v21 = v20 >> 3;
    atomic_ullong *volatile v22 = (long double *)__p[0];
    if (v21 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v21;
    }
    do
    {
      long double v24 = *v19++;
      *v22++ = pow(v24, v5);
      --v23;
    }
    while (v23);
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 3;
  operator new();
}

void sub_2241B7478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F7D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F7D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      uint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v31[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v28 = std::string::append(&v34, " cannot be interpreted as a float");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v31[0] = (void *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v32 = *(_OWORD *)(v14 + 40);
      long long v33 = v17;
      *(_OWORD *)long long v31 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v32 + 1))
      {
        *(void *)&long long v33 = *((void *)&v32 + 1);
        operator delete(*((void **)&v32 + 1));
      }
      if (v31[0])
      {
        v31[1] = v31[0];
        operator delete(v31[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  uint64_t v19 = *a2;
  std::vector<double>::vector(__p, (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
  uint64_t v21 = v19 + 8;
  uint64_t v20 = *(double **)(v19 + 8);
  uint64_t v22 = *(void *)(v21 + 8) - (void)v20;
  if (v22)
  {
    unint64_t v23 = v22 >> 3;
    long double v24 = (long double *)__p[0];
    if (v23 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v23;
    }
    do
    {
      long double v26 = *v20++;
      *v24++ = pow(v5, v26);
      --v25;
    }
    while (v25);
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 3;
  operator new();
}

void sub_2241B7B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F858;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F858;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v6 = (double)*(uint64_t *)a2;
      goto LABEL_27;
    case 1:
      double v6 = *(double *)a2;
      goto LABEL_27;
    case 2:
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      double v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0) {
        double v10 = *v9;
      }
      uint64_t v11 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v89, v10);
      double v12 = std::stod(v11, &__idx);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v8 + 31) < 0) {
        uint64_t v13 = *(void *)(v8 + 16);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v8 + 31);
      }
      if (__idx != v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v64 = std::string::append(&v88, " cannot be interpreted as a float");
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v89);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v20 = v12;
      double v6 = v20;
      goto LABEL_27;
    case 3:
      uint64_t v7 = *(void *)a2;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      unint64_t v85 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v85, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v85)
      {
        uint64_t v86 = v85;
        operator delete(v85);
      }
      goto LABEL_30;
    case 4:
      uint64_t v14 = *(void *)a2;
      memset(v81, 0, sizeof(v81));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v81, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      goto LABEL_30;
    case 5:
      uint64_t v15 = *(void *)a2;
      memset(v80, 0, sizeof(v80));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v80, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      goto LABEL_30;
    case 6:
      double v6 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_27:
      if (v6 != 0.5) {
        goto LABEL_30;
      }
      double v21 = 0.0;
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          double v21 = (double)*(uint64_t *)a1;
          break;
        case 1:
          double v21 = *(double *)a1;
          break;
        case 2:
          uint64_t v51 = *(void *)a1;
          uint64_t v52 = (char **)(*(void *)a1 + 8);
          v89.__r_.__value_.__r.__words[0] = 0;
          double v53 = (char *)v52;
          if (*(char *)(v51 + 31) < 0) {
            double v53 = *v52;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, v53);
          double v54 = std::stod((const std::string *)__str, (size_t *)&v89);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          if (*(char *)(v51 + 31) < 0) {
            uint64_t v55 = *(void *)(v51 + 16);
          }
          else {
            uint64_t v55 = *(unsigned __int8 *)(v51 + 31);
          }
          if (v89.__r_.__value_.__r.__words[0] != v55)
          {
            unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            unint64_t v73 = std::string::append((std::string *)&v75, " cannot be interpreted as a float");
            long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            *(void *)&__str[16] = *((void *)&v73->__r_.__value_.__l + 2);
            *(_OWORD *)long long __str = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v72, (const std::string *)__str);
            __cxa_throw(v72, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v62 = v54;
          double v21 = v62;
          break;
        case 3:
          uint64_t v50 = *(void *)a1;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v50 + 8), *(void *)(v50 + 16), (uint64_t)(*(void *)(v50 + 16) - *(void *)(v50 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(void *)__str)
          {
            *(void *)&__str[8] = *(void *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          uint64_t v56 = *(void *)a1;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v56 + 8), *(uint64_t **)(v56 + 16), (uint64_t)(*(void *)(v56 + 16) - *(void *)(v56 + 8)) >> 4);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 5:
          uint64_t v57 = *(void *)a1;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v57 + 8), *(uint64_t **)(v57 + 16), (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 5);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 6:
          double v21 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          uint64_t v58 = *(void *)a1;
          uint64_t v59 = *(void *)(*(void *)a1 + 16);
          *(void *)long long __str = *(void *)(*(void *)a1 + 8);
          *(void *)&__str[8] = v59;
          if (v59) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v59 + 8), 1u, memory_order_relaxed);
          }
          long long v60 = *(_OWORD *)(v58 + 24);
          long long v61 = *(_OWORD *)(v58 + 56);
          long long v83 = *(_OWORD *)(v58 + 40);
          long long v84 = v61;
          *(_OWORD *)&__str[16] = v60;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)a1 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v83 + 1))
          {
            *(void *)&long long v84 = *((void *)&v83 + 1);
            operator delete(*((void **)&v83 + 1));
          }
          if (*(void *)&__str[16])
          {
            *(void *)&__str[24] = *(void *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          if (*(void *)&__str[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v49 = sqrt(v21);
      break;
    case 7:
      goto LABEL_30;
    case 8:
      uint64_t v16 = *(void *)a2;
      long long v17 = *(atomic_uint **)(*(void *)a2 + 16);
      uint64_t v75 = *(void ***)(*(void *)a2 + 8);
      uint64_t v76 = v17;
      if (v17) {
        atomic_fetch_add_explicit(v17 + 2, 1u, memory_order_relaxed);
      }
      long long v18 = *(_OWORD *)(v16 + 24);
      long long v19 = *(_OWORD *)(v16 + 56);
      long long v78 = *(_OWORD *)(v16 + 40);
      long long v79 = v19;
      long long v77 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v76);
      goto LABEL_30;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v83 + 1))
      {
        *(void *)&long long v84 = *((void *)&v83 + 1);
        operator delete(*((void **)&v83 + 1));
      }
      if (*(void *)&__str[16])
      {
        *(void *)&__str[24] = *(void *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      if (*(void *)&__str[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
      }
LABEL_30:
      double v22 = 0.0;
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          double v22 = (double)*(uint64_t *)a1;
          break;
        case 1:
          double v22 = *(double *)a1;
          break;
        case 2:
          double v24 = *(double *)a1;
          uint64_t v25 = (char **)(*(void *)a1 + 8);
          v89.__r_.__value_.__r.__words[0] = 0;
          long double v26 = (char *)v25;
          if (*(char *)(*(void *)&v24 + 31) < 0) {
            long double v26 = *v25;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, v26);
          double v27 = std::stod((const std::string *)__str, (size_t *)&v89);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          if (*(char *)(*(void *)&v24 + 31) < 0) {
            uint64_t v28 = *(void *)(*(void *)&v24 + 16);
          }
          else {
            uint64_t v28 = *(unsigned __int8 *)(*(void *)&v24 + 31);
          }
          if (v89.__r_.__value_.__r.__words[0] != v28)
          {
            uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            atomic_ullong v67 = std::string::append((std::string *)&v75, " cannot be interpreted as a float");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            *(void *)&__str[16] = *((void *)&v67->__r_.__value_.__l + 2);
            *(_OWORD *)long long __str = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v66, (const std::string *)__str);
            __cxa_throw(v66, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v35 = v27;
          double v22 = v35;
          break;
        case 3:
          double v23 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(*(void *)&v23 + 8), *(void *)(*(void *)&v23 + 16), (uint64_t)(*(void *)(*(void *)&v23 + 16) - *(void *)(*(void *)&v23 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(void *)__str)
          {
            *(void *)&__str[8] = *(void *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          double v29 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(*(void *)&v29 + 8), *(uint64_t **)(*(void *)&v29 + 16), (uint64_t)(*(void *)(*(void *)&v29 + 16) - *(void *)(*(void *)&v29 + 8)) >> 4);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 5:
          double v30 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(*(void *)&v30 + 8), *(uint64_t **)(*(void *)&v30 + 16), (uint64_t)(*(void *)(*(void *)&v30 + 16) - *(void *)(*(void *)&v30 + 8)) >> 5);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 6:
          double v22 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          double v31 = *(double *)a1;
          uint64_t v32 = *(void *)(*(void *)a1 + 16);
          *(void *)long long __str = *(void *)(*(void *)a1 + 8);
          *(void *)&__str[8] = v32;
          if (v32) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 1u, memory_order_relaxed);
          }
          long long v33 = *(_OWORD *)(*(void *)&v31 + 24);
          long long v34 = *(_OWORD *)(*(void *)&v31 + 56);
          long long v83 = *(_OWORD *)(*(void *)&v31 + 40);
          long long v84 = v34;
          *(_OWORD *)&__str[16] = v33;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)a1 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v83 + 1))
          {
            *(void *)&long long v84 = *((void *)&v83 + 1);
            operator delete(*((void **)&v83 + 1));
          }
          if (*(void *)&__str[16])
          {
            *(void *)&__str[24] = *(void *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          if (*(void *)&__str[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v36 = 0.0;
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v36 = (double)*(uint64_t *)a2;
          break;
        case 1:
          double v36 = *(double *)a2;
          break;
        case 2:
          double v38 = *(double *)a2;
          v89.__r_.__value_.__r.__words[0] = 0;
          atomic_ullong *volatile v39 = (char *)(*(void *)&v38 + 8);
          if (*(char *)(*(void *)&v38 + 31) < 0) {
            atomic_ullong *volatile v39 = *(char **)(*(void *)&v38 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, v39);
          double v40 = std::stod((const std::string *)__str, (size_t *)&v89);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          if (*(char *)(*(void *)&v38 + 31) < 0) {
            uint64_t v41 = *(void *)(*(void *)&v38 + 16);
          }
          else {
            uint64_t v41 = *(unsigned __int8 *)(*(void *)&v38 + 31);
          }
          if (v89.__r_.__value_.__r.__words[0] != v41)
          {
            uint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            atomic_ullong v70 = std::string::append((std::string *)&v75, " cannot be interpreted as a float");
            long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            *(void *)&__str[16] = *((void *)&v70->__r_.__value_.__l + 2);
            *(_OWORD *)long long __str = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v69, (const std::string *)__str);
            __cxa_throw(v69, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v48 = v40;
          double v36 = v48;
          break;
        case 3:
          double v37 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(*(void *)&v37 + 8), *(void *)(*(void *)&v37 + 16), (uint64_t)(*(void *)(*(void *)&v37 + 16) - *(void *)(*(void *)&v37 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(void *)__str)
          {
            *(void *)&__str[8] = *(void *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          double v42 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(*(void *)&v42 + 8), *(uint64_t **)(*(void *)&v42 + 16), (uint64_t)(*(void *)(*(void *)&v42 + 16) - *(void *)(*(void *)&v42 + 8)) >> 4);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 5:
          double v43 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(*(void *)&v43 + 8), *(uint64_t **)(*(void *)&v43 + 16), (uint64_t)(*(void *)(*(void *)&v43 + 16) - *(void *)(*(void *)&v43 + 8)) >> 5);
          turi::flexible_type_fail(0);
          uint64_t v75 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
          break;
        case 6:
          double v36 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          double v44 = *(double *)a2;
          uint64_t v45 = *(void *)(*(void *)a2 + 16);
          *(void *)long long __str = *(void *)(*(void *)a2 + 8);
          *(void *)&__str[8] = v45;
          if (v45) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v45 + 8), 1u, memory_order_relaxed);
          }
          long long v46 = *(_OWORD *)(*(void *)&v44 + 24);
          long long v47 = *(_OWORD *)(*(void *)&v44 + 56);
          long long v83 = *(_OWORD *)(*(void *)&v44 + 40);
          long long v84 = v47;
          *(_OWORD *)&__str[16] = v46;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)a2 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v83 + 1))
          {
            *(void *)&long long v84 = *((void *)&v83 + 1);
            operator delete(*((void **)&v83 + 1));
          }
          if (*(void *)&__str[16])
          {
            *(void *)&__str[24] = *(void *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          if (*(void *)&__str[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v49 = pow(v22, v36);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v49;
}

void sub_2241B8880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v36 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F8D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F8D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a1 + 16) - *(void *)(*a1 + 8);
  if (v6 == *(void *)(*a2 + 16) - *(void *)(*a2 + 8))
  {
    std::vector<double>::vector(&v18, v6 >> 3);
    uint64_t v7 = *(double **)(v4 + 8);
    uint64_t v8 = *(void *)(v4 + 16) - (void)v7;
    if (v8)
    {
      unint64_t v9 = v8 >> 3;
      double v10 = *(double **)(v5 + 8);
      uint64_t v11 = (double *)v18;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      do
      {
        double v12 = *v7++;
        double v13 = v12;
        double v14 = *v10++;
        double v15 = v13 / v14;
        double v16 = floor(v15);
        if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
          double v15 = v16;
        }
        *v11++ = v15;
        --v9;
      }
      while (v9);
    }
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 3;
    operator new();
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
  {
    *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a3 = turi::FLEX_UNDEFINED;
    int v17 = byte_268085C54;
    *(unsigned char *)(a3 + 12) = byte_268085C54;
    switch(v17)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
        break;
      default:
        return;
    }
  }
}

void sub_2241B8E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v13 = v12;
  MEMORY[0x22A614FA0](v13, 0x1080C409938AC02);
  if (atomic_fetch_add(v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v15 = *v10;
    if (*v10)
    {
      double v16 = *(void **)(v15 + 8);
      if (v16)
      {
        *(void *)(v15 + 16) = v16;
        operator delete(v16);
      }
      MEMORY[0x22A614FA0](v15, 0x1080C409938AC02);
    }
    *double v10 = 0;
  }
  *double v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((unsigned char *)v10 + 12) = 0;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F958;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F958;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  double v5 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v5 = *(double *)a2;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      unint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v30[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v27 = std::string::append(&v33, " cannot be interpreted as a float");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v30[0] = (void *)v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a2;
      __p[1] = 0;
      v30[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a2;
      __p[1] = 0;
      v30[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      break;
    case 5:
      uint64_t v13 = *(void *)a2;
      __p[1] = 0;
      v30[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      break;
    case 6:
      double v5 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a2;
      uint64_t v15 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v31 = *(_OWORD *)(v14 + 40);
      long long v32 = v17;
      *(_OWORD *)double v30 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v31 + 1))
      {
        *(void *)&long long v32 = *((void *)&v31 + 1);
        operator delete(*((void **)&v31 + 1));
      }
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  std::vector<double>::vector(__p, (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  long long v19 = *(double **)(v4 + 8);
  uint64_t v20 = *(void *)(v4 + 16) - (void)v19;
  if (v20)
  {
    unint64_t v21 = v20 >> 3;
    double v22 = (double *)__p[0];
    if (v21 <= 1) {
      unint64_t v21 = 1;
    }
    do
    {
      double v23 = *v19++;
      double v24 = v23 / v5;
      double v25 = floor(v23 / v5);
      if (COERCE__INT64(fabs(v23 / v5)) < 0x7FF0000000000000) {
        double v24 = v25;
      }
      *v22++ = v24;
      --v21;
    }
    while (v21);
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 3;
  operator new();
}

void sub_2241B93C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76F9D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76F9D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      unint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v31[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v28 = std::string::append(&v34, " cannot be interpreted as a float");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v31[0] = (void *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v32 = *(_OWORD *)(v14 + 40);
      long long v33 = v17;
      *(_OWORD *)long long v31 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v32 + 1))
      {
        *(void *)&long long v33 = *((void *)&v32 + 1);
        operator delete(*((void **)&v32 + 1));
      }
      if (v31[0])
      {
        v31[1] = v31[0];
        operator delete(v31[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  uint64_t v19 = *a2;
  std::vector<double>::vector(__p, (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
  uint64_t v20 = *(double **)(v19 + 8);
  uint64_t v21 = *(void *)(v19 + 16) - (void)v20;
  if (v21)
  {
    unint64_t v22 = v21 >> 3;
    double v23 = (double *)__p[0];
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    do
    {
      double v24 = *v20++;
      double v25 = v5 / v24;
      double v26 = floor(v5 / v24);
      if (COERCE__INT64(fabs(v5 / v24)) < 0x7FF0000000000000) {
        double v25 = v26;
      }
      *v23++ = v25;
      --v22;
    }
    while (v22);
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 3;
  operator new();
}

void sub_2241B9A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FA58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FA58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      unint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v41[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        float v35 = std::string::append(&v44, " cannot be interpreted as a float");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v41[0] = (void *)v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v42 = *(_OWORD *)(v14 + 40);
      long long v43 = v17;
      *(_OWORD *)uint64_t v41 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v42 + 1))
      {
        *(void *)&long long v43 = *((void *)&v42 + 1);
        operator delete(*((void **)&v42 + 1));
      }
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      unint64_t v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        unint64_t v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v41[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        double v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v38 = std::string::append(&v44, " cannot be interpreted as a float");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v41[0] = (void *)v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v37, (const std::string *)__p);
        __cxa_throw(v37, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v41[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      int v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v42 = *(_OWORD *)(v27 + 40);
      long long v43 = v30;
      *(_OWORD *)uint64_t v41 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v42 + 1))
      {
        *(void *)&long long v43 = *((void *)&v42 + 1);
        operator delete(*((void **)&v42 + 1));
      }
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v32 = v5 / v19;
  double v33 = floor(v5 / v19);
  if (COERCE__INT64(fabs(v5 / v19)) < 0x7FF0000000000000) {
    double v32 = v33;
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v32;
}

void sub_2241BA294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FAD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FAD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v5 = *(double *)a1;
      break;
    case 2:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      unint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      double v10 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v11 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::string v34 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v40[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v18 = v10;
      double v5 = v18;
      break;
    case 3:
      uint64_t v6 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v12 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v13 = *(void *)a1;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v14 = *(void *)a1;
      uint64_t v15 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v41 = *(_OWORD *)(v14 + 40);
      long long v42 = v17;
      *(_OWORD *)double v40 = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v19 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v19 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v19 = *(double *)a2;
      break;
    case 2:
      uint64_t v21 = *(void *)a2;
      size_t __idx = 0;
      unint64_t v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0) {
        unint64_t v22 = *(char **)(v21 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      double v23 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v40[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v21 + 31) < 0) {
        uint64_t v24 = *(void *)(v21 + 16);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
      }
      if (__idx != v24)
      {
        long long v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v37 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v40[0] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v36, (const std::string *)__p);
        __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v31 = v23;
      double v19 = v31;
      break;
    case 3:
      uint64_t v20 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v25 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 5:
      uint64_t v26 = *(void *)a2;
      __p[1] = 0;
      v40[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      break;
    case 6:
      double v19 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v27 = *(void *)a2;
      int v28 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 56);
      long long v41 = *(_OWORD *)(v27 + 40);
      long long v42 = v30;
      *(_OWORD *)double v40 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  if (COERCE__INT64(fabs(v5 / v19)) > 0x7FEFFFFFFFFFFFFFLL)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v32 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v32)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
  }
  else
  {
    *(unsigned char *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(void *)a3 = vcvtmd_s64_f64(v5 / v19);
  }
}

void sub_2241BAAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FB58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FB58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 12) | *(unsigned __int8 *)(a2 + 12))
  {
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)a2;
    uint64_t v4 = *(void *)a1;
    if (*(uint64_t *)a2 >= 1)
    {
      uint64_t v5 = v4 % v3;
      v3 &= v5 >> 63;
LABEL_4:
      *(unsigned char *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(void *)a3 = v3 + v5;
      return;
    }
    if (v3 < 0)
    {
      uint64_t v5 = v4 + v4 / -v3 * v3;
      if (v5 <= 0) {
        uint64_t v3 = 0;
      }
      goto LABEL_4;
    }
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v6 = byte_268085C54;
      *(unsigned char *)(a3 + 12) = byte_268085C54;
      switch(v6)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FBD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FBD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  if (a1[12] == 2 && a2[12] == 2)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(void *)a2;
    if (*(char *)(*(void *)a1 + 31) < 0)
    {
      uint64_t v8 = *(char **)(v6 + 8);
      uint64_t v9 = *(void *)(v6 + 16);
    }
    else
    {
      uint64_t v8 = (char *)(v6 + 8);
      uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 31);
    }
    int64_t v10 = *(unsigned __int8 *)(v7 + 31);
    uint64_t v12 = *(char **)(v7 + 8);
    int64_t v11 = *(void *)(v7 + 16);
    if ((v10 & 0x80u) == 0) {
      uint64_t v13 = (char *)(*(void *)a2 + 8);
    }
    else {
      uint64_t v13 = v12;
    }
    if ((v10 & 0x80u) == 0) {
      int64_t v14 = v10;
    }
    else {
      int64_t v14 = v11;
    }
    if (v14)
    {
      uint64_t v15 = &v8[v9];
      if (v9 >= v14)
      {
        int v18 = *v13;
        double v19 = v8;
        do
        {
          uint64_t v20 = v9 - v14;
          if (v20 == -1) {
            break;
          }
          uint64_t v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21) {
            break;
          }
          long long v16 = v21;
          if (!memcmp(v21, v13, v14)) {
            goto LABEL_18;
          }
          double v19 = v16 + 1;
          uint64_t v9 = v15 - (v16 + 1);
        }
        while (v9 >= v14);
      }
      long long v16 = v15;
LABEL_18:
      BOOL v5 = v16 != v15 && v16 - v8 != -1;
    }
    else
    {
      BOOL v5 = 1;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v5;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FC58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FC58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a1[12] != 3) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 12) == 1)
  {
    double v3 = *(double *)a2;
    goto LABEL_7;
  }
  if (*(unsigned char *)(a2 + 12))
  {
LABEL_5:
    BOOL v4 = 0;
    goto LABEL_12;
  }
  double v3 = (double)*(uint64_t *)a2;
LABEL_7:
  uint64_t v6 = *(double **)(*(void *)a1 + 8);
  BOOL v5 = *(double **)(*(void *)a1 + 16);
  if (v6 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(double **)(*(void *)a1 + 16);
        break;
      }
    }
  }
  BOOL v4 = v6 != v5;
LABEL_12:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FCD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FCD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a1[12] == 4)
  {
    uint64_t v4 = *(void *)a1;
    BOOL v5 = std::__find_impl[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type,std::__identity>(*(unsigned __int8 **)(*(void *)a1 + 8), *(unsigned __int8 **)(*(void *)a1 + 16), a2) != *(unsigned __int8 **)(v4 + 16);
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
  }
  else
  {
    BOOL v5 = 0;
    *(unsigned char *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  *(void *)a3 = v5;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

unsigned __int8 *std::__find_impl[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  double v3 = a1;
  if (a1 != a2)
  {
    while (2)
    {
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
          switch(v3[12])
          {
            case 0u:
              if (*(void *)v3 == *(void *)a3) {
                return v3;
              }
              goto LABEL_110;
            case 1u:
              double v6 = *(double *)v3;
              uint64_t v7 = *(void *)a3;
              goto LABEL_79;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              if (*(void *)a3 == (uint64_t)(*(void *)v3 << 8) >> 8 && !*((_DWORD *)v3 + 2)) {
                return v3;
              }
              goto LABEL_110;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(v3[12])
          {
            case 0u:
              double v6 = *(double *)a3;
              uint64_t v7 = *(void *)v3;
LABEL_79:
              double v60 = (double)v7;
              goto LABEL_84;
            case 1u:
              double v6 = *(double *)v3;
              double v60 = *(double *)a3;
LABEL_84:
              if (v6 == v60) {
                return v3;
              }
              goto LABEL_110;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              double v61 = vabdd_f64((double)*((int *)v3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v3 << 8) >> 8), *(double *)a3);
              goto LABEL_88;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v8 = v3[12];
          if (v8 - 3 < 7 || v8 < 2) {
            goto LABEL_110;
          }
          if (v8 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v10 = *(double *)v3;
          size_t v11 = *(char *)(*(void *)v3 + 31) < 0
              ? *(void *)(*(void *)&v10 + 16)
              : *(unsigned __int8 *)(*(void *)v3 + 31);
          double v62 = *(double *)a3;
          uint64_t v63 = *(char *)(*(void *)a3 + 31) < 0
              ? *(void *)(*(void *)&v62 + 16)
              : *(unsigned __int8 *)(*(void *)a3 + 31);
          if (v11 != v63) {
            goto LABEL_110;
          }
          uint64_t v64 = (unsigned __int8 *)(*(void *)&v10 + 8);
          if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) != 0) {
            uint64_t v64 = *(unsigned __int8 **)v64;
          }
          long long v65 = (unsigned __int8 *)(*(void *)&v62 + 8);
          if ((*(unsigned char *)(*(void *)a3 + 31) & 0x80) != 0) {
            long long v65 = *(unsigned __int8 **)v65;
          }
          if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) != 0)
          {
            if (!memcmp(v64, v65, v11)) {
              return v3;
            }
          }
          else
          {
            if (!v11) {
              return v3;
            }
            while (*v64 == *v65)
            {
              ++v64;
              ++v65;
              if (!--v11) {
                return v3;
              }
            }
          }
LABEL_110:
          v3 += 16;
          if (v3 != a2) {
            continue;
          }
          double v3 = a2;
          break;
        case 3:
          unsigned int v12 = v3[12];
          if (v12 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v12 != 3) {
            goto LABEL_110;
          }
          uint64_t v13 = *(double **)(*(void *)v3 + 8);
          int64_t v14 = *(double **)(*(void *)v3 + 16);
          unint64_t v15 = v14 - v13;
          long long v16 = *(double **)(*(void *)a3 + 8);
          if (v15 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v16) >> 3) {
            goto LABEL_110;
          }
          if (v14 == v13) {
            return v3;
          }
          if (v15 <= 1) {
            unint64_t v15 = 1;
          }
          while (*v13 == *v16)
          {
            ++v13;
            ++v16;
            if (!--v15) {
              return v3;
            }
          }
          goto LABEL_110;
        case 4:
          unsigned int v17 = v3[12];
          if (v17 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v17 == 4
            && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t *)(*(void *)v3 + 8), (void *)(*(void *)a3 + 8)) & 1) != 0)
          {
            return v3;
          }
          goto LABEL_110;
        case 5:
          unsigned int v18 = v3[12];
          if (v18 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v18 == 5
            && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t **)(*(void *)v3 + 8), (uint64_t **)(*(void *)a3 + 8)))
          {
            return v3;
          }
          goto LABEL_110;
        case 6:
          switch(v3[12])
          {
            case 0u:
              if (*(void *)v3 == (uint64_t)(*(void *)a3 << 8) >> 8 && !*(_DWORD *)(a3 + 8)) {
                return v3;
              }
              goto LABEL_110;
            case 1u:
              double v61 = vabdd_f64(*(double *)v3, (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8));
LABEL_88:
              if (v61 < 0.0000005) {
                return v3;
              }
              goto LABEL_110;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              if (((*(void *)a3 ^ *(void *)v3) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v3 + 2) == *(_DWORD *)(a3 + 8))
              {
                return v3;
              }
              goto LABEL_110;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v19 = v3[12];
          if (v19 < 7 || v19 - 8 < 2) {
            goto LABEL_110;
          }
          if (v19 != 7) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return v3;
        case 8:
          unsigned int v20 = v3[12];
          if (v20 < 8) {
            goto LABEL_110;
          }
          if (v20 == 8)
          {
            if (turi::image_type::operator==(*(void *)v3 + 8, *(void *)a3 + 8)) {
              return v3;
            }
          }
          else if (v20 != 9)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_110;
        case 9:
          unsigned int v21 = v3[12];
          if (v21 < 9) {
            goto LABEL_110;
          }
          if (v21 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v22 = *(double *)a3;
          double v23 = *(void **)v3;
          if (*(void *)a3 == *(void *)v3) {
            return v3;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v23 + 1), *(void *)&v22 + 8)) {
            goto LABEL_110;
          }
          uint64_t v25 = (char *)v23[3];
          uint64_t v24 = (char *)v23[4];
          uint64_t v26 = v24 - v25;
          if (v24 == v25) {
            return v3;
          }
          if (!v23[1]) {
            return v3;
          }
          uint64_t v27 = 1;
          do
          {
            uint64_t v28 = *(void *)v25;
            v25 += 8;
            v27 *= v28;
          }
          while (v25 != v24);
          if (!v27) {
            return v3;
          }
          uint64_t v68 = 0;
          std::vector<unsigned long>::vector(&v69, v26 >> 3, &v68);
          long long v29 = v69;
          long long v30 = v70;
          uint64_t v31 = **(void **)(*(void *)&v22 + 8);
          uint64_t v32 = (char *)v70 - (char *)v69;
          unint64_t v33 = v70 - v69;
          unint64_t v34 = v33 - 1;
          if (v33 <= 1) {
            uint64_t v35 = 1;
          }
          else {
            uint64_t v35 = v70 - v69;
          }
          do
          {
            if (v30 == v29)
            {
              uint64_t v43 = 0;
              double v44 = *(double *)(*(void *)v23[1] + 8 * v23[9]);
            }
            else
            {
              uint64_t v36 = 0;
              double v37 = (uint64_t *)v23[6];
              long long v38 = v29;
              uint64_t v39 = v35;
              do
              {
                uint64_t v41 = *v38++;
                uint64_t v40 = v41;
                uint64_t v42 = *v37++;
                v36 += v42 * v40;
                --v39;
              }
              while (v39);
              uint64_t v43 = 0;
              double v44 = *(double *)(*(void *)v23[1] + 8 * (v23[9] + v36));
              uint64_t v45 = *(uint64_t **)(*(void *)&v22 + 48);
              long long v46 = v29;
              uint64_t v47 = v35;
              do
              {
                uint64_t v49 = *v46++;
                uint64_t v48 = v49;
                uint64_t v50 = *v45++;
                v43 += v50 * v48;
                --v47;
              }
              while (v47);
            }
            double v51 = *(double *)(v31 + 8 * (*(void *)(*(void *)&v22 + 72) + v43));
            if (v44 != v51) {
              break;
            }
            uint64_t v52 = v33;
            unint64_t v53 = v33 - 1;
            if (v32 < 1) {
              goto LABEL_68;
            }
            uint64_t v54 = v23[3];
            unint64_t v55 = v29[v34] + 1;
            v29[v34] = v55;
            unint64_t v56 = (v32 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v57 = v33 - 1;
            if (v55 < *(void *)(v54 + 8 * v34))
            {
              uint64_t v52 = 1;
              unint64_t v53 = v33 - 1;
LABEL_68:
              if ((v53 & 0x8000000000000000) != 0) {
                break;
              }
              continue;
            }
            do
            {
              *(uint64_t *)((char *)v29 + v56 + 8) = 0;
              if (v57 <= 0)
              {
                atomic_ullong v70 = v29;
                operator delete(v29);
                return v3;
              }
              --v57;
              unint64_t v58 = *(uint64_t *)((char *)v29 + v56) + 1;
              *(uint64_t *)((char *)v29 + v56) = v58;
              unint64_t v59 = *(void *)(v54 + v56);
              v56 -= 8;
            }
            while (v58 >= v59);
            uint64_t v52 = 1;
            if (v57 < 0) {
              break;
            }
          }
          while (v52);
          if (v29)
          {
            atomic_ullong v70 = v29;
            operator delete(v29);
          }
          if (v44 == v51) {
            return v3;
          }
          goto LABEL_110;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      break;
    }
  }
  return v3;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FD58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FD58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a1[12] == 5)
  {
    uint64_t v4 = *(unsigned __int8 **)(*(void *)a1 + 8);
    for (unint64_t i = *(unsigned __int8 **)(*(void *)a1 + 16); v4 != i; v4 += 32)
    {
      switch(*(unsigned char *)(a2 + 12))
      {
        case 0:
          switch(v4[12])
          {
            case 0u:
              if (*(void *)v4 == *(void *)a2) {
                goto LABEL_114;
              }
              continue;
            case 1u:
              double v7 = *(double *)v4;
              uint64_t v8 = *(void *)a2;
              goto LABEL_76;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              if (*(void *)a2 == (uint64_t)(*(void *)v4 << 8) >> 8 && !*((_DWORD *)v4 + 2)) {
                goto LABEL_114;
              }
              continue;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(v4[12])
          {
            case 0u:
              double v7 = *(double *)a2;
              uint64_t v8 = *(void *)v4;
LABEL_76:
              double v59 = (double)v8;
              goto LABEL_81;
            case 1u:
              double v7 = *(double *)v4;
              double v59 = *(double *)a2;
LABEL_81:
              if (v7 == v59) {
                goto LABEL_114;
              }
              continue;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              double v60 = vabdd_f64((double)*((int *)v4 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v4 << 8) >> 8), *(double *)a2);
              goto LABEL_85;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v9 = v4[12];
          if (v9 - 3 < 7 || v9 < 2) {
            continue;
          }
          if (v9 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v11 = *(double *)v4;
          size_t v12 = *(char *)(*(void *)v4 + 31) < 0
              ? *(void *)(*(void *)&v11 + 16)
              : *(unsigned __int8 *)(*(void *)v4 + 31);
          double v61 = *(double *)a2;
          uint64_t v62 = *(char *)(*(void *)a2 + 31) < 0
              ? *(void *)(*(void *)&v61 + 16)
              : *(unsigned __int8 *)(*(void *)a2 + 31);
          if (v12 != v62) {
            continue;
          }
          uint64_t v63 = (unsigned __int8 *)(*(void *)&v11 + 8);
          if ((*(unsigned char *)(*(void *)v4 + 31) & 0x80) != 0) {
            uint64_t v63 = *(unsigned __int8 **)v63;
          }
          uint64_t v64 = (unsigned __int8 *)(*(void *)&v61 + 8);
          if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
            uint64_t v64 = *(unsigned __int8 **)v64;
          }
          if ((*(unsigned char *)(*(void *)v4 + 31) & 0x80) != 0)
          {
            if (!memcmp(v63, v64, v12)) {
              goto LABEL_114;
            }
          }
          else
          {
            if (!v12) {
              goto LABEL_114;
            }
            while (*v63 == *v64)
            {
              ++v63;
              ++v64;
              if (!--v12) {
                goto LABEL_114;
              }
            }
          }
          continue;
        case 3:
          unsigned int v13 = v4[12];
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            continue;
          }
          int64_t v14 = *(double **)(*(void *)v4 + 8);
          unint64_t v15 = *(double **)(*(void *)v4 + 16);
          unint64_t v16 = v15 - v14;
          unsigned int v17 = *(double **)(*(void *)a2 + 8);
          if (v16 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v17) >> 3) {
            continue;
          }
          if (v15 == v14) {
            goto LABEL_114;
          }
          if (v16 <= 1) {
            unint64_t v16 = 1;
          }
          while (*v14 == *v17)
          {
            ++v17;
            ++v14;
            if (!--v16) {
              goto LABEL_114;
            }
          }
          continue;
        case 4:
          unsigned int v18 = v4[12];
          if (v18 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v18 == 4
            && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v65, (uint64_t *)(*(void *)v4 + 8), (void *)(*(void *)a2 + 8)) & 1) != 0)
          {
            goto LABEL_114;
          }
          continue;
        case 5:
          unsigned int v19 = v4[12];
          if (v19 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v19 == 5
            && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v65, (uint64_t **)(*(void *)v4 + 8), (uint64_t **)(*(void *)a2 + 8)))
          {
            goto LABEL_114;
          }
          continue;
        case 6:
          switch(v4[12])
          {
            case 0u:
              if (*(void *)v4 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8)) {
                goto LABEL_114;
              }
              continue;
            case 1u:
              double v60 = vabdd_f64(*(double *)v4, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
LABEL_85:
              if (v60 < 0.0000005) {
                goto LABEL_114;
              }
              continue;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              if (((*(void *)a2 ^ *(void *)v4) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v4 + 2) == *(_DWORD *)(a2 + 8))
              {
                goto LABEL_114;
              }
              continue;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v20 = v4[12];
          if (v20 < 7 || v20 - 8 < 2) {
            continue;
          }
          if (v20 != 7) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_114;
        case 8:
          unsigned int v21 = v4[12];
          if (v21 < 8) {
            continue;
          }
          if (v21 == 8)
          {
            if (turi::image_type::operator==(*(void *)v4 + 8, *(void *)a2 + 8)) {
              goto LABEL_114;
            }
          }
          else if (v21 != 9)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          continue;
        case 9:
          unsigned int v22 = v4[12];
          if (v22 < 9) {
            continue;
          }
          if (v22 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v23 = *(double *)a2;
          uint64_t v24 = *(void **)v4;
          if (*(void *)a2 == *(void *)v4) {
            goto LABEL_114;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v24 + 1), *(void *)&v23 + 8)) {
            continue;
          }
          uint64_t v26 = (char *)v24[3];
          uint64_t v25 = (char *)v24[4];
          uint64_t v27 = v25 - v26;
          if (v25 == v26) {
            goto LABEL_114;
          }
          if (!v24[1]) {
            goto LABEL_114;
          }
          uint64_t v28 = 1;
          do
          {
            uint64_t v29 = *(void *)v26;
            v26 += 8;
            v28 *= v29;
          }
          while (v26 != v25);
          if (!v28) {
            goto LABEL_114;
          }
          uint64_t v66 = 0;
          std::vector<unsigned long>::vector(&v67, v27 >> 3, &v66);
          long long v30 = v67;
          uint64_t v31 = v68;
          uint64_t v32 = **(void **)(*(void *)&v23 + 8);
          uint64_t v33 = (char *)v68 - (char *)v67;
          unint64_t v34 = v68 - v67;
          unint64_t v35 = v34 - 1;
          if (v34 <= 1) {
            uint64_t v36 = 1;
          }
          else {
            uint64_t v36 = v68 - v67;
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        if (v31 == v30)
        {
          uint64_t v44 = 0;
          double v45 = *(double *)(*(void *)v24[1] + 8 * v24[9]);
        }
        else
        {
          uint64_t v37 = 0;
          long long v38 = (uint64_t *)v24[6];
          uint64_t v39 = v30;
          uint64_t v40 = v36;
          do
          {
            uint64_t v42 = *v39++;
            uint64_t v41 = v42;
            uint64_t v43 = *v38++;
            v37 += v43 * v41;
            --v40;
          }
          while (v40);
          uint64_t v44 = 0;
          double v45 = *(double *)(*(void *)v24[1] + 8 * (v24[9] + v37));
          long long v46 = *(uint64_t **)(*(void *)&v23 + 48);
          uint64_t v47 = v30;
          uint64_t v48 = v36;
          do
          {
            uint64_t v50 = *v47++;
            uint64_t v49 = v50;
            uint64_t v51 = *v46++;
            v44 += v51 * v49;
            --v48;
          }
          while (v48);
        }
        if (v45 != *(double *)(v32 + 8 * (*(void *)(*(void *)&v23 + 72) + v44))) {
          break;
        }
        uint64_t v52 = v34;
        uint64_t v53 = v34 - 1;
        if (v33 >= 1)
        {
          uint64_t v54 = v24[3];
          unint64_t v55 = v30[v35] + 1;
          v30[v35] = v55;
          unint64_t v56 = (v33 & 0xFFFFFFFFFFFFFFF8) - 16;
          uint64_t v53 = v34 - 1;
          if (v55 >= *(void *)(v54 + 8 * v35))
          {
            while (1)
            {
              *(uint64_t *)((char *)v30 + v56 + 8) = 0;
              if (v53 <= 0) {
                break;
              }
              --v53;
              unint64_t v57 = *(uint64_t *)((char *)v30 + v56) + 1;
              *(uint64_t *)((char *)v30 + v56) = v57;
              unint64_t v58 = *(void *)(v54 + v56);
              v56 -= 8;
              if (v57 < v58) {
                goto LABEL_70;
              }
            }
LABEL_113:
            uint64_t v68 = v30;
            operator delete(v30);
            goto LABEL_114;
          }
          uint64_t v52 = 1;
          uint64_t v53 = v34 - 1;
        }
        if (!v52) {
          goto LABEL_112;
        }
LABEL_70:
        if (v53 < 0)
        {
LABEL_112:
          if (v30) {
            goto LABEL_113;
          }
LABEL_114:
          *(unsigned char *)(a3 + 12) = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(void *)a3 = 1;
          return;
        }
      }
      if (v30)
      {
        uint64_t v68 = v30;
        operator delete(v30);
      }
    }
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FDD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FDD8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::vector<double>::vector(&v9, (uint64_t)(*(void *)(*a1 + 16) - *(void *)(*a1 + 8)) >> 3);
  uint64_t v4 = *(double **)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 3;
    double v7 = (double *)v9;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      double v8 = *v4++;
      *v7++ = fabs(v8);
      --v6;
    }
    while (v6);
  }
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 3;
  operator new();
}

void sub_2241BC328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v13 = v12;
  MEMORY[0x22A614FA0](v13, 0x1080C409938AC02);
  if (atomic_fetch_add(v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v15 = *v10;
    if (*v10)
    {
      unint64_t v16 = *(void **)(v15 + 8);
      if (v16)
      {
        *(void *)(v15 + 16) = v16;
        operator delete(v16);
      }
      MEMORY[0x22A614FA0](v15, 0x1080C409938AC02);
    }
    *double v10 = 0;
  }
  *double v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((unsigned char *)v10 + 12) = 0;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FE58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FE58;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  BOOL v3 = *a1 < 0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v3) {
    uint64_t v2 = -v2;
  }
  *(unsigned char *)(a2 + 12) = 0;
  *(void *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FED8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FED8;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  double v3 = 0.0;
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      double v3 = (double)*(uint64_t *)a1;
      break;
    case 1:
      double v3 = *(double *)a1;
      break;
    case 2:
      uint64_t v5 = *(void *)a1;
      unint64_t v6 = (char **)(*(void *)a1 + 8);
      size_t __idx = 0;
      double v7 = (char *)v6;
      if (*(char *)(v5 + 31) < 0) {
        double v7 = *v6;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      double v8 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v22[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v9 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unsigned int v19 = std::string::append(&v25, " cannot be interpreted as a float");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v22[0] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v16 = v8;
      double v3 = v16;
      break;
    case 3:
      uint64_t v4 = *(void *)a1;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v10 = *(void *)a1;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      break;
    case 5:
      uint64_t v11 = *(void *)a1;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      break;
    case 6:
      double v3 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = *(atomic_uint **)(*(void *)a1 + 16);
      __p[0] = *(void **)(*(void *)a1 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v23 = *(_OWORD *)(v12 + 40);
      long long v24 = v15;
      *(_OWORD *)unsigned int v22 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v23 + 1))
      {
        *(void *)&long long v24 = *((void *)&v23 + 1);
        operator delete(*((void **)&v23 + 1));
      }
      if (v22[0])
      {
        v22[1] = v22[0];
        operator delete(v22[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double result = fabs(v3);
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  *(double *)a2 = result;
  return result;
}

void sub_2241BC850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D76FF58;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FF58;
}

BOOL std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<W0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v5 = *(void *)a1 < *(void *)a2;
          goto LABEL_27;
        case 1:
          double v18 = *(double *)a1;
          double v19 = (double)*(uint64_t *)a2;
          goto LABEL_37;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          BOOL v17 = *(void *)a2 <= (uint64_t)(*(void *)a1 << 8) >> 8;
          goto LABEL_43;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v17 = *(double *)a2 <= (double)*(uint64_t *)a1;
          goto LABEL_43;
        case 1:
          double v18 = *(double *)a1;
          double v19 = *(double *)a2;
LABEL_37:
          BOOL v20 = v18 < v19;
          goto LABEL_39;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          BOOL v20 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8) < *(double *)a2;
LABEL_39:
          BOOL result = v20;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_33;
    case 2:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 2:
          double v6 = *(double *)a1;
          char v7 = *(unsigned char *)(*(void *)a2 + 31);
          if (*(char *)(*(void *)a1 + 31) < 0)
          {
            double v8 = *(const void **)(*(void *)&v6 + 8);
            size_t v9 = *(void *)(*(void *)&v6 + 16);
          }
          else
          {
            double v8 = (const void *)(*(void *)&v6 + 8);
            size_t v9 = *(unsigned __int8 *)(*(void *)a1 + 31);
          }
          if (v7 >= 0) {
            size_t v22 = *(unsigned __int8 *)(*(void *)a2 + 31);
          }
          else {
            size_t v22 = *(void *)(*(void *)a2 + 16);
          }
          if (v7 >= 0) {
            long long v23 = (const void *)(*(void *)a2 + 8);
          }
          else {
            long long v23 = *(const void **)(*(void *)a2 + 8);
          }
          if (v22 >= v9) {
            size_t v24 = v9;
          }
          else {
            size_t v24 = v22;
          }
          int v25 = memcmp(v8, v23, v24);
          if (v25) {
            BOOL result = v25 < 0;
          }
          else {
            BOOL result = v9 < v22;
          }
          goto LABEL_33;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 3:
          uint64_t v10 = *(double **)(*(void *)a1 + 8);
          uint64_t v11 = *(double **)(*(void *)a2 + 8);
          unint64_t v12 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v11) >> 3;
          unint64_t v13 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v10) >> 3;
          if (*(double **)(*(void *)a1 + 16) == v10) {
            goto LABEL_17;
          }
          if (v13 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v10) >> 3;
          }
          uint64_t v15 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v11) >> 3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 4:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 4:
          BOOL result = turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v26, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
          goto LABEL_33;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 6:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v5 = *(void *)a1 < (uint64_t)(*(void *)a2 << 8) >> 8;
          goto LABEL_27;
        case 1:
          BOOL v17 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) <= *(double *)a1;
LABEL_43:
          BOOL result = !v17;
          goto LABEL_33;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          uint64_t v21 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v21 < (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_47;
          }
          if (v21 != (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_32;
          }
          BOOL v5 = a1[2] < *(_DWORD *)(a2 + 8);
LABEL_27:
          BOOL result = v5;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_33;
    case 7:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 8:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 9:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_31:
      turi::flexible_type_fail(0);
      goto LABEL_32;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (!v15 || *v10 > *v11)
    {
LABEL_32:
      BOOL result = 0;
      goto LABEL_33;
    }
    if (*v10 < *v11) {
      break;
    }
    ++v11;
    ++v10;
    --v15;
    if (!--v14)
    {
LABEL_17:
      BOOL result = v13 < v12;
      goto LABEL_33;
    }
  }
LABEL_47:
  BOOL result = 1;
LABEL_33:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D76FFD8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D76FFD8;
}

BOOL std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<W0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v5 = *(void *)a1 <= *(void *)a2;
          goto LABEL_52;
        case 1:
          double v22 = *(double *)a1;
          double v23 = (double)*(uint64_t *)a2;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          BOOL result = *(void *)a2 < (uint64_t)(*(void *)a1 << 8) >> 8;
          goto LABEL_46;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v21 = *(double *)a2 < (double)*(uint64_t *)a1;
          goto LABEL_56;
        case 1:
          double v22 = *(double *)a1;
          double v23 = *(double *)a2;
LABEL_50:
          BOOL v5 = v22 <= v23;
          goto LABEL_52;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          BOOL v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8) <= *(double *)a2;
          goto LABEL_52;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 2:
          int v6 = *(char *)(*(void *)a1 + 31);
          int v7 = *(char *)(*(void *)a2 + 31);
          if (v7 >= 0) {
            size_t v8 = *(unsigned __int8 *)(*(void *)a2 + 31);
          }
          else {
            size_t v8 = *(void *)(*(void *)a2 + 16);
          }
          if (v7 >= 0) {
            size_t v9 = (const void *)(*(void *)a2 + 8);
          }
          else {
            size_t v9 = *(const void **)(*(void *)a2 + 8);
          }
          if (v6 >= 0) {
            size_t v10 = *(unsigned __int8 *)(*(void *)a1 + 31);
          }
          else {
            size_t v10 = *(void *)(*(void *)a1 + 16);
          }
          if (v6 >= 0) {
            uint64_t v11 = (const void *)(*(void *)a1 + 8);
          }
          else {
            uint64_t v11 = *(const void **)(*(void *)a1 + 8);
          }
          if (v10 >= v8) {
            size_t v12 = v8;
          }
          else {
            size_t v12 = v10;
          }
          int v13 = memcmp(v9, v11, v12);
          if (v13) {
            BOOL result = v13 < 0;
          }
          else {
            BOOL result = v8 < v10;
          }
          goto LABEL_46;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 3:
          uint64_t v15 = *(double **)(*(void *)a1 + 8);
          float v16 = *(double **)(*(void *)a2 + 8);
          unint64_t v17 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v16) >> 3;
          unint64_t v18 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v15) >> 3;
          if (*(double **)(*(void *)a1 + 16) == v15) {
            goto LABEL_33;
          }
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v15) >> 3;
          }
          uint64_t v20 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v16) >> 3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 4:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 4:
          BOOL result = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v25, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
          goto LABEL_46;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_44;
    case 6:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
          BOOL v5 = *(void *)a1 <= (uint64_t)(*(void *)a2 << 8) >> 8;
          goto LABEL_52;
        case 1:
          BOOL v21 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) < *(double *)a1;
LABEL_56:
          BOOL result = v21;
          goto LABEL_46;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          uint64_t v24 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v24 > (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_60;
          }
          if (v24 != (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_45;
          }
          BOOL v5 = a1[2] <= *(_DWORD *)(a2 + 8);
LABEL_52:
          BOOL result = !v5;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_46;
    case 7:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_44;
    case 8:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_44;
    case 9:
      switch(*((unsigned char *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_44:
      turi::flexible_type_fail(0);
      goto LABEL_45;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (v20 && *v15 <= *v16)
  {
    if (*v15 < *v16)
    {
LABEL_45:
      BOOL result = 0;
      goto LABEL_46;
    }
    ++v16;
    ++v15;
    --v20;
    if (!--v19)
    {
LABEL_33:
      BOOL result = v18 > v17;
      goto LABEL_46;
    }
  }
LABEL_60:
  BOOL result = 1;
LABEL_46:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D770058;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770058;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 < *(void *)a2) {
            goto LABEL_163;
          }
          goto LABEL_44;
        case 1u:
          double v48 = *(double *)a1;
          double v49 = (double)*(uint64_t *)a2;
          goto LABEL_98;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          if (*(void *)a2 > (uint64_t)(*(void *)a1 << 8) >> 8) {
            goto LABEL_163;
          }
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          if (*(double *)a2 > (double)*(uint64_t *)a1) {
            goto LABEL_163;
          }
          goto LABEL_44;
        case 1u:
          double v48 = *(double *)a1;
          double v49 = *(double *)a2;
LABEL_98:
          if (v48 < v49) {
            goto LABEL_163;
          }
          goto LABEL_44;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          if ((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8) < *(double *)a2) {
            goto LABEL_163;
          }
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v7 = a1[12];
      BOOL v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8) {
        goto LABEL_43;
      }
      if (v7 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v9 = *(double *)a1;
      char v10 = *(unsigned char *)(*(void *)a2 + 31);
      if (*(char *)(*(void *)a1 + 31) < 0)
      {
        uint64_t v11 = *(const void **)(*(void *)&v9 + 8);
        size_t v12 = *(void *)(*(void *)&v9 + 16);
      }
      else
      {
        uint64_t v11 = (const void *)(*(void *)&v9 + 8);
        size_t v12 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      if (v10 >= 0) {
        size_t v93 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
      else {
        size_t v93 = *(void *)(*(void *)a2 + 16);
      }
      if (v10 >= 0) {
        atomic_ullong v94 = (const void *)(*(void *)a2 + 8);
      }
      else {
        atomic_ullong v94 = *(const void **)(*(void *)a2 + 8);
      }
      if (v93 >= v12) {
        size_t v95 = v12;
      }
      else {
        size_t v95 = v93;
      }
      int v96 = memcmp(v11, v94, v95);
      BOOL v97 = v12 < v93;
      if (v96) {
        BOOL v97 = v96 < 0;
      }
      if (v97) {
        goto LABEL_163;
      }
      goto LABEL_44;
    case 3:
      unsigned int v13 = a1[12];
      if (v13 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v13 != 3) {
        goto LABEL_43;
      }
      uint64_t v14 = *(double **)(*(void *)a1 + 8);
      uint64_t v15 = *(double **)(*(void *)a2 + 8);
      unint64_t v16 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v15) >> 3;
      unint64_t v17 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v14) >> 3;
      if (*(double **)(*(void *)a1 + 16) == v14) {
        goto LABEL_27;
      }
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v14) >> 3;
      }
      uint64_t v19 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v15) >> 3;
      break;
    case 4:
      unsigned int v20 = a1[12];
      if (v20 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v20 != 4) {
        goto LABEL_43;
      }
      if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v108, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8)))
      {
        goto LABEL_163;
      }
      goto LABEL_44;
    case 5:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_43;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 < (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_163;
          }
          goto LABEL_44;
        case 1u:
          if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) > *(double *)a1) {
            goto LABEL_163;
          }
          goto LABEL_44;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          uint64_t v50 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v50 < (uint64_t)(*(void *)a2 << 8) >> 8
            || v50 == (uint64_t)(*(void *)a2 << 8) >> 8 && *((_DWORD *)a1 + 2) < *(_DWORD *)(a2 + 8))
          {
            goto LABEL_163;
          }
          goto LABEL_44;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_43;
    case 8:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_43;
    case 9:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_43:
      turi::flexible_type_fail(0);
      goto LABEL_44;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (v19 && *v14 <= *v15)
  {
    if (*v14 < *v15) {
      goto LABEL_163;
    }
    ++v15;
    ++v14;
    --v19;
    if (!--v18)
    {
LABEL_27:
      if (v17 < v16)
      {
LABEL_163:
        BOOL v21 = 1;
        goto LABEL_93;
      }
      break;
    }
  }
LABEL_44:
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      BOOL v21 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v22 = *(void *)a1 == *(void *)a2;
          goto LABEL_81;
        case 1u:
          double v23 = *(double *)a1;
          uint64_t v24 = *(void *)a2;
          goto LABEL_139;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          BOOL v22 = *(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v21 = 0;
      switch(a1[12])
      {
        case 0u:
          double v23 = *(double *)a2;
          uint64_t v24 = *(void *)a1;
LABEL_139:
          BOOL v22 = v23 == (double)v24;
          goto LABEL_81;
        case 1u:
          BOOL v21 = *(double *)a1 == *(double *)a2;
          goto LABEL_93;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          double v91 = *(double *)a2;
          double v92 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          goto LABEL_146;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v25 = a1[12];
      if (v25 - 3 < 7 || v25 < 2) {
        goto LABEL_92;
      }
      if (v25 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v27 = *(double *)a2;
      double v28 = *(double *)a1;
      size_t v29 = *(char *)(*(void *)a1 + 31) < 0
          ? *(void *)(*(void *)&v28 + 16)
          : *(unsigned __int8 *)(*(void *)a1 + 31);
      uint64_t v98 = *(char *)(*(void *)&v27 + 31) < 0
          ? *(void *)(*(void *)&v27 + 16)
          : *(unsigned __int8 *)(*(void *)&v27 + 31);
      if (v29 != v98) {
        goto LABEL_92;
      }
      uint64_t v99 = (void *)(*(void *)&v28 + 8);
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0) {
        uint64_t v99 = (void *)*v99;
      }
      uint64_t v100 = (void *)(*(void *)&v27 + 8);
      if ((*(unsigned char *)(*(void *)&v27 + 31) & 0x80) != 0) {
        uint64_t v100 = (void *)*v100;
      }
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0)
      {
        BOOL v22 = memcmp(v99, v100, v29) == 0;
LABEL_81:
        BOOL v21 = v22;
      }
      else
      {
        if (!v29) {
          goto LABEL_163;
        }
        size_t v101 = v29 - 1;
        do
        {
          int v103 = *(unsigned __int8 *)v99;
          uint64_t v99 = (void *)((char *)v99 + 1);
          int v102 = v103;
          int v105 = *(unsigned __int8 *)v100;
          uint64_t v100 = (void *)((char *)v100 + 1);
          int v104 = v105;
          BOOL v8 = v101-- != 0;
          char v106 = v8;
          BOOL v21 = v102 == v104;
        }
        while (v102 == v104 && (v106 & 1) != 0);
      }
      goto LABEL_93;
    case 3:
      unsigned int v30 = a1[12];
      if (v30 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v30 != 3) {
        goto LABEL_92;
      }
      uint64_t v32 = *(double **)(*(void *)a1 + 8);
      uint64_t v31 = *(double **)(*(void *)a1 + 16);
      unint64_t v33 = v31 - v32;
      unint64_t v34 = *(double **)(*(void *)a2 + 8);
      if (v33 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v34) >> 3) {
        goto LABEL_92;
      }
      if (v31 == v32) {
        goto LABEL_163;
      }
      if (v33 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v31 - v32;
      }
      if (*v32 != *v34) {
        goto LABEL_92;
      }
      unint64_t v36 = 0;
      uint64_t v37 = v34 + 1;
      long long v38 = v32 + 1;
      while (v35 - 1 != v36)
      {
        double v39 = v38[v36];
        double v40 = v37[v36++];
        if (v39 != v40) {
          goto LABEL_184;
        }
      }
      unint64_t v36 = v35;
LABEL_184:
      BOOL v21 = v36 >= v33;
      goto LABEL_93;
    case 4:
      unsigned int v41 = a1[12];
      if (v41 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v41 != 4) {
        goto LABEL_92;
      }
      int v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v108, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
      goto LABEL_90;
    case 5:
      unsigned int v43 = a1[12];
      if (v43 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v43 != 5) {
        goto LABEL_92;
      }
      int v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v108, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)a2 + 8));
      goto LABEL_90;
    case 6:
      BOOL v21 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v22 = *(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_81;
        case 1u:
          double v92 = *(double *)a1;
          double v91 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_146:
          BOOL v21 = vabdd_f64(v92, v91) < 0.0000005;
          goto LABEL_93;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          BOOL v22 = ((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0
             && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v44 = a1[12];
      if (v44 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      BOOL v22 = v44 == 7;
      goto LABEL_81;
    case 8:
      unsigned int v45 = a1[12];
      if (v45 < 8 || v45 == 9) {
        goto LABEL_92;
      }
      if (v45 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v42 = turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8);
LABEL_90:
      BOOL v21 = v42;
      goto LABEL_93;
    case 9:
      unsigned int v47 = a1[12];
      if (v47 < 9) {
        goto LABEL_92;
      }
      if (v47 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v51 = *(double *)a2;
      uint64_t v52 = *(void **)a1;
      if (*(void **)a2 == v52) {
        goto LABEL_163;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v52 + 1), *(void *)&v51 + 8))
      {
LABEL_92:
        BOOL v21 = 0;
        goto LABEL_93;
      }
      uint64_t v54 = (char *)v52[3];
      uint64_t v53 = (char *)v52[4];
      uint64_t v55 = v53 - v54;
      if (v53 == v54) {
        goto LABEL_163;
      }
      if (!v52[1]) {
        goto LABEL_163;
      }
      uint64_t v56 = 1;
      do
      {
        uint64_t v57 = *(void *)v54;
        v54 += 8;
        v56 *= v57;
      }
      while (v54 != v53);
      if (!v56) {
        goto LABEL_163;
      }
      uint64_t v107 = 0;
      std::vector<unsigned long>::vector(&v108, v55 >> 3, &v107);
      unint64_t v58 = v108;
      double v59 = v109;
      uint64_t v60 = **(void **)(*(void *)&v51 + 8);
      uint64_t v61 = (char *)v109 - (char *)v108;
      unint64_t v62 = v109 - v108;
      unint64_t v63 = v62 - 1;
      if (v62 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = v109 - v108;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v59 == v58)
    {
      uint64_t v72 = 0;
      double v73 = *(double *)(*(void *)v52[1] + 8 * v52[9]);
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t v66 = (uint64_t *)v52[6];
      char v67 = v58;
      uint64_t v68 = v64;
      do
      {
        uint64_t v70 = *v67++;
        uint64_t v69 = v70;
        uint64_t v71 = *v66++;
        v65 += v71 * v69;
        --v68;
      }
      while (v68);
      uint64_t v72 = 0;
      double v73 = *(double *)(*(void *)v52[1] + 8 * (v52[9] + v65));
      long long v74 = *(uint64_t **)(*(void *)&v51 + 48);
      uint64_t v75 = v58;
      uint64_t v76 = v64;
      do
      {
        uint64_t v78 = *v75++;
        uint64_t v77 = v78;
        uint64_t v79 = *v74++;
        v72 += v79 * v77;
        --v76;
      }
      while (v76);
    }
    double v80 = *(double *)(v60 + 8 * (*(void *)(*(void *)&v51 + 72) + v72));
    BOOL v21 = v73 == v80;
    if (v73 != v80) {
      break;
    }
    uint64_t v81 = v62;
    unint64_t v82 = v62 - 1;
    if (v61 >= 1)
    {
      uint64_t v83 = v52[3];
      unint64_t v84 = v58[v63] + 1;
      v58[v63] = v84;
      if (v84 >= *(void *)(v83 + 8 * v63))
      {
        uint64_t v85 = v83 - 16;
        unint64_t v86 = v62;
        uint64_t v87 = (unint64_t *)((char *)v58 + (v61 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          unint64_t v88 = v86 - 1;
          v87[1] = 0;
          if ((uint64_t)(v86 - 1) <= 0) {
            break;
          }
          unint64_t v89 = *v87 + 1;
          *v87-- = v89;
          unint64_t v90 = *(void *)(v85 + 8 * v86--);
          if (v89 < v90)
          {
            unint64_t v82 = v88 - 1;
            uint64_t v81 = 1;
            goto LABEL_135;
          }
        }
        BOOL v21 = 1;
        break;
      }
      uint64_t v81 = 1;
      unint64_t v82 = v62 - 1;
    }
LABEL_135:
    ;
  }
  while (v81 && (v82 & 0x8000000000000000) == 0);
  if (v58)
  {
    unint64_t v109 = v58;
    operator delete(v58);
  }
LABEL_93:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v21;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D7700D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7700D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 > *(void *)a2) {
            goto LABEL_181;
          }
          goto LABEL_61;
        case 1u:
          double v51 = *(double *)a1;
          double v52 = (double)*(uint64_t *)a2;
          goto LABEL_111;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          if (*(void *)a2 < (uint64_t)(*(void *)a1 << 8) >> 8) {
            goto LABEL_181;
          }
          goto LABEL_61;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          if (*(double *)a2 < (double)*(uint64_t *)a1) {
            goto LABEL_181;
          }
          goto LABEL_61;
        case 1u:
          double v51 = *(double *)a1;
          double v52 = *(double *)a2;
LABEL_111:
          if (v51 > v52) {
            goto LABEL_181;
          }
          goto LABEL_61;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          if ((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8) > *(double *)a2) {
            goto LABEL_181;
          }
          goto LABEL_61;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v7 = a1[12];
      BOOL v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8) {
        goto LABEL_60;
      }
      if (v7 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v9 = *(char *)(*(void *)a1 + 31);
      int v10 = *(char *)(*(void *)a2 + 31);
      if (v10 >= 0) {
        size_t v11 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
      else {
        size_t v11 = *(void *)(*(void *)a2 + 16);
      }
      if (v10 >= 0) {
        size_t v12 = (const void *)(*(void *)a2 + 8);
      }
      else {
        size_t v12 = *(const void **)(*(void *)a2 + 8);
      }
      if (v9 >= 0) {
        size_t v13 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      else {
        size_t v13 = *(void *)(*(void *)a1 + 16);
      }
      if (v9 >= 0) {
        uint64_t v14 = (const void *)(*(void *)a1 + 8);
      }
      else {
        uint64_t v14 = *(const void **)(*(void *)a1 + 8);
      }
      if (v13 >= v11) {
        size_t v15 = v11;
      }
      else {
        size_t v15 = v13;
      }
      int v16 = memcmp(v12, v14, v15);
      BOOL v17 = v11 < v13;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (v17) {
        goto LABEL_181;
      }
      goto LABEL_61;
    case 3:
      unsigned int v18 = a1[12];
      if (v18 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v18 != 3) {
        goto LABEL_60;
      }
      uint64_t v19 = *(double **)(*(void *)a1 + 8);
      unsigned int v20 = *(double **)(*(void *)a2 + 8);
      unint64_t v21 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v20) >> 3;
      unint64_t v22 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v19) >> 3;
      if (*(double **)(*(void *)a1 + 16) == v19) {
        goto LABEL_44;
      }
      if (v22 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v19) >> 3;
      }
      uint64_t v24 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v20) >> 3;
      break;
    case 4:
      unsigned int v25 = a1[12];
      if (v25 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v25 != 4) {
        goto LABEL_60;
      }
      if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v106, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8)))
      {
        goto LABEL_181;
      }
      goto LABEL_61;
    case 5:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_60;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 > (uint64_t)(*(void *)a2 << 8) >> 8) {
            goto LABEL_181;
          }
          goto LABEL_61;
        case 1u:
          if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) < *(double *)a1) {
            goto LABEL_181;
          }
          goto LABEL_61;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          uint64_t v53 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v53 > (uint64_t)(*(void *)a2 << 8) >> 8
            || v53 == (uint64_t)(*(void *)a2 << 8) >> 8 && *((_DWORD *)a1 + 2) > *(_DWORD *)(a2 + 8))
          {
            goto LABEL_181;
          }
          goto LABEL_61;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_60;
    case 8:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_60;
    case 9:
      if (a1[12] >= 0xAu) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_60:
      turi::flexible_type_fail(0);
      goto LABEL_61;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (!v24 || *v19 > *v20) {
      goto LABEL_181;
    }
    if (*v19 < *v20) {
      goto LABEL_61;
    }
    ++v20;
    ++v19;
    --v24;
    --v23;
  }
  while (v23);
LABEL_44:
  if (v22 > v21)
  {
LABEL_181:
    BOOL v26 = 1;
    goto LABEL_106;
  }
LABEL_61:
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      BOOL v26 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v27 = *(void *)a1 == *(void *)a2;
          goto LABEL_96;
        case 1u:
          double v28 = *(double *)a1;
          uint64_t v29 = *(void *)a2;
          goto LABEL_152;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          BOOL v27 = *(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_96;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v26 = 0;
      switch(a1[12])
      {
        case 0u:
          double v28 = *(double *)a2;
          uint64_t v29 = *(void *)a1;
LABEL_152:
          BOOL v27 = v28 == (double)v29;
          goto LABEL_96;
        case 1u:
          BOOL v26 = *(double *)a1 == *(double *)a2;
          goto LABEL_106;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          double v94 = *(double *)a2;
          double v95 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          goto LABEL_159;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      BOOL v26 = 0;
      unsigned int v30 = a1[12];
      if (v30 - 3 < 7 || v30 < 2) {
        goto LABEL_106;
      }
      if (v30 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v31 = *(double *)a2;
      double v32 = *(double *)a1;
      if (*(char *)(*(void *)a1 + 31) < 0) {
        size_t v33 = *(void *)(*(void *)&v32 + 16);
      }
      else {
        size_t v33 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      if (*(char *)(*(void *)&v31 + 31) < 0) {
        uint64_t v96 = *(void *)(*(void *)&v31 + 16);
      }
      else {
        uint64_t v96 = *(unsigned __int8 *)(*(void *)&v31 + 31);
      }
      if (v33 != v96) {
        goto LABEL_105;
      }
      BOOL v97 = (void *)(*(void *)&v32 + 8);
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0) {
        BOOL v97 = (void *)*v97;
      }
      uint64_t v98 = (void *)(*(void *)&v31 + 8);
      if ((*(unsigned char *)(*(void *)&v31 + 31) & 0x80) != 0) {
        uint64_t v98 = (void *)*v98;
      }
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0)
      {
        BOOL v27 = memcmp(v97, v98, v33) == 0;
LABEL_96:
        BOOL v26 = v27;
      }
      else
      {
        if (!v33) {
          goto LABEL_181;
        }
        size_t v99 = v33 - 1;
        do
        {
          int v101 = *(unsigned __int8 *)v97;
          BOOL v97 = (void *)((char *)v97 + 1);
          int v100 = v101;
          int v103 = *(unsigned __int8 *)v98;
          uint64_t v98 = (void *)((char *)v98 + 1);
          int v102 = v103;
          BOOL v8 = v99-- != 0;
          char v104 = v8;
          BOOL v26 = v100 == v102;
        }
        while (v100 == v102 && (v104 & 1) != 0);
      }
      goto LABEL_106;
    case 3:
      unsigned int v34 = a1[12];
      if (v34 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v34 != 3) {
        goto LABEL_105;
      }
      unint64_t v36 = *(double **)(*(void *)a1 + 8);
      uint64_t v35 = *(double **)(*(void *)a1 + 16);
      unint64_t v37 = v35 - v36;
      long long v38 = *(double **)(*(void *)a2 + 8);
      if (v37 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v38) >> 3) {
        goto LABEL_105;
      }
      if (v35 == v36) {
        goto LABEL_181;
      }
      if (v37 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v35 - v36;
      }
      if (*v36 != *v38) {
        goto LABEL_105;
      }
      unint64_t v40 = 0;
      unsigned int v41 = v38 + 1;
      int v42 = v36 + 1;
      while (v39 - 1 != v40)
      {
        double v43 = v42[v40];
        double v44 = v41[v40++];
        if (v43 != v44) {
          goto LABEL_184;
        }
      }
      unint64_t v40 = v39;
LABEL_184:
      BOOL v26 = v40 >= v37;
      goto LABEL_106;
    case 4:
      unsigned int v45 = a1[12];
      if (v45 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v45 != 4) {
        goto LABEL_105;
      }
      int v46 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v106, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
      goto LABEL_103;
    case 5:
      unsigned int v47 = a1[12];
      if (v47 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v47 != 5) {
        goto LABEL_105;
      }
      int v46 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v106, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)a2 + 8));
      goto LABEL_103;
    case 6:
      BOOL v26 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v27 = *(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_96;
        case 1u:
          double v95 = *(double *)a1;
          double v94 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_159:
          BOOL v26 = vabdd_f64(v95, v94) < 0.0000005;
          goto LABEL_106;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          BOOL v27 = ((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0
             && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_96;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v48 = a1[12];
      if (v48 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      BOOL v27 = v48 == 7;
      goto LABEL_96;
    case 8:
      BOOL v26 = 0;
      unsigned int v49 = a1[12];
      if (v49 < 8 || v49 == 9) {
        goto LABEL_106;
      }
      if (v49 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v46 = turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8);
LABEL_103:
      BOOL v26 = v46;
      goto LABEL_106;
    case 9:
      unsigned int v50 = a1[12];
      if (v50 < 9) {
        goto LABEL_105;
      }
      if (v50 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v54 = *(double *)a2;
      uint64_t v55 = *(void **)a1;
      if (*(void **)a2 == v55) {
        goto LABEL_181;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v55 + 1), *(void *)&v54 + 8))
      {
LABEL_105:
        BOOL v26 = 0;
        goto LABEL_106;
      }
      uint64_t v57 = (char *)v55[3];
      uint64_t v56 = (char *)v55[4];
      uint64_t v58 = v56 - v57;
      if (v56 == v57) {
        goto LABEL_181;
      }
      if (!v55[1]) {
        goto LABEL_181;
      }
      uint64_t v59 = 1;
      do
      {
        uint64_t v60 = *(void *)v57;
        v57 += 8;
        v59 *= v60;
      }
      while (v57 != v56);
      if (!v59) {
        goto LABEL_181;
      }
      uint64_t v105 = 0;
      std::vector<unsigned long>::vector(&v106, v58 >> 3, &v105);
      uint64_t v61 = v106;
      unint64_t v62 = v107;
      uint64_t v63 = **(void **)(*(void *)&v54 + 8);
      uint64_t v64 = (char *)v107 - (char *)v106;
      unint64_t v65 = v107 - v106;
      unint64_t v66 = v65 - 1;
      if (v65 <= 1) {
        uint64_t v67 = 1;
      }
      else {
        uint64_t v67 = v107 - v106;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v62 == v61)
    {
      uint64_t v75 = 0;
      double v76 = *(double *)(*(void *)v55[1] + 8 * v55[9]);
    }
    else
    {
      uint64_t v68 = 0;
      uint64_t v69 = (uint64_t *)v55[6];
      uint64_t v70 = v61;
      uint64_t v71 = v67;
      do
      {
        uint64_t v73 = *v70++;
        uint64_t v72 = v73;
        uint64_t v74 = *v69++;
        v68 += v74 * v72;
        --v71;
      }
      while (v71);
      uint64_t v75 = 0;
      double v76 = *(double *)(*(void *)v55[1] + 8 * (v55[9] + v68));
      uint64_t v77 = *(uint64_t **)(*(void *)&v54 + 48);
      uint64_t v78 = v61;
      uint64_t v79 = v67;
      do
      {
        uint64_t v81 = *v78++;
        uint64_t v80 = v81;
        uint64_t v82 = *v77++;
        v75 += v82 * v80;
        --v79;
      }
      while (v79);
    }
    double v83 = *(double *)(v63 + 8 * (*(void *)(*(void *)&v54 + 72) + v75));
    BOOL v26 = v76 == v83;
    if (v76 != v83) {
      break;
    }
    uint64_t v84 = v65;
    unint64_t v85 = v65 - 1;
    if (v64 >= 1)
    {
      uint64_t v86 = v55[3];
      unint64_t v87 = v61[v66] + 1;
      v61[v66] = v87;
      if (v87 >= *(void *)(v86 + 8 * v66))
      {
        uint64_t v88 = v86 - 16;
        unint64_t v89 = v65;
        unint64_t v90 = (unint64_t *)((char *)v61 + (v64 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          unint64_t v91 = v89 - 1;
          v90[1] = 0;
          if ((uint64_t)(v89 - 1) <= 0) {
            break;
          }
          unint64_t v92 = *v90 + 1;
          *v90-- = v92;
          unint64_t v93 = *(void *)(v88 + 8 * v89--);
          if (v92 < v93)
          {
            unint64_t v85 = v91 - 1;
            uint64_t v84 = 1;
            goto LABEL_148;
          }
        }
        BOOL v26 = 1;
        break;
      }
      uint64_t v84 = 1;
      unint64_t v85 = v65 - 1;
    }
LABEL_148:
    ;
  }
  while (v84 && (v85 & 0x8000000000000000) == 0);
  if (v61)
  {
    uint64_t v107 = v61;
    operator delete(v61);
  }
LABEL_106:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v26;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D770158;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770158;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v5 = *(void *)a1 == *(void *)a2;
          goto LABEL_38;
        case 1u:
          double v6 = *(double *)a1;
          uint64_t v7 = *(void *)a2;
          goto LABEL_83;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          BOOL v5 = *(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          double v6 = *(double *)a2;
          uint64_t v7 = *(void *)a1;
LABEL_83:
          BOOL v5 = v6 == (double)v7;
          goto LABEL_38;
        case 1u:
          BOOL v4 = *(double *)a1 == *(double *)a2;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          double v72 = *(double *)a2;
          double v73 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v8 = a1[12];
      BOOL v9 = v8 - 3 >= 7 && v8 >= 2;
      if (!v9) {
        goto LABEL_49;
      }
      if (v8 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v10 = *(void *)a2;
      double v11 = *(double *)a1;
      char v12 = *(unsigned char *)(*(void *)a1 + 31);
      size_t v13 = v12 < 0 ? *(void *)(*(void *)&v11 + 16) : *(unsigned __int8 *)(*(void *)a1 + 31);
      uint64_t v74 = *(char *)(v10 + 31) < 0 ? *(void *)(v10 + 16) : *(unsigned __int8 *)(v10 + 31);
      if (v13 != v74) {
        goto LABEL_49;
      }
      uint64_t v75 = (void *)(*(void *)&v11 + 8);
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0) {
        uint64_t v75 = (void *)*v75;
      }
      double v76 = (void *)(v10 + 8);
      if ((*(unsigned char *)(v10 + 31) & 0x80) != 0) {
        double v76 = (void *)*v76;
      }
      if (v12 < 0)
      {
        BOOL v5 = memcmp(v75, v76, v13) == 0;
LABEL_38:
        BOOL v4 = v5;
      }
      else
      {
        if (!v13) {
          goto LABEL_112;
        }
        size_t v77 = v13 - 1;
        do
        {
          int v79 = *(unsigned __int8 *)v75;
          uint64_t v75 = (void *)((char *)v75 + 1);
          int v78 = v79;
          int v81 = *(unsigned __int8 *)v76;
          double v76 = (void *)((char *)v76 + 1);
          int v80 = v81;
          BOOL v9 = v77-- != 0;
          char v82 = v9;
          BOOL v4 = v78 == v80;
        }
        while (v78 == v80 && (v82 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      unsigned int v14 = a1[12];
      if (v14 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v14 != 3) {
        goto LABEL_49;
      }
      int v16 = *(double **)(*(void *)a1 + 8);
      size_t v15 = *(double **)(*(void *)a1 + 16);
      unint64_t v17 = v15 - v16;
      unsigned int v18 = *(double **)(*(void *)a2 + 8);
      if (v17 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v18) >> 3) {
        goto LABEL_49;
      }
      if (v15 == v16) {
        goto LABEL_112;
      }
      if (v17 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v15 - v16;
      }
      if (*v16 != *v18) {
        goto LABEL_49;
      }
      unint64_t v20 = 0;
      unint64_t v21 = v18 + 1;
      unint64_t v22 = v16 + 1;
      while (v19 - 1 != v20)
      {
        double v23 = v22[v20];
        double v24 = v21[v20++];
        if (v23 != v24) {
          goto LABEL_115;
        }
      }
      unint64_t v20 = v19;
LABEL_115:
      BOOL v4 = v20 >= v17;
      goto LABEL_50;
    case 4:
      unsigned int v25 = a1[12];
      if (v25 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v25 != 4) {
        goto LABEL_49;
      }
      int v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
      goto LABEL_47;
    case 5:
      unsigned int v27 = a1[12];
      if (v27 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v27 != 5) {
        goto LABEL_49;
      }
      int v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)a2 + 8));
      goto LABEL_47;
    case 6:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v5 = *(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_38;
        case 1u:
          double v73 = *(double *)a1;
          double v72 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_90:
          BOOL v4 = vabdd_f64(v73, v72) < 0.0000005;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          BOOL v5 = ((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v28 = a1[12];
      if (v28 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      BOOL v5 = v28 == 7;
      goto LABEL_38;
    case 8:
      unsigned int v29 = a1[12];
      if (v29 < 8 || v29 == 9) {
        goto LABEL_49;
      }
      if (v29 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v26 = turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8);
LABEL_47:
      BOOL v4 = v26;
      goto LABEL_50;
    case 9:
      unsigned int v31 = a1[12];
      if (v31 < 9) {
        goto LABEL_49;
      }
      if (v31 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v32 = *(void *)a2;
      size_t v33 = *(void **)a1;
      if (*(void *)a2 == *(void *)a1) {
        goto LABEL_112;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v33 + 1), v32 + 8))
      {
LABEL_49:
        BOOL v4 = 0;
        goto LABEL_50;
      }
      uint64_t v35 = (char *)v33[3];
      unsigned int v34 = (char *)v33[4];
      uint64_t v36 = v34 - v35;
      if (v34 == v35) {
        goto LABEL_112;
      }
      if (!v33[1]) {
        goto LABEL_112;
      }
      uint64_t v37 = 1;
      do
      {
        uint64_t v38 = *(void *)v35;
        v35 += 8;
        v37 *= v38;
      }
      while (v35 != v34);
      if (!v37)
      {
LABEL_112:
        BOOL v4 = 1;
        goto LABEL_50;
      }
      uint64_t v83 = 0;
      std::vector<unsigned long>::vector(&v84, v36 >> 3, &v83);
      uint64_t v39 = v84;
      unint64_t v40 = v85;
      uint64_t v41 = **(void **)(v32 + 8);
      uint64_t v42 = (char *)v85 - (char *)v84;
      unint64_t v43 = v85 - v84;
      unint64_t v44 = v43 - 1;
      if (v43 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v85 - v84;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v40 == v39)
    {
      uint64_t v53 = 0;
      double v54 = *(double *)(*(void *)v33[1] + 8 * v33[9]);
    }
    else
    {
      uint64_t v46 = 0;
      unsigned int v47 = (uint64_t *)v33[6];
      unsigned int v48 = v39;
      uint64_t v49 = v45;
      do
      {
        uint64_t v51 = *v48++;
        uint64_t v50 = v51;
        uint64_t v52 = *v47++;
        v46 += v52 * v50;
        --v49;
      }
      while (v49);
      uint64_t v53 = 0;
      double v54 = *(double *)(*(void *)v33[1] + 8 * (v33[9] + v46));
      uint64_t v55 = *(uint64_t **)(v32 + 48);
      uint64_t v56 = v39;
      uint64_t v57 = v45;
      do
      {
        uint64_t v59 = *v56++;
        uint64_t v58 = v59;
        uint64_t v60 = *v55++;
        v53 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    double v61 = *(double *)(v41 + 8 * (*(void *)(v32 + 72) + v53));
    BOOL v4 = v54 == v61;
    if (v54 != v61)
    {
LABEL_80:
      if (!v39) {
        goto LABEL_50;
      }
      goto LABEL_117;
    }
    uint64_t v62 = v43;
    unint64_t v63 = v43 - 1;
    if (v42 >= 1) {
      break;
    }
LABEL_78:
    if (!v62 || (v63 & 0x8000000000000000) != 0) {
      goto LABEL_80;
    }
  }
  uint64_t v64 = v33[3];
  unint64_t v65 = v39[v44] + 1;
  v39[v44] = v65;
  if (v65 < *(void *)(v64 + 8 * v44))
  {
    uint64_t v62 = 1;
    unint64_t v63 = v43 - 1;
    goto LABEL_78;
  }
  uint64_t v66 = v64 - 16;
  unint64_t v67 = v43;
  uint64_t v68 = (unint64_t *)((char *)v39 + (v42 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    unint64_t v69 = v67 - 1;
    v68[1] = 0;
    if ((uint64_t)(v67 - 1) <= 0) {
      break;
    }
    unint64_t v70 = *v68 + 1;
    *v68-- = v70;
    unint64_t v71 = *(void *)(v66 + 8 * v67--);
    if (v70 < v71)
    {
      unint64_t v63 = v69 - 1;
      uint64_t v62 = 1;
      goto LABEL_78;
    }
  }
  BOOL v4 = 1;
LABEL_117:
  unint64_t v85 = v39;
  operator delete(v39);
LABEL_50:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D7701D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7701D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v5 = *(void *)a1 == *(void *)a2;
          goto LABEL_38;
        case 1u:
          double v6 = *(double *)a1;
          uint64_t v7 = *(void *)a2;
          goto LABEL_83;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          BOOL v5 = *(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          double v6 = *(double *)a2;
          uint64_t v7 = *(void *)a1;
LABEL_83:
          BOOL v5 = v6 == (double)v7;
          goto LABEL_38;
        case 1u:
          BOOL v4 = *(double *)a1 == *(double *)a2;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          double v72 = *(double *)a2;
          double v73 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v8 = a1[12];
      BOOL v9 = v8 - 3 >= 7 && v8 >= 2;
      if (!v9) {
        goto LABEL_49;
      }
      if (v8 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v10 = *(void *)a2;
      double v11 = *(double *)a1;
      char v12 = *(unsigned char *)(*(void *)a1 + 31);
      size_t v13 = v12 < 0 ? *(void *)(*(void *)&v11 + 16) : *(unsigned __int8 *)(*(void *)a1 + 31);
      uint64_t v74 = *(char *)(v10 + 31) < 0 ? *(void *)(v10 + 16) : *(unsigned __int8 *)(v10 + 31);
      if (v13 != v74) {
        goto LABEL_49;
      }
      uint64_t v75 = (void *)(*(void *)&v11 + 8);
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0) {
        uint64_t v75 = (void *)*v75;
      }
      double v76 = (void *)(v10 + 8);
      if ((*(unsigned char *)(v10 + 31) & 0x80) != 0) {
        double v76 = (void *)*v76;
      }
      if (v12 < 0)
      {
        BOOL v5 = memcmp(v75, v76, v13) == 0;
LABEL_38:
        BOOL v4 = v5;
      }
      else
      {
        if (!v13) {
          goto LABEL_112;
        }
        size_t v77 = v13 - 1;
        do
        {
          int v79 = *(unsigned __int8 *)v75;
          uint64_t v75 = (void *)((char *)v75 + 1);
          int v78 = v79;
          int v81 = *(unsigned __int8 *)v76;
          double v76 = (void *)((char *)v76 + 1);
          int v80 = v81;
          BOOL v9 = v77-- != 0;
          char v82 = v9;
          BOOL v4 = v78 == v80;
        }
        while (v78 == v80 && (v82 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      unsigned int v14 = a1[12];
      if (v14 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v14 != 3) {
        goto LABEL_49;
      }
      int v16 = *(double **)(*(void *)a1 + 8);
      size_t v15 = *(double **)(*(void *)a1 + 16);
      unint64_t v17 = v15 - v16;
      unsigned int v18 = *(double **)(*(void *)a2 + 8);
      if (v17 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v18) >> 3) {
        goto LABEL_49;
      }
      if (v15 == v16) {
        goto LABEL_112;
      }
      if (v17 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v15 - v16;
      }
      if (*v16 != *v18) {
        goto LABEL_49;
      }
      unint64_t v20 = 0;
      unint64_t v21 = v18 + 1;
      unint64_t v22 = v16 + 1;
      while (v19 - 1 != v20)
      {
        double v23 = v22[v20];
        double v24 = v21[v20++];
        if (v23 != v24) {
          goto LABEL_115;
        }
      }
      unint64_t v20 = v19;
LABEL_115:
      BOOL v4 = v20 >= v17;
      goto LABEL_50;
    case 4:
      unsigned int v25 = a1[12];
      if (v25 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v25 != 4) {
        goto LABEL_49;
      }
      int v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
      goto LABEL_47;
    case 5:
      unsigned int v27 = a1[12];
      if (v27 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v27 != 5) {
        goto LABEL_49;
      }
      int v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)a2 + 8));
      goto LABEL_47;
    case 6:
      BOOL v4 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v5 = *(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_38;
        case 1u:
          double v73 = *(double *)a1;
          double v72 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_90:
          BOOL v4 = vabdd_f64(v73, v72) < 0.0000005;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          BOOL v5 = ((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v28 = a1[12];
      if (v28 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      BOOL v5 = v28 == 7;
      goto LABEL_38;
    case 8:
      unsigned int v29 = a1[12];
      if (v29 < 8 || v29 == 9) {
        goto LABEL_49;
      }
      if (v29 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v26 = turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8);
LABEL_47:
      BOOL v4 = v26;
      goto LABEL_50;
    case 9:
      unsigned int v31 = a1[12];
      if (v31 < 9) {
        goto LABEL_49;
      }
      if (v31 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v32 = *(void *)a2;
      size_t v33 = *(void **)a1;
      if (*(void *)a2 == *(void *)a1) {
        goto LABEL_112;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v33 + 1), v32 + 8))
      {
LABEL_49:
        BOOL v4 = 0;
        goto LABEL_50;
      }
      uint64_t v35 = (char *)v33[3];
      unsigned int v34 = (char *)v33[4];
      uint64_t v36 = v34 - v35;
      if (v34 == v35) {
        goto LABEL_112;
      }
      if (!v33[1]) {
        goto LABEL_112;
      }
      uint64_t v37 = 1;
      do
      {
        uint64_t v38 = *(void *)v35;
        v35 += 8;
        v37 *= v38;
      }
      while (v35 != v34);
      if (!v37)
      {
LABEL_112:
        BOOL v4 = 1;
        goto LABEL_50;
      }
      uint64_t v83 = 0;
      std::vector<unsigned long>::vector(&v84, v36 >> 3, &v83);
      uint64_t v39 = v84;
      unint64_t v40 = v85;
      uint64_t v41 = **(void **)(v32 + 8);
      uint64_t v42 = (char *)v85 - (char *)v84;
      unint64_t v43 = v85 - v84;
      unint64_t v44 = v43 - 1;
      if (v43 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v85 - v84;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v40 == v39)
    {
      uint64_t v53 = 0;
      double v54 = *(double *)(*(void *)v33[1] + 8 * v33[9]);
    }
    else
    {
      uint64_t v46 = 0;
      unsigned int v47 = (uint64_t *)v33[6];
      unsigned int v48 = v39;
      uint64_t v49 = v45;
      do
      {
        uint64_t v51 = *v48++;
        uint64_t v50 = v51;
        uint64_t v52 = *v47++;
        v46 += v52 * v50;
        --v49;
      }
      while (v49);
      uint64_t v53 = 0;
      double v54 = *(double *)(*(void *)v33[1] + 8 * (v33[9] + v46));
      uint64_t v55 = *(uint64_t **)(v32 + 48);
      uint64_t v56 = v39;
      uint64_t v57 = v45;
      do
      {
        uint64_t v59 = *v56++;
        uint64_t v58 = v59;
        uint64_t v60 = *v55++;
        v53 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    double v61 = *(double *)(v41 + 8 * (*(void *)(v32 + 72) + v53));
    BOOL v4 = v54 == v61;
    if (v54 != v61)
    {
LABEL_80:
      if (!v39) {
        goto LABEL_50;
      }
      goto LABEL_117;
    }
    uint64_t v62 = v43;
    unint64_t v63 = v43 - 1;
    if (v42 >= 1) {
      break;
    }
LABEL_78:
    if (!v62 || (v63 & 0x8000000000000000) != 0) {
      goto LABEL_80;
    }
  }
  uint64_t v64 = v33[3];
  unint64_t v65 = v39[v44] + 1;
  v39[v44] = v65;
  if (v65 < *(void *)(v64 + 8 * v44))
  {
    uint64_t v62 = 1;
    unint64_t v63 = v43 - 1;
    goto LABEL_78;
  }
  uint64_t v66 = v64 - 16;
  unint64_t v67 = v43;
  uint64_t v68 = (unint64_t *)((char *)v39 + (v42 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    unint64_t v69 = v67 - 1;
    v68[1] = 0;
    if ((uint64_t)(v67 - 1) <= 0) {
      break;
    }
    unint64_t v70 = *v68 + 1;
    *v68-- = v70;
    unint64_t v71 = *(void *)(v66 + 8 * v67--);
    if (v70 < v71)
    {
      unint64_t v63 = v69 - 1;
      uint64_t v62 = 1;
      goto LABEL_78;
    }
  }
  BOOL v4 = 1;
LABEL_117:
  unint64_t v85 = v39;
  operator delete(v39);
LABEL_50:
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = !v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D770258;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770258;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  int v3 = 1;
  switch(a1[12])
  {
    case 0:
      double v5 = *(double *)a1;
      goto LABEL_9;
    case 1:
      BOOL v4 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a1 + 31) < 0) {
        double v5 = *(double *)(*(void *)a1 + 16);
      }
      else {
        *(void *)&double v5 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
LABEL_9:
      BOOL v4 = *(void *)&v5 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v4 = *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a1 + 16);
      goto LABEL_10;
    case 7:
      break;
    case 8:
      BOOL v4 = *(void *)(*(void *)a1 + 64) == 3;
LABEL_10:
      int v3 = v4;
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
  int v6 = 1;
  switch(a2[12])
  {
    case 0:
      double v8 = *(double *)a2;
      goto LABEL_21;
    case 1:
      BOOL v7 = *(double *)a2 == 0.0;
      goto LABEL_22;
    case 2:
      if (*(char *)(*(void *)a2 + 31) < 0) {
        double v8 = *(double *)(*(void *)a2 + 16);
      }
      else {
        *(void *)&double v8 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
LABEL_21:
      BOOL v7 = *(void *)&v8 == 0;
      goto LABEL_22;
    case 3:
    case 4:
    case 5:
      BOOL v7 = *(void *)(*(void *)a2 + 8) == *(void *)(*(void *)a2 + 16);
      goto LABEL_22;
    case 7:
      goto LABEL_25;
    case 8:
      BOOL v7 = *(void *)(*(void *)a2 + 64) == 3;
LABEL_22:
      int v6 = v7;
LABEL_25:
      if (a1[12] != 7 && a2[12] != 7)
      {
        *(unsigned char *)(a3 + 12) = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(void *)a3 = (v3 | v6) ^ 1u;
        return;
      }
      if (a1[12] == 7)
      {
        if ((a2[12] == 7) | (v6 ^ 1) & 1)
        {
          *(void *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(unsigned char *)(a3 + 12) = 0;
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(void *)a3 = turi::FLEX_UNDEFINED;
            int v9 = byte_268085C54;
            *(unsigned char *)(a3 + 12) = byte_268085C54;
            switch(v9)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                goto LABEL_35;
              default:
                return;
            }
          }
          return;
        }
LABEL_32:
        *(void *)(a3 + 5) = 0;
        *(void *)a3 = 0;
        return;
      }
      if (v3) {
        goto LABEL_32;
      }
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 12) = 0;
      if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
      {
        *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(void *)a3 = turi::FLEX_UNDEFINED;
        int v10 = byte_268085C54;
        *(unsigned char *)(a3 + 12) = byte_268085C54;
        switch(v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_35:
            atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
            break;
          default:
            return;
        }
      }
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D7702D8;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7702D8;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  int v3 = 1;
  switch(a1[12])
  {
    case 0:
      double v5 = *(double *)a1;
      goto LABEL_9;
    case 1:
      BOOL v4 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a1 + 31) < 0) {
        double v5 = *(double *)(*(void *)a1 + 16);
      }
      else {
        *(void *)&double v5 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
LABEL_9:
      BOOL v4 = *(void *)&v5 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v4 = *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a1 + 16);
      goto LABEL_10;
    case 7:
      break;
    case 8:
      BOOL v4 = *(void *)(*(void *)a1 + 64) == 3;
LABEL_10:
      int v3 = v4;
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
  int v6 = 1;
  switch(a2[12])
  {
    case 0:
      double v8 = *(double *)a2;
      goto LABEL_21;
    case 1:
      BOOL v7 = *(double *)a2 == 0.0;
      goto LABEL_22;
    case 2:
      if (*(char *)(*(void *)a2 + 31) < 0) {
        double v8 = *(double *)(*(void *)a2 + 16);
      }
      else {
        *(void *)&double v8 = *(unsigned __int8 *)(*(void *)a2 + 31);
      }
LABEL_21:
      BOOL v7 = *(void *)&v8 == 0;
      goto LABEL_22;
    case 3:
    case 4:
    case 5:
      BOOL v7 = *(void *)(*(void *)a2 + 8) == *(void *)(*(void *)a2 + 16);
      goto LABEL_22;
    case 7:
      goto LABEL_25;
    case 8:
      BOOL v7 = *(void *)(*(void *)a2 + 64) == 3;
LABEL_22:
      int v6 = v7;
LABEL_25:
      if (a1[12] != 7 && a2[12] != 7)
      {
        *(unsigned char *)(a3 + 12) = 0;
        uint64_t v10 = v3 & v6 ^ 1u;
        *(_DWORD *)(a3 + 8) = 0;
LABEL_36:
        *(void *)a3 = v10;
        return;
      }
      if (a1[12] == 7)
      {
        if ((a2[12] == 7) | v6 & 1)
        {
          *(void *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(unsigned char *)(a3 + 12) = 0;
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(void *)a3 = turi::FLEX_UNDEFINED;
            int v9 = byte_268085C54;
            *(unsigned char *)(a3 + 12) = byte_268085C54;
            switch(v9)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                goto LABEL_34;
              default:
                return;
            }
          }
          return;
        }
        goto LABEL_35;
      }
      if ((v3 & 1) == 0)
      {
LABEL_35:
        *(unsigned char *)(a3 + 12) = 0;
        *(_DWORD *)(a3 + 8) = 0;
        uint64_t v10 = 1;
        goto LABEL_36;
      }
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 12) = 0;
      if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
      {
        *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(void *)a3 = turi::FLEX_UNDEFINED;
        int v11 = byte_268085C54;
        *(unsigned char *)(a3 + 12) = byte_268085C54;
        switch(v11)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_34:
            atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
            break;
          default:
            return;
        }
      }
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sframe::unity_sframe(turi::unity_sframe *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D770358;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  {
    turi::mutex::mutex(&turi::get_empty_sframe(void)::static_sf_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::get_empty_sframe(void)::static_sf_lock, &dword_223D44000);
  }
  pthread_mutex_lock(&turi::get_empty_sframe(void)::static_sf_lock);
  if (!turi::get_empty_sframe(void)::sf) {
    operator new();
  }
  uint64_t v2 = *(atomic_ullong **)(turi::get_empty_sframe(void)::sf + 8);
  v3[0] = *(const turi::sframe **)turi::get_empty_sframe(void)::sf;
  v3[1] = (const turi::sframe *)v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&turi::get_empty_sframe(void)::static_sf_lock);
  turi::unity_sframe::set_sframe((uint64_t)this, v3);
}

void sub_2241C0750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int v25 = v22 + 12;
  uint64_t v26 = *v23;
  uint64_t *v23 = 0;
  if (v26) {
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)v23, v26);
  }
  uint64_t v27 = *v25;
  *unsigned int v25 = 0;
  if (v27) {
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)(v22 + 12), v27);
  }
  uint64_t v28 = v22[11];
  v22[11] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  unsigned int v29 = (std::__shared_weak_count *)v22[9];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  a22 = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  unsigned int v30 = (std::__shared_weak_count *)v22[4];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  cppipc::ipc_object_base::~ipc_object_base((cppipc::ipc_object_base *)v22);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::set_sframe(uint64_t a1, const turi::sframe **a2)
{
  v11[37] = *MEMORY[0x263EF8340];
  int v3 = (int *)global_logger();
  if (v3[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    BOOL v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_sframe", 664, 1);
    int v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    BOOL v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
      double v8 = std::locale::use_facet((const std::locale *)&v10, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale((std::locale *)&v10);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::sframe::sframe((turi::sframe *)v11, *a2);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v11);
}

void sub_2241C0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void turi::unity_sframe::~unity_sframe(turi::unity_sframe *this)
{
  *(void *)this = &unk_26D770358;
  turi::unity_sframe::clear(this);
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 104, v2);
  }
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 96, v3);
  }
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  double v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  BOOL v7 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  uint64_t vars8;

  turi::unity_sframe::~unity_sframe(this);
  JUMPOUT(0x22A614FA0);
}

void turi::unity_sframe::construct_from_dataframe(turi::unity_sframe *this, const turi::dataframe_t *a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    double v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_dataframe", 87, 1);
    BOOL v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    double v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
      int v9 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  (*(void (**)(turi::unity_sframe *))(*(void *)this + 56))(this);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::dataframe_t const&,void>(a2, &v11);
  turi::unity_sframe::set_sframe((uint64_t)this, &v11.__locale_);
}

void sub_2241C0DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

void turi::unity_sframe::construct_from_sframe(turi::unity_sframe *this, const turi::sframe *a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    double v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_sframe", 93, 1);
    BOOL v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    double v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
      int v9 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  (*(void (**)(turi::unity_sframe *))(*(void *)this + 56))(this);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>(a2, &v11);
  turi::unity_sframe::set_sframe((uint64_t)this, &v11.__locale_);
}

void sub_2241C0FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

void turi::unity_sframe::construct_from_sframe_index(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    double v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_sframe_index", 99, 1);
    BOOL v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Construct sframe from location: ", 32);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v31 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v31, &v32);
    uint64_t v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v32);
    int v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        long long v10 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v33 < 0) {
      operator delete((void *)v32.n128_u64[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v27);
  unsigned int v11 = v27;
  if (v27 > 3 || v27 == 2)
  {
    BOOL is_web_protocol = 0;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __s = *(std::string *)a2;
    }
    turi::fileio::get_protocol(&__s, (std::string::size_type)__p);
    BOOL is_web_protocol = turi::fileio::is_web_protocol((uint64_t)__p);
  }
  if (v11 > 3 || v11 == 2) {
    goto LABEL_30;
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (!is_web_protocol) {
      goto LABEL_50;
    }
  }
  else
  {
LABEL_30:
    if (!is_web_protocol) {
      goto LABEL_50;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v14 = *(void *)(a2 + 8);
  }
  size_t v15 = v22;
  std::string::basic_string[abi:ne180100]((uint64_t)v22, v14 + 16);
  if (v23 < 0) {
    size_t v15 = (void **)v22[0];
  }
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v16 = (const void *)a2;
    }
    else {
      int v16 = *(const void **)a2;
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/dir_archive.ini");
  BOOL v17 = turi::fileio::try_to_open_file((uint64_t)v22);
  BOOL v18 = v17;
  if ((v23 & 0x80000000) == 0)
  {
    if (!v17) {
      goto LABEL_50;
    }
LABEL_47:
    unsigned int v27 = 2;
    if (v30 < 0)
    {
      *(unsigned char *)uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      LOBYTE(v28) = 0;
      char v30 = 0;
    }
    goto LABEL_50;
  }
  operator delete(v22[0]);
  if (v18) {
    goto LABEL_47;
  }
LABEL_50:
  switch(v27)
  {
    case 0u:
      v34.__locale_ = (std::locale::__imp *)a2;
      uint64_t v35 = &v27;
      turi::unity_sframe::construct_from_sframe_index(std::string)::$_0::operator()((long long **)&v34);
    case 1u:
      std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string &,void>((uint64_t)&v20, a2);
    case 2u:
      v34.__locale_ = (std::locale::__imp *)-1;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = v39;
      v39[0] = 0;
      v39[1] = 0;
      uint64_t v44 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v21 = *(std::string *)a2;
      }
      turi::dir_archive::open_directory_for_read((uint64_t)&v34, (uint64_t)&v21);
    case 3u:
      v34.__locale_ = (std::locale::__imp *)&v27;
      turi::unity_sframe::construct_from_sframe_index(std::string)::$_2::operator()();
    default:
      if (v30 < 0) {
        operator delete(v28);
      }
      return;
  }
}

void sub_2241C1630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  turi::dir_archive::~dir_archive((turi::dir_archive *)(v41 - 208));
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::construct_from_csvs(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v379[0] = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    double v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_csvs", 151, 1);
    BOOL v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Construct sframe from csvs at ", 30);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v366, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v366 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v366, &__p);
    uint64_t v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    int v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        long long v10 = std::locale::use_facet(&v352, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v352);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v368 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v366.__r_.__value_.__l.__data_);
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v364);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v365, (uint64_t)"Parsing config:\n", 16);
  unsigned int v11 = *a3;
  if (*a3 != (uint64_t *)(a3 + 1))
  {
    int v348 = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
    std::string::size_type v346 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    int v347 = *(std::locale::__imp **)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v365, (uint64_t)"\t", 1);
      int v13 = *((char *)v11 + 55);
      if (v13 >= 0) {
        uint64_t v14 = (uint64_t)(v11 + 4);
      }
      else {
        uint64_t v14 = v11[4];
      }
      if (v13 >= 0) {
        uint64_t v15 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        uint64_t v15 = v11[5];
      }
      int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      BOOL v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      BOOL v18 = (turi::flexible_type_impl *)(v11 + 7);
      switch(*((unsigned char *)v11 + 68))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v352);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_33;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v352);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_33:
          v352.__locale_ = v348;
          *(std::locale::__imp **)((char *)&v352.__locale_ + *((void *)v348 - 3)) = v347;
          v353.__r_.__value_.__l.__size_ = v346;
          v353.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
          if (v360 < 0) {
            operator delete(v359[0]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v361);
          break;
        case 2:
          uint64_t v19 = *(void *)v18;
          if (*(char *)(*(void *)v18 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v19 + 8), *(void *)(v19 + 16));
          }
          else
          {
            long long v20 = *(_OWORD *)(v19 + 8);
            *(void *)&__str[16] = *(void *)(v19 + 24);
            *(_OWORD *)long long __str = v20;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v352, (void *)(*(void *)v18 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v352, (uint64_t *)(*(void *)v18 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v352, (void *)(*(void *)v18 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v18, (std::string *)__str);
          break;
        case 7:
          memset(__str, 0, 24);
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v352, (void *)(*(void *)v18 + 8));
          break;
        default:
          uint64_t result = turi::flexible_type_fail(0);
LABEL_804:
          __break(1u);
          return result;
      }
      if (__str[23] >= 0) {
        std::string v21 = __str;
      }
      else {
        std::string v21 = *(unsigned char **)__str;
      }
      if (__str[23] >= 0) {
        uint64_t v22 = __str[23];
      }
      else {
        uint64_t v22 = *(void *)&__str[8];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
      char v23 = (uint64_t *)v11[1];
      if (v23)
      {
        do
        {
          double v24 = (uint64_t **)v23;
          char v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          double v24 = (uint64_t **)v11[2];
          BOOL v86 = *v24 == v11;
          unsigned int v11 = (uint64_t *)v24;
        }
        while (!v86);
      }
      unsigned int v11 = (uint64_t *)v24;
    }
    while (v24 != a3 + 1);
  }
  unsigned int v25 = (int *)global_logger();
  char v26 = (void *)MEMORY[0x263F8C2B8];
  if (v25[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v25)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unsigned int v27 = (file_logger *)global_logger();
    uint64_t v28 = file_logger::start_stream(v27, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_csvs", 158, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v28, (uint64_t)&v362);
    if (v363 < 0) {
      operator delete(v362);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)&v352);
  memset(&v351, 0, sizeof(v351));
  MEMORY[0x22A614700](&v353, ",");
  __int16 v356 = 256;
  *(_WORD *)((char *)&v352.__locale_ + 1) = 23553;
  char v357 = 34;
  BYTE3(v352.__locale_) = 1;
  begin = v358.__begin_;
  for (std::vector<std::string>::pointer i = v358.__end_; i != begin; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  v358.__end_ = begin;
  std::string::basic_string[abi:ne180100]<0>(__str, "use_header");
  uint64_t v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v32 = v31;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v32) {
      goto LABEL_70;
    }
  }
  else if (!v31)
  {
    goto LABEL_70;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "use_header");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  switch(*((unsigned char *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_70:
  std::string::basic_string[abi:ne180100]<0>(__str, "continue_on_failure");
  uint64_t v33 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v34 = v33;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v34) {
      goto LABEL_77;
    }
  }
  else if (!v33)
  {
    goto LABEL_77;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "continue_on_failure");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  switch(*((unsigned char *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(__str, "store_errors");
  uint64_t v35 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v36 = v35;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v36) {
      goto LABEL_84;
    }
  }
  else if (!v35)
  {
    goto LABEL_84;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "store_errors");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  switch(*((unsigned char *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_84:
  std::string::basic_string[abi:ne180100]<0>(__str, "row_limit");
  uint64_t v37 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v38 = v37;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v38) {
      goto LABEL_86;
    }
  }
  else if (v37)
  {
LABEL_86:
    std::string::basic_string[abi:ne180100]<0>(&v350, "row_limit");
    *(void *)long long __str = &v350;
    uint64_t v39 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v39 + 68))
    {
      case 0:
      case 1:
      case 6:
      case 7:
        goto LABEL_108;
      case 2:
        uint64_t v41 = *((void *)v39 + 7);
        *(double *)&size_t __idx = 0.0;
        long long v42 = (char *)(v41 + 8);
        if (*(char *)(v41 + 31) < 0) {
          long long v42 = *(char **)(v41 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, v42);
        std::stoll((const std::string *)__str, &__idx, 10);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if (*(char *)(v41 + 31) < 0) {
          uint64_t v43 = *(void *)(v41 + 16);
        }
        else {
          uint64_t v43 = *(unsigned __int8 *)(v41 + 31);
        }
        if (__idx != v43)
        {
          unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v71 = std::string::append(&v375, " cannot be interpreted as an integer");
          long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          *(void *)&__str[16] = *((void *)&v71->__r_.__value_.__l + 2);
          *(_OWORD *)long long __str = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v70, (const std::string *)__str);
          __cxa_throw(v70, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_108;
      case 3:
        uint64_t v40 = *((void *)v39 + 7);
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v40 + 8), *(void *)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(void *)__str)
        {
          *(void *)&__str[8] = *(void *)__str;
          operator delete(*(void **)__str);
        }
        goto LABEL_108;
      case 4:
        uint64_t v44 = *((void *)v39 + 7);
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(void *)(v44 + 16) - *(void *)(v44 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v375);
        goto LABEL_108;
      case 5:
        uint64_t v45 = *((void *)v39 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(void *)(v45 + 16) - *(void *)(v45 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v375);
        goto LABEL_108;
      case 8:
        uint64_t v46 = *((void *)v39 + 7);
        uint64_t v47 = *(void *)(v46 + 16);
        *(void *)long long __str = *(void *)(v46 + 8);
        *(void *)&__str[8] = v47;
        if (v47) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v47 + 8), 1u, memory_order_relaxed);
        }
        long long v48 = *(_OWORD *)(v46 + 24);
        long long v49 = *(_OWORD *)(v46 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v46 + 40);
        long long v371 = v49;
        *(_OWORD *)&__str[16] = v48;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_108;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v39 + 7) + 8);
        turi::flexible_type_fail(0);
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_108:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        break;
      default:
LABEL_803:
        uint64_t result = turi::flexible_type_fail(0);
        goto LABEL_804;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_rows");
  uint64_t v50 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v51 = v50;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v51) {
      goto LABEL_112;
    }
  }
  else if (v50)
  {
LABEL_112:
    std::string::basic_string[abi:ne180100]<0>(&v350, "skip_rows");
    *(void *)long long __str = &v350;
    uint64_t v52 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v52 + 68))
    {
      case 0:
      case 1:
      case 6:
      case 7:
        goto LABEL_134;
      case 2:
        uint64_t v54 = *((void *)v52 + 7);
        *(double *)&size_t __idx = 0.0;
        uint64_t v55 = (char *)(v54 + 8);
        if (*(char *)(v54 + 31) < 0) {
          uint64_t v55 = *(char **)(v54 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, v55);
        std::stoll((const std::string *)__str, &__idx, 10);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if (*(char *)(v54 + 31) < 0) {
          uint64_t v56 = *(void *)(v54 + 16);
        }
        else {
          uint64_t v56 = *(unsigned __int8 *)(v54 + 31);
        }
        if (__idx != v56)
        {
          double v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v74 = std::string::append(&v375, " cannot be interpreted as an integer");
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          *(void *)&__str[16] = *((void *)&v74->__r_.__value_.__l + 2);
          *(_OWORD *)long long __str = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v73, (const std::string *)__str);
          __cxa_throw(v73, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_134;
      case 3:
        uint64_t v53 = *((void *)v52 + 7);
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v53 + 8), *(void *)(v53 + 16), (uint64_t)(*(void *)(v53 + 16) - *(void *)(v53 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(void *)__str)
        {
          *(void *)&__str[8] = *(void *)__str;
          operator delete(*(void **)__str);
        }
        goto LABEL_134;
      case 4:
        uint64_t v57 = *((void *)v52 + 7);
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v57 + 8), *(uint64_t **)(v57 + 16), (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v375);
        goto LABEL_134;
      case 5:
        uint64_t v58 = *((void *)v52 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v58 + 8), *(uint64_t **)(v58 + 16), (uint64_t)(*(void *)(v58 + 16) - *(void *)(v58 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v375);
        goto LABEL_134;
      case 8:
        uint64_t v59 = *((void *)v52 + 7);
        uint64_t v60 = *(void *)(v59 + 16);
        *(void *)long long __str = *(void *)(v59 + 8);
        *(void *)&__str[8] = v60;
        if (v60) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v60 + 8), 1u, memory_order_relaxed);
        }
        long long v61 = *(_OWORD *)(v59 + 24);
        long long v62 = *(_OWORD *)(v59 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v59 + 40);
        long long v371 = v62;
        *(_OWORD *)&__str[16] = v61;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_134;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v52 + 7) + 8);
        turi::flexible_type_fail(0);
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_134:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "delimiter");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v63 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v63 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "delimiter");
    *(void *)long long __str = &v350;
    uint64_t v64 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    unint64_t v65 = (turi::flexible_type_impl *)((char *)v64 + 56);
    switch(*((unsigned char *)v64 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_152;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_152:
        *(void *)long long __str = *v26;
        uint64_t v69 = v26[9];
        *(void *)&__str[*(void *)(*(void *)__str - 24)] = v26[8];
        *(void *)&__str[16] = v69;
        *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
        if (v373 < 0) {
          operator delete(v372);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v374);
        goto LABEL_165;
      case 2:
        uint64_t v67 = *(void *)v65;
        if (*(char *)(*(void *)v65 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(v67 + 8), *(void *)(v67 + 16));
        }
        else
        {
          long long v68 = *(_OWORD *)(v67 + 8);
          v375.__r_.__value_.__r.__words[2] = *(void *)(v67 + 24);
          *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v68;
        }
        goto LABEL_165;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v65 + 8));
        goto LABEL_165;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v65 + 8));
        goto LABEL_165;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v65 + 8));
        goto LABEL_165;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v65, &v375);
        goto LABEL_165;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_165;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_165;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v65 + 8));
LABEL_165:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        std::string::operator=(&v353, &v375);
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v375.__r_.__value_.__l.__data_);
        }
        goto LABEL_169;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "delimiter");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v66 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v66 == 7) {
    MEMORY[0x22A614700](&v353, "");
  }
LABEL_169:
  std::string::basic_string[abi:ne180100]<0>(__str, "comment_char");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v76 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v76 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "comment_char");
    *(void *)long long __str = &v350;
    size_t v77 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    int v78 = (turi::flexible_type_impl *)((char *)v77 + 56);
    switch(*((unsigned char *)v77 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_181;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_181:
        *(void *)long long __str = *v26;
        uint64_t v81 = v26[9];
        *(void *)&__str[*(void *)(*(void *)__str - 24)] = v26[8];
        *(void *)&__str[16] = v81;
        *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
        if (v373 < 0) {
          operator delete(v372);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v374);
        goto LABEL_188;
      case 2:
        uint64_t v79 = *(void *)v78;
        if (*(char *)(*(void *)v78 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(v79 + 8), *(void *)(v79 + 16));
        }
        else
        {
          long long v80 = *(_OWORD *)(v79 + 8);
          v375.__r_.__value_.__r.__words[2] = *(void *)(v79 + 24);
          *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v80;
        }
        goto LABEL_188;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v78 + 8));
        goto LABEL_188;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v78 + 8));
        goto LABEL_188;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v78 + 8));
        goto LABEL_188;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v78, &v375);
        goto LABEL_188;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_188;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_188;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v78 + 8));
LABEL_188:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v375.__r_.__value_.__l.__size_)
          {
            char v355 = *v375.__r_.__value_.__l.__data_;
            LOBYTE(v356) = 1;
          }
          operator delete(v375.__r_.__value_.__l.__data_);
        }
        else if (*((unsigned char *)&v375.__r_.__value_.__s + 23))
        {
          char v355 = v375.__r_.__value_.__s.__data_[0];
          LOBYTE(v356) = 1;
        }
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "use_escape_char");
  uint64_t v82 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v83 = v82;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v83) {
      goto LABEL_214;
    }
  }
  else if (!v82)
  {
    goto LABEL_214;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "use_escape_char");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  uint64_t v84 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350);
  char v85 = 1;
  switch(*((unsigned char *)v84 + 68))
  {
    case 0:
      uint64_t v88 = *((void *)v84 + 7);
      goto LABEL_208;
    case 1:
      BOOL v86 = *((double *)v84 + 7) == 0.0;
      goto LABEL_209;
    case 2:
      uint64_t v87 = *((void *)v84 + 7);
      if (*(char *)(v87 + 31) < 0) {
        uint64_t v88 = *(void *)(v87 + 16);
      }
      else {
        uint64_t v88 = *(unsigned __int8 *)(v87 + 31);
      }
LABEL_208:
      BOOL v86 = v88 == 0;
      goto LABEL_209;
    case 3:
    case 4:
    case 5:
      BOOL v86 = *(void *)(*((void *)v84 + 7) + 8) == *(void *)(*((void *)v84 + 7) + 16);
      goto LABEL_209;
    case 7:
      goto LABEL_212;
    case 8:
      BOOL v86 = *(void *)(*((void *)v84 + 7) + 64) == 3;
LABEL_209:
      char v85 = v86;
LABEL_212:
      BYTE1(v352.__locale_) = v85 ^ 1;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_214:
  std::string::basic_string[abi:ne180100]<0>(__str, "escape_char");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v89 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v89 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "escape_char");
    *(void *)long long __str = &v350;
    unint64_t v90 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    unint64_t v91 = (turi::flexible_type_impl *)((char *)v90 + 56);
    switch(*((unsigned char *)v90 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_226;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_226:
        *(void *)long long __str = *v26;
        uint64_t v94 = v26[9];
        *(void *)&__str[*(void *)(*(void *)__str - 24)] = v26[8];
        *(void *)&__str[16] = v94;
        *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
        if (v373 < 0) {
          operator delete(v372);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v374);
        goto LABEL_233;
      case 2:
        uint64_t v92 = *(void *)v91;
        if (*(char *)(*(void *)v91 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(v92 + 8), *(void *)(v92 + 16));
        }
        else
        {
          long long v93 = *(_OWORD *)(v92 + 8);
          v375.__r_.__value_.__r.__words[2] = *(void *)(v92 + 24);
          *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v93;
        }
        goto LABEL_233;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v91 + 8));
        goto LABEL_233;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v91 + 8));
        goto LABEL_233;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v91 + 8));
        goto LABEL_233;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v91, &v375);
        goto LABEL_233;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_233;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_233;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v91 + 8));
LABEL_233:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v375.__r_.__value_.__l.__size_) {
            BYTE2(v352.__locale_) = *v375.__r_.__value_.__l.__data_;
          }
          operator delete(v375.__r_.__value_.__l.__data_);
        }
        else if (*((unsigned char *)&v375.__r_.__value_.__s + 23))
        {
          BYTE2(v352.__locale_) = v375.__r_.__value_.__s.__data_[0];
        }
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "double_quote");
  uint64_t v95 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v96 = v95;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v96) {
      goto LABEL_259;
    }
  }
  else if (!v95)
  {
    goto LABEL_259;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "double_quote");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  BOOL v97 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350);
  char v98 = 1;
  switch(*((unsigned char *)v97 + 68))
  {
    case 0:
      uint64_t v101 = *((void *)v97 + 7);
      goto LABEL_253;
    case 1:
      BOOL v99 = *((double *)v97 + 7) == 0.0;
      goto LABEL_254;
    case 2:
      uint64_t v100 = *((void *)v97 + 7);
      if (*(char *)(v100 + 31) < 0) {
        uint64_t v101 = *(void *)(v100 + 16);
      }
      else {
        uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
      }
LABEL_253:
      BOOL v99 = v101 == 0;
      goto LABEL_254;
    case 3:
    case 4:
    case 5:
      BOOL v99 = *(void *)(*((void *)v97 + 7) + 8) == *(void *)(*((void *)v97 + 7) + 16);
      goto LABEL_254;
    case 7:
      goto LABEL_257;
    case 8:
      BOOL v99 = *(void *)(*((void *)v97 + 7) + 64) == 3;
LABEL_254:
      char v98 = v99;
LABEL_257:
      HIBYTE(v356) = v98 ^ 1;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_259:
  std::string::basic_string[abi:ne180100]<0>(__str, "quote_char");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v102 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v102 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "quote_char");
    *(void *)long long __str = &v350;
    int v103 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    char v104 = (turi::flexible_type_impl *)((char *)v103 + 56);
    switch(*((unsigned char *)v103 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_275;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_275:
        *(void *)long long __str = *v26;
        uint64_t v108 = v26[9];
        *(void *)&__str[*(void *)(*(void *)__str - 24)] = v26[8];
        *(void *)&__str[16] = v108;
        *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
        if (v373 < 0) {
          operator delete(v372);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v374);
        goto LABEL_282;
      case 2:
        uint64_t v106 = *(void *)v104;
        if (*(char *)(*(void *)v104 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(v106 + 8), *(void *)(v106 + 16));
        }
        else
        {
          long long v107 = *(_OWORD *)(v106 + 8);
          v375.__r_.__value_.__r.__words[2] = *(void *)(v106 + 24);
          *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v107;
        }
        goto LABEL_282;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v104 + 8));
        goto LABEL_282;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v104 + 8));
        goto LABEL_282;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v104 + 8));
        goto LABEL_282;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v104, &v375);
        goto LABEL_282;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_282;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_282;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v104 + 8));
LABEL_282:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v375.__r_.__value_.__l.__size_) {
            char v357 = *v375.__r_.__value_.__l.__data_;
          }
          operator delete(v375.__r_.__value_.__l.__data_);
        }
        else if (*((unsigned char *)&v375.__r_.__value_.__s + 23))
        {
          char v357 = v375.__r_.__value_.__s.__data_[0];
        }
        goto LABEL_290;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "quote_char");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v105 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v105 == 7) {
    char v357 = 0;
  }
LABEL_290:
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_initial_space");
  uint64_t v109 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v110 = v109;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v110) {
      goto LABEL_308;
    }
  }
  else if (!v109)
  {
    goto LABEL_308;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_initial_space");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  atomic_ullong v111 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350);
  char v112 = 1;
  switch(*((unsigned char *)v111 + 68))
  {
    case 0:
      uint64_t v115 = *((void *)v111 + 7);
      goto LABEL_302;
    case 1:
      BOOL v113 = *((double *)v111 + 7) == 0.0;
      goto LABEL_303;
    case 2:
      uint64_t v114 = *((void *)v111 + 7);
      if (*(char *)(v114 + 31) < 0) {
        uint64_t v115 = *(void *)(v114 + 16);
      }
      else {
        uint64_t v115 = *(unsigned __int8 *)(v114 + 31);
      }
LABEL_302:
      BOOL v113 = v115 == 0;
      goto LABEL_303;
    case 3:
    case 4:
    case 5:
      BOOL v113 = *(void *)(*((void *)v111 + 7) + 8) == *(void *)(*((void *)v111 + 7) + 16);
      goto LABEL_303;
    case 7:
      goto LABEL_306;
    case 8:
      BOOL v113 = *(void *)(*((void *)v111 + 7) + 64) == 3;
LABEL_303:
      char v112 = v113;
LABEL_306:
      BYTE3(v352.__locale_) = v112 ^ 1;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_308:
  std::string::basic_string[abi:ne180100]<0>(__str, "only_raw_string_substitutions");
  uint64_t v116 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  uint64_t v117 = v116;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v117) {
      goto LABEL_326;
    }
  }
  else if (!v116)
  {
    goto LABEL_326;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "only_raw_string_substitutions");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  unint64_t v118 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350);
  char v119 = 1;
  switch(*((unsigned char *)v118 + 68))
  {
    case 0:
      uint64_t v122 = *((void *)v118 + 7);
      goto LABEL_320;
    case 1:
      BOOL v120 = *((double *)v118 + 7) == 0.0;
      goto LABEL_321;
    case 2:
      uint64_t v121 = *((void *)v118 + 7);
      if (*(char *)(v121 + 31) < 0) {
        uint64_t v122 = *(void *)(v121 + 16);
      }
      else {
        uint64_t v122 = *(unsigned __int8 *)(v121 + 31);
      }
LABEL_320:
      BOOL v120 = v122 == 0;
      goto LABEL_321;
    case 3:
    case 4:
    case 5:
      BOOL v120 = *(void *)(*((void *)v118 + 7) + 8) == *(void *)(*((void *)v118 + 7) + 16);
      goto LABEL_321;
    case 7:
      goto LABEL_324;
    case 8:
      BOOL v120 = *(void *)(*((void *)v118 + 7) + 64) == 3;
LABEL_321:
      char v119 = v120;
LABEL_324:
      v361[40] = v119 ^ 1;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_326:
  std::string::basic_string[abi:ne180100]<0>(__str, "na_values");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v123 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v123 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "na_values");
    *(void *)long long __str = &v350;
    double v124 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v124 + 68))
    {
      case 0:
        size_t v125 = *((void *)v124 + 7);
        char v378 = 0;
        int v377 = 0;
        size_t __idx = v125;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_380;
          case 3:
            goto LABEL_400;
          case 4:
            goto LABEL_388;
          case 5:
            goto LABEL_405;
          case 8:
            goto LABEL_409;
          case 9:
            goto LABEL_391;
          default:
            goto LABEL_414;
        }
      case 1:
        size_t v144 = *((void *)v124 + 7);
        int v377 = 0;
        char v378 = 1;
        size_t __idx = v144;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_380;
          case 3:
            goto LABEL_400;
          case 4:
            goto LABEL_388;
          case 5:
            goto LABEL_405;
          case 8:
            goto LABEL_409;
          case 9:
            goto LABEL_391;
          default:
            goto LABEL_414;
        }
      case 2:
        *(double *)&size_t __idx = 0.0;
        int v377 = 0;
        char v378 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&__idx);
      case 3:
        uint64_t v127 = *((void *)v124 + 7);
        std::vector<turi::flexible_type>::vector(&v375, (uint64_t)(*(void *)(v127 + 16) - *(void *)(v127 + 8)) >> 3);
        uint64_t v128 = *(void *)(v127 + 8);
        if (*(void *)(v127 + 16) != v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          while (2)
          {
            std::string::size_type v131 = v375.__r_.__value_.__r.__words[0] + v129;
            switch(*(unsigned char *)(v375.__r_.__value_.__r.__words[0] + v129 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v132 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                if (*((char *)v132 + 31) < 0) {
                  operator delete((void *)v132[1]);
                }
                atomic_ullong *volatile v133 = v132;
                uint64_t v134 = 0x1012C404EF22A49;
                goto LABEL_372;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v141 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                atomic_ullong v142 = (void *)v141[1];
                if (v142)
                {
                  v141[2] = (atomic_ullong)v142;
                  operator delete(v142);
                }
                atomic_ullong *volatile v133 = v141;
                uint64_t v134 = 0x1080C409938AC02;
                goto LABEL_372;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v135 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                *(void *)long long __str = v135 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_367;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v135 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                *(void *)long long __str = v135 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_367:
                atomic_ullong *volatile v133 = v135;
                uint64_t v134 = 0x1020C405E66F15BLL;
                goto LABEL_372;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v143 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v143 + 2);
                atomic_ullong *volatile v133 = v143;
                unsigned int v140 = -235920773;
                goto LABEL_371;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v131, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_374;
                }
                atomic_ullong *volatile v136 = *(atomic_ullong *volatile *)v131;
                if (!*(void *)v131) {
                  goto LABEL_373;
                }
                double v137 = (void *)v136[6];
                if (v137)
                {
                  v136[7] = (atomic_ullong)v137;
                  operator delete(v137);
                }
                double v138 = (void *)v136[3];
                if (v138)
                {
                  v136[4] = (atomic_ullong)v138;
                  operator delete(v138);
                }
                double v139 = (std::__shared_weak_count *)v136[2];
                if (v139) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v139);
                }
                atomic_ullong *volatile v133 = v136;
                unsigned int v140 = 2071181815;
LABEL_371:
                uint64_t v134 = v140 | 0x1030C4000000000;
LABEL_372:
                MEMORY[0x22A614FA0](v133, v134);
LABEL_373:
                *(void *)std::string::size_type v131 = 0;
LABEL_374:
                *(void *)std::string::size_type v131 = 0;
                *(_DWORD *)(v131 + 8) = 0;
                *(unsigned char *)(v131 + 12) = 1;
                *(void *)std::string::size_type v131 = *(void *)(v128 + 8 * v130++);
                uint64_t v128 = *(void *)(v127 + 8);
                v129 += 16;
                if (v130 >= (*(void *)(v127 + 16) - v128) >> 3) {
                  goto LABEL_414;
                }
                continue;
              default:
                goto LABEL_374;
            }
          }
        }
        goto LABEL_414;
      case 4:
        uint64_t v126 = *((void *)v124 + 7);
        memset(&v375, 0, sizeof(v375));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v375, *(uint64_t **)(v126 + 8), *(uint64_t **)(v126 + 16), (uint64_t)(*(void *)(v126 + 16) - *(void *)(v126 + 8)) >> 4);
        goto LABEL_414;
      case 5:
        uint64_t v145 = *((void *)v124 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v145 + 8), *(uint64_t **)(v145 + 16), (uint64_t)(*(void *)(v145 + 16) - *(void *)(v145 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        *(double *)&size_t __idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        goto LABEL_414;
      case 6:
        double v146 = (double)((uint64_t)(*((void *)v124 + 7) << 8) >> 8);
        double v147 = (double)*((int *)v124 + 16) / 1000000.0;
        int v377 = 0;
        char v378 = 1;
        *(double *)&size_t __idx = v147 + v146;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
LABEL_380:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            size_t v148 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            if (*(char *)(__idx + 31) < 0) {
              operator delete(*(void **)(__idx + 8));
            }
            atomic_ullong *volatile v149 = (void *)v148;
            uint64_t v150 = 0x1012C404EF22A49;
            goto LABEL_413;
          case 3:
LABEL_400:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            size_t v161 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            uint64_t v162 = *(void **)(__idx + 8);
            if (v162)
            {
              *(void *)(__idx + 16) = v162;
              operator delete(v162);
            }
            atomic_ullong *volatile v149 = (void *)v161;
            uint64_t v150 = 0x1080C409938AC02;
            goto LABEL_413;
          case 4:
LABEL_388:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            size_t v155 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            goto LABEL_408;
          case 5:
LABEL_405:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            size_t v155 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_408:
            atomic_ullong *volatile v149 = (void *)v155;
            uint64_t v150 = 0x1020C405E66F15BLL;
            goto LABEL_413;
          case 8:
LABEL_409:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            size_t v163 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(__idx + 16));
            atomic_ullong *volatile v149 = (void *)v163;
            unsigned int v160 = -235920773;
            goto LABEL_412;
          case 9:
LABEL_391:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_414;
            }
            uint64_t v156 = (void *)__idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_414;
            }
            uint64_t v157 = *(void **)(__idx + 48);
            if (v157)
            {
              *(void *)(__idx + 56) = v157;
              operator delete(v157);
            }
            double v158 = (void *)v156[3];
            if (v158)
            {
              v156[4] = v158;
              operator delete(v158);
            }
            unsigned int v159 = (std::__shared_weak_count *)v156[2];
            if (v159) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v159);
            }
            atomic_ullong *volatile v149 = v156;
            unsigned int v160 = 2071181815;
LABEL_412:
            uint64_t v150 = v160 | 0x1030C4000000000;
LABEL_413:
            MEMORY[0x22A614FA0](v149, v150);
            break;
          default:
            goto LABEL_414;
        }
        goto LABEL_414;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_414;
      case 8:
        uint64_t v151 = *((void *)v124 + 7);
        uint64_t v152 = *(void *)(v151 + 16);
        *(void *)long long __str = *(void *)(v151 + 8);
        *(void *)&__str[8] = v152;
        if (v152) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v152 + 8), 1u, memory_order_relaxed);
        }
        long long v153 = *(_OWORD *)(v151 + 24);
        long long v154 = *(_OWORD *)(v151 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v151 + 40);
        long long v371 = v154;
        *(_OWORD *)&__str[16] = v153;
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_414;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v124 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_414:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        uint64_t v164 = v358.__begin_;
        for (std::vector<std::string>::pointer j = v358.__end_; j != v164; --j)
        {
          if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(j[-1].__r_.__value_.__l.__data_);
          }
        }
        v358.__end_ = v164;
        std::string::size_type size = v375.__r_.__value_.__l.__size_;
        std::string::size_type v167 = v375.__r_.__value_.__r.__words[0];
        if (v375.__r_.__value_.__l.__size_ != v375.__r_.__value_.__r.__words[0])
        {
          uint64_t v168 = 0;
          unint64_t v169 = 0;
          do
          {
            unint64_t v170 = (uint64_t *)(v167 + v168);
            if (*(unsigned char *)(v167 + v168 + 12) == 2)
            {
              uint64_t v171 = *v170;
              if (*(char *)(*v170 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(v171 + 8), *(void *)(v171 + 16));
              }
              else
              {
                long long v172 = *(_OWORD *)(v171 + 8);
                v350.__r_.__value_.__r.__words[2] = *(void *)(v171 + 24);
                *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v172;
              }
              std::vector<std::string>::pointer end = v358.__end_;
              if (v358.__end_ >= v358.__end_cap_.__value_)
              {
                unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * (((char *)v358.__end_ - (char *)v358.__begin_) >> 3);
                unint64_t v176 = v175 + 1;
                if (v175 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v358.__end_cap_.__value_ - (char *)v358.__begin_) >> 3) > v176) {
                  unint64_t v176 = 0x5555555555555556 * (((char *)v358.__end_cap_.__value_ - (char *)v358.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v358.__end_cap_.__value_ - (char *)v358.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v177 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v177 = v176;
                }
                v370[0] = &v358.__end_cap_;
                if (v177) {
                  unsigned int v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v358.__end_cap_, v177);
                }
                else {
                  unsigned int v178 = 0;
                }
                uint64_t v179 = &v178[24 * v175];
                *(void *)long long __str = v178;
                *(void *)&__str[8] = v179;
                *(void *)&__str[24] = &v178[24 * v177];
                long long v180 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                *((void *)v179 + 2) = *((void *)&v350.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v179 = v180;
                memset(&v350, 0, sizeof(v350));
                *(void *)&__str[16] = v179 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v358, (std::__split_buffer<std::string> *)__str);
                unint64_t v181 = v358.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
                v358.__end_ = v181;
                if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v350.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v174 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                v358.__end_->__r_.__value_.__r.__words[2] = v350.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v174;
                v358.__end_ = end + 1;
              }
              std::string::size_type size = v375.__r_.__value_.__l.__size_;
              std::string::size_type v167 = v375.__r_.__value_.__r.__words[0];
            }
            ++v169;
            v168 += 16;
          }
          while (v169 < (uint64_t)(size - v167) >> 4);
        }
        *(void *)long long __str = &v375;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        char v26 = (void *)MEMORY[0x263F8C2B8];
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "line_terminator");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v182 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v182 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "line_terminator");
    *(void *)long long __str = &v350;
    uint64_t v183 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    uint64_t v184 = (turi::flexible_type_impl *)((char *)v183 + 56);
    switch(*((unsigned char *)v183 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_459;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_459:
        *(void *)long long __str = *v26;
        uint64_t v188 = v26[9];
        *(void *)&__str[*(void *)(*(void *)__str - 24)] = v26[8];
        *(void *)&__str[16] = v188;
        *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
        if (v373 < 0) {
          operator delete(v372);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v374);
        goto LABEL_466;
      case 2:
        uint64_t v186 = *(void *)v184;
        if (*(char *)(*(void *)v184 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(v186 + 8), *(void *)(v186 + 16));
        }
        else
        {
          long long v187 = *(_OWORD *)(v186 + 8);
          v375.__r_.__value_.__r.__words[2] = *(void *)(v186 + 24);
          *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v187;
        }
        goto LABEL_466;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v184 + 8));
        goto LABEL_466;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v184 + 8));
        goto LABEL_466;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v184 + 8));
        goto LABEL_466;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v184, &v375);
        goto LABEL_466;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_466;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_466;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v184 + 8));
LABEL_466:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        std::string::operator=(&v354, &v375);
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v375.__r_.__value_.__l.__data_);
        }
        goto LABEL_470;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "line_terminator");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v185 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v185 == 7) {
    MEMORY[0x22A614700](&v354, "");
  }
LABEL_470:
  std::string::basic_string[abi:ne180100]<0>(__str, "output_columns");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v189 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v189 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "output_columns");
    *(void *)long long __str = &v350;
    uint64_t v190 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v190 + 68))
    {
      case 0:
        size_t v191 = *((void *)v190 + 7);
        char v378 = 0;
        int v377 = 0;
        size_t __idx = v191;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_524;
          case 3:
            goto LABEL_544;
          case 4:
            goto LABEL_532;
          case 5:
            goto LABEL_549;
          case 8:
            goto LABEL_553;
          case 9:
            goto LABEL_535;
          default:
            goto LABEL_558;
        }
      case 1:
        size_t v210 = *((void *)v190 + 7);
        int v377 = 0;
        char v378 = 1;
        size_t __idx = v210;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_524;
          case 3:
            goto LABEL_544;
          case 4:
            goto LABEL_532;
          case 5:
            goto LABEL_549;
          case 8:
            goto LABEL_553;
          case 9:
            goto LABEL_535;
          default:
            goto LABEL_558;
        }
      case 2:
        *(double *)&size_t __idx = 0.0;
        int v377 = 0;
        char v378 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&__idx);
      case 3:
        uint64_t v193 = *((void *)v190 + 7);
        std::vector<turi::flexible_type>::vector(&v375, (uint64_t)(*(void *)(v193 + 16) - *(void *)(v193 + 8)) >> 3);
        uint64_t v194 = *(void *)(v193 + 8);
        if (*(void *)(v193 + 16) != v194)
        {
          uint64_t v195 = 0;
          unint64_t v196 = 0;
          while (2)
          {
            std::string::size_type v197 = v375.__r_.__value_.__r.__words[0] + v195;
            switch(*(unsigned char *)(v375.__r_.__value_.__r.__words[0] + v195 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v198 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                if (*((char *)v198 + 31) < 0) {
                  operator delete((void *)v198[1]);
                }
                atomic_ullong *volatile v199 = v198;
                uint64_t v200 = 0x1012C404EF22A49;
                goto LABEL_516;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v207 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                uint64_t v208 = (void *)v207[1];
                if (v208)
                {
                  v207[2] = (atomic_ullong)v208;
                  operator delete(v208);
                }
                atomic_ullong *volatile v199 = v207;
                uint64_t v200 = 0x1080C409938AC02;
                goto LABEL_516;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v201 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                *(void *)long long __str = v201 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_511;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v201 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                *(void *)long long __str = v201 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_511:
                atomic_ullong *volatile v199 = v201;
                uint64_t v200 = 0x1020C405E66F15BLL;
                goto LABEL_516;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v209 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v209 + 2);
                atomic_ullong *volatile v199 = v209;
                unsigned int v206 = -235920773;
                goto LABEL_515;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v197, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_518;
                }
                atomic_ullong *volatile v202 = *(atomic_ullong *volatile *)v197;
                if (!*(void *)v197) {
                  goto LABEL_517;
                }
                uint64_t v203 = (void *)v202[6];
                if (v203)
                {
                  v202[7] = (atomic_ullong)v203;
                  operator delete(v203);
                }
                unsigned int v204 = (void *)v202[3];
                if (v204)
                {
                  v202[4] = (atomic_ullong)v204;
                  operator delete(v204);
                }
                atomic_ullong *volatile v205 = (std::__shared_weak_count *)v202[2];
                if (v205) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v205);
                }
                atomic_ullong *volatile v199 = v202;
                unsigned int v206 = 2071181815;
LABEL_515:
                uint64_t v200 = v206 | 0x1030C4000000000;
LABEL_516:
                MEMORY[0x22A614FA0](v199, v200);
LABEL_517:
                *(void *)std::string::size_type v197 = 0;
LABEL_518:
                *(void *)std::string::size_type v197 = 0;
                *(_DWORD *)(v197 + 8) = 0;
                *(unsigned char *)(v197 + 12) = 1;
                *(void *)std::string::size_type v197 = *(void *)(v194 + 8 * v196++);
                uint64_t v194 = *(void *)(v193 + 8);
                v195 += 16;
                if (v196 >= (*(void *)(v193 + 16) - v194) >> 3) {
                  goto LABEL_558;
                }
                continue;
              default:
                goto LABEL_518;
            }
          }
        }
        goto LABEL_558;
      case 4:
        uint64_t v192 = *((void *)v190 + 7);
        memset(&v375, 0, sizeof(v375));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v375, *(uint64_t **)(v192 + 8), *(uint64_t **)(v192 + 16), (uint64_t)(*(void *)(v192 + 16) - *(void *)(v192 + 8)) >> 4);
        goto LABEL_558;
      case 5:
        uint64_t v211 = *((void *)v190 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v211 + 8), *(uint64_t **)(v211 + 16), (uint64_t)(*(void *)(v211 + 16) - *(void *)(v211 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        *(double *)&size_t __idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        goto LABEL_558;
      case 6:
        double v212 = (double)((uint64_t)(*((void *)v190 + 7) << 8) >> 8);
        double v213 = (double)*((int *)v190 + 16) / 1000000.0;
        int v377 = 0;
        char v378 = 1;
        *(double *)&size_t __idx = v213 + v212;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
LABEL_524:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            size_t v214 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            if (*(char *)(__idx + 31) < 0) {
              operator delete(*(void **)(__idx + 8));
            }
            uint64_t v215 = (void *)v214;
            uint64_t v216 = 0x1012C404EF22A49;
            goto LABEL_557;
          case 3:
LABEL_544:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            size_t v227 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            uint64_t v228 = *(void **)(__idx + 8);
            if (v228)
            {
              *(void *)(__idx + 16) = v228;
              operator delete(v228);
            }
            uint64_t v215 = (void *)v227;
            uint64_t v216 = 0x1080C409938AC02;
            goto LABEL_557;
          case 4:
LABEL_532:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            size_t v221 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            goto LABEL_552;
          case 5:
LABEL_549:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            size_t v221 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_552:
            uint64_t v215 = (void *)v221;
            uint64_t v216 = 0x1020C405E66F15BLL;
            goto LABEL_557;
          case 8:
LABEL_553:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            size_t v229 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(__idx + 16));
            uint64_t v215 = (void *)v229;
            unsigned int v226 = -235920773;
            goto LABEL_556;
          case 9:
LABEL_535:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_558;
            }
            atomic_ullong *volatile v222 = (void *)__idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_558;
            }
            long long v223 = *(void **)(__idx + 48);
            if (v223)
            {
              *(void *)(__idx + 56) = v223;
              operator delete(v223);
            }
            atomic_ullong *volatile v224 = (void *)v222[3];
            if (v224)
            {
              v222[4] = v224;
              operator delete(v224);
            }
            uint64_t v225 = (std::__shared_weak_count *)v222[2];
            if (v225) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v225);
            }
            uint64_t v215 = v222;
            unsigned int v226 = 2071181815;
LABEL_556:
            uint64_t v216 = v226 | 0x1030C4000000000;
LABEL_557:
            MEMORY[0x22A614FA0](v215, v216);
            break;
          default:
            goto LABEL_558;
        }
        goto LABEL_558;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_558;
      case 8:
        uint64_t v217 = *((void *)v190 + 7);
        uint64_t v218 = *(void *)(v217 + 16);
        *(void *)long long __str = *(void *)(v217 + 8);
        *(void *)&__str[8] = v218;
        if (v218) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v218 + 8), 1u, memory_order_relaxed);
        }
        long long v219 = *(_OWORD *)(v217 + 24);
        long long v220 = *(_OWORD *)(v217 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v217 + 40);
        long long v371 = v220;
        *(_OWORD *)&__str[16] = v219;
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_558;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v190 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_558:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        uint64_t v230 = v351.__begin_;
        for (std::vector<std::string>::pointer k = v351.__end_; k != v230; --k)
        {
          if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(k[-1].__r_.__value_.__l.__data_);
          }
        }
        v351.__end_ = v230;
        std::string::size_type v232 = v375.__r_.__value_.__l.__size_;
        std::string::size_type v233 = v375.__r_.__value_.__r.__words[0];
        if (v375.__r_.__value_.__l.__size_ != v375.__r_.__value_.__r.__words[0])
        {
          uint64_t v234 = 0;
          unint64_t v235 = 0;
          do
          {
            uint64_t v236 = (uint64_t *)(v233 + v234);
            if (*(unsigned char *)(v233 + v234 + 12) == 2)
            {
              uint64_t v237 = *v236;
              if (*(char *)(*v236 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(v237 + 8), *(void *)(v237 + 16));
              }
              else
              {
                long long v238 = *(_OWORD *)(v237 + 8);
                v350.__r_.__value_.__r.__words[2] = *(void *)(v237 + 24);
                *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v238;
              }
              std::vector<std::string>::pointer v239 = v351.__end_;
              if (v351.__end_ >= v351.__end_cap_.__value_)
              {
                unint64_t v241 = 0xAAAAAAAAAAAAAAABLL * (((char *)v351.__end_ - (char *)v351.__begin_) >> 3);
                unint64_t v242 = v241 + 1;
                if (v241 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v351.__end_cap_.__value_ - (char *)v351.__begin_) >> 3) > v242) {
                  unint64_t v242 = 0x5555555555555556 * (((char *)v351.__end_cap_.__value_ - (char *)v351.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v351.__end_cap_.__value_ - (char *)v351.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v243 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v243 = v242;
                }
                v370[0] = &v351.__end_cap_;
                if (v243) {
                  unsigned int v244 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v351.__end_cap_, v243);
                }
                else {
                  unsigned int v244 = 0;
                }
                std::string::size_type v245 = &v244[24 * v241];
                *(void *)long long __str = v244;
                *(void *)&__str[8] = v245;
                *(void *)&__str[24] = &v244[24 * v243];
                long long v246 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                *((void *)v245 + 2) = *((void *)&v350.__r_.__value_.__l + 2);
                *(_OWORD *)std::string::size_type v245 = v246;
                memset(&v350, 0, sizeof(v350));
                *(void *)&__str[16] = v245 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v351, (std::__split_buffer<std::string> *)__str);
                unsigned int v247 = v351.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
                v351.__end_ = v247;
                if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v350.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v240 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                v351.__end_->__r_.__value_.__r.__words[2] = v350.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v239->__r_.__value_.__l.__data_ = v240;
                v351.__end_ = v239 + 1;
              }
              std::string::size_type v232 = v375.__r_.__value_.__l.__size_;
              std::string::size_type v233 = v375.__r_.__value_.__r.__words[0];
            }
            ++v235;
            v234 += 16;
          }
          while (v235 < (uint64_t)(v232 - v233) >> 4);
        }
        *(void *)long long __str = &v375;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "true_values");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v248 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v248 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "true_values");
    *(void *)long long __str = &v350;
    double v249 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v249 + 68))
    {
      case 0:
        size_t v250 = *((void *)v249 + 7);
        char v378 = 0;
        int v377 = 0;
        size_t __idx = v250;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_641;
          case 3:
            goto LABEL_661;
          case 4:
            goto LABEL_649;
          case 5:
            goto LABEL_666;
          case 8:
            goto LABEL_670;
          case 9:
            goto LABEL_652;
          default:
            goto LABEL_675;
        }
      case 1:
        size_t v269 = *((void *)v249 + 7);
        int v377 = 0;
        char v378 = 1;
        size_t __idx = v269;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_641;
          case 3:
            goto LABEL_661;
          case 4:
            goto LABEL_649;
          case 5:
            goto LABEL_666;
          case 8:
            goto LABEL_670;
          case 9:
            goto LABEL_652;
          default:
            goto LABEL_675;
        }
      case 2:
        *(double *)&size_t __idx = 0.0;
        int v377 = 0;
        char v378 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&__idx);
      case 3:
        uint64_t v252 = *((void *)v249 + 7);
        std::vector<turi::flexible_type>::vector(&v375, (uint64_t)(*(void *)(v252 + 16) - *(void *)(v252 + 8)) >> 3);
        uint64_t v253 = *(void *)(v252 + 8);
        if (*(void *)(v252 + 16) != v253)
        {
          uint64_t v254 = 0;
          unint64_t v255 = 0;
          while (2)
          {
            std::string::size_type v256 = v375.__r_.__value_.__r.__words[0] + v254;
            switch(*(unsigned char *)(v375.__r_.__value_.__r.__words[0] + v254 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v257 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                if (*((char *)v257 + 31) < 0) {
                  operator delete((void *)v257[1]);
                }
                atomic_ullong *volatile v258 = v257;
                uint64_t v259 = 0x1012C404EF22A49;
                goto LABEL_633;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v266 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                unsigned int v267 = (void *)v266[1];
                if (v267)
                {
                  v266[2] = (atomic_ullong)v267;
                  operator delete(v267);
                }
                atomic_ullong *volatile v258 = v266;
                uint64_t v259 = 0x1080C409938AC02;
                goto LABEL_633;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v260 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                *(void *)long long __str = v260 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_628;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v260 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                *(void *)long long __str = v260 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_628:
                atomic_ullong *volatile v258 = v260;
                uint64_t v259 = 0x1020C405E66F15BLL;
                goto LABEL_633;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v268 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v268 + 2);
                atomic_ullong *volatile v258 = v268;
                unsigned int v265 = -235920773;
                goto LABEL_632;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v256, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_635;
                }
                atomic_ullong *volatile v261 = *(atomic_ullong *volatile *)v256;
                if (!*(void *)v256) {
                  goto LABEL_634;
                }
                v262 = (void *)v261[6];
                if (v262)
                {
                  v261[7] = (atomic_ullong)v262;
                  operator delete(v262);
                }
                unsigned int v263 = (void *)v261[3];
                if (v263)
                {
                  v261[4] = (atomic_ullong)v263;
                  operator delete(v263);
                }
                double v264 = (std::__shared_weak_count *)v261[2];
                if (v264) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v264);
                }
                atomic_ullong *volatile v258 = v261;
                unsigned int v265 = 2071181815;
LABEL_632:
                uint64_t v259 = v265 | 0x1030C4000000000;
LABEL_633:
                MEMORY[0x22A614FA0](v258, v259);
LABEL_634:
                *(void *)std::string::size_type v256 = 0;
LABEL_635:
                *(void *)std::string::size_type v256 = 0;
                *(_DWORD *)(v256 + 8) = 0;
                *(unsigned char *)(v256 + 12) = 1;
                *(void *)std::string::size_type v256 = *(void *)(v253 + 8 * v255++);
                uint64_t v253 = *(void *)(v252 + 8);
                v254 += 16;
                if (v255 >= (*(void *)(v252 + 16) - v253) >> 3) {
                  goto LABEL_675;
                }
                continue;
              default:
                goto LABEL_635;
            }
          }
        }
        goto LABEL_675;
      case 4:
        uint64_t v251 = *((void *)v249 + 7);
        memset(&v375, 0, sizeof(v375));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v375, *(uint64_t **)(v251 + 8), *(uint64_t **)(v251 + 16), (uint64_t)(*(void *)(v251 + 16) - *(void *)(v251 + 8)) >> 4);
        goto LABEL_675;
      case 5:
        uint64_t v270 = *((void *)v249 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v270 + 8), *(uint64_t **)(v270 + 16), (uint64_t)(*(void *)(v270 + 16) - *(void *)(v270 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        *(double *)&size_t __idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        goto LABEL_675;
      case 6:
        double v271 = (double)((uint64_t)(*((void *)v249 + 7) << 8) >> 8);
        double v272 = (double)*((int *)v249 + 16) / 1000000.0;
        int v377 = 0;
        char v378 = 1;
        *(double *)&size_t __idx = v272 + v271;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
LABEL_641:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            size_t v273 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            if (*(char *)(__idx + 31) < 0) {
              operator delete(*(void **)(__idx + 8));
            }
            atomic_ullong *volatile v274 = (void *)v273;
            uint64_t v275 = 0x1012C404EF22A49;
            goto LABEL_674;
          case 3:
LABEL_661:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            size_t v286 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            uint64_t v287 = *(void **)(__idx + 8);
            if (v287)
            {
              *(void *)(__idx + 16) = v287;
              operator delete(v287);
            }
            atomic_ullong *volatile v274 = (void *)v286;
            uint64_t v275 = 0x1080C409938AC02;
            goto LABEL_674;
          case 4:
LABEL_649:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            size_t v280 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            goto LABEL_669;
          case 5:
LABEL_666:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            size_t v280 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_669:
            atomic_ullong *volatile v274 = (void *)v280;
            uint64_t v275 = 0x1020C405E66F15BLL;
            goto LABEL_674;
          case 8:
LABEL_670:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            size_t v288 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(__idx + 16));
            atomic_ullong *volatile v274 = (void *)v288;
            unsigned int v285 = -235920773;
            goto LABEL_673;
          case 9:
LABEL_652:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_675;
            }
            double v281 = (void *)__idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_675;
            }
            atomic_ullong *volatile v282 = *(void **)(__idx + 48);
            if (v282)
            {
              *(void *)(__idx + 56) = v282;
              operator delete(v282);
            }
            uint64_t v283 = (void *)v281[3];
            if (v283)
            {
              v281[4] = v283;
              operator delete(v283);
            }
            int v284 = (std::__shared_weak_count *)v281[2];
            if (v284) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v284);
            }
            atomic_ullong *volatile v274 = v281;
            unsigned int v285 = 2071181815;
LABEL_673:
            uint64_t v275 = v285 | 0x1030C4000000000;
LABEL_674:
            MEMORY[0x22A614FA0](v274, v275);
            break;
          default:
            goto LABEL_675;
        }
        goto LABEL_675;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_675;
      case 8:
        uint64_t v276 = *((void *)v249 + 7);
        uint64_t v277 = *(void *)(v276 + 16);
        *(void *)long long __str = *(void *)(v276 + 8);
        *(void *)&__str[8] = v277;
        if (v277) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v277 + 8), 1u, memory_order_relaxed);
        }
        long long v278 = *(_OWORD *)(v276 + 24);
        long long v279 = *(_OWORD *)(v276 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v276 + 40);
        long long v371 = v279;
        *(_OWORD *)&__str[16] = v278;
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_675;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v249 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_675:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        memset(__str, 0, sizeof(__str));
        LODWORD(v370[0]) = 1065353216;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v359);
        std::string::size_type v289 = v375.__r_.__value_.__l.__size_;
        std::string::size_type v290 = v375.__r_.__value_.__r.__words[0];
        if (v375.__r_.__value_.__l.__size_ != v375.__r_.__value_.__r.__words[0])
        {
          uint64_t v291 = 0;
          unint64_t v292 = 0;
          do
          {
            uint64_t v293 = (uint64_t *)(v290 + v291);
            if (*(unsigned char *)(v290 + v291 + 12) == 2)
            {
              uint64_t v294 = *v293;
              if (*(char *)(*v293 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(v294 + 8), *(void *)(v294 + 16));
              }
              else
              {
                long long v295 = *(_OWORD *)(v294 + 8);
                v350.__r_.__value_.__r.__words[2] = *(void *)(v294 + 24);
                *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v295;
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v359, (unsigned __int8 *)&v350, (uint64_t)&v350);
              if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v350.__r_.__value_.__l.__data_);
              }
              std::string::size_type v289 = v375.__r_.__value_.__l.__size_;
              std::string::size_type v290 = v375.__r_.__value_.__r.__words[0];
            }
            ++v292;
            v291 += 16;
          }
          while (v292 < (uint64_t)(v289 - v290) >> 4);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__str);
        *(void *)long long __str = &v375;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        break;
      default:
        goto LABEL_803;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "false_values");
  v350.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  int v296 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v350)+ 68);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v296 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v350, "false_values");
    *(void *)long long __str = &v350;
    unint64_t v297 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v350.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((unsigned char *)v297 + 68))
    {
      case 0:
        size_t v298 = *((void *)v297 + 7);
        char v378 = 0;
        int v377 = 0;
        size_t __idx = v298;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_742;
          case 3:
            goto LABEL_762;
          case 4:
            goto LABEL_750;
          case 5:
            goto LABEL_767;
          case 8:
            goto LABEL_771;
          case 9:
            goto LABEL_753;
          default:
            goto LABEL_776;
        }
      case 1:
        size_t v317 = *((void *)v297 + 7);
        int v377 = 0;
        char v378 = 1;
        size_t __idx = v317;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
            goto LABEL_742;
          case 3:
            goto LABEL_762;
          case 4:
            goto LABEL_750;
          case 5:
            goto LABEL_767;
          case 8:
            goto LABEL_771;
          case 9:
            goto LABEL_753;
          default:
            goto LABEL_776;
        }
      case 2:
        *(double *)&size_t __idx = 0.0;
        int v377 = 0;
        char v378 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&__idx);
      case 3:
        uint64_t v300 = *((void *)v297 + 7);
        std::vector<turi::flexible_type>::vector(&v375, (uint64_t)(*(void *)(v300 + 16) - *(void *)(v300 + 8)) >> 3);
        uint64_t v301 = *(void *)(v300 + 8);
        if (*(void *)(v300 + 16) != v301)
        {
          uint64_t v302 = 0;
          unint64_t v303 = 0;
          while (2)
          {
            std::string::size_type v304 = v375.__r_.__value_.__r.__words[0] + v302;
            switch(*(unsigned char *)(v375.__r_.__value_.__r.__words[0] + v302 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v305 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                if (*((char *)v305 + 31) < 0) {
                  operator delete((void *)v305[1]);
                }
                atomic_ullong *volatile v306 = v305;
                uint64_t v307 = 0x1012C404EF22A49;
                goto LABEL_734;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v314 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                uint64_t v315 = (void *)v314[1];
                if (v315)
                {
                  v314[2] = (atomic_ullong)v315;
                  operator delete(v315);
                }
                atomic_ullong *volatile v306 = v314;
                uint64_t v307 = 0x1080C409938AC02;
                goto LABEL_734;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v308 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                *(void *)long long __str = v308 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_729;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v308 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                *(void *)long long __str = v308 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_729:
                atomic_ullong *volatile v306 = v308;
                uint64_t v307 = 0x1020C405E66F15BLL;
                goto LABEL_734;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v316 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v316 + 2);
                atomic_ullong *volatile v306 = v316;
                unsigned int v313 = -235920773;
                goto LABEL_733;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v304, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_736;
                }
                atomic_ullong *volatile v309 = *(atomic_ullong *volatile *)v304;
                if (!*(void *)v304) {
                  goto LABEL_735;
                }
                uint64_t v310 = (void *)v309[6];
                if (v310)
                {
                  v309[7] = (atomic_ullong)v310;
                  operator delete(v310);
                }
                double v311 = (void *)v309[3];
                if (v311)
                {
                  v309[4] = (atomic_ullong)v311;
                  operator delete(v311);
                }
                uint64_t v312 = (std::__shared_weak_count *)v309[2];
                if (v312) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v312);
                }
                atomic_ullong *volatile v306 = v309;
                unsigned int v313 = 2071181815;
LABEL_733:
                uint64_t v307 = v313 | 0x1030C4000000000;
LABEL_734:
                MEMORY[0x22A614FA0](v306, v307);
LABEL_735:
                *(void *)std::string::size_type v304 = 0;
LABEL_736:
                *(void *)std::string::size_type v304 = 0;
                *(_DWORD *)(v304 + 8) = 0;
                *(unsigned char *)(v304 + 12) = 1;
                *(void *)std::string::size_type v304 = *(void *)(v301 + 8 * v303++);
                uint64_t v301 = *(void *)(v300 + 8);
                v302 += 16;
                if (v303 >= (*(void *)(v300 + 16) - v301) >> 3) {
                  goto LABEL_776;
                }
                continue;
              default:
                goto LABEL_736;
            }
          }
        }
        goto LABEL_776;
      case 4:
        uint64_t v299 = *((void *)v297 + 7);
        memset(&v375, 0, sizeof(v375));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v375, *(uint64_t **)(v299 + 8), *(uint64_t **)(v299 + 16), (uint64_t)(*(void *)(v299 + 16) - *(void *)(v299 + 8)) >> 4);
        goto LABEL_776;
      case 5:
        uint64_t v318 = *((void *)v297 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v318 + 8), *(uint64_t **)(v318 + 16), (uint64_t)(*(void *)(v318 + 16) - *(void *)(v318 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        *(double *)&size_t __idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        goto LABEL_776;
      case 6:
        double v319 = (double)((uint64_t)(*((void *)v297 + 7) << 8) >> 8);
        double v320 = (double)*((int *)v297 + 16) / 1000000.0;
        int v377 = 0;
        char v378 = 1;
        *(double *)&size_t __idx = v320 + v319;
        memset(&v375, 0, sizeof(v375));
        *(void *)long long __str = &v375;
        __str[8] = 0;
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        v375.__r_.__value_.__r.__words[2] = v375.__r_.__value_.__r.__words[0] + 16;
        v375.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v375.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v379, (uint64_t)v375.__r_.__value_.__l.__data_);
        switch(v378)
        {
          case 2:
LABEL_742:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            size_t v321 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            if (*(char *)(__idx + 31) < 0) {
              operator delete(*(void **)(__idx + 8));
            }
            unint64_t v322 = (void *)v321;
            uint64_t v323 = 0x1012C404EF22A49;
            goto LABEL_775;
          case 3:
LABEL_762:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            size_t v334 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            uint64_t v335 = *(void **)(__idx + 8);
            if (v335)
            {
              *(void *)(__idx + 16) = v335;
              operator delete(v335);
            }
            unint64_t v322 = (void *)v334;
            uint64_t v323 = 0x1080C409938AC02;
            goto LABEL_775;
          case 4:
LABEL_750:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            size_t v328 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            goto LABEL_770;
          case 5:
LABEL_767:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            size_t v328 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            *(void *)long long __str = __idx + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_770:
            unint64_t v322 = (void *)v328;
            uint64_t v323 = 0x1020C405E66F15BLL;
            goto LABEL_775;
          case 8:
LABEL_771:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            size_t v336 = __idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(__idx + 16));
            unint64_t v322 = (void *)v336;
            unsigned int v333 = -235920773;
            goto LABEL_774;
          case 9:
LABEL_753:
            if (atomic_fetch_add((atomic_ullong *volatile)__idx, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_776;
            }
            uint64_t v329 = (void *)__idx;
            if (*(double *)&__idx == 0.0) {
              goto LABEL_776;
            }
            size_t v330 = *(void **)(__idx + 48);
            if (v330)
            {
              *(void *)(__idx + 56) = v330;
              operator delete(v330);
            }
            std::string v331 = (void *)v329[3];
            if (v331)
            {
              v329[4] = v331;
              operator delete(v331);
            }
            uint64_t v332 = (std::__shared_weak_count *)v329[2];
            if (v332) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v332);
            }
            unint64_t v322 = v329;
            unsigned int v333 = 2071181815;
LABEL_774:
            uint64_t v323 = v333 | 0x1030C4000000000;
LABEL_775:
            MEMORY[0x22A614FA0](v322, v323);
            break;
          default:
            goto LABEL_776;
        }
        goto LABEL_776;
      case 7:
        memset(&v375, 0, sizeof(v375));
        goto LABEL_776;
      case 8:
        uint64_t v324 = *((void *)v297 + 7);
        uint64_t v325 = *(void *)(v324 + 16);
        *(void *)long long __str = *(void *)(v324 + 8);
        *(void *)&__str[8] = v325;
        if (v325) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v325 + 8), 1u, memory_order_relaxed);
        }
        long long v326 = *(_OWORD *)(v324 + 24);
        long long v327 = *(_OWORD *)(v324 + 56);
        *(_OWORD *)v370 = *(_OWORD *)(v324 + 40);
        long long v371 = v327;
        *(_OWORD *)&__str[16] = v326;
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
        goto LABEL_776;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((void *)v297 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v375, 0, sizeof(v375));
        if (v370[1])
        {
          *(void **)&long long v371 = v370[1];
          operator delete(v370[1]);
        }
        if (*(void *)&__str[16])
        {
          *(void *)&__str[24] = *(void *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
LABEL_776:
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        memset(__str, 0, sizeof(__str));
        LODWORD(v370[0]) = 1065353216;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v361);
        std::string::size_type v337 = v375.__r_.__value_.__l.__size_;
        std::string::size_type v338 = v375.__r_.__value_.__r.__words[0];
        if (v375.__r_.__value_.__l.__size_ != v375.__r_.__value_.__r.__words[0])
        {
          uint64_t v339 = 0;
          unint64_t v340 = 0;
          do
          {
            if (*(unsigned char *)(v338 + v339 + 12) == 2)
            {
              uint64_t v341 = *(void *)(v338 + v339);
              if (*(char *)(v341 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(v341 + 8), *(void *)(v341 + 16));
              }
              else
              {
                long long v342 = *(_OWORD *)(v341 + 8);
                v350.__r_.__value_.__r.__words[2] = *(void *)(v341 + 24);
                *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v342;
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v361, (unsigned __int8 *)&v350, (uint64_t)&v350);
              if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v350.__r_.__value_.__l.__data_);
              }
              std::string::size_type v337 = v375.__r_.__value_.__l.__size_;
              std::string::size_type v338 = v375.__r_.__value_.__r.__words[0];
            }
            ++v340;
            v339 += 16;
          }
          while (v340 < (uint64_t)(v337 - v338) >> 4);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__str);
        *(void *)long long __str = &v375;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        break;
      default:
        goto LABEL_803;
    }
  }
  turi::csv_line_tokenizer::init((turi::csv_line_tokenizer *)&v352);
}

void sub_2241C6504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,std::locale a40)
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (*(char *)(v42 - 137) < 0)
  {
    operator delete(*(void **)(v42 - 160));
    if ((v41 & 1) == 0)
    {
LABEL_8:
      if (a36 < 0) {
        operator delete(a31);
      }
      *(void *)(v42 - 160) = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));
      turi::csv_line_tokenizer::~csv_line_tokenizer((turi::csv_line_tokenizer *)&a40);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x218]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v40);
  goto LABEL_8;
}

void *turi::unity_sframe::construct_from_planner_node(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v38[3] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v32 = 0;
  *(void *)uint64_t v34 = 0;
  *(_DWORD *)&v34[7] = 0x10000;
  char v35 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  memset(v38, 0, 24);
  int v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  unsigned int v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::optimize_planner_graph(&v24, (uint64_t)&v32, v26);
  long long v7 = *(_OWORD *)&v26[0].__locale_;
  v26[0].__locale_ = 0;
  v26[1].__locale_ = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (v26[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26[1].__locale_);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 32);
  unint64_t v22 = *(void *)(a1 + 24);
  char v23 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = turi::query_eval::planner::online_materialization_recommended((uint64_t)v26, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v10)
  {
    unsigned int v11 = (int *)global_logger();
    if (v11[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v11)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      char v12 = (file_logger *)global_logger();
      started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_planner_node", 310, 1);
      uint64_t v14 = pthread_getspecific(*((void *)started + 74));
      if (v14 && *((unsigned char *)v14 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Forced materialization of SFrame due to size of lazy graph: ", 60);
      }
      uint64_t v15 = pthread_getspecific(*((void *)started + 74));
      if (v15)
      {
        if (*((unsigned char *)v15 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[2] - 24) + 16));
          int v16 = std::locale::use_facet(v26, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
          std::locale::~locale(v26);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    uint64_t v17 = *(void *)(a1 + 32);
    v20[0] = *(void *)(a1 + 24);
    v20[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    long long v28 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long __p = 0u;
    memset(v27, 0, sizeof(v27));
    BYTE11(v28) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    *((void *)&v30 + 1) = 0;
    long long v31 = 0uLL;
    turi::query_eval::planner::materialize_as_planner_node((uint64_t)&v21, v20, (uint64_t *)v27);
  }
  if (a1 + 40 != a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  v26[0].__locale_ = (std::locale::__imp *)v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  if (v37 < 0) {
    operator delete(v36);
  }
  return std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v33);
}

void sub_2241C7D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::locale::~locale(&a17);
  turi::query_eval::materialize_options::~materialize_options((void **)(v21 - 168));
  _Unwind_Resume(a1);
}

void turi::unity_sframe::save_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v3[0] = -1;
  memset(&v3[1], 0, 24);
  v3[4] = v4;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v9 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_write((uint64_t)v3, (uint64_t)&v2, 0);
}

void sub_2241C7FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a20 < 0) {
      operator delete(a15);
    }
    turi::dir_archive::~dir_archive((turi::dir_archive *)&a40);
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::save_frame_by_index_file(turi::unity_sframe *a1, uint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_frame_by_index_file", 345, 1);
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    long long v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::unity_sframe::get_underlying_sframe(a1, &v13);
  locale = v13.__locale_;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::sframe::save(locale, (uint64_t)&__p);
}

void sub_2241C8290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::save_frame_reference(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v3[0] = -1;
  memset(&v3[1], 0, 24);
  v3[4] = v4;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v9 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_write((uint64_t)v3, (uint64_t)&v2, 0);
}

void sub_2241C84DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a2)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
    turi::dir_archive::~dir_archive((turi::dir_archive *)&a42);
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::get_underlying_sframe(turi::unity_sframe *this@<X0>, void *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "get_underlying_sframe", 645, 1);
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    long long v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (!*((void *)this + 8))
  {
    if (((*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 304))(this) & 1) == 0) {
      (*(void (**)(turi::unity_sframe *))(*(void *)this + 296))(this);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 4);
    uint64_t v17 = *((void *)this + 3);
    BOOL v18 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v21, 0, sizeof(v21));
    BYTE11(v22) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    *((void *)&v24 + 1) = 0;
    long long v25 = 0uLL;
    turi::query_eval::planner::materialize((uint64_t)&v17, (uint64_t)v21, (const turi::sframe *)&v26);
    std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>((uint64_t)&v26, &v19);
    long long v11 = v19;
    long long v19 = 0uLL;
    char v12 = (std::__shared_weak_count *)*((void *)this + 9);
    *((_OWORD *)this + 4) = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    turi::sframe::~sframe((turi::sframe *)&v26);
    long long v20 = (void **)&v24 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SBYTE7(v24) < 0) {
      operator delete(__p[0]);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v21 + 1);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        turi::sframe::set_column_name(*((void *)this + 8), v14++, (std::string *)(*((void *)this + 5) + v13));
        v13 += 24;
      }
      while (v14 < (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this));
    }
  }
  uint64_t v15 = *((void *)this + 9);
  *a2 = *((void *)this + 8);
  a2[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2241C8944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::save(turi::unity_sframe *this, turi::oarchive *a2)
{
  LOBYTE(v16[0]) = 1;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v4)
    {
      size_t v9 = 2 * v4 + 2;
      *((void *)a2 + 5) = v9;
      uint64_t v10 = (void *)*((void *)a2 + 2);
      if (v10)
      {
        long long v5 = (unsigned char *)*v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          long long v5 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        long long v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      long long v5 = (unsigned char *)*((void *)a2 + 3);
    }
    v5[(*((void *)a2 + 4))++] = 1;
  }
  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v16);
  if ((v17 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (size_t)v16[1];
  }
  long long v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 10);
  if (v15 < 0) {
    long long v7 = (void **)__p[0];
  }
  if (v6)
  {
    if ((v17 & 0x80u) == 0) {
      long long v8 = v16;
    }
    else {
      long long v8 = (void **)v16[0];
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".frame_idx");
  turi::unity_sframe::save_frame_by_index_file(this, (uint64_t)__p);
}

void sub_2241C8B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sframe::load(turi::unity_sframe *this, turi::iarchive *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 56))(this);
  uint64_t v4 = *((void *)a2 + 2);
  if (!v4) {
    return std::istream::read();
  }
  uint64_t v5 = *((void *)a2 + 3);
  int v6 = *(unsigned __int8 *)(v4 + v5);
  *((void *)a2 + 3) = v5 + 1;
  if (v6)
  {
    turi::sframe::sframe((turi::sframe *)v7);
    turi::sframe::load((turi::sframe *)v7, a2);
  }
  return result;
}

void sub_2241C8C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void turi::unity_sframe::clear(turi::unity_sframe *this)
{
  std::string v2 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t turi::unity_sframe::size(turi::unity_sframe *this)
{
  std::string v2 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = turi::query_eval::infer_planner_node_length((uint64_t)&v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v3 == -1)
  {
    turi::unity_sframe::get_underlying_sframe(this, &v5);
    if (*(unsigned char *)(v5 + 288)) {
      uint64_t v3 = *(void *)(v5 + 32);
    }
    else {
      uint64_t v3 = 0;
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return v3;
}

void sub_2241C8D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::unity_sframe::num_columns(turi::unity_sframe *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3);
}

unint64_t turi::unity_sframe::column_index(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_index", 386, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), a2);
  if (v10 == *(void *)(a1 + 48))
  {
    v13.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sframe::column_index(std::string const&)::$_0::operator()();
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v10 - *(void *)(a1 + 40)) >> 3);
}

void sub_2241C8F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t turi::unity_sframe::column_name(turi::unity_sframe *this, unint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_name", 396, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = *((void *)this + 5);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 6) - v10) >> 3) <= a2) {
    std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
  }
  return v10 + 24 * a2;
}

void sub_2241C9110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL turi::unity_sframe::contains_column(turi::unity_sframe *a1, unsigned __int8 **a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "contains_column", 403, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::unity_sframe::get_underlying_sframe(a1, &v13);
  BOOL v10 = turi::sframe::contains_column((uint64_t)v13.__locale_, a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v10;
}

void sub_2241C92C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void turi::unity_sframe::select_column(turi::unity_sframe *a1, uint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      goto LABEL_24;
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 410, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet(&v20, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  BOOL v10 = (int *)global_logger();
  if (v10[169] > 1) {
    goto LABEL_22;
  }
  if (!cppipc::must_cancel((cppipc *)v10))
  {
    size_t v11 = (file_logger *)global_logger();
    BOOL v12 = file_logger::start_stream(v11, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 413, 1);
    std::locale v13 = pthread_getspecific(*((void *)v12 + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Select Column ", 14);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v22 = *(std::string *)a2;
    }
    uint64_t v14 = file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&v22);
    char v15 = pthread_getspecific(*(void *)(v14 + 592));
    if (v15)
    {
      if (*((unsigned char *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[2] - 24) + 16));
        int v16 = std::locale::use_facet(&v20, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v14);
        if (*(_DWORD *)(v14 + 600) == 7)
        {
          __print_back_trace();
          long long v19 = __cxa_allocate_exception(8uLL);
          void *v19 = "LOG_FATAL encountered";
          __cxa_throw(v19, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
LABEL_22:
    (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(void *)a1 + 128))(&v20, a1);
    uint64_t v17 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v20.__locale_, v21, (unsigned __int8 **)a2);
    if (v17 != v21) {
      turi::unity_sframe::select_column(a1, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v17 - (unint64_t)v20.__locale_) >> 3));
    }
    uint64_t v23 = a2;
    turi::unity_sframe::select_column(std::string const&)::$_0::operator()();
  }
LABEL_24:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_2241C9678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::select_column(turi::unity_sframe *this, uint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 430, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet(v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = *((void *)this + 4);
  v15[0] = *((void *)this + 3);
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (char *)operator new(8uLL);
  v13[0].__locale_ = (std::locale::__imp *)v11;
  *(void *)size_t v11 = a2;
  v13[1].__locale_ = (std::locale::__imp *)(v11 + 8);
  uint64_t v14 = v11 + 8;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v15, (uint64_t **)v13);
}

void sub_2241C9914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void turi::unity_sframe::select_columns(void *a1@<X0>, unsigned __int8 ***a2@<X1>, _OWORD *a3@<X8>)
{
  int v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_columns", 442, 1);
    size_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        size_t v11 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, a2, (uint64_t)&v13);
  turi::unity_sframe::select_columns(a1, (unint64_t **)&v13, a3);
  if (v13.__locale_)
  {
    locale = v13.__locale_;
    operator delete(v13.__locale_);
  }
}

void sub_2241C9B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

double turi::unity_sframe::select_columns@<D0>(void *a1@<X0>, unint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  int v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_columns", 464, 1);
    size_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        size_t v11 = std::locale::use_facet((const std::locale *)&v25, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  BOOL v12 = a2[1];
  if (*a2 != v12)
  {
    std::vector<std::string>::vector(&v25, v12 - *a2);
    std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long const*>>((uint64_t)v24, *a2, a2[1]);
    uint64_t v13 = (char *)a2[1] - (char *)*a2;
    uint64_t v14 = v24[2];
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v24, (void *)v24[1]);
    if (v14 == v13 >> 3)
    {
      char v15 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          unint64_t v18 = v15[v17];
          uint64_t v19 = a1[5];
          if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((a1[6] - v19) >> 3)) {
            turi::unity_sframe::select_columns(std::vector<unsigned long> const&)::$_1::operator()();
          }
          std::string::operator=(&v25.__begin_[v16], (const std::string *)(v19 + 24 * v18));
          ++v17;
          char v15 = *a2;
          ++v16;
        }
        while (v17 < a2[1] - *a2);
      }
      uint64_t v20 = a1[4];
      v23[0] = a1[3];
      v23[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v23, (uint64_t **)a2);
    }
    turi::unity_sframe::select_columns(std::vector<unsigned long> const&)::$_0::operator()();
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v25);
  double result = *(double *)&v25.__begin_;
  *a3 = *(_OWORD *)&v25.__begin_;
  return result;
}

void sub_2241C9E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
}

void turi::unity_sframe::_convert_column_names_to_indices(uint64_t a1@<X0>, unsigned __int8 ***a2@<X1>, uint64_t a3@<X8>)
{
  v26[0] = 0;
  v26[1] = 0;
  std::vector<std::string> v25 = (uint64_t *)v26;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v4 = (char *)a2[1] - (char *)*a2;
  if (v4)
  {
    std::vector<unsigned long>::reserve((void **)a3, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        uint64_t v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), v7);
        if (v9 == *(void *)(a1 + 48))
        {
          unint64_t v24 = (unint64_t)v7;
          turi::unity_sframe::_convert_column_names_to_indices(std::vector<std::string> const&)::$_0::operator()();
        }
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)(a1 + 40)) >> 3);
        unint64_t v24 = v10;
        for (std::vector<std::string>::pointer i = v26[0]; i; std::vector<std::string>::pointer i = (void *)*i)
        {
          unint64_t v12 = i[4];
          if (v10 >= v12)
          {
            if (v12 >= v10) {
              turi::unity_sframe::_convert_column_names_to_indices(std::vector<std::string> const&)::$_1::operator()();
            }
            ++i;
          }
        }
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v25, &v24, (uint64_t *)&v24);
        uint64_t v14 = *(unint64_t **)(a3 + 8);
        unint64_t v13 = *(void *)(a3 + 16);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = *(unint64_t **)a3;
          uint64_t v17 = ((uint64_t)v14 - *(void *)a3) >> 3;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v20);
            uint64_t v16 = *(unint64_t **)a3;
            uint64_t v14 = *(unint64_t **)(a3 + 8);
          }
          else
          {
            uint64_t v21 = 0;
          }
          std::string v22 = (unint64_t *)&v21[8 * v17];
          unint64_t *v22 = v24;
          char v15 = v22 + 1;
          while (v14 != v16)
          {
            unint64_t v23 = *--v14;
            *--std::string v22 = v23;
          }
          *(void *)a3 = v22;
          *(void *)(a3 + 8) = v15;
          *(void *)(a3 + 16) = &v21[8 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *uint64_t v14 = v24;
          char v15 = v14 + 1;
        }
        *(void *)(a3 + 8) = v15;
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a3, 0, 0, 0);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_2241CA13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  char v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::copy(turi::unity_sframe *this@<X0>, _OWORD *a2@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>(v4, &v10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = v11;
  uint64_t v7 = v12;
  v9[0] = v10;
  v9[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr, turi::unity_sframe *))(*(void *)this + 128))(v8, this);
  turi::unity_sframe::construct_from_planner_node(v7, v9, (uint64_t)v8);
  uint64_t v13 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *a2 = v12;
  long long v12 = 0uLL;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
}

void sub_2241CA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  *(void *)(v20 - 40) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void sub_2241CA2C0()
{
  if (!v0) {
    JUMPOUT(0x2241CA2ACLL);
  }
  JUMPOUT(0x2241CA2A4);
}

void turi::unity_sframe::add_column(turi::unity_sframe *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v39 = *MEMORY[0x263EF8340];
  int v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "add_column", 502, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        size_t v11 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (!*a2) {
    turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator()();
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v35 = *(std::string *)a3;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    turi::unity_sframe::generate_next_column_name(a1, (uint64_t)&v34);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    std::string v35 = v34;
  }
  (*(void (**)(std::string *__return_ptr, turi::unity_sframe *))(*(void *)a1 + 128))(&v34, a1);
  uint64_t v13 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_, (unsigned __int8 **)a3);
  if (v13 != v34.__r_.__value_.__l.__size_)
  {
    uint64_t v29 = (std::string *)a3;
    turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_1::operator()();
  }
  uint64_t v15 = *a2;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 112))(a1))
  {
    uint64_t v16 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 64))(a1);
    if (v16 != (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15))
    {
      uint64_t v29 = (std::string *)a3;
      turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_2::operator()();
    }
    uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 4);
    uint64_t v27 = *((void *)a1 + 3);
    long long v28 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::unity_sarray::get_planner_node(v15, &v25);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(&v27, &v25, &v38);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    (*(void (**)(std::string **__return_ptr, turi::unity_sframe *))(*(void *)a1 + 128))(&v29, a1);
    unint64_t v18 = v30;
    if (v30 >= (std::string *)p_data)
    {
      uint64_t v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (long long *)&v35);
    }
    else
    {
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v30, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v19 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
        v30->__r_.__value_.__r.__words[2] = v35.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = v18 + 1;
    }
    long long v30 = v20;
    std::string v22 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    long long v24 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    if (v38.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    turi::unity_sframe::construct_from_planner_node((uint64_t)a1, (uint64_t *)&v24, (uint64_t)&v29);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v36 = (void ***)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    uint64_t v21 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_) {
LABEL_48:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  else
  {
    turi::unity_sarray::get_planner_node(v15, &v32);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v38, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    }
    else {
      std::string v38 = v35;
    }
    uint64_t v29 = 0;
    long long v30 = 0;
    p_double data = 0;
    uint64_t v36 = (void ***)&v29;
    char v37 = 0;
    uint64_t v29 = (std::string *)operator new(0x18uLL);
    long long v30 = v29;
    p_double data = (void **)&v29[1].__r_.__value_.__l.__data_;
    long long v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v38, &v39, v29);
    turi::unity_sframe::construct_from_planner_node((uint64_t)a1, &v32, (uint64_t)&v29);
    uint64_t v36 = (void ***)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = v33;
    if (v33) {
      goto LABEL_48;
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v29 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_2241CA7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v29 - 112) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 112));
  long long v31 = *(std::__shared_weak_count **)(v29 - 88);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  a15 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"data != nullptr", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 505, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241CAA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::generate_next_column_name(turi::unity_sframe *this@<X0>, uint64_t a2@<X8>)
{
  v24[2] = *MEMORY[0x263EF8340];
  (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)this + 128))(&v22);
  std::string::basic_string[abi:ne180100]<0>(&v20, "X");
  std::to_string(&__str, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3) + 1);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = std::string::append(&v20, (const std::string::value_type *)p_str, size);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v20, v22, v23);
  while (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)a2))
  {
    std::string::append((std::string *)a2, ".");
    std::to_string(&__p, 1uLL);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)a2;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = std::string::insert(&__p, 0, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)&__str))
    {
      unint64_t v12 = 2;
      do
      {
        std::to_string(&__p, v12);
        int v13 = *(char *)(a2 + 23);
        if (v13 >= 0) {
          uint64_t v14 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v14 = *(const std::string::value_type **)a2;
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v15 = *(void *)(a2 + 8);
        }
        uint64_t v16 = std::string::insert(&__p, 0, v14, v15);
        std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
        v24[0] = v16->__r_.__value_.__l.__size_;
        *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
        char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v17;
        __str.__r_.__value_.__l.__size_ = v24[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v24 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v18;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v12;
      }
      while (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)&__str));
    }
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_2241CADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (*(char *)(v30 + 23) < 0) {
    operator delete(*(void **)v30);
  }
  a15 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::add_columns(void *a1, void *a2, std::vector<std::string> *a3)
{
  long long v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "add_columns", 548, 1);
    std::string::size_type v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v31);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v31.__locale_ = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v12 = (void *)a2[1];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v28 = 0;
  if (v12 == a2)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = v12;
    do
    {
      ++v13;
      uint64_t v14 = (void *)v14[1];
    }
    while (v14 != a2);
  }
  std::vector<std::shared_ptr<turi::unity_sarray_base>>::__init_with_size[abi:ne180100]<std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>>(&v28, v12, a2, v13);
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  std::vector<std::string>::resize(a3, a2[2], &__x);
  uint64_t v15 = a1[3];
  uint64_t v16 = (std::__shared_weak_count *)a1[4];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>(v15, &v25);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  (*(void (**)(void *__return_ptr, void *))(*a1 + 128))(v24, a1);
  std::string::size_type v17 = v28;
  if (v29 != (void **)v28)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      long long v20 = *(_OWORD *)&v17[2 * v19].__locale_;
      long long v23 = v20;
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, long long *, std::string *))(*a1 + 200))(a1, &v23, &a3->__begin_[v18]);
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
      ++v19;
      std::string::size_type v17 = v28;
      ++v18;
    }
    while (v19 < ((char *)v29 - (char *)v28) >> 4);
  }
  uint64_t v21 = (std::__shared_weak_count *)a1[9];
  a1[8] = 0;
  a1[9] = 0;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::string v34 = (void **)v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  long long v28 = &v31;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_2241CB198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  std::locale::~locale((std::locale *)(v25 - 80));
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz, std::vector<std::string>::const_reference __x)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v6 = __sz >= v5;
  std::vector<std::string>::size_type v7 = __sz - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::string>::__append(this, v7, __x);
  }
  else if (!v6)
  {
    uint64_t v8 = &this->__begin_[__sz];
    while (end != v8)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v8;
  }
}

void turi::unity_sframe::set_column_name(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  BOOL v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      goto LABEL_49;
    }
    std::vector<std::string>::size_type v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_column_name", 573, 1);
    std::string::size_type v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v31);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v12 = (int *)global_logger();
  if (v12[169] <= 1)
  {
    if (!cppipc::must_cancel((cppipc *)v12))
    {
      unint64_t v13 = (file_logger *)global_logger();
      uint64_t v14 = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_column_name", 574, 1);
      uint64_t v15 = pthread_getspecific(*((void *)v14 + 74));
      if (v15 && *((unsigned char *)v15 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
      }
      uint64_t v16 = file_logger::operator<<<unsigned long>((uint64_t)v14);
      std::string::size_type v17 = pthread_getspecific(*(void *)(v16 + 592));
      if (v17 && *((unsigned char *)v17 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)",", 1);
      }
      if ((char)a3[23] < 0) {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a3, *((void *)a3 + 1));
      }
      else {
        std::string v32 = *(std::string *)a3;
      }
      uint64_t v18 = file_logger::operator<<<std::string>(v16, (uint64_t)&v32);
      unint64_t v19 = pthread_getspecific(*(void *)(v18 + 592));
      if (v19)
      {
        if (*((unsigned char *)v19 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(v19[2] - 24) + 16));
          long long v20 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
          std::locale::~locale(&v31);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v18);
          if (*(_DWORD *)(v18 + 600) == 7)
          {
            __print_back_trace();
            uint64_t v30 = __cxa_allocate_exception(8uLL);
            void *v30 = "LOG_FATAL encountered";
            __cxa_throw(v30, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      goto LABEL_25;
    }
LABEL_49:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_25:
  if ((*(uint64_t (**)(void *))(*a1 + 112))(a1) <= a2) {
    turi::unity_sframe::set_column_name(unsigned long,std::string)::$_0::operator()();
  }
  (*(void (**)(std::locale *__return_ptr, void *))(*a1 + 128))(&v31, a1);
  for (unint64_t i = 0; i < (*(uint64_t (**)(void *))(*a1 + 112))(a1); ++i)
  {
    if (i != a2)
    {
      std::string v22 = (unsigned __int8 *)v31.__locale_ + 24 * i;
      uint64_t v23 = v22[23];
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = v22[23];
      }
      else {
        uint64_t v24 = *((void *)v22 + 1);
      }
      uint64_t v25 = a3[23];
      int v26 = (char)v25;
      if ((v25 & 0x80u) != 0) {
        uint64_t v25 = *((void *)a3 + 1);
      }
      if (v24 == v25)
      {
        if (v26 >= 0) {
          uint64_t v27 = a3;
        }
        else {
          uint64_t v27 = *(unsigned __int8 **)a3;
        }
        if ((v23 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v22, v27, *((void *)v22 + 1)))
          {
LABEL_48:
            uint64_t v33 = (std::locale *)a3;
            turi::unity_sframe::set_column_name(unsigned long,std::string)::$_1::operator()();
          }
        }
        else
        {
          if (!v22[23]) {
            goto LABEL_48;
          }
          while (*v22 == *v27)
          {
            ++v22;
            ++v27;
            if (!--v23) {
              goto LABEL_48;
            }
          }
        }
      }
    }
  }
  std::string::operator=((std::string *)(a1[5] + 24 * a2), (const std::string *)a3);
  long long v28 = (std::__shared_weak_count *)a1[9];
  a1[8] = 0;
  a1[9] = 0;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v33 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_2241CB7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::remove_column(turi::unity_sframe *this, unint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] < 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      goto LABEL_45;
    }
    std::vector<std::string>::size_type v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "remove_column", 589, 1);
    std::vector<std::string>::size_type v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::string::size_type v9 = std::locale::use_facet(&v36, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_47;
        }
      }
    }
  }
  uint64_t v10 = (int *)global_logger();
  if (v10[169] > 2) {
    goto LABEL_17;
  }
  if (!cppipc::must_cancel((cppipc *)v10))
  {
    long long v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "remove_column", 590, 1);
    unint64_t v13 = pthread_getspecific(*((void *)v12 + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
    }
    uint64_t v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
    uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
    if (!v15
      || !v15[280]
      || (std::ios_base::getloc((const std::ios_base *)&v15[*(void *)(*((void *)v15 + 2) - 24) + 16]),
          uint64_t v16 = std::locale::use_facet(&v36, MEMORY[0x263F8C108]),
          ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10),
          std::locale::~locale(&v36),
          std::ostream::put(),
          std::ostream::flush(),
          file_logger::stream_flush((file_logger *)v14),
          *(_DWORD *)(v14 + 600) != 7))
    {
LABEL_17:
      if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this) > a2)
      {
        unint64_t v17 = 0;
        v36.__locale_ = 0;
        char v37 = 0;
        std::string v38 = 0;
        while (v17 < (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this))
        {
          if (v17 != a2)
          {
            uint64_t v18 = v37;
            if (v37 >= v38)
            {
              locale = v36.__locale_;
              uint64_t v21 = (v37 - v36.__locale_) >> 3;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = v38 - v36.__locale_;
              if ((v38 - v36.__locale_) >> 2 > v22) {
                unint64_t v22 = v23 >> 2;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v38, v24);
                locale = v36.__locale_;
                uint64_t v18 = v37;
              }
              else
              {
                uint64_t v25 = 0;
              }
              int v26 = (std::locale::__imp *)&v25[8 * v21];
              *(void *)int v26 = v17;
              unint64_t v19 = (std::locale::__imp *)((char *)v26 + 8);
              while (v18 != locale)
              {
                uint64_t v27 = *((void *)v18 - 1);
                uint64_t v18 = (std::locale::__imp *)((char *)v18 - 8);
                *((void *)v26 - 1) = v27;
                int v26 = (std::locale::__imp *)((char *)v26 - 8);
              }
              v36.__locale_ = v26;
              char v37 = v19;
              std::string v38 = (std::locale::__imp *)&v25[8 * v24];
              if (locale) {
                operator delete(locale);
              }
            }
            else
            {
              *(void *)char v37 = v17;
              unint64_t v19 = (std::locale::__imp *)((char *)v18 + 8);
            }
            char v37 = v19;
          }
          ++v17;
        }
        if (v36.__locale_ != v37)
        {
          uint64_t v28 = *((void *)this + 4);
          v31[0] = *((void *)this + 3);
          v31[1] = v28;
          if (v28) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v31, (uint64_t **)&v36);
        }
        _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v35);
        uint64_t v29 = v35;
        memset(v34, 0, sizeof(v34));
        memset(__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(&v32, "");
        turi::sframe::open_for_write(v29, v34, __p, &v32, 1, 1);
      }
      turi::unity_sframe::remove_column(unsigned long)::$_0::operator()();
    }
LABEL_47:
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "LOG_FATAL encountered";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
LABEL_45:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_2241CBE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  a19 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  uint64_t v28 = *(void **)(v26 - 88);
  if (v28)
  {
    *(void *)(v26 - 80) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::swap_columns(turi::unity_sframe *this, unint64_t a2, unint64_t a3)
{
  unint64_t v37 = a2;
  unint64_t v36 = a3;
  BOOL v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      goto LABEL_28;
    }
    std::vector<std::string>::size_type v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "swap_columns", 621, 1);
    std::string::size_type v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_31;
        }
      }
    }
  }
  unint64_t v12 = (int *)global_logger();
  if (v12[169] > 1) {
    goto LABEL_20;
  }
  if (!cppipc::must_cancel((cppipc *)v12))
  {
    unint64_t v13 = (file_logger *)global_logger();
    uint64_t v14 = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "swap_columns", 622, 1);
    uint64_t v15 = pthread_getspecific(*((void *)v14 + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
    }
    uint64_t v16 = file_logger::operator<<<unsigned long>((uint64_t)v14);
    unint64_t v17 = pthread_getspecific(*(void *)(v16 + 592));
    if (v17 && *((unsigned char *)v17 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)", ", 2);
    }
    uint64_t v18 = file_logger::operator<<<unsigned long>(v16);
    unint64_t v19 = pthread_getspecific(*(void *)(v18 + 592));
    if (!v19
      || !v19[280]
      || (std::ios_base::getloc((const std::ios_base *)&v19[*(void *)(*((void *)v19 + 2) - 24) + 16]),
          long long v20 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]),
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10),
          std::locale::~locale(&v35),
          std::ostream::put(),
          std::ostream::flush(),
          file_logger::stream_flush((file_logger *)v18),
          *(_DWORD *)(v18 + 600) != 7))
    {
LABEL_20:
      if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this) > a2)
      {
        if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this) > a3)
        {
          (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(void *)this + 128))(&v35, this);
          unint64_t v21 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this);
          std::vector<unsigned long>::vector(&__p, v21);
          for (unint64_t i = 0; ; ++i)
          {
            unint64_t v23 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this);
            unint64_t v24 = __p;
            if (i >= v23) {
              break;
            }
            *((void *)__p + i) = i;
          }
          uint64_t v25 = *((void *)__p + a2);
          *((void *)__p + a2) = *((void *)__p + a3);
          v24[a3] = v25;
          uint64_t v26 = (char *)v35.__locale_ + 24 * a2;
          uint64_t v27 = (char *)v35.__locale_ + 24 * a3;
          uint64_t v28 = *((void *)v26 + 2);
          long long v29 = *(_OWORD *)v26;
          uint64_t v30 = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
          *((void *)v26 + 2) = v30;
          *(_OWORD *)uint64_t v27 = v29;
          *((void *)v27 + 2) = v28;
          uint64_t v31 = *((void *)this + 4);
          v33[0] = *((void *)this + 3);
          v33[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v33, (uint64_t **)&__p);
        }
        v35.__locale_ = (std::locale::__imp *)&v36;
        turi::unity_sframe::swap_columns(unsigned long,unsigned long)::$_1::operator()((unint64_t **)&v35);
      }
      v35.__locale_ = (std::locale::__imp *)&v37;
      turi::unity_sframe::swap_columns(unsigned long,unsigned long)::$_0::operator()((unint64_t **)&v35);
    }
LABEL_31:
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "LOG_FATAL encountered";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
LABEL_28:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_2241CC3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::locale a18)
{
}

void turi::unity_sframe::transform()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform", 675, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      std::vector<std::string>::size_type v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_sframe::transform(std::string const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()();
}

void sub_2241CC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sframe::transform_native(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  std::string::size_type v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v16 = (file_logger *)global_logger();
    started = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform_native", 694, 1);
    uint64_t v18 = pthread_getspecific(*((void *)started + 74));
    if (v18 && *((unsigned char *)v18 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v19 = pthread_getspecific(*((void *)started + 74));
    if (v19)
    {
      if (*((unsigned char *)v19 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(v19[2] - 24) + 16));
        long long v20 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::get_unity_global_singleton(v10, v11, v12, v13, v14, v15, (uint64_t *)&v30);
  uint64_t v21 = turi::neural_net::external_float_array::shape(v30.__locale_);
  turi::toolkit_function_registry::get_native_function(v21, a2, (uint64_t)v33);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  (*(void (**)(long long **__return_ptr, uint64_t))(*(void *)a1 + 128))(&v24, a1);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)&v30, (uint64_t)v33);
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)&v30);
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, (long long *)v32.__r_.__value_.__l.__data_, (long long *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  long long v29 = 0;
  unint64_t v22 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v22 = &unk_26D770528;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v22 + 8), (uint64_t)v26);
  *(std::string *)(v22 + 40) = v27;
  memset(&v27, 0, sizeof(v27));
  long long v29 = v22;
  turi::unity_sframe::transform_lambda(a1, (uint64_t)v28, a3, a5);
}

void sub_2241CC91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26)
{
}

void turi::unity_sframe::transform_lambda(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string::size_type v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform_lambda", 721, 1);
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        uint64_t v13 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  v17[0] = v14;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::__value_func[abi:ne180100]((uint64_t)v19, a2);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node((uint64_t)v17, (uint64_t)v19, a3, a4);
}

void sub_2241CCC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, char a18)
{
}

void *turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)a1);
}

void turi::unity_sframe::flat_map()
{
}

void turi::unity_sframe::dtype(turi::unity_sframe *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::vector<std::string>::size_type v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "dtype", 793, 1);
    std::locale v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::string::size_type v9 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v12 = *((void *)this + 3);
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v12, a2);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_2241CCEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void turi::unity_sframe::dtype(turi::unity_sframe *this, uint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::vector<std::string>::size_type v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "dtype", 798, 1);
    std::locale v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
      std::string::size_type v9 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_sframe::select_column(this, a2);
}

void sub_2241CD0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::string *turi::unity_sframe::column_names@<X0>(turi::unity_sframe *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::vector<std::string>::size_type v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_names", 813, 1);
    std::locale v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::string::size_type v9 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v10 = (long long *)*((void *)this + 5);
  std::locale v11 = (long long *)*((void *)this + 6);
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v10, v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 3));
}

void sub_2241CD2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sframe::head(turi::unity_sframe *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::string v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "head", 820, 1);
    std::vector<std::string>::size_type v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    BOOL v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
      std::locale v7 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v12);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::sframe::sframe((turi::sframe *)&v12);
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(void *)this + 128))(v11, this);
  (*(void (**)(turi::unity_sframe **__return_ptr, turi::unity_sframe *))(*(void *)this + 120))(v10, this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)&v12, v11, v10, &__p, 1, 1);
}

void sub_2241CD68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::locale a50)
{
}

void sub_2241CD780()
{
}

void turi::unity_sframe::_head(turi::unity_sframe *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 144))(&v1);
  (*(void (**)(void))(*(void *)v1 + 384))();
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_2241CD824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::_tail(turi::unity_sframe *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 152))(&v1);
  (*(void (**)(void))(*(void *)v1 + 384))();
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_2241CD8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sframe::tail(turi::unity_sframe *this, unint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      goto LABEL_23;
    }
    std::vector<std::string>::size_type v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "tail", 864, 1);
    std::locale v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::string::size_type v9 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_24:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = (int *)global_logger();
  if (v10[169] > 2) {
    goto LABEL_17;
  }
  if (cppipc::must_cancel((cppipc *)v10)) {
LABEL_23:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  std::locale v11 = (file_logger *)global_logger();
  std::locale v12 = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "tail", 865, 1);
  uint64_t v13 = pthread_getspecific(*((void *)v12 + 74));
  if (v13 && *((unsigned char *)v13 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
  }
  uint64_t v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
  uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
  if (v15)
  {
    if (*((unsigned char *)v15 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[2] - 24) + 16));
      uint64_t v16 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v22);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v14);
      if (*(_DWORD *)(v14 + 600) == 7) {
        goto LABEL_24;
      }
    }
  }
LABEL_17:
  unint64_t v17 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
  if (v17 >= a2) {
    uint64_t v18 = v17 - a2;
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = *(uint64_t (**)(turi::unity_sframe *, uint64_t, uint64_t, unint64_t))(*(void *)this + 368);
  return v19(this, v18, 1, v17);
}

void sub_2241CDC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sframe::logical_filter_split(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void v33[2] = *MEMORY[0x263EF8340];
  BOOL v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  std::string v27 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 176))(v32, a1, &v26);
  uint64_t v7 = *a2;
  int v30 = 0;
  char v31 = 0;
  uint64_t v29 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, void **))(*(void *)v7 + 304))(&v24, v7, &v29, __p);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 176))(v33, a1, &v24);
  std::list<std::shared_ptr<turi::unity_sframe_base>>::list(a3, v32, 2);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    std::string::size_type v9 = (std::__shared_weak_count *)v32[i];
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  switch(v31)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v29;
        if (v29)
        {
          if (*(char *)(v29 + 31) < 0) {
            operator delete(*(void **)(v29 + 8));
          }
          std::locale v11 = (void *)v10;
          uint64_t v12 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = v29;
        if (v29)
        {
          uint64_t v14 = *(void **)(v29 + 8);
          if (v14)
          {
            *(void *)(v29 + 16) = v14;
            operator delete(v14);
          }
          std::locale v11 = (void *)v13;
          uint64_t v12 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v29;
        if (v29)
        {
          uint64_t v28 = (void **)(v29 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
          goto LABEL_37;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v29;
        if (v29)
        {
          uint64_t v28 = (void **)(v29 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v28);
LABEL_37:
          std::locale v11 = (void *)v15;
          uint64_t v12 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v21 = v29;
        if (v29)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v29 + 16));
          std::locale v11 = (void *)v21;
          unsigned int v20 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = (void *)v29;
        if (v29)
        {
          unint64_t v17 = *(void **)(v29 + 48);
          if (v17)
          {
            *(void *)(v29 + 56) = v17;
            operator delete(v17);
          }
          uint64_t v18 = (void *)v16[3];
          if (v18)
          {
            v16[4] = v18;
            operator delete(v18);
          }
          unint64_t v19 = (std::__shared_weak_count *)v16[2];
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          std::locale v11 = v16;
          unsigned int v20 = 2071181815;
LABEL_41:
          uint64_t v12 = v20 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x22A614FA0](v11, v12);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v29 = 0;
  int v30 = 0;
  char v31 = 0;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_2241CDF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  uint64_t v25 = 24;
  while (1)
  {
    uint64_t v26 = *(std::__shared_weak_count **)(v23 + v25);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    v25 -= 16;
    if (v25 == -8)
    {
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      if (a15 < 0) {
        operator delete(__p);
      }
      switch(a23)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v27 = a21;
          if (!a21) {
            goto LABEL_35;
          }
          if (*(char *)(a21 + 31) < 0) {
            operator delete(*(void **)(a21 + 8));
          }
          uint64_t v28 = (void *)v27;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_34;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v32 = a21;
          if (!a21) {
            goto LABEL_35;
          }
          uint64_t v33 = *(void **)(a21 + 8);
          if (v33)
          {
            *(void *)(a21 + 16) = v33;
            operator delete(v33);
          }
          uint64_t v28 = (void *)v32;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_34;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v30 = a21;
          if (!a21) {
            goto LABEL_35;
          }
          a20 = a21 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
          goto LABEL_29;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v30 = a21;
          if (!a21) {
            goto LABEL_35;
          }
          a20 = a21 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
LABEL_29:
          uint64_t v28 = (void *)v30;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_34;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v34 = a21;
          if (!a21) {
            goto LABEL_35;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(a21 + 16));
          uint64_t v28 = (void *)v34;
          unsigned int v31 = -235920773;
          goto LABEL_33;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)a21, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a21) {
            goto LABEL_35;
          }
          uint64_t v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a21);
          unsigned int v31 = 2071181815;
LABEL_33:
          uint64_t v29 = v31 | 0x1030C4000000000;
LABEL_34:
          MEMORY[0x22A614FA0](v28, v29);
LABEL_35:
          a21 = 0;
          a22 = 0;
          a23 = 0;
          if (a19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](a19);
          }
          _Unwind_Resume(exception_object);
          return;
        default:
          goto LABEL_35;
      }
    }
  }
}

void turi::unity_sframe::logical_filter(uint64_t a1, uint64_t *a2)
{
  uint64_t v13[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "logical_filter", 880, 1);
    BOOL v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        uint64_t v8 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = a2[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    v13[0] = &unk_26D770628;
    v13[3] = v13;
    turi::unity_sarray::transform_lambda(v9, (uint64_t)v13, 0, 1, 0);
  }
  turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
}

void sub_2241CE5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index != nullptr", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::vector<std::string>::size_type v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 882, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241CE7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::append(turi::unity_sframe *a1@<X0>, std::__shared_weak_count **a2@<X1>, _OWORD *a3@<X8>)
{
  BOOL v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "append", 913, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::locale v11 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v61);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v13 = *a2;
  std::locale v12 = a2[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 112))(a1))
  {
    if (((uint64_t (*)(std::__shared_weak_count *))v13->__vftable[2].__on_zero_shared_weak)(v13))
    {
      uint64_t v14 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 112))(a1);
      if (v14 != ((uint64_t (*)(std::__shared_weak_count *))v13->__vftable[2].__on_zero_shared_weak)(v13)) {
        turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_0::operator()();
      }
      (*(void (**)(unsigned __int8 **__return_ptr, turi::unity_sframe *))(*(void *)a1 + 128))(&v67, a1);
      ((void (*)(long long **__return_ptr, std::__shared_weak_count *))v13->__vftable[3].~__shared_weak_count_0)(&v65, v13);
      uint64_t v16 = v67;
      uint64_t v15 = (unsigned __int8 *)v68;
      unint64_t v17 = ((char *)v68 - (char *)v67) / 24;
      uint64_t v18 = (unsigned __int8 *)v65;
      if ((char *)v68 - (char *)v67 == (char *)v66 - (char *)v65)
      {
        if (v67 == (unsigned __int8 *)v68) {
          goto LABEL_41;
        }
        unint64_t v19 = v67;
        while (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v19, v18))
        {
          v19 += 24;
          v18 += 24;
          if (v19 == v15) {
            goto LABEL_41;
          }
        }
        uint64_t v22 = (uint64_t)v67;
        uint64_t v21 = v68;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v68 - (char *)v67) >> 3);
      }
      else
      {
        unint64_t v20 = ((char *)v68 - (char *)v67) / 24;
        uint64_t v21 = v68;
        uint64_t v22 = (uint64_t)v67;
      }
      unint64_t v23 = 126 - 2 * __clz(v20);
      if (v21 == (long long *)v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v22, v21, (uint64_t)&v62, v24, 1);
      unint64_t v25 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
      if (v66 == v65) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v25;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v65, v66, (uint64_t)&v62, v26, 1);
      uint64_t v28 = v67;
      uint64_t v27 = (const std::string *)v68;
      uint64_t v29 = (const void **)v66;
      uint64_t v30 = (const void **)v65;
      if ((char *)v68 - (char *)v67 != (char *)v66 - (char *)v65)
      {
LABEL_73:
        long long v62 = 0;
        int v63 = 0;
        uint64_t v64 = 0;
        std::set_difference[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::vector<std::string>>>((std::string::size_type)v28, v27, v30, v29, (uint64_t)&v62, 0);
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v61);
        uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Error: Columns [", 16);
        uint64_t v46 = turi::operator<<<std::string>(v45, (uint64_t *)&v62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"] not found in appending SFrame.", 32);
        __p[0] = &v61;
        turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_1::operator()();
      }
      while (v28 != (unsigned __int8 *)v27)
      {
        if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v28, (unsigned __int8 *)v30))
        {
          uint64_t v28 = v67;
          uint64_t v27 = (const std::string *)v68;
          uint64_t v29 = (const void **)v66;
          uint64_t v30 = (const void **)v65;
          goto LABEL_73;
        }
        v28 += 24;
        v30 += 3;
      }
      (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(void *)a1 + 128))(&v61, a1);
      ((void (*)(std::__shared_weak_count **__return_ptr, std::__shared_weak_count *, std::locale *))v13->__vftable[4].__get_deleter)(&v62, v13, &v61);
      uint64_t v13 = v62;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      __p[0] = &v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_41:
      (*(void (**)(std::__shared_weak_count **__return_ptr, turi::unity_sframe *))(*(void *)a1 + 120))(&v62, a1);
      ((void (*)(void **__return_ptr, std::__shared_weak_count *))v13->__vftable[3].~__shared_weak_count)(__p, v13);
      if (v15 == v16)
      {
        if (!__p[0]) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        if (v17 <= 1) {
          uint64_t v33 = 1;
        }
        else {
          uint64_t v33 = (v15 - v16) / 24;
        }
        do
        {
          if (*((unsigned __int8 *)&v62->__vftable + v32) != *((unsigned __int8 *)__p[0] + v32))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v61);
            unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Column types are not the same in two SFrames (Column ", 53);
            unint64_t v37 = &v67[v31];
            int v38 = (char)v67[v31 + 23];
            if (v38 >= 0) {
              uint64_t v39 = (uint64_t)&v67[v31];
            }
            else {
              uint64_t v39 = *(void *)v37;
            }
            if (v38 >= 0) {
              uint64_t v40 = v37[23];
            }
            else {
              uint64_t v40 = *((void *)v37 + 1);
            }
            int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v39, v40);
            uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", attempting to append column of type ", 38);
            unint64_t v43 = *((char *)__p[0] + v32);
            if (v43 > 9) {
              uint64_t v44 = "undefined";
            }
            else {
              uint64_t v44 = off_2646D6F80[v43];
            }
            size_t v47 = strlen(v44);
            long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v47);
            long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to column of type ", 19);
            unint64_t v50 = *((char *)&v62->__vftable + v32);
            if (v50 > 9) {
              uint64_t v51 = "undefined";
            }
            else {
              uint64_t v51 = off_2646D6F80[v50];
            }
            size_t v53 = strlen(v51);
            uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v51, v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)").", 2);
            uint64_t v59 = &v61;
            turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_2::operator()();
          }
          ++v32;
          v31 += 24;
        }
        while (v33 != v32);
      }
      __p[1] = __p[0];
      operator delete(__p[0]);
LABEL_50:
      if (v62)
      {
        int v63 = v62;
        operator delete(v62);
      }
      v61.__locale_ = (std::locale::__imp *)&v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      v61.__locale_ = (std::locale::__imp *)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      uint64_t v34 = (std::__shared_weak_count *)*((void *)a1 + 4);
      uint64_t v57 = *((void *)a1 + 3);
      uint64_t v58 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      shared_owners = (std::__shared_weak_count *)v13[1].__shared_owners_;
      uint64_t v55 = v13[1].__vftable;
      uint64_t v56 = shared_owners;
      if (shared_owners) {
        atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(&v57, &v55, &v67);
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      operator new();
    }
    turi::unity_sframe::copy(a1, a3);
  }
  else
  {
    *a3 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_2241CF0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::locale a19)
{
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v22 = *(void **)(v20 - 168);
  if (v22)
  {
    *(void *)(v20 - 160) = v22;
    operator delete(v22);
  }
  a19.__locale_ = (std::locale::__imp *)(v20 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19.__locale_ = (std::locale::__imp *)(v20 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

std::__wrap_iter<const std::string *>::iterator_type std::set_difference[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::vector<std::string>>>(std::string::size_type a1, const std::string *a2, const void **a3, const void **a4, uint64_t a5, uint64_t a6)
{
  std::locale v12 = a2;
  var8.__r_.__value_.__r.__words[0] = a1;
  uint64_t v10 = a4;
  std::locale v11 = a3;
  v9[0] = a5;
  v9[1] = a6;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::insert_iterator<std::vector<std::string>> &>(&var8, &v12, &v11, &v10, (uint64_t)v9, (uint64_t)&v7, v8);
  return v8[1].__i_;
}

void *turi::operator<<<std::string>(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "[");
  std::string::basic_string[abi:ne180100]<0>(v8, ", ");
  std::string::basic_string[abi:ne180100]<0>(__p, "]");
  uint64_t v4 = turi::print_range<std::vector<std::string>>(a1, a2, (uint64_t)v10, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return v4;
}

void sub_2241CF330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sframe::begin_iterator(turi::unity_sframe *this)
{
  std::string v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "begin_iterator", 993, 1);
    std::vector<std::string>::size_type v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    BOOL v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        char v7 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v10);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
  if (result)
  {
    turi::unity_sframe::get_underlying_sframe(this, &v10);
    turi::sframe::get_reader(v10.__locale_);
  }
  return result;
}

void sub_2241CF668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12)
{
}

void *turi::unity_sframe::iterator_get_next@<X0>(turi::unity_sframe *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (void *)(*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
  if (result)
  {
    std::vector<std::vector<turi::flexible_type>>::reserve(a3, a2);
    char v7 = (void **)((char *)this + 96);
    uint64_t v8 = (void *)((char *)this + 104);
    while (1)
    {
      uint64_t result = *v7;
      char v9 = (void *)*v8;
      if (**v7 == *(void *)*v8 && result[4] == v9[4] && result[5] == v9[5]) {
        break;
      }
      char v11 = (uint64_t **)turi::sframe_iterator::operator*(result);
      unint64_t v12 = a3[1];
      if (v12 >= a3[2])
      {
        uint64_t v13 = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(a3, v11);
      }
      else
      {
        std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)a3, v11);
        uint64_t v13 = v12 + 24;
      }
      a3[1] = v13;
      uint64_t result = turi::sframe_iterator::operator++(*v7);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
      if (v10 >= a2) {
        goto LABEL_11;
      }
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
LABEL_11:
    if (v10 < a2)
    {
      unint64_t v14 = *((void *)this + 10);
      uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)this + 11) + 16))(*((void *)this + 11));
      if (v14 < (unint64_t)result) {
        operator new();
      }
    }
  }
  return result;
}

void sub_2241CF8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *turi::sframe_iterator::operator++(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  while (v2 != v3)
  {
    turi::sarray_iterator<turi::flexible_type>::operator++(v2);
    v2 += 48;
  }
  uint64_t v4 = a1[5];
  if ((unint64_t)(v4 + 1) < a1[6]) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = a1[6];
  }
  a1[5] = v5;
  return a1;
}

void turi::unity_sframe::save_as_csv(void *a1, std::string::size_type a2, uint64_t **a3)
{
  v165[19] = *MEMORY[0x263EF8340];
  BOOL v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_as_csv", 1039, 1);
    char v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        char v11 = std::locale::use_facet(&v154, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v154);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v13 = (file_logger *)global_logger();
    unint64_t v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_as_csv", 1040, 1);
    uint64_t v15 = pthread_getspecific(*((void *)v14 + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v143 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v143, &__p);
    uint64_t v16 = file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)&__p);
    unint64_t v17 = pthread_getspecific(*(void *)(v16 + 592));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[2] - 24) + 16));
        uint64_t v18 = std::locale::use_facet(&v154, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v154);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v16);
        if (*(_DWORD *)(v16 + 600) == 7)
        {
          __print_back_trace();
          BOOL v120 = __cxa_allocate_exception(8uLL);
          void *v120 = "LOG_FATAL encountered";
          __cxa_throw(v120, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v145 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, ",");
  int v132 = 570491228;
  std::string::basic_string[abi:ne180100]<0>(&v133, "\n");
  char v134 = 1;
  int v135 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v136, "");
  uint64_t v142 = 0;
  long long v141 = 0u;
  long long v140 = 0u;
  long long v139 = 0u;
  long long v138 = 0u;
  long long v137 = 0u;
  MEMORY[0x22A614700](&v131, ",");
  int v132 = 570491228;
  int v135 = 2;
  char v134 = 1;
  MEMORY[0x22A614700](&v136, "");
  memset(&v130, 0, sizeof(v130));
  memset(&v129, 0, sizeof(v129));
  memset(&v128, 0, sizeof(v128));
  char v127 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v154, "delimiter");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  int v19 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v156) < 0) {
    operator delete(v154.__locale_);
  }
  if (v19 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "delimiter");
    v154.__locale_ = (std::locale::__imp *)v124;
    uint64_t v20 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
    uint64_t v21 = (turi::flexible_type_impl *)((char *)v20 + 56);
    switch(*((unsigned char *)v20 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_36;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_36:
        v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
        uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v156 = v24;
        uint64_t v157 = MEMORY[0x263F8C318] + 16;
        if (v160 < 0) {
          operator delete(v159);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v161);
        goto LABEL_43;
      case 2:
        uint64_t v22 = *(void *)v21;
        if (*(char *)(*(void *)v21 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v22 + 8), *(void *)(v22 + 16));
        }
        else
        {
          long long v23 = *(_OWORD *)(v22 + 8);
          __str.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
        }
        goto LABEL_43;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v21 + 8));
        goto LABEL_43;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v21 + 8));
        goto LABEL_43;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v21 + 8));
        goto LABEL_43;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v21, &__str);
        goto LABEL_43;
      case 7:
        memset(&__str, 0, sizeof(__str));
        goto LABEL_43;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_43;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v21 + 8));
LABEL_43:
        if (v125 < 0) {
          operator delete(v124[0]);
        }
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        char v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::string::operator=(&v131, &__str);
          char v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        if (v26 < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        break;
      default:
LABEL_395:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "escape_char");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  int v27 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v156) < 0) {
    operator delete(v154.__locale_);
  }
  if (v27 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "escape_char");
    v154.__locale_ = (std::locale::__imp *)v124;
    uint64_t v28 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
    uint64_t v29 = (turi::flexible_type_impl *)((char *)v28 + 56);
    switch(*((unsigned char *)v28 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_63;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_63:
        v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
        uint64_t v32 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v156 = v32;
        uint64_t v157 = MEMORY[0x263F8C318] + 16;
        if (v160 < 0) {
          operator delete(v159);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v161);
        break;
      case 2:
        uint64_t v30 = *(void *)v29;
        if (*(char *)(*(void *)v29 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v30 + 8), *(void *)(v30 + 16));
        }
        else
        {
          long long v31 = *(_OWORD *)(v30 + 8);
          __str.__r_.__value_.__r.__words[2] = *(void *)(v30 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v31;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v29 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v29 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v29 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v29, &__str);
        break;
      case 7:
        memset(&__str, 0, sizeof(__str));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v29 + 8));
        break;
      default:
        goto LABEL_395;
    }
    if (v125 < 0) {
      operator delete(v124[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_)
      {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_77:
        LOBYTE(v132) = p_str->__r_.__value_.__s.__data_[0];
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      p_str = &__str;
      goto LABEL_77;
    }
    BYTE1(v132) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_78:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_79:
  std::string::basic_string[abi:ne180100]<0>(&v154, "double_quote");
  uint64_t v34 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v35 = v34;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v35) {
      goto LABEL_99;
    }
  }
  else if (!v34)
  {
    goto LABEL_99;
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "double_quote");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  unint64_t v36 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  char v37 = 1;
  switch(*((unsigned char *)v36 + 68))
  {
    case 0:
      uint64_t v40 = *((void *)v36 + 7);
      goto LABEL_93;
    case 1:
      BOOL v38 = *((double *)v36 + 7) == 0.0;
      goto LABEL_94;
    case 2:
      uint64_t v39 = *((void *)v36 + 7);
      if (*(char *)(v39 + 31) < 0) {
        uint64_t v40 = *(void *)(v39 + 16);
      }
      else {
        uint64_t v40 = *(unsigned __int8 *)(v39 + 31);
      }
LABEL_93:
      BOOL v38 = v40 == 0;
      goto LABEL_94;
    case 3:
    case 4:
    case 5:
      BOOL v38 = *(void *)(*((void *)v36 + 7) + 8) == *(void *)(*((void *)v36 + 7) + 16);
      goto LABEL_94;
    case 7:
      goto LABEL_97;
    case 8:
      BOOL v38 = *(void *)(*((void *)v36 + 7) + 64) == 3;
LABEL_94:
      char v37 = v38;
LABEL_97:
      BYTE2(v132) = v37 ^ 1;
      if (SHIBYTE(v156) < 0) {
        operator delete(v154.__locale_);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_99:
  std::string::basic_string[abi:ne180100]<0>(&v154, "quote_char");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  int v41 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v156) < 0) {
    operator delete(v154.__locale_);
  }
  if (v41 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "quote_char");
    v154.__locale_ = (std::locale::__imp *)v124;
    uint64_t v42 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
    unint64_t v43 = (turi::flexible_type_impl *)((char *)v42 + 56);
    switch(*((unsigned char *)v42 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_111;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_111:
        v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
        uint64_t v46 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v156 = v46;
        uint64_t v157 = MEMORY[0x263F8C318] + 16;
        if (v160 < 0) {
          operator delete(v159);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v161);
        break;
      case 2:
        uint64_t v44 = *(void *)v43;
        if (*(char *)(*(void *)v43 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v44 + 8), *(void *)(v44 + 16));
        }
        else
        {
          long long v45 = *(_OWORD *)(v44 + 8);
          __str.__r_.__value_.__r.__words[2] = *(void *)(v44 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v43 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v43 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v43 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v43, &__str);
        break;
      case 7:
        memset(&__str, 0, sizeof(__str));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v43 + 8));
        break;
      default:
        goto LABEL_395;
    }
    if (v125 < 0) {
      operator delete(v124[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_) {
        HIBYTE(v132) = *__str.__r_.__value_.__l.__data_;
      }
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      HIBYTE(v132) = __str.__r_.__value_.__s.__data_[0];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "quote_level");
  uint64_t v47 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v48 = v47;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v48) {
      goto LABEL_156;
    }
  }
  else if (!v47)
  {
    goto LABEL_156;
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "quote_level");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  long long v49 = (double *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  double v50 = v49[7];
  int v51 = *((_DWORD *)v49 + 16);
  unsigned int v52 = *((unsigned __int8 *)v49 + 68);
  if (v52 <= 9 && ((1 << v52) & 0x33C) != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 1uLL);
  }
  if (SHIBYTE(v156) < 0) {
    operator delete(v154.__locale_);
  }
  switch(v52)
  {
    case 0u:
      if (*(void *)&v50 >= 4uLL) {
        goto LABEL_137;
      }
      goto LABEL_155;
    case 1u:
      if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_150;
      }
      if (v50 == 1.0) {
        goto LABEL_149;
      }
      if (v50 == 2.0) {
        goto LABEL_152;
      }
      if (v50 == 3.0) {
        goto LABEL_154;
      }
      goto LABEL_137;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 7u:
    case 8u:
    case 9u:
      goto LABEL_137;
    case 6u:
      uint64_t v53 = *(void *)&v50 & 0xFFFFFFFFFFFFFFLL;
      if ((*(void *)&v50 & 0xFFFFFFFFFFFFFFLL) != 0 || v51)
      {
        if (v53 == 1 && !v51)
        {
LABEL_149:
          LODWORD(v50) = 1;
        }
        else if (v53 == 2 && !v51)
        {
LABEL_152:
          LODWORD(v50) = 2;
        }
        else
        {
          if (v53 != 3 || v51) {
LABEL_137:
          }
            turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_0::operator()();
LABEL_154:
          LODWORD(v50) = 3;
        }
      }
      else
      {
LABEL_150:
        LODWORD(v50) = 0;
      }
LABEL_155:
      int v135 = LODWORD(v50);
      break;
    default:
      goto LABEL_395;
  }
LABEL_156:
  std::string::basic_string[abi:ne180100]<0>(&v154, "header");
  uint64_t v54 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v55 = v54;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v55) {
      goto LABEL_174;
    }
  }
  else if (!v54)
  {
    goto LABEL_174;
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "header");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  uint64_t v56 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  char v57 = 1;
  switch(*((unsigned char *)v56 + 68))
  {
    case 0:
      uint64_t v60 = *((void *)v56 + 7);
      goto LABEL_168;
    case 1:
      BOOL v58 = *((double *)v56 + 7) == 0.0;
      goto LABEL_169;
    case 2:
      uint64_t v59 = *((void *)v56 + 7);
      if (*(char *)(v59 + 31) < 0) {
        uint64_t v60 = *(void *)(v59 + 16);
      }
      else {
        uint64_t v60 = *(unsigned __int8 *)(v59 + 31);
      }
LABEL_168:
      BOOL v58 = v60 == 0;
      goto LABEL_169;
    case 3:
    case 4:
    case 5:
      BOOL v58 = *(void *)(*((void *)v56 + 7) + 8) == *(void *)(*((void *)v56 + 7) + 16);
      goto LABEL_169;
    case 7:
      goto LABEL_172;
    case 8:
      BOOL v58 = *(void *)(*((void *)v56 + 7) + 64) == 3;
LABEL_169:
      char v57 = v58;
LABEL_172:
      char v134 = v57 ^ 1;
      if (SHIBYTE(v156) < 0) {
        operator delete(v154.__locale_);
      }
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_174:
  std::string::basic_string[abi:ne180100]<0>(&v154, "line_terminator");
  uint64_t v61 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v62 = v61;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v62) {
      goto LABEL_202;
    }
  }
  else if (!v61)
  {
    goto LABEL_202;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "line_terminator");
  v154.__locale_ = (std::locale::__imp *)v124;
  int v63 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
  uint64_t v64 = (turi::flexible_type_impl *)((char *)v63 + 56);
  switch(*((unsigned char *)v63 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_187;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_187:
      v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
      uint64_t v67 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v156 = v67;
      uint64_t v157 = MEMORY[0x263F8C318] + 16;
      if (v160 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v161);
      break;
    case 2:
      uint64_t v65 = *(void *)v64;
      if (*(char *)(*(void *)v64 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v65 + 8), *(void *)(v65 + 16));
      }
      else
      {
        long long v66 = *(_OWORD *)(v65 + 8);
        __str.__r_.__value_.__r.__words[2] = *(void *)(v65 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v64 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v64 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v64 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v64, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v64 + 8));
      break;
    default:
      goto LABEL_395;
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  std::string::size_type v68 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v68 = __str.__r_.__value_.__l.__size_;
  }
  if (v68)
  {
    std::string::operator=(&v133, &__str);
    char v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v69 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_202:
  std::string::basic_string[abi:ne180100]<0>(&v154, "na_value");
  uint64_t v70 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v71 = v70;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v71) {
      goto LABEL_230;
    }
  }
  else if (!v70)
  {
    goto LABEL_230;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "na_value");
  v154.__locale_ = (std::locale::__imp *)v124;
  long long v72 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
  double v73 = (turi::flexible_type_impl *)((char *)v72 + 56);
  switch(*((unsigned char *)v72 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_215;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_215:
      v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
      uint64_t v76 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v156 = v76;
      uint64_t v157 = MEMORY[0x263F8C318] + 16;
      if (v160 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v161);
      break;
    case 2:
      uint64_t v74 = *(void *)v73;
      if (*(char *)(*(void *)v73 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v74 + 8), *(void *)(v74 + 16));
      }
      else
      {
        long long v75 = *(_OWORD *)(v74 + 8);
        __str.__r_.__value_.__r.__words[2] = *(void *)(v74 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v75;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v73 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v73 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v73 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v73, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v73 + 8));
      break;
    default:
      goto LABEL_395;
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  std::string::size_type v77 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v77 = __str.__r_.__value_.__l.__size_;
  }
  if (v77)
  {
    std::string::operator=(&v136, &__str);
    char v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v78 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_230:
  std::string::basic_string[abi:ne180100]<0>(&v154, "file_header");
  uint64_t v79 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v80 = v79;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v80) {
      goto LABEL_254;
    }
  }
  else if (!v79)
  {
    goto LABEL_254;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "file_header");
  v154.__locale_ = (std::locale::__imp *)v124;
  uint64_t v81 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
  uint64_t v82 = (turi::flexible_type_impl *)((char *)v81 + 56);
  switch(*((unsigned char *)v81 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_243;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_243:
      v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
      uint64_t v85 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v156 = v85;
      uint64_t v157 = MEMORY[0x263F8C318] + 16;
      if (v160 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v161);
      break;
    case 2:
      uint64_t v83 = *(void *)v82;
      if (*(char *)(*(void *)v82 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v83 + 8), *(void *)(v83 + 16));
      }
      else
      {
        long long v84 = *(_OWORD *)(v83 + 8);
        __str.__r_.__value_.__r.__words[2] = *(void *)(v83 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v84;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v82 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v82 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v82 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v82, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v82 + 8));
      break;
    default:
      goto LABEL_395;
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  std::string v130 = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v125 < 0) {
    operator delete(v124[0]);
  }
LABEL_254:
  std::string::basic_string[abi:ne180100]<0>(&v154, "file_footer");
  uint64_t v86 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v87 = v86;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v87) {
      goto LABEL_278;
    }
  }
  else if (!v86)
  {
    goto LABEL_278;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "file_footer");
  v154.__locale_ = (std::locale::__imp *)v124;
  uint64_t v88 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
  int v89 = (turi::flexible_type_impl *)((char *)v88 + 56);
  switch(*((unsigned char *)v88 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_267;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_267:
      v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
      uint64_t v92 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v156 = v92;
      uint64_t v157 = MEMORY[0x263F8C318] + 16;
      if (v160 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v161);
      break;
    case 2:
      uint64_t v90 = *(void *)v89;
      if (*(char *)(*(void *)v89 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v90 + 8), *(void *)(v90 + 16));
      }
      else
      {
        long long v91 = *(_OWORD *)(v90 + 8);
        __str.__r_.__value_.__r.__words[2] = *(void *)(v90 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v91;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v89 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v89 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v89 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v89, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v89 + 8));
      break;
    default:
      goto LABEL_395;
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  std::string v129 = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v125 < 0) {
    operator delete(v124[0]);
  }
LABEL_278:
  std::string::basic_string[abi:ne180100]<0>(&v154, "line_prefix");
  uint64_t v93 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v94 = v93;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v154.__locale_);
    if (!v94) {
      goto LABEL_302;
    }
  }
  else if (!v93)
  {
    goto LABEL_302;
  }
  std::string::basic_string[abi:ne180100]<0>(v124, "line_prefix");
  v154.__locale_ = (std::locale::__imp *)v124;
  uint64_t v95 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v124, (uint64_t)&std::piecewise_construct, &v154);
  uint64_t v96 = (turi::flexible_type_impl *)((char *)v95 + 56);
  switch(*((unsigned char *)v95 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_291;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v154);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_291:
      v154.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
      uint64_t v99 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::locale *)((char *)&v154 + *((void *)v154.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v156 = v99;
      uint64_t v157 = MEMORY[0x263F8C318] + 16;
      if (v160 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v161);
      break;
    case 2:
      uint64_t v97 = *(void *)v96;
      if (*(char *)(*(void *)v96 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v97 + 8), *(void *)(v97 + 16));
      }
      else
      {
        long long v98 = *(_OWORD *)(v97 + 8);
        __str.__r_.__value_.__r.__words[2] = *(void *)(v97 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v98;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v96 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (uint64_t *)(*(void *)v96 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v96 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v96, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v154, (void *)(*(void *)v96 + 8));
      break;
    default:
      goto LABEL_395;
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  std::string v128 = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v125 < 0) {
    operator delete(v124[0]);
  }
LABEL_302:
  std::string::basic_string[abi:ne180100]<0>(&v154, "_no_prefix_on_first_value");
  uint64_t v100 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v154.__locale_);
  uint64_t v101 = v100;
  if ((SHIBYTE(v156) & 0x80000000) == 0)
  {
    if (!v100) {
      goto LABEL_320;
    }
LABEL_306:
    std::string::basic_string[abi:ne180100]<0>(&v154, "_no_prefix_on_first_value");
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
    int v102 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v154.__locale_, (uint64_t)&std::piecewise_construct, &__str);
    char v103 = 1;
    switch(*((unsigned char *)v102 + 68))
    {
      case 0:
        uint64_t v106 = *((void *)v102 + 7);
        goto LABEL_314;
      case 1:
        BOOL v104 = *((double *)v102 + 7) == 0.0;
        goto LABEL_315;
      case 2:
        uint64_t v105 = *((void *)v102 + 7);
        if (*(char *)(v105 + 31) < 0) {
          uint64_t v106 = *(void *)(v105 + 16);
        }
        else {
          uint64_t v106 = *(unsigned __int8 *)(v105 + 31);
        }
LABEL_314:
        BOOL v104 = v106 == 0;
        goto LABEL_315;
      case 3:
      case 4:
      case 5:
        BOOL v104 = *(void *)(*((void *)v102 + 7) + 8) == *(void *)(*((void *)v102 + 7) + 16);
        goto LABEL_315;
      case 7:
        goto LABEL_318;
      case 8:
        BOOL v104 = *(void *)(*((void *)v102 + 7) + 64) == 3;
LABEL_315:
        char v103 = v104;
LABEL_318:
        char v127 = v103 ^ 1;
        if (SHIBYTE(v156) < 0) {
          operator delete(v154.__locale_);
        }
        break;
      default:
        turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
    }
    goto LABEL_320;
  }
  operator delete(v154.__locale_);
  if (v101) {
    goto LABEL_306;
  }
LABEL_320:
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v123 = *(std::string *)a2;
  }
  turi::general_ofstream::general_ofstream(&v154, (uint64_t)&v123);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v107 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v107 = v130.__r_.__value_.__l.__size_;
  }
  if (v107)
  {
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v108 = &v130;
    }
    else {
      uint64_t v108 = (std::string *)v130.__r_.__value_.__r.__words[0];
    }
    uint64_t v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v154, (uint64_t)v108, v107);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v110 = &v133;
    }
    else {
      uint64_t v110 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v111 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v111 = v133.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
  }
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v154))
  {
    __str.__r_.__value_.__r.__words[0] = a2;
    turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_1::operator()((long long **)&__str);
  }
  if ((*(uint64_t (**)(void *))(*a1 + 112))(a1))
  {
    if (v134)
    {
      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 128))(&__str, a1);
      turi::csv_writer::write_verbatim((uint64_t)&v131, &v154, &__str);
      v124[0] = &__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
    }
    LOBYTE(v124[0]) = 1;
    char v112 = (std::__shared_weak_count *)a1[4];
    uint64_t v121 = a1[3];
    uint64_t v122 = v112;
    if (v112) {
      atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v153 = 0;
    BOOL v113 = operator new(0x30uLL);
    void *v113 = &unk_26D7706A8;
    v113[1] = &v131;
    v113[2] = &v154;
    v113[3] = &v128;
    v113[4] = &v127;
    v113[5] = v124;
    long long v153 = v113;
    memset(v147, 0, sizeof(v147));
    long long v148 = 0u;
    *(_OWORD *)atomic_ullong *volatile v149 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    BYTE11(v148) = 1;
    std::string::basic_string[abi:ne180100]<0>(v149, "");
    long long v151 = 0uLL;
    *((void *)&v150 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)&v146, &v121, (uint64_t)v152, 1, (uint64_t *)v147);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SBYTE7(v150) < 0) {
      operator delete(v149[0]);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v147 + 1);
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v152);
    if (v122) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v122);
    }
    if (!turi::general_ofstream::good((turi::general_ofstream *)&v154)) {
      turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_3::operator()();
    }
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v114 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v114 = v129.__r_.__value_.__l.__size_;
    }
    if (v114)
    {
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v115 = &v129;
      }
      else {
        uint64_t v115 = (std::string *)v129.__r_.__value_.__r.__words[0];
      }
      uint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v154, (uint64_t)v115, v114);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v117 = &v133;
      }
      else {
        uint64_t v117 = (std::string *)v133.__r_.__value_.__r.__words[0];
      }
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v118 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v118 = v133.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
    }
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v155, 8, &v155, 16, (turi::fileio_impl::general_fstream_sink *)&v158, &v162);
  }
  v154.__locale_ = (std::locale::__imp *)&unk_26D75C318;
  v165[0] = &unk_26D75C340;
  if (v164 < 0) {
    operator delete(v163);
  }
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v155);
  MEMORY[0x22A614E30](v165);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141) < 0) {
    operator delete(*((void **)&v140 + 1));
  }
  if (SHIBYTE(v139) < 0) {
    operator delete(*((void **)&v138 + 1));
  }
  if (SBYTE7(v138) < 0) {
    operator delete((void *)v137);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
}

void sub_2241D1F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  turi::csv_writer::~csv_writer((void **)&a47);
  _Unwind_Resume(a1);
}

void turi::csv_writer::~csv_writer(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void turi::unity_sframe::sample(turi::unity_sframe *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, _OWORD *a5@<X8>)
{
  unint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "sample", 1158, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
    }
    uint64_t v14 = file_logger::operator<<<float>((uint64_t)started);
    uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)", ", 2);
    }
    uint64_t v16 = file_logger::operator<<<unsigned long long>(v14);
    unint64_t v17 = pthread_getspecific(*(void *)(v16 + 592));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[2] - 24) + 16));
        uint64_t v18 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale((std::locale *)&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v16);
        if (*(_DWORD *)(v16 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a2 == 1.0)
  {
    turi::unity_sframe::copy(this, a5);
  }
  else
  {
    int v19 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
    v20.n128_f64[0] = turi::unity_sarray::make_uniform_BOOLean_array(v19, a2, a3, a4, &v24);
    long long v21 = v24;
    if (*((void *)&v24 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
      long long v23 = v21;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v23 = (unint64_t)v24;
    }
    (*(void (**)(turi::unity_sframe *, long long *, __n128))(*(void *)this + 176))(this, &v23, v20);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
    if (*((void *)&v21 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
    }
  }
}

void sub_2241D28F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::locale a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::materialize(turi::unity_sframe *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  memset(v5, 0, sizeof(v5));
  BYTE11(v6) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)&v8 + 1) = 0;
  long long v9 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v2, (uint64_t)v5, (const turi::sframe *)v10);
  turi::sframe::~sframe((turi::sframe *)v10);
  uint64_t v4 = (void **)&v8 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v5 + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_2241D2A20(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  turi::query_eval::materialize_options::~materialize_options((void **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

unint64_t turi::unity_sframe::is_materialized(turi::unity_sframe *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v8 = *((void *)this + 3);
  long long v9 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  memset(v13, 0, sizeof(v13));
  BYTE11(v14) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)&v16 + 1) = 0;
  long long v17 = 0uLL;
  turi::query_eval::optimization_engine::optimize_planner_graph(&v8, (uint64_t)v13, &v10);
  unint64_t v12 = (void **)&v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v13 + 1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t is_source_node = turi::query_eval::is_source_node(&v10);
  if (is_source_node)
  {
    uint64_t v5 = v10;
    uint64_t v4 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v6 = (std::__shared_weak_count *)*((void *)this + 4);
    *((void *)this + 3) = v5;
    *((void *)this + 4) = v4;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return is_source_node;
}

void sub_2241D2B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::unity_sframe::has_size(turi::unity_sframe *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::infer_planner_node_length((uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 != -1;
}

void sub_2241D2C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sframe::query_plan_string(turi::unity_sframe *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = turi::query_eval::operator<<(v10, &v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v12);
}

void sub_2241D2E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::random_split(turi::unity_sframe *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  unint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      goto LABEL_28;
    }
    char v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "random_split", 1195, 1);
    std::locale v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    }
    long long v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        uint64_t v15 = std::locale::use_facet((const std::locale *)&v29, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_29:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  long long v16 = (int *)global_logger();
  if (v16[169] > 2) {
    goto LABEL_20;
  }
  if (cppipc::must_cancel((cppipc *)v16)) {
LABEL_28:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  long long v17 = (file_logger *)global_logger();
  uint64_t v18 = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "random_split", 1196, 1);
  int v19 = pthread_getspecific(*((void *)v18 + 74));
  if (v19 && *((unsigned char *)v19 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Args: ", 6);
  }
  uint64_t v20 = file_logger::operator<<<float>((uint64_t)v18);
  long long v21 = pthread_getspecific(*(void *)(v20 + 592));
  if (v21 && *((unsigned char *)v21 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)", ", 2);
  }
  uint64_t v22 = file_logger::operator<<<unsigned long long>(v20);
  long long v23 = pthread_getspecific(*(void *)(v22 + 592));
  if (v23)
  {
    if (*((unsigned char *)v23 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(v23[2] - 24) + 16));
      long long v24 = std::locale::use_facet((const std::locale *)&v29, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v29);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v22);
      if (*(_DWORD *)(v22 + 600) == 7) {
        goto LABEL_29;
      }
    }
  }
LABEL_20:
  unint64_t v25 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
  turi::unity_sarray::make_uniform_BOOLean_array(v25, a2, a3, a4, &v29);
  long long v26 = v29;
  if (*((void *)&v29 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    long long v28 = v26;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v28 = (unint64_t)v29;
  }
  turi::unity_sframe::logical_filter_split((uint64_t)this, (uint64_t *)&v28, a5);
  if (*((void *)&v26 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_2241D3208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void turi::unity_sframe::groupby_aggregate(void *a1, const void ***a2, long long ***a3, long long **a4, std::string **a5)
{
  long long v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v8 = *a5;
  long long v9 = a5[1];
  if (*a5 != v9)
  {
    do
    {
      turi::get_builtin_group_aggregator(v8, &v20);
      unint64_t v10 = v22;
      if ((unint64_t)v22 >= v23)
      {
        uint64_t v11 = (v22 - v21) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v23 - (void)v21;
        if ((uint64_t)(v23 - (void)v21) >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        v24[4] = &v23;
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v23, v14);
        long long v16 = &v15[16 * v11];
        v24[0] = v15;
        v24[1] = v16;
        void v24[3] = &v15[16 * v17];
        *(_OWORD *)long long v16 = v20;
        long long v20 = 0uLL;
        v24[2] = v16 + 16;
        std::vector<std::shared_ptr<turi::group_aggregate_value>>::__swap_out_circular_buffer((uint64_t *)&v21, v24);
        uint64_t v18 = v22;
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v24);
        uint64_t v22 = v18;
        if (*((void *)&v20 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
        }
      }
      else
      {
        *(_OWORD *)uint64_t v22 = v20;
        uint64_t v22 = v10 + 16;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  turi::unity_sframe::groupby_aggregate(a1, a2, a3, a4, (uint64_t **)&v21);
}

void sub_2241D33A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::groupby_aggregate(void *a1, const void ***a2, long long ***a3, long long **a4, uint64_t **a5)
{
  uint64_t v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      goto LABEL_123;
    }
    uint64_t v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1219, 1);
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        unint64_t v12 = std::locale::use_facet((const std::locale *)&v95, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)&v95);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_124;
        }
      }
    }
  }
  uint64_t v13 = (int *)global_logger();
  if (v13[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v13)) {
      goto LABEL_123;
    }
    unint64_t v14 = (file_logger *)global_logger();
    uint64_t v15 = file_logger::start_stream(v14, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1223, 1);
    long long v16 = pthread_getspecific(*((void *)v15 + 74));
    if (v16 && *((unsigned char *)v16 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Args: Keys: ", 12);
    }
  }
  uint64_t v80 = a2;
  uint64_t v17 = *a2;
  for (uint64_t i = a2[1]; v17 != i; v17 += 3)
  {
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v95, (const std::string::value_type *)*v17, (std::string::size_type)v17[1]);
    }
    else
    {
      long long v19 = *(_OWORD *)v17;
      v95.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v19;
    }
    long long v20 = (int *)global_logger();
    if (v20[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v20)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      long long v21 = (file_logger *)global_logger();
      uint64_t v22 = file_logger::start_stream(v21, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1224, 1);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v94, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
      }
      else {
        std::string v94 = v95;
      }
      uint64_t v23 = file_logger::operator<<<std::string>((uint64_t)v22, (uint64_t)&v94);
      long long v24 = pthread_getspecific(*(void *)(v23 + 592));
      if (v24 && *((unsigned char *)v24 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)",", 1);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v25 = (int *)global_logger();
  if (v25[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v25)) {
      goto LABEL_123;
    }
    long long v26 = (file_logger *)global_logger();
    int v27 = file_logger::start_stream(v26, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1225, 1);
    long long v28 = pthread_getspecific(*((void *)v27 + 74));
    if (v28 && *((unsigned char *)v28 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"\tGroups: ", 9);
    }
  }
  uint64_t v79 = a4;
  long long v29 = *a3;
  uint64_t v30 = a3[1];
  if (*a3 != v30)
  {
    do
    {
      memset(&v95, 0, sizeof(v95));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, *v29, v29[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v29[1] - (char *)*v29) >> 3));
      std::string::size_type size = v95.__r_.__value_.__l.__size_;
      for (std::string::size_type j = v95.__r_.__value_.__r.__words[0]; j != size; j += 24)
      {
        if (*(char *)(j + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)j, *(void *)(j + 8));
        }
        else
        {
          long long v33 = *(_OWORD *)j;
          v84.__r_.__value_.__r.__words[2] = *(void *)(j + 16);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v33;
        }
        uint64_t v34 = (int *)global_logger();
        if (v34[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v34)) {
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          }
          uint64_t v35 = (file_logger *)global_logger();
          unint64_t v36 = file_logger::start_stream(v35, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1228, 1);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v93, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
          }
          else {
            std::string v93 = v84;
          }
          uint64_t v37 = file_logger::operator<<<std::string>((uint64_t)v36, (uint64_t)&v93);
          BOOL v38 = pthread_getspecific(*(void *)(v37 + 592));
          if (v38 && *((unsigned char *)v38 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)",", 1);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v39 = (int *)global_logger();
      if (v39[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v39)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v40 = (file_logger *)global_logger();
        int v41 = file_logger::start_stream(v40, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1230, 1);
        uint64_t v42 = pthread_getspecific(*((void *)v41 + 74));
        if (v42 && *((unsigned char *)v42 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)" | ", 3);
        }
      }
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      v29 += 3;
    }
    while (v29 != v30);
  }
  unint64_t v43 = (int *)global_logger();
  if (v43[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v43)) {
      goto LABEL_123;
    }
    uint64_t v44 = (file_logger *)global_logger();
    long long v45 = file_logger::start_stream(v44, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1232, 1);
    uint64_t v46 = pthread_getspecific(*((void *)v45 + 74));
    if (v46 && *((unsigned char *)v46 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)"\tOperations: ", 13);
    }
  }
  uint64_t v47 = *a5;
  uint64_t v48 = a5[1];
  if (*a5 != v48)
  {
    do
    {
      uint64_t v49 = *v47;
      double v50 = (std::__shared_weak_count *)v47[1];
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v51 = (int *)global_logger();
      if (v51[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v51)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        unsigned int v52 = (file_logger *)global_logger();
        uint64_t v53 = file_logger::start_stream(v52, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1233, 1);
        v91[1] = v49;
        uint64_t v92 = v50;
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v54 = file_logger::operator<<<std::shared_ptr<turi::group_aggregate_value>>((uint64_t)v53);
        uint64_t v55 = pthread_getspecific(*(void *)(v54 + 592));
        if (v55 && *((unsigned char *)v55 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)",", 1);
        }
        if (v92) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
        }
      }
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      v47 += 2;
    }
    while (v47 != v48);
  }
  uint64_t v56 = (int *)global_logger();
  if (v56[169] >= 3) {
    goto LABEL_86;
  }
  if (!cppipc::must_cancel((cppipc *)v56))
  {
    char v57 = (file_logger *)global_logger();
    BOOL v58 = file_logger::start_stream(v57, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1234, 1);
    uint64_t v59 = pthread_getspecific(*((void *)v58 + 74));
    if (!v59
      || !v59[280]
      || (std::ios_base::getloc((const std::ios_base *)&v59[*(void *)(*((void *)v59 + 2) - 24) + 16]),
          uint64_t v60 = std::locale::use_facet((const std::locale *)&v95, MEMORY[0x263F8C108]),
          ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10),
          std::locale::~locale((std::locale *)&v95),
          std::ostream::put(),
          std::ostream::flush(),
          file_logger::stream_flush(v58),
          *((_DWORD *)v58 + 150) != 7))
    {
LABEL_86:
      uint64_t v61 = *a3;
      uint64_t v62 = a3[1];
      v84.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * (v62 - *a3);
      uint64_t v89 = ((char *)a5[1] - (char *)*a5) >> 4;
      if (v84.__r_.__value_.__r.__words[0] != v89)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
        v95.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
        turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator()();
      }
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      v91[0] = 0;
      if (v62 == v61)
      {
LABEL_114:
        std::string::size_type v77 = (std::string *)a1[4];
        uint64_t v86 = (long long *)a1[3];
        uint64_t v87 = v77;
        if (v77) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v77->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(std::string *__return_ptr))(*a1 + 128))(&v95);
        turi::query_eval::groupby_aggregate((uint64_t *)&v86, (uint64_t *)&v95, v80, v79, (const void ****)&v89);
      }
      unint64_t v63 = 0;
      while (1)
      {
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        unint64_t v88 = 0;
        uint64_t v64 = &v61[3 * v63];
        long long v66 = *v64;
        uint64_t v65 = v64[1];
        if (*v64 != v65) {
          break;
        }
LABEL_103:
        std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<turi::group_aggregate_value> const&,0>(&v84, &v86, (std::string::size_type *)&(*a5)[2 * v63]);
        char v69 = v90;
        if ((unint64_t)v90 >= v91[0])
        {
          unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v90 - v89) >> 3);
          unint64_t v71 = v70 + 1;
          if (v70 + 1 > 0x666666666666666) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v91[0] - v89) >> 3) > v71) {
            unint64_t v71 = 0x999999999999999ALL * ((v91[0] - v89) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v91[0] - v89) >> 3) >= 0x333333333333333) {
            unint64_t v72 = 0x666666666666666;
          }
          else {
            unint64_t v72 = v71;
          }
          uint64_t v97 = v91;
          double v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)v91, v72);
          std::string::size_type v74 = (std::string::size_type)&v73[40 * v70];
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
          v95.__r_.__value_.__l.__size_ = v74;
          uint64_t v96 = &v73[40 * v75];
          *(void *)std::string::size_type v74 = 0;
          *(void *)(v74 + 8) = 0;
          *(void *)(v74 + 16) = 0;
          *(std::string *)std::string::size_type v74 = v84;
          memset(&v84, 0, sizeof(v84));
          *(_OWORD *)(v74 + 24) = v85;
          long long v85 = 0uLL;
          v95.__r_.__value_.__r.__words[2] = v74 + 40;
          std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__swap_out_circular_buffer(&v89, &v95);
          uint64_t v76 = v90;
          std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::~__split_buffer((void **)&v95.__r_.__value_.__l.__data_);
          uint64_t v90 = v76;
          if (*((void *)&v85 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
          }
        }
        else
        {
          *uint64_t v90 = 0;
          v69[1] = 0;
          v69[2] = 0;
          *(std::string *)char v69 = v84;
          memset(&v84, 0, sizeof(v84));
          *(_OWORD *)(v69 + 3) = v85;
          long long v85 = 0uLL;
          uint64_t v90 = v69 + 5;
        }
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
        ++v63;
        uint64_t v61 = *a3;
        if (v63 >= 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3)) {
          goto LABEL_114;
        }
      }
      uint64_t v67 = 0;
      while (1)
      {
        if (*((char *)v66 + 23) < 0)
        {
          if (*((void *)v66 + 1))
          {
LABEL_95:
            if ((unint64_t)v67 >= v88)
            {
              uint64_t v67 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v86, v66);
            }
            else
            {
              if ((*((unsigned char *)v66 + 23) & 0x80) != 0)
              {
                std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v66, *((void *)v66 + 1));
              }
              else
              {
                long long v68 = *v66;
                v67->__r_.__value_.__r.__words[2] = *((void *)v66 + 2);
                *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
              }
              ++v67;
            }
            uint64_t v87 = v67;
          }
        }
        else if (*((unsigned char *)v66 + 23))
        {
          goto LABEL_95;
        }
        long long v66 = (long long *)((char *)v66 + 24);
        if (v66 == v65) {
          goto LABEL_103;
        }
      }
    }
LABEL_124:
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "LOG_FATAL encountered";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
LABEL_123:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_2241D3EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::locale::~locale((std::locale *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<std::shared_ptr<turi::group_aggregate_value>>(uint64_t a1)
{
  uint64_t v2 = pthread_getspecific(*(void *)(a1 + 592));
  if (v2 && v2[280]) {
    std::ostream::operator<<();
  }
  return a1;
}

void turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"group_columns.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"group_operations.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 1238, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241D4224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::join_with_custom_name()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "join_with_custom_name", 1268, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      uint64_t v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  operator new();
}

void sub_2241D4600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,std::locale a22)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::sort(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::locale v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "sort", 1283, 1);
    long long v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v12 - *(void *)a2) >> 3) == (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)
  {
    if (v12 != *(void *)a2)
    {
      turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, (unsigned __int8 ***)a2, (uint64_t)__p);
      unint64_t v14 = *(_DWORD **)a3;
      uint64_t v13 = *(_DWORD **)(a3 + 8);
      *(_OWORD *)&v22[0].__locale_ = *(_OWORD *)__p;
      uint64_t v23 = v21;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v21 = 0;
      while (v14 != v13)
      {
        LOBYTE(v19) = *v14 != 0;
        std::vector<BOOL>::push_back((uint64_t)__p, &v19);
        ++v14;
      }
      uint64_t v15 = a1[4];
      v18[0] = a1[3];
      v18[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long **__return_ptr, void *))(*a1 + 128))(v17, a1);
      turi::query_eval::ec_sort(v18, v17, (uint64_t)v22);
    }
    turi::unity_sframe::sort(std::vector<std::string> const&,std::vector<int> const&)::$_1::operator()();
  }
  turi::unity_sframe::sort(std::vector<std::string> const&,std::vector<int> const&)::$_0::operator()();
}

void sub_2241D49A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  std::locale::~locale((std::locale *)(v19 - 96));
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void turi::unity_sframe::pack_columns(uint64_t a1, uint64_t *a2, long long **a3, char a4, uint64_t a5)
{
  std::locale v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "pack_columns", 1322, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        uint64_t v15 = std::locale::use_facet((const std::locale *)&v21, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((a4 - 6) > 0xFCu)
  {
    std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<std::string const*>>(v18, *a2, a2[1]);
    if (v18[2] == 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 184))(&v21, a1, a2);
      if (v21.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        if (v21.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21.__r_.__value_.__l.__size_);
        }
      }
      memset(&v21, 0, sizeof(v21));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
      memset(v22, 0, 13);
      if (v22 != (atomic_ullong **)a5)
      {
        *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(a5 + 5);
        v22[0] = *(atomic_ullong **)a5;
        BYTE4(v22[1]) = *(unsigned char *)(a5 + 12);
        if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
          atomic_fetch_add(v22[0], 1uLL);
        }
      }
      memset(v20, 0, 13);
      if (v20 != (atomic_ullong **)a5)
      {
        *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(a5 + 5);
        v20[0] = *(atomic_ullong **)a5;
        BYTE4(v20[1]) = *(unsigned char *)(a5 + 12);
        if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
          atomic_fetch_add(v20[0], 1uLL);
        }
      }
      memset(v19, 0, 13);
      if (v19 != (atomic_ullong **)a5)
      {
        *(atomic_ullong **)((char *)v19 + 5) = *(atomic_ullong **)(a5 + 5);
        v19[0] = *(atomic_ullong **)a5;
        BYTE4(v19[1]) = *(unsigned char *)(a5 + 12);
        if (BYTE4(v19[1]) <= 9u && ((1 << SBYTE4(v19[1])) & 0x33C) != 0) {
          atomic_fetch_add(v19[0], 1uLL);
        }
      }
      operator new();
    }
    long long v16 = __cxa_allocate_exception(8uLL);
    *long long v16 = "There are duplicate names in packed columns";
    __cxa_throw(v16, MEMORY[0x263F8C1D8], 0);
  }
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_0::operator()();
}

void sub_2241D530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,char a25,void *a26)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(v27 - 160);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(v27 - 144);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(v27 - 128);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__tree<turi::flexible_type>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 36))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 24);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 24);
        if (v5)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            _OWORD v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  uint64_t v15 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  return a1;
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            _OWORD v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            _OWORD v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void turi::unity_sframe::stack(uint64_t a1, std::string::size_type a2, std::string **a3, char **a4, char a5)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  char v81 = a5;
  unsigned int v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "stack", 1407, 1);
    uint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12 && *((unsigned char *)v12 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13)
    {
      if (*((unsigned char *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[2] - 24) + 16));
        unint64_t v14 = std::locale::use_facet(&v79, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v79);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)a1 + 128))(&v79, a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 120))(&v78, a1);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v77, (const void **)v79.__locale_, v80);
  uint64_t v15 = *a3;
  long long v16 = a3[1];
  if (*a3 == v16) {
    goto LABEL_109;
  }
  char v17 = 0;
  do
  {
    if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v18 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v18;
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v77, (const void **)&v76.__r_.__value_.__l.__data_))
    {
      uint64_t v19 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v76.__r_.__value_.__l.__size_;
      }
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
      int v22 = (char)v21;
      if ((v21 & 0x80u) != 0) {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      if (size != v21) {
        goto LABEL_107;
      }
      if (v22 >= 0) {
        uint64_t v23 = (unsigned __int8 *)a2;
      }
      else {
        uint64_t v23 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v76.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v76.__r_.__value_.__l.__data_, v23, v76.__r_.__value_.__l.__size_)) {
          goto LABEL_107;
        }
      }
      else if (*((unsigned char *)&v76.__r_.__value_.__s + 23))
      {
        long long v24 = &v76;
        while (v24->__r_.__value_.__s.__data_[0] == *v23)
        {
          long long v24 = (std::string *)((char *)v24 + 1);
          ++v23;
          if (!--v19) {
            goto LABEL_31;
          }
        }
LABEL_107:
        uint64_t v65 = __cxa_allocate_exception(0x18uLL);
        std::operator+<char>();
        long long v66 = std::string::append(&v75, "' is already used by current SFrame, pick a new column name");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v65[2] = *((void *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v65 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
      }
    }
LABEL_31:
    BOOL v25 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v77, (const void **)a2) != 0;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    v17 |= v25;
    ++v15;
  }
  while (v15 != v16);
  if ((v17 & 1) == 0)
  {
LABEL_109:
    v76.__r_.__value_.__r.__words[0] = a2;
    turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_0::operator()();
  }
  uint64_t v74 = 0;
  char v73 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type))(*(void *)a1 + 192))(&v76, a1, a2);
  int v27 = (*(uint64_t (**)(std::string::size_type))(*(void *)v76.__r_.__value_.__l.__data_ + 112))(v76.__r_.__value_.__r.__words[0]);
  if (v76.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
  }
  char v73 = v27;
  if (v27 == 3 || v27 == 4)
  {
    uint64_t v28 = 1;
  }
  else
  {
    if (v27 != 5)
    {
      unint64_t v36 = __cxa_allocate_exception(8uLL);
      uint64_t v37 = "Column type is not supported for stack";
      goto LABEL_114;
    }
    uint64_t v28 = 2;
  }
  uint64_t v74 = v28;
  if (a4[1] - *a4 == v28)
  {
    long long v29 = *a3;
    uint64_t v30 = (char *)a3[1] - (char *)*a3;
    if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) == v28)
    {
      if (v30 != 48) {
        goto LABEL_61;
      }
      uint64_t v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
      std::string::size_type v32 = v29->__r_.__value_.__l.__size_;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v33 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v29->__r_.__value_.__l.__size_;
      }
      std::string::size_type v34 = HIBYTE(v29[1].__r_.__value_.__r.__words[2]);
      int v35 = (char)v34;
      if ((v34 & 0x80u) != 0) {
        std::string::size_type v34 = v29[1].__r_.__value_.__l.__size_;
      }
      if (v33 != v34) {
        goto LABEL_61;
      }
      if (v35 >= 0) {
        double data = (unsigned __int8 *)&v29[1];
      }
      else {
        double data = (unsigned __int8 *)v29[1].__r_.__value_.__l.__data_;
      }
      if ((v31 & 0x80) == 0)
      {
        if (*((unsigned char *)&v29->__r_.__value_.__s + 23))
        {
          while (v29->__r_.__value_.__s.__data_[0] == *data)
          {
            long long v29 = (std::string *)((char *)v29 + 1);
            ++data;
            if (!--v31) {
              goto LABEL_58;
            }
          }
        }
        goto LABEL_61;
      }
      if (memcmp(v29->__r_.__value_.__l.__data_, data, v29->__r_.__value_.__l.__size_) || !v32)
      {
LABEL_61:
        uint64_t v72 = 0;
        char v69 = a3;
        uint64_t v72 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 112))(a1, data);
        memset(&v76, 0, sizeof(v76));
        memset(&v75, 0, sizeof(v75));
        std::vector<std::string>::reserve((std::vector<std::string> *)&v76, v72 + v74 - 1);
        std::vector<turi::flex_type_enum>::reserve((unint64_t *)&v75, v72 + v74 - 1);
        unint64_t v38 = v72;
        if (!v72)
        {
LABEL_106:
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v76, (std::string *)v76.__r_.__value_.__l.__size_, *v69, (long long *)v69[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)*v69) >> 3));
          std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>((uint64_t)&v75, (char *)v75.__r_.__value_.__l.__size_, *a4, a4[1], a4[1] - *a4);
          _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v71);
          uint64_t v64 = v71;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          turi::sframe::open_for_write((uint64_t)v64, &v76, &v75, &__p, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
        }
        uint64_t v39 = 0;
        while (1)
        {
          uint64_t v40 = (char *)v79.__locale_ + 24 * v39;
          std::string::size_type v41 = *((void *)v40 + 1);
          if (v40[23] >= 0) {
            uint64_t v42 = v40[23];
          }
          else {
            uint64_t v42 = *((void *)v40 + 1);
          }
          uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
          int v44 = (char)v43;
          if ((v43 & 0x80u) != 0) {
            uint64_t v43 = *(void *)(a2 + 8);
          }
          if (v42 != v43) {
            goto LABEL_78;
          }
          if (v44 >= 0) {
            long long v45 = (unsigned __int8 *)a2;
          }
          else {
            long long v45 = *(unsigned __int8 **)a2;
          }
          if (v40[23] < 0)
          {
            double v50 = *(const std::string::value_type **)v40;
            if (memcmp(*(const void **)v40, v45, *((void *)v40 + 1)))
            {
              uint64_t v48 = (std::string *)v76.__r_.__value_.__l.__size_;
              if (v76.__r_.__value_.__l.__size_ >= v76.__r_.__value_.__r.__words[2]) {
                goto LABEL_83;
              }
LABEL_85:
              std::string::__init_copy_ctor_external(v48, v50, v41);
              goto LABEL_86;
            }
          }
          else if (v40[23])
          {
            uint64_t v46 = (unsigned __int8 *)v79.__locale_ + 24 * v39;
            uint64_t v47 = v40[23];
            while (*v46 == *v45)
            {
              ++v46;
              ++v45;
              if (!--v47) {
                goto LABEL_105;
              }
            }
LABEL_78:
            uint64_t v48 = (std::string *)v76.__r_.__value_.__l.__size_;
            if (v76.__r_.__value_.__l.__size_ >= v76.__r_.__value_.__r.__words[2])
            {
LABEL_83:
              std::string::size_type v51 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, (long long *)v40);
            }
            else
            {
              if (v40[23] < 0)
              {
                double v50 = *(const std::string::value_type **)v40;
                goto LABEL_85;
              }
              long long v49 = *(_OWORD *)v40;
              *(void *)(v76.__r_.__value_.__l.__size_ + 16) = *((void *)v40 + 2);
              *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
LABEL_86:
              std::string::size_type v51 = (std::string::size_type)&v48[1];
            }
            v76.__r_.__value_.__l.__size_ = v51;
            unsigned int v52 = v78;
            std::string::size_type v53 = v75.__r_.__value_.__l.__size_;
            if (v75.__r_.__value_.__l.__size_ >= v75.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v55 = v75.__r_.__value_.__r.__words[0];
              std::string::size_type v56 = v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0];
              int64_t v57 = v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0] + 1;
              if (v57 < 0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v58 = v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0];
              if (2 * (v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0]) > v57) {
                int64_t v57 = 2 * v58;
              }
              if (v58 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v59 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v59 = v57;
              }
              if (v59) {
                uint64_t v60 = operator new(v59);
              }
              else {
                uint64_t v60 = 0;
              }
              std::string::size_type v61 = (std::string::size_type)&v60[v56];
              v60[v56] = v52[v39];
              std::string::size_type v54 = (std::string::size_type)&v60[v56 + 1];
              if (v53 != v55)
              {
                std::string::size_type v62 = ~v55 + v53;
                do
                {
                  char v63 = *(unsigned char *)--v53;
                  v60[v62--] = v63;
                }
                while (v53 != v55);
                std::string::size_type v61 = (std::string::size_type)v60;
              }
              v75.__r_.__value_.__r.__words[0] = v61;
              v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v60[v56 + 1];
              v75.__r_.__value_.__r.__words[2] = (std::string::size_type)&v60[v59];
              if (v55) {
                operator delete((void *)v55);
              }
            }
            else
            {
              *(unsigned char *)v75.__r_.__value_.__l.__size_ = *((unsigned char *)v78 + v39);
              std::string::size_type v54 = v53 + 1;
            }
            v75.__r_.__value_.__l.__size_ = v54;
            unint64_t v38 = v72;
          }
LABEL_105:
          if (++v39 >= v38) {
            goto LABEL_106;
          }
        }
      }
LABEL_58:
      unint64_t v36 = __cxa_allocate_exception(8uLL);
      uint64_t v37 = "There is duplicate column names in new_column_names parameter";
    }
    else
    {
      unint64_t v36 = __cxa_allocate_exception(8uLL);
      uint64_t v37 = "column names given is not matching the expected number";
    }
  }
  else
  {
    unint64_t v36 = __cxa_allocate_exception(8uLL);
    uint64_t v37 = "column types given is not matching the expected number";
  }
LABEL_114:
  void *v36 = v37;
  __cxa_throw(v36, MEMORY[0x263F8C1D8], 0);
}

void sub_2241D64D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,std::locale a46)
{
}

void turi::unity_sframe::copy_range(turi::unity_sframe *this, unint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  atomic_ullong *volatile v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "copy_range", 1536, 1);
    atomic_ullong *volatile v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        atomic_ullong *volatile v10 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a3)
  {
    (*(void (**)(turi::unity_sframe *))(*(void *)this + 64))(this);
    operator new();
  }
  turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_0::operator()();
}

void sub_2241D6C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::locale a54)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a42);
  turi::sframe::~sframe((turi::sframe *)&a54);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(a1);
}

void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_range", 603, 1);
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    atomic_ullong *volatile v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*((unsigned char *)a1 + 288)) {
    BOOL v12 = *((unsigned char *)a1 + 289) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  if (*(unsigned char *)(a2 + 288))
  {
    if (*(unsigned char *)(a2 + 289)) {
      turi::sframe::get_reader(a1);
    }
  }
  turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
}

void sub_2241D7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void turi::unity_sframe::drop_missing_values(turi::unity_sframe *a1, unsigned __int8 ***a2, int a3, uint64_t a4, int a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unsigned int v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "drop_missing_values", 1595, 1);
    BOOL v12 = pthread_getspecific(*((void *)started + 74));
    if (v12 && *((unsigned char *)v12 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13)
    {
      if (*((unsigned char *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[2] - 24) + 16));
        std::locale v14 = std::locale::use_facet(&v37, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v37);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  if (v15 > (*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 112))(a1)) {
    turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_0::operator()();
  }
  uint64_t v16 = *a2;
  char v17 = a2[1];
  if ((char *)v17 - (char *)*a2 == 24)
  {
    (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(void *)a1 + 192))(&v37, a1);
    locale = v37.__locale_;
    if ((void)v38)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      if ((void)v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38);
      }
    }
    turi::unity_sarray::missing_mask(locale, a5, 0);
  }
  std::string __p = 0;
  long long v33 = 0uLL;
  if (v16 == v17)
  {
    unint64_t v23 = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)a1 + 112))(a1);
    std::vector<unsigned long>::resize((uint64_t)&__p, v23);
    uint64_t v19 = (char *)__p;
    long long v20 = (char *)v33;
    if (__p == (void *)v33)
    {
      long long v20 = (char *)__p;
      if (!a5) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v24 = 0;
      BOOL v25 = (char *)__p;
      do
      {
        *(void *)BOOL v25 = v24;
        v25 += 8;
        ++v24;
      }
      while (v25 != v20);
      if (!a5) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, a2, (uint64_t)&v37);
    uint64_t v19 = (char *)v37.__locale_;
    std::string __p = v37.__locale_;
    long long v33 = v38;
    long long v20 = (char *)v38;
    if (!a5)
    {
LABEL_17:
      uint64_t v21 = 0;
      uint64_t v22 = v20 - v19;
      goto LABEL_25;
    }
  }
  if (v19 != v20) {
    turi::unity_sframe::dtype(a1, *((void *)__p + *(void *)v19));
  }
  long long v26 = v19;
  uint64_t v22 = v19 - (unsigned char *)__p;
  uint64_t v21 = (uint64_t)(v33 - (void)v26) >> 3;
LABEL_25:
  turi::unity_sframe::select_columns(a1, (unint64_t **)&__p, &v37);
  uint64_t v28 = v37.__locale_;
  int v27 = (std::__shared_weak_count *)v38;
  if ((void)v38)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v36 = 0;
  if (v21)
  {
    if (a3) {
      long long v29 = (std::locale::__imp *)&unk_26D770AC8;
    }
    else {
      long long v29 = (std::locale::__imp *)&unk_26D770B48;
    }
    v37.__locale_ = v29;
    *(void *)&long long v38 = v22 >> 3;
    uint64_t v39 = &v37;
  }
  else
  {
    if (a3) {
      uint64_t v30 = (std::locale::__imp *)&unk_26D7709C8;
    }
    else {
      uint64_t v30 = (std::locale::__imp *)&unk_26D770A48;
    }
    v37.__locale_ = v30;
    uint64_t v39 = &v37;
  }
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](&v37, &v35);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](&v37);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)&v35);
  turi::unity_sframe::transform_lambda((uint64_t)v28, (uint64_t)v34, 0, 0);
}

void sub_2241D76B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::unity_sframe::to_dataframe@<X0>(turi::unity_sframe *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  unint64_t v6 = (uint64_t **)(a2 + 24);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  atomic_ullong *volatile v7 = (uint64_t **)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 64) = 0;
  while (1)
  {
    unint64_t result = (*(uint64_t (**)(turi::unity_sframe *))(*(void *)this + 112))(this);
    if (v5 >= result) {
      break;
    }
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(void *)this + 128))(__p, this);
    unsigned int v9 = (char *)__p[0] + v4;
    if (*((char *)__p[0] + v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      v20.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v16 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(void *)this + 120))(__p, this);
    char v11 = *((unsigned char *)__p[0] + v5);
    __p[1] = __p[0];
    operator delete(__p[0]);
    unint64_t v12 = *(void *)(a2 + 8);
    if (v12 >= *(void *)(a2 + 16))
    {
      uint64_t v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (long long *)&v20);
    }
    else
    {
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v13 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
        *(void *)(v12 + 16) = *((void *)&v20.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v12 = v13;
      }
      uint64_t v14 = v12 + 24;
      *(void *)(a2 + 8) = v12 + 24;
    }
    *(void *)(a2 + 8) = v14;
    __p[0] = &v20;
    *((unsigned char *)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)__p)+ 56) = v11;
    (*(void (**)(void ***__return_ptr, turi::unity_sframe *, std::string *))(*(void *)this + 192))(&v16, this, &v20);
    (*((void (**)(void **__return_ptr))*v16 + 68))(__p);
    uint64_t v21 = &v20;
    unint64_t v15 = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v21);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v15 + 7);
    *(_OWORD *)(v15 + 7) = *(_OWORD *)__p;
    v15[9] = v19;
    __p[1] = 0;
    uint64_t v19 = 0;
    __p[0] = 0;
    uint64_t v22 = __p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    ++v5;
    v4 += 24;
  }
  return result;
}

void sub_2241D7A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *((void *)v23 + 1) = v24;
  if (a20 < 0) {
    operator delete(__p);
  }
  turi::dataframe_t::~dataframe_t(v23);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::delete_on_close(turi::unity_sframe *this)
{
  if ((*(unsigned int (**)(turi::unity_sframe *))(*(void *)this + 304))(this))
  {
    turi::unity_sframe::get_underlying_sframe(this, &v2);
    turi::sframe::delete_files_on_destruction(v2);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_2241D7B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::show(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 416))(&lpsrc);
  if (!lpsrc)
  {
    atomic_ullong *volatile v3 = 0;
    goto LABEL_6;
  }
  if (!v3)
  {
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v3) {
    turi::visualization::Plot::show(v3, a2, 0);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2241D7CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::plot(turi::unity_sframe *this@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 128))(&v6);
  (*(void (**)(uint64_t *__return_ptr, turi::unity_sframe *, long long *))(*(void *)this + 184))(&v7, this, &v6);
  unsigned int v9 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v4 = v7;
  unint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::visualization::plot_columnwise_summary(&v4, &v6);
  *a2 = v6;
  long long v6 = 0uLL;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_2241D7DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::explore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  (*(void (**)(std::locale *__return_ptr))(*(void *)a1 + 128))(&v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::locale *))(*(void *)a1 + 184))(&v22, a1, &v21);
  uint64_t v7 = v22;
  long long v6 = v23;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  uint64_t v24 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  atomic_ullong *volatile v8 = (int *)global_logger();
  if (v8[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unsigned int v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "explore", 1836, 1);
    char v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Materializing SFrame", 20);
    }
    unint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        long long v13 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7))
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v18 = *(std::string *)a2;
    }
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    long long v26 = 0;
    uint64_t v14 = (char *)operator new(0x48uLL);
    unint64_t v15 = v14;
    *(void *)uint64_t v14 = &unk_26D770BC8;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)(v14 + 8), v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)(v14 + 8) = v18;
    }
    *((_OWORD *)v15 + 2) = v19;
    long long v19 = 0uLL;
    uint64_t v16 = (std::string *)(v15 + 48);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v15 + 8) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    long long v26 = v15;
    turi::visualization::run_thread((uint64_t)v25);
  }
  turi::unity_sframe::explore(std::string const&,std::string const&)::$_0::operator()();
}

void sub_2241D81CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = *(std::__shared_weak_count **)(v27 + 40);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*(char *)(v27 + 31) < 0) {
    operator delete(*v28);
  }
  operator delete((void *)v27);
  turi::unity_sframe::explore(std::string const&,std::string const&)::$_1::~$_1((uint64_t)&__p);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::explore(std::string const&,std::string const&)::$_1::~$_1(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  atomic_ullong *volatile v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void turi::unity_sframe::join(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  char v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, void ***))(*(void *)a1 + 336))(a1, &v10, &v9, a4, &v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, v8[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_2241D83D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::string v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  unint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

void *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::dataframe_t const&,void>@<X0>(const turi::dataframe_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x140uLL);
  unint64_t result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::dataframe_t const&,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2241D8488(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::dataframe_t const&,std::allocator<turi::sframe>,0>(void *a1, const turi::dataframe_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3), a2);
  return a1;
}

void sub_2241D84E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string &,void>(uint64_t a1, uint64_t a2)
{
  atomic_ullong *volatile v3 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sframe>,0>(v3, a2);
}

void sub_2241D8540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sframe>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string &>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_2241D85B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  turi::sframe::sframe(a2, (uint64_t)&__p);
}

void sub_2241D8630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string,void>(uint64_t a1, uint64_t a2)
{
  atomic_ullong *volatile v3 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sframe>,0>(v3, a2);
}

void sub_2241D8694(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sframe>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_2241D8704(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  turi::sframe::sframe(a2, (uint64_t)__p);
}

void sub_2241D8770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    void *v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_2241D8A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::shared_ptr<turi::unity_sarray>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<turi::unity_sarray>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  unint64_t result = std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node&,std::allocator<turi::query_eval::planner_node>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2241D8B1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node&,std::allocator<turi::query_eval::planner_node>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767928;
  turi::query_eval::planner_node::planner_node((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2241D8B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<turi::unity_sarray_base>>::__init_with_size[abi:ne180100]<std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::unity_sarray_base>>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::shared_ptr<turi::unity_sarray_base>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2241D8BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::unity_sarray_base>>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::shared_ptr<turi::unity_sarray_base>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = a2[2];
      uint64_t v5 = a2[3];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      a2 = (void *)a2[1];
      v4 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::unity_sarray_base>>,std::shared_ptr<turi::unity_sarray_base>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::unity_sarray_base>>,std::shared_ptr<turi::unity_sarray_base>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n, std::vector<std::string>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v15 = &v9[__n];
      std::vector<std::string>::size_type v16 = 24 * __n;
      do
      {
        if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v17 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
          v9->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v17;
        }
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v13) {
      uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    __v.__first_ = v14;
    __v.__begin_ = v14 + v10;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v14[v13];
    std::__split_buffer<std::string>::__construct_at_end(&__v, __n, __x);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_2241D8E3C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::__construct_at_end(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::size_type __n, std::__split_buffer<std::string>::const_reference __x)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (__n)
  {
    std::string::size_type v6 = &end[__n];
    std::__split_buffer<std::string>::size_type v7 = 24 * __n;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v8 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
      }
      ++end;
      v7 -= 24;
    }
    while (v7);
    std::__split_buffer<std::string>::pointer end = v6;
  }
  this->__end_ = end;
}

void sub_2241D8EE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x140uLL);
  unint64_t result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2241D8F34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3), a2);
  return a1;
}

void sub_2241D8F90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D770528;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D770528;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26D770528;
  std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2241D90D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770528;
  return std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  unint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1, uint64_t a2)
{
  v10[10] = *MEMORY[0x263EF8340];
  unint64_t v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = (uint64_t *)(a1 + 40);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(v7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  uint64_t v9 = (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 4;
  uint64_t v5 = *v3;
  uint64_t v6 = *v4;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*v3 - *v4) >> 3);
  if (v9 == v8)
  {
    if (v5 != v6) {
      std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>((uint64_t)v10);
    }
    turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set((uint64_t)&v9);
  }
  v10[0] = &v9;
  v10[1] = &v8;
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()();
}

void sub_2241D945C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int a28)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a28);
  a15 = (void **)&a9;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a15);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a18);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v28 - 168));
  *(void *)(v28 - 168) = &a12;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = (std::string *)((char *)v4 + 32);
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  return a1;
}

void sub_2241D9570(_Unwind_Exception *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row.size()", 10);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"colnames.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  std::__split_buffer<std::string>::size_type v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 707, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241D9714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D7705A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7705A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(void *a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4 = *a3;
  if (*((unsigned char *)*a3 + 24))
  {
    uint64_t v16 = 0;
    long long v17 = v4;
    uint64_t v18 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    int v5 = *((unsigned __int8 *)v4 + 24);
    uint64_t v16 = 0;
    long long v17 = v4;
    uint64_t v18 = 0;
    if (!v5) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 == *((void *)v4 + 1)) {
    return 0;
  }
  uint64_t v6 = **(void ***)v4;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(**(void **)v4 + 8) - *v6;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7 >> 4;
  do
  {
    turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v17, v15);
    uint64_t v9 = *(void *)(a1[1] + 56);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, v15);
    BOOL v19 = (void **)v15;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    unint64_t v10 = (uint64_t *)a1[2];
    uint64_t v11 = *v10 + 1;
    *unint64_t v10 = v11;
    uint64_t v12 = a1[3];
    BOOL result = v11 == v12;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = ++v18;
  }
  while (v16 || v14 != v8);
  return result;
}

void sub_2241D9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 40) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t *std::list<std::shared_ptr<turi::unity_sframe_base>>::list(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::list<std::shared_ptr<turi::unity_sarray_base>>::push_back(a1, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_2241D9B38(_Unwind_Exception *a1)
{
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_26D770628;
  return result;
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770628;
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = 1;
  switch(a1[12])
  {
    case 0:
      double v4 = *(double *)a1;
      goto LABEL_9;
    case 1:
      BOOL v3 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(void *)a1 + 31) < 0) {
        double v4 = *(double *)(*(void *)a1 + 16);
      }
      else {
        *(void *)&double v4 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
LABEL_9:
      BOOL v3 = *(void *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      BOOL v3 = *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a1 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      BOOL v3 = *(void *)(*(void *)a1 + 64) == 3;
LABEL_10:
      int v2 = v3;
LABEL_13:
      *(unsigned char *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(void *)a2 = v2 ^ 1u;
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          void v10[2] = 0;
          *uint64_t v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          void *v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            unsigned char v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  uint64_t result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    unint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2)) {
      return 1;
    }
    size_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      void v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_2241DAE50(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

std::__wrap_iter<std::string *>::iterator_type std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::insert_iterator<std::vector<std::string>> &>@<X0>(std::__wrap_iter<std::string *>::iterator_type result@<X0>, const std::string **a2@<X1>, const void ***a3@<X2>, const void ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::vector<std::string>::const_iterator *a7@<X8>)
{
  uint64_t v9 = (const void **)result->__r_.__value_.__r.__words[0];
  uint64_t v10 = *a2;
  if ((const std::string *)result->__r_.__value_.__l.__data_ == *a2)
  {
LABEL_15:
    unint64_t v21 = *(std::vector<std::string> **)a5;
    v20.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
LABEL_16:
    uint64_t v10 = (const std::string *)v9;
    goto LABEL_17;
  }
  long long v13 = *a3;
  if (v13 != *a4)
  {
    uint64_t v16 = (const void ***)result;
    while (!std::less<std::string>::operator()[abi:ne180100](a6, v9, v13))
    {
      double result = (std::__wrap_iter<std::string *>::iterator_type)std::less<std::string>::operator()[abi:ne180100](a6, *a3, *v16);
      uint64_t v19 = a3;
      if ((result & 1) == 0)
      {
        double result = (std::__wrap_iter<std::string *>::iterator_type)*v16;
        uint64_t v18 = v16;
        uint64_t v19 = a3;
        goto LABEL_8;
      }
LABEL_9:
      *v19 += 3;
      uint64_t v9 = *v16;
      uint64_t v10 = *a2;
      if (*v16 == (const void **)*a2) {
        goto LABEL_15;
      }
      long long v13 = *a3;
      if (*a3 == *a4) {
        goto LABEL_11;
      }
    }
    v17.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
    double result = std::vector<std::string>::insert(*(std::vector<std::string> **)a5, v17, (std::vector<std::string>::const_reference)*v16).__i_;
    uint64_t v18 = (const void ***)(a5 + 8);
    uint64_t v19 = v16;
LABEL_8:
    const void *v18 = (const void **)&result[1].__r_.__value_.__l.__data_;
    goto LABEL_9;
  }
LABEL_11:
  unint64_t v21 = *(std::vector<std::string> **)a5;
  v20.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
  if (v9 == (const void **)v10) {
    goto LABEL_16;
  }
  uint64_t v22 = (const std::vector<std::string>::value_type *)v9;
  do
  {
    double result = std::vector<std::string>::insert(v21, v20, v22).__i_;
    v20.__i_ = result + 1;
    ++v22;
  }
  while (v22 != v10);
LABEL_17:
  a7->__i_ = v10;
  a7[1].__i_ = (std::__wrap_iter<const std::string *>::iterator_type)v21;
  a7[2].__i_ = v20.__i_;
  return result;
}

void *turi::print_range<std::vector<std::string>>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  uint64_t v12 = *a2;
  while (v12 != a2[1])
  {
    int v13 = *(char *)(v12 + 23);
    uint64_t v14 = v13 >= 0 ? v12 : *(void *)v12;
    uint64_t v15 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(void *)(v12 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v14, v15);
    v12 += 24;
    if (v12 == a2[1]) {
      break;
    }
    int v16 = *(char *)(a4 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = *(void *)a4;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v17, v18);
  }
  int v19 = *(char *)(a5 + 23);
  if (v19 >= 0) {
    uint64_t v20 = a5;
  }
  else {
    uint64_t v20 = *(void *)a5;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v21 = *(void *)(a5 + 8);
  }
  uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v23 = std::locale::use_facet(&v25, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2241DB48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 8);
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x22A614FA0](a2, 0x1060C401EF26544);
  }
  return result;
}

void std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)int v2 = &unk_26D7706A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7706A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4 = *a3;
  if (*((unsigned char *)*a3 + 24))
  {
    uint64_t v17 = 0;
    uint64_t v18 = v4;
    uint64_t v19 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    int v5 = *((unsigned __int8 *)v4 + 24);
    uint64_t v17 = 0;
    uint64_t v18 = v4;
    uint64_t v19 = 0;
    if (!v5) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 != *((void *)v4 + 1))
  {
    uint64_t v6 = **(void ***)v4;
    if (v6)
    {
      uint64_t v7 = *(void *)(**(void **)v4 + 8) - *v6;
      if (v7)
      {
        uint64_t v8 = v7 >> 4;
        do
        {
          uint64_t v9 = *(void *)(a1 + 24);
          if (*(char *)(v9 + 23) < 0) {
            uint64_t v10 = *(void *)(v9 + 8);
          }
          else {
            uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
          }
          uint64_t v11 = *(unsigned char **)(a1 + 40);
          if (v10 && (!*v11 || !**(unsigned char **)(a1 + 32)))
          {
            std::ostream::write();
            uint64_t v11 = *(unsigned char **)(a1 + 40);
          }
          *uint64_t v11 = 0;
          uint64_t v12 = *(void *)(a1 + 8);
          int v13 = *(void **)(a1 + 16);
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v18, v16);
          turi::csv_writer::write(v12, v13, v16);
          uint64_t v20 = (void **)v16;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
          uint64_t v14 = ++v19;
        }
        while (v17 || v14 != v8);
      }
    }
  }
  return 0;
}

void sub_2241DB700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      long long v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(v7 - 24) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100](v4, i - 40);
  }
}

std::string *std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<turi::group_aggregate_value> const&,0>(std::string *a1, long long **a2, std::string::size_type *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  std::string::size_type v5 = a3[1];
  a1[1].__r_.__value_.__r.__words[0] = *a3;
  a1[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void *std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<std::string const*>>(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = result + 1;
  if (a2 != a3) {
    std::__tree<turi::flexible_type>::__emplace_hint_unique_impl<std::string const&>((uint64_t)result);
  }
  return result;
}

void sub_2241DBB00(_Unwind_Exception *a1)
{
  std::__tree<turi::flexible_type>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<turi::flexible_type>::__emplace_hint_unique_impl<std::string const&>(uint64_t a1)
{
  std::__tree<turi::flexible_type>::__construct_node<std::string const&>(a1, (uint64_t)v1);
}

void sub_2241DBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__tree<turi::flexible_type>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = operator new(0x30uLL);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 0;
  turi::flexible_type::flexible_type<std::string>((uint64_t)v4 + 32);
}

void sub_2241DBC0C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D770728;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D770728;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26D770728;
  std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2241DBD20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770728;
  return std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  v82[4] = *MEMORY[0x263EF8340];
  uint64_t v78 = 0;
  long long v77 = 0uLL;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v77, ((*a2)[1] - **a2) >> 4);
  uint64_t v5 = **a2;
  if ((*a2)[1] != v5)
  {
    unint64_t v6 = 0;
    while (2)
    {
      uint64_t v7 = (unsigned __int8 *)(**(void **)(v5 + 16 * v6) + 16 * (void)a2[1]);
      switch(byte_268085C74)
      {
        case 0:
          switch(v7[12])
          {
            case 0u:
              if (*(void *)v7 == turi::FLEX_UNDEFINED) {
                goto LABEL_100;
              }
              goto LABEL_79;
            case 1u:
              double v65 = *(double *)v7;
              uint64_t v66 = turi::FLEX_UNDEFINED;
              goto LABEL_94;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v7 << 8) >> 8 && !*((_DWORD *)v7 + 2)) {
                goto LABEL_100;
              }
              goto LABEL_79;
            default:
              goto LABEL_121;
          }
        case 1:
          switch(v7[12])
          {
            case 0u:
              double v65 = *(double *)&turi::FLEX_UNDEFINED;
              uint64_t v66 = *(void *)v7;
LABEL_94:
              double v71 = (double)v66;
              goto LABEL_95;
            case 1u:
              double v65 = *(double *)v7;
              double v71 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_95:
              if (v65 != v71) {
                goto LABEL_79;
              }
              goto LABEL_100;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              double v70 = vabdd_f64((double)*((int *)v7 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v7 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
              goto LABEL_99;
            default:
              goto LABEL_121;
          }
        case 2:
          unsigned int v45 = v7[12];
          if (v45 - 3 < 7 || v45 < 2) {
            goto LABEL_79;
          }
          if (v45 != 2) {
            goto LABEL_121;
          }
          double v47 = *(double *)v7;
          int v48 = *(char *)(*(void *)v7 + 31);
          size_t v49 = *(unsigned __int8 *)(*(void *)v7 + 31);
          if (v48 < 0) {
            size_t v50 = *(void *)(*(void *)&v47 + 16);
          }
          else {
            size_t v50 = v49;
          }
          if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
            uint64_t v72 = *(void *)(turi::FLEX_UNDEFINED + 16);
          }
          else {
            uint64_t v72 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
          }
          if (v50 != v72) {
            goto LABEL_79;
          }
          char v73 = (unsigned __int8 *)(*(void *)&v47 + 8);
          if ((v49 & 0x80) != 0) {
            char v73 = *(unsigned __int8 **)v73;
          }
          uint64_t v74 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
          if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
            uint64_t v74 = *(unsigned __int8 **)v74;
          }
          if ((v49 & 0x80) != 0)
          {
            if (!memcmp(v73, v74, v50)) {
              goto LABEL_100;
            }
          }
          else
          {
            if (!v50) {
              goto LABEL_100;
            }
            while (*v73 == *v74)
            {
              ++v73;
              ++v74;
              if (!--v50) {
                goto LABEL_100;
              }
            }
          }
          goto LABEL_79;
        case 3:
          unsigned int v51 = v7[12];
          if (v51 > 9) {
            goto LABEL_121;
          }
          if (v51 != 3) {
            goto LABEL_79;
          }
          double v52 = *(double *)v7;
          std::string::size_type v53 = *(double **)(*(void *)&v52 + 8);
          std::string::size_type v54 = *(double **)(*(void *)&v52 + 16);
          unint64_t v55 = v54 - v53;
          std::string::size_type v56 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v55 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v56) >> 3) {
            goto LABEL_79;
          }
          if (v54 == v53) {
            goto LABEL_100;
          }
          if (v55 <= 1) {
            uint64_t v57 = 1;
          }
          else {
            uint64_t v57 = v54 - v53;
          }
          if (*v53 != *v56) {
            goto LABEL_79;
          }
          unint64_t v58 = 0;
          size_t v59 = v56 + 1;
          uint64_t v60 = v53 + 1;
          uint64_t v61 = v57 - 1;
          do
          {
            if (v61 == v58) {
              goto LABEL_100;
            }
            double v62 = v60[v58];
            double v63 = v59[v58++];
          }
          while (v62 == v63);
          if (v58 >= v55) {
            goto LABEL_100;
          }
          goto LABEL_79;
        case 4:
          unsigned int v8 = v7[12];
          if (v8 > 9) {
            goto LABEL_121;
          }
          if (v8 != 4) {
            goto LABEL_79;
          }
          char v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v79, (uint64_t *)(*(void *)v7 + 8), (void *)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_84;
        case 5:
          unsigned int v67 = v7[12];
          if (v67 > 9) {
            goto LABEL_121;
          }
          if (v67 != 5) {
            goto LABEL_79;
          }
          char v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v79, (uint64_t **)(*(void *)v7 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_84;
        case 6:
          switch(v7[12])
          {
            case 0u:
              if (*(void *)v7 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268085C70) {
                goto LABEL_100;
              }
              goto LABEL_79;
            case 1u:
              double v70 = vabdd_f64(*(double *)v7, (double)dword_268085C70 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_99:
              if (v70 < 0.0000005) {
                goto LABEL_100;
              }
              goto LABEL_79;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(void *)v7) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v7 + 2) == dword_268085C70)
              {
                goto LABEL_100;
              }
              goto LABEL_79;
            default:
              goto LABEL_121;
          }
        case 7:
          unsigned int v64 = v7[12];
          if (v64 < 7 || v64 - 8 < 2) {
            goto LABEL_79;
          }
          if (v64 != 7) {
            goto LABEL_121;
          }
          goto LABEL_100;
        case 8:
          unsigned int v68 = v7[12];
          if (v68 < 8 || v68 == 9) {
            goto LABEL_79;
          }
          if (v68 != 8) {
            goto LABEL_121;
          }
          char v9 = turi::image_type::operator==(*(void *)v7 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_84:
          if (v9) {
            goto LABEL_100;
          }
          goto LABEL_79;
        case 9:
          unsigned int v10 = v7[12];
          if (v10 < 9) {
            goto LABEL_79;
          }
          if (v10 != 9)
          {
LABEL_121:
            turi::flexible_type_fail(0);
            __break(1u);
          }
          uint64_t v11 = *(void **)v7;
          if (turi::FLEX_UNDEFINED == *(void *)v7) {
            goto LABEL_100;
          }
          uint64_t v75 = turi::FLEX_UNDEFINED;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v11 + 1), turi::FLEX_UNDEFINED + 8)) {
            goto LABEL_79;
          }
          long long v13 = (char *)v11[3];
          char v12 = (char *)v11[4];
          uint64_t v14 = v12 - v13;
          if (v12 == v13) {
            goto LABEL_100;
          }
          if (!v11[1]) {
            goto LABEL_100;
          }
          uint64_t v15 = 1;
          do
          {
            uint64_t v16 = *(void *)v13;
            v13 += 8;
            v15 *= v16;
          }
          while (v13 != v12);
          if (!v15) {
            goto LABEL_100;
          }
          uint64_t v80 = 0;
          std::vector<unsigned long>::vector(&v81, v14 >> 3, &v80);
          long long v17 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
          uint64_t v18 = **(void **)(v75 + 8);
          int64_t v19 = v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0];
          unint64_t v20 = (uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v21 = v20 - 1;
          if (v20 <= 1) {
            uint64_t v22 = 1;
          }
          else {
            uint64_t v22 = (uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3;
          }
          do
          {
            if (*((void *)&v17 + 1) == (void)v17)
            {
              uint64_t v30 = 0;
              double v31 = *(double *)(*(void *)v11[1] + 8 * v11[9]);
            }
            else
            {
              uint64_t v23 = 0;
              int v24 = (uint64_t *)v11[6];
              std::locale v25 = (uint64_t *)v17;
              uint64_t v26 = v22;
              do
              {
                uint64_t v28 = *v25++;
                uint64_t v27 = v28;
                uint64_t v29 = *v24++;
                v23 += v29 * v27;
                --v26;
              }
              while (v26);
              uint64_t v30 = 0;
              double v31 = *(double *)(*(void *)v11[1] + 8 * (v11[9] + v23));
              std::string::size_type v32 = *(uint64_t **)(v75 + 48);
              long long v33 = (uint64_t *)v17;
              uint64_t v34 = v22;
              do
              {
                uint64_t v36 = *v33++;
                uint64_t v35 = v36;
                uint64_t v37 = *v32++;
                v30 += v37 * v35;
                --v34;
              }
              while (v34);
            }
            if (v31 != *(double *)(v18 + 8 * (*(void *)(v75 + 72) + v30)))
            {
              if ((void)v17)
              {
                v81.__r_.__value_.__l.__size_ = v17;
                operator delete((void *)v17);
              }
LABEL_79:
              std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(&v81, (long long *)(*(void *)(a1 + 8) + 24 * v6), **(void **)(**a2 + 16 * v6) + 16 * (void)a2[1]);
              turi::flexible_type::flexible_type<std::string>((uint64_t)v82);
            }
            uint64_t v38 = v20;
            uint64_t v39 = v20 - 1;
            if (v19 >= 1)
            {
              uint64_t v40 = v11[3];
              unint64_t v41 = *(void *)(v17 + 8 * v21) + 1;
              *(void *)(v17 + 8 * v21) = v41;
              unint64_t v42 = (v19 & 0xFFFFFFFFFFFFFFF8) - 16;
              uint64_t v39 = v20 - 1;
              if (v41 >= *(void *)(v40 + 8 * v21))
              {
                do
                {
                  *(void *)(v17 + v42 + 8) = 0;
                  if (v39 <= 0) {
                    goto LABEL_39;
                  }
                  --v39;
                  unint64_t v43 = *(void *)(v17 + v42) + 1;
                  *(void *)(v17 + v42) = v43;
                  unint64_t v44 = *(void *)(v40 + v42);
                  v42 -= 8;
                }
                while (v43 >= v44);
                uint64_t v38 = 1;
              }
              else
              {
                uint64_t v38 = 1;
                uint64_t v39 = v20 - 1;
              }
            }
          }
          while (v38 && (v39 & 0x8000000000000000) == 0);
          if ((void)v17)
          {
LABEL_39:
            v81.__r_.__value_.__l.__size_ = v17;
            operator delete((void *)v17);
          }
LABEL_100:
          if (*(unsigned char *)(a1 + 44) != 7)
          {
            std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(&v81, (long long *)(*(void *)(a1 + 8) + 24 * v6), a1 + 32);
            turi::flexible_type::flexible_type<std::string>((uint64_t)v82);
          }
          ++v6;
          uint64_t v5 = **a2;
          if (v6 >= ((*a2)[1] - v5) >> 4) {
            break;
          }
          continue;
        default:
          goto LABEL_121;
      }
      break;
    }
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 5;
  operator new();
}

void sub_2241DC6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a13;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a1, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (atomic_ullong *volatile *)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  if (a2 != a1)
  {
    uint64_t v5 = *(atomic_ullong **)(a2 + 24);
    *(void *)(a1 + 29) = *(void *)(a2 + 29);
    *uint64_t v4 = v5;
    unsigned int v6 = *(unsigned __int8 *)(a2 + 36);
    *(unsigned char *)(a1 + 36) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  return a1;
}

std::string *std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  unsigned int v6 = (atomic_ullong *volatile *)&this[1];
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (&this[1] != (std::string *)a3)
  {
    uint64_t v7 = *(atomic_ullong **)a3;
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v6 = v7;
    unsigned int v8 = *(unsigned __int8 *)(a3 + 12);
    this[1].__r_.__value_.__s.__data_[12] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  return this;
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D7707A8;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D7707A8;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  *(void *)uint64_t result = &unk_26D7707A8;
  *((void *)result + 1) = 0;
  uint64_t v3 = (atomic_ullong *volatile *)(result + 8);
  *((_DWORD *)result + 4) = 0;
  result[20] = 0;
  if (result != (char *)a1)
  {
    *(void *)(result + 13) = *(void *)(a1 + 13);
    *uint64_t v3 = *(atomic_ullong *volatile *)(a1 + 8);
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    result[20] = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D7707A8;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  if (a2 != result)
  {
    uint64_t v3 = *(atomic_ullong **)(result + 8);
    *(void *)(a2 + 13) = *(void *)(result + 13);
    *uint64_t v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(unsigned char *)(a2 + 20) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<turi::flexible_type>::vector(&v109, ((*a2)[1] - **a2) >> 4);
  uint64_t v6 = **a2;
  if ((*a2)[1] == v6)
  {
LABEL_193:
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 4;
    operator new();
  }
  unint64_t v7 = 0;
  uint64_t v108 = (uint64_t *)(a1 + 8);
  while (2)
  {
    unsigned int v8 = (unsigned __int8 *)(**(void **)(v6 + 16 * v7) + 16 * (void)a2[1]);
    switch(byte_268085C74)
    {
      case 0:
        switch(v8[12])
        {
          case 0u:
            if (*(void *)v8 == turi::FLEX_UNDEFINED) {
              goto LABEL_138;
            }
            goto LABEL_79;
          case 1u:
            v5.n128_u64[0] = *(void *)v8;
            uint64_t v65 = turi::FLEX_UNDEFINED;
            goto LABEL_132;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v8 << 8) >> 8 && !*((_DWORD *)v8 + 2)) {
              goto LABEL_138;
            }
            goto LABEL_79;
          default:
            goto LABEL_194;
        }
      case 1:
        switch(v8[12])
        {
          case 0u:
            v5.n128_u64[0] = turi::FLEX_UNDEFINED;
            uint64_t v65 = *(void *)v8;
LABEL_132:
            double v87 = (double)v65;
            goto LABEL_133;
          case 1u:
            v5.n128_u64[0] = *(void *)v8;
            double v87 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_133:
            if (v5.n128_f64[0] != v87) {
              goto LABEL_79;
            }
            goto LABEL_138;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            v5.n128_f64[0] = vabdd_f64((double)*((int *)v8 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_137;
          default:
            goto LABEL_194;
        }
      case 2:
        unsigned int v46 = v8[12];
        if (v46 - 3 < 7 || v46 < 2) {
          goto LABEL_79;
        }
        if (v46 != 2) {
          goto LABEL_194;
        }
        uint64_t v48 = *(void *)v8;
        int v49 = *(char *)(*(void *)v8 + 31);
        size_t v50 = *(unsigned __int8 *)(*(void *)v8 + 31);
        if (v49 < 0) {
          size_t v51 = *(void *)(v48 + 16);
        }
        else {
          size_t v51 = v50;
        }
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
          uint64_t v102 = *(void *)(turi::FLEX_UNDEFINED + 16);
        }
        else {
          uint64_t v102 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        }
        if (v51 != v102) {
          goto LABEL_79;
        }
        char v103 = (unsigned __int8 *)(v48 + 8);
        if ((v50 & 0x80) != 0) {
          char v103 = *(unsigned __int8 **)v103;
        }
        BOOL v104 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
          BOOL v104 = *(unsigned __int8 **)v104;
        }
        if ((v50 & 0x80) != 0)
        {
          if (memcmp(v103, v104, v51)) {
            goto LABEL_79;
          }
        }
        else
        {
          if (!v51) {
            goto LABEL_138;
          }
          do
          {
            if (*v103 != *v104) {
              goto LABEL_79;
            }
            ++v103;
            ++v104;
            --v51;
          }
          while (v51);
        }
        goto LABEL_138;
      case 3:
        unsigned int v52 = v8[12];
        if (v52 > 9) {
          goto LABEL_194;
        }
        if (v52 != 3) {
          goto LABEL_79;
        }
        uint64_t v53 = *(void *)v8;
        std::string::size_type v54 = *(unint64_t **)(v53 + 8);
        unint64_t v55 = *(void **)(v53 + 16);
        unint64_t v56 = v55 - v54;
        uint64_t v57 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v56 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v57) >> 3) {
          goto LABEL_79;
        }
        if (v55 == v54) {
          goto LABEL_138;
        }
        if (v56 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v55 - v54;
        }
        v5.n128_u64[0] = *v54;
        if (*(double *)v54 != *v57) {
          goto LABEL_79;
        }
        unint64_t v59 = 0;
        uint64_t v60 = v57 + 1;
        uint64_t v61 = v54 + 1;
        uint64_t v62 = v58 - 1;
        while (v62 != v59)
        {
          v5.n128_u64[0] = v61[v59];
          double v63 = v60[v59++];
          if (v5.n128_f64[0] != v63)
          {
            if (v59 < v56) {
              goto LABEL_79;
            }
            goto LABEL_138;
          }
        }
        goto LABEL_138;
      case 4:
        unsigned int v9 = v8[12];
        if (v9 > 9) {
          goto LABEL_194;
        }
        if (v9 != 4) {
          goto LABEL_79;
        }
        char v10 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v110, (uint64_t *)(*(void *)v8 + 8), (void *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_122;
      case 5:
        unsigned int v66 = v8[12];
        if (v66 > 9) {
          goto LABEL_194;
        }
        if (v66 != 5) {
          goto LABEL_79;
        }
        char v10 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v110, (uint64_t **)(*(void *)v8 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_122;
      case 6:
        switch(v8[12])
        {
          case 0u:
            if (*(void *)v8 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268085C70) {
              goto LABEL_138;
            }
            goto LABEL_79;
          case 1u:
            v5.n128_f64[0] = vabdd_f64(*(double *)v8, (double)dword_268085C70 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_137:
            if (v5.n128_f64[0] < 0.0000005) {
              goto LABEL_138;
            }
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (((turi::FLEX_UNDEFINED ^ *(void *)v8) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v8 + 2) == dword_268085C70)
            {
              goto LABEL_138;
            }
            goto LABEL_79;
          default:
            goto LABEL_194;
        }
      case 7:
        unsigned int v64 = v8[12];
        if (v64 < 7 || v64 - 8 < 2) {
          goto LABEL_79;
        }
        if (v64 != 7) {
          goto LABEL_194;
        }
        goto LABEL_138;
      case 8:
        unsigned int v67 = v8[12];
        if (v67 < 8 || v67 == 9) {
          goto LABEL_79;
        }
        if (v67 != 8) {
          goto LABEL_194;
        }
        char v10 = turi::image_type::operator==(*(void *)v8 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_122:
        if (v10) {
          goto LABEL_138;
        }
        goto LABEL_79;
      case 9:
        unsigned int v11 = v8[12];
        if (v11 < 9) {
          goto LABEL_79;
        }
        if (v11 == 9)
        {
          char v12 = *(void **)v8;
          if (turi::FLEX_UNDEFINED == *(void *)v8) {
            goto LABEL_138;
          }
          uint64_t v106 = turi::FLEX_UNDEFINED;
          if (turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v12 + 1), turi::FLEX_UNDEFINED + 8))
          {
            uint64_t v14 = (char *)v12[3];
            long long v13 = (char *)v12[4];
            uint64_t v15 = v13 - v14;
            if (v13 == v14) {
              goto LABEL_138;
            }
            if (!v12[1]) {
              goto LABEL_138;
            }
            uint64_t v16 = 1;
            do
            {
              uint64_t v17 = *(void *)v14;
              v14 += 8;
              v16 *= v17;
            }
            while (v14 != v13);
            if (!v16)
            {
LABEL_138:
              uint64_t v70 = v109 + 16 * v7;
              if ((uint64_t *)v70 == v108) {
                goto LABEL_118;
              }
              switch(*(unsigned char *)(v70 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v88 = *(atomic_ullong *volatile *)v70;
                    if (!*(void *)v70) {
                      goto LABEL_171;
                    }
                    if (*((char *)v88 + 31) < 0) {
                      operator delete((void *)v88[1]);
                    }
                    atomic_ullong *volatile v89 = v88;
                    uint64_t v90 = 0x1012C404EF22A49;
                    goto LABEL_170;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v97 = *(atomic_ullong *volatile *)v70;
                    if (!*(void *)v70) {
                      goto LABEL_171;
                    }
                    long long v98 = (void *)v97[1];
                    if (v98)
                    {
                      v97[2] = (atomic_ullong)v98;
                      operator delete(v98);
                    }
                    atomic_ullong *volatile v89 = v97;
                    uint64_t v90 = 0x1080C409938AC02;
                    goto LABEL_170;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v91 = *(atomic_ullong *volatile *)v70;
                    if (!*(void *)v70) {
                      goto LABEL_171;
                    }
                    char v112 = (void **)(v91 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v112);
                    goto LABEL_165;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v91 = *(atomic_ullong *volatile *)v70;
                    if (!*(void *)v70) {
                      goto LABEL_171;
                    }
                    char v112 = (void **)(v91 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v112);
LABEL_165:
                    atomic_ullong *volatile v89 = v91;
                    uint64_t v90 = 0x1020C405E66F15BLL;
                    goto LABEL_170;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v99 = *(atomic_ullong *volatile *)v70;
                    if (!*(void *)v70) {
                      goto LABEL_171;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v99 + 2);
                    atomic_ullong *volatile v89 = v99;
                    unsigned int v96 = -235920773;
                    goto LABEL_169;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v92 = *(atomic_ullong *volatile *)v70;
                    if (*(void *)v70)
                    {
                      std::string v93 = (void *)v92[6];
                      if (v93)
                      {
                        v92[7] = (atomic_ullong)v93;
                        operator delete(v93);
                      }
                      std::string v94 = (void *)v92[3];
                      if (v94)
                      {
                        v92[4] = (atomic_ullong)v94;
                        operator delete(v94);
                      }
                      std::string v95 = (std::__shared_weak_count *)v92[2];
                      if (v95) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v95);
                      }
                      atomic_ullong *volatile v89 = v92;
                      unsigned int v96 = 2071181815;
LABEL_169:
                      uint64_t v90 = v96 | 0x1030C4000000000;
LABEL_170:
                      MEMORY[0x22A614FA0](v89, v90);
                    }
LABEL_171:
                    *(void *)uint64_t v70 = 0;
                  }
                  break;
                default:
                  break;
              }
              uint64_t v100 = *v108;
              *(void *)(v70 + 5) = *(void *)(a1 + 13);
              *(void *)uint64_t v70 = v100;
              unsigned int v101 = *(unsigned __int8 *)(a1 + 20);
              *(unsigned char *)(v70 + 12) = v101;
              if (v101 > 9 || ((1 << v101) & 0x33C) == 0) {
                goto LABEL_118;
              }
              goto LABEL_117;
            }
            uint64_t v111 = 0;
            std::vector<unsigned long>::vector(&v112, v15 >> 3, &v111);
            uint64_t v18 = v112;
            int64_t v19 = v113;
            uint64_t v20 = **(void **)(v106 + 8);
            uint64_t v21 = (char *)v113 - (char *)v112;
            unint64_t v22 = v113 - v112;
            unint64_t v23 = v22 - 1;
            if (v22 <= 1) {
              uint64_t v24 = 1;
            }
            else {
              uint64_t v24 = v113 - v112;
            }
            while (1)
            {
              if (v19 == v18)
              {
                uint64_t v32 = 0;
                v5.n128_u64[0] = *(void *)(*(void *)v12[1] + 8 * v12[9]);
              }
              else
              {
                uint64_t v25 = 0;
                uint64_t v26 = (uint64_t *)v12[6];
                uint64_t v27 = v18;
                uint64_t v28 = v24;
                do
                {
                  uint64_t v30 = (uint64_t)*v27++;
                  uint64_t v29 = v30;
                  uint64_t v31 = *v26++;
                  v25 += v31 * v29;
                  --v28;
                }
                while (v28);
                uint64_t v32 = 0;
                v5.n128_u64[0] = *(void *)(*(void *)v12[1] + 8 * (v12[9] + v25));
                long long v33 = *(uint64_t **)(v106 + 48);
                uint64_t v34 = v18;
                uint64_t v35 = v24;
                do
                {
                  uint64_t v37 = (uint64_t)*v34++;
                  uint64_t v36 = v37;
                  uint64_t v38 = *v33++;
                  v32 += v38 * v36;
                  --v35;
                }
                while (v35);
              }
              if (v5.n128_f64[0] != *(double *)(v20 + 8 * (*(void *)(v106 + 72) + v32))) {
                break;
              }
              uint64_t v39 = v22;
              uint64_t v40 = v22 - 1;
              if (v21 >= 1)
              {
                uint64_t v41 = v12[3];
                unint64_t v42 = (unint64_t)v18[v23] + 1;
                v18[v23] = (void *)v42;
                unint64_t v43 = (v21 & 0xFFFFFFFFFFFFFFF8) - 16;
                uint64_t v40 = v22 - 1;
                if (v42 >= *(void *)(v41 + 8 * v23))
                {
                  while (1)
                  {
                    *(void **)((char *)v18 + v43 + 8) = 0;
                    if (v40 <= 0) {
                      break;
                    }
                    --v40;
                    unint64_t v44 = *(unint64_t *)((char *)v18 + v43) + 1;
                    *(void **)((char *)v18 + v43) = (void *)v44;
                    unint64_t v45 = *(void *)(v41 + v43);
                    v43 -= 8;
                    if (v44 < v45)
                    {
                      uint64_t v39 = 1;
                      goto LABEL_36;
                    }
                  }
LABEL_39:
                  BOOL v113 = v18;
                  operator delete(v18);
                  goto LABEL_138;
                }
                uint64_t v39 = 1;
                uint64_t v40 = v22 - 1;
              }
LABEL_36:
              if (!v39 || v40 < 0)
              {
                if (!v18) {
                  goto LABEL_138;
                }
                goto LABEL_39;
              }
            }
            if (v18)
            {
              BOOL v113 = v18;
              operator delete(v18);
            }
          }
LABEL_79:
          uint64_t v69 = **(void **)(**a2 + 16 * v7) + 16 * (void)a2[1];
          uint64_t v70 = v109 + 16 * v7;
          if (v69 == v70) {
            goto LABEL_118;
          }
          switch(*(unsigned char *)(v70 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v70;
                if (!*(void *)v70) {
                  goto LABEL_112;
                }
                if (*((char *)v71 + 31) < 0) {
                  operator delete((void *)v71[1]);
                }
                atomic_ullong *volatile v72 = v71;
                uint64_t v73 = 0x1012C404EF22A49;
                goto LABEL_111;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v80 = *(atomic_ullong *volatile *)v70;
                if (!*(void *)v70) {
                  goto LABEL_112;
                }
                std::string v81 = (void *)v80[1];
                if (v81)
                {
                  v80[2] = (atomic_ullong)v81;
                  operator delete(v81);
                }
                atomic_ullong *volatile v72 = v80;
                uint64_t v73 = 0x1080C409938AC02;
                goto LABEL_111;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                if (!*(void *)v70) {
                  goto LABEL_112;
                }
                char v112 = (void **)(v74 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v112);
                goto LABEL_106;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                if (!*(void *)v70) {
                  goto LABEL_112;
                }
                char v112 = (void **)(v74 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v112);
LABEL_106:
                atomic_ullong *volatile v72 = v74;
                uint64_t v73 = 0x1020C405E66F15BLL;
                goto LABEL_111;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v82 = *(atomic_ullong *volatile *)v70;
                if (!*(void *)v70) {
                  goto LABEL_112;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v82 + 2);
                atomic_ullong *volatile v72 = v82;
                unsigned int v79 = -235920773;
                goto LABEL_110;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v75 = *(atomic_ullong *volatile *)v70;
                if (*(void *)v70)
                {
                  std::string v76 = (void *)v75[6];
                  if (v76)
                  {
                    v75[7] = (atomic_ullong)v76;
                    operator delete(v76);
                  }
                  long long v77 = (void *)v75[3];
                  if (v77)
                  {
                    v75[4] = (atomic_ullong)v77;
                    operator delete(v77);
                  }
                  uint64_t v78 = (std::__shared_weak_count *)v75[2];
                  if (v78) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
                  }
                  atomic_ullong *volatile v72 = v75;
                  unsigned int v79 = 2071181815;
LABEL_110:
                  uint64_t v73 = v79 | 0x1030C4000000000;
LABEL_111:
                  MEMORY[0x22A614FA0](v72, v73, v5);
                }
LABEL_112:
                *(void *)uint64_t v70 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v83 = *(void *)v69;
          *(void *)(v70 + 5) = *(void *)(v69 + 5);
          *(void *)uint64_t v70 = v83;
          LODWORD(v83) = *(unsigned __int8 *)(v69 + 12);
          *(unsigned char *)(v70 + 12) = v83;
          BOOL v84 = v83 > 9;
          int v85 = (1 << v83) & 0x33C;
          if (v84 || v85 == 0) {
            goto LABEL_118;
          }
LABEL_117:
          atomic_fetch_add(*(atomic_ullong *volatile *)v70, 1uLL);
LABEL_118:
          ++v7;
          uint64_t v6 = **a2;
          if (v7 >= ((*a2)[1] - v6) >> 4) {
            goto LABEL_193;
          }
          continue;
        }
LABEL_194:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
      default:
        goto LABEL_194;
    }
  }
}

void sub_2241DD7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void **a22)
{
  MEMORY[0x22A614FA0](v24, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v26 = *v22;
    if (*v22)
    {
      a19 = (void **)(v26 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a19);
      MEMORY[0x22A614FA0](v26, 0x1020C405E66F15BLL);
    }
    uint64_t *v22 = 0;
  }
  uint64_t *v22 = 0;
  *((_DWORD *)v22 + 2) = 0;
  *((unsigned char *)v22 + 12) = 0;
  a22 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D770828;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D770828;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  *(void *)uint64_t result = &unk_26D770828;
  *((void *)result + 1) = 0;
  uint64_t v3 = (atomic_ullong *volatile *)(result + 8);
  *((_DWORD *)result + 4) = 0;
  result[20] = 0;
  if (result != (char *)a1)
  {
    *(void *)(result + 13) = *(void *)(a1 + 13);
    *uint64_t v3 = *(atomic_ullong *volatile *)(a1 + 8);
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    result[20] = v4;
    BOOL v5 = v4 > 9;
    int v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0) {
      atomic_fetch_add(*v3, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D770828;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (atomic_ullong *volatile *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  if (a2 != result)
  {
    uint64_t v3 = *(atomic_ullong **)(result + 8);
    *(void *)(a2 + 13) = *(void *)(result + 13);
    *uint64_t v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(unsigned char *)(a2 + 20) = (_BYTE)v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*v2, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<double>::vector(&v105, ((*a2)[1] - **a2) >> 4);
  uint64_t v6 = **a2;
  if ((*a2)[1] == v6) {
    goto LABEL_172;
  }
  unint64_t v7 = 0;
LABEL_3:
  uint64_t v8 = **(void **)(v6 + 16 * v7) + 16 * (void)a2[1];
  int v9 = *(unsigned __int8 *)(v8 + 12);
  if (v9 != 7)
  {
    if (v9 != 1)
    {
      switch(*(unsigned char *)(v8 + 12))
      {
        case 0:
          uint64_t v11 = *(void *)v8;
          goto LABEL_103;
        case 2:
          uint64_t v19 = *(void *)v8;
          uint64_t v20 = (char **)(*(void *)v8 + 8);
          size_t __idx = 0;
          uint64_t v21 = (char *)v20;
          if (*(char *)(v19 + 31) < 0) {
            uint64_t v21 = *v20;
          }
          unint64_t v22 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v122, v21);
          double v23 = std::stod(v22, &__idx);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v19 + 31) < 0) {
            uint64_t v24 = *(void *)(v19 + 16);
          }
          else {
            uint64_t v24 = *(unsigned __int8 *)(v19 + 31);
          }
          if (__idx != v24)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v100 = std::string::append(&v120, " cannot be interpreted as a float");
            long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
            v122.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v101;
            v100->__r_.__value_.__l.__size_ = 0;
            v100->__r_.__value_.__r.__words[2] = 0;
            v100->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v122);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_132;
        case 3:
          uint64_t v15 = *(void *)v8;
          std::string::size_type v118 = 0;
          uint64_t v119 = 0;
          uint64_t v117 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v117, *(const void **)(v15 + 8), *(void *)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 3);
          turi::flexible_type_fail(0);
          uint64_t v16 = v117;
          double v10 = 0.0;
          if (!v117) {
            goto LABEL_152;
          }
          std::string::size_type v118 = v117;
          goto LABEL_106;
        case 4:
          uint64_t v18 = *(void *)v8;
          memset(v112, 0, sizeof(v112));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v112, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
          goto LABEL_32;
        case 5:
          uint64_t v12 = *(void *)v8;
          memset(v111, 0, sizeof(v111));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v111, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
          goto LABEL_32;
        case 6:
          double v13 = (double)((uint64_t)(*(void *)v8 << 8) >> 8);
          double v14 = (double)*(int *)(v8 + 8);
          goto LABEL_121;
        case 8:
          uint64_t v25 = *(void *)v8;
          uint64_t v26 = *(atomic_uint **)(v25 + 16);
          uint64_t v106 = *(void *)(v25 + 8);
          std::string::size_type v107 = v26;
          if (v26) {
            atomic_fetch_add_explicit(v26 + 2, 1u, memory_order_relaxed);
          }
          long long v27 = *(_OWORD *)(v25 + 24);
          long long v28 = *(_OWORD *)(v25 + 56);
          long long v109 = *(_OWORD *)(v25 + 40);
          long long v110 = v28;
          long long v108 = v27;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v107);
LABEL_32:
          double v10 = 0.0;
          goto LABEL_152;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v8 + 8);
          turi::flexible_type_fail(0);
          if (__p)
          {
            uint64_t v116 = __p;
            operator delete(__p);
          }
          if (__str.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v114 = __str.__r_.__value_.__r.__words[2];
            operator delete((void *)__str.__r_.__value_.__r.__words[2]);
          }
          std::string::size_type size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          double v10 = 0.0;
          if (!__str.__r_.__value_.__l.__size_) {
            goto LABEL_152;
          }
          goto LABEL_112;
        default:
          goto LABEL_173;
      }
    }
    double v10 = *(double *)v8;
    goto LABEL_152;
  }
  switch(byte_268085C74)
  {
    case 0:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
          if (*(void *)(a1 + 8) == turi::FLEX_UNDEFINED) {
            goto LABEL_151;
          }
          goto LABEL_101;
        case 1:
          double v77 = *(double *)(a1 + 8);
          uint64_t v78 = turi::FLEX_UNDEFINED;
          goto LABEL_145;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_101;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)(a1 + 8) << 8) >> 8 && !*(_DWORD *)(a1 + 16)) {
            goto LABEL_151;
          }
          goto LABEL_101;
        default:
          goto LABEL_173;
      }
    case 1:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
          double v77 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v78 = *(void *)(a1 + 8);
LABEL_145:
          double v94 = (double)v78;
          goto LABEL_146;
        case 1:
          double v77 = *(double *)(a1 + 8);
          double v94 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_146:
          if (v77 != v94) {
            goto LABEL_101;
          }
          goto LABEL_151;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_101;
        case 6:
          double v93 = vabdd_f64((double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_150;
        default:
          goto LABEL_173;
      }
    case 2:
      unsigned int v67 = *(unsigned __int8 *)(a1 + 20);
      if (v67 - 3 < 7 || v67 < 2) {
        goto LABEL_101;
      }
      if (v67 != 2) {
        goto LABEL_173;
      }
      uint64_t v69 = *(void *)(a1 + 8);
      if (*(char *)(v69 + 31) < 0) {
        size_t v70 = *(void *)(v69 + 16);
      }
      else {
        size_t v70 = *(unsigned __int8 *)(v69 + 31);
      }
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
        uint64_t v95 = *(void *)(turi::FLEX_UNDEFINED + 16);
      }
      else {
        uint64_t v95 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      }
      if (v70 != v95) {
        goto LABEL_101;
      }
      unsigned int v96 = (unsigned __int8 *)(v69 + 8);
      if ((*(unsigned char *)(v69 + 31) & 0x80) != 0) {
        unsigned int v96 = *(unsigned __int8 **)v96;
      }
      atomic_ullong *volatile v97 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        atomic_ullong *volatile v97 = *(unsigned __int8 **)v97;
      }
      if ((*(unsigned char *)(v69 + 31) & 0x80) != 0)
      {
        if (!memcmp(v96, v97, v70)) {
          goto LABEL_151;
        }
      }
      else
      {
        if (!v70) {
          goto LABEL_151;
        }
        while (*v96 == *v97)
        {
          ++v96;
          ++v97;
          if (!--v70) {
            goto LABEL_151;
          }
        }
      }
      goto LABEL_101;
    case 3:
      unsigned int v71 = *(unsigned __int8 *)(a1 + 20);
      if (v71 > 9) {
        goto LABEL_173;
      }
      if (v71 != 3) {
        goto LABEL_101;
      }
      atomic_ullong *volatile v72 = *(double **)(*(void *)(a1 + 8) + 8);
      uint64_t v73 = *(double **)(*(void *)(a1 + 8) + 16);
      unint64_t v74 = v73 - v72;
      atomic_ullong *volatile v75 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v74 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v75) >> 3) {
        goto LABEL_101;
      }
      if (v73 == v72) {
        goto LABEL_151;
      }
      if (v74 <= 1) {
        unint64_t v74 = 1;
      }
      while (*v72 == *v75)
      {
        ++v75;
        ++v72;
        if (!--v74) {
          goto LABEL_151;
        }
      }
      goto LABEL_101;
    case 4:
      unsigned int v29 = *(unsigned __int8 *)(a1 + 20);
      if (v29 > 9) {
        goto LABEL_173;
      }
      if (v29 != 4) {
        goto LABEL_101;
      }
      char v30 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v122, (uint64_t *)(*(void *)(a1 + 8) + 8), (void *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_135;
    case 5:
      unsigned int v79 = *(unsigned __int8 *)(a1 + 20);
      if (v79 > 9) {
        goto LABEL_173;
      }
      if (v79 != 5) {
        goto LABEL_101;
      }
      char v30 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v122, (uint64_t **)(*(void *)(a1 + 8) + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_135;
    case 6:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
          if (*(void *)(a1 + 8) == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268085C70) {
            goto LABEL_151;
          }
          goto LABEL_101;
        case 1:
          double v93 = vabdd_f64(*(double *)(a1 + 8), (double)dword_268085C70 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_150:
          if (v93 < 0.0000005) {
            goto LABEL_151;
          }
          goto LABEL_101;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_101;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFLL) == 0
            && *(_DWORD *)(a1 + 16) == dword_268085C70)
          {
            goto LABEL_151;
          }
          goto LABEL_101;
        default:
          goto LABEL_173;
      }
    case 7:
      unsigned int v76 = *(unsigned __int8 *)(a1 + 20);
      if (v76 < 7 || v76 - 8 < 2) {
        goto LABEL_101;
      }
      if (v76 != 7) {
        goto LABEL_173;
      }
      goto LABEL_151;
    case 8:
      unsigned int v80 = *(unsigned __int8 *)(a1 + 20);
      if (v80 < 8 || v80 == 9) {
        goto LABEL_101;
      }
      if (v80 != 8) {
        goto LABEL_173;
      }
      char v30 = turi::image_type::operator==(*(void *)(a1 + 8) + 8, turi::FLEX_UNDEFINED + 8);
LABEL_135:
      if (v30) {
        goto LABEL_151;
      }
      goto LABEL_101;
    case 9:
      unsigned int v31 = *(unsigned __int8 *)(a1 + 20);
      if (v31 < 9) {
        goto LABEL_101;
      }
      if (v31 == 9)
      {
        uint64_t v32 = turi::FLEX_UNDEFINED;
        long long v33 = *(void **)(a1 + 8);
        if ((void *)turi::FLEX_UNDEFINED == v33) {
          goto LABEL_151;
        }
        if (turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v33 + 1), turi::FLEX_UNDEFINED + 8))
        {
          uint64_t v35 = (char *)v33[3];
          uint64_t v34 = (char *)v33[4];
          uint64_t v36 = v34 - v35;
          if (v34 == v35) {
            goto LABEL_151;
          }
          if (!v33[1]) {
            goto LABEL_151;
          }
          uint64_t v37 = 1;
          do
          {
            uint64_t v38 = *(void *)v35;
            v35 += 8;
            v37 *= v38;
          }
          while (v35 != v34);
          if (!v37) {
            goto LABEL_151;
          }
          uint64_t v106 = 0;
          std::vector<unsigned long>::vector(&__str, v36 >> 3, &v106);
          long long v39 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          uint64_t v40 = **(void **)(v32 + 8);
          int64_t v41 = __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0];
          unint64_t v42 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v43 = v42 - 1;
          if (v42 <= 1) {
            uint64_t v44 = 1;
          }
          else {
            uint64_t v44 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
          }
          while (1)
          {
            if (*((void *)&v39 + 1) == (void)v39)
            {
              uint64_t v52 = 0;
              double v53 = *(double *)(*(void *)v33[1] + 8 * v33[9]);
            }
            else
            {
              uint64_t v45 = 0;
              unsigned int v46 = (uint64_t *)v33[6];
              double v47 = (uint64_t *)v39;
              uint64_t v48 = v44;
              do
              {
                uint64_t v50 = *v47++;
                uint64_t v49 = v50;
                uint64_t v51 = *v46++;
                v45 += v51 * v49;
                --v48;
              }
              while (v48);
              uint64_t v52 = 0;
              double v53 = *(double *)(*(void *)v33[1] + 8 * (v33[9] + v45));
              std::string::size_type v54 = *(uint64_t **)(v32 + 48);
              unint64_t v55 = (uint64_t *)v39;
              uint64_t v56 = v44;
              do
              {
                uint64_t v58 = *v55++;
                uint64_t v57 = v58;
                uint64_t v59 = *v54++;
                v52 += v59 * v57;
                --v56;
              }
              while (v56);
            }
            if (v53 != *(double *)(v40 + 8 * (*(void *)(v32 + 72) + v52))) {
              break;
            }
            uint64_t v60 = v42;
            uint64_t v61 = v42 - 1;
            if (v41 >= 1)
            {
              uint64_t v62 = v33[3];
              unint64_t v63 = *(void *)(v39 + 8 * v43) + 1;
              *(void *)(v39 + 8 * v43) = v63;
              unint64_t v64 = (v41 & 0xFFFFFFFFFFFFFFF8) - 16;
              uint64_t v61 = v42 - 1;
              if (v63 >= *(void *)(v62 + 8 * v43))
              {
                do
                {
                  *(void *)(v39 + v64 + 8) = 0;
                  if (v61 <= 0) {
                    goto LABEL_65;
                  }
                  --v61;
                  unint64_t v65 = *(void *)(v39 + v64) + 1;
                  *(void *)(v39 + v64) = v65;
                  unint64_t v66 = *(void *)(v62 + v64);
                  v64 -= 8;
                }
                while (v65 >= v66);
                uint64_t v60 = 1;
              }
              else
              {
                uint64_t v60 = 1;
                uint64_t v61 = v42 - 1;
              }
            }
            if (!v60 || v61 < 0)
            {
              if ((void)v39)
              {
LABEL_65:
                __str.__r_.__value_.__l.__size_ = v39;
                operator delete((void *)v39);
              }
LABEL_151:
              double v10 = NAN;
LABEL_152:
              *(double *)(v105 + 8 * v7++) = v10;
              uint64_t v6 = **a2;
              if (v7 >= ((*a2)[1] - v6) >> 4)
              {
LABEL_172:
                *(void *)(a3 + 5) = 0;
                *(void *)a3 = 0;
                *(unsigned char *)(a3 + 12) = 3;
                operator new();
              }
              goto LABEL_3;
            }
          }
          if ((void)v39)
          {
            __str.__r_.__value_.__l.__size_ = v39;
            operator delete((void *)v39);
          }
        }
LABEL_101:
        double v10 = 0.0;
        switch(*(unsigned char *)(a1 + 20))
        {
          case 0:
            uint64_t v11 = *(void *)(a1 + 8);
LABEL_103:
            double v10 = (double)v11;
            goto LABEL_152;
          case 1:
            double v10 = *(double *)(a1 + 8);
            goto LABEL_152;
          case 2:
            uint64_t v83 = *(void *)(a1 + 8);
            v120.__r_.__value_.__r.__words[0] = 0;
            BOOL v84 = (char *)(v83 + 8);
            if (*(char *)(v83 + 31) < 0) {
              BOOL v84 = *(char **)(v83 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v84);
            double v23 = std::stod(&__str, (size_t *)&v120);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v83 + 31) < 0) {
              uint64_t v85 = *(void *)(v83 + 16);
            }
            else {
              uint64_t v85 = *(unsigned __int8 *)(v83 + 31);
            }
            if (v120.__r_.__value_.__r.__words[0] != v85)
            {
              uint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              char v103 = std::string::append(&v122, " cannot be interpreted as a float");
              long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v102, &__str);
              __cxa_throw(v102, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
LABEL_132:
            float v92 = v23;
            double v10 = v92;
            goto LABEL_152;
          case 3:
            uint64_t v82 = *(void *)(a1 + 8);
            memset(&__str, 0, sizeof(__str));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v82 + 8), *(void *)(v82 + 16), (uint64_t)(*(void *)(v82 + 16) - *(void *)(v82 + 8)) >> 3);
            turi::flexible_type_fail(0);
            uint64_t v16 = (void *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__r.__words[0])
            {
              __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
LABEL_106:
              operator delete(v16);
            }
            goto LABEL_152;
          case 4:
            uint64_t v86 = *(void *)(a1 + 8);
            memset(&__str, 0, sizeof(__str));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v86 + 8), *(uint64_t **)(v86 + 16), (uint64_t)(*(void *)(v86 + 16) - *(void *)(v86 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            goto LABEL_152;
          case 5:
            uint64_t v87 = *(void *)(a1 + 8);
            memset(&__str, 0, sizeof(__str));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v87 + 8), *(uint64_t **)(v87 + 16), (uint64_t)(*(void *)(v87 + 16) - *(void *)(v87 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            goto LABEL_152;
          case 6:
            double v13 = (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8);
            double v14 = (double)*(int *)(a1 + 16);
LABEL_121:
            double v10 = v14 / 1000000.0 + v13;
            goto LABEL_152;
          case 7:
            goto LABEL_152;
          case 8:
            uint64_t v88 = *(void *)(a1 + 8);
            atomic_ullong *volatile v89 = *(atomic_uint **)(v88 + 16);
            uint64_t v106 = *(void *)(v88 + 8);
            std::string::size_type v107 = v89;
            if (v89) {
              atomic_fetch_add_explicit(v89 + 2, 1u, memory_order_relaxed);
            }
            long long v90 = *(_OWORD *)(v88 + 24);
            long long v91 = *(_OWORD *)(v88 + 56);
            long long v109 = *(_OWORD *)(v88 + 40);
            long long v110 = v91;
            long long v108 = v90;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v107);
            goto LABEL_152;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)(a1 + 8) + 8);
            turi::flexible_type_fail(0);
            if (__p)
            {
              uint64_t v116 = __p;
              operator delete(__p);
            }
            if (__str.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v114 = __str.__r_.__value_.__r.__words[2];
              operator delete((void *)__str.__r_.__value_.__r.__words[2]);
            }
            std::string::size_type size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_) {
LABEL_112:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](size);
            goto LABEL_152;
          default:
            break;
        }
      }
LABEL_173:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
    default:
      goto LABEL_173;
  }
}