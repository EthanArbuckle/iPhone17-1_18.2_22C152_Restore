uint64_t CoreML::Specification::CategoricalDistributionLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  uint64_t vars8;

  v5 = this;
  v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  v7 = *(void *)(v5 + 24);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  if (*(unsigned char *)(v5 + 32)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  v8 = *(float *)(v5 + 36);
  if (v8 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)4, a2, v8, a3);
  }
  v9 = *(float *)(v5 + 40);
  if (v9 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)5, a2, v9, a3);
  }
  return this;
}

unint64_t CoreML::Specification::CategoricalDistributionLayerParams::ByteSizeLong(CoreML::Specification::CategoricalDistributionLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  if (*((unsigned char *)this + 32)) {
    v4 += 2;
  }
  if (*((float *)this + 9) != 0.0) {
    v4 += 5;
  }
  if (*((float *)this + 10) != 0.0) {
    v4 += 5;
  }
  *((_DWORD *)this + 11) = v4;
  return v4;
}

uint64_t CoreML::Specification::CategoricalDistributionLayerParams::IsInitialized(CoreML::Specification::CategoricalDistributionLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::CategoricalDistributionLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalDistributionLayerParams");
}

CoreML::Specification::ReduceL1LayerParams *CoreML::Specification::ReduceL1LayerParams::ReduceL1LayerParams(CoreML::Specification::ReduceL1LayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D7637F8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceL1LayerParams *)&CoreML::Specification::_ReduceL1LayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA40D4(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams(CoreML::Specification::ReduceL1LayerParams *this)
{
  *(void *)this = &unk_26D7637F8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceL1LayerParams::New(CoreML::Specification::ReduceL1LayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA41E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceL1LayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceL1LayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceL1LayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceL1LayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceL1LayerParams *this, char **a2, unsigned int a3)
{
  unint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceL1LayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceL1LayerParams::ByteSizeLong(CoreML::Specification::ReduceL1LayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceL1LayerParams::IsInitialized(CoreML::Specification::ReduceL1LayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceL1LayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceL1LayerParams");
}

CoreML::Specification::ReduceL2LayerParams *CoreML::Specification::ReduceL2LayerParams::ReduceL2LayerParams(CoreML::Specification::ReduceL2LayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763890;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceL2LayerParams *)&CoreML::Specification::_ReduceL2LayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA47A8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams(CoreML::Specification::ReduceL2LayerParams *this)
{
  *(void *)this = &unk_26D763890;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceL2LayerParams::New(CoreML::Specification::ReduceL2LayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA48BC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceL2LayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceL2LayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceL2LayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceL2LayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceL2LayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceL2LayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceL2LayerParams::ByteSizeLong(CoreML::Specification::ReduceL2LayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceL2LayerParams::IsInitialized(CoreML::Specification::ReduceL2LayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceL2LayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceL2LayerParams");
}

CoreML::Specification::ReduceMaxLayerParams *CoreML::Specification::ReduceMaxLayerParams::ReduceMaxLayerParams(CoreML::Specification::ReduceMaxLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763928;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceMaxLayerParams *)&CoreML::Specification::_ReduceMaxLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA4E7C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams(CoreML::Specification::ReduceMaxLayerParams *this)
{
  *(void *)this = &unk_26D763928;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceMaxLayerParams::New(CoreML::Specification::ReduceMaxLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA4F90(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceMaxLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMaxLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceMaxLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceMaxLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceMaxLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceMaxLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceMaxLayerParams::ByteSizeLong(CoreML::Specification::ReduceMaxLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceMaxLayerParams::IsInitialized(CoreML::Specification::ReduceMaxLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceMaxLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceMaxLayerParams");
}

CoreML::Specification::ReduceMinLayerParams *CoreML::Specification::ReduceMinLayerParams::ReduceMinLayerParams(CoreML::Specification::ReduceMinLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D7639C0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceMinLayerParams *)&CoreML::Specification::_ReduceMinLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA5550(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams(CoreML::Specification::ReduceMinLayerParams *this)
{
  *(void *)this = &unk_26D7639C0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceMinLayerParams::New(CoreML::Specification::ReduceMinLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA5664(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceMinLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMinLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceMinLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceMinLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceMinLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceMinLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceMinLayerParams::ByteSizeLong(CoreML::Specification::ReduceMinLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceMinLayerParams::IsInitialized(CoreML::Specification::ReduceMinLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceMinLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceMinLayerParams");
}

CoreML::Specification::ReduceSumLayerParams *CoreML::Specification::ReduceSumLayerParams::ReduceSumLayerParams(CoreML::Specification::ReduceSumLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763A58;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceSumLayerParams *)&CoreML::Specification::_ReduceSumLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA5C24(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams(CoreML::Specification::ReduceSumLayerParams *this)
{
  *(void *)this = &unk_26D763A58;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceSumLayerParams::New(CoreML::Specification::ReduceSumLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA5D38(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceSumLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceSumLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceSumLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceSumLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceSumLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceSumLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceSumLayerParams::ByteSizeLong(CoreML::Specification::ReduceSumLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceSumLayerParams::IsInitialized(CoreML::Specification::ReduceSumLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceSumLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceSumLayerParams");
}

CoreML::Specification::ReduceProdLayerParams *CoreML::Specification::ReduceProdLayerParams::ReduceProdLayerParams(CoreML::Specification::ReduceProdLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763AF0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceProdLayerParams *)&CoreML::Specification::_ReduceProdLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA62F8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams(CoreML::Specification::ReduceProdLayerParams *this)
{
  *(void *)this = &unk_26D763AF0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceProdLayerParams::New(CoreML::Specification::ReduceProdLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA640C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceProdLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceProdLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceProdLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceProdLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceProdLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceProdLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceProdLayerParams::ByteSizeLong(CoreML::Specification::ReduceProdLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceProdLayerParams::IsInitialized(CoreML::Specification::ReduceProdLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceProdLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceProdLayerParams");
}

CoreML::Specification::ReduceMeanLayerParams *CoreML::Specification::ReduceMeanLayerParams::ReduceMeanLayerParams(CoreML::Specification::ReduceMeanLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763B88;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceMeanLayerParams *)&CoreML::Specification::_ReduceMeanLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA69CC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams(CoreML::Specification::ReduceMeanLayerParams *this)
{
  *(void *)this = &unk_26D763B88;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceMeanLayerParams::New(CoreML::Specification::ReduceMeanLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA6AE0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceMeanLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMeanLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceMeanLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceMeanLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceMeanLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceMeanLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceMeanLayerParams::ByteSizeLong(CoreML::Specification::ReduceMeanLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceMeanLayerParams::IsInitialized(CoreML::Specification::ReduceMeanLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceMeanLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceMeanLayerParams");
}

CoreML::Specification::ReduceLogSumLayerParams *CoreML::Specification::ReduceLogSumLayerParams::ReduceLogSumLayerParams(CoreML::Specification::ReduceLogSumLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763C20;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceLogSumLayerParams *)&CoreML::Specification::_ReduceLogSumLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA70A0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams(CoreML::Specification::ReduceLogSumLayerParams *this)
{
  *(void *)this = &unk_26D763C20;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceLogSumLayerParams::New(CoreML::Specification::ReduceLogSumLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA71B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceLogSumLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceLogSumLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceLogSumLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceLogSumLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceLogSumLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceLogSumLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceLogSumLayerParams::ByteSizeLong(CoreML::Specification::ReduceLogSumLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceLogSumLayerParams::IsInitialized(CoreML::Specification::ReduceLogSumLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceLogSumLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceLogSumLayerParams");
}

CoreML::Specification::ReduceSumSquareLayerParams *CoreML::Specification::ReduceSumSquareLayerParams::ReduceSumSquareLayerParams(CoreML::Specification::ReduceSumSquareLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763CB8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceSumSquareLayerParams *)&CoreML::Specification::_ReduceSumSquareLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA7774(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams(CoreML::Specification::ReduceSumSquareLayerParams *this)
{
  *(void *)this = &unk_26D763CB8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceSumSquareLayerParams::New(CoreML::Specification::ReduceSumSquareLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA7888(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceSumSquareLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceSumSquareLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceSumSquareLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceSumSquareLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceSumSquareLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceSumSquareLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceSumSquareLayerParams::ByteSizeLong(CoreML::Specification::ReduceSumSquareLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceSumSquareLayerParams::IsInitialized(CoreML::Specification::ReduceSumSquareLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceSumSquareLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceSumSquareLayerParams");
}

CoreML::Specification::ReduceLogSumExpLayerParams *CoreML::Specification::ReduceLogSumExpLayerParams::ReduceLogSumExpLayerParams(CoreML::Specification::ReduceLogSumExpLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763D50;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReduceLogSumExpLayerParams *)&CoreML::Specification::_ReduceLogSumExpLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA7E48(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams(CoreML::Specification::ReduceLogSumExpLayerParams *this)
{
  *(void *)this = &unk_26D763D50;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReduceLogSumExpLayerParams::New(CoreML::Specification::ReduceLogSumExpLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA7F5C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReduceLogSumExpLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceLogSumExpLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReduceLogSumExpLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::ReduceLogSumExpLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReduceLogSumExpLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      unsigned int v10 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 24) {
          break;
        }
        uint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((unsigned char *)this + 37) = Varint64Fallback != 0;
      }
      else if (v10 == 2)
      {
        if (v8 != 16) {
          break;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 36) = v16 != 0;
      }
      else
      {
        if (v10 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          unsigned int v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v21 = *a2;
              if (*a2 >= a2[1] || *v21 < 0)
              {
                unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v24 & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v23;
              }
              else
              {
                unint64_t v22 = *v21;
                *a2 = v21 + 1;
              }
              signed int v25 = *((_DWORD *)this + 4);
              if (v25 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                signed int v25 = *v5;
              }
              uint64_t v26 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v25 + 1;
              *(void *)(v26 + 8 * v25 + 8) = v22;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        }
      }
    }
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReduceLogSumExpLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            BOOL v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *BOOL v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 37))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ReduceLogSumExpLayerParams::ByteSizeLong(CoreML::Specification::ReduceLogSumExpLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  if (*((unsigned char *)this + 37)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReduceLogSumExpLayerParams::IsInitialized(CoreML::Specification::ReduceLogSumExpLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReduceLogSumExpLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReduceLogSumExpLayerParams");
}

CoreML::Specification::ExpandDimsLayerParams *CoreML::Specification::ExpandDimsLayerParams::ExpandDimsLayerParams(CoreML::Specification::ExpandDimsLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763DE8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ExpandDimsLayerParams *)&CoreML::Specification::_ExpandDimsLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223FA8518(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ExpandDimsLayerParams::~ExpandDimsLayerParams(CoreML::Specification::ExpandDimsLayerParams *this)
{
  *(void *)this = &unk_26D763DE8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ExpandDimsLayerParams::~ExpandDimsLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ExpandDimsLayerParams::default_instance(CoreML::Specification::ExpandDimsLayerParams *this)
{
  return &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
}

void CoreML::Specification::ExpandDimsLayerParams::New(CoreML::Specification::ExpandDimsLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA8650(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ExpandDimsLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ExpandDimsLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ExpandDimsLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ExpandDimsLayerParams::MergePartialFromCodedStream(CoreML::Specification::ExpandDimsLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        unsigned int v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ExpandDimsLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          unsigned char *v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::ExpandDimsLayerParams::ByteSizeLong(CoreML::Specification::ExpandDimsLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::ExpandDimsLayerParams::IsInitialized(CoreML::Specification::ExpandDimsLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ExpandDimsLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ExpandDimsLayerParams");
}

CoreML::Specification::FlattenTo2DLayerParams *CoreML::Specification::FlattenTo2DLayerParams::FlattenTo2DLayerParams(CoreML::Specification::FlattenTo2DLayerParams *this)
{
  *(void *)this = &unk_26D763E80;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FlattenTo2DLayerParams *)&CoreML::Specification::_FlattenTo2DLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_223FA8AE8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FlattenTo2DLayerParams::~FlattenTo2DLayerParams(CoreML::Specification::FlattenTo2DLayerParams *this)
{
  *(void *)this = &unk_26D763E80;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D763E80;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::FlattenTo2DLayerParams::default_instance(CoreML::Specification::FlattenTo2DLayerParams *this)
{
  return &CoreML::Specification::_FlattenTo2DLayerParams_default_instance_;
}

void CoreML::Specification::FlattenTo2DLayerParams::New(CoreML::Specification::FlattenTo2DLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA8C18(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FlattenTo2DLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FlattenTo2DLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::FlattenTo2DLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::FlattenTo2DLayerParams::MergePartialFromCodedStream(CoreML::Specification::FlattenTo2DLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((void *)this + 2) = Varint64Fallback;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::FlattenTo2DLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v5 = *(void *)(this + 16);
  if (v5) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v5, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::FlattenTo2DLayerParams::ByteSizeLong(CoreML::Specification::FlattenTo2DLayerParams *this)
{
  unint64_t v1 = *((void *)this + 2);
  if (v1) {
    unint64_t v1 = ((9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::FlattenTo2DLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  std::string::size_type v5 = *((void *)a2 + 2);
  if (v5) {
    v3->__r_.__value_.__r.__words[2] = v5;
  }
  return this;
}

uint64_t CoreML::Specification::FlattenTo2DLayerParams::IsInitialized(CoreML::Specification::FlattenTo2DLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::FlattenTo2DLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FlattenTo2DLayerParams");
}

CoreML::Specification::ReshapeStaticLayerParams *CoreML::Specification::ReshapeStaticLayerParams::ReshapeStaticLayerParams(CoreML::Specification::ReshapeStaticLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D763F18;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ReshapeStaticLayerParams *)&CoreML::Specification::_ReshapeStaticLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223FA8E60(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReshapeStaticLayerParams::~ReshapeStaticLayerParams(CoreML::Specification::ReshapeStaticLayerParams *this)
{
  *(void *)this = &unk_26D763F18;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ReshapeStaticLayerParams::~ReshapeStaticLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ReshapeStaticLayerParams::default_instance(CoreML::Specification::ReshapeStaticLayerParams *this)
{
  return &CoreML::Specification::_ReshapeStaticLayerParams_default_instance_;
}

void CoreML::Specification::ReshapeStaticLayerParams::New(CoreML::Specification::ReshapeStaticLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA8F98(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReshapeStaticLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeStaticLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReshapeStaticLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ReshapeStaticLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReshapeStaticLayerParams *this, char **a2, unsigned int a3)
{
  std::string::size_type v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        BOOL v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            uint64_t v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ReshapeStaticLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          unsigned char *v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::ReshapeStaticLayerParams::ByteSizeLong(CoreML::Specification::ReshapeStaticLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::ReshapeStaticLayerParams::IsInitialized(CoreML::Specification::ReshapeStaticLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReshapeStaticLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReshapeStaticLayerParams");
}

CoreML::Specification::ReshapeLikeLayerParams *CoreML::Specification::ReshapeLikeLayerParams::ReshapeLikeLayerParams(CoreML::Specification::ReshapeLikeLayerParams *this)
{
  *(void *)this = &unk_26D763FB0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ReshapeLikeLayerParams *)&CoreML::Specification::_ReshapeLikeLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FA942C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReshapeLikeLayerParams::~ReshapeLikeLayerParams(CoreML::Specification::ReshapeLikeLayerParams *this)
{
  *(void *)this = &unk_26D763FB0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D763FB0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReshapeLikeLayerParams::New(CoreML::Specification::ReshapeLikeLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA953C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReshapeLikeLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeLikeLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReshapeLikeLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReshapeLikeLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ReshapeLikeLayerParams::ByteSizeLong(CoreML::Specification::ReshapeLikeLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ReshapeLikeLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::ReshapeLikeLayerParams::IsInitialized(CoreML::Specification::ReshapeLikeLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReshapeLikeLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReshapeLikeLayerParams");
}

CoreML::Specification::ReshapeDynamicLayerParams *CoreML::Specification::ReshapeDynamicLayerParams::ReshapeDynamicLayerParams(CoreML::Specification::ReshapeDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764048;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ReshapeDynamicLayerParams *)&CoreML::Specification::_ReshapeDynamicLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FA969C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ReshapeDynamicLayerParams::~ReshapeDynamicLayerParams(CoreML::Specification::ReshapeDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764048;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764048;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ReshapeDynamicLayerParams::New(CoreML::Specification::ReshapeDynamicLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA97B0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ReshapeDynamicLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeDynamicLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ReshapeDynamicLayerParams::MergePartialFromCodedStream(CoreML::Specification::ReshapeDynamicLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ReshapeDynamicLayerParams::ByteSizeLong(CoreML::Specification::ReshapeDynamicLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ReshapeDynamicLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::ReshapeDynamicLayerParams::IsInitialized(CoreML::Specification::ReshapeDynamicLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ReshapeDynamicLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ReshapeDynamicLayerParams");
}

CoreML::Specification::SqueezeLayerParams *CoreML::Specification::SqueezeLayerParams::SqueezeLayerParams(CoreML::Specification::SqueezeLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D7640E0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::SqueezeLayerParams *)&CoreML::Specification::_SqueezeLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 36) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_223FA9920(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SqueezeLayerParams::~SqueezeLayerParams(CoreML::Specification::SqueezeLayerParams *this)
{
  *(void *)this = &unk_26D7640E0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SqueezeLayerParams::~SqueezeLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SqueezeLayerParams::default_instance(CoreML::Specification::SqueezeLayerParams *this)
{
  return &CoreML::Specification::_SqueezeLayerParams_default_instance_;
}

void CoreML::Specification::SqueezeLayerParams::New(CoreML::Specification::SqueezeLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FA9A58(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4095A926F0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SqueezeLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SqueezeLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::SqueezeLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(unsigned char *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::SqueezeLayerParams::MergePartialFromCodedStream(CoreML::Specification::SqueezeLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      BOOL v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 != 16) {
          break;
        }
        BOOL v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v15 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((unsigned char *)this + 36) = Varint64Fallback != 0;
      }
      else
      {
        if (v8 >> 3 != 1) {
          break;
        }
        if (v8 == 8)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
        }
          }
        else
        {
          if (v8 != 10) {
            break;
          }
          int v10 = *a2;
          if (*a2 >= a2[1] || *v10 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v10;
            *a2 = v10 + 1;
          }
          int v16 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              unint64_t v17 = *a2;
              if (*a2 >= a2[1] || *v17 < 0)
              {
                unint64_t v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v20 & 1) == 0) {
                  return 0;
                }
                unint64_t v18 = v19;
              }
              else
              {
                unint64_t v18 = *v17;
                *a2 = v17 + 1;
              }
              signed int v21 = *((_DWORD *)this + 4);
              if (v21 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
                signed int v21 = *v5;
              }
              uint64_t v22 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v21 + 1;
              *(void *)(v22 + 8 * v21 + 8) = v18;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v16);
        }
      }
    }
    if (v8) {
      BOOL v14 = (v8 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SqueezeLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            unint64_t v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *unint64_t v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(unsigned char *)(v5 + 36))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SqueezeLayerParams::ByteSizeLong(CoreML::Specification::SqueezeLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  if (*((unsigned char *)this + 36)) {
    v6 += 2;
  }
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t CoreML::Specification::SqueezeLayerParams::IsInitialized(CoreML::Specification::SqueezeLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SqueezeLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SqueezeLayerParams");
}

CoreML::Specification::TopKLayerParams *CoreML::Specification::TopKLayerParams::TopKLayerParams(CoreML::Specification::TopKLayerParams *this)
{
  *(void *)this = &unk_26D764178;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::TopKLayerParams *)&CoreML::Specification::_TopKLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223FA9F94(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TopKLayerParams::~TopKLayerParams(CoreML::Specification::TopKLayerParams *this)
{
  *(void *)this = &unk_26D764178;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764178;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::TopKLayerParams::default_instance(CoreML::Specification::TopKLayerParams *this)
{
  return &CoreML::Specification::_TopKLayerParams_default_instance_;
}

void CoreML::Specification::TopKLayerParams::New(CoreML::Specification::TopKLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAA0C4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40A90F680CLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TopKLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TopKLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::TopKLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

uint64_t CoreML::Specification::TopKLayerParams::MergePartialFromCodedStream(CoreML::Specification::TopKLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = *a2;
          if (*a2 >= a2[1])
          {
            uint64_t v6 = 0;
LABEL_6:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
            unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0) {
              goto LABEL_25;
            }
            goto LABEL_7;
          }
          uint64_t v6 = *v5;
          if (*v5 < 1) {
            goto LABEL_6;
          }
          *a2 = v5 + 1;
          unint64_t v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_25;
          }
LABEL_7:
          unsigned int v9 = v7 >> 3;
          if (v7 >> 3 != 3) {
            break;
          }
          if (v7 != 24) {
            goto LABEL_25;
          }
          uint64_t v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v18 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v13;
            *a2 = v13 + 1;
          }
          *((unsigned char *)this + 32) = Varint64Fallback != 0;
        }
        if (v9 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_25;
        }
        unint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((void *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          *((void *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v9 != 1 || v7 != 8) {
        break;
      }
      unsigned int v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unint64_t v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v17 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v12 = *v11;
        *a2 = v11 + 1;
      }
      *((void *)this + 2) = v12;
    }
LABEL_25:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::TopKLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  if (*(unsigned char *)(v5 + 32))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::TopKLayerParams::ByteSizeLong(CoreML::Specification::TopKLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  if (*((unsigned char *)this + 32)) {
    v4 += 2;
  }
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::TopKLayerParams::IsInitialized(CoreML::Specification::TopKLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::TopKLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TopKLayerParams");
}

CoreML::Specification::ArgMaxLayerParams *CoreML::Specification::ArgMaxLayerParams::ArgMaxLayerParams(CoreML::Specification::ArgMaxLayerParams *this)
{
  *(void *)this = &unk_26D764210;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ArgMaxLayerParams *)&CoreML::Specification::_ArgMaxLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_223FAA400(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArgMaxLayerParams::~ArgMaxLayerParams(CoreML::Specification::ArgMaxLayerParams *this)
{
  *(void *)this = &unk_26D764210;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764210;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ArgMaxLayerParams::default_instance(CoreML::Specification::ArgMaxLayerParams *this)
{
  return &CoreML::Specification::_ArgMaxLayerParams_default_instance_;
}

void CoreML::Specification::ArgMaxLayerParams::New(CoreML::Specification::ArgMaxLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAA530(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArgMaxLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgMaxLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ArgMaxLayerParams::Clear(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArgMaxLayerParams::MergePartialFromCodedStream(CoreML::Specification::ArgMaxLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        unint64_t v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((unsigned char *)this + 24) = Varint64Fallback != 0;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unint64_t v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = v10 + 1;
      }
      *((void *)this + 2) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArgMaxLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  if (*(unsigned char *)(v5 + 24))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::ArgMaxLayerParams::ByteSizeLong(CoreML::Specification::ArgMaxLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v3 = v2 + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24)) {
    v3 += 2;
  }
  *((_DWORD *)this + 7) = v3;
  return v3;
}

uint64_t CoreML::Specification::ArgMaxLayerParams::IsInitialized(CoreML::Specification::ArgMaxLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ArgMaxLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArgMaxLayerParams");
}

CoreML::Specification::ArgMinLayerParams *CoreML::Specification::ArgMinLayerParams::ArgMinLayerParams(CoreML::Specification::ArgMinLayerParams *this)
{
  *(void *)this = &unk_26D7642A8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ArgMinLayerParams *)&CoreML::Specification::_ArgMinLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_223FAA7EC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArgMinLayerParams::~ArgMinLayerParams(CoreML::Specification::ArgMinLayerParams *this)
{
  *(void *)this = &unk_26D7642A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7642A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ArgMinLayerParams::default_instance(CoreML::Specification::ArgMinLayerParams *this)
{
  return &CoreML::Specification::_ArgMinLayerParams_default_instance_;
}

void CoreML::Specification::ArgMinLayerParams::New(CoreML::Specification::ArgMinLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAA91C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArgMinLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgMinLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ArgMinLayerParams::Clear(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArgMinLayerParams::MergePartialFromCodedStream(CoreML::Specification::ArgMinLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        unint64_t v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((unsigned char *)this + 24) = Varint64Fallback != 0;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unint64_t v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = v10 + 1;
      }
      *((void *)this + 2) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArgMinLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  if (*(unsigned char *)(v5 + 24))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::ArgMinLayerParams::ByteSizeLong(CoreML::Specification::ArgMinLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v3 = v2 + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24)) {
    v3 += 2;
  }
  *((_DWORD *)this + 7) = v3;
  return v3;
}

uint64_t CoreML::Specification::ArgMinLayerParams::IsInitialized(CoreML::Specification::ArgMinLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ArgMinLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArgMinLayerParams");
}

CoreML::Specification::SplitNDLayerParams *CoreML::Specification::SplitNDLayerParams::SplitNDLayerParams(CoreML::Specification::SplitNDLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D764340;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::SplitNDLayerParams *)&CoreML::Specification::_SplitNDLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_223FAABE0(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SplitNDLayerParams::~SplitNDLayerParams(CoreML::Specification::SplitNDLayerParams *this)
{
  *(void *)this = &unk_26D764340;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SplitNDLayerParams::~SplitNDLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SplitNDLayerParams::default_instance(CoreML::Specification::SplitNDLayerParams *this)
{
  return &CoreML::Specification::_SplitNDLayerParams_default_instance_;
}

void CoreML::Specification::SplitNDLayerParams::New(CoreML::Specification::SplitNDLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAAD18(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SplitNDLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SplitNDLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::SplitNDLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  return this;
}

uint64_t CoreML::Specification::SplitNDLayerParams::MergePartialFromCodedStream(CoreML::Specification::SplitNDLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v6 = *a2;
          if (*a2 >= a2[1])
          {
            uint64_t v7 = 0;
LABEL_7:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
            unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v8 & 0x100000000) == 0) {
              goto LABEL_27;
            }
            goto LABEL_8;
          }
          uint64_t v7 = *v6;
          if (*v6 < 1) {
            goto LABEL_7;
          }
          *a2 = v6 + 1;
          unint64_t v8 = v7 | 0x100000000;
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_27;
          }
LABEL_8:
          unsigned int v10 = v8 >> 3;
          if (v8 >> 3 != 3) {
            break;
          }
          if (v8 == 24)
          {
            if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0x1Au, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
          }
            }
          else
          {
            if (v8 != 26) {
              goto LABEL_27;
            }
            BOOL v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v14;
              *a2 = v14 + 1;
            }
            int v20 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
            if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
            {
              do
              {
                signed int v21 = *a2;
                if (*a2 >= a2[1] || *v21 < 0)
                {
                  unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                  if ((v24 & 1) == 0) {
                    return 0;
                  }
                  unint64_t v22 = Varint64Fallback;
                }
                else
                {
                  unint64_t v22 = *v21;
                  *a2 = v21 + 1;
                }
                signed int v25 = *((_DWORD *)this + 4);
                if (v25 == *((_DWORD *)this + 5))
                {
                  _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + 1);
                  signed int v25 = *v5;
                }
                uint64_t v26 = *((void *)this + 3);
                *((_DWORD *)this + 4) = v25 + 1;
                *(void *)(v26 + 8 * v25 + 8) = v22;
              }
              while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
            }
            _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
          }
        }
        if (v10 != 2) {
          break;
        }
        if (v8 != 16) {
          goto LABEL_27;
        }
        char v16 = *a2;
        if (*a2 >= a2[1] || *v16 < 0)
        {
          *((void *)this + 6) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v19 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          *((void *)this + 6) = *v16;
          *a2 = v16 + 1;
        }
      }
      if (v10 != 1 || v8 != 8) {
        break;
      }
      unint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        unint64_t v13 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v13 = *v12;
        *a2 = v12 + 1;
      }
      *((void *)this + 5) = v13;
    }
LABEL_27:
    if (v8) {
      BOOL v17 = (v8 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SplitNDLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 40);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 48);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  if (*(int *)(v5 + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x1Au);
      int v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 26;
      int v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    if (v8 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 1);
      if (v9 < 0x80)
      {
        unsigned int v12 = *(_DWORD *)(v5 + 32);
        unint64_t v11 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      unsigned char *v11 = v12;
      int v14 = v11 - v10 + 1;
      *((void *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    uint64_t v15 = *(unsigned int *)(v5 + 16);
    if ((int)v15 >= 1)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        unint64_t v17 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v17);
        }
        else
        {
          uint64_t v18 = *((void *)a2 + 1);
          if (v17 < 0x80)
          {
            unint64_t v20 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            char v19 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            char v19 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v19++ = v17 | 0x80;
              unint64_t v20 = v17 >> 7;
              unint64_t v21 = v17 >> 14;
              v17 >>= 7;
            }
            while (v21);
          }
          *char v19 = v20;
          int v22 = v19 - v18 + 1;
          *((void *)a2 + 1) += v22;
          *((_DWORD *)a2 + 4) -= v22;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::SplitNDLayerParams::ByteSizeLong(CoreML::Specification::SplitNDLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v6 = v5 + v2;
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    v6 += ((9 * (__clz(v7 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  uint64_t v8 = *((void *)this + 6);
  if (v8) {
    v6 += ((9 * (__clz(v8 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 14) = v6;
  return v6;
}

uint64_t CoreML::Specification::SplitNDLayerParams::IsInitialized(CoreML::Specification::SplitNDLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SplitNDLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SplitNDLayerParams");
}

CoreML::Specification::CeilLayerParams *CoreML::Specification::CeilLayerParams::CeilLayerParams(CoreML::Specification::CeilLayerParams *this)
{
  *(void *)this = &unk_26D7643D8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CeilLayerParams *)&CoreML::Specification::_CeilLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FAB2BC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CeilLayerParams::~CeilLayerParams(CoreML::Specification::CeilLayerParams *this)
{
  *(void *)this = &unk_26D7643D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7643D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::CeilLayerParams::New(CoreML::Specification::CeilLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAB3CC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CeilLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CeilLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::CeilLayerParams::MergePartialFromCodedStream(CoreML::Specification::CeilLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::CeilLayerParams::ByteSizeLong(CoreML::Specification::CeilLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::CeilLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::CeilLayerParams::IsInitialized(CoreML::Specification::CeilLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::CeilLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CeilLayerParams");
}

CoreML::Specification::RoundLayerParams *CoreML::Specification::RoundLayerParams::RoundLayerParams(CoreML::Specification::RoundLayerParams *this)
{
  *(void *)this = &unk_26D764470;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::RoundLayerParams *)&CoreML::Specification::_RoundLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FAB52C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::RoundLayerParams::~RoundLayerParams(CoreML::Specification::RoundLayerParams *this)
{
  *(void *)this = &unk_26D764470;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764470;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::RoundLayerParams::New(CoreML::Specification::RoundLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAB63C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::RoundLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RoundLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::RoundLayerParams::MergePartialFromCodedStream(CoreML::Specification::RoundLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::RoundLayerParams::ByteSizeLong(CoreML::Specification::RoundLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::RoundLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::RoundLayerParams::IsInitialized(CoreML::Specification::RoundLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::RoundLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RoundLayerParams");
}

CoreML::Specification::FloorLayerParams *CoreML::Specification::FloorLayerParams::FloorLayerParams(CoreML::Specification::FloorLayerParams *this)
{
  *(void *)this = &unk_26D764508;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FloorLayerParams *)&CoreML::Specification::_FloorLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FAB79C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FloorLayerParams::~FloorLayerParams(CoreML::Specification::FloorLayerParams *this)
{
  *(void *)this = &unk_26D764508;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764508;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::FloorLayerParams::New(CoreML::Specification::FloorLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAB8AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FloorLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloorLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::FloorLayerParams::MergePartialFromCodedStream(CoreML::Specification::FloorLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::FloorLayerParams::ByteSizeLong(CoreML::Specification::FloorLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::FloorLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::FloorLayerParams::IsInitialized(CoreML::Specification::FloorLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::FloorLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FloorLayerParams");
}

CoreML::Specification::SignLayerParams *CoreML::Specification::SignLayerParams::SignLayerParams(CoreML::Specification::SignLayerParams *this)
{
  *(void *)this = &unk_26D7645A0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SignLayerParams *)&CoreML::Specification::_SignLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FABA0C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SignLayerParams::~SignLayerParams(CoreML::Specification::SignLayerParams *this)
{
  *(void *)this = &unk_26D7645A0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7645A0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SignLayerParams::New(CoreML::Specification::SignLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FABB1C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SignLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SignLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::SignLayerParams::MergePartialFromCodedStream(CoreML::Specification::SignLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::SignLayerParams::ByteSizeLong(CoreML::Specification::SignLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::SignLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::SignLayerParams::IsInitialized(CoreML::Specification::SignLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SignLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SignLayerParams");
}

CoreML::Specification::ClipLayerParams *CoreML::Specification::ClipLayerParams::ClipLayerParams(CoreML::Specification::ClipLayerParams *this)
{
  *(void *)this = &unk_26D764638;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ClipLayerParams *)&CoreML::Specification::_ClipLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_223FABC80(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ClipLayerParams::~ClipLayerParams(CoreML::Specification::ClipLayerParams *this)
{
  *(void *)this = &unk_26D764638;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764638;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ClipLayerParams::default_instance(CoreML::Specification::ClipLayerParams *this)
{
  return &CoreML::Specification::_ClipLayerParams_default_instance_;
}

void CoreML::Specification::ClipLayerParams::New(CoreML::Specification::ClipLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FABDB0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ClipLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ClipLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ClipLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ClipLayerParams::MergePartialFromCodedStream(CoreML::Specification::ClipLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 2) {
        break;
      }
      if (v7 >> 3 != 1 || v7 != 13) {
        goto LABEL_20;
      }
      unsigned int v18 = 0;
      uint64_t v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18)) {
          return 0;
        }
        unsigned int v11 = v18;
      }
      else
      {
        unsigned int v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 21) {
      goto LABEL_20;
    }
    unsigned int v17 = 0;
    unsigned int v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      unsigned int v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17)) {
      return 0;
    }
    unsigned int v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::ClipLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  float v5 = *(float *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  float v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::ClipLayerParams::ByteSizeLong(CoreML::Specification::ClipLayerParams *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) != 0.0) {
    v1 += 5;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::ClipLayerParams::IsInitialized(CoreML::Specification::ClipLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ClipLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ClipLayerParams");
}

CoreML::Specification::SliceStaticLayerParams *CoreML::Specification::SliceStaticLayerParams::SliceStaticLayerParams(CoreML::Specification::SliceStaticLayerParams *this)
{
  *(void *)this = &unk_26D7646D0;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::SliceStaticLayerParams *)&CoreML::Specification::_SliceStaticLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 39) = 0;
  return this;
}

void sub_223FAC084(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[18];
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  CoreML::Specification::SliceStaticLayerParams::SliceStaticLayerParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SliceStaticLayerParams::~SliceStaticLayerParams(CoreML::Specification::SliceStaticLayerParams *this)
{
  *(void *)this = &unk_26D7646D0;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 15);
  if (v3 && !*v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4 && !*v4) {
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 9);
  if (v5 && !*v5) {
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 6);
  if (v6 && !*v6) {
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 3);
  if (v7 && !*v7) {
    operator delete(v7);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SliceStaticLayerParams::~SliceStaticLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SliceStaticLayerParams::default_instance(CoreML::Specification::SliceStaticLayerParams *this)
{
  return &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
}

void CoreML::Specification::SliceStaticLayerParams::New(CoreML::Specification::SliceStaticLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAC224(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B7792B36);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SliceStaticLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceStaticLayerParams>);
  }
  return result;
}

_DWORD *CoreML::Specification::SliceStaticLayerParams::Clear(_DWORD *this)
{
  this[4] = 0;
  this[10] = 0;
  this[16] = 0;
  this[22] = 0;
  this[28] = 0;
  this[34] = 0;
  return this;
}

uint64_t CoreML::Specification::SliceStaticLayerParams::MergePartialFromCodedStream(CoreML::Specification::SliceStaticLayerParams *this, char **a2, unsigned int a3)
{
  float v5 = (unsigned int *)((char *)this + 136);
  float v6 = (unsigned int *)((char *)this + 112);
  unint64_t v7 = (unsigned int *)((char *)this + 88);
  uint64_t v8 = (unsigned int *)((char *)this + 64);
  unsigned int v9 = (unsigned int *)((char *)this + 40);
  uint64_t v10 = (unsigned int *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    unsigned int v11 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v12 = 0;
      break;
    }
    uint64_t v12 = *v11;
    if (*v11 < 1) {
      break;
    }
    *a2 = v11 + 1;
    unint64_t v13 = v12 | 0x100000000;
    if ((v13 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_39:
    if (v13) {
      BOOL v27 = (v13 & 7) == 4;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0; {
  }
    }
  unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
  unint64_t v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v13 & 0x100000000) == 0) {
    goto LABEL_39;
  }
LABEL_8:
  switch(v13 >> 3)
  {
    case 1u:
      if (v13 == 8)
      {
        unsigned int v28 = 10;
        v29 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v30 = (uint64_t)v10;
        goto LABEL_50;
      }
      if (v13 != 10) {
        goto LABEL_39;
      }
      uint64_t v15 = *a2;
      if (*a2 >= a2[1] || *v15 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v15;
        *a2 = v15 + 1;
      }
      int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        v35 = *a2;
        if (*a2 >= a2[1] || *v35 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v38 & 1) == 0) {
            return 0;
          }
          unint64_t v36 = Varint64Fallback;
        }
        else
        {
          unint64_t v36 = *v35;
          *a2 = v35 + 1;
        }
        signed int v39 = *((_DWORD *)this + 4);
        if (v39 == *((_DWORD *)this + 5))
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v10, v39 + 1);
          signed int v39 = *v10;
        }
        uint64_t v40 = *((void *)this + 3);
        *((_DWORD *)this + 4) = v39 + 1;
        *(void *)(v40 + 8 * v39 + 8) = v36;
      }
      goto LABEL_118;
    case 2u:
      if (v13 == 16)
      {
        unsigned int v31 = 18;
        v32 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v33 = (uint64_t)v9;
        goto LABEL_53;
      }
      if (v13 != 18) {
        goto LABEL_39;
      }
      unsigned int v17 = *a2;
      if (*a2 >= a2[1] || *v17 < 0)
      {
        int v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v18 < 0) {
          return 0;
        }
      }
      else
      {
        int v18 = *v17;
        *a2 = v17 + 1;
      }
      int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        v41 = *a2;
        if (*a2 >= a2[1] || *v41 < 0)
        {
          unint64_t v42 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v43 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v42 = *v41;
          *a2 = v41 + 1;
        }
        BOOL v44 = v42 != 0;
        signed int v45 = *((_DWORD *)this + 10);
        if (v45 == *((_DWORD *)this + 11))
        {
          _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v9, v45 + 1);
          signed int v45 = *v9;
        }
        uint64_t v46 = *((void *)this + 6);
        *((_DWORD *)this + 10) = v45 + 1;
        *(unsigned char *)(v46 + v45 + 8) = v44;
      }
      goto LABEL_118;
    case 3u:
      if (v13 == 24)
      {
        unsigned int v28 = 26;
        v29 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v30 = (uint64_t)v8;
        goto LABEL_50;
      }
      if (v13 != 26) {
        goto LABEL_39;
      }
      char v19 = *a2;
      if (*a2 >= a2[1] || *v19 < 0)
      {
        int v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v20 < 0) {
          return 0;
        }
      }
      else
      {
        int v20 = *v19;
        *a2 = v19 + 1;
      }
      int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        v47 = *a2;
        if (*a2 >= a2[1] || *v47 < 0)
        {
          unint64_t v49 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v50 & 1) == 0) {
            return 0;
          }
          unint64_t v48 = v49;
        }
        else
        {
          unint64_t v48 = *v47;
          *a2 = v47 + 1;
        }
        signed int v51 = *((_DWORD *)this + 16);
        if (v51 == *((_DWORD *)this + 17))
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v8, v51 + 1);
          signed int v51 = *v8;
        }
        uint64_t v52 = *((void *)this + 9);
        *((_DWORD *)this + 16) = v51 + 1;
        *(void *)(v52 + 8 * v51 + 8) = v48;
      }
      goto LABEL_118;
    case 4u:
      if (v13 == 32)
      {
        unsigned int v31 = 34;
        v32 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v33 = (uint64_t)v7;
        goto LABEL_53;
      }
      if (v13 != 34) {
        goto LABEL_39;
      }
      unint64_t v21 = *a2;
      if (*a2 >= a2[1] || *v21 < 0)
      {
        int v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v22 < 0) {
          return 0;
        }
      }
      else
      {
        int v22 = *v21;
        *a2 = v21 + 1;
      }
      int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        v53 = *a2;
        if (*a2 >= a2[1] || *v53 < 0)
        {
          unint64_t v54 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v55 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v54 = *v53;
          *a2 = v53 + 1;
        }
        BOOL v56 = v54 != 0;
        signed int v57 = *((_DWORD *)this + 22);
        if (v57 == *((_DWORD *)this + 23))
        {
          _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v7, v57 + 1);
          signed int v57 = *v7;
        }
        uint64_t v58 = *((void *)this + 12);
        *((_DWORD *)this + 22) = v57 + 1;
        *(unsigned char *)(v58 + v57 + 8) = v56;
      }
      goto LABEL_118;
    case 5u:
      if (v13 == 40)
      {
        unsigned int v28 = 42;
        v29 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v30 = (uint64_t)v6;
LABEL_50:
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, v28, v29, v30) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      if (v13 != 42) {
        goto LABEL_39;
      }
      unint64_t v23 = *a2;
      if (*a2 >= a2[1] || *v23 < 0)
      {
        int v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v24 < 0) {
          return 0;
        }
      }
      else
      {
        int v24 = *v23;
        *a2 = v23 + 1;
      }
      int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        v59 = *a2;
        if (*a2 >= a2[1] || *v59 < 0)
        {
          unint64_t v61 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v62 & 1) == 0) {
            return 0;
          }
          unint64_t v60 = v61;
        }
        else
        {
          unint64_t v60 = *v59;
          *a2 = v59 + 1;
        }
        signed int v63 = *((_DWORD *)this + 28);
        if (v63 == *((_DWORD *)this + 29))
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v63 + 1);
          signed int v63 = *v6;
        }
        uint64_t v64 = *((void *)this + 15);
        *((_DWORD *)this + 28) = v63 + 1;
        *(void *)(v64 + 8 * v63 + 8) = v60;
      }
      goto LABEL_118;
    case 6u:
      if (v13 == 48)
      {
        unsigned int v31 = 50;
        v32 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v33 = (uint64_t)v5;
LABEL_53:
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(_tc_google::protobuf::internal::WireFormatLite::FieldType)8>(1, v31, v32, v33) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      if (v13 != 50) {
        goto LABEL_39;
      }
      signed int v25 = *a2;
      if (*a2 < a2[1] && (*v25 & 0x80000000) == 0)
      {
        int v26 = *v25;
        *a2 = v25 + 1;
        goto LABEL_109;
      }
      int v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_109:
        int v34 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26);
        while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          v65 = *a2;
          if (*a2 >= a2[1] || *v65 < 0)
          {
            unint64_t v66 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v67 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t v66 = *v65;
            *a2 = v65 + 1;
          }
          BOOL v68 = v66 != 0;
          signed int v69 = *((_DWORD *)this + 34);
          if (v69 == *((_DWORD *)this + 35))
          {
            _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v5, v69 + 1);
            signed int v69 = *v5;
          }
          uint64_t v70 = *((void *)this + 18);
          *((_DWORD *)this + 34) = v69 + 1;
          *(unsigned char *)(v70 + v69 + 8) = v68;
        }
LABEL_118:
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v34);
        goto LABEL_2;
      }
      return 0;
    default:
      goto LABEL_39;
  }
}

uint64_t CoreML::Specification::SliceStaticLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *unsigned int v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v21 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v21 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v21;
    }
    unsigned int v22 = *(_DWORD *)(v5 + 56);
    if (v21 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v22);
    }
    else
    {
      uint64_t v23 = *((void *)a2 + 1);
      if (v22 < 0x80)
      {
        unsigned int v25 = *(_DWORD *)(v5 + 56);
        int v24 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        int v24 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v24++ = v22 | 0x80;
          unsigned int v25 = v22 >> 7;
          unsigned int v26 = v22 >> 14;
          v22 >>= 7;
        }
        while (v26);
      }
      *int v24 = v25;
      int v27 = v24 - v23 + 1;
      *((void *)a2 + 1) += v27;
      *((_DWORD *)a2 + 4) -= v27;
    }
    uint64_t v28 = *(void *)(v5 + 48);
    if (v28) {
      v29 = (_tc_google::protobuf::internal::WireFormatLite *)(v28 + 8);
    }
    else {
      v29 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v29, (const BOOL *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  if (*(int *)(v5 + 64) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x1Au);
      int v30 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 26;
      int v30 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v30;
    }
    unsigned int v31 = *(_DWORD *)(v5 + 80);
    if (v30 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v31);
    }
    else
    {
      uint64_t v32 = *((void *)a2 + 1);
      if (v31 < 0x80)
      {
        unsigned int v34 = *(_DWORD *)(v5 + 80);
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v33++ = v31 | 0x80;
          unsigned int v34 = v31 >> 7;
          unsigned int v35 = v31 >> 14;
          v31 >>= 7;
        }
        while (v35);
      }
      *uint64_t v33 = v34;
      int v36 = v33 - v32 + 1;
      *((void *)a2 + 1) += v36;
      *((_DWORD *)a2 + 4) -= v36;
    }
    uint64_t v37 = *(unsigned int *)(v5 + 64);
    if ((int)v37 >= 1)
    {
      for (uint64_t j = 0; j != v37; ++j)
      {
        unint64_t v39 = *(void *)(*(void *)(v5 + 72) + 8 * j + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v39);
        }
        else
        {
          uint64_t v40 = *((void *)a2 + 1);
          if (v39 < 0x80)
          {
            unint64_t v42 = *(void *)(*(void *)(v5 + 72) + 8 * j + 8);
            v41 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            v41 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v41++ = v39 | 0x80;
              unint64_t v42 = v39 >> 7;
              unint64_t v43 = v39 >> 14;
              v39 >>= 7;
            }
            while (v43);
          }
          unsigned char *v41 = v42;
          int v44 = v41 - v40 + 1;
          *((void *)a2 + 1) += v44;
          *((_DWORD *)a2 + 4) -= v44;
        }
      }
    }
  }
  if (*(int *)(v5 + 88) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x22u);
      int v45 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 34;
      int v45 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v45;
    }
    unsigned int v46 = *(_DWORD *)(v5 + 104);
    if (v45 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v46);
    }
    else
    {
      uint64_t v47 = *((void *)a2 + 1);
      if (v46 < 0x80)
      {
        unsigned int v49 = *(_DWORD *)(v5 + 104);
        unint64_t v48 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v48 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v48++ = v46 | 0x80;
          unsigned int v49 = v46 >> 7;
          unsigned int v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
      }
      *unint64_t v48 = v49;
      int v51 = v48 - v47 + 1;
      *((void *)a2 + 1) += v51;
      *((_DWORD *)a2 + 4) -= v51;
    }
    uint64_t v52 = *(void *)(v5 + 96);
    if (v52) {
      v53 = (_tc_google::protobuf::internal::WireFormatLite *)(v52 + 8);
    }
    else {
      v53 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v53, (const BOOL *)*(unsigned int *)(v5 + 88), a2, a4);
  }
  if (*(int *)(v5 + 112) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x2Au);
      int v54 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 42;
      int v54 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v54;
    }
    unsigned int v55 = *(_DWORD *)(v5 + 128);
    if (v54 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v55);
    }
    else
    {
      uint64_t v56 = *((void *)a2 + 1);
      if (v55 < 0x80)
      {
        unsigned int v58 = *(_DWORD *)(v5 + 128);
        signed int v57 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        signed int v57 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v57++ = v55 | 0x80;
          unsigned int v58 = v55 >> 7;
          unsigned int v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
      }
      *signed int v57 = v58;
      int v60 = v57 - v56 + 1;
      *((void *)a2 + 1) += v60;
      *((_DWORD *)a2 + 4) -= v60;
    }
    uint64_t v61 = *(unsigned int *)(v5 + 112);
    if ((int)v61 >= 1)
    {
      for (uint64_t k = 0; k != v61; ++k)
      {
        unint64_t v63 = *(void *)(*(void *)(v5 + 120) + 8 * k + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v63);
        }
        else
        {
          uint64_t v64 = *((void *)a2 + 1);
          if (v63 < 0x80)
          {
            unint64_t v66 = *(void *)(*(void *)(v5 + 120) + 8 * k + 8);
            v65 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            v65 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v65++ = v63 | 0x80;
              unint64_t v66 = v63 >> 7;
              unint64_t v67 = v63 >> 14;
              v63 >>= 7;
            }
            while (v67);
          }
          unsigned char *v65 = v66;
          int v68 = v65 - v64 + 1;
          *((void *)a2 + 1) += v68;
          *((_DWORD *)a2 + 4) -= v68;
        }
      }
    }
  }
  if (*(int *)(v5 + 136) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x32u);
      int v69 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 50;
      int v69 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v69;
    }
    unsigned int v70 = *(_DWORD *)(v5 + 152);
    if (v69 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v70);
    }
    else
    {
      uint64_t v71 = *((void *)a2 + 1);
      if (v70 < 0x80)
      {
        unsigned int v73 = *(_DWORD *)(v5 + 152);
        v72 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        v72 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v72++ = v70 | 0x80;
          unsigned int v73 = v70 >> 7;
          unsigned int v74 = v70 >> 14;
          v70 >>= 7;
        }
        while (v74);
      }
      unsigned char *v72 = v73;
      int v75 = v72 - v71 + 1;
      *((void *)a2 + 1) += v75;
      *((_DWORD *)a2 + 4) -= v75;
    }
    uint64_t v76 = *(void *)(v5 + 144);
    if (v76) {
      v77 = (_tc_google::protobuf::internal::WireFormatLite *)(v76 + 8);
    }
    else {
      v77 = 0;
    }
    v78 = (const BOOL *)*(unsigned int *)(v5 + 136);
    return _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v77, v78, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SliceStaticLayerParams::ByteSizeLong(CoreML::Specification::SliceStaticLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  unint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v5 = 11;
  uint64_t v6 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0) {
    uint64_t v5 = v6;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  uint64_t v7 = v5 + v2;
  uint64_t v8 = *((unsigned int *)this + 10);
  if (v8)
  {
    if ((v8 & 0x80000000) != 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v7 += v9;
  }
  *((_DWORD *)this + 14) = v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = *((unsigned int *)this + 16);
  if ((int)v11 < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t *)(*((void *)this + 9) + 8);
    do
    {
      uint64_t v14 = *v13++;
      v12 += (9 * (__clz(v14 | 1) ^ 0x3F) + 73) >> 6;
      --v11;
    }
    while (v11);
    if (v12)
    {
      if ((v12 & 0x80000000) != 0) {
        uint64_t v15 = 11;
      }
      else {
        uint64_t v15 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v10 += v15;
    }
  }
  *((_DWORD *)this + 20) = v12;
  uint64_t v16 = v10 + v12;
  uint64_t v17 = *((unsigned int *)this + 22);
  if (v17)
  {
    uint64_t v18 = 11;
    uint64_t v19 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v17 >= 0) {
      uint64_t v18 = v19;
    }
    v16 += v18;
  }
  *((_DWORD *)this + 26) = v17;
  uint64_t v20 = v16 + v17;
  uint64_t v21 = *((unsigned int *)this + 28);
  if ((int)v21 < 1)
  {
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = (uint64_t *)(*((void *)this + 15) + 8);
    do
    {
      uint64_t v24 = *v23++;
      v22 += (9 * (__clz(v24 | 1) ^ 0x3F) + 73) >> 6;
      --v21;
    }
    while (v21);
    if (v22)
    {
      if ((v22 & 0x80000000) != 0) {
        uint64_t v25 = 11;
      }
      else {
        uint64_t v25 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v20 += v25;
    }
  }
  *((_DWORD *)this + 32) = v22;
  uint64_t v26 = v20 + v22;
  uint64_t v27 = *((unsigned int *)this + 34);
  if (v27)
  {
    if ((v27 & 0x80000000) != 0) {
      uint64_t v28 = 11;
    }
    else {
      uint64_t v28 = ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v26 += v28;
  }
  uint64_t v29 = v26 + v27;
  *((_DWORD *)this + 38) = v27;
  *((_DWORD *)this + 39) = v29;
  return v29;
}

uint64_t CoreML::Specification::SliceStaticLayerParams::IsInitialized(CoreML::Specification::SliceStaticLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SliceStaticLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SliceStaticLayerParams");
}

CoreML::Specification::SliceDynamicLayerParams *CoreML::Specification::SliceDynamicLayerParams::SliceDynamicLayerParams(CoreML::Specification::SliceDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764768;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::SliceDynamicLayerParams *)&CoreML::Specification::_SliceDynamicLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 33) = 0;
  return this;
}

void sub_223FAD2BC(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[15];
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  CoreML::Specification::SliceDynamicLayerParams::SliceDynamicLayerParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SliceDynamicLayerParams::~SliceDynamicLayerParams(CoreML::Specification::SliceDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764768;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 12);
  if (v3 && !*v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4 && !*v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5 && !*v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6 && !*v6) {
    operator delete(v6);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SliceDynamicLayerParams::~SliceDynamicLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SliceDynamicLayerParams::New(CoreML::Specification::SliceDynamicLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAD428(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4014994198);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SliceDynamicLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceDynamicLayerParams>);
  }
  return result;
}

_DWORD *CoreML::Specification::SliceDynamicLayerParams::Clear(_DWORD *this)
{
  this[4] = 0;
  this[10] = 0;
  this[16] = 0;
  this[22] = 0;
  this[28] = 0;
  return this;
}

uint64_t CoreML::Specification::SliceDynamicLayerParams::MergePartialFromCodedStream(CoreML::Specification::SliceDynamicLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 112);
  uint64_t v6 = (unsigned int *)((char *)this + 88);
  uint64_t v7 = (unsigned int *)((char *)this + 64);
  uint64_t v8 = (unsigned int *)((char *)this + 40);
  uint64_t v9 = (unsigned int *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    uint64_t v10 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v11 = 0;
      break;
    }
    uint64_t v11 = *v10;
    if (*v10 < 1) {
      break;
    }
    *a2 = v10 + 1;
    unint64_t v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_34:
    if (v12) {
      BOOL v24 = (v12 & 7) == 4;
    }
    else {
      BOOL v24 = 1;
    }
    if (v24) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v12, a3) & 1) == 0)return 0; {
  }
    }
  unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
  unint64_t v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v12 & 0x100000000) == 0) {
    goto LABEL_34;
  }
LABEL_8:
  switch(v12 >> 3)
  {
    case 2u:
      if (v12 == 16)
      {
        unsigned int v25 = 18;
        uint64_t v26 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v27 = (uint64_t)v9;
        goto LABEL_47;
      }
      if (v12 != 18) {
        goto LABEL_34;
      }
      uint64_t v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      int v31 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        uint64_t v32 = *a2;
        if (*a2 >= a2[1] || *v32 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v34 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v32;
          *a2 = v32 + 1;
        }
        BOOL v35 = Varint64Fallback != 0;
        signed int v36 = *((_DWORD *)this + 4);
        if (v36 == *((_DWORD *)this + 5))
        {
          _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v9, v36 + 1);
          signed int v36 = *v9;
        }
        uint64_t v37 = *((void *)this + 3);
        *((_DWORD *)this + 4) = v36 + 1;
        *(unsigned char *)(v37 + v36 + 8) = v35;
      }
      goto LABEL_101;
    case 3u:
      if (v12 == 24)
      {
        unsigned int v28 = 26;
        uint64_t v29 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v30 = (uint64_t)v8;
        goto LABEL_44;
      }
      if (v12 != 26) {
        goto LABEL_34;
      }
      uint64_t v16 = *a2;
      if (*a2 >= a2[1] || *v16 < 0)
      {
        int v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v17 < 0) {
          return 0;
        }
      }
      else
      {
        int v17 = *v16;
        *a2 = v16 + 1;
      }
      int v31 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        char v38 = *a2;
        if (*a2 >= a2[1] || *v38 < 0)
        {
          unint64_t v40 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v41 & 1) == 0) {
            return 0;
          }
          unint64_t v39 = v40;
        }
        else
        {
          unint64_t v39 = *v38;
          *a2 = v38 + 1;
        }
        signed int v42 = *((_DWORD *)this + 10);
        if (v42 == *((_DWORD *)this + 11))
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v8, v42 + 1);
          signed int v42 = *v8;
        }
        uint64_t v43 = *((void *)this + 6);
        *((_DWORD *)this + 10) = v42 + 1;
        *(void *)(v43 + 8 * v42 + 8) = v39;
      }
      goto LABEL_101;
    case 4u:
      if (v12 == 32)
      {
        unsigned int v25 = 34;
        uint64_t v26 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v27 = (uint64_t)v7;
        goto LABEL_47;
      }
      if (v12 != 34) {
        goto LABEL_34;
      }
      uint64_t v18 = *a2;
      if (*a2 >= a2[1] || *v18 < 0)
      {
        int v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v19 < 0) {
          return 0;
        }
      }
      else
      {
        int v19 = *v18;
        *a2 = v18 + 1;
      }
      int v31 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        int v44 = *a2;
        if (*a2 >= a2[1] || *v44 < 0)
        {
          unint64_t v45 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v46 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v45 = *v44;
          *a2 = v44 + 1;
        }
        BOOL v47 = v45 != 0;
        signed int v48 = *((_DWORD *)this + 16);
        if (v48 == *((_DWORD *)this + 17))
        {
          _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v7, v48 + 1);
          signed int v48 = *v7;
        }
        uint64_t v49 = *((void *)this + 9);
        *((_DWORD *)this + 16) = v48 + 1;
        *(unsigned char *)(v49 + v48 + 8) = v47;
      }
      goto LABEL_101;
    case 5u:
      if (v12 == 40)
      {
        unsigned int v28 = 42;
        uint64_t v29 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v30 = (uint64_t)v6;
LABEL_44:
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, v28, v29, v30) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      if (v12 != 42) {
        goto LABEL_34;
      }
      uint64_t v20 = *a2;
      if (*a2 >= a2[1] || *v20 < 0)
      {
        int v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v21 < 0) {
          return 0;
        }
      }
      else
      {
        int v21 = *v20;
        *a2 = v20 + 1;
      }
      int v31 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
      while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
      {
        unsigned int v50 = *a2;
        if (*a2 >= a2[1] || *v50 < 0)
        {
          unint64_t v52 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v53 & 1) == 0) {
            return 0;
          }
          unint64_t v51 = v52;
        }
        else
        {
          unint64_t v51 = *v50;
          *a2 = v50 + 1;
        }
        signed int v54 = *((_DWORD *)this + 22);
        if (v54 == *((_DWORD *)this + 23))
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v54 + 1);
          signed int v54 = *v6;
        }
        uint64_t v55 = *((void *)this + 12);
        *((_DWORD *)this + 22) = v54 + 1;
        *(void *)(v55 + 8 * v54 + 8) = v51;
      }
      goto LABEL_101;
    case 6u:
      if (v12 == 48)
      {
        unsigned int v25 = 50;
        uint64_t v26 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        uint64_t v27 = (uint64_t)v5;
LABEL_47:
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(_tc_google::protobuf::internal::WireFormatLite::FieldType)8>(1, v25, v26, v27) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      if (v12 != 50) {
        goto LABEL_34;
      }
      uint64_t v22 = *a2;
      if (*a2 < a2[1] && (*v22 & 0x80000000) == 0)
      {
        int v23 = *v22;
        *a2 = v22 + 1;
        goto LABEL_92;
      }
      int v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_92:
        int v31 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23);
        while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          uint64_t v56 = *a2;
          if (*a2 >= a2[1] || *v56 < 0)
          {
            unint64_t v57 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v58 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t v57 = *v56;
            *a2 = v56 + 1;
          }
          BOOL v59 = v57 != 0;
          signed int v60 = *((_DWORD *)this + 28);
          if (v60 == *((_DWORD *)this + 29))
          {
            _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v5, v60 + 1);
            signed int v60 = *v5;
          }
          uint64_t v61 = *((void *)this + 15);
          *((_DWORD *)this + 28) = v60 + 1;
          *(unsigned char *)(v61 + v60 + 8) = v59;
        }
LABEL_101:
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v31);
        goto LABEL_2;
      }
      return 0;
    default:
      goto LABEL_34;
  }
}

uint64_t CoreML::Specification::SliceDynamicLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      uint64_t v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v14, (const BOOL *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x1Au);
      int v15 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 26;
      int v15 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v15;
    }
    unsigned int v16 = *(_DWORD *)(v5 + 56);
    if (v15 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v16);
    }
    else
    {
      uint64_t v17 = *((void *)a2 + 1);
      if (v16 < 0x80)
      {
        unsigned int v19 = *(_DWORD *)(v5 + 56);
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v18++ = v16 | 0x80;
          unsigned int v19 = v16 >> 7;
          unsigned int v20 = v16 >> 14;
          v16 >>= 7;
        }
        while (v20);
      }
      *uint64_t v18 = v19;
      int v21 = v18 - v17 + 1;
      *((void *)a2 + 1) += v21;
      *((_DWORD *)a2 + 4) -= v21;
    }
    uint64_t v22 = *(unsigned int *)(v5 + 40);
    if ((int)v22 >= 1)
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        unint64_t v24 = *(void *)(*(void *)(v5 + 48) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v24);
        }
        else
        {
          uint64_t v25 = *((void *)a2 + 1);
          if (v24 < 0x80)
          {
            unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * i + 8);
            uint64_t v26 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            uint64_t v26 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v26++ = v24 | 0x80;
              unint64_t v27 = v24 >> 7;
              unint64_t v28 = v24 >> 14;
              v24 >>= 7;
            }
            while (v28);
          }
          *uint64_t v26 = v27;
          int v29 = v26 - v25 + 1;
          *((void *)a2 + 1) += v29;
          *((_DWORD *)a2 + 4) -= v29;
        }
      }
    }
  }
  if (*(int *)(v5 + 64) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x22u);
      int v30 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 34;
      int v30 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v30;
    }
    unsigned int v31 = *(_DWORD *)(v5 + 80);
    if (v30 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v31);
    }
    else
    {
      uint64_t v32 = *((void *)a2 + 1);
      if (v31 < 0x80)
      {
        unsigned int v34 = *(_DWORD *)(v5 + 80);
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v33++ = v31 | 0x80;
          unsigned int v34 = v31 >> 7;
          unsigned int v35 = v31 >> 14;
          v31 >>= 7;
        }
        while (v35);
      }
      *uint64_t v33 = v34;
      int v36 = v33 - v32 + 1;
      *((void *)a2 + 1) += v36;
      *((_DWORD *)a2 + 4) -= v36;
    }
    uint64_t v37 = *(void *)(v5 + 72);
    if (v37) {
      char v38 = (_tc_google::protobuf::internal::WireFormatLite *)(v37 + 8);
    }
    else {
      char v38 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v38, (const BOOL *)*(unsigned int *)(v5 + 64), a2, a4);
  }
  if (*(int *)(v5 + 88) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x2Au);
      int v39 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 42;
      int v39 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v39;
    }
    unsigned int v40 = *(_DWORD *)(v5 + 104);
    if (v39 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v40);
    }
    else
    {
      uint64_t v41 = *((void *)a2 + 1);
      if (v40 < 0x80)
      {
        unsigned int v43 = *(_DWORD *)(v5 + 104);
        signed int v42 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        signed int v42 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v42++ = v40 | 0x80;
          unsigned int v43 = v40 >> 7;
          unsigned int v44 = v40 >> 14;
          v40 >>= 7;
        }
        while (v44);
      }
      *signed int v42 = v43;
      int v45 = v42 - v41 + 1;
      *((void *)a2 + 1) += v45;
      *((_DWORD *)a2 + 4) -= v45;
    }
    uint64_t v46 = *(unsigned int *)(v5 + 88);
    if ((int)v46 >= 1)
    {
      for (uint64_t j = 0; j != v46; ++j)
      {
        unint64_t v48 = *(void *)(*(void *)(v5 + 96) + 8 * j + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v48);
        }
        else
        {
          uint64_t v49 = *((void *)a2 + 1);
          if (v48 < 0x80)
          {
            unint64_t v51 = *(void *)(*(void *)(v5 + 96) + 8 * j + 8);
            unsigned int v50 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unsigned int v50 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v50++ = v48 | 0x80;
              unint64_t v51 = v48 >> 7;
              unint64_t v52 = v48 >> 14;
              v48 >>= 7;
            }
            while (v52);
          }
          *unsigned int v50 = v51;
          int v53 = v50 - v49 + 1;
          *((void *)a2 + 1) += v53;
          *((_DWORD *)a2 + 4) -= v53;
        }
      }
    }
  }
  if (*(int *)(v5 + 112) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x32u);
      int v54 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 50;
      int v54 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v54;
    }
    unsigned int v55 = *(_DWORD *)(v5 + 128);
    if (v54 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v55);
    }
    else
    {
      uint64_t v56 = *((void *)a2 + 1);
      if (v55 < 0x80)
      {
        unsigned int v58 = *(_DWORD *)(v5 + 128);
        unint64_t v57 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v57 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v57++ = v55 | 0x80;
          unsigned int v58 = v55 >> 7;
          unsigned int v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
      }
      *unint64_t v57 = v58;
      int v60 = v57 - v56 + 1;
      *((void *)a2 + 1) += v60;
      *((_DWORD *)a2 + 4) -= v60;
    }
    uint64_t v61 = *(void *)(v5 + 120);
    if (v61) {
      char v62 = (_tc_google::protobuf::internal::WireFormatLite *)(v61 + 8);
    }
    else {
      char v62 = 0;
    }
    unint64_t v63 = (const BOOL *)*(unsigned int *)(v5 + 112);
    return _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v62, v63, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SliceDynamicLayerParams::ByteSizeLong(CoreML::Specification::SliceDynamicLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (v1)
  {
    uint64_t v2 = 11;
    uint64_t v3 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v1 >= 0) {
      uint64_t v2 = v3;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 8) = v1;
  uint64_t v4 = v2 + v1;
  uint64_t v5 = *((unsigned int *)this + 10);
  if ((int)v5 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v7 = (uint64_t *)(*((void *)this + 6) + 8);
    do
    {
      uint64_t v8 = *v7++;
      v6 += (9 * (__clz(v8 | 1) ^ 0x3F) + 73) >> 6;
      --v5;
    }
    while (v5);
    if (v6)
    {
      if ((v6 & 0x80000000) != 0) {
        uint64_t v9 = 11;
      }
      else {
        uint64_t v9 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v4 += v9;
    }
  }
  *((_DWORD *)this + 14) = v6;
  uint64_t v10 = v4 + v6;
  uint64_t v11 = *((unsigned int *)this + 16);
  if (v11)
  {
    uint64_t v12 = 11;
    uint64_t v13 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v11 >= 0) {
      uint64_t v12 = v13;
    }
    v10 += v12;
  }
  *((_DWORD *)this + 20) = v11;
  uint64_t v14 = v10 + v11;
  uint64_t v15 = *((unsigned int *)this + 22);
  if ((int)v15 < 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = (uint64_t *)(*((void *)this + 12) + 8);
    do
    {
      uint64_t v18 = *v17++;
      v16 += (9 * (__clz(v18 | 1) ^ 0x3F) + 73) >> 6;
      --v15;
    }
    while (v15);
    if (v16)
    {
      if ((v16 & 0x80000000) != 0) {
        uint64_t v19 = 11;
      }
      else {
        uint64_t v19 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v14 += v19;
    }
  }
  *((_DWORD *)this + 26) = v16;
  uint64_t v20 = v14 + v16;
  uint64_t v21 = *((unsigned int *)this + 28);
  if (v21)
  {
    if ((v21 & 0x80000000) != 0) {
      uint64_t v22 = 11;
    }
    else {
      uint64_t v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v20 += v22;
  }
  uint64_t v23 = v20 + v21;
  *((_DWORD *)this + 32) = v21;
  *((_DWORD *)this + 33) = v23;
  return v23;
}

uint64_t CoreML::Specification::SliceDynamicLayerParams::IsInitialized(CoreML::Specification::SliceDynamicLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SliceDynamicLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SliceDynamicLayerParams");
}

CoreML::Specification::TileLayerParams *CoreML::Specification::TileLayerParams::TileLayerParams(CoreML::Specification::TileLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D764800;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::TileLayerParams *)&CoreML::Specification::_TileLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223FAE1F4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TileLayerParams::~TileLayerParams(CoreML::Specification::TileLayerParams *this)
{
  *(void *)this = &unk_26D764800;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::TileLayerParams::~TileLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::TileLayerParams::New(CoreML::Specification::TileLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAE308(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TileLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TileLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::TileLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::TileLayerParams::MergePartialFromCodedStream(CoreML::Specification::TileLayerParams *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        uint64_t v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            uint64_t v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::TileLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          unsigned char *v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::TileLayerParams::ByteSizeLong(CoreML::Specification::TileLayerParams *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::TileLayerParams::IsInitialized(CoreML::Specification::TileLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::TileLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TileLayerParams");
}

CoreML::Specification::GetShapeLayerParams *CoreML::Specification::GetShapeLayerParams::GetShapeLayerParams(CoreML::Specification::GetShapeLayerParams *this)
{
  *(void *)this = &unk_26D764898;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::GetShapeLayerParams *)&CoreML::Specification::_GetShapeLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FAE79C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GetShapeLayerParams::~GetShapeLayerParams(CoreML::Specification::GetShapeLayerParams *this)
{
  *(void *)this = &unk_26D764898;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764898;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::GetShapeLayerParams::New(CoreML::Specification::GetShapeLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAE8B0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GetShapeLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GetShapeLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::GetShapeLayerParams::MergePartialFromCodedStream(CoreML::Specification::GetShapeLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::GetShapeLayerParams::ByteSizeLong(CoreML::Specification::GetShapeLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::GetShapeLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::GetShapeLayerParams::IsInitialized(CoreML::Specification::GetShapeLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::GetShapeLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GetShapeLayerParams");
}

CoreML::Specification::ErfLayerParams *CoreML::Specification::ErfLayerParams::ErfLayerParams(CoreML::Specification::ErfLayerParams *this)
{
  *(void *)this = &unk_26D764930;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ErfLayerParams *)&CoreML::Specification::_ErfLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223FAEA10(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ErfLayerParams::~ErfLayerParams(CoreML::Specification::ErfLayerParams *this)
{
  *(void *)this = &unk_26D764930;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764930;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ErfLayerParams::New(CoreML::Specification::ErfLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAEB20(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ErfLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ErfLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ErfLayerParams::MergePartialFromCodedStream(CoreML::Specification::ErfLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ErfLayerParams::ByteSizeLong(CoreML::Specification::ErfLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ErfLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::ErfLayerParams::IsInitialized(CoreML::Specification::ErfLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ErfLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ErfLayerParams");
}

CoreML::Specification::GeluLayerParams *CoreML::Specification::GeluLayerParams::GeluLayerParams(CoreML::Specification::GeluLayerParams *this)
{
  *(void *)this = &unk_26D7649C8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::GeluLayerParams *)&CoreML::Specification::_GeluLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  return this;
}

void sub_223FAEC80(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GeluLayerParams::~GeluLayerParams(CoreML::Specification::GeluLayerParams *this)
{
  *(void *)this = &unk_26D7649C8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7649C8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::GeluLayerParams::New(CoreML::Specification::GeluLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAED90(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GeluLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GeluLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::GeluLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::GeluLayerParams::MergePartialFromCodedStream(CoreML::Specification::GeluLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::GeluLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5 = *(_DWORD *)(this + 16);
  if (v5) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GeluLayerParams::ByteSizeLong(CoreML::Specification::GeluLayerParams *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::GeluLayerParams::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5) {
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  }
  return this;
}

uint64_t CoreML::Specification::GeluLayerParams::IsInitialized(CoreML::Specification::GeluLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::GeluLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GeluLayerParams");
}

CoreML::Specification::RangeStaticLayerParams *CoreML::Specification::RangeStaticLayerParams::RangeStaticLayerParams(CoreML::Specification::RangeStaticLayerParams *this)
{
  *(void *)this = &unk_26D764A60;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::RangeStaticLayerParams *)&CoreML::Specification::_RangeStaticLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_223FAEFE8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::RangeStaticLayerParams::~RangeStaticLayerParams(CoreML::Specification::RangeStaticLayerParams *this)
{
  *(void *)this = &unk_26D764A60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764A60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::RangeStaticLayerParams::New(CoreML::Specification::RangeStaticLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAF0F8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::RangeStaticLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RangeStaticLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::RangeStaticLayerParams::Clear(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::RangeStaticLayerParams::MergePartialFromCodedStream(CoreML::Specification::RangeStaticLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) != 0) {
            goto LABEL_7;
          }
LABEL_25:
          if (v7) {
            BOOL v17 = (v7 & 7) == 4;
          }
          else {
            BOOL v17 = 1;
          }
          uint64_t v18 = v17;
          if (v17
            || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
          {
            return v18;
          }
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_25;
        }
LABEL_7:
        unsigned int v9 = v7 >> 3;
        if (v7 >> 3 != 3) {
          break;
        }
        if (v7 != 29) {
          goto LABEL_25;
        }
        unsigned int v20 = 0;
        unint64_t v13 = (unsigned int *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
        {
          if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v20)) {
            return 0;
          }
          unsigned int v14 = v20;
        }
        else
        {
          unsigned int v14 = *v13;
          *a2 = (char *)(v13 + 1);
        }
        *((_DWORD *)this + 6) = v14;
      }
      if (v9 == 2) {
        break;
      }
      if (v9 != 1 || v7 != 13) {
        goto LABEL_25;
      }
      unsigned int v22 = 0;
      uint64_t v11 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v22)) {
          return 0;
        }
        unsigned int v12 = v22;
      }
      else
      {
        unsigned int v12 = *v11;
        *a2 = (char *)(v11 + 1);
      }
      *((_DWORD *)this + 4) = v12;
    }
    if (v7 != 21) {
      goto LABEL_25;
    }
    unsigned int v21 = 0;
    unint64_t v15 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      unsigned int v16 = *v15;
      *a2 = (char *)(v15 + 1);
      goto LABEL_24;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v21)) {
      return 0;
    }
    unsigned int v16 = v21;
LABEL_24:
    *((_DWORD *)this + 5) = v16;
  }
}

uint64_t CoreML::Specification::RangeStaticLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  float v5 = *(float *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  float v6 = *(float *)(v4 + 20);
  if (v6 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  float v7 = *(float *)(v4 + 24);
  if (v7 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v7, a3);
  }
  return this;
}

uint64_t CoreML::Specification::RangeStaticLayerParams::ByteSizeLong(CoreML::Specification::RangeStaticLayerParams *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) != 0.0) {
    v1 += 5;
  }
  if (*((float *)this + 6) != 0.0) {
    v1 += 5;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CoreML::Specification::RangeStaticLayerParams::IsInitialized(CoreML::Specification::RangeStaticLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::RangeStaticLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RangeStaticLayerParams");
}

CoreML::Specification::RangeDynamicLayerParams *CoreML::Specification::RangeDynamicLayerParams::RangeDynamicLayerParams(CoreML::Specification::RangeDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764AF8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::RangeDynamicLayerParams *)&CoreML::Specification::_RangeDynamicLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_223FAF430(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::RangeDynamicLayerParams::~RangeDynamicLayerParams(CoreML::Specification::RangeDynamicLayerParams *this)
{
  *(void *)this = &unk_26D764AF8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764AF8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::RangeDynamicLayerParams::New(CoreML::Specification::RangeDynamicLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAF540(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::RangeDynamicLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RangeDynamicLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::RangeDynamicLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::RangeDynamicLayerParams::MergePartialFromCodedStream(CoreML::Specification::RangeDynamicLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        float v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 3) {
        break;
      }
      if (v7 >> 3 != 2 || v7 != 21) {
        goto LABEL_20;
      }
      unsigned int v18 = 0;
      BOOL v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18)) {
          return 0;
        }
        unsigned int v11 = v18;
      }
      else
      {
        unsigned int v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 29) {
      goto LABEL_20;
    }
    unsigned int v17 = 0;
    unsigned int v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      unsigned int v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17)) {
      return 0;
    }
    unsigned int v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::RangeDynamicLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  float v5 = *(float *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v5, a3);
  }
  float v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::RangeDynamicLayerParams::ByteSizeLong(CoreML::Specification::RangeDynamicLayerParams *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) != 0.0) {
    v1 += 5;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::RangeDynamicLayerParams::IsInitialized(CoreML::Specification::RangeDynamicLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::RangeDynamicLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RangeDynamicLayerParams");
}

CoreML::Specification::SlidingWindowsLayerParams *CoreML::Specification::SlidingWindowsLayerParams::SlidingWindowsLayerParams(CoreML::Specification::SlidingWindowsLayerParams *this)
{
  *(void *)this = &unk_26D764B90;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SlidingWindowsLayerParams *)&CoreML::Specification::_SlidingWindowsLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_223FAF7FC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SlidingWindowsLayerParams::~SlidingWindowsLayerParams(CoreML::Specification::SlidingWindowsLayerParams *this)
{
  *(void *)this = &unk_26D764B90;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764B90;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SlidingWindowsLayerParams::default_instance(CoreML::Specification::SlidingWindowsLayerParams *this)
{
  return &CoreML::Specification::_SlidingWindowsLayerParams_default_instance_;
}

void CoreML::Specification::SlidingWindowsLayerParams::New(CoreML::Specification::SlidingWindowsLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAF92C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40594C3D85);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SlidingWindowsLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SlidingWindowsLayerParams>);
  }
  return result;
}

void *CoreML::Specification::SlidingWindowsLayerParams::Clear(void *this)
{
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

uint64_t CoreML::Specification::SlidingWindowsLayerParams::MergePartialFromCodedStream(CoreML::Specification::SlidingWindowsLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v5 = *a2;
          if (*a2 >= a2[1])
          {
            uint64_t v6 = 0;
LABEL_6:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
            unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0) {
              goto LABEL_26;
            }
            goto LABEL_7;
          }
          uint64_t v6 = *v5;
          if (*v5 < 1) {
            goto LABEL_6;
          }
          *a2 = v5 + 1;
          unint64_t v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_26;
          }
LABEL_7:
          unsigned int v9 = v7 >> 3;
          if (v7 >> 3 != 3) {
            break;
          }
          if (v7 != 24) {
            goto LABEL_26;
          }
          unsigned int v13 = *a2;
          if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
          {
            *((void *)this + 4) = *v13;
            goto LABEL_25;
          }
          *((void *)this + 4) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        if (v9 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_26;
        }
        unsigned int v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          *((void *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          *((void *)this + 3) = *v13;
LABEL_25:
          *a2 = v13 + 1;
        }
      }
      if (v9 != 1 || v7 != 8) {
        break;
      }
      unsigned int v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((void *)this + 2) = Varint64Fallback;
    }
LABEL_26:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::SlidingWindowsLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  unint64_t v8 = *(void *)(v5 + 32);
  if (v8)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(3, v8, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::SlidingWindowsLayerParams::ByteSizeLong(CoreML::Specification::SlidingWindowsLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  uint64_t v6 = *((void *)this + 4);
  unint64_t v7 = v4 + ((9 * (__clz(v6 | 1) ^ 0x3F) + 73) >> 6);
  if (v6) {
    unint64_t v4 = v7 + 1;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SlidingWindowsLayerParams::IsInitialized(CoreML::Specification::SlidingWindowsLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SlidingWindowsLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SlidingWindowsLayerParams");
}

CoreML::Specification::LayerNormalizationLayerParams *CoreML::Specification::LayerNormalizationLayerParams::LayerNormalizationLayerParams(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D764C28;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::LayerNormalizationLayerParams *)&CoreML::Specification::_LayerNormalizationLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  return this;
}

void sub_223FAFC74(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  *(void *)this = &unk_26D764C28;
  CoreML::Specification::LayerNormalizationLayerParams::SharedDtor((uint64_t *)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::LayerNormalizationLayerParams::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[5];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    this = (uint64_t *)v1[6];
    if (this)
    {
      unint64_t v3 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v3();
    }
  }
  return this;
}

uint64_t *CoreML::Specification::LayerNormalizationLayerParams::default_instance(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  return &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_;
}

void CoreML::Specification::LayerNormalizationLayerParams::New(CoreML::Specification::LayerNormalizationLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FAFE50(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4054F75DDDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LayerNormalizationLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LayerNormalizationLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::LayerNormalizationLayerParams::Clear(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return result;
}

BOOL CoreML::Specification::LayerNormalizationLayerParams::MergePartialFromCodedStream(CoreML::Specification::LayerNormalizationLayerParams *this, char **a2, unsigned int a3)
{
  unint64_t v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 == 8)
          {
            if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
          }
            }
          else
          {
            if (v8 != 10) {
              goto LABEL_27;
            }
            BOOL v10 = *a2;
            if (*a2 >= a2[1] || *v10 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v10;
              *a2 = v10 + 1;
            }
            int v22 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
            if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
            {
              do
              {
                uint64_t v23 = *a2;
                if (*a2 >= a2[1] || *v23 < 0)
                {
                  unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                  if ((v26 & 1) == 0) {
                    return 0;
                  }
                  unint64_t v24 = Varint64Fallback;
                }
                else
                {
                  unint64_t v24 = *v23;
                  *a2 = v23 + 1;
                }
                signed int v27 = *((_DWORD *)this + 4);
                if (v27 == *((_DWORD *)this + 5))
                {
                  _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v27 + 1);
                  signed int v27 = *v5;
                }
                uint64_t v28 = *((void *)this + 3);
                *((_DWORD *)this + 4) = v27 + 1;
                *(void *)(v28 + 8 * v27 + 8) = v24;
              }
              while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
            }
            _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v22);
          }
          break;
        case 2u:
          if (v8 != 21) {
            goto LABEL_27;
          }
          unsigned int v29 = 0;
          unsigned int v12 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v29);
            if (!result) {
              return result;
            }
            unsigned int v13 = v29;
          }
          else
          {
            unsigned int v13 = *v12;
            *a2 = (char *)(v12 + 1);
          }
          *((_DWORD *)this + 14) = v13;
          continue;
        case 3u:
          if (v8 != 26) {
            goto LABEL_27;
          }
          BOOL v14 = (CoreML::Specification::WeightParams *)*((void *)this + 5);
          if (!v14) {
            operator new();
          }
          goto LABEL_24;
        case 4u:
          if (v8 != 34) {
            goto LABEL_27;
          }
          BOOL v14 = (CoreML::Specification::WeightParams *)*((void *)this + 6);
          if (!v14) {
            operator new();
          }
LABEL_24:
          char v15 = *a2;
          if (*a2 >= a2[1] || *v15 < 0)
          {
            int v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v16 < 0) {
              return 0;
            }
          }
          else
          {
            int v16 = *v15;
            *a2 = v15 + 1;
          }
          unint64_t v18 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
          if ((v18 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v20 = v18;
          BOOL result = CoreML::Specification::WeightParams::MergePartialFromCodedStream(v14, (_tc_google::protobuf::io::CodedInputStream *)a2, v19);
          if (!result) {
            return result;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20))return 0; {
          continue;
          }
        default:
          goto LABEL_27;
      }
    }
LABEL_27:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB0234(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LayerNormalizationLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            char v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            char v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *char v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  float v21 = *(float *)(v5 + 56);
  if (v21 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v21, a3);
  }
  if ((uint64_t *)v5 != &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    uint64_t v22 = *(void *)(v5 + 40);
    if (v22) {
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v22, a2, a4);
    }
    uint64_t v23 = *(void *)(v5 + 48);
    if (v23)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v23, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::LayerNormalizationLayerParams::ByteSizeLong(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
    uint64_t v3 = 0;
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v5 = *v4++;
    v3 += (9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6;
    --v2;
  }
  while (v2);
  if (!v3) {
    goto LABEL_8;
  }
  if ((v3 & 0x80000000) != 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  *((_DWORD *)this + 8) = v3;
  uint64_t v7 = v6 + v3;
  if (this != (CoreML::Specification::LayerNormalizationLayerParams *)&CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    uint64_t v8 = (CoreML::Specification::WeightParams *)*((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = CoreML::Specification::WeightParams::ByteSizeLong(v8);
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unsigned int v10 = (CoreML::Specification::WeightParams *)*((void *)this + 6);
    if (v10)
    {
      uint64_t v11 = CoreML::Specification::WeightParams::ByteSizeLong(v10);
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  if (*((float *)this + 14) == 0.0) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = v7 + 5;
  }
  *((_DWORD *)this + 15) = result;
  return result;
}

uint64_t CoreML::Specification::LayerNormalizationLayerParams::IsInitialized(CoreML::Specification::LayerNormalizationLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::LayerNormalizationLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LayerNormalizationLayerParams");
}

CoreML::Specification::NonMaximumSuppressionLayerParams *CoreML::Specification::NonMaximumSuppressionLayerParams::NonMaximumSuppressionLayerParams(CoreML::Specification::NonMaximumSuppressionLayerParams *this)
{
  *(void *)this = &unk_26D764CC0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppressionLayerParams *)&CoreML::Specification::_NonMaximumSuppressionLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223FB0600(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NonMaximumSuppressionLayerParams::~NonMaximumSuppressionLayerParams(CoreML::Specification::NonMaximumSuppressionLayerParams *this)
{
  *(void *)this = &unk_26D764CC0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764CC0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::NonMaximumSuppressionLayerParams::New(CoreML::Specification::NonMaximumSuppressionLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB0710(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40A90F680CLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppressionLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppressionLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppressionLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

BOOL CoreML::Specification::NonMaximumSuppressionLayerParams::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppressionLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_24;
      }
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 13) {
            goto LABEL_24;
          }
          unsigned int v21 = 0;
          uint64_t v9 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v21);
            if (!result) {
              return result;
            }
            unsigned int v10 = v21;
          }
          else
          {
            unsigned int v10 = *v9;
            *a2 = (char *)(v9 + 1);
          }
          *((_DWORD *)this + 4) = v10;
          continue;
        case 2u:
          if (v7 != 21) {
            goto LABEL_24;
          }
          unsigned int v20 = 0;
          uint64_t v11 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v20);
            if (!result) {
              return result;
            }
            unsigned int v12 = v20;
          }
          else
          {
            unsigned int v12 = *v11;
            *a2 = (char *)(v11 + 1);
          }
          *((_DWORD *)this + 5) = v12;
          continue;
        case 3u:
          if (v7 != 24) {
            goto LABEL_24;
          }
          uint64_t v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            *((void *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v17 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            *((void *)this + 3) = *v13;
            *a2 = v13 + 1;
          }
          continue;
        case 4u:
          if (v7 != 32) {
            goto LABEL_24;
          }
          BOOL v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v18 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v14;
            *a2 = v14 + 1;
          }
          *((unsigned char *)this + 32) = Varint64Fallback != 0;
          break;
        default:
          goto LABEL_24;
      }
    }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_7;
    }
LABEL_24:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::NonMaximumSuppressionLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  float v6 = *(float *)(this + 16);
  if (v6 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v6, a3);
  }
  float v7 = *(float *)(v5 + 20);
  if (v7 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  unint64_t v8 = *(void *)(v5 + 24);
  if (v8) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(3, v8, a2, a4);
  }
  if (*(unsigned char *)(v5 + 32))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(4, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppressionLayerParams::ByteSizeLong(CoreML::Specification::NonMaximumSuppressionLayerParams *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) != 0.0) {
    v1 += 5;
  }
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = v1 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    uint64_t v1 = v3 + 1;
  }
  if (*((unsigned char *)this + 32)) {
    v1 += 2;
  }
  *((_DWORD *)this + 9) = v1;
  return v1;
}

uint64_t CoreML::Specification::NonMaximumSuppressionLayerParams::IsInitialized(CoreML::Specification::NonMaximumSuppressionLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::NonMaximumSuppressionLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppressionLayerParams");
}

CoreML::Specification::ClampedReLULayerParams *CoreML::Specification::ClampedReLULayerParams::ClampedReLULayerParams(CoreML::Specification::ClampedReLULayerParams *this)
{
  *(void *)this = &unk_26D764D58;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ClampedReLULayerParams *)&CoreML::Specification::_ClampedReLULayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_223FB0AE8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ClampedReLULayerParams::~ClampedReLULayerParams(CoreML::Specification::ClampedReLULayerParams *this)
{
  *(void *)this = &unk_26D764D58;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764D58;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ClampedReLULayerParams::New(CoreML::Specification::ClampedReLULayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB0BF8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ClampedReLULayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ClampedReLULayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ClampedReLULayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ClampedReLULayerParams::MergePartialFromCodedStream(CoreML::Specification::ClampedReLULayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 2) {
        break;
      }
      if (v7 >> 3 != 1 || v7 != 13) {
        goto LABEL_20;
      }
      unsigned int v18 = 0;
      unsigned int v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18)) {
          return 0;
        }
        unsigned int v11 = v18;
      }
      else
      {
        unsigned int v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 21) {
      goto LABEL_20;
    }
    unsigned int v17 = 0;
    unsigned int v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      unsigned int v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17)) {
      return 0;
    }
    unsigned int v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::ClampedReLULayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  float v5 = *(float *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  float v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::ClampedReLULayerParams::ByteSizeLong(CoreML::Specification::ClampedReLULayerParams *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) != 0.0) {
    v1 += 5;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::ClampedReLULayerParams::IsInitialized(CoreML::Specification::ClampedReLULayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ClampedReLULayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ClampedReLULayerParams");
}

CoreML::Specification::ArgSortLayerParams *CoreML::Specification::ArgSortLayerParams::ArgSortLayerParams(CoreML::Specification::ArgSortLayerParams *this)
{
  *(void *)this = &unk_26D764DF0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ArgSortLayerParams *)&CoreML::Specification::_ArgSortLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_223FB0EB4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArgSortLayerParams::~ArgSortLayerParams(CoreML::Specification::ArgSortLayerParams *this)
{
  *(void *)this = &unk_26D764DF0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764DF0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ArgSortLayerParams::default_instance(CoreML::Specification::ArgSortLayerParams *this)
{
  return &CoreML::Specification::_ArgSortLayerParams_default_instance_;
}

void CoreML::Specification::ArgSortLayerParams::New(CoreML::Specification::ArgSortLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB0FE4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArgSortLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgSortLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::ArgSortLayerParams::Clear(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArgSortLayerParams::MergePartialFromCodedStream(CoreML::Specification::ArgSortLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        float v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        unsigned int v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((unsigned char *)this + 24) = Varint64Fallback != 0;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unint64_t v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = v10 + 1;
      }
      *((void *)this + 2) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArgSortLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  if (*(unsigned char *)(v5 + 24))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::ArgSortLayerParams::ByteSizeLong(CoreML::Specification::ArgSortLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v3 = v2 + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24)) {
    v3 += 2;
  }
  *((_DWORD *)this + 7) = v3;
  return v3;
}

uint64_t CoreML::Specification::ArgSortLayerParams::IsInitialized(CoreML::Specification::ArgSortLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::ArgSortLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArgSortLayerParams");
}

CoreML::Specification::SliceBySizeLayerParams *CoreML::Specification::SliceBySizeLayerParams::SliceBySizeLayerParams(CoreML::Specification::SliceBySizeLayerParams *this)
{
  *(void *)this = &unk_26D764E88;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SliceBySizeLayerParams *)&CoreML::Specification::_SliceBySizeLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_223FB129C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SliceBySizeLayerParams::~SliceBySizeLayerParams(CoreML::Specification::SliceBySizeLayerParams *this)
{
  *(void *)this = &unk_26D764E88;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764E88;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SliceBySizeLayerParams::New(CoreML::Specification::SliceBySizeLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB13AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SliceBySizeLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceBySizeLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::SliceBySizeLayerParams::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SliceBySizeLayerParams::MergePartialFromCodedStream(CoreML::Specification::SliceBySizeLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 3) {
          break;
        }
        if (v7 != 24) {
          goto LABEL_20;
        }
        unsigned int v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((void *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 2 || v7 != 16) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unint64_t v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = v10 + 1;
      }
      *((void *)this + 2) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SliceBySizeLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(3, v7, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::SliceBySizeLayerParams::ByteSizeLong(CoreML::Specification::SliceBySizeLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::SliceBySizeLayerParams::IsInitialized(CoreML::Specification::SliceBySizeLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::SliceBySizeLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SliceBySizeLayerParams");
}

CoreML::Specification::NeuralNetworkClassifier *CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(CoreML::Specification::NeuralNetworkClassifier *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(void *)this = &unk_26D764F20;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 7) = 0;
  if (this != (CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 12) = 0;
  return this;
}

void sub_223FB1690(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier(CoreML::Specification::NeuralNetworkClassifier *this)
{
  *(void *)this = &unk_26D764F20;
  CoreML::Specification::NeuralNetworkClassifier::SharedDtor(this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::NeuralNetworkClassifier::SharedDtor(void *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = this[8];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  if ((uint64_t *)v1 != &CoreML::Specification::_NeuralNetworkClassifier_default_instance_)
  {
    this = *(void **)(v1 + 72);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 100))
  {
    return (void *)CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels(v1);
  }
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 100);
  if (v2 == 101 || v2 == 100)
  {
    this = *(void *)(this + 88);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 100) = 0;
  return this;
}

uint64_t *CoreML::Specification::NeuralNetworkClassifier::default_instance(CoreML::Specification::NeuralNetworkClassifier *this)
{
  return &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
}

void CoreML::Specification::NeuralNetworkClassifier::New(CoreML::Specification::NeuralNetworkClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB1900(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406D9865E1);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::Clear(CoreML::Specification::NeuralNetworkClassifier *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (CoreML::Specification::NeuralNetworkLayer **)(*((void *)this + 4) + 8);
    do
    {
      unint64_t v4 = *v3++;
      CoreML::Specification::NeuralNetworkLayer::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::NeuralNetworkPreprocessing::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  uint64_t v8 = *((void *)this + 8);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
  }
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 64);
  unint64_t v6 = (char *)this + 40;
  uint64_t v7 = (char *)this + 16;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = *(unsigned __int8 **)a2;
          unint64_t v9 = *((void *)a2 + 1);
          if (*(void *)a2 >= v9)
          {
            uint64_t v11 = 0;
          }
          else
          {
            unsigned int v10 = v8 + 1;
            uint64_t v11 = *v8;
            if ((char)*v8 >= 1)
            {
              *(void *)a2 = v10;
              unint64_t v12 = v11 | 0x100000000;
              if ((v12 & 0x100000000) == 0) {
                goto LABEL_9;
              }
              goto LABEL_17;
            }
            if ((unint64_t)v10 < v9)
            {
              int v13 = *v10;
              if ((v11 & ~v13) >= 0x80)
              {
                *(void *)a2 = v8 + 2;
                unint64_t v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
                goto LABEL_17;
              }
            }
          }
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
          unint64_t v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v12 & 0x100000000) == 0) {
            goto LABEL_9;
          }
LABEL_17:
          unsigned int v16 = v12 >> 3;
          if (v12 >> 3 > 0x63) {
            break;
          }
          switch(v16)
          {
            case 1u:
              if (v12 != 10) {
                goto LABEL_9;
              }
              unsigned int v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((uint64_t)v7);
              unsigned int v18 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
              {
                int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0) {
                  return 0;
                }
              }
              else
              {
                int VarintSizeAsIntFallback = *v18;
                *(void *)a2 = v18 + 1;
              }
              unint64_t v39 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
              if ((v39 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v41 = v39;
              uint64_t result = CoreML::Specification::NeuralNetworkLayer::MergePartialFromCodedStream(v17, a2, v40);
              if (!result) {
                return result;
              }
              goto LABEL_83;
            case 2u:
              if (v12 != 18) {
                goto LABEL_9;
              }
              uint64_t v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((uint64_t)v6);
              unint64_t v24 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v24 < 0)
              {
                int v25 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v25 < 0) {
                  return 0;
                }
              }
              else
              {
                int v25 = *v24;
                *(void *)a2 = v24 + 1;
              }
              unint64_t v42 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v25);
              if ((v42 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v41 = v42;
              uint64_t result = CoreML::Specification::NeuralNetworkPreprocessing::MergePartialFromCodedStream(v23, (char **)a2, v43);
              if (!result) {
                return result;
              }
              goto LABEL_83;
            case 5u:
              if (v12 != 40) {
                goto LABEL_9;
              }
              char v26 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1))
              {
                int v27 = 0;
              }
              else
              {
                int v27 = *v26;
                if ((*v26 & 0x80000000) == 0)
                {
                  *(void *)a2 = v26 + 1;
                  goto LABEL_90;
                }
              }
              Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v27);
              int v27 = Varint32Fallback;
              if (Varint32Fallback < 0) {
                return 0;
              }
LABEL_90:
              *((_DWORD *)this + 20) = v27;
              continue;
            case 6u:
              if (v12 != 48) {
                goto LABEL_9;
              }
              uint64_t v28 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1))
              {
                int v29 = 0;
              }
              else
              {
                int v29 = *v28;
                if ((*v28 & 0x80000000) == 0)
                {
                  *(void *)a2 = v28 + 1;
                  goto LABEL_93;
                }
              }
              uint64_t v51 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v29);
              int v29 = v51;
              if (v51 < 0) {
                return 0;
              }
LABEL_93:
              *((_DWORD *)this + 21) = v29;
              break;
            case 0xAu:
              if (v12 != 82) {
                goto LABEL_9;
              }
              int v30 = (CoreML::Specification::NetworkUpdateParameters *)*((void *)this + 9);
              if (!v30) {
                operator new();
              }
              unsigned int v31 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v31 < 0)
              {
                int v32 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v32 < 0) {
                  return 0;
                }
              }
              else
              {
                int v32 = *v31;
                *(void *)a2 = v31 + 1;
              }
              unint64_t v44 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v32);
              if ((v44 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v41 = v44;
              uint64_t result = CoreML::Specification::NetworkUpdateParameters::MergePartialFromCodedStream(v30, a2, v45);
              if (!result) {
                return result;
              }
              goto LABEL_83;
            default:
              goto LABEL_9;
          }
        }
        if (v16 != 100) {
          break;
        }
        if (v12 == 34)
        {
          if (*((_DWORD *)this + 25) != 100)
          {
            CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 25) = 100;
            operator new();
          }
          uint64_t v33 = (CoreML::Specification::StringVector *)*((void *)this + 11);
          unsigned int v35 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v35 < 0)
          {
            int v36 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v36 < 0) {
              return 0;
            }
          }
          else
          {
            int v36 = *v35;
            *(void *)a2 = v35 + 1;
          }
          unint64_t v46 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v36);
          if ((v46 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v41 = v46;
          uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v33, (char **)a2, v47);
          if (!result) {
            return result;
          }
          goto LABEL_83;
        }
LABEL_9:
        if (v12) {
          BOOL v14 = (v12 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14) {
          return 1;
        }
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v12, a3) & 1) == 0)return 0; {
      }
        }
      if (v16 != 101) {
        break;
      }
      if (v12 != 42) {
        goto LABEL_9;
      }
      if (*((_DWORD *)this + 25) != 101)
      {
        CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 25) = 101;
        operator new();
      }
      unsigned int v34 = (CoreML::Specification::Int64Vector *)*((void *)this + 11);
      uint64_t v37 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v37 < 0)
      {
        int v38 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v38 < 0) {
          return 0;
        }
      }
      else
      {
        int v38 = *v37;
        *(void *)a2 = v37 + 1;
      }
      unint64_t v48 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v38);
      if ((v48 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v41 = v48;
      uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v34, (char **)a2, v49);
      if (!result) {
        return result;
      }
LABEL_83:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v41)) {
        return 0;
      }
    }
    if (v16 != 200 || v12 != 66) {
      goto LABEL_9;
    }
    if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5);
    if (!result) {
      return result;
    }
    unsigned int v21 = *v5;
    if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
      size = (const char *)(*v5)->__r_.__value_.__l.__size_;
    }
    else
    {
      size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
    }
  }
  while (_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v21, size, 0, (uint64_t)"CoreML.Specification.NeuralNetworkClassifier.labelProbabilityLayerName"));
  return 0;
}

void sub_223FB1F70(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::SerializeWithCachedSizes(CoreML::Specification::NeuralNetworkClassifier *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  int v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (int j = 0; j != v8; ++j)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(void *)(*((void *)this + 7) + 8 * j + 8), a2, a4);
  }
  signed int v10 = *((_DWORD *)this + 20);
  if (v10) {
    _tc_google::protobuf::internal::WireFormatLite::WriteInt32(5, v10, a2, a4);
  }
  signed int v11 = *((_DWORD *)this + 21);
  if (v11) {
    _tc_google::protobuf::internal::WireFormatLite::WriteInt32(6, v11, a2, a4);
  }
  if (this != (CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_)
  {
    uint64_t v12 = *((void *)this + 9);
    if (v12) {
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, v12, a2, a4);
    }
  }
  int v13 = *((_DWORD *)this + 25);
  if (v13 == 100)
  {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *((void *)this + 11), a2, a4);
    int v13 = *((_DWORD *)this + 25);
  }
  if (v13 == 101) {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, *((void *)this + 11), a2, a4);
  }
  uint64_t result = *((void *)this + 8);
  if (*(char *)(result + 23) < 0)
  {
    char v15 = *(const char **)(result + 8);
    if (!v15) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else
  {
    char v15 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      return result;
    }
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v15, 1, (uint64_t)"CoreML.Specification.NeuralNetworkClassifier.labelProbabilityLayerName");
  uint64_t v16 = *((void *)this + 8);
  return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(200, v16, a2);
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(CoreML::Specification::NeuralNetworkClassifier *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::NeuralNetworkLayer::ByteSizeLong(*(CoreML::Specification::NeuralNetworkLayer **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if (v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = CoreML::Specification::NeuralNetworkPreprocessing::ByteSizeLong(*(CoreML::Specification::NeuralNetworkPreprocessing **)(*((void *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v11;
  }
  v7 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_14:
  if (this != (CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_)
  {
    int v13 = (CoreML::Specification::NetworkUpdateParameters *)*((void *)this + 9);
    if (v13)
    {
      uint64_t v14 = CoreML::Specification::NetworkUpdateParameters::ByteSizeLong(v13);
      v7 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  uint64_t v15 = 11;
  int v16 = *((_DWORD *)this + 20);
  int v17 = *((_DWORD *)this + 21);
  uint64_t v18 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v16 >= 0) {
    uint64_t v15 = v18;
  }
  uint64_t v19 = v15 + v7;
  if (!v16) {
    uint64_t v19 = v7;
  }
  uint64_t v20 = 11;
  uint64_t v21 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v17 >= 0) {
    uint64_t v20 = v21;
  }
  uint64_t v22 = v20 + v19;
  if (v17) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v19;
  }
  int v24 = *((_DWORD *)this + 25);
  if (v24 == 101)
  {
    uint64_t v25 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 11));
    goto LABEL_32;
  }
  if (v24 == 100)
  {
    uint64_t v25 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 11));
LABEL_32:
    v23 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 24) = v23;
  return v23;
}

void CoreML::Specification::NeuralNetworkClassifier::MergeFrom(CoreML::Specification::NeuralNetworkClassifier *this, const CoreML::Specification::NeuralNetworkClassifier *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::NeuralNetworkLayer **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetworkClassifier *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::NeuralNetworkLayer **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    uint64_t v9 = (signed int *)*((void *)this + 4);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (CoreML::Specification::NeuralNetworkPreprocessing **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetworkClassifier *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    signed int v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    uint64_t v14 = (signed int *)*((void *)this + 7);
    if (*v14 < v13) {
      signed int *v14 = v13;
    }
  }
  uint64_t v15 = *((void *)a2 + 8);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_17;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_17;
  }
  int v16 = (uint64_t *)*((void *)this + 8);
  if (v16 != (uint64_t *)v15)
  {
    if (v16 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    std::string::operator=(*((std::string **)this + 8), (const std::string *)v15);
  }
LABEL_17:
  if (a2 != (const CoreML::Specification::NeuralNetworkClassifier *)&CoreML::Specification::_NeuralNetworkClassifier_default_instance_
    && *((void *)a2 + 9))
  {
    int v17 = (std::string *)*((void *)this + 9);
    if (!v17) {
      operator new();
    }
    CoreML::Specification::NetworkUpdateParameters::MergeFrom(v17, *((const CoreML::Specification::NetworkUpdateParameters **)a2 + 9));
  }
  int v18 = *((_DWORD *)a2 + 20);
  if (v18) {
    *((_DWORD *)this + 20) = v18;
  }
  int v19 = *((_DWORD *)a2 + 21);
  if (v19) {
    *((_DWORD *)this + 21) = v19;
  }
  int v20 = *((_DWORD *)a2 + 25);
  if (v20 == 101)
  {
    if (*((_DWORD *)this + 25) != 101)
    {
      CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 25) = 101;
      operator new();
    }
    uint64_t v22 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 11);
    int v24 = (unint64_t *)*((void *)this + 11);
    CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v24, v22);
  }
  else if (v20 == 100)
  {
    if (*((_DWORD *)this + 25) != 100)
    {
      CoreML::Specification::NeuralNetworkClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 25) = 100;
      operator new();
    }
    uint64_t v21 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 11);
    uint64_t v23 = (std::string *)*((void *)this + 11);
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v23, v21);
  }
}

void sub_223FB267C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkClassifier::IsInitialized(CoreML::Specification::NeuralNetworkClassifier *this)
{
  return 1;
}

void *CoreML::Specification::NeuralNetworkClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetworkClassifier");
}

CoreML::Specification::OneHotLayerParams *CoreML::Specification::OneHotLayerParams::OneHotLayerParams(CoreML::Specification::OneHotLayerParams *this)
{
  *(void *)this = &unk_26D764FB8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::OneHotLayerParams *)&CoreML::Specification::_OneHotLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_223FB2748(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::OneHotLayerParams::~OneHotLayerParams(CoreML::Specification::OneHotLayerParams *this)
{
  *(void *)this = &unk_26D764FB8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D764FB8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::OneHotLayerParams::New(CoreML::Specification::OneHotLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB2858(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40594C3D85);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::OneHotLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotLayerParams>);
  }
  return result;
}

void *CoreML::Specification::OneHotLayerParams::Clear(void *this)
{
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

BOOL CoreML::Specification::OneHotLayerParams::MergePartialFromCodedStream(CoreML::Specification::OneHotLayerParams *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_24;
      }
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 8) {
            goto LABEL_24;
          }
          uint64_t v9 = *a2;
          if (*a2 >= a2[1] || *v9 < 0)
          {
            *((void *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v17 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            *((void *)this + 2) = *v9;
            *a2 = v9 + 1;
          }
          continue;
        case 2u:
          if (v7 != 16) {
            goto LABEL_24;
          }
          unsigned int v10 = *a2;
          if (*a2 >= a2[1] || *v10 < 0)
          {
            unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v18 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v10;
            *a2 = v10 + 1;
          }
          *((void *)this + 3) = Varint64Fallback;
          break;
        case 3u:
          if (v7 != 29) {
            goto LABEL_24;
          }
          unsigned int v21 = 0;
          uint64_t v12 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v21);
            if (!result) {
              return result;
            }
            unsigned int v13 = v21;
          }
          else
          {
            unsigned int v13 = *v12;
            *a2 = (char *)(v12 + 1);
          }
          *((_DWORD *)this + 8) = v13;
          continue;
        case 4u:
          if (v7 != 37) {
            goto LABEL_24;
          }
          unsigned int v20 = 0;
          uint64_t v14 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v20);
            if (!result) {
              return result;
            }
            unsigned int v15 = v20;
          }
          else
          {
            unsigned int v15 = *v14;
            *a2 = (char *)(v14 + 1);
          }
          *((_DWORD *)this + 9) = v15;
          continue;
        default:
          goto LABEL_24;
      }
    }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_7;
    }
LABEL_24:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::OneHotLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  float v8 = *(float *)(v5 + 32);
  if (v8 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v8, a3);
  }
  float v9 = *(float *)(v5 + 36);
  if (v9 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)4, a2, v9, a3);
  }
  return this;
}

unint64_t CoreML::Specification::OneHotLayerParams::ByteSizeLong(CoreML::Specification::OneHotLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  if (*((float *)this + 8) != 0.0) {
    v4 += 5;
  }
  if (*((float *)this + 9) != 0.0) {
    v4 += 5;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::OneHotLayerParams::IsInitialized(CoreML::Specification::OneHotLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::OneHotLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.OneHotLayerParams");
}

CoreML::Specification::CumSumLayerParams *CoreML::Specification::CumSumLayerParams::CumSumLayerParams(CoreML::Specification::CumSumLayerParams *this)
{
  *(void *)this = &unk_26D765050;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CumSumLayerParams *)&CoreML::Specification::_CumSumLayerParams_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_WORD *)this + 12) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_223FB2C38(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CumSumLayerParams::~CumSumLayerParams(CoreML::Specification::CumSumLayerParams *this)
{
  *(void *)this = &unk_26D765050;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D765050;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::CumSumLayerParams::New(CoreML::Specification::CumSumLayerParams *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB2D48(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C400751EDB2);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CumSumLayerParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CumSumLayerParams>);
  }
  return result;
}

uint64_t CoreML::Specification::CumSumLayerParams::Clear(uint64_t this)
{
  *(_WORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CumSumLayerParams::MergePartialFromCodedStream(CoreML::Specification::CumSumLayerParams *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v5 = *a2;
          if (*a2 >= a2[1])
          {
            uint64_t v6 = 0;
LABEL_6:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
            unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0) {
              goto LABEL_25;
            }
            goto LABEL_7;
          }
          uint64_t v6 = *v5;
          if (*v5 < 1) {
            goto LABEL_6;
          }
          *a2 = v5 + 1;
          unint64_t v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_25;
          }
LABEL_7:
          unsigned int v9 = v7 >> 3;
          if (v7 >> 3 != 3) {
            break;
          }
          if (v7 != 24) {
            goto LABEL_25;
          }
          unsigned int v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v19 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v13;
            *a2 = v13 + 1;
          }
          *((unsigned char *)this + 25) = Varint64Fallback != 0;
        }
        if (v9 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_25;
        }
        unsigned int v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v20 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = v15 + 1;
        }
        *((unsigned char *)this + 24) = v16 != 0;
      }
      if (v9 != 1 || v7 != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unint64_t v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v12 = *v11;
        *a2 = v11 + 1;
      }
      *((void *)this + 2) = v12;
    }
LABEL_25:
    if (v7) {
      BOOL v17 = (v7 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CumSumLayerParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  if (*(unsigned char *)(v5 + 24)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(2, 1u, a2, a4);
  }
  if (*(unsigned char *)(v5 + 25))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(3, 1u, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::CumSumLayerParams::ByteSizeLong(CoreML::Specification::CumSumLayerParams *this)
{
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v3 = v2 + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24)) {
    v3 += 2;
  }
  if (*((unsigned char *)this + 25)) {
    v3 += 2;
  }
  *((_DWORD *)this + 7) = v3;
  return v3;
}

uint64_t CoreML::Specification::CumSumLayerParams::IsInitialized(CoreML::Specification::CumSumLayerParams *this)
{
  return 1;
}

void *CoreML::Specification::CumSumLayerParams::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CumSumLayerParams");
}

CoreML::Specification::NeuralNetworkRegressor *CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(CoreML::Specification::NeuralNetworkRegressor *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(void *)this = &unk_26D7650E8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 7) = 0;
  if (this != (CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_223FB309C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor(CoreML::Specification::NeuralNetworkRegressor *this)
{
  *(void *)this = &unk_26D7650E8;
  if (this != (CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_)
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::NeuralNetworkRegressor::default_instance(CoreML::Specification::NeuralNetworkRegressor *this)
{
  return &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
}

void CoreML::Specification::NeuralNetworkRegressor::New(CoreML::Specification::NeuralNetworkRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB3218(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkRegressor::Clear(CoreML::Specification::NeuralNetworkRegressor *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (CoreML::Specification::NeuralNetworkLayer **)(*((void *)this + 4) + 8);
    do
    {
      unint64_t v4 = *v3++;
      CoreML::Specification::NeuralNetworkLayer::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::NeuralNetworkPreprocessing::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  uint64_t v10 = *((void *)this + 8);
  unsigned int v9 = (void *)((char *)this + 64);
  uint64_t result = v10;
  if (v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  void *v9 = 0;
  v9[1] = 0;
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkRegressor *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 40;
  unint64_t v6 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v8 = 0;
LABEL_7:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_8;
          }
          unint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((uint64_t)v6);
          unsigned int v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          unint64_t v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v25 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v27 = v25;
          uint64_t result = CoreML::Specification::NeuralNetworkLayer::MergePartialFromCodedStream(v12, (_tc_google::protobuf::io::CodedInputStream *)a2, v26);
          if (!result) {
            return result;
          }
          goto LABEL_48;
        case 2u:
          if (v9 != 18) {
            goto LABEL_8;
          }
          unsigned int v15 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((uint64_t)v5);
          unint64_t v16 = *a2;
          if (*a2 >= a2[1] || *v16 < 0)
          {
            int v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v17 < 0) {
              return 0;
            }
          }
          else
          {
            int v17 = *v16;
            *a2 = v16 + 1;
          }
          unint64_t v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
          if ((v29 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v27 = v29;
          uint64_t result = CoreML::Specification::NeuralNetworkPreprocessing::MergePartialFromCodedStream(v15, a2, v30);
          if (!result) {
            return result;
          }
          goto LABEL_48;
        case 5u:
          if (v9 != 40) {
            goto LABEL_8;
          }
          char v18 = *a2;
          if (*a2 >= a2[1])
          {
            int v19 = 0;
          }
          else
          {
            int v19 = *v18;
            if ((*v18 & 0x80000000) == 0)
            {
              *a2 = v18 + 1;
              goto LABEL_52;
            }
          }
          Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
          int v19 = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
LABEL_52:
          *((_DWORD *)this + 18) = v19;
          continue;
        case 6u:
          if (v9 != 48) {
            goto LABEL_8;
          }
          char v20 = *a2;
          if (*a2 >= a2[1])
          {
            int v21 = 0;
          }
          else
          {
            int v21 = *v20;
            if ((*v20 & 0x80000000) == 0)
            {
              *a2 = v20 + 1;
              goto LABEL_55;
            }
          }
          uint64_t v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
          int v21 = v34;
          if (v34 < 0) {
            return 0;
          }
LABEL_55:
          *((_DWORD *)this + 19) = v21;
          break;
        case 0xAu:
          if (v9 != 82) {
            goto LABEL_8;
          }
          uint64_t v22 = (CoreML::Specification::NetworkUpdateParameters *)*((void *)this + 8);
          if (!v22) {
            operator new();
          }
          uint64_t v23 = *a2;
          if (*a2 >= a2[1] || *v23 < 0)
          {
            int v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v24 < 0) {
              return 0;
            }
          }
          else
          {
            int v24 = *v23;
            *a2 = v23 + 1;
          }
          unint64_t v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
          if ((v31 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v27 = v31;
          uint64_t result = CoreML::Specification::NetworkUpdateParameters::MergePartialFromCodedStream(v22, (_tc_google::protobuf::io::CodedInputStream *)a2, v32);
          if (!result) {
            return result;
          }
LABEL_48:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v27))return 0; {
          continue;
          }
        default:
          goto LABEL_8;
      }
    }
    uint64_t v8 = *v7;
    if (*v7 < 1) {
      goto LABEL_7;
    }
    *a2 = v7 + 1;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_14;
    }
LABEL_8:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB360C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkRegressor::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  int v8 = *(_DWORD *)(v5 + 48);
  if (v8)
  {
    for (int j = 0; j != v8; ++j)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 56) + 8 * j + 8), a2, a4);
  }
  signed int v10 = *(_DWORD *)(v5 + 72);
  if (v10) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(5, v10, a2, a4);
  }
  signed int v11 = *(_DWORD *)(v5 + 76);
  if (v11) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(6, v11, a2, a4);
  }
  if ((uint64_t *)v5 != &CoreML::Specification::_NeuralNetworkRegressor_default_instance_)
  {
    uint64_t v12 = *(void *)(v5 + 64);
    if (v12)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, v12, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(CoreML::Specification::NeuralNetworkRegressor *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::NeuralNetworkLayer::ByteSizeLong(*(CoreML::Specification::NeuralNetworkLayer **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if (v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = CoreML::Specification::NeuralNetworkPreprocessing::ByteSizeLong(*(CoreML::Specification::NeuralNetworkPreprocessing **)(*((void *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  if (this != (CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_)
  {
    signed int v10 = (CoreML::Specification::NetworkUpdateParameters *)*((void *)this + 8);
    if (v10)
    {
      uint64_t v11 = CoreML::Specification::NetworkUpdateParameters::ByteSizeLong(v10);
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  uint64_t v12 = 11;
  int v13 = *((_DWORD *)this + 18);
  int v14 = *((_DWORD *)this + 19);
  uint64_t v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v13 >= 0) {
    uint64_t v12 = v15;
  }
  uint64_t v16 = v12 + v7;
  if (!v13) {
    uint64_t v16 = v7;
  }
  uint64_t v17 = 11;
  uint64_t v18 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v14 >= 0) {
    uint64_t v17 = v18;
  }
  uint64_t v19 = v17 + v16;
  if (v14) {
    uint64_t result = v19;
  }
  else {
    uint64_t result = v16;
  }
  *((_DWORD *)this + 20) = result;
  return result;
}

void CoreML::Specification::NeuralNetworkRegressor::MergeFrom(CoreML::Specification::NeuralNetworkRegressor *this, const CoreML::Specification::NeuralNetworkRegressor *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::NeuralNetworkLayer **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetworkRegressor *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::NeuralNetworkLayer **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    uint64_t v9 = (signed int *)*((void *)this + 4);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (CoreML::Specification::NeuralNetworkPreprocessing **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetworkRegressor *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    signed int v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    int v14 = (signed int *)*((void *)this + 7);
    if (*v14 < v13) {
      signed int *v14 = v13;
    }
  }
  if (a2 != (const CoreML::Specification::NeuralNetworkRegressor *)&CoreML::Specification::_NeuralNetworkRegressor_default_instance_
    && *((void *)a2 + 8))
  {
    uint64_t v15 = (std::string *)*((void *)this + 8);
    if (!v15) {
      operator new();
    }
    CoreML::Specification::NetworkUpdateParameters::MergeFrom(v15, *((const CoreML::Specification::NetworkUpdateParameters **)a2 + 8));
  }
  int v16 = *((_DWORD *)a2 + 18);
  if (v16) {
    *((_DWORD *)this + 18) = v16;
  }
  int v17 = *((_DWORD *)a2 + 19);
  if (v17) {
    *((_DWORD *)this + 19) = v17;
  }
}

void sub_223FB3A50(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkRegressor::IsInitialized(CoreML::Specification::NeuralNetworkRegressor *this)
{
  return 1;
}

void *CoreML::Specification::NeuralNetworkRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetworkRegressor");
}

CoreML::Specification::NetworkUpdateParameters *CoreML::Specification::NetworkUpdateParameters::NetworkUpdateParameters(CoreML::Specification::NetworkUpdateParameters *this)
{
  *(void *)this = &unk_26D765180;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_223FB3B0C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters(CoreML::Specification::NetworkUpdateParameters *this)
{
  *(void *)this = &unk_26D765180;
  CoreML::Specification::NetworkUpdateParameters::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::NetworkUpdateParameters::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_NetworkUpdateParameters_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[5];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[6];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[7];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    this = (uint64_t *)v1[8];
    if (this)
    {
      unsigned int v5 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v5();
    }
  }
  return this;
}

void CoreML::Specification::NetworkUpdateParameters::New(CoreML::Specification::NetworkUpdateParameters *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB3D10(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NetworkUpdateParameters>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NetworkUpdateParameters>);
  }
  return result;
}

uint64_t CoreML::Specification::NetworkUpdateParameters::Clear(CoreML::Specification::NetworkUpdateParameters *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::LossLayer::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t CoreML::Specification::NetworkUpdateParameters::MergePartialFromCodedStream(CoreML::Specification::NetworkUpdateParameters *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 16;
  while (1)
  {
    uint64_t v6 = *(unsigned __int8 **)a2;
    unint64_t v7 = *((void *)a2 + 1);
    if (*(void *)a2 >= v7)
    {
      uint64_t v9 = 0;
    }
    else
    {
      signed int v8 = v6 + 1;
      uint64_t v9 = *v6;
      if ((char)*v6 >= 1)
      {
        *(void *)a2 = v8;
        unint64_t v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) != 0) {
          goto LABEL_9;
        }
        goto LABEL_55;
      }
      if ((unint64_t)v8 < v7)
      {
        int v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(void *)a2 = v6 + 2;
          unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
LABEL_9:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10) {
                goto LABEL_55;
              }
              uint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LossLayer>::TypeHandler>((uint64_t)v5);
              signed int v13 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
              {
                int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0) {
                  return 0;
                }
              }
              else
              {
                int VarintSizeAsIntFallback = *v13;
                *(void *)a2 = v13 + 1;
              }
              unint64_t v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
              if ((v28 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v26 = v28;
              uint64_t result = CoreML::Specification::LossLayer::MergePartialFromCodedStream(v12, (char **)a2, v29);
              if (!result) {
                return result;
              }
              goto LABEL_51;
            case 2u:
              if (v10 != 18) {
                goto LABEL_55;
              }
              int v16 = (CoreML::Specification::Optimizer *)*((void *)this + 5);
              if (!v16) {
                operator new();
              }
              int v17 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
              {
                int v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v18 < 0) {
                  return 0;
                }
              }
              else
              {
                int v18 = *v17;
                *(void *)a2 = v17 + 1;
              }
              unint64_t v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v18);
              if ((v30 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v26 = v30;
              uint64_t result = CoreML::Specification::Optimizer::MergePartialFromCodedStream(v16, (char **)a2, v31);
              if (!result) {
                return result;
              }
              goto LABEL_51;
            case 3u:
              if (v10 != 26) {
                goto LABEL_55;
              }
              uint64_t v15 = (CoreML::Specification::Int64Parameter *)*((void *)this + 6);
              if (!v15) {
                operator new();
              }
              goto LABEL_27;
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_55;
            case 0xAu:
              if (v10 != 82) {
                goto LABEL_55;
              }
              int v21 = (CoreML::Specification::BoolParameter *)*((void *)this + 7);
              if (!v21) {
                operator new();
              }
              uint64_t v22 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
              {
                int v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v23 < 0) {
                  return 0;
                }
              }
              else
              {
                int v23 = *v22;
                *(void *)a2 = v22 + 1;
              }
              unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v23);
              if ((v32 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v26 = v32;
              uint64_t result = CoreML::Specification::BoolParameter::MergePartialFromCodedStream(v21, (char **)a2, v33);
              if (!result) {
                return result;
              }
LABEL_51:
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26)) {
                return 0;
              }
              continue;
            default:
              if (v10 >> 3 != 20 || v10 != 162) {
                goto LABEL_55;
              }
              uint64_t v15 = (CoreML::Specification::Int64Parameter *)*((void *)this + 8);
              if (!v15) {
                operator new();
              }
LABEL_27:
              uint64_t v19 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
              {
                int v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v20 < 0) {
                  return 0;
                }
              }
              else
              {
                int v20 = *v19;
                *(void *)a2 = v19 + 1;
              }
              unint64_t v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v20);
              if ((v24 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v26 = v24;
              uint64_t result = CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(v15, (char **)a2, v25);
              if (!result) {
                return result;
              }
              goto LABEL_51;
          }
        }
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
    unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v10 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_55:
    if (!v10 || (v10 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB41F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NetworkUpdateParameters::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = (uint64_t *)this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(v5[4] + 8 * i + 8), a2, a4);
  }
  if (v5 != &CoreML::Specification::_NetworkUpdateParameters_default_instance_)
  {
    uint64_t v8 = v5[5];
    if (v8) {
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
    }
    uint64_t v9 = v5[6];
    if (v9) {
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
    }
    uint64_t v10 = v5[7];
    if (v10) {
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, v10, a2, a4);
    }
    uint64_t v11 = v5[8];
    if (v11)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, v11, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::NetworkUpdateParameters::ByteSizeLong(CoreML::Specification::NetworkUpdateParameters *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::LossLayer::ByteSizeLong(*(CoreML::Specification::LossLayer **)(*((void *)this + 4)
                                                                                               + 8 * v3
                                                                                               + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (this != (CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_)
  {
    int v6 = (CoreML::Specification::Optimizer *)*((void *)this + 5);
    if (v6)
    {
      uint64_t v7 = CoreML::Specification::Optimizer::ByteSizeLong(v6);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v8 = (CoreML::Specification::Int64Parameter *)*((void *)this + 6);
    if (v8)
    {
      unint64_t v9 = CoreML::Specification::Int64Parameter::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v10 = (CoreML::Specification::BoolParameter *)*((void *)this + 7);
    if (v10)
    {
      uint64_t v11 = CoreML::Specification::BoolParameter::ByteSizeLong(v10);
      v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v12 = (CoreML::Specification::Int64Parameter *)*((void *)this + 8);
    if (v12)
    {
      unint64_t v13 = CoreML::Specification::Int64Parameter::ByteSizeLong(v12);
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 18) = v4;
  return v4;
}

std::string *CoreML::Specification::Optimizer::MergeFrom(std::string *this, const CoreML::Specification::Optimizer *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 11)
  {
    if (*(_DWORD *)(v3 + 28) != 11)
    {
      CoreML::Specification::Optimizer::clear_OptimizerType(v3);
      *(_DWORD *)(v3 + 28) = 11;
      operator new();
    }
    uint64_t v7 = (const CoreML::Specification::AdamOptimizer *)*((void *)a2 + 2);
    unint64_t v9 = *(std::string **)(v3 + 16);
    return CoreML::Specification::AdamOptimizer::MergeFrom(v9, v7);
  }
  else if (v5 == 10)
  {
    if (*(_DWORD *)(v3 + 28) != 10)
    {
      CoreML::Specification::Optimizer::clear_OptimizerType(v3);
      *(_DWORD *)(v3 + 28) = 10;
      operator new();
    }
    int v6 = (const CoreML::Specification::SGDOptimizer *)*((void *)a2 + 2);
    uint64_t v8 = *(std::string **)(v3 + 16);
    return CoreML::Specification::SGDOptimizer::MergeFrom(v8, v6);
  }
  return this;
}

void sub_223FB460C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NetworkUpdateParameters::IsInitialized(CoreML::Specification::NetworkUpdateParameters *this)
{
  return 1;
}

void *CoreML::Specification::NetworkUpdateParameters::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NetworkUpdateParameters");
}

CoreML::Specification::LossLayer *CoreML::Specification::LossLayer::LossLayer(CoreML::Specification::LossLayer *this)
{
  *(void *)this = &unk_26D765218;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::LossLayer *)&CoreML::Specification::_LossLayer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  return this;
}

void sub_223FB46C8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(std::string *this, const CoreML::Specification::CategoricalCrossEntropyLossLayer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  int v6 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    return this;
  }
  this = (std::string *)v3[1].__r_.__value_.__l.__data_;
  if (this != (std::string *)v7)
  {
    if (this == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return std::string::operator=(this, (const std::string *)v7);
  }
  return this;
}

void CoreML::Specification::LossLayer::~LossLayer(CoreML::Specification::LossLayer *this)
{
  *(void *)this = &unk_26D765218;
  CoreML::Specification::NeuralNetworkPreprocessing::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::LossLayer::~LossLayer(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::LossLayer::New(CoreML::Specification::LossLayer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB48BC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LossLayer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LossLayer>);
  }
  return result;
}

uint64_t CoreML::Specification::LossLayer::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  return CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(this);
}

BOOL CoreML::Specification::LossLayer::MergePartialFromCodedStream(CoreML::Specification::LossLayer *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_26;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_26;
        }
LABEL_8:
        unsigned int v10 = v8 >> 3;
        if (v8 >> 3 == 11)
        {
          if (v8 != 90) {
            goto LABEL_26;
          }
          if (*((_DWORD *)this + 9) != 11)
          {
            CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
            *((_DWORD *)this + 9) = 11;
            operator new();
          }
          uint64_t v15 = (CoreML::Specification::MeanSquaredErrorLossLayer *)*((void *)this + 3);
          int v18 = *a2;
          if (*a2 >= a2[1] || *v18 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v18;
            *a2 = v18 + 1;
          }
          unint64_t v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v22 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v24 = v22;
          BOOL result = CoreML::Specification::MeanSquaredErrorLossLayer::MergePartialFromCodedStream(v15, a2, v23);
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        if (v10 != 10) {
          break;
        }
        if (v8 != 82) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 9) != 10)
        {
          CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          operator new();
        }
        int v16 = (CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((void *)this + 3);
        int v20 = *a2;
        if (*a2 >= a2[1] || *v20 < 0)
        {
          int v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v21 < 0) {
            return 0;
          }
        }
        else
        {
          int v21 = *v20;
          *a2 = v20 + 1;
        }
        unint64_t v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if ((v25 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v24 = v25;
        BOOL result = CoreML::Specification::CategoricalCrossEntropyLossLayer::MergePartialFromCodedStream(v16, a2, v26);
        if (!result) {
          return result;
        }
LABEL_47:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24))return 0; {
      }
        }
      if (v10 != 1 || v8 != 10) {
        break;
      }
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
      if (!result) {
        return result;
      }
      unint64_t v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.LossLayer.name"))return 0; {
    }
      }
LABEL_26:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB4BE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LossLayer::SerializeWithCachedSizes(CoreML::Specification::LossLayer *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v7 = *(const char **)(result + 8);
    if (!v7) {
      goto LABEL_7;
    }
    uint64_t result = *(void *)result;
    goto LABEL_6;
  }
  uint64_t v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.LossLayer.name");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 2), a2);
  }
LABEL_7:
  int v8 = *((_DWORD *)this + 9);
  if (v8 == 10)
  {
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *((void *)this + 3), a2, a4);
    int v8 = *((_DWORD *)this + 9);
  }
  if (v8 == 11)
  {
    uint64_t v9 = *((void *)this + 3);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xB, v9, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::LossLayer::ByteSizeLong(CoreML::Specification::LossLayer *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  int v6 = *((_DWORD *)this + 9);
  if (v6 == 11)
  {
    uint64_t v7 = CoreML::Specification::MeanSquaredErrorLossLayer::ByteSizeLong(*((CoreML::Specification::MeanSquaredErrorLossLayer **)this
                                                                        + 3));
    goto LABEL_12;
  }
  if (v6 == 10)
  {
    uint64_t v7 = CoreML::Specification::CategoricalCrossEntropyLossLayer::ByteSizeLong(*((CoreML::Specification::CategoricalCrossEntropyLossLayer **)this
                                                                               + 3));
LABEL_12:
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

std::string *CoreML::Specification::LossLayer::MergeFrom(std::string *this, const CoreML::Specification::LossLayer *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)(v3 + 16);
  int v6 = *(uint64_t **)(v3 + 16);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 16), (const std::string *)v5);
  }
LABEL_11:
  int v7 = *((_DWORD *)a2 + 9);
  if (v7 == 11)
  {
    if (*(_DWORD *)(v3 + 36) != 11)
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(v3);
      *(_DWORD *)(v3 + 36) = 11;
      operator new();
    }
    int v8 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((void *)a2 + 3);
    uint64_t v9 = *(std::string **)(v3 + 24);
    return CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(v9, v8);
  }
  if (v7 == 10)
  {
    if (*(_DWORD *)(v3 + 36) != 10)
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(v3);
      *(_DWORD *)(v3 + 36) = 10;
      operator new();
    }
    int v8 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((void *)a2 + 3);
    uint64_t v9 = *(std::string **)(v3 + 24);
    return CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(v9, v8);
  }
  return this;
}

void sub_223FB4F54(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LossLayer::IsInitialized(CoreML::Specification::LossLayer *this)
{
  return 1;
}

void *CoreML::Specification::LossLayer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LossLayer");
}

CoreML::Specification::CategoricalCrossEntropyLossLayer *CoreML::Specification::CategoricalCrossEntropyLossLayer::CategoricalCrossEntropyLossLayer(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
  *(void *)this = &unk_26D7652B0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CategoricalCrossEntropyLossLayer *)&CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_223FB5000(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CategoricalCrossEntropyLossLayer::~CategoricalCrossEntropyLossLayer(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
  *(void *)this = &unk_26D7652B0;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D7652B0;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::CategoricalCrossEntropyLossLayer::default_instance(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
  return &CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_;
}

void CoreML::Specification::CategoricalCrossEntropyLossLayer::New(CoreML::Specification::CategoricalCrossEntropyLossLayer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB5148(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CategoricalCrossEntropyLossLayer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalCrossEntropyLossLayer>);
  }
  return result;
}

uint64_t CoreML::Specification::CategoricalCrossEntropyLossLayer::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(this + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  return this;
}

BOOL CoreML::Specification::CategoricalCrossEntropyLossLayer::MergePartialFromCodedStream(CoreML::Specification::CategoricalCrossEntropyLossLayer *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (std::string **)((char *)this + 24);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      int v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        goto LABEL_25;
      }
LABEL_8:
      if (v8 >> 3 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_25;
      }
      if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v4);
      if (!result) {
        return result;
      }
      uint64_t v12 = *v4;
      if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        size = (const char *)(*v4)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v15 = "CoreML.Specification.CategoricalCrossEntropyLossLayer.target";
LABEL_35:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v12, size, 0, (uint64_t)v15))return 0; {
    }
      }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
      if (!result) {
        return result;
      }
      uint64_t v12 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v15 = "CoreML.Specification.CategoricalCrossEntropyLossLayer.input";
      goto LABEL_35;
    }
LABEL_25:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::CategoricalCrossEntropyLossLayer::SerializeWithCachedSizes(CoreML::Specification::CategoricalCrossEntropyLossLayer *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (_tc_google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v4 + 23) < 0)
  {
    uint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_tc_google::protobuf::internal **)v4;
    goto LABEL_6;
  }
  uint64_t v5 = (const char *)*((unsigned __int8 *)v4 + 23);
  if (*((unsigned char *)v4 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.CategoricalCrossEntropyLossLayer.input");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t result = *((void *)this + 3);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v7 = *(const char **)(result + 8);
    if (!v7) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else
  {
    uint64_t v7 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      return result;
    }
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.CategoricalCrossEntropyLossLayer.target");
  uint64_t v8 = *((void *)this + 3);
  return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, v8, a2);
}

uint64_t CoreML::Specification::CategoricalCrossEntropyLossLayer::ByteSizeLong(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v6;
  }
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::CategoricalCrossEntropyLossLayer::IsInitialized(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
  return 1;
}

void *CoreML::Specification::CategoricalCrossEntropyLossLayer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalCrossEntropyLossLayer");
}

CoreML::Specification::MeanSquaredErrorLossLayer *CoreML::Specification::MeanSquaredErrorLossLayer::MeanSquaredErrorLossLayer(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
  *(void *)this = &unk_26D765348;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MeanSquaredErrorLossLayer *)&CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_223FB5588(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::MeanSquaredErrorLossLayer::~MeanSquaredErrorLossLayer(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
  *(void *)this = &unk_26D765348;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D765348;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::MeanSquaredErrorLossLayer::default_instance(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
  return &CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_;
}

void CoreML::Specification::MeanSquaredErrorLossLayer::New(CoreML::Specification::MeanSquaredErrorLossLayer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB56D0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::MeanSquaredErrorLossLayer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MeanSquaredErrorLossLayer>);
  }
  return result;
}

uint64_t CoreML::Specification::MeanSquaredErrorLossLayer::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(this + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  return this;
}

BOOL CoreML::Specification::MeanSquaredErrorLossLayer::MergePartialFromCodedStream(CoreML::Specification::MeanSquaredErrorLossLayer *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (std::string **)((char *)this + 24);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        goto LABEL_25;
      }
LABEL_8:
      if (v8 >> 3 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_25;
      }
      if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v4);
      if (!result) {
        return result;
      }
      uint64_t v12 = *v4;
      if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        size = (const char *)(*v4)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v15 = "CoreML.Specification.MeanSquaredErrorLossLayer.target";
LABEL_35:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v12, size, 0, (uint64_t)v15))return 0; {
    }
      }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
      if (!result) {
        return result;
      }
      uint64_t v12 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v15 = "CoreML.Specification.MeanSquaredErrorLossLayer.input";
      goto LABEL_35;
    }
LABEL_25:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::MeanSquaredErrorLossLayer::SerializeWithCachedSizes(CoreML::Specification::MeanSquaredErrorLossLayer *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (_tc_google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v4 + 23) < 0)
  {
    uint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_tc_google::protobuf::internal **)v4;
    goto LABEL_6;
  }
  uint64_t v5 = (const char *)*((unsigned __int8 *)v4 + 23);
  if (*((unsigned char *)v4 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.MeanSquaredErrorLossLayer.input");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t result = *((void *)this + 3);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v7 = *(const char **)(result + 8);
    if (!v7) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else
  {
    uint64_t v7 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      return result;
    }
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.MeanSquaredErrorLossLayer.target");
  uint64_t v8 = *((void *)this + 3);
  return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, v8, a2);
}

uint64_t CoreML::Specification::MeanSquaredErrorLossLayer::ByteSizeLong(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v6;
  }
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MeanSquaredErrorLossLayer::IsInitialized(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
  return 1;
}

void *CoreML::Specification::MeanSquaredErrorLossLayer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MeanSquaredErrorLossLayer");
}

CoreML::Specification::Optimizer *CoreML::Specification::Optimizer::Optimizer(CoreML::Specification::Optimizer *this)
{
  *(void *)this = &unk_26D7653E0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_223FB5B04(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SGDOptimizer::MergeFrom(std::string *this, const CoreML::Specification::SGDOptimizer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::SGDOptimizer *)&CoreML::Specification::_SGDOptimizer_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      uint64_t v5 = (std::string *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = CoreML::Specification::DoubleParameter::MergeFrom(v5, *((const CoreML::Specification::DoubleParameter **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      if (!data) {
        operator new();
      }
      this = CoreML::Specification::Int64Parameter::MergeFrom(data, *((const CoreML::Specification::Int64Parameter **)a2 + 3));
    }
    if (*((void *)a2 + 4))
    {
      if (!v3[1].__r_.__value_.__l.__size_) {
        operator new();
      }
      uint64_t v7 = (const CoreML::Specification::DoubleParameter *)*((void *)a2 + 4);
      size = (std::string *)v3[1].__r_.__value_.__l.__size_;
      return CoreML::Specification::DoubleParameter::MergeFrom(size, v7);
    }
  }
  return this;
}

void sub_223FB5C6C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::AdamOptimizer::MergeFrom(std::string *this, const CoreML::Specification::AdamOptimizer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::AdamOptimizer *)&CoreML::Specification::_AdamOptimizer_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      uint64_t v5 = (std::string *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = CoreML::Specification::DoubleParameter::MergeFrom(v5, *((const CoreML::Specification::DoubleParameter **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      if (!data) {
        operator new();
      }
      this = CoreML::Specification::Int64Parameter::MergeFrom(data, *((const CoreML::Specification::Int64Parameter **)a2 + 3));
    }
    if (*((void *)a2 + 4))
    {
      size = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!size) {
        operator new();
      }
      this = CoreML::Specification::DoubleParameter::MergeFrom(size, *((const CoreML::Specification::DoubleParameter **)a2 + 4));
    }
    if (*((void *)a2 + 5))
    {
      uint64_t v8 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
      if (!v8) {
        operator new();
      }
      this = CoreML::Specification::DoubleParameter::MergeFrom(v8, *((const CoreML::Specification::DoubleParameter **)a2 + 5));
    }
    if (*((void *)a2 + 6))
    {
      if (!v3[2].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v9 = (const CoreML::Specification::DoubleParameter *)*((void *)a2 + 6);
      unsigned int v10 = (std::string *)v3[2].__r_.__value_.__l.__data_;
      return CoreML::Specification::DoubleParameter::MergeFrom(v10, v9);
    }
  }
  return this;
}

void sub_223FB5E7C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Optimizer::~Optimizer(CoreML::Specification::Optimizer *this)
{
  *(void *)this = &unk_26D7653E0;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::Optimizer::clear_OptimizerType((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Optimizer::~Optimizer(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::Optimizer::clear_OptimizerType(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 11 || v2 == 10)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::Optimizer::New(CoreML::Specification::Optimizer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB6000(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Optimizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Optimizer>);
  }
  return result;
}

uint64_t CoreML::Specification::Optimizer::MergePartialFromCodedStream(CoreML::Specification::Optimizer *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_15;
      }
LABEL_7:
      if (v7 >> 3 == 11)
      {
        if (v7 != 90) {
          goto LABEL_15;
        }
        if (*((_DWORD *)this + 7) != 11)
        {
          CoreML::Specification::Optimizer::clear_OptimizerType((uint64_t)this);
          *((_DWORD *)this + 7) = 11;
          operator new();
        }
        unsigned int v10 = (CoreML::Specification::AdamOptimizer *)*((void *)this + 2);
        int v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v14;
          *a2 = v14 + 1;
        }
        unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v20 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v18 = v20;
        uint64_t result = CoreML::Specification::AdamOptimizer::MergePartialFromCodedStream(v10, a2, v21);
        if (!result) {
          return result;
        }
      }
      else
      {
        if (v7 >> 3 != 10 || v7 != 82) {
          goto LABEL_15;
        }
        if (*((_DWORD *)this + 7) != 10)
        {
          CoreML::Specification::Optimizer::clear_OptimizerType((uint64_t)this);
          *((_DWORD *)this + 7) = 10;
          operator new();
        }
        uint64_t v9 = (CoreML::Specification::SGDOptimizer *)*((void *)this + 2);
        uint64_t v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          int v13 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v13 < 0) {
            return 0;
          }
        }
        else
        {
          int v13 = *v12;
          *a2 = v12 + 1;
        }
        unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v13);
        if ((v16 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v18 = v16;
        uint64_t result = CoreML::Specification::SGDOptimizer::MergePartialFromCodedStream(v9, a2, v17);
        if (!result) {
          return result;
        }
      }
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))return 0; {
    }
      }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_7;
    }
LABEL_15:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB6270(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Optimizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 10)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 11)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xB, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Optimizer::ByteSizeLong(CoreML::Specification::Optimizer *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 11)
  {
    uint64_t v3 = CoreML::Specification::AdamOptimizer::ByteSizeLong(*((CoreML::Specification::AdamOptimizer **)this + 2));
  }
  else
  {
    if (v2 != 10)
    {
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = CoreML::Specification::SGDOptimizer::ByteSizeLong(*((CoreML::Specification::SGDOptimizer **)this + 2));
  }
  uint64_t result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_7:
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::Optimizer::IsInitialized(CoreML::Specification::Optimizer *this)
{
  return 1;
}

void *CoreML::Specification::Optimizer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Optimizer");
}

CoreML::Specification::SGDOptimizer *CoreML::Specification::SGDOptimizer::SGDOptimizer(CoreML::Specification::SGDOptimizer *this)
{
  *(void *)this = &unk_26D765478;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SGDOptimizer *)&CoreML::Specification::_SGDOptimizer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_223FB6414(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SGDOptimizer::~SGDOptimizer(CoreML::Specification::SGDOptimizer *this)
{
  *(void *)this = &unk_26D765478;
  CoreML::Specification::SGDOptimizer::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SGDOptimizer::~SGDOptimizer(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SGDOptimizer::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_SGDOptimizer_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    this = (uint64_t *)v1[4];
    if (this)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v4();
    }
  }
  return this;
}

void CoreML::Specification::SGDOptimizer::New(CoreML::Specification::SGDOptimizer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB65D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SGDOptimizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SGDOptimizer>);
  }
  return result;
}

uint64_t CoreML::Specification::SGDOptimizer::Clear(CoreML::Specification::SGDOptimizer *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::SGDOptimizer::MergePartialFromCodedStream(CoreML::Specification::SGDOptimizer *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_28;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_28;
      }
LABEL_7:
      unsigned int v9 = v7 >> 3;
      if (v7 >> 3 == 3)
      {
        if (v7 != 26) {
          goto LABEL_28;
        }
        uint64_t v11 = (CoreML::Specification::DoubleParameter *)*((void *)this + 4);
        if (!v11) {
          operator new();
        }
        goto LABEL_19;
      }
      if (v9 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_28;
      }
      int v14 = (CoreML::Specification::Int64Parameter *)*((void *)this + 3);
      if (!v14) {
        operator new();
      }
      uint64_t v15 = *a2;
      if (*a2 >= a2[1] || *v15 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v15;
        *a2 = v15 + 1;
      }
      unint64_t v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v22 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v20 = v22;
      uint64_t result = CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(v14, a2, v23);
      if (!result) {
        return result;
      }
LABEL_41:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20))return 0; {
    }
      }
    if (v9 == 1 && v7 == 10)
    {
      uint64_t v11 = (CoreML::Specification::DoubleParameter *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
LABEL_19:
      uint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int v13 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v13 < 0) {
          return 0;
        }
      }
      else
      {
        int v13 = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v18 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v13);
      if ((v18 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v20 = v18;
      uint64_t result = CoreML::Specification::DoubleParameter::MergePartialFromCodedStream(v11, a2, v19);
      if (!result) {
        return result;
      }
      goto LABEL_41;
    }
LABEL_28:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB68F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SGDOptimizer::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_SGDOptimizer_default_instance_)
  {
    uint64_t v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
    uint64_t v8 = v5[4];
    if (v8)
    {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::SGDOptimizer::ByteSizeLong(CoreML::Specification::SGDOptimizer *this)
{
  if (this == (CoreML::Specification::SGDOptimizer *)&CoreML::Specification::_SGDOptimizer_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (CoreML::Specification::DoubleParameter *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::DoubleParameter::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (CoreML::Specification::Int64Parameter *)*((void *)this + 3);
    if (v5)
    {
      unint64_t v6 = CoreML::Specification::Int64Parameter::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v7 = (CoreML::Specification::DoubleParameter *)*((void *)this + 4);
    if (v7)
    {
      uint64_t v8 = CoreML::Specification::DoubleParameter::ByteSizeLong(v7);
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::SGDOptimizer::IsInitialized(CoreML::Specification::SGDOptimizer *this)
{
  return 1;
}

void *CoreML::Specification::SGDOptimizer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SGDOptimizer");
}

CoreML::Specification::AdamOptimizer *CoreML::Specification::AdamOptimizer::AdamOptimizer(CoreML::Specification::AdamOptimizer *this)
{
  *(void *)this = &unk_26D765510;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::AdamOptimizer *)&CoreML::Specification::_AdamOptimizer_default_instance_) {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  }
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

void sub_223FB6AFC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::AdamOptimizer::~AdamOptimizer(CoreML::Specification::AdamOptimizer *this)
{
  *(void *)this = &unk_26D765510;
  CoreML::Specification::AdamOptimizer::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::AdamOptimizer::~AdamOptimizer(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::AdamOptimizer::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_AdamOptimizer_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    this = (uint64_t *)v1[6];
    if (this)
    {
      unint64_t v6 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v6();
    }
  }
  return this;
}

void CoreML::Specification::AdamOptimizer::New(CoreML::Specification::AdamOptimizer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223FB6D14(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::AdamOptimizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AdamOptimizer>);
  }
  return result;
}

uint64_t CoreML::Specification::AdamOptimizer::Clear(CoreML::Specification::AdamOptimizer *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t CoreML::Specification::AdamOptimizer::MergePartialFromCodedStream(CoreML::Specification::AdamOptimizer *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_29;
      }
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 10) {
            goto LABEL_29;
          }
          unsigned int v9 = (CoreML::Specification::DoubleParameter *)*((void *)this + 2);
          if (!v9) {
            operator new();
          }
          goto LABEL_26;
        case 2u:
          if (v7 != 18) {
            goto LABEL_29;
          }
          unsigned int v10 = (CoreML::Specification::Int64Parameter *)*((void *)this + 3);
          if (!v10) {
            operator new();
          }
          uint64_t v11 = *a2;
          if (*a2 >= a2[1] || *v11 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v11;
            *a2 = v11 + 1;
          }
          unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v20 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v18 = v20;
          uint64_t result = CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(v10, a2, v21);
          if (!result) {
            return result;
          }
LABEL_38:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))return 0; {
          break;
          }
        case 3u:
          if (v7 != 26) {
            goto LABEL_29;
          }
          unsigned int v9 = (CoreML::Specification::DoubleParameter *)*((void *)this + 4);
          if (!v9) {
            operator new();
          }
          goto LABEL_26;
        case 4u:
          if (v7 != 34) {
            goto LABEL_29;
          }
          unsigned int v9 = (CoreML::Specification::DoubleParameter *)*((void *)this + 5);
          if (!v9) {
            operator new();
          }
          goto LABEL_26;
        case 5u:
          if (v7 != 42) {
            goto LABEL_29;
          }
          unsigned int v9 = (CoreML::Specification::DoubleParameter *)*((void *)this + 6);
          if (!v9) {
            operator new();
          }
LABEL_26:
          int v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            int v14 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v14 < 0) {
              return 0;
            }
          }
          else
          {
            int v14 = *v13;
            *a2 = v13 + 1;
          }
          unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
          if ((v16 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v18 = v16;
          uint64_t result = CoreML::Specification::DoubleParameter::MergePartialFromCodedStream(v9, a2, v17);
          if (result) {
            goto LABEL_38;
          }
          return result;
        default:
          goto LABEL_29;
      }
    }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_7;
    }
LABEL_29:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB7124(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::AdamOptimizer::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_AdamOptimizer_default_instance_)
  {
    uint64_t v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
    uint64_t v8 = v5[4];
    if (v8) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
    }
    uint64_t v9 = v5[5];
    if (v9) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
    }
    uint64_t v10 = v5[6];
    if (v10)
    {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::AdamOptimizer::ByteSizeLong(CoreML::Specification::AdamOptimizer *this)
{
  if (this == (CoreML::Specification::AdamOptimizer *)&CoreML::Specification::_AdamOptimizer_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (CoreML::Specification::DoubleParameter *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::DoubleParameter::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (CoreML::Specification::Int64Parameter *)*((void *)this + 3);
    if (v5)
    {
      unint64_t v6 = CoreML::Specification::Int64Parameter::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v7 = (CoreML::Specification::DoubleParameter *)*((void *)this + 4);
    if (v7)
    {
      uint64_t v8 = CoreML::Specification::DoubleParameter::ByteSizeLong(v7);
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v9 = (CoreML::Specification::DoubleParameter *)*((void *)this + 5);
    if (v9)
    {
      uint64_t v10 = CoreML::Specification::DoubleParameter::ByteSizeLong(v9);
      v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v11 = (CoreML::Specification::DoubleParameter *)*((void *)this + 6);
    if (v11)
    {
      uint64_t v12 = CoreML::Specification::DoubleParameter::ByteSizeLong(v11);
      v4 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 14) = v4;
  return v4;
}

uint64_t CoreML::Specification::AdamOptimizer::IsInitialized(CoreML::Specification::AdamOptimizer *this)
{
  return 1;
}

void *CoreML::Specification::AdamOptimizer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.AdamOptimizer");
}

void CoreML::Specification::NeuralNetwork::New(CoreML::Specification::NeuralNetwork *this)
{
}

uint64_t CoreML::Specification::NeuralNetwork::GetCachedSize(CoreML::Specification::NeuralNetwork *this)
{
  return *((unsigned int *)this + 20);
}

void CoreML::Specification::NeuralNetworkImageScaler::New(CoreML::Specification::NeuralNetworkImageScaler *this)
{
}

void CoreML::Specification::NeuralNetworkMeanImage::New(CoreML::Specification::NeuralNetworkMeanImage *this)
{
}

void CoreML::Specification::NeuralNetworkPreprocessing::New(CoreML::Specification::NeuralNetworkPreprocessing *this)
{
}

void CoreML::Specification::ActivationReLU::New(CoreML::Specification::ActivationReLU *this)
{
}

void CoreML::Specification::ActivationLeakyReLU::New(CoreML::Specification::ActivationLeakyReLU *this)
{
}

void CoreML::Specification::ActivationTanh::New(CoreML::Specification::ActivationTanh *this)
{
}

void CoreML::Specification::ActivationScaledTanh::New(CoreML::Specification::ActivationScaledTanh *this)
{
}

void CoreML::Specification::ActivationSigmoid::New(CoreML::Specification::ActivationSigmoid *this)
{
}

void CoreML::Specification::ActivationLinear::New(CoreML::Specification::ActivationLinear *this)
{
}

void CoreML::Specification::ActivationSigmoidHard::New(CoreML::Specification::ActivationSigmoidHard *this)
{
}

void CoreML::Specification::ActivationPReLU::New(CoreML::Specification::ActivationPReLU *this)
{
}

void CoreML::Specification::ActivationELU::New(CoreML::Specification::ActivationELU *this)
{
}

void CoreML::Specification::ActivationThresholdedReLU::New(CoreML::Specification::ActivationThresholdedReLU *this)
{
}

void CoreML::Specification::ActivationSoftsign::New(CoreML::Specification::ActivationSoftsign *this)
{
}

void CoreML::Specification::ActivationSoftplus::New(CoreML::Specification::ActivationSoftplus *this)
{
}

void CoreML::Specification::ActivationParametricSoftplus::New(CoreML::Specification::ActivationParametricSoftplus *this)
{
}

void CoreML::Specification::ActivationParams::New(CoreML::Specification::ActivationParams *this)
{
}

void CoreML::Specification::Tensor::New(CoreML::Specification::Tensor *this)
{
}

void CoreML::Specification::NeuralNetworkLayer::New(CoreML::Specification::NeuralNetworkLayer *this)
{
}

void CoreML::Specification::BranchLayerParams::New(CoreML::Specification::BranchLayerParams *this)
{
}

void CoreML::Specification::LoopLayerParams::New(CoreML::Specification::LoopLayerParams *this)
{
}

void CoreML::Specification::LoopBreakLayerParams::New(CoreML::Specification::LoopBreakLayerParams *this)
{
}

void CoreML::Specification::LoopContinueLayerParams::New(CoreML::Specification::LoopContinueLayerParams *this)
{
}

void CoreML::Specification::CopyLayerParams::New(CoreML::Specification::CopyLayerParams *this)
{
}

void CoreML::Specification::GreaterThanLayerParams::New(CoreML::Specification::GreaterThanLayerParams *this)
{
}

void CoreML::Specification::GreaterEqualLayerParams::New(CoreML::Specification::GreaterEqualLayerParams *this)
{
}

void CoreML::Specification::LessThanLayerParams::New(CoreML::Specification::LessThanLayerParams *this)
{
}

void CoreML::Specification::LessEqualLayerParams::New(CoreML::Specification::LessEqualLayerParams *this)
{
}

void CoreML::Specification::EqualLayerParams::New(CoreML::Specification::EqualLayerParams *this)
{
}

void CoreML::Specification::NotEqualLayerParams::New(CoreML::Specification::NotEqualLayerParams *this)
{
}

void CoreML::Specification::LogicalAndLayerParams::New(CoreML::Specification::LogicalAndLayerParams *this)
{
}

void CoreML::Specification::LogicalOrLayerParams::New(CoreML::Specification::LogicalOrLayerParams *this)
{
}

void CoreML::Specification::LogicalXorLayerParams::New(CoreML::Specification::LogicalXorLayerParams *this)
{
}

void CoreML::Specification::LogicalNotLayerParams::New(CoreML::Specification::LogicalNotLayerParams *this)
{
}

void CoreML::Specification::BorderAmounts_EdgeSizes::New(CoreML::Specification::BorderAmounts_EdgeSizes *this)
{
}

void CoreML::Specification::BorderAmounts::New(CoreML::Specification::BorderAmounts *this)
{
}

void CoreML::Specification::ValidPadding::New(CoreML::Specification::ValidPadding *this)
{
}

void CoreML::Specification::SamePadding::New(CoreML::Specification::SamePadding *this)
{
}

void CoreML::Specification::SamplingMode::New(CoreML::Specification::SamplingMode *this)
{
}

void CoreML::Specification::BoxCoordinatesMode::New(CoreML::Specification::BoxCoordinatesMode *this)
{
}

void CoreML::Specification::WeightParams::New(CoreML::Specification::WeightParams *this)
{
}

uint64_t CoreML::Specification::WeightParams::GetCachedSize(CoreML::Specification::WeightParams *this)
{
  return *((unsigned int *)this + 19);
}

void CoreML::Specification::QuantizationParams::New(CoreML::Specification::QuantizationParams *this)
{
}

void CoreML::Specification::LinearQuantizationParams::New(CoreML::Specification::LinearQuantizationParams *this)
{
}

uint64_t CoreML::Specification::LinearQuantizationParams::GetCachedSize(CoreML::Specification::LinearQuantizationParams *this)
{
  return *((unsigned int *)this + 15);
}

void CoreML::Specification::LookUpTableQuantizationParams::New(CoreML::Specification::LookUpTableQuantizationParams *this)
{
}

void CoreML::Specification::ConvolutionLayerParams::New(CoreML::Specification::ConvolutionLayerParams *this)
{
}

uint64_t CoreML::Specification::ConvolutionLayerParams::GetCachedSize(CoreML::Specification::ConvolutionLayerParams *this)
{
  return *((unsigned int *)this + 42);
}

void CoreML::Specification::Convolution3DLayerParams::New(CoreML::Specification::Convolution3DLayerParams *this)
{
}

void CoreML::Specification::InnerProductLayerParams::New(CoreML::Specification::InnerProductLayerParams *this)
{
}

uint64_t CoreML::Specification::InnerProductLayerParams::GetCachedSize(CoreML::Specification::InnerProductLayerParams *this)
{
  return *((unsigned int *)this + 13);
}

void CoreML::Specification::EmbeddingLayerParams::New(CoreML::Specification::EmbeddingLayerParams *this)
{
}

void CoreML::Specification::EmbeddingNDLayerParams::New(CoreML::Specification::EmbeddingNDLayerParams *this)
{
}

void CoreML::Specification::BatchnormLayerParams::New(CoreML::Specification::BatchnormLayerParams *this)
{
}

void CoreML::Specification::PoolingLayerParams_ValidCompletePadding::New(CoreML::Specification::PoolingLayerParams_ValidCompletePadding *this)
{
}

void CoreML::Specification::PoolingLayerParams::New(CoreML::Specification::PoolingLayerParams *this)
{
}

void CoreML::Specification::Pooling3DLayerParams::New(CoreML::Specification::Pooling3DLayerParams *this)
{
}

void CoreML::Specification::GlobalPooling3DLayerParams::New(CoreML::Specification::GlobalPooling3DLayerParams *this)
{
}

void CoreML::Specification::PaddingLayerParams_PaddingConstant::New(CoreML::Specification::PaddingLayerParams_PaddingConstant *this)
{
}

void CoreML::Specification::PaddingLayerParams_PaddingReflection::New(CoreML::Specification::PaddingLayerParams_PaddingReflection *this)
{
}

void CoreML::Specification::PaddingLayerParams_PaddingReplication::New(CoreML::Specification::PaddingLayerParams_PaddingReplication *this)
{
}

void CoreML::Specification::PaddingLayerParams::New(CoreML::Specification::PaddingLayerParams *this)
{
}

void CoreML::Specification::ConcatLayerParams::New(CoreML::Specification::ConcatLayerParams *this)
{
}

void CoreML::Specification::LRNLayerParams::New(CoreML::Specification::LRNLayerParams *this)
{
}

void CoreML::Specification::SoftmaxLayerParams::New(CoreML::Specification::SoftmaxLayerParams *this)
{
}

void CoreML::Specification::SplitLayerParams::New(CoreML::Specification::SplitLayerParams *this)
{
}

void CoreML::Specification::AddLayerParams::New(CoreML::Specification::AddLayerParams *this)
{
}

void CoreML::Specification::MultiplyLayerParams::New(CoreML::Specification::MultiplyLayerParams *this)
{
}

void CoreML::Specification::UnaryFunctionLayerParams::New(CoreML::Specification::UnaryFunctionLayerParams *this)
{
}

void CoreML::Specification::UpsampleLayerParams::New(CoreML::Specification::UpsampleLayerParams *this)
{
}

uint64_t CoreML::Specification::UpsampleLayerParams::GetCachedSize(CoreML::Specification::UpsampleLayerParams *this)
{
  return *((unsigned int *)this + 17);
}

void CoreML::Specification::ResizeBilinearLayerParams::New(CoreML::Specification::ResizeBilinearLayerParams *this)
{
}

void CoreML::Specification::CropResizeLayerParams::New(CoreML::Specification::CropResizeLayerParams *this)
{
}

void CoreML::Specification::BiasLayerParams::New(CoreML::Specification::BiasLayerParams *this)
{
}

void CoreML::Specification::ScaleLayerParams::New(CoreML::Specification::ScaleLayerParams *this)
{
}

void CoreML::Specification::LoadConstantLayerParams::New(CoreML::Specification::LoadConstantLayerParams *this)
{
}

void CoreML::Specification::L2NormalizeLayerParams::New(CoreML::Specification::L2NormalizeLayerParams *this)
{
}

void CoreML::Specification::FlattenLayerParams::New(CoreML::Specification::FlattenLayerParams *this)
{
}

void CoreML::Specification::ReshapeLayerParams::New(CoreML::Specification::ReshapeLayerParams *this)
{
}

void CoreML::Specification::PermuteLayerParams::New(CoreML::Specification::PermuteLayerParams *this)
{
}

void CoreML::Specification::ReorganizeDataLayerParams::New(CoreML::Specification::ReorganizeDataLayerParams *this)
{
}

uint64_t CoreML::Specification::ReorganizeDataLayerParams::GetCachedSize(CoreML::Specification::ReorganizeDataLayerParams *this)
{
  return *((unsigned int *)this + 7);
}

void CoreML::Specification::SliceLayerParams::New(CoreML::Specification::SliceLayerParams *this)
{
}

uint64_t CoreML::Specification::SliceLayerParams::GetCachedSize(CoreML::Specification::SliceLayerParams *this)
{
  return *((unsigned int *)this + 11);
}

void CoreML::Specification::ReduceLayerParams::New(CoreML::Specification::ReduceLayerParams *this)
{
}

void CoreML::Specification::CropLayerParams::New(CoreML::Specification::CropLayerParams *this)
{
}

void CoreML::Specification::AverageLayerParams::New(CoreML::Specification::AverageLayerParams *this)
{
}

void CoreML::Specification::MaxLayerParams::New(CoreML::Specification::MaxLayerParams *this)
{
}

void CoreML::Specification::MinLayerParams::New(CoreML::Specification::MinLayerParams *this)
{
}

void CoreML::Specification::DotProductLayerParams::New(CoreML::Specification::DotProductLayerParams *this)
{
}

void CoreML::Specification::MeanVarianceNormalizeLayerParams::New(CoreML::Specification::MeanVarianceNormalizeLayerParams *this)
{
}

void CoreML::Specification::SequenceRepeatLayerParams::New(CoreML::Specification::SequenceRepeatLayerParams *this)
{
}

void CoreML::Specification::SimpleRecurrentLayerParams::New(CoreML::Specification::SimpleRecurrentLayerParams *this)
{
}

void CoreML::Specification::GRULayerParams::New(CoreML::Specification::GRULayerParams *this)
{
}

uint64_t CoreML::Specification::GRULayerParams::GetCachedSize(CoreML::Specification::GRULayerParams *this)
{
  return *((unsigned int *)this + 33);
}

void CoreML::Specification::LSTMParams::New(CoreML::Specification::LSTMParams *this)
{
}

void CoreML::Specification::LSTMWeightParams::New(CoreML::Specification::LSTMWeightParams *this)
{
}

void CoreML::Specification::UniDirectionalLSTMLayerParams::New(CoreML::Specification::UniDirectionalLSTMLayerParams *this)
{
}

void CoreML::Specification::BiDirectionalLSTMLayerParams::New(CoreML::Specification::BiDirectionalLSTMLayerParams *this)
{
}

void CoreML::Specification::CustomLayerParams_CustomLayerParamValue::New(CoreML::Specification::CustomLayerParams_CustomLayerParamValue *this)
{
}

void CoreML::Specification::CustomLayerParams::New(CoreML::Specification::CustomLayerParams *this)
{
}

uint64_t CoreML::Specification::CustomLayerParams::GetCachedSize(CoreML::Specification::CustomLayerParams *this)
{
  return *((unsigned int *)this + 22);
}

void CoreML::Specification::TransposeLayerParams::New(CoreML::Specification::TransposeLayerParams *this)
{
}

void CoreML::Specification::BatchedMatMulLayerParams::New(CoreML::Specification::BatchedMatMulLayerParams *this)
{
}

void CoreML::Specification::ConcatNDLayerParams::New(CoreML::Specification::ConcatNDLayerParams *this)
{
}

void CoreML::Specification::SoftmaxNDLayerParams::New(CoreML::Specification::SoftmaxNDLayerParams *this)
{
}

void CoreML::Specification::ReverseLayerParams::New(CoreML::Specification::ReverseLayerParams *this)
{
}

void CoreML::Specification::ReverseSeqLayerParams::New(CoreML::Specification::ReverseSeqLayerParams *this)
{
}

void CoreML::Specification::LoadConstantNDLayerParams::New(CoreML::Specification::LoadConstantNDLayerParams *this)
{
}

void CoreML::Specification::FillLikeLayerParams::New(CoreML::Specification::FillLikeLayerParams *this)
{
}

void CoreML::Specification::FillStaticLayerParams::New(CoreML::Specification::FillStaticLayerParams *this)
{
}

void CoreML::Specification::FillDynamicLayerParams::New(CoreML::Specification::FillDynamicLayerParams *this)
{
}

void CoreML::Specification::WhereBroadcastableLayerParams::New(CoreML::Specification::WhereBroadcastableLayerParams *this)
{
}

void CoreML::Specification::SinLayerParams::New(CoreML::Specification::SinLayerParams *this)
{
}

void CoreML::Specification::CosLayerParams::New(CoreML::Specification::CosLayerParams *this)
{
}

void CoreML::Specification::TanLayerParams::New(CoreML::Specification::TanLayerParams *this)
{
}

void CoreML::Specification::AsinLayerParams::New(CoreML::Specification::AsinLayerParams *this)
{
}

void CoreML::Specification::AcosLayerParams::New(CoreML::Specification::AcosLayerParams *this)
{
}

void CoreML::Specification::AtanLayerParams::New(CoreML::Specification::AtanLayerParams *this)
{
}

void CoreML::Specification::SinhLayerParams::New(CoreML::Specification::SinhLayerParams *this)
{
}

void CoreML::Specification::CoshLayerParams::New(CoreML::Specification::CoshLayerParams *this)
{
}

void CoreML::Specification::TanhLayerParams::New(CoreML::Specification::TanhLayerParams *this)
{
}

void CoreML::Specification::AsinhLayerParams::New(CoreML::Specification::AsinhLayerParams *this)
{
}

void CoreML::Specification::AcoshLayerParams::New(CoreML::Specification::AcoshLayerParams *this)
{
}

void CoreML::Specification::AtanhLayerParams::New(CoreML::Specification::AtanhLayerParams *this)
{
}

void CoreML::Specification::PowBroadcastableLayerParams::New(CoreML::Specification::PowBroadcastableLayerParams *this)
{
}

void CoreML::Specification::Exp2LayerParams::New(CoreML::Specification::Exp2LayerParams *this)
{
}

void CoreML::Specification::WhereNonZeroLayerParams::New(CoreML::Specification::WhereNonZeroLayerParams *this)
{
}

void CoreML::Specification::MatrixBandPartLayerParams::New(CoreML::Specification::MatrixBandPartLayerParams *this)
{
}

void CoreML::Specification::UpperTriangularLayerParams::New(CoreML::Specification::UpperTriangularLayerParams *this)
{
}

void CoreML::Specification::LowerTriangularLayerParams::New(CoreML::Specification::LowerTriangularLayerParams *this)
{
}

void CoreML::Specification::BroadcastToLikeLayerParams::New(CoreML::Specification::BroadcastToLikeLayerParams *this)
{
}

void CoreML::Specification::BroadcastToStaticLayerParams::New(CoreML::Specification::BroadcastToStaticLayerParams *this)
{
}

void CoreML::Specification::BroadcastToDynamicLayerParams::New(CoreML::Specification::BroadcastToDynamicLayerParams *this)
{
}

void CoreML::Specification::AddBroadcastableLayerParams::New(CoreML::Specification::AddBroadcastableLayerParams *this)
{
}

void CoreML::Specification::MaxBroadcastableLayerParams::New(CoreML::Specification::MaxBroadcastableLayerParams *this)
{
}

void CoreML::Specification::MinBroadcastableLayerParams::New(CoreML::Specification::MinBroadcastableLayerParams *this)
{
}

void CoreML::Specification::ModBroadcastableLayerParams::New(CoreML::Specification::ModBroadcastableLayerParams *this)
{
}

void CoreML::Specification::FloorDivBroadcastableLayerParams::New(CoreML::Specification::FloorDivBroadcastableLayerParams *this)
{
}

void CoreML::Specification::SubtractBroadcastableLayerParams::New(CoreML::Specification::SubtractBroadcastableLayerParams *this)
{
}

void CoreML::Specification::MultiplyBroadcastableLayerParams::New(CoreML::Specification::MultiplyBroadcastableLayerParams *this)
{
}

void CoreML::Specification::DivideBroadcastableLayerParams::New(CoreML::Specification::DivideBroadcastableLayerParams *this)
{
}

void CoreML::Specification::GatherLayerParams::New(CoreML::Specification::GatherLayerParams *this)
{
}

void CoreML::Specification::ScatterLayerParams::New(CoreML::Specification::ScatterLayerParams *this)
{
}

void CoreML::Specification::GatherNDLayerParams::New(CoreML::Specification::GatherNDLayerParams *this)
{
}

void CoreML::Specification::ScatterNDLayerParams::New(CoreML::Specification::ScatterNDLayerParams *this)
{
}

void CoreML::Specification::GatherAlongAxisLayerParams::New(CoreML::Specification::GatherAlongAxisLayerParams *this)
{
}

void CoreML::Specification::ScatterAlongAxisLayerParams::New(CoreML::Specification::ScatterAlongAxisLayerParams *this)
{
}

void CoreML::Specification::StackLayerParams::New(CoreML::Specification::StackLayerParams *this)
{
}

void CoreML::Specification::RankPreservingReshapeLayerParams::New(CoreML::Specification::RankPreservingReshapeLayerParams *this)
{
}

void CoreML::Specification::ConstantPaddingLayerParams::New(CoreML::Specification::ConstantPaddingLayerParams *this)
{
}

void CoreML::Specification::RandomNormalLikeLayerParams::New(CoreML::Specification::RandomNormalLikeLayerParams *this)
{
}

void CoreML::Specification::RandomNormalStaticLayerParams::New(CoreML::Specification::RandomNormalStaticLayerParams *this)
{
}

uint64_t CoreML::Specification::RandomNormalStaticLayerParams::GetCachedSize(CoreML::Specification::RandomNormalStaticLayerParams *this)
{
  return *((unsigned int *)this + 14);
}

void CoreML::Specification::RandomNormalDynamicLayerParams::New(CoreML::Specification::RandomNormalDynamicLayerParams *this)
{
}

void CoreML::Specification::RandomUniformLikeLayerParams::New(CoreML::Specification::RandomUniformLikeLayerParams *this)
{
}

void CoreML::Specification::RandomUniformStaticLayerParams::New(CoreML::Specification::RandomUniformStaticLayerParams *this)
{
}

void CoreML::Specification::RandomUniformDynamicLayerParams::New(CoreML::Specification::RandomUniformDynamicLayerParams *this)
{
}

void CoreML::Specification::RandomBernoulliLikeLayerParams::New(CoreML::Specification::RandomBernoulliLikeLayerParams *this)
{
}

void CoreML::Specification::RandomBernoulliStaticLayerParams::New(CoreML::Specification::RandomBernoulliStaticLayerParams *this)
{
}

void CoreML::Specification::RandomBernoulliDynamicLayerParams::New(CoreML::Specification::RandomBernoulliDynamicLayerParams *this)
{
}

void CoreML::Specification::CategoricalDistributionLayerParams::New(CoreML::Specification::CategoricalDistributionLayerParams *this)
{
}

void CoreML::Specification::ReduceL1LayerParams::New(CoreML::Specification::ReduceL1LayerParams *this)
{
}

void CoreML::Specification::ReduceL2LayerParams::New(CoreML::Specification::ReduceL2LayerParams *this)
{
}

void CoreML::Specification::ReduceMaxLayerParams::New(CoreML::Specification::ReduceMaxLayerParams *this)
{
}

void CoreML::Specification::ReduceMinLayerParams::New(CoreML::Specification::ReduceMinLayerParams *this)
{
}

void CoreML::Specification::ReduceSumLayerParams::New(CoreML::Specification::ReduceSumLayerParams *this)
{
}

void CoreML::Specification::ReduceProdLayerParams::New(CoreML::Specification::ReduceProdLayerParams *this)
{
}

void CoreML::Specification::ReduceMeanLayerParams::New(CoreML::Specification::ReduceMeanLayerParams *this)
{
}

void CoreML::Specification::ReduceLogSumLayerParams::New(CoreML::Specification::ReduceLogSumLayerParams *this)
{
}

void CoreML::Specification::ReduceSumSquareLayerParams::New(CoreML::Specification::ReduceSumSquareLayerParams *this)
{
}

void CoreML::Specification::ReduceLogSumExpLayerParams::New(CoreML::Specification::ReduceLogSumExpLayerParams *this)
{
}

void CoreML::Specification::ExpandDimsLayerParams::New(CoreML::Specification::ExpandDimsLayerParams *this)
{
}

void CoreML::Specification::FlattenTo2DLayerParams::New(CoreML::Specification::FlattenTo2DLayerParams *this)
{
}

void CoreML::Specification::ReshapeStaticLayerParams::New(CoreML::Specification::ReshapeStaticLayerParams *this)
{
}

void CoreML::Specification::ReshapeLikeLayerParams::New(CoreML::Specification::ReshapeLikeLayerParams *this)
{
}

void CoreML::Specification::ReshapeDynamicLayerParams::New(CoreML::Specification::ReshapeDynamicLayerParams *this)
{
}

void CoreML::Specification::SqueezeLayerParams::New(CoreML::Specification::SqueezeLayerParams *this)
{
}

void CoreML::Specification::TopKLayerParams::New(CoreML::Specification::TopKLayerParams *this)
{
}

void CoreML::Specification::ArgMaxLayerParams::New(CoreML::Specification::ArgMaxLayerParams *this)
{
}

void CoreML::Specification::ArgMinLayerParams::New(CoreML::Specification::ArgMinLayerParams *this)
{
}

void CoreML::Specification::SplitNDLayerParams::New(CoreML::Specification::SplitNDLayerParams *this)
{
}

void CoreML::Specification::CeilLayerParams::New(CoreML::Specification::CeilLayerParams *this)
{
}

void CoreML::Specification::RoundLayerParams::New(CoreML::Specification::RoundLayerParams *this)
{
}

void CoreML::Specification::FloorLayerParams::New(CoreML::Specification::FloorLayerParams *this)
{
}

void CoreML::Specification::SignLayerParams::New(CoreML::Specification::SignLayerParams *this)
{
}

void CoreML::Specification::ClipLayerParams::New(CoreML::Specification::ClipLayerParams *this)
{
}

void CoreML::Specification::SliceStaticLayerParams::New(CoreML::Specification::SliceStaticLayerParams *this)
{
}

uint64_t CoreML::Specification::SliceStaticLayerParams::GetCachedSize(CoreML::Specification::SliceStaticLayerParams *this)
{
  return *((unsigned int *)this + 39);
}

void CoreML::Specification::SliceDynamicLayerParams::New(CoreML::Specification::SliceDynamicLayerParams *this)
{
}

void CoreML::Specification::TileLayerParams::New(CoreML::Specification::TileLayerParams *this)
{
}

void CoreML::Specification::GetShapeLayerParams::New(CoreML::Specification::GetShapeLayerParams *this)
{
}

void CoreML::Specification::ErfLayerParams::New(CoreML::Specification::ErfLayerParams *this)
{
}

void CoreML::Specification::GeluLayerParams::New(CoreML::Specification::GeluLayerParams *this)
{
}

void CoreML::Specification::RangeStaticLayerParams::New(CoreML::Specification::RangeStaticLayerParams *this)
{
}

void CoreML::Specification::RangeDynamicLayerParams::New(CoreML::Specification::RangeDynamicLayerParams *this)
{
}

void CoreML::Specification::SlidingWindowsLayerParams::New(CoreML::Specification::SlidingWindowsLayerParams *this)
{
}

void CoreML::Specification::LayerNormalizationLayerParams::New(CoreML::Specification::LayerNormalizationLayerParams *this)
{
}

void CoreML::Specification::NonMaximumSuppressionLayerParams::New(CoreML::Specification::NonMaximumSuppressionLayerParams *this)
{
}

void CoreML::Specification::ClampedReLULayerParams::New(CoreML::Specification::ClampedReLULayerParams *this)
{
}

void CoreML::Specification::ArgSortLayerParams::New(CoreML::Specification::ArgSortLayerParams *this)
{
}

void CoreML::Specification::SliceBySizeLayerParams::New(CoreML::Specification::SliceBySizeLayerParams *this)
{
}

void CoreML::Specification::NeuralNetworkClassifier::New(CoreML::Specification::NeuralNetworkClassifier *this)
{
}

void CoreML::Specification::OneHotLayerParams::New(CoreML::Specification::OneHotLayerParams *this)
{
}

void CoreML::Specification::CumSumLayerParams::New(CoreML::Specification::CumSumLayerParams *this)
{
}

void CoreML::Specification::NeuralNetworkRegressor::New(CoreML::Specification::NeuralNetworkRegressor *this)
{
}

void CoreML::Specification::NetworkUpdateParameters::New(CoreML::Specification::NetworkUpdateParameters *this)
{
}

uint64_t CoreML::Specification::NetworkUpdateParameters::GetCachedSize(CoreML::Specification::NetworkUpdateParameters *this)
{
  return *((unsigned int *)this + 18);
}

void CoreML::Specification::LossLayer::New(CoreML::Specification::LossLayer *this)
{
}

void CoreML::Specification::CategoricalCrossEntropyLossLayer::New(CoreML::Specification::CategoricalCrossEntropyLossLayer *this)
{
}

void CoreML::Specification::MeanSquaredErrorLossLayer::New(CoreML::Specification::MeanSquaredErrorLossLayer *this)
{
}

void CoreML::Specification::Optimizer::New(CoreML::Specification::Optimizer *this)
{
}

void CoreML::Specification::SGDOptimizer::New(CoreML::Specification::SGDOptimizer *this)
{
}

void CoreML::Specification::AdamOptimizer::New(CoreML::Specification::AdamOptimizer *this)
{
}

CoreML::Specification::NeuralNetworkLayer *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::NeuralNetworkLayer **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkLayer>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB7B30(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40665201BALL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkLayer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::NeuralNetworkPreprocessing *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::NeuralNetworkPreprocessing **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB7C7C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::Tensor *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::Tensor **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::Tensor::Tensor(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Tensor>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB7DC8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Tensor>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::BorderAmounts_EdgeSizes *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::BorderAmounts_EdgeSizes **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::BorderAmounts_EdgeSizes::BorderAmounts_EdgeSizes(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BorderAmounts_EdgeSizes>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB7F14(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BorderAmounts_EdgeSizes>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::ActivationParams *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::ActivationParams **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::ActivationParams::ActivationParams(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ActivationParams>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB8060(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ActivationParams>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::LSTMWeightParams *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LSTMWeightParams>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::LSTMWeightParams **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::LSTMWeightParams::LSTMWeightParams(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LSTMWeightParams>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB81AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C405455452ELL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LSTMWeightParams>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~Map(void *a1)
{
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x22A614FA0](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::clear(uint64_t a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase(a1, &v5, (uint64_t)&v7);
    double result = *(double *)&v7;
    long long v3 = v7;
    uint64_t v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = *(void *)(*a2 + 24);
    if (v6)
    {
      uint64_t v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair(v6);
      MEMORY[0x22A614FA0](v7, 0x10B2C4015637A22);
    }
  }
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(void **)(a1 + 16), (uint64_t)&v9);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CoreML::Specification::WeightParams *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::WeightParams>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::WeightParams **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::WeightParams::WeightParams(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::WeightParams>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB848C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::WeightParams>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::LossLayer *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LossLayer>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::LossLayer **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::LossLayer::LossLayer(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LossLayer>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223FB85D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LossLayer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D7668B0;
  result[1] = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value(result);
  }
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          unint64_t TagFallback = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *a2 = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v7 = *(std::string **)(a1 + 16);
        if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v7);
        if (!result) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v9;
        uint64_t v10 = *a2;
        if (*a2 < a2[1] && *v10 == 18)
        {
          *a2 = v10 + 1;
          goto LABEL_19;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 40);
LABEL_19:
      *(_DWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v9 | 2;
      Aligned = *(CoreML::Specification::CustomLayerParams_CustomLayerParamValue **)(a1 + 24);
      if (!Aligned)
      {
        uint64_t v12 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (!v12) {
          operator new();
        }
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v12, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>);
        *(void *)(a1 + 24) = Aligned;
      }
      int v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
      }
      unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v15 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v17 = v15;
      BOOL result = CoreML::Specification::CustomLayerParams_CustomLayerParamValue::MergePartialFromCodedStream(Aligned, (_tc_google::protobuf::io::CodedInputStream *)a2, v16);
      if (!result) {
        return result;
      }
      BOOL result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        BOOL result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223FB8A08(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  int v4 = (CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v5 = CoreML::Specification::CustomLayerParams_CustomLayerParamValue::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((_tc_google::protobuf::internal::WireFormatLite *)2, v5, a2, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 24) + ((9 * (__clz(*(_DWORD *)(v4 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  int v7 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *int v7 = 18;
  int v9 = v7 + 1;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      unsigned int v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  unsigned char *v9 = v11;
  int v13 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 128);
  return v13(v8, a2, v9 + 1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26D766988;
  if (*(void *)(a1 + 8) != a1 && !*(void *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      unsigned int v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((uint64_t *)result->__r_.__value_.__r.__words[2] == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!v4[1].__r_.__value_.__r.__words[0])
      {
        size = (_tc_google::protobuf::Arena *)v4[1].__r_.__value_.__l.__size_;
        if (!size) {
          operator new();
        }
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue(Aligned);
        _tc_google::protobuf::Arena::AddListNode(size, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>);
        v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)Aligned;
      }
      int v9 = (const CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      BOOL result = CoreML::Specification::CustomLayerParams_CustomLayerParamValue::MergeFrom((std::string *)v4[1].__r_.__value_.__l.__data_, v9);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

void sub_223FB8FC4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetwork>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::NeuralNetworkLayer **a2, CoreML::Specification::NeuralNetworkLayer **a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkLayer>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *a1;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = &a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkLayer>);
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkLayer>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
}

void sub_223FB9144(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40665201BALL);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkLayer>::Merge(CoreML::Specification::NeuralNetworkLayer *a1, CoreML::Specification::NeuralNetworkLayer *this)
{
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::NeuralNetworkPreprocessing **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::NeuralNetworkPreprocessing **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FB9284(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(CoreML::Specification::NeuralNetworkPreprocessing *a1, std::string *this)
{
  return CoreML::Specification::NeuralNetworkPreprocessing::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkImageScaler>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkMeanImage>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkPreprocessing>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationReLU>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationLeakyReLU>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationTanh>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationScaledTanh>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSigmoid>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationLinear>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSigmoidHard>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationPReLU>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationELU>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationThresholdedReLU>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSoftsign>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSoftplus>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationParametricSoftplus>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Tensor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkLayer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>(unint64_t *result, CoreML::Specification::Tensor **a2, CoreML::Specification::Tensor **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Tensor>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = &a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::Tensor::Tensor(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Tensor>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Tensor>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FB9708(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

unint64_t *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Tensor>::Merge(CoreML::Specification::Tensor *a1, CoreML::Specification::Tensor *this)
{
  return CoreML::Specification::Tensor::MergeFrom((unint64_t *)this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BranchLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LoopLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LoopBreakLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LoopContinueLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CopyLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GreaterThanLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GreaterEqualLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LessThanLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LessEqualLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::EqualLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NotEqualLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LogicalAndLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LogicalOrLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LogicalXorLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LogicalNotLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BorderAmounts_EdgeSizes>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BorderAmounts>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ReverseSeqLayerParams **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::BorderAmounts_EdgeSizes **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::BorderAmounts_EdgeSizes::BorderAmounts_EdgeSizes(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BorderAmounts_EdgeSizes>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FB9B34(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(CoreML::Specification::ReverseSeqLayerParams *a1, std::string *this)
{
  return CoreML::Specification::ReverseSeqLayerParams::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ValidPadding>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SamePadding>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SamplingMode>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BoxCoordinatesMode>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::WeightParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::QuantizationParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearQuantizationParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LookUpTableQuantizationParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ConvolutionLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Convolution3DLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::InnerProductLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::EmbeddingLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::EmbeddingNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BatchnormLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PoolingLayerParams_ValidCompletePadding>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PoolingLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Pooling3DLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GlobalPooling3DLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PaddingLayerParams_PaddingConstant>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PaddingLayerParams_PaddingReflection>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PaddingLayerParams_PaddingReplication>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PaddingLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ConcatLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LRNLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SoftmaxLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SplitLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AddLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MultiplyLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UnaryFunctionLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UpsampleLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ResizeBilinearLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CropResizeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BiasLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ScaleLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LoadConstantLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::L2NormalizeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FlattenLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PermuteLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReorganizeDataLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CropLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AverageLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MaxLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MinLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DotProductLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MeanVarianceNormalizeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SequenceRepeatLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SimpleRecurrentLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GRULayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ActivationParams **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ActivationParams>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::ActivationParams **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::ActivationParams::ActivationParams(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ActivationParams>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ActivationParams>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FBA538(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ActivationParams>::Merge(CoreML::Specification::ActivationParams *a1, std::string *this)
{
  return CoreML::Specification::ActivationParams::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LSTMParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LSTMWeightParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UniDirectionalLSTMLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BiDirectionalLSTMLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LSTMWeightParams>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::LSTMWeightParams **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unsigned int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LSTMWeightParams>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::LSTMWeightParams **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::LSTMWeightParams::LSTMWeightParams(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LSTMWeightParams>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LSTMWeightParams>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FBA728(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C405455452ELL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LSTMWeightParams>::Merge(CoreML::Specification::LSTMWeightParams *a1, std::string *this)
{
  return CoreML::Specification::LSTMWeightParams::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::Init(uint64_t a1)
{
  int v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  BOOL result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_223FBA828(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *uint64_t v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_223FBA924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, const std::string *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 56);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue((CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)&Aligned[1]);
  _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_223FBA9F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B2C4015637A22);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    uint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_223FBAF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_223FBAFDC(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::MapPair(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue((CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)&this[1]);
  return this;
}

void sub_223FBB04C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>);
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a2;
  if (*(void *)a2 >= *(void *)(a2 + 8) || *v4 != 10)
  {
    BOOL v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v10);
    }
    *BOOL v10 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(void *)a2 = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16))) {
    return 0;
  }
  if ((int)(*(_DWORD *)(a2 + 8) - *(void *)a2) < 1 {
    || **(unsigned char **)a2 != 18
  }
    || (uint64_t v5 = *(void *)(a1 + 8),
        uint64_t v6 = **(void **)(v5 + 16),
        *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::operator[](v5, (const std::string *)(a1 + 16)), v6 == **(void **)(*(void *)(a1 + 8) + 16)))
  {
LABEL_13:
    uint64_t v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    unint64_t v12 = *(void **)(a1 + 48);
    if (v12 != v11)
    {
      if (v12) {
        (*(void (**)(void *))(*v12 + 8))(v12);
      }
      *(void *)(a1 + 48) = v11;
    }
    uint64_t v13 = (std::string *)v11[2];
    *((_DWORD *)v11 + 10) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
    if (v14) {
      v15.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::UseKeyAndValueFromEntry(a1);
    }
    if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v15)) {
      *(void *)(a1 + 48) = 0;
    }
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)a2, 1u);
  uint64_t v7 = *(CoreML::Specification::CustomLayerParams_CustomLayerParamValue **)(a1 + 40);
  uint64_t v8 = *(char **)a2;
  if (*(void *)a2 >= *(void *)(a2 + 8) || *v8 < 0)
  {
    int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_31:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    int VarintSizeAsIntFallback = *v8;
    *(void *)a2 = v8 + 1;
  }
  unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
  int v18 = v16;
  if (!CoreML::Specification::CustomLayerParams_CustomLayerParamValue::MergePartialFromCodedStream(v7, (_tc_google::protobuf::io::CodedInputStream *)a2, v17)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))
  {
    goto LABEL_31;
  }
  if (*(void *)a2 == *(void *)(a2 + 8) && (*(_DWORD *)(a2 + 44) || *(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 40)))
  {
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v14 = 1;
    *(unsigned char *)(a2 + 36) = 1;
    return v14;
  }
  return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::ReadBeyondKeyValuePair(a1, a2);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase(uint64_t a1, unsigned __int8 *a2)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(void *)(a1 + 16), a2, 0, &v6);
  if (!(void)v6) {
    return 0;
  }
  long long v4 = v6;
  uint64_t v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  Aligned = (CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)v4[3];
  if (!Aligned)
  {
    uint64_t v8 = (_tc_google::protobuf::Arena *)v4[4];
    if (!v8) {
      operator new();
    }
    CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v8, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>);
    v4[3] = Aligned;
  }
  if ((CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)v6 != Aligned)
  {
    uint64_t v9 = *((void *)Aligned + 2);
    *((void *)Aligned + 2) = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = v9;
    int v10 = *((_DWORD *)Aligned + 7);
    *((_DWORD *)Aligned + 7) = *(_DWORD *)(v6 + 28);
    *(_DWORD *)(v6 + 28) = v10;
    int v11 = *((_DWORD *)Aligned + 6);
    *((_DWORD *)Aligned + 6) = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v11;
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v12 = *(void *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  uint64_t v13 = *(void *)(v12 + 16);
  if ((uint64_t *)v13 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(v13 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v15) {
    v16.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v16)) {
    *(void *)(a1 + 48) = 0;
  }
  return v15;
}

void sub_223FBB5E4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = v1;
  *((_DWORD *)result + 1CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *uint64_t result = &unk_26D7668B0;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  unint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  long long v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::operator[](*(void *)(a1 + 8), (const std::string *)(a1 + 16));
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  *(_DWORD *)(v5 + 40) |= 2u;
  Aligned = *(std::string **)(v5 + 24);
  if (!Aligned)
  {
    uint64_t v7 = *(_tc_google::protobuf::Arena **)(v5 + 32);
    if (!v7) {
      operator new();
    }
    CoreML::Specification::CustomLayerParams_CustomLayerParamValue::CustomLayerParams_CustomLayerParamValue((CoreML::Specification::CustomLayerParams_CustomLayerParamValue *)Aligned);
    _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomLayerParams_CustomLayerParamValue>);
    *(void *)(v5 + 24) = Aligned;
    long long v3 = *(std::string **)(a1 + 40);
  }
  if (Aligned != v3)
  {
    double result = *(double *)&v3->__r_.__value_.__r.__words[2];
    v3->__r_.__value_.__r.__words[2] = Aligned->__r_.__value_.__r.__words[2];
    *(double *)&Aligned->__r_.__value_.__r.__words[2] = result;
    int v8 = HIDWORD(v3[1].__r_.__value_.__r.__words[0]);
    HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = HIDWORD(Aligned[1].__r_.__value_.__r.__words[0]);
    HIDWORD(Aligned[1].__r_.__value_.__r.__words[0]) = v8;
    int data = (int)v3[1].__r_.__value_.__l.__data_;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = Aligned[1].__r_.__value_.__l.__data_;
    LODWORD(Aligned[1].__r_.__value_.__l.__data_) = data;
  }
  return result;
}

void sub_223FBB7B8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = (const void ***)result;
LABEL_2:
  int v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    int v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v12);
          if (result)
          {
            unsigned int v23 = *v12;
            *uint64_t v12 = *v11;
            void *v11 = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    int v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      *uint64_t v12 = *v18;
      *int v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v12 - 1, v12))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
      uint64_t v12 = (const void ***)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const**>(v12, v20, a3);
    uint64_t v12 = v20 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const**>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const**,false>(v10, v20, a3, -v14, a5 & 1);
      uint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      unint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          unint64_t v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    int v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a3;
  *BOOL result = &unk_26D766A58;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::AdamOptimizer::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::WeightParams>::TypeHandler>(unint64_t *result, CoreML::Specification::WeightParams **a2, CoreML::Specification::WeightParams **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    uint64_t v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::WeightParams>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    uint64_t v19 = &a3[a5];
    unint64_t v20 = &a2[a5];
    do
    {
      char v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::WeightParams::WeightParams(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::WeightParams>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::WeightParams>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FBBF60(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

unint64_t *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::WeightParams>::Merge(CoreML::Specification::WeightParams *a1, CoreML::Specification::WeightParams *this)
{
  return CoreML::Specification::WeightParams::MergeFrom((unint64_t *)this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TransposeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BatchedMatMulLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ConcatNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SoftmaxNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReverseLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReverseSeqLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LoadConstantNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FillLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FillStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FillDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::WhereBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SinLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CosLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TanLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AsinLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AcosLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AtanLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SinhLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoshLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TanhLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AsinhLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AcoshLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AtanhLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PowBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Exp2LayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::WhereNonZeroLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MatrixBandPartLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UpperTriangularLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LowerTriangularLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BroadcastToLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BroadcastToStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BroadcastToDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AddBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MaxBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MinBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ModBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloorDivBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SubtractBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MultiplyBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DivideBroadcastableLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GatherLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ScatterLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GatherNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ScatterNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GatherAlongAxisLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ScatterAlongAxisLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StackLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RankPreservingReshapeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ConstantPaddingLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomNormalLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomNormalStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomNormalDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomUniformLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomUniformStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomUniformDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomBernoulliLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomBernoulliStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RandomBernoulliDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalDistributionLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceL1LayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceL2LayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMaxLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMinLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceSumLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceProdLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceMeanLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceLogSumLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceSumSquareLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReduceLogSumExpLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ExpandDimsLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FlattenTo2DLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeLikeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ReshapeDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SqueezeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TopKLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgMaxLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgMinLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SplitNDLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CeilLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RoundLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloorLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SignLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ClipLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TileLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GetShapeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ErfLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GeluLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RangeStaticLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RangeDynamicLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SlidingWindowsLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LayerNormalizationLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppressionLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ClampedReLULayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArgSortLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SliceBySizeLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CumSumLayerParams>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NetworkUpdateParameters>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LossLayer>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::LossLayer **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    uint64_t v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LossLayer>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    uint64_t v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::LossLayer **)&a2[a5];
    do
    {
      char v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::LossLayer::LossLayer(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::LossLayer>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LossLayer>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223FBD254(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::LossLayer>::Merge(CoreML::Specification::LossLayer *a1, std::string *this)
{
  return CoreML::Specification::LossLayer::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LossLayer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalCrossEntropyLossLayer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::MeanSquaredErrorLossLayer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Optimizer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SGDOptimizer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::AdamOptimizer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

__n128 turi::sanitize_url@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t turi::fs_impl::get_temp_info(turi::fs_impl *this)
{
  {
    operator new();
  }
  return turi::fs_impl::get_temp_info(void)::temp_info;
}

void sub_223FBD438(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C40086E2BE2);
  _Unwind_Resume(a1);
}

pthread_mutex_t *turi::fs_impl::tempfile_information::tempfile_information(pthread_mutex_t *this)
{
  uint64_t v2 = pthread_mutex_init(this, 0);
  assert_msg(v2 == 0, v3, v2);
  *(void *)&this[1].__opaque[24] = 0;
  *(void *)&this[1].__opaque[16] = (char *)this + 96;
  *(void *)this[1].__opaque = 0;
  this[1].__sig = (uint64_t)this[1].__opaque;
  *(void *)&this[1].__opaque[8] = 0;
  *(void *)&this[1].__opaque[32] = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&this[1].__opaque[48]);
  return this;
}

void sub_223FBD4F0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v3, *(char **)(v1 + 96));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v2, *(char **)(v1 + 72));
  turi::mutex::~mutex((pthread_mutex_t *)v1);
  _Unwind_Resume(a1);
}

void turi::get_temp_directories(void *a1@<X8>)
{
  __dst[3] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::fileio::get_cache_file_locations(&__s1);
  uint64_t v3 = (turi::fileio *)std::string::basic_string[abi:ne180100]<0>(&__p, "CHANGEME");
  char v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = (char *)v21;
  int v7 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v6 = v20;
  }
  if ((char *)size == v6)
  {
    if ((v21 & 0x80u) == 0) {
      p_p = (unsigned __int8 *)&__p;
    }
    else {
      p_p = (unsigned __int8 *)__p;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v3 = (turi::fileio *)memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_);
      BOOL v17 = v3 == 0;
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v12 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v11 = v12;
        int v14 = *p_p++;
        int v13 = v14;
        BOOL v16 = v9-- != 0;
        BOOL v17 = v11 == v13;
      }
      while (v11 == v13 && v16);
      if (((char)v21 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v4 & 0x80) == 0) {
          goto LABEL_20;
        }
        goto LABEL_24;
      }
    }
    else
    {
      BOOL v17 = 1;
      if (((char)v21 & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    BOOL v17 = 0;
    if (((char)v21 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  operator delete(__p);
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_20:
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v17) {
    goto LABEL_27;
  }
LABEL_25:
  turi::fileio::get_system_temp_directory((uint64_t *)&__str, v3);
  turi::fileio::set_cache_file_locations(&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_27:
  turi::fileio::get_cache_file_locations(&__s1);
  __p = ":";
  unint64_t v20 = "";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&__p);
  boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)a1, (uint64_t)&__s1, __dst, 1);
}

void sub_223FBD6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void *turi::get_system_user_name@<X0>(void *a1@<X8>)
{
  uid_t v3 = getuid();
  char v4 = getpwuid(v3);
  if (v4) {
    pw_name = v4->pw_name;
  }
  else {
    pw_name = "";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, pw_name);
}

void turi::num_temp_directories(turi *this)
{
  turi::get_temp_directories(&v1);
}

void turi::reap_unused_temp_files(turi *this)
{
}

void turi::get_turicreate_temp_directory(turi *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  turi::get_temp_directories(&v1);
}

void sub_223FBE5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<boost::filesystem::path>(uint64_t a1, uint64_t a2)
{
  char v4 = (char *)pthread_getspecific(*(void *)(a1 + 592));
  if (v4 && v4[280])
  {
    char v5 = v4 + 16;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    boost::io::detail::basic_string_inserter_imp<char,std::char_traits<char>,std::allocator<char>>(v5, (unsigned __int8 *)&__p, 0x26u, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_223FBE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::get_temp_name(turi::fs_impl *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  temp_info = (pthread_mutex_t *)turi::fs_impl::get_temp_info(a1);
  uint64_t v2 = (turi::fs_impl *)pthread_mutex_lock(temp_info);
  uint64_t v3 = turi::fs_impl::get_temp_info(v2);
  char v4 = *(turi **)(v3 + 112);
  *(void *)(v3 + 112) = (char *)v4 + 1;
  turi::get_turicreate_temp_directory(v4);
}

void sub_223FBECE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    JUMPOUT(0x223FBED80);
  }
  JUMPOUT(0x223FBED8CLL);
}

void sub_223FBED14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  JUMPOUT(0x223FBED74);
}

void sub_223FBED4C()
{
  if (*(char *)(v0 + 23) < 0) {
    JUMPOUT(0x223FBED5CLL);
  }
  if (v1 < 0) {
    JUMPOUT(0x223FBED80);
  }
  JUMPOUT(0x223FBED8CLL);
}

uint64_t boost::uuids::random_generator_pure::operator()(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  boost::uuids::detail::random_provider_base::get_random_bytes(a1, (char *)v2, 0x10uLL);
  BYTE6(v2[0]) = BYTE6(v2[0]) & 0xF | 0x40;
  return v2[0];
}

std::string *boost::filesystem::path::operator/=(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v3 = boost::filesystem::path::operator/=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_223FBEEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::get_temp_name_prefer_hdfs(turi::fs_impl *a1)
{
}

uint64_t turi::delete_temp_file(uint64_t a1)
{
  temp_info = (pthread_mutex_t *)turi::fs_impl::get_temp_info((turi::fs_impl *)a1);
  uint64_t v3 = (turi::fs_impl *)pthread_mutex_lock(temp_info);
  uint64_t v4 = turi::fs_impl::get_temp_info(v3);
  uint64_t v5 = v4 + 72;
  uint64_t v6 = *(void *)(v4 + 72);
  if (v6)
  {
    uint64_t v7 = v4 + 80;
    do
    {
      uint64_t v4 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v6 + 32), (const void **)a1);
      int v8 = (uint64_t *)(v6 + 8);
      if (!v4)
      {
        int v8 = (uint64_t *)v6;
        uint64_t v5 = v6;
      }
      uint64_t v6 = *v8;
    }
    while (*v8);
  }
  uint64_t v9 = (turi::fs_impl *)turi::fs_impl::get_temp_info((turi::fs_impl *)v4);
  uint64_t v10 = *((void *)v9 + 8);
  int v11 = (turi::fs_impl *)turi::fs_impl::get_temp_info(v9);
  if ((turi::fs_impl *)v5 != (turi::fs_impl *)((char *)v11 + 72))
  {
    int v12 = *(const std::string::value_type **)a1;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    else
    {
      int v12 = (const std::string::value_type *)a1;
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    int v14 = *(unsigned __int8 **)(v5 + 32);
    int v15 = *(char *)(v5 + 55);
    if (v15 >= 0) {
      int v14 = (unsigned __int8 *)(v5 + 32);
    }
    uint64_t v16 = *(void *)(v5 + 40);
    if (v15 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(v5 + 55);
    }
    if (v13 && v16)
    {
      uint64_t v17 = v16 - 1;
      uint64_t v18 = v13 - 1;
      uint64_t v19 = v14;
      while (*(unsigned __int8 *)v12 == *v19)
      {
        ++v19;
        if (v18)
        {
          ++v12;
          uint64_t v20 = v17--;
          --v18;
          if (v20) {
            continue;
          }
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = v14;
LABEL_22:
      if (v19 == &v14[v16])
      {
        uint64_t v34 = turi::fs_impl::get_temp_info(v11);
        goto LABEL_49;
      }
    }
  }
  if (v5 == v10)
  {
LABEL_42:
    uint64_t v29 = 0;
    goto LABEL_63;
  }
  uint64_t v21 = *(void *)v5;
  if (*(void *)v5)
  {
    do
    {
      uint64_t v22 = v21;
      uint64_t v21 = *(void *)(v21 + 8);
    }
    while (v21);
  }
  else
  {
    do
    {
      uint64_t v22 = *(void *)(v5 + 16);
      BOOL v28 = *(void *)v22 == v5;
      uint64_t v5 = v22;
    }
    while (v28);
  }
  unsigned int v23 = *(unsigned __int8 **)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v24 = *(void *)(a1 + 8);
  }
  else
  {
    unsigned int v23 = (unsigned __int8 *)a1;
    uint64_t v24 = *(unsigned __int8 *)(a1 + 23);
  }
  unint64_t v25 = *(unsigned __int8 **)(v22 + 32);
  int v26 = *(char *)(v22 + 55);
  if (v26 >= 0) {
    unint64_t v25 = (unsigned __int8 *)(v22 + 32);
  }
  uint64_t v27 = *(void *)(v22 + 40);
  if (v26 >= 0) {
    uint64_t v27 = *(unsigned __int8 *)(v22 + 55);
  }
  if (v24) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28)
  {
    uint64_t v30 = v27 - 1;
    uint64_t v31 = v24 - 1;
    unint64_t v32 = v25;
    while (*v23 == *v32)
    {
      ++v32;
      if (v31)
      {
        ++v23;
        uint64_t v33 = v30--;
        --v31;
        if (v33) {
          continue;
        }
      }
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  unint64_t v32 = v25;
LABEL_41:
  if (v32 != &v25[v27]) {
    goto LABEL_42;
  }
  uint64_t v34 = turi::fs_impl::get_temp_info(v11);
  uint64_t v5 = v22;
LABEL_49:
  std::__tree<std::string>::erase((uint64_t **)(v34 + 64), v5);
  unsigned int v35 = (int *)global_logger();
  if (v35[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v35)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v36 = (file_logger *)global_logger();
    started = file_logger::start_stream(v36, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/temp_files.cpp", "delete_temp_file", 371, 1);
    int v38 = pthread_getspecific(*((void *)started + 74));
    if (v38 && *((unsigned char *)v38 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)"Deleting ", 9);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
    unint64_t v39 = (pthread_key_t *)file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    unsigned int v40 = pthread_getspecific(v39[74]);
    if (v40 && *((unsigned char *)v40 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush((file_logger *)v39);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v29 = turi::fileio::delete_path(a1, 3);
LABEL_63:
  pthread_mutex_unlock(temp_info);
  return v29;
}

void sub_223FBF1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pthread_mutex_unlock(v14);
  _Unwind_Resume(a1);
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  *(_DWORD *)this = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v5, "open /dev/urandom");
    std::runtime_error::runtime_error(&v6, &v5);
    v6.__vftable = (std::runtime_error_vtbl *)&unk_26D766CA0;
    uint64_t v7 = v4;
    boost::exception_detail::throw_exception_<boost::uuids::entropy_error>(&v6, (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/uuid/detail/random_provider_posix.ipp", 60);
  }
  return this;
}

void sub_223FBF2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<boost::uuids::entropy_error>(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::runtime_error::runtime_error(&v9, a1);
  int v8 = a1[1].__vftable;
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  v9.__vftable = (std::runtime_error_vtbl *)&unk_26D766C50;
  uint64_t v10 = v8;
  int v11 = &unk_26D766C80;
  uint64_t v14 = a3;
  int v15 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>((uint64_t)&v9);
}

void sub_223FBF390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v11);
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  std::runtime_error::runtime_error(&v5, (const std::runtime_error *)a1);
  uint64_t v3 = *(void *)(a1 + 16);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D766CA0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = v3;
  uint64_t v7 = &unk_26D754388;
  uint64_t v8 = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v9 = *(_OWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 56);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D766C50;
  uint64_t v7 = &unk_26D766C80;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::clone_impl((uint64_t)exception, (uint64_t)&v5);
}

void sub_223FBF4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11)
{
  std::runtime_error::~runtime_error(&a9);
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::uuids::entropy_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = &unk_26D7542E8;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D766CA0;
  v4[1].__vftable = *(std::runtime_error_vtbl **)(a2 + 16);
  v4[1].__imp_.__imp_ = (const char *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v6;
  *(void *)a1 = &unk_26D766BA8;
  *(void *)(a1 + 24) = &unk_26D766BE8;
  *(void *)(a1 + 64) = &unk_26D766C20;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a2 + 40);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 32), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 64) = &unk_26D7542E8;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D766CA0;
  v4[1].__vftable = *(std::runtime_error_vtbl **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26D754388;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v6;
  *(void *)a1 = &unk_26D766BA8;
  *(void *)(a1 + 24) = &unk_26D766BE8;
  *(void *)(a1 + 64) = &unk_26D766C20;
  return a1;
}

void sub_223FBF744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<boost::uuids::entropy_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::clone()
{
}

void sub_223FBF850(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C400E95209ELL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_223FBF8BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 3);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 3) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 4);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::uuids::entropy_error>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::uuids::entropy_error>::~error_info_injector(uint64_t a1)
{
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

void sub_223FBFBC8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void turi::get_turicreate_temp_directory(unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/temp_files.cpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"temp_dirs.size()", 16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/temp_files.cpp", "operator()", 173, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::get_turicreate_temp_directory(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FBFD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void boost::filesystem::recursive_directory_iterator::recursive_directory_iterator()
{
}

void sub_223FBFF50(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v2 + 8));
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::filesystem::detail::recur_dir_itr_imp>::shared_ptr<boost::filesystem::detail::recur_dir_itr_imp>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::filesystem::detail::recur_dir_itr_imp>(&v2);
}

void sub_223FBFFCC(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::filesystem::detail::recur_dir_itr_imp>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223FC0050(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::filesystem::detail::recur_dir_itr_imp>(v1);
  __cxa_rethrow();
}

void sub_223FC0064(_Unwind_Exception *a1)
{
}

void **boost::checked_delete<boost::filesystem::detail::recur_dir_itr_imp>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result;
    std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x22A614FA0](v1, 0x1020C4016EE4530);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::filesystem::detail::recur_dir_itr_imp>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void ***)(result + 16);
    std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x22A614FA0](v1, 0x1020C4016EE4530);
  }
  return result;
}

void std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (atomic_uint **)**a1;
  if (v2)
  {
    uint64_t v4 = (atomic_uint **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 2;
        boost::detail::shared_count::~shared_count(v4 - 1);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<boost::filesystem::directory_iterator>::push_back[abi:ne180100](uint64_t *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    *(void *)char v15 = *a2;
    uint64_t v16 = a2[1];
    *((void *)v15 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
    }
    v17[2] = v15 + 16;
    std::vector<boost::filesystem::directory_iterator>::__swap_out_circular_buffer(a1, v17);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void v17[5];

  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    *(void *)char v15 = *a2;
    uint64_t v16 = a2[1];
    *((void *)v15 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
    }
    v17[2] = v15 + 16;
    std::vector<boost::filesystem::directory_iterator>::__swap_out_circular_buffer(a1, v17);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_223FC02BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<boost::filesystem::directory_iterator>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 - 16);
      v2 -= 16;
      *(void *)(v4 - 16) = v5;
      v4 -= 16;
      uint64_t v6 = *(void *)(v2 + 8);
      *(void *)(v4 + 8) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      }
    }
    while (v2 != v3);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<boost::filesystem::path>::__push_back_slow_path<boost::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = v15.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<boost::filesystem::path>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  uint64_t v13 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_223FC04A8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<boost::filesystem::path>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::filesystem::path>,std::reverse_iterator<boost::filesystem::path*>,std::reverse_iterator<boost::filesystem::path*>,std::reverse_iterator<boost::filesystem::path*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::filesystem::path>,std::reverse_iterator<boost::filesystem::path*>,std::reverse_iterator<boost::filesystem::path*>,std::reverse_iterator<boost::filesystem::path*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    unint64_t v9 = (void *)(a7 - 24);
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      long long v10 = *(_OWORD *)(a3 - 24);
      v9[2] = *(void *)(a3 - 8);
      *(_OWORD *)unint64_t v9 = v10;
      *(unsigned char *)(a3 - 1) = 0;
      *(unsigned char *)(a3 - 24) = 0;
      *((void *)&v15 + 1) = v9;
      v7 -= 24;
      v9 -= 3;
      a3 -= 24;
    }
    while (a3 != a5);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,std::reverse_iterator<boost::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,std::reverse_iterator<boost::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void boost::filesystem::recursive_directory_iterator::increment(boost::filesystem::recursive_directory_iterator *this)
{
  boost::filesystem::detail::recur_dir_itr_imp::increment(*(void *)this, 0);
  if (**(void **)this == *(void *)(*(void *)this + 8))
  {
    uint64_t v2 = (atomic_uint *)*((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v3 = v2;
    boost::detail::shared_count::~shared_count(&v3);
  }
}

void boost::filesystem::detail::recur_dir_itr_imp::increment(uint64_t a1, uint64_t a2)
{
  LODWORD(v11) = 0;
  *((void *)&v11 + 1) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  uint64_t v4 = boost::filesystem::detail::recur_dir_itr_imp::push_directory(a1, (uint64_t)&v11);
  if (v4) {
    goto LABEL_11;
  }
  for (uint64_t i = *(void *)(a1 + 8); *(void *)a1 != i; --*(_DWORD *)(a1 + 24))
  {
    boost::filesystem::detail::directory_iterator_increment((boost::system::detail *)(i - 16), 0);
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v6 = *(void *)(i - 16);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 40);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v10.__r_.__value_.__l.__size_);
      if (v7) {
        break;
      }
    }
    else
    {
      boost::detail::shared_count::~shared_count((atomic_uint **)&v10.__r_.__value_.__l.__size_);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t i = v8 - 16;
    boost::detail::shared_count::~shared_count((atomic_uint **)(v8 - 8));
    *(void *)(a1 + 8) = i;
  }
  if (!v11)
  {
LABEL_11:
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
    }
  }
  else
  {
    if (!a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v10, "filesystem::recursive_directory_iterator directory error");
      boost::filesystem::filesystem_error::filesystem_error(exception, &v10, (std::runtime_error_vtbl *)v11, *((const char **)&v11 + 1));
    }
    *(_OWORD *)a2 = v11;
  }
}

void sub_223FC07A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::detail::recur_dir_itr_imp::push_directory(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  int v4 = *(_DWORD *)(a1 + 28);
  if ((v4 & 2) != 0)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 28) = v4 & 0xFFFFFFFD;
  }
  else
  {
    if ((v4 & 1) != 0
      || (boost::filesystem::directory_entry::m_get_symlink_status(*(boost::system::detail **)(*(void *)(a1 + 8) - 16), a2, v6), !*(_DWORD *)a2)&& ((*(unsigned char *)(a1 + 28) & 1) != 0 || v6[0] != 4))
    {
      boost::filesystem::directory_entry::m_get_status(*(_DWORD **)(*(void *)(a1 + 8) - 16), a2, &v7);
      if (!*(_DWORD *)a2 && LODWORD(v7) == 3) {
        boost::filesystem::directory_iterator::directory_iterator();
      }
    }
    return 0;
  }
  return result;
}

void boost::filesystem::directory_iterator::directory_iterator()
{
}

void sub_223FC0AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, const std::string *a2, std::runtime_error_vtbl *a3, const char *a4)
{
  a1[1].__vftable = a3;
  a1[1].__imp_.__imp_ = a4;
  a1[2].__imp_.__imp_ = 0;
  a1[3].__vftable = 0;
  a1[2].__vftable = 0;
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D75D1F0;
  a1[3].__imp_.__imp_ = 0;
  a1[4].__vftable = 0;
  operator new();
}

void sub_223FC0B7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  __cxa_begin_catch(a1);
  long long v10 = *v9;
  *(void *)unint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)&a9 + 1) = *((void *)&v10 + 1);
  boost::detail::shared_count::~shared_count((atomic_uint **)&a9 + 1);
  __cxa_end_catch();
  JUMPOUT(0x223FC0B64);
}

void boost::shared_ptr<boost::filesystem::filesystem_error::m_imp>::reset<boost::filesystem::filesystem_error::m_imp>(uint64_t a1, uint64_t a2)
{
  boost::shared_ptr<boost::filesystem::filesystem_error::m_imp>::shared_ptr<boost::filesystem::filesystem_error::m_imp>(&v2, a2);
}

void boost::shared_ptr<boost::filesystem::filesystem_error::m_imp>::shared_ptr<boost::filesystem::filesystem_error::m_imp>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::filesystem::filesystem_error::m_imp>(&v2);
}

void sub_223FC0C48(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::filesystem::filesystem_error::m_imp>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223FC0CCC(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::filesystem::filesystem_error::m_imp>(v1);
  __cxa_rethrow();
}

void sub_223FC0CE0(_Unwind_Exception *a1)
{
}

uint64_t boost::checked_delete<boost::filesystem::filesystem_error::m_imp>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 71) < 0) {
      operator delete(*(void **)(result + 48));
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::filesystem::filesystem_error::m_imp>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(char *)(v1 + 71) < 0) {
      operator delete(*(void **)(v1 + 48));
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

_OWORD *std::__tree<boost::filesystem::path>::__emplace_unique_key_args<boost::filesystem::path,boost::filesystem::path>(uint64_t **a1, std::string *this, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<boost::filesystem::path>::__find_equal<boost::filesystem::path>((uint64_t)a1, &v9, this);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<boost::filesystem::path>::__find_equal<boost::filesystem::path>(uint64_t a1, void *a2, std::string *this)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        double v7 = (void *)v4;
        uint64_t v8 = (std::string *)(v4 + 32);
        if ((boost::filesystem::path::compare(this, (std::string *)(v4 + 32)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((boost::filesystem::path::compare(v8, this) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    double v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t boost::uuids::detail::random_provider_base::get_random_bytes(uint64_t this, char *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (int *)this;
    unint64_t v6 = 0;
    do
    {
      this = read(*v5, &a2[v6], a3 - v6);
      if (this < 0)
      {
        this = (uint64_t)__error();
        if (*(_DWORD *)this != 4)
        {
          uint64_t v7 = *(int *)this;
          std::string::basic_string[abi:ne180100]<0>(&v8, "read");
          std::runtime_error::runtime_error(&v9, &v8);
          v9.__vftable = (std::runtime_error_vtbl *)&unk_26D766CA0;
          uint64_t v10 = v7;
          boost::exception_detail::throw_exception_<boost::uuids::entropy_error>(&v9, (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/uuid/detail/random_provider_posix.ipp", 98);
        }
      }
      else
      {
        v6 += this;
      }
    }
    while (v6 < a3);
  }
  return this;
}

void sub_223FC0FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *boost::io::detail::basic_string_inserter_imp<char,std::char_traits<char>,std::allocator<char>>(void *a1, unsigned __int8 *a2, unsigned __int8 a3, unsigned __int8 a4)
{
  int v7 = a4;
  unsigned __int8 v15 = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v15, 1);
  uint64_t v8 = a2[23];
  int v9 = (char)v8;
  uint64_t v10 = &a2[v8];
  if (v9 >= 0) {
    long long v11 = v10;
  }
  else {
    long long v11 = (unsigned __int8 *)(*(void *)a2 + *((void *)a2 + 1));
  }
  if (v9 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  for (; a2 != v11; ++a2)
  {
    int v12 = *a2;
    if (v12 == v7 || v12 == a3)
    {
      unsigned __int8 v17 = a3;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
      LOBYTE(v12) = *a2;
    }
    char v18 = v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v18, 1);
  }
  char v16 = v7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v16, 1);
  return a1;
}

uint64_t boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(uint64_t a1, std::string *a2)
{
  boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::lexical_istream_limited_src((uint64_t)v6);
  boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::shl_input_streamable<boost::uuids::uuid const>(v6);
  uint64_t v4 = v3;
  if (v3) {
    std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, v9, v10, v10 - v9);
  }
  std::ostream::~ostream();
  v6[0].n128_u64[0] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  return v4;
}

void sub_223FC11A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::lexical_istream_limited_src(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D766D90;
  *(void *)(a1 + 104) = MEMORY[0x263F8C2F8] + 24;
  *(void *)(a1 + 112) = MEMORY[0x263F8C2F8] + 64;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(void *)(a1 + 272) = a1 + 264;
  *(void *)(a1 + 28CoreML::Specification::AdamOptimizer::New(this, 0) = a1 + 266;
  return a1;
}

uint64_t boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  return std::streambuf::~streambuf();
}

void boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x22A614FA0);
}

void *boost::detail::basic_pointerbuf<char,std::stringbuf>::setbuf(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekoff@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1;
    goto LABEL_19;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    uint64_t v7 = -1;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }
  uint64_t v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v7;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = -1;
  return result;
}

__n128 boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::shl_input_streamable<boost::uuids::uuid const>(__n128 *a1)
{
  uint64_t v2 = &a1[6].n128_i64[1];
  uint64_t v3 = (std::ios_base *)&a1[6].n128_i8[*(void *)(a1[6].n128_u64[1] - 24) + 8];
  v3->__exceptions_ = 1;
  std::ios_base::clear(v3, v3->__rdstate_);
  boost::uuids::operator<<<char,std::char_traits<char>>(v2);
  __n128 result = *(__n128 *)(*(uint64_t *)((char *)v2 + *(void *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t *boost::uuids::operator<<<char,std::char_traits<char>>(uint64_t *a1)
{
  uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v2->__fmtflags_;
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver((uint64_t)v29, v2);
  MEMORY[0x22A614950](v28, a1);
  if (v28[0])
  {
    std::ios_base::fmtflags v26 = fmtflags;
    uint64_t v27 = v2;
    uint64_t v4 = *a1;
    uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = *((void *)v5 + 3);
    *((void *)v5 + 3) = 0;
    uint64_t v7 = (char *)a1 + *(void *)(v4 - 24);
    int v8 = *((_DWORD *)v7 + 2);
    int v9 = *((_DWORD *)v7 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(v4 - 24)));
      uint64_t v10 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v30);
      *((_DWORD *)v7 + 36) = v9;
    }
    if ((v8 & 0x90) != 0 && v6 >= 37)
    {
      uint64_t v11 = v6 - 36;
      do
      {
        LOBYTE(v30.__locale_) = v9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
        --v11;
      }
      while (v11);
    }
    uint64_t v12 = *a1;
    *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)a1 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v12 - 24) + 8) & 0xFFFFFF4F | 0x80;
    char v13 = (const std::ios_base *)((char *)a1 + *(void *)(v12 - 24));
    std::ios_base::getloc(v13);
    char v24 = v8;
    uint64_t v25 = v6;
    long long v14 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 48);
    std::locale::~locale(&v30);
    if (v13[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v13);
      char v16 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
      std::locale::~locale(&v30);
      v13[1].__fmtflags_ = v17;
    }
    unint64_t v18 = 0;
    v13[1].__fmtflags_ = v15;
    uint64_t v19 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 2;
      std::ostream::operator<<();
      if (v18 <= 9 && ((1 << v18) & 0x2A8) != 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        uint64_t v20 = std::locale::use_facet(&v30, v19);
        char v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 45);
        std::locale::~locale(&v30);
        LOBYTE(v30.__locale_) = v21;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
      }
      ++v18;
    }
    while (v18 != 16);
    if ((v24 & 0x20) != 0 && v25 >= 37)
    {
      uint64_t v22 = v25 - 36;
      do
      {
        LOBYTE(v30.__locale_) = v9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
        --v22;
      }
      while (v22);
    }
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
    uint64_t v2 = v27;
    std::ios_base::fmtflags fmtflags = v26;
  }
  MEMORY[0x22A614960](v28);
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore((uint64_t)v29);
  v2->__fmtflags_ = fmtflags;
  return a1;
}

void sub_223FC1980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  *(_DWORD *)(a14 + 8) = a13;
  _Unwind_Resume(a1);
}

uint64_t turi::union_fstream::union_fstream(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    v6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  int v8 = (void *)(a1 + 40);
  *(void *)(a1 + 32) = -1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if ((a3 & 0x18) == 0) {
    turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_1::operator()();
  }
  if ((a3 & 0x18) == 0x18) {
    turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_0::operator()();
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __s = *(std::string *)a2;
  }
  turi::fileio::get_protocol(&__s, (std::string::size_type)&__p);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v40 < 0)
  {
    uint64_t v11 = v39;
    if (v39 == 4)
    {
      if (*(_DWORD *)__p == 1936090216) {
        goto LABEL_94;
      }
      uint64_t v11 = v39;
    }
    else if (v39 == 5 && *(_DWORD *)__p == 1751343459 && *((unsigned char *)__p + 4) == 101)
    {
      goto LABEL_39;
    }
    if (v11 == 2)
    {
      if (*(_WORD *)__p == 13171) {
        goto LABEL_38;
      }
      uint64_t v11 = v39;
    }
    if (v11 != 4) {
      goto LABEL_58;
    }
    p_p = __p;
    goto LABEL_57;
  }
  if (v40 == 2)
  {
    if ((unsigned __int16)__p != 13171) {
      goto LABEL_58;
    }
LABEL_38:
    v42.__r_.__value_.__r.__words[0] = a2;
    turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_3::operator()();
  }
  if (v40 == 4)
  {
    if (__p != 1936090216)
    {
      p_p = &__p;
LABEL_57:
      if (*p_p == 1701603686)
      {
        int v9 = std::string::basic_string(&v42, (const std::string *)a2, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v41);
        if (*(char *)(a2 + 23) < 0) {
          operator delete(*(void **)a2);
        }
        *(std::string *)a2 = v42;
        if ((a3 & 0x10) == 0)
        {
LABEL_59:
          instance = turi::file_download_cache::get_instance((turi::file_download_cache *)v9);
          turi::file_download_cache::get_file((uint64_t)instance, a2, (uint64_t)&v42);
          if (*(char *)(a2 + 23) < 0) {
            operator delete(*(void **)a2);
          }
          *(std::string *)a2 = v42;
          operator new();
        }
LABEL_67:
        operator new();
      }
LABEL_58:
      if ((a3 & 0x10) == 0) {
        goto LABEL_59;
      }
      goto LABEL_67;
    }
LABEL_94:
    v42.__r_.__value_.__r.__words[0] = a2;
    turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_2::operator()();
  }
  if (v40 != 5) {
    goto LABEL_58;
  }
  if (__p != 1751343459 || BYTE4(__p) != 101) {
    goto LABEL_58;
  }
LABEL_39:
  turi::fileio::get_cache_prefix(&v42);
  MEMORY[0x22A614D20](&v36);
  std::locale::locale(v41, &v36);
  int v14 = *(char *)(a2 + 23);
  BOOL v15 = v14 < 0;
  if (v14 >= 0) {
    char v16 = (char *)a2;
  }
  else {
    char v16 = *(char **)a2;
  }
  uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  if (v15) {
    uint64_t v17 = *(void *)(a2 + 8);
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v18 = &v42;
  }
  else {
    unint64_t v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  unsigned int v35 = v18;
  if (v17 && size)
  {
    std::string::size_type v20 = size - 1;
    uint64_t v21 = v17 - 1;
    while (boost::algorithm::is_iequal::operator()<char,char>(v41, v16, (char *)v18))
    {
      unint64_t v18 = (std::string *)((char *)v18 + 1);
      if (v21)
      {
        ++v16;
        std::string::size_type v22 = v20--;
        --v21;
        if (v22) {
          continue;
        }
      }
      goto LABEL_56;
    }
    BOOL v23 = 0;
  }
  else
  {
LABEL_56:
    BOOL v23 = v18 == (std::string *)((char *)v35 + size);
  }
  std::locale::~locale(v41);
  assert_msg(v23, v26);
  std::locale::~locale(&v36);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)a1 = 2;
  if ((a3 & 0x10) != 0) {
    operator new();
  }
  std::allocate_shared[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>,std::string &,void>(a2, &v42);
  turi::fileio_impl::cache_stream_source::get_underlying_stream((turi::fileio_impl::cache_stream_source *)(v42.__r_.__value_.__r.__words[0] + 88), (uint64_t)v41);
  long long v27 = *(_OWORD *)&v41[0].__locale_;
  v41[0].__locale_ = 0;
  v41[1].__locale_ = 0;
  BOOL v28 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v27;
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    if (v41[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41[1].__locale_);
    }
    uint64_t v29 = (void *)*v8;
  }
  else
  {
    uint64_t v29 = (void *)v27;
  }
  std::string::size_type v30 = v42.__r_.__value_.__r.__words[0];
  if (!v29)
  {
    std::string::size_type v31 = v42.__r_.__value_.__l.__size_;
    if (v42.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v32 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v30;
    *(void *)(a1 + 48) = v31;
    if (v32)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      std::string::size_type v30 = v42.__r_.__value_.__r.__words[0];
    }
  }
  *(void *)(a1 + 32) = turi::fileio_impl::cache_stream_source::file_size((turi::fileio_impl::cache_stream_source *)(v30 + 88));
  long long v33 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
  if (v42.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v33;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v42.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42.__r_.__value_.__l.__size_);
  }
  if (*(_DWORD *)(*v8 + *(void *)(*(void *)*v8 - 24) + 32)) {
    turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_7::operator()();
  }
  if (v40 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_223FC2240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, std::locale a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  unsigned int v50 = *(std::__shared_weak_count **)(v48 + 80);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v48 + 64);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  unint64_t v52 = *(std::__shared_weak_count **)(v48 + 48);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (*(char *)(v48 + 31) < 0) {
    operator delete(*a11);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<std::ostream>::reset[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(&v2, a2);
}

void *boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>::stream<std::string>(void *a1, uint64_t a2)
{
  a1[21] = MEMORY[0x263F8C368] + 16;
  boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::stream_base((uint64_t)a1, (uint64_t *)&off_26D766E98);
  *a1 = &unk_26D766E58;
  a1[21] = &unk_26D766E80;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::fileio_impl::cache_stream_sink::cache_stream_sink(v6, &__p);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open((uint64_t)(a1 + 1), (uint64_t)v6, -1);
  turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_223FC2528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v15 + 8);
  MEMORY[0x22A614E30](v16);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::ostream>::reset[abi:ne180100]<std::ofstream,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<std::ofstream,void>(&v2, a2);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x22A614840](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_223FC275C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::istream>::reset[abi:ne180100]<std::ifstream,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::istream>::shared_ptr[abi:ne180100]<std::ifstream,void>(&v2, a2);
}

void sub_223FC2974(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_6::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output_stream->good()", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", "operator()", 145, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_6::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC2AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_7::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input_stream->good()", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", "operator()", 147, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::union_fstream::union_fstream(std::string,unsigned int,std::string)::$_7::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC2CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::union_fstream::~union_fstream(turi::union_fstream *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t turi::union_fstream::get_istream@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  if (!v2) {
    turi::union_fstream::get_istream(void)::$_0::operator()();
  }
  uint64_t v3 = *(void *)(this + 48);
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void turi::union_fstream::get_istream(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input_stream != __null", 22);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", "operator()", 165, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::union_fstream::get_istream(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC2F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::union_fstream::get_ostream@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 56);
  if (!v2) {
    turi::union_fstream::get_ostream(void)::$_0::operator()();
  }
  uint64_t v3 = *(void *)(this + 64);
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void turi::union_fstream::get_ostream(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output_stream != __null", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/union_fstream.cpp", "operator()", 170, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::union_fstream::get_ostream(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC3178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::stream_base(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 4;
  *(void *)(a1 + 8) = &unk_26D766FD0;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[3];
  uint64_t v6 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = a2[2];
  char v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_223FC34A0(_Unwind_Exception *a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x22A614E30](a1 + 168);
  return a1;
}

void boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x22A614E30](a1 + 168);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  JUMPOUT(0x22A614E30);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  MEMORY[0x22A614E30](v1 + 168);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x22A614E30](a1 + 168);
  return a1;
}

void boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x22A614E30](a1 + 168);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>::~stream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  JUMPOUT(0x22A614E30);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  MEMORY[0x22A614E30](v1 + 168);
  JUMPOUT(0x22A614FA0);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::imbue(uint64_t a1, const std::locale *a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(std::locale **)(a1 + 120);
    if (v2)
    {
      uint64_t v4 = v2 + 1;
      (*((void (**)(std::locale *))v2->__locale_ + 2))(v2);
      std::locale::locale(&v5, v4);
      std::locale::operator=(v4, a2);
      std::locale::~locale(&v5);
    }
  }
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync(uint64_t a1)
{
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
  uint64_t result = *(void *)(a1 + 120);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 48))(result);
    return 0;
  }
  return result;
}

void sub_223FC38D4(void *a1)
{
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::underflow(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)a1[3];
  if (!v2)
  {
    (*(void (**)(void *))(*a1 + 168))(a1);
    uint64_t v2 = (unsigned __int8 *)a1[3];
  }
  if ((unint64_t)v2 >= a1[4])
  {
    uint64_t v4 = a1[18];
    if (v4 >= (uint64_t)&v2[-a1[2]]) {
      size_t v5 = (size_t)&v2[-a1[2]];
    }
    else {
      size_t v5 = a1[18];
    }
    if (v5)
    {
      uint64_t v6 = -(uint64_t)v5;
      memmove((void *)(a1[16] + v4 - v5), &v2[-v5], v5);
      uint64_t v4 = a1[18];
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = a1[16] + v4;
    a1[2] = v7 + v6;
    a1[3] = v7;
    a1[4] = v7;
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::output>::read<turi::fileio_impl::general_fstream_sink,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>();
  }
  return *v2;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::overflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 152) & 2) != 0 && !*(void *)(a1 + 48)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  }
  if (a2 == -1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 152) & 2) == 0)
  {
    char v6 = a2;
    if (turi::fileio_impl::cache_stream_sink::write((turi::fileio_impl::cache_stream_sink *)(a1 + 72), &v6, 1uLL) == (const char *)1) {
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  if (v4 == *(unsigned char **)(a1 + 56))
  {
    boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
    uint64_t v4 = *(unsigned char **)(a1 + 48);
    if (v4 == *(unsigned char **)(a1 + 56)) {
      return 0xFFFFFFFFLL;
    }
  }
  *uint64_t v4 = a2;
  ++*(void *)(a1 + 48);
  return a2;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::set_next(uint64_t result, uint64_t a2)
{
  *(void *)(result + 12CoreML::Specification::AdamOptimizer::New(this, 0) = a2;
  return result;
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::close_impl(void *a1, int a2)
{
  if (a2 != 8)
  {
    if (a2 == 16)
    {
      (*(void (**)(void *))(*a1 + 48))(a1);
      a1[6] = 0;
      a1[7] = 0;
      a1[5] = 0;
    }
    turi::fileio_impl::cache_stream_sink::close((turi::fileio_impl::cache_stream_sink *)(a1 + 9));
  }
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::auto_close(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 152) >> 2) & 1;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::set_auto_close(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 152) = *(_DWORD *)(result + 152) & 0xFFFFFFFB | v2;
  return result;
}

BOOL boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::strict_sync(uint64_t a1)
{
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
  uint64_t v2 = *(void *)(a1 + 120);
  return !v2 || (*(unsigned int (**)(uint64_t))(*(void *)v2 + 48))(v2) != -1;
}

void sub_223FC3BDC(void *a1)
{
}

void *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::component_type()
{
}

void *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::init_get_area(void *result)
{
  uint64_t v1 = result[16];
  result[2] = v1;
  result[3] = v1;
  result[4] = v1;
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::init_put_area(uint64_t result)
{
  if ((*(unsigned char *)(result + 152) & 2) != 0)
  {
    uint64_t v1 = *(void *)(result + 128);
    uint64_t v2 = v1 + *(void *)(result + 136);
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
  }
  *(void *)(result + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v1;
  *(void *)(result + 48) = v1;
  *(void *)(result + 56) = v2;
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~indirect_streambuf(uint64_t a1)
{
  *(void *)a1 = &unk_26D7670C8;
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2) {
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)(a1 + 72));
    *(unsigned char *)(a1 + 112) = 0;
  }
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~indirect_streambuf(uint64_t a1)
{
  *(void *)a1 = &unk_26D7670C8;
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2) {
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)(a1 + 72));
    *(unsigned char *)(a1 + 112) = 0;
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(uint64_t a1)
{
  *(void *)a1 = &unk_26D766FD0;
  if ((~*(_DWORD *)(a1 + 152) & 5) == 0) {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, (turi::fileio_impl::cache_stream_sink *)(a1 + 72), (_DWORD *)(a1 + 152));
  }
  *(void *)a1 = &unk_26D7670C8;
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2) {
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)(a1 + 72));
    *(unsigned char *)(a1 + 112) = 0;
  }
  return std::streambuf::~streambuf();
}

void sub_223FC3DDC(void *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::cache_stream_sink *a5, _DWORD *a6)
{
  uint64_t result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>>>(a1, a2, a3, a4, a5);
  *a6 = 0;
  return result;
}

void sub_223FC3E14(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223FC3E24(_Unwind_Exception *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::cache_stream_sink *a5)
{
  uint64_t v6 = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*((unsigned char *)a5 + 40))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink(a5);
    *((unsigned char *)a5 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  }
  return v6;
}

void sub_223FC3E78(void *a1)
{
  __cxa_begin_catch(a1);
  if (*((unsigned char *)v1 + 40))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink(v1);
    *((unsigned char *)v1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  }
  __cxa_rethrow();
}

void sub_223FC3E98(_Unwind_Exception *a1)
{
}

const char *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl(const char *result)
{
  uint64_t v1 = (const char *)*((void *)result + 5);
  uint64_t v2 = *((void *)result + 6);
  uint64_t v3 = (const char *)(v2 - (void)v1);
  if (v2 - (uint64_t)v1 >= 1)
  {
    uint64_t v4 = result;
    uint64_t result = turi::fileio_impl::cache_stream_sink::write((turi::fileio_impl::cache_stream_sink *)(result + 72), v1, v2 - (void)v1);
    if (result == v3)
    {
      size_t v5 = (const char *)*((void *)v4 + 16);
      uint64_t v6 = &v5[*((void *)v4 + 17)];
      *((void *)v4 + 5) = v5;
    }
    else
    {
      uint64_t v7 = *((void *)v4 + 16);
      uint64_t v8 = &result[v7];
      uint64_t v6 = (const char *)(v7 + *((void *)v4 + 17));
      size_t v5 = &v8[*((_DWORD *)v4 + 12) - (int)v8];
      *((void *)v4 + 5) = v8;
    }
    *((void *)v4 + 6) = v5;
    *((void *)v4 + 7) = v6;
  }
  return result;
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open_impl(a1, &v5, a3);
  turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)&v5);
}

void sub_223FC3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open_impl(uint64_t a1, long long *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    *(void *)&v3.__val_ = 1;
    v3.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v4, "already open", &v3);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(a1, a2, a3);
}

void sub_223FC400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(uint64_t a1, long long *a2, uint64_t a3)
{
  if (a3 == -1)
  {
    uint64_t v5 = 4096;
  }
  else
  {
    uint64_t v5 = a3;
    if (!a3) {
      goto LABEL_8;
    }
  }
  if (*(void *)(a1 + 136) != (int)v5)
  {
    uint64_t v6 = operator new((int)v5);
    uint64_t v7 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = v6;
    *(void *)(a1 + 136) = (int)v5;
    if (v7) {
      operator delete(v7);
    }
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  long long v11 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v13 = *((void *)a2 + 3);
  uint64_t v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>::reset(a1 + 72, &v11);
  turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)&v11);
  if (v5 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = 3;
  }
  *(_DWORD *)(a1 + 152) |= v10;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF8;
}

void sub_223FC4134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_sink>>::reset(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    turi::fileio_impl::cache_stream_sink::~cache_stream_sink((turi::fileio_impl::cache_stream_sink *)a1);
    *(unsigned char *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  }
  *(void *)a1 = *a2;
  uint64_t v3 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 1;
}

void std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223FC4220(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>> *,std::shared_ptr<std::ostream>::__shared_ptr_default_delete<std::ostream,boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>>,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>> *,std::shared_ptr<std::ostream>::__shared_ptr_default_delete<std::ostream,boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>>,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  uint64_t result = std::__shared_ptr_emplace<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223FC42F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7672D8;
  boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string>(a1 + 3, a2);
  return a1;
}

void sub_223FC4354(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7672D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7672D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string>(void *a1, uint64_t a2)
{
  a1[24] = MEMORY[0x263F8C368] + 16;
  boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base((uint64_t)a1, (uint64_t *)&off_26D767370);
  *a1 = &unk_26D767330;
  a1[24] = &unk_26D767358;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::fileio_impl::cache_stream_source::cache_stream_source(v6, &__p);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open((uint64_t)(a1 + 2), v6, 0xFFFFFFFFFFFFFFFFLL, -1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_223FC4534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v15 + 16);
  MEMORY[0x22A614E30](v16);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 4;
  *(void *)(a1 + 16) = &unk_26D7674A8;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[3];
  uint64_t v6 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = a2[2];
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_223FC47B8(_Unwind_Exception *a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

void turi::fileio_impl::cache_stream_source::~cache_stream_source(turi::fileio_impl::cache_stream_source *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x22A614E30](a1 + 192);
  return a1;
}

void boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x22A614E30](a1 + 192);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::iostreams::detail::stream_base<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x22A614E30);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x22A614E30](v1 + 192);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x22A614E30](a1 + 192);
  return a1;
}

void boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x22A614E30](a1 + 192);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::iostreams::stream<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>>::~stream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x22A614E30);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x22A614E30](v1 + 192);
  JUMPOUT(0x22A614FA0);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(a1);
  JUMPOUT(0x22A614FA0);
}

double boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seekpos@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)&double result = boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seek_impl(0, a1, (const char *)*(void *)(a2 + 128), a3, a4).n128_u64[0];
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::underflow(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
  if (!v2)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
    uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
  }
  if ((unint64_t)v2 < *(void *)(a1 + 32)) {
    return *v2;
  }
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4 >= (uint64_t)&v2[-*(void *)(a1 + 16)]) {
    size_t v5 = (size_t)&v2[-*(void *)(a1 + 16)];
  }
  else {
    size_t v5 = *(void *)(a1 + 160);
  }
  if (v5)
  {
    uint64_t v6 = -(uint64_t)v5;
    memmove((void *)(*(void *)(a1 + 144) + v4 - v5), &v2[-v5], v5);
    uint64_t v4 = *(void *)(a1 + 160);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = (char *)(*(void *)(a1 + 144) + v4);
  *(void *)(a1 + 16) = &v8[v6];
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v8;
  size_t v9 = turi::fileio_impl::cache_stream_source::read((turi::fileio_impl::cache_stream_source *)(a1 + 72), v8, v7 - v4);
  if (v9 == -1)
  {
    *(_DWORD *)(a1 + 64) |= 1u;
    *(void *)(a1 + 32) = *(void *)(a1 + 144) + *(void *)(a1 + 160);
  }
  else
  {
    int v10 = *(unsigned __int8 **)(a1 + 24);
    *(void *)(a1 + 32) = *(void *)(a1 + 144) + *(void *)(a1 + 160) + v9;
    if (v9) {
      return *v10;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::overflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 168) & 2) != 0 && !*(void *)(a1 + 48)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  }
  if (a2 == -1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 168) & 2) == 0) {
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::input>::write<turi::fileio_impl::general_fstream_source,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>();
  }
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  if (v4 == *(unsigned char **)(a1 + 56))
  {
    boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync_impl(a1);
    uint64_t v4 = *(unsigned char **)(a1 + 48);
    if (v4 == *(unsigned char **)(a1 + 56)) {
      return 0xFFFFFFFFLL;
    }
  }
  *uint64_t v4 = a2;
  ++*(void *)(a1 + 48);
  return a2;
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::close_impl(void *a1, int a2)
{
  if (a2 == 8)
  {
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0;
  }
  boost::iostreams::close<turi::fileio_impl::cache_stream_source>((turi::fileio_impl::cache_stream_source *)(a1 + 9), a2);
}

void *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::component_type()
{
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~indirect_streambuf(void *a1)
{
  *a1 = &unk_26D7675A0;
  uint64_t v2 = (void *)a1[18];
  if (v2) {
    operator delete(v2);
  }
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset((uint64_t)(a1 + 9));
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~indirect_streambuf(void *a1)
{
  *a1 = &unk_26D7675A0;
  uint64_t v2 = (void *)a1[18];
  if (v2) {
    operator delete(v2);
  }
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset((uint64_t)(a1 + 9));
  std::streambuf::~streambuf();
  JUMPOUT(0x22A614FA0);
}

void boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
}

uint64_t boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  *(void *)a1 = &unk_26D7674A8;
  if ((~*(_DWORD *)(a1 + 168) & 5) == 0) {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, a1 + 72, (_DWORD *)(a1 + 168));
  }
  *(void *)a1 = &unk_26D7675A0;
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2) {
    operator delete(v2);
  }
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(a1 + 72);
  return std::streambuf::~streambuf();
}

void sub_223FC4F4C(void *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(_DWORD *a1, int a2, _DWORD *a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>>>(a1, a2, a3, a4, a5);
  *a6 = 0;
  return result;
}

void sub_223FC4F88(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223FC4F98(_Unwind_Exception *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  uint64_t v6 = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(a5);
  return v6;
}

void sub_223FC4FE0(void *a1)
{
  __cxa_begin_catch(a1);
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(v1);
  __cxa_rethrow();
}

void sub_223FC5000(_Unwind_Exception *a1)
{
}

__n128 boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seek_impl@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X0>, const char *a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1 == 1
    && a4 == 8
    && (uint64_t v9 = *(void *)(a2 + 24)) != 0
    && *(void *)(a2 + 16) - v9 <= (uint64_t)a3
    && *(void *)(a2 + 32) - v9 >= (uint64_t)a3)
  {
    *(void *)(a2 + 24) = v9 + (int)a3;
    turi::fileio_impl::cache_stream_source::seek((void *)(a2 + 72), 1, 0, (uint64_t)v17);
    uint64_t v12 = *(void *)(a2 + 24) - *(void *)(a2 + 32);
    long long v13 = v17[7];
    *(_OWORD *)(a5 + 96) = v17[6];
    *(_OWORD *)(a5 + 112) = v13;
    uint64_t v14 = v18;
    *(void *)(a5 + 128) = v18;
    long long v15 = v17[3];
    *(_OWORD *)(a5 + 32) = v17[2];
    *(_OWORD *)(a5 + 48) = v15;
    long long v16 = v17[5];
    *(_OWORD *)(a5 + 64) = v17[4];
    *(_OWORD *)(a5 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = v16;
    __n128 result = (__n128)v17[1];
    *(_OWORD *)a5 = v17[0];
    *(__n128 *)(a5 + 16) = result;
    *(void *)(a5 + 128) = v12 + v14;
  }
  else
  {
    if (*(void *)(a2 + 48)) {
      (*(void (**)(uint64_t))(*(void *)a2 + 48))(a2);
    }
    if (a1 == 1)
    {
      uint64_t v10 = *(void *)(a2 + 24);
      if (v10) {
        uint64_t v6 = &v6[v10 - *(void *)(a2 + 32)];
      }
    }
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    turi::fileio_impl::cache_stream_source::seek((void *)(a2 + 72), a1, v6, a5);
  }
  return result;
}

void boost::iostreams::close<turi::fileio_impl::cache_stream_source>(turi::fileio_impl::cache_stream_source *a1, int a2)
{
  if (a2 == 8)
  {
    turi::fileio_impl::cache_stream_source::close(a1);
  }
  else if (a2 == 24)
  {
    boost::iostreams::detail::close_all<turi::fileio_impl::cache_stream_source>(a1);
  }
}

void boost::iostreams::detail::close_all<turi::fileio_impl::cache_stream_source>(turi::fileio_impl::cache_stream_source *a1)
{
}

void sub_223FC51F4(void *a1)
{
}

void sub_223FC5200(_Unwind_Exception *a1)
{
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  long long v7 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = v4;
  size_t v5 = (std::__shared_weak_count *)*((void *)a2 + 4);
  uint64_t v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 6);
  uint64_t v11 = *((void *)a2 + 5);
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(a1, (uint64_t)&v7, a3, a4);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_223FC5298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::iostreams::stream_buffer<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 168))
  {
    *(void *)&v4.__val_ = 1;
    v4.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v5, "already open", &v4);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v5);
  }
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(a1, a2, a3, a4);
}

void sub_223FC5314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::cache_stream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = a3;
  }
  uint64_t v7 = 2;
  if (a4 > 2) {
    uint64_t v7 = a4;
  }
  if (a4 == -1) {
    uint64_t v7 = 4;
  }
  *(void *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = v7;
  if (a3 == -1) {
    int v6 = 4096;
  }
  int v8 = v7 + v6;
  if (*(void *)(a1 + 152) != v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = operator new(v8);
    uint64_t v11 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v10;
    *(void *)(a1 + 152) = v9;
    if (v11) {
      operator delete(v11);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  long long v15 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = v12;
  long long v13 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v18 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 40);
  std::string::size_type v20 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(a1 + 72, &v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *(_DWORD *)(a1 + 168) |= 1u;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF8;
}

void sub_223FC5464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(uint64_t a1, long long *a2)
{
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::cache_stream_source>>::reset(a1);
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 6);
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 56) = 1;
}

void std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<std::ofstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223FC5550(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::ofstream *,std::shared_ptr<std::ostream>::__shared_ptr_default_delete<std::ostream,std::ofstream>,std::allocator<std::ofstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::ofstream *,std::shared_ptr<std::ostream>::__shared_ptr_default_delete<std::ostream,std::ofstream>,std::allocator<std::ofstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<std::istream>::shared_ptr[abi:ne180100]<std::ifstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223FC5644(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::istream>::shared_ptr[abi:ne180100]<std::ifstream,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

__n128 OUTLINED_FUNCTION_1_3(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_4_2(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void turi::query_eval::ec_permute_partitions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X4>, turi::sframe *a5@<X8>)
{
  v45[4] = *(std::locale *)MEMORY[0x263EF8340];
  int v8 = *(std::locale::__imp **)(a1 + 24);
  v44[4] = (char *)v8 - 1;
  v44[5] = a3;
  int v9 = *(unsigned __int8 *)(a1 + 288);
  if (*(unsigned char *)(a1 + 288)) {
    uint64_t v10 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = (a3 + v10 - 1) / a3;
  v44[3] = v11;
  v45[0].__locale_ = v8;
  if (v8)
  {
    v44[0] = v8;
    __p.__r_.__value_.__r.__words[0] = *(void *)(a2 + 24) + 1;
    if (v8 == (std::locale::__imp *)__p.__r_.__value_.__l.__data_)
    {
      if (v9) {
        uint64_t v12 = *(void *)(a1 + 32);
      }
      else {
        uint64_t v12 = 0;
      }
      v44[0] = v12;
      if (*(unsigned char *)(a2 + 288)) {
        std::string::size_type v13 = *(void *)(a2 + 32);
      }
      else {
        std::string::size_type v13 = 0;
      }
      __p.__r_.__value_.__r.__words[0] = v13;
      if (v12 == v13)
      {
        uint64_t v14 = (int *)global_logger();
        if (v14[169] > 2) {
          goto LABEL_24;
        }
        if (cppipc::must_cancel((cppipc *)v14)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        long long v15 = (file_logger *)global_logger();
        started = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "ec_permute_partitions", 307, 1);
        uint64_t v17 = pthread_getspecific(*((void *)started + 74));
        if (v17 && *((unsigned char *)v17 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Final permute ", 14);
        }
        uint64_t v18 = file_logger::operator<<<unsigned long>((uint64_t)started);
        uint64_t v19 = pthread_getspecific(*(void *)(v18 + 592));
        if (v19 && *((unsigned char *)v19 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)" rows", 5);
        }
        std::string::size_type v20 = pthread_getspecific(*(void *)(v18 + 592));
        if (!v20
          || !v20[280]
          || (std::ios_base::getloc((const std::ios_base *)&v20[*(void *)(*((void *)v20 + 2) - 24) + 16]),
              uint64_t v21 = std::locale::use_facet(v45, MEMORY[0x263F8C108]),
              ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10),
              std::locale::~locale(v45),
              std::ostream::put(),
              std::ostream::flush(),
              file_logger::stream_flush((file_logger *)v18),
              *(_DWORD *)(v18 + 600) != 7))
        {
LABEL_24:
          std::string::size_type v22 = (int *)global_logger();
          if (v22[169] > 2) {
            goto LABEL_32;
          }
          if (cppipc::must_cancel((cppipc *)v22)) {
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          }
          BOOL v23 = (file_logger *)global_logger();
          char v24 = file_logger::start_stream(v23, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "ec_permute_partitions", 308, 1);
          uint64_t v25 = pthread_getspecific(*((void *)v24 + 74));
          if (v25 && *((unsigned char *)v25 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Rows per bucket: ", 17);
          }
          uint64_t v26 = file_logger::operator<<<unsigned long>((uint64_t)v24);
          long long v27 = pthread_getspecific(*(void *)(v26 + 592));
          if (!v27
            || !v27[280]
            || (std::ios_base::getloc((const std::ios_base *)&v27[*(void *)(*((void *)v27 + 2) - 24) + 16]),
                BOOL v28 = std::locale::use_facet(v45, MEMORY[0x263F8C108]),
                ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10),
                std::locale::~locale(v45),
                std::ostream::put(),
                std::ostream::flush(),
                file_logger::stream_flush((file_logger *)v26),
                *(_DWORD *)(v26 + 600) != 7))
          {
LABEL_32:
            uint64_t v29 = (int *)global_logger();
            if (v29[169] > 2) {
              goto LABEL_40;
            }
            if (cppipc::must_cancel((cppipc *)v29)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            std::string::size_type v30 = (file_logger *)global_logger();
            std::string::size_type v31 = file_logger::start_stream(v30, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "ec_permute_partitions", 309, 1);
            unint64_t v32 = pthread_getspecific(*((void *)v31 + 74));
            if (v32 && *((unsigned char *)v32 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)"Num buckets: ", 13);
            }
            uint64_t v33 = file_logger::operator<<<unsigned long>((uint64_t)v31);
            uint64_t v34 = pthread_getspecific(*(void *)(v33 + 592));
            if (!v34
              || !v34[280]
              || (std::ios_base::getloc((const std::ios_base *)&v34[*(void *)(*((void *)v34 + 2) - 24) + 16]),
                  unsigned int v35 = std::locale::use_facet(v45, MEMORY[0x263F8C108]),
                  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10),
                  std::locale::~locale(v45),
                  std::ostream::put(),
                  std::ostream::flush(),
                  file_logger::stream_flush((file_logger *)v33),
                  *(_DWORD *)(v33 + 600) != 7))
            {
LABEL_40:
              std::locale v36 = (turi::v2_block_impl::block_manager *)std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(v44, *(void *)(a2 + 24));
              unint64_t v37 = *(void *)(a2 + 24);
              if (v37)
              {
                uint64_t v38 = 0;
                for (unint64_t i = 0; i < v37; ++i)
                {
                  if ((*(void *)(*a4 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i))
                  {
                    turi::sframe::select_column(a2, i, v45);
                    turi::sarray<turi::flexible_type>::get_reader((uint64_t)v45[0].__locale_);
                  }
                  v38 += 16;
                }
              }
              turi::v2_block_impl::block_manager::get_instance(v36);
              turi::sframe::sframe(a5);
              std::vector<turi::flex_type_enum>::vector(v45, *(void *)(a2 + 24));
              if (*(void *)(a2 + 24))
              {
                unint64_t v40 = 0;
                do
                {
                  char v41 = turi::sframe::column_type((turi::sframe *)a2, v40);
                  *((unsigned char *)v45[0].__locale_ + v40++) = v41;
                }
                while (v40 < *(void *)(a2 + 24));
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              turi::sframe::open_for_write((uint64_t)a5, (void *)(a2 + 40), v45, &__p, v11, 1);
            }
          }
        }
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
      v45[0].__locale_ = (std::locale::__imp *)v44;
      v45[1].__locale_ = (std::locale::__imp *)&__p;
      turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_2::operator()();
    }
    v45[0].__locale_ = (std::locale::__imp *)v44;
    v45[1].__locale_ = (std::locale::__imp *)&__p;
    turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_1::operator()();
  }
  v44[0] = v45;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator()();
}

void sub_223FC5EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26)
{
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.num_columns()", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 304, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC61A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.num_columns()", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"original_input.num_columns() + 1", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 305, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC643C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.size()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"original_input.size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 306, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC66D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::permute_sframe(uint64_t a1, uint64_t *a2)
{
  v178[22] = *(void **)MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a1 + 32);
  long long v4 = *(long long **)(a1 + 40);
  unint64_t v148 = v5;
  if (!*(unsigned char *)(a1 + 288)) {
    unint64_t v5 = 0;
  }
  unint64_t v149 = v5;
  memset(&v158, 0, sizeof(v158));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v158, v4, *(long long **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - (void)v4) >> 3));
  std::vector<turi::flex_type_enum>::vector(&v157, *(void *)(a1 + 24));
  v147 = a2;
  v150 = (turi::sframe *)a1;
  if (*(void *)(a1 + 24))
  {
    unint64_t v6 = 0;
    do
    {
      char v7 = turi::sframe::column_type((turi::sframe *)a1, v6);
      *((unsigned char *)v157 + v6++) = v7;
      unint64_t v8 = *(void *)(a1 + 24);
    }
    while (v6 < v8);
  }
  else
  {
    unint64_t v8 = 0;
  }
  gettimeofday(&v156, 0);
  v172.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long>::vector(&v154, v8, &v172);
  v172.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::vector(v153, v8, (unsigned __int8 *)&v172);
  unint64_t v9 = *(void *)(a1 + 24);
  v172.__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = (turi::v2_block_impl::block_manager *)std::vector<unsigned long>::vector(&v159, v9, &v172);
  instance = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(v10);
  uint64_t v12 = (cppipc *)a1;
  if (*(void *)(a1 + 24))
  {
    unint64_t v13 = 0;
    do
    {
      turi::sframe::select_column((uint64_t)v12, v13, &v164);
      turi::index_file_information::index_file_information(&v172, (const turi::index_file_information *)(v164 + 8));
      uint64_t v14 = (long long *)v177[0];
      char v15 = (long long *)v177[1];
      while (v14 != v15)
      {
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)v14, *((void *)v14 + 1));
        }
        else
        {
          long long v16 = *v14;
          v171.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v16;
        }
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v163, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
        }
        else {
          std::string v163 = v171;
        }
        unint64_t v17 = turi::v2_block_impl::block_manager::open_column((uint64_t)instance, (uint64_t)&v163);
        unint64_t v19 = v18;
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v163.__r_.__value_.__l.__data_);
        }
        unint64_t v20 = turi::v2_block_impl::block_manager::num_blocks_in_column(instance, v17, v19);
        if (v20)
        {
          for (unint64_t i = 0; i != v20; ++i)
          {
            v161[0] = v17;
            v161[1] = v19;
            v161[2] = i;
            uint64_t block_info = turi::v2_block_impl::block_manager::get_block_info(instance, v161);
            *((void *)v159 + v13) += *(void *)(block_info + 16);
          }
        }
        turi::v2_block_impl::block_manager::close_column((uint64_t)instance, v17);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = (long long *)((char *)v14 + 24);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v178, v178[1]);
      v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
      if (__p)
      {
        v176 = __p;
        operator delete(__p);
      }
      if (v174 < 0) {
        operator delete(v173);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v164 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v164 + 1));
      }
      ++v13;
      uint64_t v12 = v150;
    }
    while (v13 < *((void *)v150 + 3));
  }
  BOOL v23 = v154;
  if (v155 != v154)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    do
    {
      unint64_t v26 = (v148 - 1 + *((void *)v159 + v25)) / v148;
      uint64_t v27 = 16;
      switch(*((unsigned char *)v157 + v25))
      {
        case 0:
        case 1:
        case 6:
          break;
        case 2:
        case 3:
          uint64_t v27 = v26 + 40;
          break;
        default:
          uint64_t v27 = 2 * v26 + 16;
          break;
      }
      v23[v25] = v27;
      uint64_t v12 = (cppipc *)global_logger();
      if (*((int *)v12 + 169) <= 2)
      {
        if (cppipc::must_cancel(v12)) {
          goto LABEL_206;
        }
        BOOL v28 = (file_logger *)global_logger();
        started = file_logger::start_stream(v28, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 498, 1);
        std::string::size_type v30 = pthread_getspecific(*((void *)started + 74));
        if (v30 && *((unsigned char *)v30 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"Est. bytes per value for column ", 32);
        }
        std::string::size_type v31 = (long long *)(v158.__r_.__value_.__r.__words[0] + v24);
        if (*(char *)(v158.__r_.__value_.__r.__words[0] + v24 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)v31, *((void *)v31 + 1));
        }
        else
        {
          long long v32 = *v31;
          v152.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v32;
        }
        uint64_t v33 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v152);
        uint64_t v34 = pthread_getspecific(*(void *)(v33 + 592));
        if (v34 && *((unsigned char *)v34 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)": ", 2);
        }
        uint64_t v35 = file_logger::operator<<<unsigned long>(v33);
        uint64_t v12 = (cppipc *)pthread_getspecific(*(void *)(v35 + 592));
        if (v12)
        {
          if (*((unsigned char *)v12 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*((void *)v12 + 2) - 24) + 16));
            std::locale v36 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
            std::locale::~locale((std::locale *)&v172);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v35);
            if (*(_DWORD *)(v35 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v37 = v154;
      if (*((void *)v154 + v25) > 0x40000uLL)
      {
        *(void *)((char *)v153[0] + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
        v37[v25] = 16;
        uint64_t v12 = (cppipc *)global_logger();
        if (*((int *)v12 + 169) <= 2)
        {
          if (cppipc::must_cancel(v12)) {
LABEL_206:
          }
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          uint64_t v38 = (file_logger *)global_logger();
          uint64_t v39 = file_logger::start_stream(v38, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 504, 1);
          unint64_t v40 = pthread_getspecific(*((void *)v39 + 74));
          if (v40 && *((unsigned char *)v40 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Using indirect access for column ", 33);
          }
          char v41 = (long long *)(v158.__r_.__value_.__r.__words[0] + v24);
          if (*(char *)(v158.__r_.__value_.__r.__words[0] + v24 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v41, *((void *)v41 + 1));
          }
          else
          {
            long long v42 = *v41;
            v151.__r_.__value_.__r.__words[2] = *((void *)v41 + 2);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v42;
          }
          uint64_t v43 = file_logger::operator<<<std::string>((uint64_t)v39, (uint64_t)&v151);
          uint64_t v12 = (cppipc *)pthread_getspecific(*(void *)(v43 + 592));
          if (v12)
          {
            if (*((unsigned char *)v12 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*((void *)v12 + 2) - 24) + 16));
              unint64_t v44 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
              std::locale::~locale((std::locale *)&v172);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v43);
              if (*(_DWORD *)(v43 + 600) == 7)
              {
                __print_back_trace();
                v142 = __cxa_allocate_exception(8uLL);
                void *v142 = "LOG_FATAL encountered";
                __cxa_throw(v142, MEMORY[0x263F8C1D8], 0);
              }
            }
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
        }
      }
      BOOL v23 = v154;
      *((void *)v159 + v25) = *((void *)v154 + v25) * v149;
      ++v25;
      v24 += 24;
    }
    while (v25 < (v155 - (unsigned char *)v23) >> 3);
  }
  unsigned int v45 = (uint64_t *)v159;
  v172.__r_.__value_.__r.__words[0] = (v160 - (unsigned char *)v159) >> 3;
  if (v160 == v159)
  {
    v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
    turi::query_eval::permute_sframe(turi::sframe &,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator()();
  }
  unint64_t v46 = (char *)v159 + 8;
  if ((char *)v159 + 8 != v160)
  {
    unint64_t v47 = *(void *)v159;
    uint64_t v48 = (char *)v159 + 8;
    do
    {
      unint64_t v50 = *(void *)v48;
      v48 += 8;
      unint64_t v49 = v50;
      BOOL v51 = v47 >= v50;
      if (v47 <= v50) {
        unint64_t v47 = v49;
      }
      if (!v51) {
        unsigned int v45 = (uint64_t *)v46;
      }
      unint64_t v46 = v48;
    }
    while (v48 != v160);
  }
  uint64_t v52 = *v45;
  unint64_t v53 = turi::sframe_config::SFRAME_SORT_BUFFER_SIZE;
  uint64_t v54 = turi::thread::cpu_count(v12);
  unint64_t v55 = v53 >> 1;
  unint64_t v56 = (v52 + (v53 >> 1) - 1) / (v53 >> 1);
  if (v56 <= 1) {
    unint64_t v56 = 1;
  }
  unint64_t v57 = v56 * v54;
  if (v57 > v149) {
    unint64_t v58 = 1;
  }
  else {
    unint64_t v58 = v57;
  }
  unsigned int v59 = (int *)global_logger();
  if (v59[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v59)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v60 = (file_logger *)global_logger();
    uint64_t v61 = file_logger::start_stream(v60, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 527, 1);
    char v62 = pthread_getspecific(*((void *)v61 + 74));
    if (v62 && *((unsigned char *)v62 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62 + 2, (uint64_t)"Generating ", 11);
    }
    uint64_t v63 = file_logger::operator<<<unsigned long>((uint64_t)v61);
    uint64_t v64 = pthread_getspecific(*(void *)(v63 + 592));
    if (v64 && *((unsigned char *)v64 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64 + 2, (uint64_t)" buckets", 8);
    }
    v65 = pthread_getspecific(*(void *)(v63 + 592));
    if (v65)
    {
      if (*((unsigned char *)v65 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(v65[2] - 24) + 16));
        unint64_t v66 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
        std::locale::~locale((std::locale *)&v172);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v63);
        if (*(_DWORD *)(v63 + 600) == 7)
        {
          __print_back_trace();
          v146 = __cxa_allocate_exception(8uLL);
          void *v146 = "LOG_FATAL encountered";
          __cxa_throw(v146, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v67 = (unint64_t *)v154;
  if (v154 != v155)
  {
    int v68 = (char *)v154 + 8;
    if ((char *)v154 + 8 != v155)
    {
      unint64_t v69 = *(void *)v154;
      unsigned int v70 = (char *)v154 + 8;
      do
      {
        unint64_t v72 = *(void *)v70;
        v70 += 8;
        unint64_t v71 = v72;
        BOOL v73 = v69 >= v72;
        if (v69 <= v72) {
          unint64_t v69 = v71;
        }
        if (!v73) {
          unint64_t v67 = (unint64_t *)v68;
        }
        int v68 = v70;
      }
      while (v70 != v155);
    }
  }
  unint64_t v74 = *v67;
  uint64_t v75 = turi::SFRAME_SORT_MAX_SEGMENTS;
  uint64_t v76 = (int *)global_logger();
  unint64_t v77 = v75 * v55 / v74;
  if (v76[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v76)) {
      goto LABEL_211;
    }
    v78 = (file_logger *)global_logger();
    v79 = file_logger::start_stream(v78, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 539, 1);
    v80 = pthread_getspecific(*((void *)v79 + 74));
    if (v80 && *((unsigned char *)v80 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80 + 2, (uint64_t)"Maximum sort rows: ", 19);
    }
    uint64_t v81 = file_logger::operator<<<unsigned long>((uint64_t)v79);
    v82 = pthread_getspecific(*(void *)(v81 + 592));
    if (v82)
    {
      if (*((unsigned char *)v82 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(v82[2] - 24) + 16));
        v83 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
        std::locale::~locale((std::locale *)&v172);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v81);
        if (*(_DWORD *)(v81 + 600) == 7) {
          goto LABEL_215;
        }
      }
    }
  }
  if (v149 <= v77) {
    goto LABEL_144;
  }
  v84 = (int *)global_logger();
  if (v84[169] > 5) {
    goto LABEL_144;
  }
  if (!cppipc::must_cancel((cppipc *)v84))
  {
    v85 = (file_logger *)global_logger();
    v86 = file_logger::start_stream(v85, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 541, 1);
    v87 = pthread_getspecific(*((void *)v86 + 74));
    if (v87 && *((unsigned char *)v87 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87 + 2, (uint64_t)"With the current configuration of SFRAME_SORT_BUFFER_SIZE ", 58);
    }
    v88 = pthread_getspecific(*((void *)v86 + 74));
    if (v88 && *((unsigned char *)v88 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88 + 2, (uint64_t)"and SFRAME_SORT_MAX_SEGMENTS ", 29);
    }
    v89 = pthread_getspecific(*((void *)v86 + 74));
    if (v89 && *((unsigned char *)v89 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89 + 2, (uint64_t)"we can sort an SFrame of up to ", 31);
    }
    uint64_t v90 = file_logger::operator<<<unsigned long>((uint64_t)v86);
    v91 = pthread_getspecific(*(void *)(v90 + 592));
    if (v91 && *((unsigned char *)v91 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91 + 2, (uint64_t)" elements\n", 10);
      file_logger::stream_flush((file_logger *)v90);
    }
    v92 = pthread_getspecific(*(void *)(v90 + 592));
    if (v92 && *((unsigned char *)v92 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"The size of the current SFrame exceeds this length. We will proceed anyway ", 75);
    }
    v93 = pthread_getspecific(*(void *)(v90 + 592));
    if (v93 && *((unsigned char *)v93 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93 + 2, (uint64_t)"If this fails, either of these constants need to be increased.\n", 63);
      file_logger::stream_flush((file_logger *)v90);
    }
    v94 = pthread_getspecific(*(void *)(v90 + 592));
    if (v94 && *((unsigned char *)v94 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94 + 2, (uint64_t)"SFRAME_SORT_MAX_SEGMENTS can be increased by increasing the number of n", 71);
    }
    v95 = pthread_getspecific(*(void *)(v90 + 592));
    if (v95 && *((unsigned char *)v95 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95 + 2, (uint64_t)"file handles via ulimit -n\n", 27);
      file_logger::stream_flush((file_logger *)v90);
    }
    v96 = pthread_getspecific(*(void *)(v90 + 592));
    if (v96 && *((unsigned char *)v96 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96 + 2, (uint64_t)"SFRAME_SORT_BUFFER_SIZE can be increased with tc.set_runtime_config()", 69);
    }
    v97 = pthread_getspecific(*(void *)(v90 + 592));
    if (!v97
      || !v97[280]
      || (std::ios_base::getloc((const std::ios_base *)&v97[*(void *)(*((void *)v97 + 2) - 24) + 16]),
          v98 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]),
          ((void (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10),
          std::locale::~locale((std::locale *)&v172),
          std::ostream::put(),
          std::ostream::flush(),
          file_logger::stream_flush((file_logger *)v90),
          *(_DWORD *)(v90 + 600) != 7))
    {
LABEL_144:
      if (v159)
      {
        v160 = (char *)v159;
        operator delete(v159);
      }
      v99 = (int *)global_logger();
      if (v99[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v99)) {
          goto LABEL_209;
        }
        v100 = (file_logger *)global_logger();
        v101 = file_logger::start_stream(v100, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 565, 1);
        v102 = pthread_getspecific(*((void *)v101 + 74));
        if (v102 && *((unsigned char *)v102 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102 + 2, (uint64_t)"Rows per bucket: ", 17);
        }
        uint64_t v103 = file_logger::operator<<<unsigned long>((uint64_t)v101);
        v104 = pthread_getspecific(*(void *)(v103 + 592));
        if (v104)
        {
          if (*((unsigned char *)v104 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(v104[2] - 24) + 16));
            v105 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
            std::locale::~locale((std::locale *)&v172);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v103);
            if (*(_DWORD *)(v103 + 600) == 7) {
              goto LABEL_213;
            }
          }
        }
      }
      gettimeofday(&v156, 0);
      v106 = (int *)global_logger();
      if (v106[169] > 2) {
        goto LABEL_162;
      }
      if (!cppipc::must_cancel((cppipc *)v106))
      {
        v107 = (file_logger *)global_logger();
        v108 = file_logger::start_stream(v107, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "permute_sframe", 568, 1);
        v109 = pthread_getspecific(*((void *)v108 + 74));
        if (v109 && *((unsigned char *)v109 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109 + 2, (uint64_t)"Beginning scatter ", 18);
        }
        v110 = pthread_getspecific(*((void *)v108 + 74));
        if (!v110
          || !v110[280]
          || (std::ios_base::getloc((const std::ios_base *)&v110[*(void *)(*((void *)v110 + 2) - 24) + 16]),
              v111 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]),
              ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10),
              std::locale::~locale((std::locale *)&v172),
              std::ostream::put(),
              std::ostream::flush(),
              file_logger::stream_flush(v108),
              *((_DWORD *)v108 + 150) != 7))
        {
LABEL_162:
          turi::sframe::sframe((turi::sframe *)v166, v150);
          uint64_t v112 = *v147;
          uint64_t v113 = v147[1];
          if (v113) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v165 = v149 / v58;
          v114 = (int *)global_logger();
          if (v114[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v114)) {
              goto LABEL_210;
            }
            v115 = (file_logger *)global_logger();
            v116 = file_logger::start_stream(v115, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "ec_scatter_partitions", 161, 1);
            v117 = pthread_getspecific(*((void *)v116 + 74));
            if (v117 && *((unsigned char *)v117 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117 + 2, (uint64_t)"input size ", 11);
            }
            uint64_t v118 = file_logger::operator<<<unsigned long>((uint64_t)v116);
            v119 = pthread_getspecific(*(void *)(v118 + 592));
            if (v119)
            {
              if (*((unsigned char *)v119 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(void *)(v119[2] - 24) + 16));
                v120 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
                std::locale::~locale((std::locale *)&v172);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v118);
                if (*(_DWORD *)(v118 + 600) == 7) {
                  goto LABEL_214;
                }
              }
            }
          }
          v121 = (int *)global_logger();
          if (v121[169] > 2) {
            goto LABEL_185;
          }
          if (!cppipc::must_cancel((cppipc *)v121))
          {
            v122 = (file_logger *)global_logger();
            v123 = file_logger::start_stream(v122, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "ec_scatter_partitions", 162, 1);
            v124 = pthread_getspecific(*((void *)v123 + 74));
            if (v124 && *((unsigned char *)v124 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124 + 2, (uint64_t)"forward map size ", 17);
            }
            if (*(unsigned char *)(v112 + 248))
            {
              v125 = *(uint64_t **)(v112 + 80);
              uint64_t v126 = *(void *)(v112 + 88) - (void)v125;
              if (v126)
              {
                uint64_t v127 = 0;
                unint64_t v128 = v126 >> 3;
                if (v128 <= 1) {
                  unint64_t v128 = 1;
                }
                do
                {
                  uint64_t v129 = *v125++;
                  v127 += v129;
                  --v128;
                }
                while (v128);
              }
            }
            uint64_t v130 = file_logger::operator<<<unsigned long>((uint64_t)v123);
            v131 = pthread_getspecific(*(void *)(v130 + 592));
            if (!v131
              || !v131[280]
              || (std::ios_base::getloc((const std::ios_base *)&v131[*(void *)(*((void *)v131 + 2) - 24) + 16]),
                  v132 = std::locale::use_facet((const std::locale *)&v172, MEMORY[0x263F8C108]),
                  ((void (*)(const std::locale::facet *, uint64_t))v132->__vftable[2].~facet_0)(v132, 10),
                  std::locale::~locale((std::locale *)&v172),
                  std::ostream::put(),
                  std::ostream::flush(),
                  file_logger::stream_flush((file_logger *)v130),
                  *(_DWORD *)(v130 + 600) != 7))
            {
LABEL_185:
              *(void *)&long long v164 = v112;
              *((void *)&v164 + 1) = v113;
              if (v113) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v163, "");
              turi::sframe::add_column((uint64_t)v166, &v164, (uint64_t)&v163, (uint64_t)&v172);
              turi::sframe::operator=((uint64_t)v166, (uint64_t)&v172);
              turi::sframe::~sframe((turi::sframe *)&v172);
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v163.__r_.__value_.__l.__data_);
              }
              if (*((void *)&v164 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v164 + 1));
              }
              if (v170) {
                uint64_t v133 = v168 - 1;
              }
              else {
                uint64_t v133 = -1;
              }
              unint64_t v162 = (v133 + v165) / v165;
              turi::sframe::sframe((turi::sframe *)&v171);
              std::vector<turi::flex_type_enum>::vector(&v163, v167);
              if (v167)
              {
                for (unint64_t j = 0; j < v167; ++j)
                {
                  char v135 = turi::sframe::column_type((turi::sframe *)v166, j);
                  *(unsigned char *)(v163.__r_.__value_.__r.__words[0] + j) = v135;
                }
              }
              std::string::size_type v136 = v163.__r_.__value_.__r.__words[0];
              std::string::size_type v137 = v163.__r_.__value_.__l.__size_ - v163.__r_.__value_.__r.__words[0];
              if (v163.__r_.__value_.__l.__size_ != v163.__r_.__value_.__r.__words[0])
              {
                unint64_t v138 = 0;
                v140 = (char *)v153[0];
                v139 = v153[1];
                if (v137 <= 1) {
                  std::string::size_type v137 = 1;
                }
                do
                {
                  if (v138 < (unint64_t)v139
                    && ((*(void *)&v140[(v138 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v138) & 1) != 0)
                  {
                    *(unsigned char *)(v136 + v138) = 0;
                  }
                  ++v138;
                }
                while (v137 != v138);
              }
              std::string::basic_string[abi:ne180100]<0>(&v172, "");
              turi::sframe::open_for_write((uint64_t)&v171, v169, &v163, &v172, v162, 1);
            }
LABEL_214:
            __print_back_trace();
            v144 = __cxa_allocate_exception(8uLL);
            void *v144 = "LOG_FATAL encountered";
            __cxa_throw(v144, MEMORY[0x263F8C1D8], 0);
          }
LABEL_210:
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
LABEL_213:
        __print_back_trace();
        v143 = __cxa_allocate_exception(8uLL);
        void *v143 = "LOG_FATAL encountered";
        __cxa_throw(v143, MEMORY[0x263F8C1D8], 0);
      }
LABEL_209:
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
LABEL_215:
    __print_back_trace();
    v145 = __cxa_allocate_exception(8uLL);
    void *v145 = "LOG_FATAL encountered";
    __cxa_throw(v145, MEMORY[0x263F8C1D8], 0);
  }
LABEL_211:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_223FC8534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a31) {
    operator delete(a31);
  }
  STACK[0x3D0] = (unint64_t)&a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

void turi::query_eval::permute_sframe(turi::sframe &,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_num_bytes.size()", 23);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 512, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::permute_sframe(turi::sframe &,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC8A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::column_type(turi::sframe *this, unint64_t a2)
{
  if (*((unsigned char *)this + 289))
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26));
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v4 + 72) - *(void *)(v4 + 64)) >> 4) <= a2) {
      turi::sframe::column_type(unsigned long)const::{lambda(void)#1}::operator()();
    }
    unint64_t v5 = (uint64_t **)(*(void *)((*(uint64_t (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26))
                                + 64)
                    + 144 * a2
                    + 120);
    std::string::basic_string[abi:ne180100]<0>(__p, "__type__");
    uint64_t v14 = __p;
    unint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v14);
    char v7 = (char *)v6 + 56;
    if (*((char *)v6 + 79) < 0) {
      char v7 = *(const char **)v7;
    }
    char v8 = atoi(v7);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    return v8;
  }
  else
  {
    uint64_t v10 = *((void *)this + 23);
    if (a2 >= (*((void *)this + 24) - v10) >> 4) {
      turi::sframe::column_type(unsigned long)const::{lambda(void)#2}::operator()();
    }
    uint64_t v11 = *(void *)(v10 + 16 * a2);
    return turi::sarray<turi::flexible_type>::get_type(v11);
  }
}

void sub_223FC8CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  char v7 = *v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    char v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.size()", 13);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"input.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 269, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC8F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26D767828;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D767828;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1)
{
  v89[3] = *(void **)MEMORY[0x263EF8340];
  unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 1uLL);
  uint64_t result = *(void *)(a1 + 16);
  if (add < *(void *)(result + 24))
  {
    while (1)
    {
      long long v4 = *(void **)(a1 + 24);
      if (add >= v4[1] || ((*(void *)(*v4 + ((add >> 3) & 0x1FFFFFFFFFFFFFF8)) >> add) & 1) == 0) {
        break;
      }
      std::string::size_type v5 = **(void **)(a1 + 32);
      if (v5 < **(void **)(a1 + 40))
      {
        uint64_t v6 = 16 * v5;
        do
        {
          unint64_t v7 = **(void **)(a1 + 64);
          if (*(void *)(**(void **)(a1 + 48) - 16 * **(void **)(a1 + 32) + v6) / **(void **)(a1 + 56) >= v7) {
            unint64_t v8 = v7 - 1;
          }
          else {
            unint64_t v8 = *(void *)(**(void **)(a1 + 48) - 16 * **(void **)(a1 + 32) + v6) / **(void **)(a1 + 56);
          }
          uint64_t v9 = **(void **)(a1 + 72);
          v82.__r_.__value_.__s.__data_[12] = 0;
          LODWORD(v82.__r_.__value_.__r.__words[1]) = 0;
          v82.__r_.__value_.__r.__words[0] = v5;
          (*(void (**)(uint64_t, unint64_t, unint64_t, std::string *))(*(void *)v9 + 80))(v9, add, v8, &v82);
          switch(v82.__r_.__value_.__s.__data_[12])
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v10 = v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(v82.__r_.__value_.__r.__words[0] + 31) < 0) {
                    operator delete(*(void **)(v82.__r_.__value_.__r.__words[0] + 8));
                  }
                  uint64_t v11 = (void *)v10;
                  uint64_t v12 = 0x1012C404EF22A49;
                  goto LABEL_40;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v19 = v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  unint64_t v20 = *(void **)(v82.__r_.__value_.__r.__words[0] + 8);
                  if (v20)
                  {
                    *(void *)(v82.__r_.__value_.__r.__words[0] + 16) = v20;
                    operator delete(v20);
                  }
                  uint64_t v11 = (void *)v19;
                  uint64_t v12 = 0x1080C409938AC02;
                  goto LABEL_40;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v13 = v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  v81.__r_.__value_.__r.__words[0] = v82.__r_.__value_.__r.__words[0] + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
                  goto LABEL_35;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v13 = v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  v81.__r_.__value_.__r.__words[0] = v82.__r_.__value_.__r.__words[0] + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
LABEL_35:
                  uint64_t v11 = (void *)v13;
                  uint64_t v12 = 0x1020C405E66F15BLL;
                  goto LABEL_40;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v21 = v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v82.__r_.__value_.__r.__words[0] + 16));
                  uint64_t v11 = (void *)v21;
                  unsigned int v18 = -235920773;
                  goto LABEL_39;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v82.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v14 = (void *)v82.__r_.__value_.__r.__words[0];
                if (v82.__r_.__value_.__r.__words[0])
                {
                  char v15 = *(void **)(v82.__r_.__value_.__r.__words[0] + 48);
                  if (v15)
                  {
                    *(void *)(v82.__r_.__value_.__r.__words[0] + 56) = v15;
                    operator delete(v15);
                  }
                  long long v16 = (void *)v14[3];
                  if (v16)
                  {
                    v14[4] = v16;
                    operator delete(v16);
                  }
                  unint64_t v17 = (std::__shared_weak_count *)v14[2];
                  if (v17) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                  }
                  uint64_t v11 = v14;
                  unsigned int v18 = 2071181815;
LABEL_39:
                  uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_40:
                  MEMORY[0x22A614FA0](v11, v12);
                }
              }
              break;
            default:
              break;
          }
          ++v5;
          v6 += 16;
        }
        while (v5 < **(void **)(a1 + 40));
      }
LABEL_126:
      unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 1uLL);
      uint64_t result = *(void *)(a1 + 16);
      if (add >= *(void *)(result + 24)) {
        return result;
      }
    }
    turi::sframe::select_column(result, add, &v75);
    unint64_t v77 = 0;
    v78 = 0;
    std::string __p = 0;
    std::string::size_type v22 = turi::index_file_information::index_file_information(&v82, (const turi::index_file_information *)(v75 + 8));
    instance = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)v22);
    uint64_t v24 = v77;
    if (v77 >= v78)
    {
      unint64_t v26 = (char *)__p;
      uint64_t v27 = (v77 - (unsigned char *)__p) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v78 - (unsigned char *)__p;
      if ((v78 - (unsigned char *)__p) >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        std::string::size_type v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v78, v30);
        unint64_t v26 = (char *)__p;
        uint64_t v24 = v77;
      }
      else
      {
        std::string::size_type v31 = 0;
      }
      long long v32 = &v31[8 * v27];
      *(void *)long long v32 = 0;
      unint64_t v25 = v32 + 8;
      while (v24 != v26)
      {
        uint64_t v33 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v32 - 1) = v33;
        v32 -= 8;
      }
      std::string __p = v32;
      unint64_t v77 = v25;
      v78 = &v31[8 * v30];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(void *)unint64_t v77 = 0;
      unint64_t v25 = v24 + 8;
    }
    unint64_t v77 = v25;
    uint64_t v34 = v87;
    unint64_t v74 = v88;
    if (v87 != v88)
    {
      uint64_t v35 = 0;
      do
      {
        if (*((char *)v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v34, *((void *)v34 + 1));
        }
        else
        {
          long long v36 = *v34;
          v81.__r_.__value_.__r.__words[2] = *((void *)v34 + 2);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v36;
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v80, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
        }
        else {
          std::string v80 = v81;
        }
        unint64_t v37 = turi::v2_block_impl::block_manager::open_column((uint64_t)instance, (uint64_t)&v80);
        unint64_t v39 = v38;
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        unint64_t v40 = turi::v2_block_impl::block_manager::num_blocks_in_column(instance, v37, v39);
        if (v40)
        {
          for (unint64_t i = 0; i != v40; ++i)
          {
            v79[0] = v37;
            v79[1] = v39;
            v79[2] = i;
            v35 += *(void *)(turi::v2_block_impl::block_manager::get_block_info(instance, v79) + 24);
            long long v42 = v77;
            if (v77 >= v78)
            {
              unint64_t v44 = (char *)__p;
              uint64_t v45 = (v77 - (unsigned char *)__p) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v78 - (unsigned char *)__p;
              if ((v78 - (unsigned char *)__p) >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v78, v48);
                unint64_t v44 = (char *)__p;
                long long v42 = v77;
              }
              else
              {
                unint64_t v49 = 0;
              }
              unint64_t v50 = &v49[8 * v45];
              *(void *)unint64_t v50 = v35;
              uint64_t v43 = v50 + 8;
              while (v42 != v44)
              {
                uint64_t v51 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v50 - 1) = v51;
                v50 -= 8;
              }
              std::string __p = v50;
              unint64_t v77 = v43;
              v78 = &v49[8 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(void *)unint64_t v77 = v35;
              uint64_t v43 = v42 + 8;
            }
            unint64_t v77 = v43;
          }
        }
        turi::v2_block_impl::block_manager::close_column((uint64_t)instance, v37);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        uint64_t v34 = (long long *)((char *)v34 + 24);
      }
      while (v34 != v74);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v89, v89[1]);
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v75 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
    }
    memset(&v82, 0, sizeof(v82));
    uint64_t v52 = __p;
    unint64_t v53 = *(unint64_t **)(a1 + 32);
    uint64_t v54 = (unint64_t *)__p;
    uint64_t v55 = v77 - (unsigned char *)__p;
    if (v77 != __p)
    {
      unint64_t v56 = v55 >> 3;
      uint64_t v54 = (unint64_t *)__p;
      do
      {
        unint64_t v57 = v56 >> 1;
        unint64_t v58 = &v54[v56 >> 1];
        unint64_t v60 = *v58;
        unsigned int v59 = v58 + 1;
        v56 += ~(v56 >> 1);
        if (v60 < *v53) {
          uint64_t v54 = v59;
        }
        else {
          unint64_t v56 = v57;
        }
      }
      while (v56);
    }
    if (v54 != (unint64_t *)v77)
    {
      uint64_t v61 = (unint64_t *)__p;
      if (v54 == __p)
      {
LABEL_110:
        unint64_t v62 = ((char *)v61 - (unsigned char *)__p) >> 3;
        while (v62 < (v55 >> 3) - 1)
        {
          unint64_t v63 = v52[v62++];
          unint64_t v64 = v52[v62];
          v65 = *(unint64_t **)(a1 + 40);
          unint64_t v66 = v63 <= **(void **)(a1 + 32) ? **(void **)(a1 + 32) : v63;
          unint64_t v67 = *v65 >= v64 ? v64 : *v65;
          if (v66 >= v67) {
            break;
          }
          uint64_t v68 = *(void *)(**(void **)(a1 + 80) + 16 * add);
          (*(void (**)(uint64_t, unint64_t))(*(void *)v68 + 48))(v68, v66);
          std::string::size_type v69 = v82.__r_.__value_.__r.__words[0];
          if (v82.__r_.__value_.__l.__size_ != v82.__r_.__value_.__r.__words[0])
          {
            uint64_t v70 = 0;
            unint64_t v71 = 0;
            do
            {
              uint64_t v72 = **(void **)(a1 + 32);
              v80.__r_.__value_.__r.__words[0] = v66 + v71 - v72;
              uint64_t v73 = **(void **)(a1 + 48);
              v79[0] = (*(void *)(*(void *)(a1 + 48) + 8) - v73) >> 4;
              if (v80.__r_.__value_.__r.__words[0] >= v79[0])
              {
                v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
                v81.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
                turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
              }
              (*(void (**)(void, unint64_t, void, std::string::size_type))(***(void ***)(a1 + 72)
                                                                                               + 72))(**(void **)(a1 + 72), add, *(void *)(v73 - 16 * v72 + 16 * v66 + v70) / **(void **)(a1 + 56), v69 + v70);
              ++v71;
              std::string::size_type v69 = v82.__r_.__value_.__r.__words[0];
              v70 += 16;
            }
            while (v71 < (uint64_t)(v82.__r_.__value_.__l.__size_ - v82.__r_.__value_.__r.__words[0]) >> 4);
          }
          uint64_t v52 = __p;
          uint64_t v55 = v77 - (unsigned char *)__p;
        }
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
        if (__p)
        {
          unint64_t v77 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_126;
      }
      if (*v53 >= *v54)
      {
        uint64_t v61 = v54;
        goto LABEL_110;
      }
    }
    uint64_t v61 = v54 - 1;
    goto LABEL_110;
  }
  return result;
}

void sub_223FC9968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,int a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  a30 = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a43 < 0) {
    operator delete(a37);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"actual_row - forward_map_start", 30);
  std::string::size_type v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"forward_map_buffer.size()", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 257, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FC9CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_223FC9E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26D7678A8;
  *(_OWORD *)(v2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7678A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = result;
  return result;
}

void std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1)
{
  unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 1uLL);
  if (add < **(void **)(a1 + 16))
  {
    uint64_t v2 = a1;
    do
    {
      uint64_t v3 = *(void *)(v2 + 32);
      if (*(unsigned char *)(v3 + 288)) {
        unint64_t v4 = *(void *)(v3 + 32);
      }
      else {
        unint64_t v4 = 0;
      }
      uint64_t v5 = **(void **)(v2 + 24);
      int64_t v6 = v5 * add;
      unint64_t v7 = v5 * add + v5;
      if (v7 < v4) {
        unint64_t v4 = v7;
      }
      int64_t v118 = v4;
      unint64_t v8 = (int *)global_logger();
      if (v8[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v8)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v9 = (file_logger *)global_logger();
        started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 346, 1);
        uint64_t v11 = pthread_getspecific(*((void *)started + 74));
        if (v11 && *((unsigned char *)v11 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Processing bucket ", 18);
        }
        uint64_t v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
        std::string::size_type v13 = pthread_getspecific(*(void *)(v12 + 592));
        if (v13 && *((unsigned char *)v13 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)": ", 2);
        }
        uint64_t v14 = file_logger::operator<<<unsigned long>(v12);
        char v15 = pthread_getspecific(*(void *)(v14 + 592));
        if (v15 && *((unsigned char *)v15 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" - ", 3);
        }
        uint64_t v16 = file_logger::operator<<<unsigned long>(v14);
        unint64_t v17 = pthread_getspecific(*(void *)(v16 + 592));
        if (v17)
        {
          if (*((unsigned char *)v17 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[2] - 24) + 16));
            unsigned int v18 = std::locale::use_facet((const std::locale *)v128, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
            std::locale::~locale((std::locale *)v128);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v16);
            if (*(_DWORD *)(v16 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      unint64_t v114 = v118 - v6;
      std::vector<turi::flexible_type>::resize(&v144, v118 - v6);
      (*(void (**)(void, int64_t, int64_t, uint64_t *))(***(void ***)(v2 + 40) + 48))(**(void **)(v2 + 40), v6, v118, &v144);
      unint64_t v19 = **(void **)(v2 + 48);
      if (v19)
      {
        unint64_t v20 = 0;
        unint64_t v112 = add;
        do
        {
          uint64_t v21 = 0;
          unint64_t v116 = v20;
          std::string::size_type v22 = (uint64_t *)(**(void **)(v2 + 56) + 8 * v20);
          uint64_t v24 = *v22;
          BOOL v23 = v22 + 1;
          unint64_t v25 = v24 * v114;
          unint64_t v26 = **(void **)(v2 + 64);
          do
          {
            uint64_t v27 = v21;
            unint64_t v117 = v116 + v21;
            unint64_t v115 = v116 + v21 + 1;
            if (v25 >= v26) {
              break;
            }
            if (v115 >= v19) {
              break;
            }
            v25 += v23[v21++] * v114;
          }
          while (v25 < v26);
          unint64_t v28 = (int *)global_logger();
          if (v28[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v28)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            uint64_t v29 = (file_logger *)global_logger();
            unint64_t v30 = file_logger::start_stream(v29, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 373, 1);
            std::string::size_type v31 = pthread_getspecific(*((void *)v30 + 74));
            if (v31 && *((unsigned char *)v31 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"  Columns ", 10);
            }
            uint64_t v32 = file_logger::operator<<<unsigned long>((uint64_t)v30);
            uint64_t v33 = pthread_getspecific(*(void *)(v32 + 592));
            if (v33 && *((unsigned char *)v33 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)" to ", 4);
            }
            uint64_t v34 = file_logger::operator<<<unsigned long>(v32);
            uint64_t v35 = pthread_getspecific(*(void *)(v34 + 592));
            if (v35)
            {
              if (*((unsigned char *)v35 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(v35[2] - 24) + 16));
                long long v36 = std::locale::use_facet((const std::locale *)v128, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
                std::locale::~locale((std::locale *)v128);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v34);
                if (*(_DWORD *)(v34 + 600) == 7)
                {
                  __print_back_trace();
                  v109 = __cxa_allocate_exception(8uLL);
                  void *v109 = "LOG_FATAL encountered";
                  __cxa_throw(v109, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
          }
          std::vector<turi::flexible_type>::vector(v128, v114);
          std::vector<std::vector<turi::flexible_type>>::vector(v143, v27 + 1, (uint64_t **)v128);
          v140 = (void **)v128;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v140);
          v140 = 0;
          v141 = 0;
          v142 = 0;
          v139[0] = 0;
          v139[1] = 0;
          unint64_t v138 = (uint64_t *)v139;
          v128[0].__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v136, v27 + 1, v128);
          gettimeofday(&v135, 0);
          for (unint64_t i = v116; i <= v117; ++i)
          {
            turi::sframe::select_column(*(void *)(v2 + 32), i, &v119);
            turi::index_file_information::index_file_information(v128, (const turi::index_file_information *)(v119.tv_sec + 8));
            if (*(void *)&v119.tv_usec) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119.tv_usec);
            }
            uint64_t v38 = *(void *)(v2 + 72);
            unint64_t v39 = (long long *)(v133 + 24 * add);
            if (*((char *)v39 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v39, *((void *)v39 + 1));
            }
            else
            {
              long long v40 = *v39;
              v127.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
              *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v40;
            }
            v119.__darwin_time_t tv_sec = turi::v2_block_impl::block_manager::open_column(v38, (uint64_t)&v127);
            *(void *)&v119.tv_usec = v41;
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v127.__r_.__value_.__l.__data_);
            }
            __darwin_time_t v121 = (__darwin_time_t)&v119;
            *((void *)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__emplace_unique_key_args<std::tuple<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,unsigned long> const&>,std::tuple<>>(&v138, (unint64_t *)&v119, (uint64_t)&std::piecewise_construct, (_OWORD **)&v121)+ 6) = i;
            unint64_t v42 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(v2 + 72), v119.tv_sec, *(unint64_t *)&v119.tv_usec);
            if (v42)
            {
              uint64_t v43 = 0;
              unint64_t v44 = v141;
              do
              {
                __darwin_time_t tv_sec = v119.tv_sec;
                uint64_t v45 = *(void **)&v119.tv_usec;
                if (v44 >= v142)
                {
                  unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (v44 - v140);
                  unint64_t v48 = v47 + 1;
                  if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * (v142 - v140) > v48) {
                    unint64_t v48 = 0x5555555555555556 * (v142 - v140);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (v142 - v140) >= 0x555555555555555) {
                    unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v49 = v48;
                  }
                  if (v49) {
                    unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v142, v49);
                  }
                  else {
                    unint64_t v50 = 0;
                  }
                  uint64_t v51 = &v50[24 * v47];
                  *(void *)uint64_t v51 = tv_sec;
                  *((void *)v51 + 1) = v45;
                  *((void *)v51 + 2) = v43;
                  unint64_t v53 = v140;
                  uint64_t v52 = (long long *)v141;
                  uint64_t v54 = (void **)v51;
                  if (v141 != v140)
                  {
                    do
                    {
                      long long v55 = *(long long *)((char *)v52 - 24);
                      *(v54 - 1) = (void *)*((void *)v52 - 1);
                      *(_OWORD *)(v54 - 3) = v55;
                      v54 -= 3;
                      uint64_t v52 = (long long *)((char *)v52 - 24);
                    }
                    while (v52 != (long long *)v53);
                    uint64_t v52 = (long long *)v140;
                  }
                  unint64_t v44 = (void **)(v51 + 24);
                  v140 = v54;
                  v141 = (void **)(v51 + 24);
                  v142 = (void **)&v50[24 * v49];
                  if (v52) {
                    operator delete(v52);
                  }
                }
                else
                {
                  *unint64_t v44 = (void *)v119.tv_sec;
                  v44[1] = v45;
                  v44[2] = v43;
                  v44 += 3;
                }
                v141 = v44;
                ++v43;
              }
              while (v43 != (char *)v42);
            }
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v134, v134[1]);
            v119.__darwin_time_t tv_sec = (__darwin_time_t)&v133;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
            if (__p)
            {
              v132 = __p;
              operator delete(__p);
            }
            if (v130 < 0) {
              operator delete(v129);
            }
            if (SHIBYTE(v128[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v128[0].__r_.__value_.__l.__data_);
            }
          }
          unint64_t v56 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v141 - v140));
          v119.__darwin_time_t tv_sec = *(void *)(v2 + 72);
          if (v141 == v140) {
            uint64_t v57 = 0;
          }
          else {
            uint64_t v57 = v56;
          }
          std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,false>((uint64_t)v140, (long long *)v141, (turi::v2_block_impl::block_manager **)&v119, v57, 1);
          gettimeofday(&v135, 0);
          memset(v128, 0, 24);
          unint64_t v58 = (timeval *)v140;
          uint64_t v113 = v141;
          if (v140 != v141)
          {
            do
            {
              uint64_t v59 = *(void *)(v2 + 72);
              __darwin_time_t v60 = v58[1].tv_sec;
              timeval v125 = *v58;
              __darwin_time_t v126 = v60;
              turi::v2_block_impl::block_manager::read_typed_block(v59, (long long *)&v125.tv_sec, (uint64_t *)v128, 0);
              timeval v119 = *v58;
              unint64_t v61 = *(void *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)&v138, (unint64_t *)&v119)- v116;
              unint64_t v62 = v136;
              unint64_t v123 = v137 - v136;
              v124 = (__darwin_time_t *)v61;
              if (v61 >= v123)
              {
                __darwin_time_t v121 = (__darwin_time_t)&v124;
                v122 = &v123;
                turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
              }
              std::string::size_type size = v128[0].__r_.__value_.__l.__size_;
              std::string::size_type v64 = v128[0].__r_.__value_.__r.__words[0];
              if (v128[0].__r_.__value_.__l.__size_ != v128[0].__r_.__value_.__r.__words[0])
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                unint64_t v67 = v136[v61];
                do
                {
                  unint64_t v123 = (v145 - v144) >> 4;
                  v124 = (__darwin_time_t *)v67;
                  if (v67 >= v123)
                  {
                    __darwin_time_t v121 = (__darwin_time_t)&v124;
                    v122 = &v123;
                    turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
                  }
                  uint64_t v68 = *(__darwin_time_t **)(v144 + 16 * v67);
                  unint64_t v123 = v6;
                  v124 = v68;
                  if ((uint64_t)v68 < v6)
                  {
                    __darwin_time_t v121 = (__darwin_time_t)&v124;
                    v122 = &v123;
                    turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#3}::operator()();
                  }
                  unint64_t v123 = v118;
                  v124 = v68;
                  if ((uint64_t)v68 >= v118)
                  {
                    __darwin_time_t v121 = (__darwin_time_t)&v124;
                    v122 = &v123;
                    turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#4}::operator()();
                  }
                  std::string::size_type v69 = (uint64_t *)(v64 + v65);
                  uint64_t v70 = *(void *)(v143[0] + 24 * v61) + 16 * ((void)v68 - v6);
                  if (v64 + v65 != v70)
                  {
                    switch(*(unsigned char *)(v70 + 12))
                    {
                      case 2:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v70;
                          if (!*(void *)v70) {
                            goto LABEL_116;
                          }
                          if (*((char *)v71 + 31) < 0) {
                            operator delete((void *)v71[1]);
                          }
                          atomic_ullong *volatile v72 = v71;
                          uint64_t v73 = 0x1012C404EF22A49;
                          goto LABEL_115;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v80 = *(atomic_ullong *volatile *)v70;
                          if (!*(void *)v70) {
                            goto LABEL_116;
                          }
                          std::string v81 = (void *)v80[1];
                          if (v81)
                          {
                            v80[2] = (atomic_ullong)v81;
                            operator delete(v81);
                          }
                          atomic_ullong *volatile v72 = v80;
                          uint64_t v73 = 0x1080C409938AC02;
                          goto LABEL_115;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                          if (!*(void *)v70) {
                            goto LABEL_116;
                          }
                          __darwin_time_t v121 = (__darwin_time_t)(v74 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
                          goto LABEL_110;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                          if (!*(void *)v70) {
                            goto LABEL_116;
                          }
                          __darwin_time_t v121 = (__darwin_time_t)(v74 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
LABEL_110:
                          atomic_ullong *volatile v72 = v74;
                          uint64_t v73 = 0x1020C405E66F15BLL;
                          goto LABEL_115;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v82 = *(atomic_ullong *volatile *)v70;
                          if (!*(void *)v70) {
                            goto LABEL_116;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v82 + 2);
                          atomic_ullong *volatile v72 = v82;
                          unsigned int v79 = -235920773;
                          goto LABEL_114;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v75 = *(atomic_ullong *volatile *)v70;
                          if (*(void *)v70)
                          {
                            uint64_t v76 = (void *)v75[6];
                            if (v76)
                            {
                              v75[7] = (atomic_ullong)v76;
                              operator delete(v76);
                            }
                            unint64_t v77 = (void *)v75[3];
                            if (v77)
                            {
                              v75[4] = (atomic_ullong)v77;
                              operator delete(v77);
                            }
                            v78 = (std::__shared_weak_count *)v75[2];
                            if (v78) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v78);
                            }
                            atomic_ullong *volatile v72 = v75;
                            unsigned int v79 = 2071181815;
LABEL_114:
                            uint64_t v73 = v79 | 0x1030C4000000000;
LABEL_115:
                            MEMORY[0x22A614FA0](v72, v73);
                          }
LABEL_116:
                          *(void *)uint64_t v70 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    uint64_t v83 = *v69;
                    *(void *)(v70 + 5) = *(uint64_t *)((char *)v69 + 5);
                    *(void *)uint64_t v70 = v83;
                    *(unsigned char *)(v70 + 12) = *(unsigned char *)(v64 + v65 + 12);
                    *(unsigned char *)(v64 + v65 + 12) = 0;
                    unint64_t v67 = v62[v61];
                    std::string::size_type size = v128[0].__r_.__value_.__l.__size_;
                    std::string::size_type v64 = v128[0].__r_.__value_.__r.__words[0];
                  }
                  v62[v61] = ++v67;
                  ++v66;
                  v65 += 16;
                }
                while (v66 < (uint64_t)(size - v64) >> 4);
              }
              unint64_t v58 = (timeval *)((char *)v58 + 24);
              unint64_t add = v112;
              uint64_t v2 = a1;
            }
            while (v58 != (timeval *)v113);
          }
          char v84 = v138;
          if (v138 != (uint64_t *)v139)
          {
            do
            {
              turi::v2_block_impl::block_manager::close_column(*(void *)(v2 + 72), v84[4]);
              v85 = (uint64_t *)v84[1];
              if (v85)
              {
                do
                {
                  v86 = v85;
                  v85 = (uint64_t *)*v85;
                }
                while (v85);
              }
              else
              {
                do
                {
                  v86 = (uint64_t *)v84[2];
                  BOOL v87 = *v86 == (void)v84;
                  char v84 = v86;
                }
                while (!v87);
              }
              char v84 = v86;
            }
            while (v86 != (uint64_t *)v139);
          }
          v88 = (int *)global_logger();
          if (v88[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v88)) {
              goto LABEL_167;
            }
            v89 = (file_logger *)global_logger();
            uint64_t v90 = file_logger::start_stream(v89, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 432, 1);
            v91 = pthread_getspecific(*((void *)v90 + 74));
            if (v91 && *((unsigned char *)v91 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91 + 2, (uint64_t)"Permute buffer fill in ", 23);
            }
            gettimeofday(&v119, 0);
            uint64_t v92 = file_logger::operator<<<double>((uint64_t)v90);
            v93 = pthread_getspecific(*(void *)(v92 + 592));
            if (v93)
            {
              if (*((unsigned char *)v93 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(v93[2] - 24) + 16));
                v94 = std::locale::use_facet((const std::locale *)&v119, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
                std::locale::~locale((std::locale *)&v119);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v92);
                if (*(_DWORD *)(v92 + 600) == 7) {
                  goto LABEL_170;
                }
              }
            }
          }
          gettimeofday(&v135, 0);
          for (unint64_t j = v116; j <= v117; ++j)
          {
            unint64_t v96 = j - v116;
            if ((*(void *)(**(void **)(v2 + 80) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j))
            {
              v119.__darwin_time_t tv_sec = 0;
              *(void *)&v119.tv_usec = 0;
              uint64_t v120 = 0;
              v97 = (uint64_t *)(v143[0] + 24 * v96);
              uint64_t v98 = *v97;
              uint64_t v99 = v97[1];
              while (v98 != v99)
              {
                LODWORD(v124) = *(char *)(v98 + 12);
                if (v124)
                {
                  __darwin_time_t v121 = (__darwin_time_t)&v124;
                  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#5}::operator()();
                }
                uint64_t v100 = *(void *)(**(void **)(v2 + 88) + 16 * j);
                (*(void (**)(uint64_t, void, uint64_t, timeval *))(*(void *)v100 + 48))(v100, *(void *)v98, *(void *)v98 + 1, &v119);
                __darwin_time_t v121 = (*(void *)&v119.tv_usec - v119.tv_sec) >> 4;
                if (*(void *)&v119.tv_usec - v119.tv_sec != 16)
                {
                  v124 = &v121;
                  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#6}::operator()();
                }
                (*(void (**)(void, unint64_t, unint64_t))(***(void ***)(v2 + 96) + 72))(**(void **)(v2 + 96), j, add);
                v98 += 16;
              }
              __darwin_time_t v121 = (__darwin_time_t)&v119;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
            }
            else
            {
              (*(void (**)(void, unint64_t, unint64_t, unint64_t))(***(void ***)(v2 + 96) + 104))(**(void **)(v2 + 96), j, add, v143[0] + 24 * v96);
            }
          }
          v101 = (int *)global_logger();
          if (v101[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v101)) {
LABEL_167:
            }
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v102 = (file_logger *)global_logger();
            uint64_t v103 = file_logger::start_stream(v102, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 454, 1);
            v104 = pthread_getspecific(*((void *)v103 + 74));
            if (v104 && *((unsigned char *)v104 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104 + 2, (uint64_t)"write columns in ", 17);
            }
            gettimeofday(&v119, 0);
            uint64_t v105 = file_logger::operator<<<double>((uint64_t)v103);
            v106 = pthread_getspecific(*(void *)(v105 + 592));
            if (v106)
            {
              if (*((unsigned char *)v106 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(v106[2] - 24) + 16));
                v107 = std::locale::use_facet((const std::locale *)&v119, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
                std::locale::~locale((std::locale *)&v119);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v105);
                if (*(_DWORD *)(v105 + 600) == 7)
                {
LABEL_170:
                  __print_back_trace();
                  v108 = __cxa_allocate_exception(8uLL);
                  void *v108 = "LOG_FATAL encountered";
                  __cxa_throw(v108, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
          }
          gettimeofday(&v135, 0);
          (*(void (**)(void, unint64_t))(***(void ***)(v2 + 96) + 112))(**(void **)(v2 + 96), add);
          v119.__darwin_time_t tv_sec = (__darwin_time_t)v128;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
          if (v136)
          {
            std::string::size_type v137 = v136;
            operator delete(v136);
          }
          std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v138, v139[0]);
          if (v140)
          {
            v141 = v140;
            operator delete(v140);
          }
          v128[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
          std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
          unint64_t v19 = **(void **)(v2 + 48);
          unint64_t v20 = v115;
        }
        while (v115 < v19);
      }
      v128[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
      unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)(v2 + 8), 1uLL);
    }
    while (add < **(void **)(v2 + 16));
  }
}

void sub_223FCB034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::locale a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::locale::~locale(&a21);
  a25 = &a40;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::string::size_type v64 = *(void **)(v62 - 224);
  if (v64)
  {
    *(void *)(v62 - 216) = v64;
    operator delete(v64);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v62 - 200, *(void **)(v62 - 192));
  uint64_t v65 = *(void **)(v62 - 176);
  if (v65)
  {
    *(void *)(v62 - 168) = v65;
    operator delete(v65);
  }
  a40.__locale_ = (std::locale::__imp *)(v62 - 152);
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  *(void *)(v62 - 152) = v62 - 128;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 152));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3,std::allocator<turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 48;
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_id - col_start", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"cur_row_number.size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCB41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_number", 10);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"forward_map_buffer.size()", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 420, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCB6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"forward_map_buffer[row_number].get<flex_int>()", 46);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"row_start", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 421, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCB944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"forward_map_buffer[row_number].get<flex_int>()", 46);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"row_end", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 422, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCBBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#5}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)(value.get_type())", 23);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)(flex_type_enum::INTEGER)", 30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 444, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#5}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCBE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#6}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"indirect_buffer.size()", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_permute.cpp", "operator()", 447, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCC0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<turi::flexible_type>>::vector(void *a1, unint64_t a2, uint64_t **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    int64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      long long v6[2] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v6, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_223FCC298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

_OWORD *std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__emplace_unique_key_args<std::tuple<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long,unsigned long> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  int64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  __n128 result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    while (1)
    {
      while (1)
      {
        unint64_t v8 = v4;
        unint64_t v9 = v4[4];
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (void *)*v8;
        __n128 result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      __n128 result = v8 + 1;
      uint64_t v4 = (void *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  unint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,false>(uint64_t result, long long *a2, turi::v2_block_impl::block_manager **a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    v204 = a2 - 3;
    uint64_t v205 = (uint64_t)a2 - 24;
    v202 = (long long *)((char *)a2 - 72);
    unint64_t v11 = v10;
    v214 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                v97 = *a3;
                uint64_t v98 = *((void *)a2 - 1);
                long long v219 = *(long long *)((char *)a2 - 24);
                uint64_t v220 = v98;
                unint64_t v99 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v97, (unint64_t *)&v219);
                uint64_t v100 = *a3;
                uint64_t v101 = *(void *)(v10 + 16);
                long long v217 = *(_OWORD *)v10;
                uint64_t v218 = v101;
                __n128 result = turi::v2_block_impl::block_manager::get_block_info(v100, (unint64_t *)&v217);
                if (v99 < *(void *)result)
                {
                  uint64_t v102 = *(void *)v10;
                  *(void *)unint64_t v10 = *((void *)a2 - 3);
                  *((void *)a2 - 3) = v102;
                  uint64_t v103 = *(void *)(v10 + 8);
                  *(void *)(v10 + 8) = *((void *)a2 - 2);
                  *((void *)a2 - 2) = v103;
                  uint64_t v104 = *(void *)(v10 + 16);
                  *(void *)(v10 + 16) = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v104;
                }
                break;
              case 3uLL:
                __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)v10, (long long *)(v10 + 24), (long long *)v205, a3);
                break;
              case 4uLL:
                __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)v10, (long long *)(v10 + 24), (long long *)(v10 + 48), (uint64_t *)v205, a3);
                break;
              case 5uLL:
                __n128 result = (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,0>((long long *)v10, (long long *)(v10 + 24), (uint64_t *)(v10 + 48), (uint64_t *)(v10 + 72), v205, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 575)
          {
            if (a5)
            {
              if ((long long *)v10 != a2)
              {
                uint64_t v105 = (char *)(v10 + 24);
                if ((long long *)(v10 + 24) != a2)
                {
                  uint64_t v106 = 0;
                  v107 = (_OWORD *)v10;
                  do
                  {
                    v108 = v105;
                    v109 = *a3;
                    uint64_t v110 = *((void *)v105 + 2);
                    long long v219 = *v108;
                    uint64_t v220 = v110;
                    unint64_t v111 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v109, (unint64_t *)&v219);
                    unint64_t v112 = *a3;
                    uint64_t v113 = *((void *)v107 + 2);
                    long long v217 = *v107;
                    uint64_t v218 = v113;
                    __n128 result = turi::v2_block_impl::block_manager::get_block_info(v112, (unint64_t *)&v217);
                    if (v111 < *(void *)result)
                    {
                      uint64_t v114 = *(void *)v108;
                      uint64_t v115 = v106;
                      uint64_t v117 = *((void *)v107 + 4);
                      uint64_t v116 = *((void *)v107 + 5);
                      while (1)
                      {
                        uint64_t v118 = v10 + v115;
                        *(_OWORD *)(v118 + 24) = *(_OWORD *)(v10 + v115);
                        *(void *)(v118 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(v10 + v115 + 16);
                        if (!v115) {
                          break;
                        }
                        timeval v119 = *a3;
                        *(void *)&long long v219 = v114;
                        *((void *)&v219 + 1) = v117;
                        uint64_t v220 = v116;
                        unint64_t v120 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v119, (unint64_t *)&v219);
                        __darwin_time_t v121 = *a3;
                        uint64_t v122 = *(void *)(v118 - 8);
                        long long v217 = *(_OWORD *)(v118 - 24);
                        uint64_t v218 = v122;
                        __n128 result = turi::v2_block_impl::block_manager::get_block_info(v121, (unint64_t *)&v217);
                        v115 -= 24;
                        if (v120 >= *(void *)result)
                        {
                          unint64_t v123 = (void *)(v10 + v115 + 24);
                          goto LABEL_71;
                        }
                      }
                      unint64_t v123 = (void *)v10;
LABEL_71:
                      void *v123 = v114;
                      v123[1] = v117;
                      v123[2] = v116;
                      a2 = v214;
                    }
                    uint64_t v105 = (char *)v108 + 24;
                    v106 += 24;
                    v107 = v108;
                  }
                  while ((_OWORD *)((char *)v108 + 24) != a2);
                }
              }
            }
            else if ((long long *)v10 != a2)
            {
              v183 = (char *)(v10 + 24);
              if ((long long *)(v10 + 24) != a2)
              {
                v184 = (void *)(v10 + 40);
                do
                {
                  v185 = v183;
                  v186 = *a3;
                  uint64_t v187 = *((void *)v183 + 2);
                  long long v219 = *v185;
                  uint64_t v220 = v187;
                  unint64_t v188 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v186, (unint64_t *)&v219);
                  v189 = *a3;
                  uint64_t v190 = *(void *)(v10 + 16);
                  long long v217 = *(_OWORD *)v10;
                  uint64_t v218 = v190;
                  __n128 result = turi::v2_block_impl::block_manager::get_block_info(v189, (unint64_t *)&v217);
                  if (v188 < *(void *)result)
                  {
                    uint64_t v191 = *(void *)v185;
                    v192 = v184;
                    uint64_t v194 = *(void *)(v10 + 32);
                    uint64_t v193 = *(void *)(v10 + 40);
                    do
                    {
                      v195 = v192;
                      long long v196 = *(_OWORD *)(v192 - 5);
                      uint64_t v197 = *(v192 - 3);
                      v192 -= 3;
                      *((_OWORD *)v195 - 1) = v196;
                      void *v195 = v197;
                      v198 = *a3;
                      *(void *)&long long v219 = v191;
                      *((void *)&v219 + 1) = v194;
                      uint64_t v220 = v193;
                      unint64_t v199 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v198, (unint64_t *)&v219);
                      v200 = *a3;
                      uint64_t v201 = *(v195 - 6);
                      long long v217 = *((_OWORD *)v195 - 4);
                      uint64_t v218 = v201;
                      __n128 result = turi::v2_block_impl::block_manager::get_block_info(v200, (unint64_t *)&v217);
                    }
                    while (v199 < *(void *)result);
                    *(v192 - 2) = v191;
                    *(v192 - 1) = v194;
                    void *v192 = v193;
                    a2 = v214;
                  }
                  v183 = (char *)v185 + 24;
                  v184 += 3;
                  unint64_t v10 = (unint64_t)v185;
                }
                while ((_OWORD *)((char *)v185 + 24) != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v124 = (v13 - 2) >> 1;
              int64_t v125 = v124;
              do
              {
                int64_t v126 = v125;
                if (v124 >= v125)
                {
                  uint64_t v127 = (2 * v125) | 1;
                  unint64_t v128 = v10 + 24 * v127;
                  uint64_t v129 = 2 * v125 + 2;
                  if (v129 < (uint64_t)v13)
                  {
                    char v130 = *a3;
                    uint64_t v131 = *(void *)(v128 + 16);
                    long long v219 = *(_OWORD *)v128;
                    uint64_t v220 = v131;
                    unint64_t v132 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v130, (unint64_t *)&v219);
                    uint64_t v133 = *a3;
                    uint64_t v134 = *(void *)(v128 + 40);
                    long long v217 = *(_OWORD *)(v128 + 24);
                    uint64_t v218 = v134;
                    BOOL v5 = v132 >= *(void *)turi::v2_block_impl::block_manager::get_block_info(v133, (unint64_t *)&v217);
                    int64_t v124 = (v13 - 2) >> 1;
                    if (!v5)
                    {
                      v128 += 24;
                      uint64_t v127 = v129;
                    }
                  }
                  unint64_t v135 = v10 + 24 * v126;
                  std::string::size_type v136 = *a3;
                  uint64_t v137 = *(void *)(v128 + 16);
                  long long v219 = *(_OWORD *)v128;
                  uint64_t v220 = v137;
                  unint64_t v138 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v136, (unint64_t *)&v219);
                  v139 = *a3;
                  uint64_t v140 = *(void *)(v135 + 16);
                  long long v217 = *(_OWORD *)v135;
                  uint64_t v218 = v140;
                  __n128 result = turi::v2_block_impl::block_manager::get_block_info(v139, (unint64_t *)&v217);
                  if (v138 >= *(void *)result)
                  {
                    int64_t v203 = v126;
                    uint64_t v209 = *(void *)(v135 + 8);
                    uint64_t v212 = *(void *)v135;
                    uint64_t v206 = *(void *)(v135 + 16);
                    do
                    {
                      v141 = (void *)v135;
                      unint64_t v135 = v128;
                      void *v141 = *(void *)v128;
                      v141[1] = *(void *)(v128 + 8);
                      v141[2] = *(void *)(v128 + 16);
                      if (v124 < v127) {
                        break;
                      }
                      uint64_t v142 = (2 * v127) | 1;
                      unint64_t v128 = v10 + 24 * v142;
                      uint64_t v143 = 2 * v127 + 2;
                      if (v143 < (uint64_t)v13)
                      {
                        uint64_t v144 = *a3;
                        uint64_t v145 = *(void *)(v128 + 16);
                        long long v219 = *(_OWORD *)v128;
                        uint64_t v220 = v145;
                        unint64_t v146 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v144, (unint64_t *)&v219);
                        v147 = *a3;
                        uint64_t v148 = *(void *)(v128 + 40);
                        long long v217 = *(_OWORD *)(v128 + 24);
                        uint64_t v218 = v148;
                        BOOL v5 = v146 >= *(void *)turi::v2_block_impl::block_manager::get_block_info(v147, (unint64_t *)&v217);
                        int64_t v124 = (v13 - 2) >> 1;
                        if (!v5)
                        {
                          v128 += 24;
                          uint64_t v142 = v143;
                        }
                      }
                      unint64_t v149 = *a3;
                      uint64_t v150 = *(void *)(v128 + 16);
                      long long v219 = *(_OWORD *)v128;
                      uint64_t v220 = v150;
                      unint64_t v151 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v149, (unint64_t *)&v219);
                      std::string v152 = *a3;
                      *(void *)&long long v217 = v212;
                      *((void *)&v217 + 1) = v209;
                      uint64_t v218 = v206;
                      __n128 result = turi::v2_block_impl::block_manager::get_block_info(v152, (unint64_t *)&v217);
                      uint64_t v127 = v142;
                    }
                    while (v151 >= *(void *)result);
                    *(void *)unint64_t v135 = v212;
                    *(void *)(v135 + 8) = v209;
                    *(void *)(v135 + 16) = v206;
                    int64_t v126 = v203;
                  }
                }
                int64_t v125 = v126 - 1;
              }
              while (v126);
              int64_t v153 = v12 / 0x18uLL;
              v154 = v214;
              do
              {
                v215 = v154;
                uint64_t v155 = 0;
                uint64_t v210 = *(void *)(v10 + 8);
                uint64_t v213 = *(void *)v10;
                uint64_t v207 = *(void *)(v10 + 16);
                timeval v156 = (void *)v10;
                do
                {
                  uint64_t v157 = (uint64_t)&v156[3 * v155 + 3];
                  uint64_t v158 = (2 * v155) | 1;
                  uint64_t v159 = 2 * v155 + 2;
                  if (v159 < v153)
                  {
                    v160 = *a3;
                    uint64_t v161 = v156[3 * v155 + 5];
                    long long v219 = *(_OWORD *)v157;
                    uint64_t v220 = v161;
                    unint64_t v162 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v160, (unint64_t *)&v219);
                    std::string v163 = *a3;
                    uint64_t v164 = *(void *)(v157 + 40);
                    long long v217 = *(_OWORD *)(v157 + 24);
                    uint64_t v218 = v164;
                    __n128 result = turi::v2_block_impl::block_manager::get_block_info(v163, (unint64_t *)&v217);
                    if (v162 < *(void *)result)
                    {
                      v157 += 24;
                      uint64_t v158 = v159;
                    }
                  }
                  *timeval v156 = *(void *)v157;
                  v156[1] = *(void *)(v157 + 8);
                  v156[2] = *(void *)(v157 + 16);
                  timeval v156 = (void *)v157;
                  uint64_t v155 = v158;
                }
                while (v158 <= (uint64_t)((unint64_t)(v153 - 2) >> 1));
                unint64_t v165 = (long long *)((char *)v215 - 24);
                if ((long long *)v157 == (long long *)((char *)v215 - 24))
                {
                  *(void *)uint64_t v157 = v213;
                  *(void *)(v157 + 8) = v210;
                  *(void *)(v157 + 16) = v207;
                }
                else
                {
                  *(void *)uint64_t v157 = *((void *)v215 - 3);
                  *(void *)(v157 + 8) = *((void *)v215 - 2);
                  *(void *)(v157 + 16) = *((void *)v215 - 1);
                  *((void *)v215 - 3) = v213;
                  *((void *)v215 - 2) = v210;
                  *((void *)v215 - 1) = v207;
                  uint64_t v166 = v157 - v10 + 24;
                  if (v166 >= 25)
                  {
                    unint64_t v167 = (v166 / 0x18uLL - 2) >> 1;
                    uint64_t v168 = v10 + 24 * v167;
                    v169 = *a3;
                    uint64_t v170 = *(void *)(v168 + 16);
                    long long v219 = *(_OWORD *)v168;
                    uint64_t v220 = v170;
                    unint64_t v171 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v169, (unint64_t *)&v219);
                    std::string v172 = *a3;
                    uint64_t v173 = *(void *)(v157 + 16);
                    long long v217 = *(_OWORD *)v157;
                    uint64_t v218 = v173;
                    __n128 result = turi::v2_block_impl::block_manager::get_block_info(v172, (unint64_t *)&v217);
                    if (v171 < *(void *)result)
                    {
                      v216 = (long long *)((char *)v215 - 24);
                      uint64_t v174 = *(void *)v157;
                      uint64_t v175 = *(void *)(v157 + 8);
                      uint64_t v176 = *(void *)(v157 + 16);
                      do
                      {
                        v177 = (void *)v157;
                        uint64_t v157 = v168;
                        void *v177 = *(void *)v168;
                        v177[1] = *(void *)(v168 + 8);
                        v177[2] = *(void *)(v168 + 16);
                        if (!v167) {
                          break;
                        }
                        unint64_t v167 = (v167 - 1) >> 1;
                        uint64_t v168 = v10 + 24 * v167;
                        v178 = *a3;
                        uint64_t v179 = *(void *)(v168 + 16);
                        long long v219 = *(_OWORD *)v168;
                        uint64_t v220 = v179;
                        unint64_t v180 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v178, (unint64_t *)&v219);
                        v181 = *a3;
                        *(void *)&long long v217 = v174;
                        *((void *)&v217 + 1) = v175;
                        uint64_t v218 = v176;
                        __n128 result = turi::v2_block_impl::block_manager::get_block_info(v181, (unint64_t *)&v217);
                      }
                      while (v180 < *(void *)result);
                      *(void *)uint64_t v157 = v174;
                      *(void *)(v157 + 8) = v175;
                      *(void *)(v157 + 16) = v176;
                      unint64_t v165 = v216;
                    }
                  }
                }
                v154 = v165;
              }
              while (v153-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v10 + 24 * (v13 >> 1);
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)v15, (long long *)v10, (long long *)v205, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)v10, (long long *)v15, (long long *)v205, a3);
            uint64_t v16 = 3 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)(v10 + 24), (long long *)(v10 + 8 * v16 - 24), v204, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)(v10 + 48), (long long *)(v10 + 24 + 8 * v16), v202, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)(v10 + 8 * v16 - 24), (long long *)v15, (long long *)(v10 + 24 + 8 * v16), a3);
            long long v17 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)unint64_t v15 = v17;
            uint64_t v18 = *(void *)(v10 + 16);
            *(void *)(v10 + 16) = *(void *)(v15 + 16);
            *(void *)(v15 + 16) = v18;
          }
          uint64_t v211 = a4 - 1;
          if (a5) {
            break;
          }
          unint64_t v19 = *a3;
          uint64_t v20 = *(void *)(v10 - 8);
          long long v219 = *(_OWORD *)(v10 - 24);
          uint64_t v220 = v20;
          unint64_t v21 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v19, (unint64_t *)&v219);
          std::string::size_type v22 = *a3;
          uint64_t v23 = *(void *)(v10 + 16);
          long long v217 = *(_OWORD *)v10;
          uint64_t v218 = v23;
          if (v21 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v22, (unint64_t *)&v217)) {
            break;
          }
          uint64_t v61 = *(void *)v10;
          uint64_t v62 = *(void *)(v10 + 8);
          uint64_t v63 = *(void *)(v10 + 16);
          std::string::size_type v64 = *a3;
          *(void *)&long long v219 = *(void *)v10;
          *((void *)&v219 + 1) = v62;
          uint64_t v220 = v63;
          unint64_t v65 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v64, (unint64_t *)&v219);
          unint64_t v66 = *a3;
          uint64_t v67 = *(void *)(v205 + 16);
          long long v217 = *(_OWORD *)v205;
          uint64_t v218 = v67;
          __n128 result = turi::v2_block_impl::block_manager::get_block_info(v66, (unint64_t *)&v217);
          if (v65 >= *(void *)result)
          {
            unint64_t v73 = v10 + 24;
            do
            {
              unint64_t v11 = v73;
              if (v73 >= (unint64_t)a2) {
                break;
              }
              atomic_ullong *volatile v74 = *a3;
              *(void *)&long long v219 = v61;
              *((void *)&v219 + 1) = v62;
              uint64_t v220 = v63;
              unint64_t v75 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v74, (unint64_t *)&v219);
              uint64_t v76 = *a3;
              uint64_t v77 = *(void *)(v11 + 16);
              long long v217 = *(_OWORD *)v11;
              uint64_t v218 = v77;
              __n128 result = turi::v2_block_impl::block_manager::get_block_info(v76, (unint64_t *)&v217);
              unint64_t v73 = v11 + 24;
            }
            while (v75 >= *(void *)result);
          }
          else
          {
            unint64_t v68 = v10;
            do
            {
              unint64_t v11 = v68 + 24;
              std::string::size_type v69 = *a3;
              *(void *)&long long v219 = v61;
              *((void *)&v219 + 1) = v62;
              uint64_t v220 = v63;
              unint64_t v70 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v69, (unint64_t *)&v219);
              atomic_ullong *volatile v71 = *a3;
              uint64_t v72 = *(void *)(v68 + 40);
              long long v217 = *(_OWORD *)(v68 + 24);
              uint64_t v218 = v72;
              __n128 result = turi::v2_block_impl::block_manager::get_block_info(v71, (unint64_t *)&v217);
              v68 += 24;
            }
            while (v70 >= *(void *)result);
          }
          v78 = a2;
          if (v11 < (unint64_t)a2)
          {
            unsigned int v79 = a2;
            do
            {
              v78 = (long long *)((char *)v79 - 24);
              atomic_ullong *volatile v80 = *a3;
              *(void *)&long long v219 = v61;
              *((void *)&v219 + 1) = v62;
              uint64_t v220 = v63;
              unint64_t v81 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v80, (unint64_t *)&v219);
              atomic_ullong *volatile v82 = *a3;
              uint64_t v83 = *((void *)v79 - 1);
              long long v217 = *(long long *)((char *)v79 - 24);
              uint64_t v218 = v83;
              __n128 result = turi::v2_block_impl::block_manager::get_block_info(v82, (unint64_t *)&v217);
              unsigned int v79 = (long long *)((char *)v79 - 24);
            }
            while (v81 < *(void *)result);
          }
          while (v11 < (unint64_t)v78)
          {
            uint64_t v84 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v78;
            *(void *)v78 = v84;
            uint64_t v85 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *((void *)v78 + 1);
            *((void *)v78 + 1) = v85;
            uint64_t v86 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = *((void *)v78 + 2);
            *((void *)v78 + 2) = v86;
            do
            {
              unint64_t v87 = v11;
              v88 = *a3;
              v11 += 24;
              *(void *)&long long v219 = v61;
              *((void *)&v219 + 1) = v62;
              uint64_t v220 = v63;
              unint64_t v89 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v88, (unint64_t *)&v219);
              uint64_t v90 = *a3;
              uint64_t v91 = *(void *)(v87 + 40);
              long long v217 = *(_OWORD *)(v87 + 24);
              uint64_t v218 = v91;
            }
            while (v89 >= *(void *)turi::v2_block_impl::block_manager::get_block_info(v90, (unint64_t *)&v217));
            do
            {
              uint64_t v92 = v78;
              v93 = *a3;
              v78 = (long long *)((char *)v78 - 24);
              *(void *)&long long v219 = v61;
              *((void *)&v219 + 1) = v62;
              uint64_t v220 = v63;
              unint64_t v94 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v93, (unint64_t *)&v219);
              v95 = *a3;
              uint64_t v96 = *((void *)v92 - 1);
              long long v217 = *(long long *)((char *)v92 - 24);
              uint64_t v218 = v96;
              __n128 result = turi::v2_block_impl::block_manager::get_block_info(v95, (unint64_t *)&v217);
            }
            while (v94 < *(void *)result);
          }
          BOOL v5 = v11 - 24 >= v10;
          BOOL v6 = v11 - 24 == v10;
          if (v11 - 24 != v10)
          {
            *(void *)unint64_t v10 = *(void *)(v11 - 24);
            *(void *)(v10 + 8) = *(void *)(v11 - 16);
            *(void *)(v10 + 16) = *(void *)(v11 - 8);
          }
          a5 = 0;
          *(void *)(v11 - 24) = v61;
          *(void *)(v11 - 16) = v62;
          *(void *)(v11 - 8) = v63;
          a4 = v211;
        }
        uint64_t v24 = 0;
        uint64_t v25 = *(void *)v10;
        uint64_t v26 = *(void *)(v10 + 8);
        uint64_t v27 = *(void *)(v10 + 16);
        do
        {
          unint64_t v28 = *a3;
          uint64_t v29 = *(void *)(v10 + v24 + 40);
          long long v219 = *(_OWORD *)(v10 + v24 + 24);
          uint64_t v220 = v29;
          unint64_t v30 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v28, (unint64_t *)&v219);
          std::string::size_type v31 = *a3;
          *(void *)&long long v217 = v25;
          *((void *)&v217 + 1) = v26;
          uint64_t v218 = v27;
          v24 += 24;
        }
        while (v30 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v31, (unint64_t *)&v217));
        unint64_t v32 = v10 + v24;
        uint64_t v33 = v214;
        if (v24 == 24)
        {
          long long v40 = v214;
          while (v32 < (unint64_t)v40)
          {
            uint64_t v34 = (long long *)((char *)v40 - 24);
            uint64_t v41 = *a3;
            uint64_t v42 = *((void *)v40 - 1);
            long long v219 = *(long long *)((char *)v40 - 24);
            uint64_t v220 = v42;
            unint64_t v43 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v41, (unint64_t *)&v219);
            unint64_t v44 = *a3;
            *(void *)&long long v217 = v25;
            *((void *)&v217 + 1) = v26;
            uint64_t v218 = v27;
            uint64_t block_info = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v44, (unint64_t *)&v217);
            long long v40 = v34;
            if (v43 < *block_info) {
              goto LABEL_22;
            }
          }
          uint64_t v34 = v40;
        }
        else
        {
          do
          {
            uint64_t v34 = (long long *)((char *)v33 - 24);
            uint64_t v35 = *a3;
            uint64_t v36 = *((void *)v33 - 1);
            long long v219 = *(long long *)((char *)v33 - 24);
            uint64_t v220 = v36;
            unint64_t v37 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v35, (unint64_t *)&v219);
            uint64_t v38 = *a3;
            *(void *)&long long v217 = v25;
            *((void *)&v217 + 1) = v26;
            uint64_t v218 = v27;
            unint64_t v39 = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v38, (unint64_t *)&v217);
            uint64_t v33 = v34;
          }
          while (v37 >= *v39);
        }
LABEL_22:
        unint64_t v11 = v32;
        if (v32 < (unint64_t)v34)
        {
          unint64_t v46 = v34;
          do
          {
            uint64_t v47 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v46;
            *(void *)unint64_t v46 = v47;
            uint64_t v48 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *((void *)v46 + 1);
            *((void *)v46 + 1) = v48;
            uint64_t v49 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = *((void *)v46 + 2);
            *((void *)v46 + 2) = v49;
            do
            {
              uint64_t v50 = *(void *)(v11 + 40);
              long long v51 = *(_OWORD *)(v11 + 24);
              v11 += 24;
              uint64_t v52 = *a3;
              long long v219 = v51;
              uint64_t v220 = v50;
              unint64_t v53 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v52, (unint64_t *)&v219);
              uint64_t v54 = *a3;
              *(void *)&long long v217 = v25;
              *((void *)&v217 + 1) = v26;
              uint64_t v218 = v27;
            }
            while (v53 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v54, (unint64_t *)&v217));
            do
            {
              uint64_t v55 = *((void *)v46 - 1);
              long long v56 = *(long long *)((char *)v46 - 24);
              unint64_t v46 = (long long *)((char *)v46 - 24);
              uint64_t v57 = *a3;
              long long v219 = v56;
              uint64_t v220 = v55;
              unint64_t v58 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v57, (unint64_t *)&v219);
              uint64_t v59 = *a3;
              *(void *)&long long v217 = v25;
              *((void *)&v217 + 1) = v26;
              uint64_t v218 = v27;
            }
            while (v58 >= *(void *)turi::v2_block_impl::block_manager::get_block_info(v59, (unint64_t *)&v217));
          }
          while (v11 < (unint64_t)v46);
        }
        if (v11 - 24 != v10)
        {
          *(void *)unint64_t v10 = *(void *)(v11 - 24);
          *(void *)(v10 + 8) = *(void *)(v11 - 16);
          *(void *)(v10 + 16) = *(void *)(v11 - 8);
        }
        *(void *)(v11 - 24) = v25;
        *(void *)(v11 - 16) = v26;
        *(void *)(v11 - 8) = v27;
        BOOL v5 = v32 >= (unint64_t)v34;
        a4 = v211;
        a2 = v214;
        if (v5) {
          break;
        }
LABEL_34:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,false>(v10, v11 - 24, a3, v211, a5 & 1);
        a5 = 0;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((uint64_t *)v10, (long long *)(v11 - 24), a3);
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((uint64_t *)v11, v214, a3);
      if (result) {
        break;
      }
      if (!v60) {
        goto LABEL_34;
      }
    }
    a2 = (long long *)(v11 - 24);
    if (!v60) {
      continue;
    }
    return result;
  }
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,0>(long long *a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, turi::v2_block_impl::block_manager **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>(a1, a2, (long long *)a3, a4, a6);
  uint64_t v12 = *a6;
  long long v39 = *(_OWORD *)a5;
  uint64_t v40 = *(void *)(a5 + 16);
  unint64_t v13 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v12, (unint64_t *)&v39);
  unint64_t v14 = *a6;
  long long v37 = *(_OWORD *)a4;
  uint64_t v38 = a4[2];
  __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v14, (unint64_t *)&v37);
  if (v13 < *result)
  {
    uint64_t v16 = *a4;
    *a4 = *(void *)a5;
    *(void *)a5 = v16;
    uint64_t v17 = a4[1];
    a4[1] = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v17;
    uint64_t v18 = a4[2];
    a4[2] = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v18;
    unint64_t v19 = *a6;
    long long v39 = *(_OWORD *)a4;
    uint64_t v40 = a4[2];
    unint64_t v20 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v19, (unint64_t *)&v39);
    unint64_t v21 = *a6;
    long long v37 = *(_OWORD *)a3;
    uint64_t v38 = a3[2];
    __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v21, (unint64_t *)&v37);
    if (v20 < *result)
    {
      uint64_t v22 = *a3;
      *a3 = *a4;
      *a4 = v22;
      uint64_t v23 = a3[1];
      a3[1] = a4[1];
      a4[1] = v23;
      uint64_t v24 = a3[2];
      a3[2] = a4[2];
      a4[2] = v24;
      uint64_t v25 = *a6;
      long long v39 = *(_OWORD *)a3;
      uint64_t v40 = a3[2];
      unint64_t v26 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v25, (unint64_t *)&v39);
      uint64_t v27 = *a6;
      long long v37 = *a2;
      uint64_t v38 = *((void *)a2 + 2);
      __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v27, (unint64_t *)&v37);
      if (v26 < *result)
      {
        uint64_t v28 = *(void *)a2;
        *(void *)a2 = *a3;
        *a3 = v28;
        uint64_t v29 = *((void *)a2 + 1);
        *((void *)a2 + 1) = a3[1];
        a3[1] = v29;
        uint64_t v30 = *((void *)a2 + 2);
        *((void *)a2 + 2) = a3[2];
        a3[2] = v30;
        std::string::size_type v31 = *a6;
        long long v39 = *a2;
        uint64_t v40 = *((void *)a2 + 2);
        unint64_t v32 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v31, (unint64_t *)&v39);
        uint64_t v33 = *a6;
        long long v37 = *a1;
        uint64_t v38 = *((void *)a1 + 2);
        __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v33, (unint64_t *)&v37);
        if (v32 < *result)
        {
          uint64_t v34 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v34;
          uint64_t v35 = *((void *)a1 + 1);
          *((void *)a1 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v35;
          uint64_t v36 = *((void *)a1 + 2);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a2 + 2) = v36;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>(long long *a1, long long *a2, long long *a3, turi::v2_block_impl::block_manager **a4)
{
  unint64_t v8 = *a4;
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  unint64_t v9 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v8, (unint64_t *)&v39);
  unint64_t v10 = *a4;
  long long v37 = *a1;
  uint64_t v38 = *((void *)a1 + 2);
  if (v9 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v10, (unint64_t *)&v37))
  {
    unint64_t v11 = *a4;
    long long v39 = *a3;
    uint64_t v40 = *((void *)a3 + 2);
    unint64_t v12 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v11, (unint64_t *)&v39);
    unint64_t v13 = *a4;
    long long v37 = *a2;
    uint64_t v38 = *((void *)a2 + 2);
    __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v13, (unint64_t *)&v37);
    uint64_t v16 = (uint64_t *)(a1 + 1);
    uint64_t v15 = *(void *)a1;
    if (v12 >= *result)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v15;
      uint64_t v30 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v30;
      uint64_t v16 = (uint64_t *)(a2 + 1);
      uint64_t v31 = *((void *)a1 + 2);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a2 + 2) = v31;
      unint64_t v32 = *a4;
      long long v39 = *a3;
      uint64_t v40 = *((void *)a3 + 2);
      unint64_t v33 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v32, (unint64_t *)&v39);
      uint64_t v34 = *a4;
      long long v37 = *a2;
      uint64_t v38 = *((void *)a2 + 2);
      __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v34, (unint64_t *)&v37);
      if (v33 >= *result) {
        return result;
      }
      uint64_t v35 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v35;
      uint64_t v17 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
    }
    else
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v15;
      uint64_t v17 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a3 + 1);
    }
    *((void *)a3 + 1) = v17;
    uint64_t v24 = (uint64_t *)(a3 + 1);
    goto LABEL_10;
  }
  uint64_t v18 = *a4;
  long long v39 = *a3;
  uint64_t v40 = *((void *)a3 + 2);
  unint64_t v19 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v18, (unint64_t *)&v39);
  unint64_t v20 = *a4;
  long long v37 = *a2;
  uint64_t v38 = *((void *)a2 + 2);
  __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v20, (unint64_t *)&v37);
  if (v19 < *result)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v21;
    uint64_t v22 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v22;
    uint64_t v24 = (uint64_t *)(a2 + 1);
    uint64_t v23 = *((void *)a2 + 2);
    *((void *)a2 + 2) = *((void *)a3 + 2);
    *((void *)a3 + 2) = v23;
    uint64_t v25 = *a4;
    long long v39 = *a2;
    uint64_t v40 = *((void *)a2 + 2);
    unint64_t v26 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v25, (unint64_t *)&v39);
    uint64_t v27 = *a4;
    long long v37 = *a1;
    uint64_t v38 = *((void *)a1 + 2);
    __n128 result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v27, (unint64_t *)&v37);
    if (v26 < *result)
    {
      uint64_t v28 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v28;
      uint64_t v29 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v29;
      uint64_t v16 = (uint64_t *)(a1 + 1);
LABEL_10:
      uint64_t v36 = *v16;
      *uint64_t v16 = *v24;
      *uint64_t v24 = v36;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>(uint64_t *a1, long long *a2, turi::v2_block_impl::block_manager **a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = *a3;
      long long v35 = *(long long *)((char *)a2 - 24);
      uint64_t v36 = *((void *)a2 - 1);
      unint64_t v9 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v8, (unint64_t *)&v35);
      unint64_t v10 = *a3;
      long long v33 = *(_OWORD *)a1;
      uint64_t v34 = a1[2];
      if (v9 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v10, (unint64_t *)&v33))
      {
        uint64_t v11 = *a1;
        *a1 = *((void *)v4 - 3);
        *((void *)v4 - 3) = v11;
        uint64_t v12 = a1[1];
        a1[1] = *((void *)v4 - 2);
        *((void *)v4 - 2) = v12;
        uint64_t v13 = a1[2];
        a1[2] = *((void *)v4 - 1);
        *((void *)v4 - 1) = v13;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)a1, (long long *)(a1 + 3), (long long *)((char *)a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)a1, (long long *)(a1 + 3), (long long *)a1 + 3, (uint64_t *)a2 - 3, a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*,0>((long long *)a1, (long long *)(a1 + 3), a1 + 6, a1 + 9, (uint64_t)a2 - 24, a3);
      return 1;
    default:
      unint64_t v14 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>((long long *)a1, (long long *)(a1 + 3), (long long *)a1 + 3, a3);
      uint64_t v15 = (long long *)(a1 + 9);
      if (a1 + 9 == (uint64_t *)v4) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      uint64_t v31 = v4;
      break;
  }
  while (1)
  {
    uint64_t v18 = *a3;
    long long v35 = *v15;
    uint64_t v36 = *((void *)v15 + 2);
    unint64_t v19 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v18, (unint64_t *)&v35);
    unint64_t v20 = *a3;
    uint64_t v21 = v14[2];
    long long v33 = *(_OWORD *)v14;
    uint64_t v34 = v21;
    if (v19 < *(void *)turi::v2_block_impl::block_manager::get_block_info(v20, (unint64_t *)&v33))
    {
      int v32 = v17;
      uint64_t v22 = *(void *)v15;
      uint64_t v23 = *((void *)v15 + 1);
      uint64_t v24 = v16;
      uint64_t v25 = *((void *)v15 + 2);
      while (1)
      {
        uint64_t v26 = (uint64_t)a1 + v24;
        *(_OWORD *)(v26 + 72) = *(_OWORD *)((char *)a1 + v24 + 48);
        *(void *)(v26 + 88) = *(uint64_t *)((char *)a1 + v24 + 64);
        if (v24 == -48) {
          break;
        }
        uint64_t v27 = *a3;
        *(void *)&long long v35 = v22;
        *((void *)&v35 + 1) = v23;
        uint64_t v36 = v25;
        unint64_t v28 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v27, (unint64_t *)&v35);
        uint64_t v29 = *a3;
        long long v33 = *(_OWORD *)(v26 + 24);
        uint64_t v34 = *(void *)(v26 + 40);
        v24 -= 24;
        if (v28 >= *(void *)turi::v2_block_impl::block_manager::get_block_info(v29, (unint64_t *)&v33))
        {
          uint64_t v30 = (uint64_t *)((char *)a1 + v24 + 72);
          goto LABEL_12;
        }
      }
      uint64_t v30 = a1;
LABEL_12:
      uint64_t v4 = v31;
      *uint64_t v30 = v22;
      v30[1] = v23;
      v30[2] = v25;
      int v17 = v32 + 1;
      if (v32 == 7) {
        return (long long *)((char *)v15 + 24) == v31;
      }
    }
    unint64_t v14 = (uint64_t *)v15;
    v16 += 24;
    uint64_t v15 = (long long *)((char *)v15 + 24);
    if (v15 == v4) {
      return 1;
    }
  }
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>(long long *a1, long long *a2, long long *a3, uint64_t *a4, turi::v2_block_impl::block_manager **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::ec_permute_partitions(turi::sframe,turi::sframe&,unsigned long,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(unsigned long,unsigned long)::{lambda(std::tuple<unsigned long,unsigned long,unsigned long> const&,std::tuple<unsigned long,unsigned long,unsigned long> const&)#1} &,std::tuple<unsigned long,unsigned long,unsigned long>*>(a1, a2, a3, a5);
  unint64_t v10 = *a5;
  long long v31 = *(_OWORD *)a4;
  uint64_t v32 = a4[2];
  unint64_t v11 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v10, (unint64_t *)&v31);
  uint64_t v12 = *a5;
  long long v29 = *a3;
  uint64_t v30 = *((void *)a3 + 2);
  BOOL result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v12, (unint64_t *)&v29);
  if (v11 < *result)
  {
    uint64_t v14 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v14;
    uint64_t v15 = *((void *)a3 + 1);
    *((void *)a3 + 1) = a4[1];
    a4[1] = v15;
    uint64_t v16 = *((void *)a3 + 2);
    *((void *)a3 + 2) = a4[2];
    a4[2] = v16;
    int v17 = *a5;
    long long v31 = *a3;
    uint64_t v32 = *((void *)a3 + 2);
    unint64_t v18 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v17, (unint64_t *)&v31);
    unint64_t v19 = *a5;
    long long v29 = *a2;
    uint64_t v30 = *((void *)a2 + 2);
    BOOL result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v19, (unint64_t *)&v29);
    if (v18 < *result)
    {
      uint64_t v20 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v20;
      uint64_t v21 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v21;
      uint64_t v22 = *((void *)a2 + 2);
      *((void *)a2 + 2) = *((void *)a3 + 2);
      *((void *)a3 + 2) = v22;
      uint64_t v23 = *a5;
      long long v31 = *a2;
      uint64_t v32 = *((void *)a2 + 2);
      unint64_t v24 = *(void *)turi::v2_block_impl::block_manager::get_block_info(v23, (unint64_t *)&v31);
      uint64_t v25 = *a5;
      long long v29 = *a1;
      uint64_t v30 = *((void *)a1 + 2);
      BOOL result = (unint64_t *)turi::v2_block_impl::block_manager::get_block_info(v25, (unint64_t *)&v29);
      if (v24 < *result)
      {
        uint64_t v26 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v26;
        uint64_t v27 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v27;
        uint64_t v28 = *((void *)a1 + 2);
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *((void *)a2 + 2) = v28;
      }
    }
  }
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  BOOL v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *BOOL result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  BOOL v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void turi::query_eval::ec_sort(uint64_t *a1, long long **a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v19 = *a1;
  uint64_t v20 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = turi::query_eval::infer_planner_node_length((uint64_t)&v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v7 == -1)
  {
    unint64_t v8 = (std::__shared_weak_count *)a1[1];
    uint64_t v17 = *a1;
    unint64_t v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v27 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v23, 0, sizeof(v23));
    BYTE11(v24) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    long long v27 = 0uLL;
    *((void *)&v26 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)&v17, (uint64_t)v23, (const turi::sframe *)v28);
    turi::sframe::~sframe((turi::sframe *)v28);
    uint64_t v22 = (void **)&v26 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v23 + 1);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    unint64_t v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v15 = *a1;
    uint64_t v16 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = turi::query_eval::infer_planner_node_length((uint64_t)&v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  uint64_t v22 = (void **)v7;
  if ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 < 0x3E8
      || 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) == (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)
    {
      uint64_t v10 = a1[1];
      v14[0] = *a1;
      v14[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      memset(&v13, 0, sizeof(v13));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      turi::query_eval::sort(v14, (uint64_t)&v13, (unint64_t **)a3);
    }
    uint64_t v11 = a1[1];
    v12[0] = *a1;
    v12[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v12, (uint64_t **)a3);
  }
  v21.__locale_ = (std::locale::__imp *)&v22;
  turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator()();
}

void sub_223FCF2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::locale::~locale((std::locale *)&STACK[0x458]);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x7C8]);
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p)
  {
    a52 = __p;
    operator delete(__p);
  }
  std::string __p = &STACK[0x2C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::sframe::~sframe((turi::sframe *)&STACK[0xA18]);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (a63)
  {
    a64 = a63;
    operator delete(a63);
  }
  if (a69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a69);
  }
  if (a70)
  {
    a71 = a70;
    operator delete(a70);
  }
  STACK[0xA18] = (unint64_t)&STACK[0x200];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA18]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&STACK[0x218], (void *)STACK[0x220]);
  STACK[0xA18] = (unint64_t)&STACK[0x230];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA18]);
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_rows", 8);
  BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", "operator()", 54, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string v13 = v16;
  turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FCF928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(uint64_t a1, uint64_t **a2)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v4 = v2 - *a2;
  memset(v5, 0, sizeof(v5));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(v5, v3, v2, v4);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[8],std::vector<turi::flexible_type> &,0>(v6, "indices");
}

void sub_223FCFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  unint64_t v9 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  int v14 = va_arg(va2, void *);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  unint64_t v6 = *(std::__shared_weak_count **)(v4 - 88);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v9);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v14);
  std::pair<std::string const,turi::flexible_type>::~pair(v4 - 80);
  *(void *)(v4 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = va2;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 80));
  _Unwind_Resume(a1);
}

void sub_223FCFC28()
{
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v14[0] = 0;
  v14[1] = 0;
  v12[1] = 0;
  std::string v13 = v14;
  uint64_t v11 = (const void **)v12;
  v12[0] = 0;
  uint64_t v4 = a1[1];
  v18[0] = *a1;
  v18[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[1];
  v18[2] = *a2;
  v18[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v15 = (void **)&v8;
  char v16 = 0;
  unint64_t v8 = operator new(0x20uLL);
  unint64_t v9 = v8;
  uint64_t v10 = v8 + 4;
  unint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)&v10, v18, &v19, v8);
  int v17 = 11;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v17, (uint64_t)&v13, &v11, &v8, a3);
  uint64_t v15 = (void **)&v8;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    uint64_t v7 = (std::__shared_weak_count *)v18[i];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v11, v12[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_223FCFD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void *);
  uint64_t v16 = va_arg(va2, void);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  uint64_t v7 = 24;
  while (1)
  {
    unint64_t v8 = *(std::__shared_weak_count **)(v5 - 72 + v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v7 -= 16;
    if (v7 == -8)
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v11);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v15);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::make_planner_node@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v15, "start");
  char v18 = 0;
  int v17 = 0;
  uint64_t v16 = a1;
  std::string::basic_string[abi:ne180100]<0>(v19, "begin_index");
  memset(&v19[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v20, "end_index");
  char v22 = 0;
  int v21 = 0;
  v20[3] = a2 - a1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v11, &v15, 3);
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = (const void **)v10;
  memset(v8, 0, sizeof(v8));
  int v13 = 5;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v13, (uint64_t)v11, &v9, v8, a3);
  int v14 = (void **)v8;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v9, v10[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v11, v12);
  for (uint64_t i = 80; i != -40; i -= 40)
    uint64_t result = std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v15 + i);
  return result;
}

void sub_223FCFF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void **a20,char a21)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a12, a13);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a16, a17);
  for (uint64_t i = 80; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(&a21 + i));
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(size_t *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v29);
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v25 = &v30;
  uint64_t v28 = 0;
  unint64_t v2 = turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v32, (const turi::sframe_index_file_information *)(a1 + 1));
  turi::sframe_index_file_information::save(v2, (turi::oarchive *)&v25);
  if (v36 < 0) {
    operator delete(v35[3]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v35, v35[1]);
  __p[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::vector<turi::flex_type_enum>::vector(&v23, a1[3]);
  if (a1[3])
  {
    unint64_t v3 = 0;
    do
    {
      char v4 = turi::sframe::column_type((turi::sframe *)a1, v3);
      *((unsigned char *)v23 + v3++) = v4;
    }
    while (v3 < a1[3]);
  }
  std::vector<turi::flexible_type>::vector(v22, v24 - (unsigned char *)v23);
  uint64_t v5 = (char *)v23;
  if (v24 != v23)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (2)
    {
      uint64_t v8 = v5[v7];
      uint64_t v9 = v22[0] + v6;
      switch(*(unsigned char *)(v22[0] + v6 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          if (*((char *)v10 + 31) < 0) {
            operator delete((void *)v10[1]);
          }
          atomic_ullong *volatile v11 = v10;
          uint64_t v12 = 0x1012C404EF22A49;
          goto LABEL_39;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          uint64_t v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = (atomic_ullong)v20;
            operator delete(v20);
          }
          atomic_ullong *volatile v11 = v19;
          uint64_t v12 = 0x1080C409938AC02;
          goto LABEL_39;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          v32[0] = (void **)(v13 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v32);
          goto LABEL_34;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          v32[0] = (void **)(v13 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v32);
LABEL_34:
          atomic_ullong *volatile v11 = v13;
          uint64_t v12 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
          atomic_ullong *volatile v11 = v21;
          unsigned int v18 = -235920773;
          goto LABEL_38;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_40;
          }
          std::string v15 = (void *)v14[6];
          if (v15)
          {
            v14[7] = (atomic_ullong)v15;
            operator delete(v15);
          }
          uint64_t v16 = (void *)v14[3];
          if (v16)
          {
            v14[4] = (atomic_ullong)v16;
            operator delete(v16);
          }
          int v17 = (std::__shared_weak_count *)v14[2];
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          atomic_ullong *volatile v11 = v14;
          unsigned int v18 = 2071181815;
LABEL_38:
          uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x22A614FA0](v11, v12);
LABEL_40:
          *(void *)uint64_t v9 = 0;
LABEL_41:
          *(_DWORD *)(v9 + 8) = 0;
          *(unsigned char *)(v9 + 12) = 0;
          *(void *)uint64_t v9 = v8;
          ++v7;
          uint64_t v5 = (char *)v23;
          v6 += 16;
          if (v7 >= v24 - (unsigned char *)v23) {
            break;
          }
          continue;
        default:
          goto LABEL_41;
      }
      break;
    }
  }
  std::stringbuf::str();
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v32, "index");
}

void sub_223FD0610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  STACK[0x208] = v41;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a16, (void *)a17);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&STACK[0x210]);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a26, (void *)a27);
  for (uint64_t i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v42 - 256 + i);
  if (a25 < 0) {
    operator delete(__p);
  }
  *(void *)(v42 - 256) = &a29;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 256));
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sorted_key_columns.num_columns()", 32);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_key_columns", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  atomic_ullong *volatile v10 = (void *)std::ostream::operator<<();
  atomic_ullong *volatile v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", "operator()", 153, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  atomic_ullong *volatile v13 = v16;
  turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD0908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_4::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"final_name_to_column.count(column_names[i]) > 0", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/ec_sort.cpp", "operator()", 189, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::ec_sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD0B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,unsigned long const*,unsigned long const*,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223FD0C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,unsigned long const*,unsigned long const*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(void *)((char *)v4 + 5) = 0;
      *char v4 = 0;
      uint64_t v5 = *a2++;
      *char v4 = v5;
      v4 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, const void ***a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::allocator<turi::query_eval::planner_node>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_223FD0D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::allocator<turi::query_eval::planner_node>,0>(void *a1, int *a2, uint64_t a3, const void ***a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767928;
  turi::query_eval::planner_node::planner_node((uint64_t)(a1 + 3), *a2, a3, a4, a5);
  return a1;
}

void sub_223FD0DD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::planner_node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::planner_node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::query_eval::planner_node>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::query_eval::planner_node>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t turi::query_eval::planner_node::planner_node(uint64_t a1, int a2, uint64_t a3, const void ***a4, void **a5)
{
  *(_DWORD *)a1 = a2;
  char v8 = (uint64_t *)(a1 + 32);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)(a1 + 8), a3);
  std::map<std::string,turi::any>::map[abi:ne180100](v8, a4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((void *)(a1 + 56), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_223FD0F08(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(v3, *(void **)(v1 + 40));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::any>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::any>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223FD0F74(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::any>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    char v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::any> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      char v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          char v8 = (const void ***)v7;
          char v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          char v4 = (const void **)v8;
        }
        while (!v9);
      }
      char v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::any> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__construct_node<std::pair<std::string const,turi::any> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__construct_node<std::pair<std::string const,turi::any> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::any>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223FD1104(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::any>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = *((void *)a2 + 3);
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

void sub_223FD119C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::any>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::any>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::pair<std::string const,turi::any>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::any>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223FD13A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *long long v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::allocator<turi::query_eval::planner_node>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 88);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (void **)(a2 + 56);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(a2 + 32, *(void **)(a2 + 40));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 8, *(void **)(a2 + 16));
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[8],std::vector<turi::flexible_type> &,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  void v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 4;
  operator new();
}

void sub_223FD1908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      char v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      char v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      char v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      char v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      char v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t turi::sframe_index_file_information::save(turi::sframe_index_file_information *this, turi::oarchive *a2)
{
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v4)
    {
      size_t v15 = 2 * v4 + 16;
      *((void *)a2 + 5) = v15;
      uint64_t v16 = (char **)*((void *)a2 + 2);
      if (v16)
      {
        uint64_t v5 = *v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          uint64_t v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v5[v15];
        }
      }
      else
      {
        uint64_t v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      uint64_t v5 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v5[*((void *)a2 + 4)] = *(void *)this;
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v6)
    {
      size_t v20 = 2 * v6 + 16;
      *((void *)a2 + 5) = v20;
      unsigned int v21 = (char **)*((void *)a2 + 2);
      if (v21)
      {
        char v7 = *v21;
        size_t v22 = v21[1] - *v21;
        BOOL v23 = v20 >= v22;
        std::vector<char>::size_type v24 = v20 - v22;
        if (v24 != 0 && v23)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v24);
          char v7 = (char *)**((void **)a2 + 2);
        }
        else if (!v23)
        {
          v21[1] = &v7[v20];
        }
      }
      else
      {
        char v7 = (char *)malloc_type_realloc(*((void **)a2 + 3), v20, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v7;
    }
    else
    {
      char v7 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v7[*((void *)a2 + 4)] = *((void *)this + 1);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v8)
    {
      size_t v25 = 2 * v8 + 16;
      *((void *)a2 + 5) = v25;
      long long v26 = (char **)*((void *)a2 + 2);
      if (v26)
      {
        uint64_t v9 = *v26;
        size_t v27 = v26[1] - *v26;
        BOOL v28 = v25 >= v27;
        std::vector<char>::size_type v29 = v25 - v27;
        if (v29 != 0 && v28)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v29);
          uint64_t v9 = (char *)**((void **)a2 + 2);
        }
        else if (!v28)
        {
          v26[1] = &v9[v25];
        }
      }
      else
      {
        uint64_t v9 = (char *)malloc_type_realloc(*((void **)a2 + 3), v25, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v9;
    }
    else
    {
      uint64_t v9 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v9[*((void *)a2 + 4)] = *((void *)this + 2);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v10 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v10)
    {
      size_t v30 = 2 * v10 + 16;
      *((void *)a2 + 5) = v30;
      long long v31 = (char **)*((void *)a2 + 2);
      if (v31)
      {
        uint64_t v11 = *v31;
        size_t v32 = v31[1] - *v31;
        BOOL v33 = v30 >= v32;
        std::vector<char>::size_type v34 = v30 - v32;
        if (v34 != 0 && v33)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v34);
          uint64_t v11 = (char *)**((void **)a2 + 2);
        }
        else if (!v33)
        {
          v31[1] = &v11[v30];
        }
      }
      else
      {
        uint64_t v11 = (char *)malloc_type_realloc(*((void **)a2 + 3), v30, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v11;
    }
    else
    {
      uint64_t v11 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v11[*((void *)a2 + 4)] = *((void *)this + 3);
    *((void *)a2 + 4) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 4);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 7);
  uint64_t v12 = (const void **)*((void *)this + 10);
  uint64_t v13 = *((void *)this + 12);
  return turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)a2, v12, (const void **)this + 11, v13);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v14 = 2 * v9 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v14;
      size_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2 + 4);
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2 + 7);
      uint64_t v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void **)a2[2];
          BOOL v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/iterator.hpp", 105);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"count", 5);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"vsize", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/iterator.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD2194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  size_t __n = v4;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v11 = 2 * v5 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v11;
      uint64_t v12 = *(char ***)(a1 + 16);
      if (v12)
      {
        unint64_t v6 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          unint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = &v6[v11];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  if (*((char *)a2 + 23) >= 0) {
    char v7 = a2;
  }
  else {
    char v7 = *a2;
  }
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v9 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + __n > v9)
  {
    size_t v16 = 2 * (v9 + __n);
    *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v16;
    BOOL v17 = *(char ***)(a1 + 16);
    if (v17)
    {
      uint64_t v10 = *v17;
      size_t v18 = v17[1] - *v17;
      BOOL v19 = v16 >= v18;
      std::vector<char>::size_type v20 = v16 - v18;
      if (v20 != 0 && v19)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v20);
        uint64_t v10 = **(char ***)(a1 + 16);
      }
      else if (!v19)
      {
        v17[1] = &v10[v16];
      }
    }
    else
    {
      uint64_t v10 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v16, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v10;
  }
  else
  {
    uint64_t v10 = *(char **)(a1 + 24);
  }
  uint64_t result = memcpy(&v10[*(void *)(a1 + 32)], v7, __n);
  *(void *)(a1 + 32) += __n;
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v10;
      size_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)(v7 + v8));
      ++v9;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

turi::sframe_index_file_information *turi::sframe_index_file_information::sframe_index_file_information(turi::sframe_index_file_information *this, const turi::sframe_index_file_information *a2)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 10, (const void ***)a2 + 10);
  unint64_t v5 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_223FD2668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v2 + 88));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type<std::string>((uint64_t)(v2 + 3));
}

void sub_223FD26E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::vector<turi::flexible_type> &,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  void v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 4;
  operator new();
}

void sub_223FD2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      std::vector<char>::size_type v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      size_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      std::vector<char>::size_type v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      std::vector<char>::size_type v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      std::vector<char>::size_type v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      std::vector<char>::size_type v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *size_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::any::any<turi::sframe>()
{
}

void sub_223FD2E08(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C4080D53B2ELL);
  _Unwind_Resume(a1);
}

void *turi::any::holder<turi::sframe>::~holder(void *a1)
{
  *a1 = &unk_26D767978;
  turi::sframe::~sframe((turi::sframe *)(a1 + 1));
  return a1;
}

void turi::any::holder<turi::sframe>::~holder(void *a1)
{
  *a1 = &unk_26D767978;
  turi::sframe::~sframe((turi::sframe *)(a1 + 1));
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<turi::sframe>::type()
{
}

void turi::any::holder<turi::sframe>::clone()
{
}

void sub_223FD2F44(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C4080D53B2ELL);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<turi::sframe>::deserializer_id()
{
  return turi::any::holder<turi::sframe>::registry;
}

uint64_t turi::any::holder<turi::sframe>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return turi::sframe::operator=(a1 + 8, a2 + 8);
}

void turi::any::holder<turi::sframe>::save(uint64_t a1, turi::oarchive **a2)
{
  long long v4 = *a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)v4 + 5);
    if (*((void *)v4 + 4) + 8 > v5)
    {
      size_t v8 = 2 * v5 + 16;
      *((void *)v4 + 5) = v8;
      unint64_t v9 = (char **)*((void *)v4 + 2);
      if (v9)
      {
        long long v6 = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v12);
          long long v6 = (char *)**((void **)v4 + 2);
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        long long v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v8, 0xF6EA6B1uLL);
      }
      *((void *)v4 + 3) = v6;
    }
    else
    {
      long long v6 = (char *)*((void *)v4 + 3);
    }
    *(void *)&v6[*((void *)v4 + 4)] = turi::any::holder<turi::sframe>::registry;
    *((void *)v4 + 4) += 8;
  }
  uint64_t v7 = *a2;
  turi::sframe::save((turi::sframe *)(a1 + 8), v7);
}

void *turi::any::holder<turi::sframe>::print(uint64_t a1, void *a2)
{
  return a2;
}

void *turi::any::print_type_or_contents<turi::sframe>(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  size_t v2 = strlen((const char *)((unint64_t)off_26D76C570 & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (unint64_t)off_26D76C570 & 0x7FFFFFFFFFFFFFFFLL, v2);
  char v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

void *std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(void *a1, char *a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(a1, a2);
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  a1[3] = v5;
  return a1;
}

void sub_223FD3180(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,turi::any>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::any> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_223FD3204(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::sframe(uint64_t a1, uint64_t **a2, const void ***a3, char a4)
{
  *(void *)a1 = &unk_26D76C528;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  int v8 = pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  assert_msg(v8 == 0, "Mutex create error %d", v8);
  *(_WORD *)(a1 + 288) = 0;
  turi::sframe::open_for_read(a1, a2, a3, a4);
  return a1;
}

void sub_223FD330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  turi::mutex::~mutex(v12);
  atomic_ullong *volatile v14 = *(std::__shared_weak_count **)(v11 + 216);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  a10 = v11 + 184;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v11 + 159) < 0) {
    operator delete(*(void **)(v11 + 136));
  }
  turi::sframe_index_file_information::~sframe_index_file_information(v10);
  _Unwind_Resume(a1);
}

double turi::sframe::open_for_read(uint64_t a1, uint64_t **a2, const void ***a3, char a4)
{
  int v8 = (int *)global_logger();
  if (v8[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "open_for_read", 232, 1);
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    std::vector<char>::size_type v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        BOOL v13 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned char *)(a1 + 288) == 0, "Attempting to init an SFrame which has already been inited.");
  *(unsigned char *)(a1 + 288) = 1;
  *(void *)&double result = turi::sframe::create_arrays_for_reading(a1, a2, a3, a4).n128_u64[0];
  return result;
}

void sub_223FD3530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::deserialize()
{
}

void sub_223FD358C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::holder(void *a1, uint64_t *a2)
{
  *a1 = &unk_26D767A00;
  a1[2] = 0;
  a1[1] = 0;
  turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a2, a1 + 1);
  return a1;
}

void sub_223FD3608(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::~holder(void *a1)
{
  *a1 = &unk_26D767A00;
  size_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::~holder(void *a1)
{
  *a1 = &unk_26D767A00;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::type()
{
}

void turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::clone()
{
}

uint64_t turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::deserializer_id()
{
  return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry;
}

void turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

unsigned char *turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::save(uint64_t a1, turi::oarchive **a2)
{
  long long v4 = *a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)v4 + 5);
    if (*((void *)v4 + 4) + 8 > v5)
    {
      size_t v8 = 2 * v5 + 16;
      *((void *)v4 + 5) = v8;
      unint64_t v9 = (char **)*((void *)v4 + 2);
      if (v9)
      {
        uint64_t v6 = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v12);
          uint64_t v6 = (char *)**((void **)v4 + 2);
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v8, 0xF6EA6B1uLL);
      }
      *((void *)v4 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (char *)*((void *)v4 + 3);
    }
    *(void *)&v6[*((void *)v4 + 4)] = turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry;
    *((void *)v4 + 4) += 8;
  }
  return turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a2, (turi::v2_block_impl::block_manager **)(a1 + 8));
}

uint64_t turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::print(uint64_t a1, uint64_t a2)
{
  return a2;
}

void turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 24);
    int v6 = *(unsigned __int8 *)(v4 + v5);
    *(void *)(v3 + 24) = v5 + 1;
    if (v6) {
      operator new();
    }
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_223FD3978(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C4023978C48);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(&v2, a2);
}

void std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223FD3A4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::flexible_type> *,std::shared_ptr<turi::sarray<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray<turi::flexible_type>,turi::sarray<turi::flexible_type>>,std::allocator<turi::sarray<turi::flexible_type>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::flexible_type> *,std::shared_ptr<turi::sarray<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray<turi::flexible_type>,turi::sarray<turi::flexible_type>>,std::allocator<turi::sarray<turi::flexible_type>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::sarray<turi::flexible_type>::load(uint64_t a1, turi::iarchive *this)
{
  turi::iarchive::get_prefix(this, &v7);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v7.__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v7;
    }
    else {
      uint64_t v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v5, size);
  }
  strcpy((char *)p_p + size, ".sidx");
  turi::sarray<turi::flexible_type>::open_for_read(a1, &__p);
}

void sub_223FD3BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void turi::iarchive::get_prefix(turi::iarchive *this@<X0>, std::string *a2@<X8>)
{
  long long v2 = (turi::dir_archive *)*((void *)this + 1);
  if (!v2) {
    turi::iarchive::get_prefix(void)::{lambda(void)#1}::operator()();
  }
  turi::dir_archive::get_next_read_prefix(v2, a2);
}

void turi::sarray<turi::flexible_type>::open_for_read(uint64_t a1, const std::string *a2)
{
  assert_msg(*(unsigned char *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  std::string::operator=((std::string *)(a1 + 152), a2);
  if (*(char *)(a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 152), *(void *)(a1 + 160));
  }
  else {
    std::string v4 = *(std::string *)(a1 + 152);
  }
  turi::read_index_file((uint64_t)&v4);
}

void sub_223FD3F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::iarchive::get_prefix(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/iarchive.hpp", 105);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  std::string v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"dir", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  std::string v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  size_t v10 = (void *)std::ostream::operator<<();
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::vector<char>::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/iarchive.hpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::iarchive::get_prefix(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD4108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(turi::oarchive **a1, turi::v2_block_impl::block_manager **a2)
{
  if (*a2)
  {
    std::string v4 = *a1;
    if (*(void *)*a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v7 = *((void *)v4 + 5);
      if (*((void *)v4 + 4) + 1 > v7)
      {
        size_t v10 = 2 * v7 + 2;
        *((void *)v4 + 5) = v10;
        BOOL v11 = (std::vector<char> *)*((void *)v4 + 2);
        atomic_ullong *volatile v20 = v4;
        if (v11)
        {
          begin = v11->__begin_;
          size_t v12 = v11->__end_ - v11->__begin_;
          BOOL v13 = v10 >= v12;
          std::vector<char>::size_type v14 = v10 - v12;
          if (v14 != 0 && v13)
          {
            std::vector<char>::__append(v11, v14);
            begin = (unsigned char *)**((void **)v20 + 2);
          }
          else if (!v13)
          {
            v11->__end_ = &begin[v10];
          }
        }
        else
        {
          begin = malloc_type_realloc(*((void **)v4 + 3), v10, 0xF6EA6B1uLL);
        }
        std::string v4 = v20;
        *((void *)v20 + 3) = begin;
      }
      else
      {
        begin = (unsigned char *)*((void *)v4 + 3);
      }
      begin[(*((void *)v4 + 4))++] = 1;
    }
    turi::sarray<turi::flexible_type>::save(*a2, *a1);
  }
  uint64_t v5 = *a1;
  if (*(void *)*a1) {
    return (unsigned char *)std::ostream::write();
  }
  unint64_t v9 = *((void *)v5 + 5);
  if (*((void *)v5 + 4) + 1 > v9)
  {
    size_t v15 = 2 * v9 + 2;
    *((void *)v5 + 5) = v15;
    std::locale v16 = (void *)*((void *)v5 + 2);
    if (v16)
    {
      uint64_t result = (unsigned char *)*v16;
      size_t v17 = v16[1] - *v16;
      BOOL v18 = v15 >= v17;
      std::vector<char>::size_type v19 = v15 - v17;
      if (v19 != 0 && v18)
      {
        std::vector<char>::__append(*((std::vector<char> **)v5 + 2), v19);
        uint64_t result = (unsigned char *)**((void **)v5 + 2);
      }
      else if (!v18)
      {
        v16[1] = &result[v15];
      }
    }
    else
    {
      uint64_t result = malloc_type_realloc(*((void **)v5 + 3), v15, 0xF6EA6B1uLL);
    }
    *((void *)v5 + 3) = result;
  }
  else
  {
    uint64_t result = (unsigned char *)*((void *)v5 + 3);
  }
  result[(*((void *)v5 + 4))++] = 0;
  return result;
}

void turi::sarray<turi::flexible_type>::save(turi::v2_block_impl::block_manager *a1, turi::oarchive *this)
{
  turi::oarchive::get_prefix(this, (unsigned __int8 *)v8);
  if ((v9 & 0x80u) == 0) {
    size_t v3 = v9;
  }
  else {
    size_t v3 = (size_t)v8[1];
  }
  std::string v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 5);
  if (v7 < 0) {
    std::string v4 = (void **)__p[0];
  }
  if (v3)
  {
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v8;
    }
    else {
      uint64_t v5 = (void **)v8[0];
    }
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".sidx");
  turi::sarray<turi::flexible_type>::save(a1, (uint64_t)__p);
}

void sub_223FD4498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::oarchive::get_prefix@<X0>(turi::oarchive *this@<X0>, unsigned __int8 *a2@<X8>)
{
  long long v2 = (turi::dir_archive *)*((void *)this + 1);
  if (!v2) {
    turi::oarchive::get_prefix(void)::{lambda(void)#1}::operator()();
  }
  return turi::dir_archive::get_next_write_prefix(v2, a2);
}

void turi::sarray<turi::flexible_type>::save(turi::v2_block_impl::block_manager *a1, uint64_t a2)
{
  if (!*((unsigned char *)a1 + 248)) {
    turi::sarray<turi::flexible_type>::save(std::string)const::{lambda(void)#1}::operator()();
  }
  if (*((unsigned char *)a1 + 249)) {
    turi::sarray<turi::flexible_type>::save(std::string)const::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v15, ".sidx");
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)a2;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  char v7 = (void **)v15[0];
  if ((v16 & 0x80u) == 0) {
    char v7 = v15;
  }
  unint64_t v8 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)v15[1];
  }
  unsigned __int8 v9 = v5 - 1;
  size_t v10 = (char *)v7 - 1;
  while (v6 && v8)
  {
    int v11 = v9[v6];
    int v12 = v10[v8];
    --v6;
    --v8;
    if (v11 != v12) {
      goto LABEL_16;
    }
  }
  if (!v8)
  {
    if (v4 < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    turi::sarray_save_blockwise<turi::flexible_type>(a1, &__p);
  }
LABEL_16:
  std::vector<char>::size_type v14 = v15;
  turi::sarray<turi::flexible_type>::save(std::string)const::{lambda(void)#3}::operator()();
}

void sub_223FD4644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::oarchive::get_prefix(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/oarchive.hpp", 105);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"dir", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned __int8 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  size_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/oarchive.hpp", "operator()", 154, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::oarchive::get_prefix(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD4808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::save(std::string)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 694, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sarray<turi::flexible_type>::save(std::string)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD4A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::save(std::string)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(writing)", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 695, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sarray<turi::flexible_type>::save(std::string)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD4C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_save_blockwise<turi::flexible_type>(turi::v2_block_impl::block_manager *a1, const std::string *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  turi::v2_block_impl::block_manager::get_instance(a1);
  int v3 = pthread_mutex_init(&v21, 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v27 = 0;
  uint64_t v22 = 128;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 0;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    uint64_t v5 = a2;
  }
  uint64_t v6 = (uint64_t)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v7 = *(unsigned __int8 *)(v6 + size--);
  }
  while (v7 != 46);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=(&__p, a2);
  }
  else
  {
    std::string::basic_string(&v15, a2, 0, size, (std::allocator<char> *)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v15;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v8 = __p.__r_.__value_.__l.__size_;
  }
  p_s = &__s;
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v8 + 5);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(p_s, p_p, v8);
  }
  strcpy((char *)p_s + v8, ".sidx");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = __p.__r_.__value_.__l.__size_;
  }
  int v12 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v11 + 5);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v13 = &__p;
    }
    else {
      BOOL v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, ".0000");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = __s;
  }
  turi::v2_block_impl::block_writer::init((uint64_t)&v21, &v17, 1uLL, 1uLL);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v16, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v16 = v18;
  }
  turi::v2_block_impl::block_writer::open_segment((uint64_t)&v21, 0);
}

void sub_223FD5314(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    turi::v2_block_impl::block_manager::close_column(v65, a65);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void turi::any::holder<turi::sframe>::deserialize()
{
}

void sub_223FD54A4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C4080D53B2ELL);
  _Unwind_Resume(a1);
}

void turi::any::holder<turi::sframe>::holder(void *a1, turi::iarchive **a2)
{
  *a1 = &unk_26D767978;
  int v3 = turi::sframe::sframe((turi::sframe *)(a1 + 1));
  turi::sframe::load(v3, *a2);
}

void sub_223FD5528(_Unwind_Exception *a1)
{
  turi::sframe::~sframe(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223FD55A8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  int v7 = *v6;
  if (!*v6)
  {
    size_t v8 = v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unsigned __int8 v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        unsigned __int8 v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    std::string v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          std::string v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          std::string v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        std::string v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      std::string v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    std::vector<char>::size_type v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      std::vector<char>::size_type v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    atomic_ullong *volatile v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          pthread_mutex_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          atomic_ullong *volatile v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        atomic_ullong *volatile v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      pthread_mutex_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::set<turi::flex_type_enum>::set[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>>(uint64_t a1, char *a2, char *a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223FD585C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>(uint64_t **a1, uint64_t *a2, char *a3, unsigned char *a4)
{
  unint64_t v6 = std::__tree<turi::flex_type_enum>::__find_equal<turi::flex_type_enum>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<turi::flex_type_enum>::__find_equal<turi::flex_type_enum>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((char *)a2 + 25), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unsigned __int8 v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unsigned __int8 v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((char *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          std::string v17 = (uint64_t *)v16;
          int v18 = *(char *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      std::string v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    std::vector<char>::size_type v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      std::vector<char>::size_type v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          pthread_mutex_t v21 = (uint64_t *)v20;
          int v22 = *(char *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      pthread_mutex_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<turi::flex_type_enum>::__erase_unique<turi::flex_type_enum>(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(char *)(v2 + 25);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(char *)(v4 + 25)) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>,0>(long long *a1, long long *a2, uint64_t *a3)
{
  int v3 = a1;
  BOOL v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v6, v3);
    int v3 = (long long *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  int v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  BOOL v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void *std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_223FD5C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223FD5D80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe&,void>@<X0>(const turi::sframe *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x140uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe&,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223FD5E38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe&,std::allocator<turi::sframe>,0>(void *a1, const turi::sframe *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3), a2);
  return a1;
}

void sub_223FD5E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sframe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::sframe>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

void turi::query_eval::groupby_aggregate(uint64_t *a1, uint64_t *a2, const void ***a3, long long **a4, const void ****a5)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3) != 0xCCCCCCCCCCCCCCCDLL * (a5[1] - *a5)) {
    turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_0::operator()();
  }
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&__p, *a3, a3[1]);
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  if (*a4 == v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v10 = *v7;
        v66.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      }
      std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      char v12 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v66.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&__p, (const void **)&v66.__r_.__value_.__l.__data_, (uint64_t)&v66);
        ++v9;
        char v12 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      if (v12 < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = (long long *)((char *)v7 + 24);
    }
    while (v7 != v8);
  }
  if (v69 != v9 - 0x5555555555555555 * (a3[1] - *a3)) {
    turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_1::operator()();
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&__p, (char *)__sz);
  *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = 0uLL;
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66.__r_.__value_.__l.__size_;
  uint64_t v13 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      std::string __p = (void *)(v13 + v14);
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v66, (const void **)(v13 + v14), (uint64_t)&std::piecewise_construct, (long long **)&__p)[7] = v15++;
      uint64_t v13 = *a2;
      v14 += 24;
    }
    while (v15 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  uint64_t v16 = (std::__shared_weak_count *)a1[1];
  uint64_t v62 = *a1;
  uint64_t v63 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v62, (unint64_t *)&v64);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  std::string v17 = (uint64_t *)(0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v59 = v17;
  uint64_t v57 = (uint64_t *)v66.__r_.__value_.__r.__words[2];
  if (v17 != (uint64_t *)v66.__r_.__value_.__r.__words[2])
  {
    std::string __p = &v59;
    std::string::size_type __sz = (std::string::size_type)&v57;
    turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_2::operator()();
  }
  uint64_t v59 = (uint64_t *)(v65 - (void)v64);
  uint64_t v57 = v17;
  if ((uint64_t *)(v65 - (void)v64) != v17)
  {
    std::string __p = &v59;
    std::string::size_type __sz = (std::string::size_type)&v57;
    turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_3::operator()();
  }
  std::vector<char>::size_type v19 = *a3;
  int v18 = a3[1];
  while (v19 != v18)
  {
    if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v66, v19))
    {
      std::string __p = v19;
      turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_4::operator()();
    }
    v19 += 3;
  }
  uint64_t v20 = (uint64_t *)*a5;
  pthread_mutex_t v21 = (uint64_t *)a5[1];
  if (*a5 != (const void ***)v21)
  {
    while (1)
    {
      uint64_t v22 = *v20;
      if (v20[1] != *v20) {
        break;
      }
LABEL_46:
      v20 += 5;
      if (v20 == v21) {
        goto LABEL_47;
      }
    }
    uint64_t v23 = 0;
    unsigned int v24 = 1;
    while (1)
    {
      long long v25 = (void *)(v22 + 24 * v23);
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v66, (const void **)v25))
      {
        std::string __p = v25;
        turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_5::operator()();
      }
      (*(void (**)(void **__return_ptr))(*(void *)v20[3] + 64))(&__p);
      uint64_t v26 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::registered_arg_functions, (const void **)&__p);
      BOOL v27 = v24 == 1 || v26 == 0;
      char v28 = !v27;
      if (SHIBYTE(v69) < 0)
      {
        operator delete(__p);
        if ((v28 & 1) == 0)
        {
LABEL_44:
          long long v29 = (void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v66, (const void **)v25);
          if (((*(uint64_t (**)(uint64_t, void))(*(void *)v20[3] + 48))(v20[3], *((char *)v64 + *v29)) & 1) == 0)
          {
            std::string __p = v20;
            std::string::size_type __sz = (std::string::size_type)v25;
            turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_6::operator()((uint64_t)&__p);
          }
        }
      }
      else if ((v28 & 1) == 0)
      {
        goto LABEL_44;
      }
      uint64_t v23 = v24;
      uint64_t v22 = *v20;
      if (0xAAAAAAAAAAAAAAABLL * ((v20[1] - *v20) >> 3) <= v24++) {
        goto LABEL_46;
      }
    }
  }
LABEL_47:
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  v58[1] = 0;
  uint64_t v59 = &v60;
  uint64_t v57 = v58;
  v58[0] = 0;
  long long v32 = *a3;
  long long v31 = a3[1];
  while (v32 != v31)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v59, v32, (uint64_t)v32);
    v32 += 3;
  }
  long long v33 = *a5;
  long long v34 = a5[1];
  while (v33 != v34)
  {
    long long v36 = *v33;
    long long v35 = v33[1];
    while (v36 != v35)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v57, v36, (uint64_t)v36);
      v36 += 3;
    }
    v33 += 5;
  }
  if (v61 != 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3)) {
    turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_7::operator()();
  }
  std::vector<std::string>::vector<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,0>(&v56, v59, &v60);
  long long v37 = v57;
  if (v57 == v58)
  {
LABEL_76:
    v55[0] = 0;
    v55[1] = 0;
    uint64_t v54 = v55;
    std::vector<unsigned long>::vector(&v53, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3));
    std::string::size_type v43 = v56.__r_.__value_.__r.__words[0];
    if (v56.__r_.__value_.__l.__size_ != v56.__r_.__value_.__r.__words[0])
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      do
      {
        unint64_t v46 = (void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v66, (const void **)(v43 + v44));
        *((void *)v53 + v45) = *v46;
        long long v51 = (long long *)(v56.__r_.__value_.__r.__words[0] + v44);
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, (const void **)(v56.__r_.__value_.__r.__words[0] + v44), (uint64_t)&std::piecewise_construct, &v51)[7] = v45++;
        std::string::size_type v43 = v56.__r_.__value_.__r.__words[0];
        v44 += 24;
      }
      while (v45 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3));
    }
    uint64_t v47 = a1[1];
    v52[0] = *a1;
    v52[1] = v47;
    if (v47) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v52, (uint64_t **)&v53);
  }
  while (1)
  {
    if (*((char *)v37 + 55) < 0)
    {
      if (v37[5])
      {
LABEL_62:
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v59, (const void **)v37 + 4))
        {
          long long v38 = (_OWORD *)v56.__r_.__value_.__l.__size_;
          if (v56.__r_.__value_.__l.__size_ >= v56.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v56, (long long *)v37 + 2);
          }
          else
          {
            if (*((char *)v37 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v56.__r_.__value_.__l.__size_, (const std::string::value_type *)v37[4], v37[5]);
            }
            else
            {
              long long v39 = *((_OWORD *)v37 + 2);
              *(void *)(v56.__r_.__value_.__l.__size_ + 16) = v37[6];
              *long long v38 = v39;
            }
            std::string::size_type v40 = (std::string::size_type)v38 + 24;
          }
          v56.__r_.__value_.__l.__size_ = v40;
        }
      }
    }
    else if (*((unsigned char *)v37 + 55))
    {
      goto LABEL_62;
    }
    uint64_t v41 = (uint64_t *)v37[1];
    if (v41)
    {
      do
      {
        uint64_t v42 = v41;
        uint64_t v41 = (uint64_t *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        uint64_t v42 = (uint64_t *)v37[2];
        BOOL v27 = *v42 == (void)v37;
        long long v37 = v42;
      }
      while (!v27);
    }
    long long v37 = v42;
    if (v42 == v58) {
      goto LABEL_76;
    }
  }
}

void sub_223FD7990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,std::locale a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::locale::~locale(&a32);
  turi::groupby_aggregate_impl::group_aggregate_container::~group_aggregate_container((turi::groupby_aggregate_impl::group_aggregate_container *)&STACK[0x260]);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x260] = (unint64_t)&a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  uint64_t v67 = *(std::__shared_weak_count **)(a11 + 8);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a44);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a48, (char *)a49);
  STACK[0x260] = (unint64_t)&a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a54, (char *)a55);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a57, (char *)a58);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a65, (char *)a66);
  _Unwind_Resume(a1);
}

void turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/groupby_aggregate.cpp", 123);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"source_column_names.size()", 26);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  BOOL v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"source_column_to_index.size()", 29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/groupby_aggregate.cpp", "operator()", 58, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD7EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/groupby_aggregate.cpp", 123);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"source_types.size()", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  BOOL v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"source_column_names.size()", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/groupby_aggregate.cpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FD8140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::~group_aggregate_container(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  uint64_t v2 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (void **)((char *)this + 384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 360);
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](&v3);
  turi::sarray<std::string>::~sarray((uint64_t)this + 80);
  turi::simple_spinlock::~simple_spinlock((turi::groupby_aggregate_impl::group_aggregate_container *)((char *)this + 76));
  int v3 = (void **)((char *)this + 48);
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)this;
  std::vector<turi::groupby_aggregate_impl::group_descriptor>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t turi::sarray<std::string>::~sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D767B30;
  unint64_t v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(void **)(a1 + 136));
  unint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void turi::sarray<std::string>::~sarray(uint64_t a1)
{
  turi::sarray<std::string>::~sarray(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray<std::string>::set_num_segments(uint64_t a1, uint64_t a2)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (a2 && (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 120))(*(void *)(a1 + 176)) != a2)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    operator new();
  }
  return 0;
}

void sub_223FD86B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<std::string>::num_segments(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *turi::sarray<std::string>::get_output_iterator@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  assert_msg(*((unsigned __int8 *)a1 + 248), "Invalid SArray");
  assert_msg(*((unsigned __int8 *)a1 + 249), "SArray not opened for writing");
  uint64_t v9 = (void *)a1[22];
  if (!v9)
  {
    v8[0] = &v9;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v8[0] = a2;
  v7[0] = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (v7[0] <= a2)
  {
    uint64_t v9 = v8;
    long long v10 = v7;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  uint64_t v9 = &unk_26D767CA8;
  long long v10 = a1;
  unint64_t v11 = a2;
  char v12 = &v9;
  v8[0] = &unk_26D767D38;
  v8[1] = a1;
  v8[2] = a2;
  uint64_t v8[3] = v8;
  v7[0] = &unk_26D767DC8;
  void v7[3] = v7;
  turi::sframe_function_output_iterator<std::string,std::function<void ()(std::string const&)>,std::function<void ()(std::string&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(std::string &&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](&v9);
}

void sub_223FD88B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(std::string &&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::close(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 40))(*(void *)(a1 + 176));
  (*(void (**)(void))(**(void **)(a1 + 176) + 48))(*(void *)(a1 + 176));
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 176) + 32))(*(void *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v2);
  uint64_t v3 = *(void *)(v2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 24);
  *(void *)(a1 + 48) = v3;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v2 + 48));
  if (a1 + 8 != v2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v2 + 72), *(void *)(v2 + 80), (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v2 + 96), *(long long **)(v2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 104) - *(void *)(v2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(long long **)(v2 + 120), (long long *)(v2 + 128));
  }
  uint64_t v4 = *(void *)(a1 + 176);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(unsigned char *)(a1 + 249) = 0;
  turi::sarray<turi::flexible_type>::keep_array_file_ref((std::__split_buffer<std::string>::pointer)a1);
}

uint64_t turi::sarray_group_format_writer_v2<std::string>::~sarray_group_format_writer_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D767B98;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(void *)a1 = &unk_26D767B98;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x22A614FA0](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<std::string>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  if (a4) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = 0;
  }
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    uint64_t v8 = 8;
    do
    {
      std::vector<std::vector<std::string>>::resize((uint64_t *)(*(void *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(void *)(a1 + 16)) {
    turi::sarray_group_format_writer_v2<std::string>::open_segment(a1, 0);
  }
}

void sub_223FD8C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_group_format_writer_v2<std::string>::close(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = 0;
    do
    {
      if (*(void *)(a1 + 392) != *(void *)(a1 + 384))
      {
        unint64_t v3 = 0;
        do
          turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(void *)(a1 + 16));
  }
}

uint64_t turi::sarray_group_format_writer_v2<std::string>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
  return result;
}

void turi::sarray_group_format_writer_v2<std::string>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = (uint64_t *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3);
  unint64_t v8 = v7 + 1;
  unint64_t v9 = v7[1];
  if (v9 >= v7[2])
  {
    uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, a4);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, a4);
    uint64_t v10 = v9 + 24;
  }
  *unint64_t v8 = v10;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 3) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
  {
    turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
  }
}

{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  long long v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  long long v20;
  std::__split_buffer<std::string> __v;

  unint64_t v8 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3;
  uint64_t v10 = (uint64_t *)(v8 + 8);
  unint64_t v9 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  if (v9 >= v11)
  {
    uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)v8) >> 3);
    char v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)v8) >> 3);
    if (2 * v16 > v15) {
      char v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      std::string v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      std::string v17 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v8 + 16);
    if (v17) {
      int v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v8 + 16, v17);
    }
    else {
      int v18 = 0;
    }
    std::vector<char>::size_type v19 = v18 + v14;
    __v.__first_ = v18;
    __v.__begin_ = v19;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v20 = *a4;
    v19->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    __v.__end_ = v19 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v8, &__v);
    uint64_t v13 = *v10;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    uint64_t v12 = *a4;
    *(void *)(v9 + 16) = *((void *)a4 + 2);
    *(_OWORD *)unint64_t v9 = v12;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    uint64_t v13 = v9 + 24;
    *uint64_t v10 = v9 + 24;
  }
  *uint64_t v10 = v13;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 3) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
}

void sub_223FD90EC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t turi::sarray_group_format_writer_v2<std::string>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<std::string>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384) + 56 * a2;
    unint64_t v9 = (void *)(v8 + 32);
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 8) + 24 * a3);
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v12 = *v11;
      if (*v11 >= (unint64_t)v10[2])
      {
        uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v10, v4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v10, v4);
        uint64_t v13 = v12 + 24;
      }
      uint64_t *v11 = v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v10) >> 3) >= *v9) {
        turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
      }
      unint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
}

{
  long long *v4;
  long long *v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  unint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384);
    unint64_t v9 = (uint64_t *)(*(void *)(v8 + 56 * a2 + 8) + 24 * a3);
    uint64_t v10 = *(void *)(v8 + 56 * a2 + 32);
    uint64_t v11 = v9 + 1;
    do
    {
      uint64_t v12 = *v11;
      if (*v11 >= (unint64_t)v9[2])
      {
        uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v9, v4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v9, v4);
        uint64_t v13 = v12 + 24;
      }
      uint64_t *v11 = v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v9) >> 3) >= v10)
      {
        turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
        uint64_t v10 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32);
      }
      unint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
}

void turi::sarray_group_format_writer_v2<std::string>::flush_segment(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 392) != *(void *)(a1 + 384))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, v4, a2);
      std::vector<std::string>::shrink_to_fit((std::vector<std::string> *)(*(void *)(*(void *)(a1 + 384) + v5)
                                                                         + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3));
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (turi::simple_spinlock **)*a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  unint64_t v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      uint64_t v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  BOOL v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<std::string>::open_segment(uint64_t a1, std::string::size_type a2)
{
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    BOOL v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        unint64_t v9 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  uint64_t index_info = turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)(a1 + 24));
  if (*(char *)(index_info + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(void *)(index_info + 8));
  }
  else {
    std::string __str = *(std::string *)index_info;
  }
  *(_DWORD *)((char *)v36 + 3) = 0;
  v36[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&v33, &__str, 0, size - 5, (std::allocator<char> *)v38);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v33;
  }
  else {
    uint64_t v12 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  locale = v34.__locale_;
  uint64_t v16 = (char *)&v34 + *((void *)v34.__locale_ - 3);
  if (*((_DWORD *)v16 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *((void *)v34.__locale_ - 3)));
    std::string v17 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 32);
    std::locale::~locale((std::locale *)&v33);
    locale = v34.__locale_;
  }
  *((_DWORD *)v16 + 36) = 48;
  *(void **)((char *)&v35[1] + *((void *)locale - 3)) = (void *)4;
  std::ostream::operator<<();
  std::stringbuf::str();
  long long v18 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  v36[0] = v33.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v36 + 3) = *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3);
  int v19 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  uint64_t v20 = (int *)global_logger();
  if (v20[169] > 1) {
    goto LABEL_39;
  }
  if (cppipc::must_cancel((cppipc *)v20)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  pthread_mutex_t v21 = (file_logger *)global_logger();
  uint64_t v22 = file_logger::start_stream(v21, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  uint64_t v23 = pthread_getspecific(*((void *)v22 + 74));
  if (v23 && *((unsigned char *)v23 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Open segment ", 13);
  }
  uint64_t v24 = file_logger::operator<<<unsigned long>((uint64_t)v22);
  long long v25 = pthread_getspecific(*(void *)(v24 + 592));
  if (v25 && *((unsigned char *)v25 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)" for write on ", 14);
  }
  if (v19 < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
    LODWORD(v32.__r_.__value_.__r.__words[2]) = v36[0];
    *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = v19;
  }
  uint64_t v26 = file_logger::operator<<<std::string>(v24, (uint64_t)&v32);
  BOOL v27 = pthread_getspecific(*(void *)(v26 + 592));
  if (v27 && *((unsigned char *)v27 + 280))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(v27[2] - 24) + 16));
    char v28 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale((std::locale *)&v33);
    std::ostream::put();
    std::ostream::flush();
    file_logger::stream_flush((file_logger *)v26);
    if (*(_DWORD *)(v26 + 600) == 7)
    {
      __print_back_trace();
      long long v30 = __cxa_allocate_exception(8uLL);
      *long long v30 = "LOG_FATAL encountered";
      __cxa_throw(v30, MEMORY[0x263F8C1D8], 0);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  else
  {
LABEL_39:
    if ((v19 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
      LODWORD(v31.__r_.__value_.__r.__words[2]) = v36[0];
      *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
      *((unsigned char *)&v31.__r_.__value_.__s + 23) = v19;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(a1 + 24, a2);
}

void sub_223FD9BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  std::locale::~locale(&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0) {
    operator delete(v28);
  }
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    char v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_223FD9E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::string>::column_buffer,turi::sarray_group_format_writer_v2<std::string>::column_buffer const&>(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_223FD9F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::string>::column_buffer,turi::sarray_group_format_writer_v2<std::string>::column_buffer const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((std::string *)(a2 + 8), *(long long ***)(a3 + 8), *(long long ***)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  __n128 result = *(__n128 *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_223FD9FD0(_Unwind_Exception *a1)
{
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223FDA04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      unint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223FDA118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  unint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    BOOL v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    uint64_t i = (void **)(*(void *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (turi::simple_spinlock *)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    uint64_t v6 = (void **)(i - 48);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v15);
  }
}

void sub_223FDA4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_group_format_writer_v2<std::string>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 384);
  uint64_t v4 = v3 + 56 * a2;
  uint64_t v5 = (uint64_t *)(*(void *)(v4 + 8) + 24 * a3);
  uint64_t v6 = v5[1];
  if (*v5 != v6)
  {
    uint64_t v10 = v6 - *v5;
    uint64_t v17 = -1;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
    uint64_t v11 = turi::v2_block_impl::block_writer::write_block<std::string>((pthread_mutex_t *)(a1 + 24), a3, a2, v5, (uint64_t)&v17);
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*(void *)(v4 + 8) + 24 * a3));
    do
    {
      while (*(unsigned char *)v4 == 1)
        ;
    }
    while (atomic_exchange((atomic_uchar *volatile)v4, 1u));
    uint64_t v12 = (void *)(v3 + 56 * a2);
    uint64_t v13 = v12[5] + v11;
    uint64_t v14 = v12[6] - 0x5555555555555555 * (v10 >> 3);
    v12[5] = v13;
    v12[6] = v14;
    unint64_t v15 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v13 + 1) / (float)(unint64_t)(v14 + 1)));
    if (*(void *)"\b" > v15) {
      unint64_t v15 = *(void *)"\b";
    }
    v12[4] = v15;
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) * *(void *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v16 < v15) {
      unint64_t v15 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v16;
    }
    v12[4] = v15;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v15) {
      unint64_t v15 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    }
    v12[4] = v15;
    __dmb(0xBu);
    *(unsigned char *)uint64_t v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<std::string>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v19);
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = v19.n128_u64[0];
  *((void *)&v16 + 1) = *(void *)v19.n128_u64[0];
  uint64_t v18 = *(void *)(v19.n128_u64[0] + 8) - *((void *)&v16 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)&v15, a4);
  *(void *)(a5 + 16) = v17;
  *(void *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  uint64_t v10 = *(void *)v19.n128_u64[0];
  long long v11 = *(_OWORD *)(a5 + 32);
  v14[1] = *(_OWORD *)(a5 + 16);
  uint64_t v14[2] = v11;
  v14[0] = *(_OWORD *)a5;
  uint64_t v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v14);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v19);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  return v12;
}

void sub_223FDA770(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::buffer_pool<std::vector<char>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = &a1[1].__opaque[24];
  if (!*(void *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    uint64_t v6 = *(void *)a1[1].__opaque;
    uint64_t v5 = *(void *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + v7 + 8);
        if (v9 && !*(void *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<char>>>::push_back(v4, (long long *)(v6 + v7));
          uint64_t v6 = *(void *)a1[1].__opaque;
          uint64_t v5 = *(void *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(void *)a1[2].__opaque) {
      goto LABEL_14;
    }
  }
  pthread_mutex_lock(a1);
  uint64_t v10 = *(void *)a1[2].__opaque;
  if (v10)
  {
    long long v11 = *(_OWORD *)(*(void *)(*(void *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  uint64_t result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_14:
    uint64_t v13 = operator new(0x30uLL);
    v13[1] = 0;
    v13[2] = 0;
    void v13[3] = 0;
    void *v13 = &unk_26D767C58;
    v13[4] = 0;
    v13[5] = 0;
    *(void *)a2 = v13 + 3;
    *(void *)(a2 + 8) = v13;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(void *)&a1[1].__opaque[8] - *(void *)a1[1].__opaque) >> 4)) {
      std::vector<std::shared_ptr<std::vector<char>>>::push_back[abi:ne180100]((uint64_t *)a1[1].__opaque, (long long *)a2);
    }
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_223FDA8F8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  if (*(void *)(v2 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v2 + 8));
  }
  _Unwind_Resume(a1);
}

void turi::buffer_pool<std::vector<char>>::release_buffer(pthread_mutex_t *a1, __n128 *a2)
{
  uint64_t v3 = (std::vector<char> *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    std::vector<char>::pointer begin = v3->__begin_;
    v3->__end_ = v3->__begin_;
    if ((char *)(v3->__end_cap_.__value_ - begin) >= (char *)0x100000) {
      std::vector<char>::shrink_to_fit(v3);
    }
    if ((unint64_t)(*(void *)a1[2].__opaque
                          + ((uint64_t)(*(void *)&a1[1].__opaque[8] - *(void *)a1[1].__opaque) >> 4)) < a1[1].__sig)
    {
      pthread_mutex_lock(a1);
      std::deque<std::shared_ptr<std::vector<char>>>::push_back(&a1[1].__opaque[24], a2);
      pthread_mutex_unlock(a1);
    }
    uint64_t v6 = (std::__shared_weak_count *)a2->n128_u64[1];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_223FDAA24(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<std::vector<char>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<std::vector<char>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_223FDAB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<char>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::locale v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __n128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::locale v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::string::size_type v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::string v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223FDAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<char>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::vector<std::shared_ptr<std::vector<char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<char>>>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<char>>>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<char>>>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<char>>>,std::reverse_iterator<std::shared_ptr<std::vector<char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<char>::shrink_to_fit(std::vector<char> *this)
{
  std::vector<char>::pointer end = this->__end_;
  std::vector<char>::pointer begin = this->__begin_;
  BOOL v3 = (char *)(end - this->__begin_);
  if ((char *)(this->__end_cap_.__value_ - this->__begin_) > v3)
  {
    if (end == begin)
    {
      uint64_t v5 = (char *)(end - this->__begin_);
    }
    else
    {
      uint64_t v5 = (char *)operator new(end - this->__begin_);
      BOOL v3 = &v3[(void)v5];
      uint64_t v6 = &end[~(unint64_t)begin];
      do
      {
        char v7 = *--end;
        (v6--)[(void)v5] = v7;
      }
      while (end != begin);
      std::vector<char>::pointer begin = this->__begin_;
    }
    this->__begin_ = v5;
    this->__end_ = v3;
    this->__end_cap_.__value_ = v3;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

__n128 std::deque<std::shared_ptr<std::vector<char>>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<std::string>::shrink_to_fit(std::vector<std::string> *this)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  int64x2_t v2 = *(int64x2_t *)&this->__end_;
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)this->__begin_)), 3uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    p_end_cap = &this->__end_cap_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if ((std::vector<std::string>::pointer)v2.i64[0] == begin)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v4);
    }
    __v.__first_ = v8;
    __v.__begin_ = &v8[v5];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v8[v9];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_223FDB2E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int64x2_t v2 = (void *)std::ostream::operator<<();
  int64x2_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer", 6);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 759, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FDB498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int64x2_t v2 = (void *)std::ostream::operator<<();
  int64x2_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 760, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FDB72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D767CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D767CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 72))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D767D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D767D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 80))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D767DC8;
  return result;
}

void std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D767DC8;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int64x2_t v2 = (void *)std::ostream::operator<<();
  int64x2_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 771, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FDBBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_function_output_iterator<std::string,std::function<void ()(std::string const&)>,std::function<void ()(std::string&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::string &&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_223FDBD3C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::string &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string &&)>::~__value_func[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 32);
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a2 + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(v4 - 1));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::groupby_aggregate_impl::group_descriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

std::string *std::vector<std::string>::vector<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,0>(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(std::string *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223FDC308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>(uint64_t a1, void *a2, void *a3, std::string *this)
{
  unint64_t v4 = this;
  long long v14 = this;
  char v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 2);
        v4->__r_.__value_.__r.__words[2] = v6[6];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = ++v15;
      uint64_t v6 = v9;
    }
    while (v9 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_223FDC404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  int64x2_t v2 = operator new(0x140uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4turi6sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_223FDC450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4turi6sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767AE0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3));
  return a1;
}

void sub_223FDC4AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D767E48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D767E48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::groupby_aggregate_impl::group_aggregate_container::init_tls(*(turi::groupby_aggregate_impl::group_aggregate_container **)(a1 + 8));
  unint64_t v5 = *a3;
  if (v5)
  {
    if (*((unsigned char *)v5 + 24))
    {
      uint64_t v11 = v5;
      uint64_t v12 = 0;
    }
    else
    {
      turi::sframe_rows::ensure_unique(v5);
      int v6 = *((unsigned __int8 *)v5 + 24);
      uint64_t v11 = v5;
      uint64_t v12 = 0;
      if (!v6) {
        turi::sframe_rows::ensure_unique(v5);
      }
    }
    if (*(void *)v5 != *((void *)v5 + 1))
    {
      long long v7 = **(void ***)v5;
      if (v7)
      {
        uint64_t v8 = v7[1] - *v7;
        if (v8)
        {
          uint64_t v9 = v8 >> 4;
          do
          {
            turi::groupby_aggregate_impl::group_aggregate_container::add(*(uint64_t **)(a1 + 8), (uint64_t)&v11, **(void **)(a1 + 16));
            ++v12;
          }
          while (v12 != v9);
        }
      }
    }
    turi::groupby_aggregate_impl::group_aggregate_container::flush_tls(*(turi::groupby_aggregate_impl::group_aggregate_container **)(a1 + 8));
  }
  return v5 == 0;
}

uint64_t std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

__n128 OUTLINED_FUNCTION_0_8(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t turi::query_eval::get_partition_keys(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  std::vector<BOOL>::vector(v73, a2);
  int v7 = pthread_mutex_init(&v95, 0);
  uint64_t v8 = (turi::thread *)assert_msg(v7 == 0, "Mutex create error %d", v7);
  uint64_t v9 = turi::thread::cpu_count(v8);
  BOOL v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v71 = *a1;
  uint64_t v72 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = turi::query_eval::infer_planner_node_length((uint64_t)&v71);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v11 == -1) {
    turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator()();
  }
  unint64_t v12 = turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE;
  if (v11 < turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE) {
    unint64_t v12 = v11;
  }
  unint64_t v70 = v12;
  float v69 = (float)v12 / (float)v11;
  uint64_t v68 = 0;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)&v88, (uint64_t)v73, 0.005);
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  unint64_t v67 = 0;
  if (v9)
  {
    uint64_t v13 = v9;
    do
    {
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)v82, (uint64_t)v73, 0.005);
      unint64_t v14 = v66;
      if (v66 >= v67)
      {
        uint64_t v15 = std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t *)&v65, (uint64_t)v82);
      }
      else
      {
        std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)&v67, v66, (uint64_t)v82);
        uint64_t v15 = v14 + 176;
      }
      unint64_t v66 = v15;
      if (__p) {
        operator delete(__p);
      }
      if (v86) {
        operator delete(v86);
      }
      v75[0] = (void **)v85;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](v75);
      v75[0] = (void **)v84;
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](v75);
      v75[0] = (void **)v83;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](v75);
      --v13;
    }
    while (v13);
  }
  uint64_t v16 = (int *)global_logger();
  if (v16[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v16)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v17 = (file_logger *)global_logger();
    started = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "create_quantile_sketch", 75, 1);
    __n128 v19 = pthread_getspecific(*((void *)started + 74));
    if (v19 && *((unsigned char *)v19 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Sampling pivot proportion: ", 27);
    }
    uint64_t v20 = file_logger::operator<<<float>((uint64_t)started);
    uint64_t v21 = pthread_getspecific(*(void *)(v20 + 592));
    if (v21)
    {
      if (*((unsigned char *)v21 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[2] - 24) + 16));
        unint64_t v22 = std::locale::use_facet((const std::locale *)v82, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale((std::locale *)v82);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v20);
        if (*(_DWORD *)(v20 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v23 = (std::__shared_weak_count *)a1[1];
  uint64_t v63 = *a1;
  std::string::size_type v64 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v81 = 0;
  uint64_t v24 = operator new(0x28uLL);
  *uint64_t v24 = &unk_26D767ED8;
  v24[1] = &v65;
  v24[2] = &v68;
  v24[3] = &v70;
  v24[4] = &v69;
  unint64_t v81 = v24;
  memset(v75, 0, sizeof(v75));
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  BYTE11(v76) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  *((void *)&v78 + 1) = 0;
  long long v79 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v74, &v63, (uint64_t)v80, v9, (uint64_t *)v75);
  *(void *)atomic_ullong *volatile v82 = (char *)&v78 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  if (SBYTE7(v78) < 0) {
    operator delete((void *)v77);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&v75[1]);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v80);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  unint64_t v25 = (long long *)v65;
  unint64_t v26 = v66;
  if (v65 != (void **)v66)
  {
    do
    {
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::substream_finalize((uint64_t)v25);
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)v82, v25);
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::combine((uint64_t)&v88, (uint64_t)v82);
      if (__p) {
        operator delete(__p);
      }
      if (v86) {
        operator delete(v86);
      }
      atomic_ullong *volatile v74 = (void ***)v85;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      atomic_ullong *volatile v74 = (void ***)v84;
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      atomic_ullong *volatile v74 = (void ***)v83;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      v25 += 11;
    }
    while (v25 != (long long *)v26);
  }
  double v27 = ceil(1.0 / (*(double *)&v88 / 3.0) + 1.0 / (*(double *)&v88 / 3.0)) + 1.0;
  if ((unint64_t)v27 <= 2) {
    unint64_t v28 = 2;
  }
  else {
    unint64_t v28 = (unint64_t)v27;
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size((uint64_t)v90, v92, v28);
  v90[2] = *((void *)&v88 + 1);
  v90[3] = v88;
  std::allocate_shared[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,void>(&v88, &v61);
  atomic_ullong *volatile v74 = &v65;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (v94) {
    operator delete(v94);
  }
  if (v93) {
    operator delete(v93);
  }
  uint64_t v65 = (void **)v92;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v65);
  uint64_t v65 = (void **)&v91;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v65);
  uint64_t v65 = (void **)&v89;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v65);
  turi::mutex::~mutex(&v95);
  if (v73[0]) {
    operator delete(v73[0]);
  }
  *(void *)&long long v88 = 0;
  DWORD2(v88) = 0;
  BYTE12(v88) = 0;
  if (a3 != 1)
  {
    unint64_t v29 = 1;
    do
    {
      double v30 = 1.0 / (double)a3 * (double)v29;
      if (v30 < 0.0) {
        double v30 = 0.0;
      }
      if (v30 > 1.0) {
        double v30 = 1.0;
      }
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::query(v61 + 48, (unint64_t)(v30 * (double)*(unint64_t *)(v61 + 64)), (uint64_t)v82);
      switch(BYTE12(v88))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v31 = (void *)v88;
            if ((void)v88)
            {
              if (*(char *)(v88 + 31) < 0) {
                operator delete(*(void **)(v88 + 8));
              }
              long long v32 = v31;
              uint64_t v33 = 0x1012C404EF22A49;
              goto LABEL_84;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v40 = (void *)v88;
            if ((void)v88)
            {
              uint64_t v41 = *(void **)(v88 + 8);
              if (v41)
              {
                *(void *)(v88 + 16) = v41;
                operator delete(v41);
              }
              long long v32 = v40;
              uint64_t v33 = 0x1080C409938AC02;
              goto LABEL_84;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::locale v34 = (void *)v88;
            if ((void)v88)
            {
              v75[0] = (void **)(v88 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v75);
              goto LABEL_79;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::locale v34 = (void *)v88;
            if ((void)v88)
            {
              v75[0] = (void **)(v88 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v75);
LABEL_79:
              long long v32 = v34;
              uint64_t v33 = 0x1020C405E66F15BLL;
              goto LABEL_84;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v42 = (void *)v88;
            if ((void)v88)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v88 + 16));
              long long v32 = v42;
              unsigned int v39 = -235920773;
              goto LABEL_83;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v35 = (void *)v88;
            if ((void)v88)
            {
              uint64_t v36 = *(void **)(v88 + 48);
              if (v36)
              {
                *(void *)(v88 + 56) = v36;
                operator delete(v36);
              }
              long long v37 = (void *)v35[3];
              if (v37)
              {
                v35[4] = v37;
                operator delete(v37);
              }
              long long v38 = (std::__shared_weak_count *)v35[2];
              if (v38) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
              }
              long long v32 = v35;
              unsigned int v39 = 2071181815;
LABEL_83:
              uint64_t v33 = v39 | 0x1030C4000000000;
LABEL_84:
              MEMORY[0x22A614FA0](v32, v33);
            }
          }
          break;
        default:
          break;
      }
      *(void *)((char *)&v88 + 5) = *(void *)&v82[5];
      *(void *)&long long v88 = *(void *)v82;
      BYTE12(v88) = v82[12];
      unint64_t v43 = a4[1];
      if (v43 >= a4[2])
      {
        uint64_t v46 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a4, (atomic_ullong *volatile *)&v88);
      }
      else
      {
        *(void *)unint64_t v43 = 0;
        *(_DWORD *)(v43 + 8) = 0;
        *(unsigned char *)(v43 + 12) = 0;
        if ((long long *)v43 != &v88)
        {
          uint64_t v44 = v88;
          *(void *)(v43 + 5) = *(void *)((char *)&v88 + 5);
          *(void *)unint64_t v43 = v44;
          unsigned int v45 = BYTE12(v88);
          *(unsigned char *)(v43 + 12) = BYTE12(v88);
          if (v45 <= 9 && ((1 << v45) & 0x33C) != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v43, 1uLL);
          }
        }
        uint64_t v46 = v43 + 16;
      }
      a4[1] = v46;
      ++v29;
    }
    while (a3 != v29);
    switch(BYTE12(v88))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v47 = (void *)v88;
          if ((void)v88)
          {
            if (*(char *)(v88 + 31) < 0) {
              operator delete(*(void **)(v88 + 8));
            }
            uint64_t v48 = v47;
            uint64_t v49 = 0x1012C404EF22A49;
            goto LABEL_124;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string v56 = (void *)v88;
          if ((void)v88)
          {
            uint64_t v57 = *(void **)(v88 + 8);
            if (v57)
            {
              *(void *)(v88 + 16) = v57;
              operator delete(v57);
            }
            uint64_t v48 = v56;
            uint64_t v49 = 0x1080C409938AC02;
            goto LABEL_124;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v50 = (void *)v88;
          if ((void)v88)
          {
            *(void *)atomic_ullong *volatile v82 = v88 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
            goto LABEL_119;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v50 = (void *)v88;
          if ((void)v88)
          {
            *(void *)atomic_ullong *volatile v82 = v88 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
LABEL_119:
            uint64_t v48 = v50;
            uint64_t v49 = 0x1020C405E66F15BLL;
            goto LABEL_124;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v58 = (void *)v88;
          if ((void)v88)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v88 + 16));
            uint64_t v48 = v58;
            unsigned int v55 = -235920773;
            goto LABEL_123;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v51 = (void *)v88;
          if ((void)v88)
          {
            uint64_t v52 = *(void **)(v88 + 48);
            if (v52)
            {
              *(void *)(v88 + 56) = v52;
              operator delete(v52);
            }
            unint64_t v53 = (void *)v51[3];
            if (v53)
            {
              v51[4] = v53;
              operator delete(v53);
            }
            long long v54 = (std::__shared_weak_count *)v51[2];
            if (v54) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            }
            uint64_t v48 = v51;
            unsigned int v55 = 2071181815;
LABEL_123:
            uint64_t v49 = v55 | 0x1030C4000000000;
LABEL_124:
            MEMORY[0x22A614FA0](v48, v49);
          }
        }
        break;
      default:
        break;
    }
  }
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  return 0;
}

void sub_223FDD0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::locale a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale(&a44);
  a26 = (uint64_t)&a14;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~streaming_quantile_sketch((uint64_t)&a66);
  turi::mutex::~mutex((pthread_mutex_t *)(v66 - 200));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::sort_sframe_in_memory(uint64_t *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int64x2_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v7, (unint64_t *)&v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  int v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long __p = 0u;
  memset(v10, 0, sizeof(v10));
  BYTE11(v11) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  *((void *)&v13 + 1) = 0;
  long long v14 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v5, (uint64_t)v10, (const turi::sframe *)v15);
  v4[0] = (char *)&v13 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  if (SBYTE7(v13) < 0) {
    operator delete((void *)__p);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&v10[1]);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  memset(&v4[6], 0, 24);
  turi::sframe::get_reader((turi::sframe *)v15);
}

void sub_223FDD754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a35);
  unint64_t v73 = *(std::__shared_weak_count **)(v71 + 8);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  turi::query_eval::less_than_partial_function::~less_than_partial_function((turi::query_eval::less_than_partial_function *)&a19);
  a19 = (uint64_t)&a25;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  turi::sframe::~sframe((turi::sframe *)&a71);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::less_than_partial_function::~less_than_partial_function(turi::query_eval::less_than_partial_function *this)
{
  int64x2_t v2 = (void *)*((void *)this + 3);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void *std::move[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v18[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v9);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v11);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v16, &v12);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a4, (uint64_t)v13);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v14);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v15);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v9);
}

void sub_223FDDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v9 - 184));
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::sort(uint64_t *a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 305, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(v43, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v43);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  BOOL v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v40 = *a1;
  uint64_t v41 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v40, (unint64_t *)v42);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  long long v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v38 = *a1;
  unsigned int v39 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_length((uint64_t)&v38);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v13 = v42[0];
  uint64_t v12 = v42[1];
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long const*>>((uint64_t)v36, *a3, a3[1]);
  unint64_t v30 = v12 - v13;
  long long __p = 0;
  std::locale v34 = 0;
  long long v35 = 0;
  if (v12 != v13)
  {
    long long v14 = 0;
    unint64_t v15 = 0;
    if (v30 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v30;
    }
    do
    {
      for (uint64_t i = v37; i; uint64_t i = (void *)*i)
      {
        unint64_t v18 = i[4];
        if (v15 >= v18)
        {
          if (v18 >= v15) {
            goto LABEL_43;
          }
          ++i;
        }
      }
      if (v14 >= v35)
      {
        uint64_t v20 = (char *)__p;
        uint64_t v21 = (v14 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v35 - (unsigned char *)__p;
        if ((v35 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v35, v24);
          uint64_t v20 = (char *)__p;
          long long v14 = v34;
        }
        else
        {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[8 * v21];
        *(void *)unint64_t v26 = v15;
        __n128 v19 = v26 + 8;
        while (v14 != v20)
        {
          uint64_t v27 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        long long __p = v26;
        std::locale v34 = v19;
        long long v35 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)long long v14 = v15;
        __n128 v19 = v14 + 8;
      }
      std::locale v34 = v19;
      long long v14 = v19;
LABEL_43:
      ++v15;
    }
    while (v15 != v16);
  }
  uint64_t v28 = a1[1];
  v32[0] = *a1;
  v32[1] = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v32, (uint64_t **)a3);
}

void sub_223FDF29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x2E0]);
  float v69 = *(std::__shared_weak_count **)(a14 + 8);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  unint64_t v70 = *(void **)(v67 - 224);
  if (v70) {
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v67 - 192);
  if (v71)
  {
    *(void *)(v67 - 184) = v71;
    operator delete(v71);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  free(a27);
  if (__p) {
    operator delete(__p);
  }
  STACK[0x2C8] = (unint64_t)&a37;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a42, (void *)a43);
  operator delete(a15);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a54);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a58, (void *)a59);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int64x2_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_rows != (size_t)(-1)", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "operator()", 47, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FDF83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~streaming_quantile_sketch(uint64_t a1)
{
  int64x2_t v2 = *(void **)(a1 + 152);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 128);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 104);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a1 + 80);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a1 + 24);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

uint64_t file_logger::operator<<<float>(uint64_t a1)
{
  int64x2_t v2 = pthread_getspecific(*(void *)(a1 + 592));
  if (v2 && v2[280]) {
    std::ostream::operator<<();
  }
  return a1;
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::substream_finalize(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1 + 48, *(void *)(a1 + 8), a1 + 152, *(double *)a1 / 3.0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(v2);
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(v3 + v4);
      ++v5;
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      v4 += 104;
    }
    while (v5 < 0x4EC4EC4EC4EC4EC5 * ((v6 - v3) >> 3));
    if (v6 != v3)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 56;
      do
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(v2, (uint64_t *)(a1 + 104), (uint64_t *)(v3 + v8), &v13);
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 104));
        *(_OWORD *)(a1 + 104) = v13;
        *(void *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = v14;
        uint64_t v14 = 0;
        long long v13 = 0uLL;
        unint64_t v15 = (void **)&v13;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v15);
        ++v7;
        uint64_t v3 = *(void *)(a1 + 24);
        v8 += 104;
      }
      while (v7 < 0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 32) - v3) >> 3));
    }
  }
  double v9 = ceil(1.0 / (*(double *)a1 / 3.0) + 1.0 / (*(double *)a1 / 3.0)) + 1.0;
  if ((unint64_t)v9 <= 2) {
    unint64_t v10 = 2;
  }
  else {
    unint64_t v10 = (unint64_t)v9;
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(v2, (uint64_t *)(a1 + 104), v10);
  *(void *)(a1 + 64) = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 32);
        i != v12;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 104;
  }
  *(void *)(a1 + 32) = v12;
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::combine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (_OWORD *)(a1 + 48);
  if (v4)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge((uint64_t)v5, (uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104), &v7);
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 104));
    *(_OWORD *)(a1 + 104) = v7;
    *(void *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = v8;
    uint64_t v8 = 0;
    long long v7 = 0uLL;
    double v9 = (void **)&v7;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *unint64_t v5 = *(_OWORD *)(a2 + 48);
    v5[1] = v6;
    if (a1 != a2)
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(a1 + 80, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((char **)(a1 + 104), *(uint64_t **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 5);
    }
    std::vector<BOOL>::operator=((void **)(a1 + 128), a2 + 128);
  }
  *(void *)(a1 + 8) += *(void *)(a2 + 8);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)a1 = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 8) = xmmword_2246CD910;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1, a2, a3);
  return a1;
}

void sub_223FDFE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void **)(v2 + 152);
  if (v4) {
    operator delete(v4);
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(v2 + 48);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(uint64_t a1, uint64_t a2, double a3)
{
  std::vector<BOOL>::operator=((void **)(a1 + 152), a2);
  *(double *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 32);
        i != v6;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 104;
  }
  *(void *)(a1 + 32) = v6;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::resize((uint64_t *)(a1 + 24), 1uLL);
  double v8 = *(double *)a1;
  double v9 = 1.0 / *(double *)a1;
  if ((unint64_t)v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = (unint64_t)v9;
  }
  *(void *)(a1 + 16) = v10;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(*(void *)(a1 + 24), v10, a2, v8 / 3.0);
  unint64_t v11 = *(void *)(a1 + 16);
  double v12 = *(double *)a1;
  return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1 + 48, v11, a2, v12);
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v4 - 32);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          double v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          long long v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  atomic_ullong *volatile v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    atomic_ullong *volatile v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      atomic_ullong *volatile v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than::element_less_than((uint64_t)&v15, a3);
  uint64_t v7 = *(void **)(a1 + 80);
  if (v7) {
    operator delete(v7);
  }
  *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = v15;
  *(_OWORD *)(a1 + 88) = v16;
  unint64_t v8 = (unint64_t)((double)a2 * a4);
  *(void *)a1 = a2;
  if (!v8) {
    unint64_t v8 = 2;
  }
  double v9 = floor(log2((double)v8) / a4);
  unint64_t v10 = (unint64_t)(v9 + v9);
  if (!v10) {
    unint64_t v10 = a2;
  }
  *(double *)(a1 + 24) = a4;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = 0;
  unint64_t v11 = *(void ***)(a1 + 32);
  double v12 = *(void ***)(a1 + 40);
  while (v12 != v11)
  {
    v12 -= 3;
    unint64_t v15 = v12;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v11;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::resize((uint64_t *)(a1 + 32), 1uLL);
  uint64_t v14 = *(void *)(a1 + 56);
  for (uint64_t result = *(void *)(a1 + 64);
        result != v14;
  *(void *)(a1 + 64) = v14;
  return result;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        BOOL v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      unint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 80);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a2 + 56);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = (void **)(a2 + 32);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 104 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0x3F847AE147AE147BLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0uLL;
        *(void *)(v7 + 96) = 0;
        v7 += 104;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)result, v11);
    }
    else {
      double v12 = 0;
    }
    uint64_t v14 = &v12[104 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[104 * v11];
    unint64_t v15 = &v14[104 * a2];
    do
    {
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0x3F847AE147AE147BLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((void *)v14 + 12) = 0;
      v14 += 104;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(v16);
  }
  return result;
}

void sub_223FE072C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(a1, v7 - 104, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  __n128 result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 56) = result;
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  uint64_t v5 = *(void *)(a3 + 88);
  *(void *)(a2 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a3 + 80);
  *(void *)(a2 + 88) = v5;
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than::element_less_than(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<BOOL>::operator=((void **)a1, a2);
  return a1;
}

void sub_223FE0B00(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      double v12 = 0;
    }
    long long v15 = v12;
    long long v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(&v15);
  }
}

void sub_223FE0C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[176 * v3];
  long long v13 = &v7[176 * v6];
  std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 176;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(&v10);
  return v8;
}

void sub_223FE1050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  long long v4 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(_OWORD *)(a2 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  __n128 result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(void *)(a2 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a3 + 120);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a3 + 104) = 0;
  uint64_t v6 = *(void *)(a3 + 136);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a2 + 136) = v6;
  *(void *)(a2 + 144) = *(void *)(a3 + 144);
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  uint64_t v7 = *(void *)(a3 + 160);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(void *)(a2 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = v7;
  *(void *)(a2 + 168) = *(void *)(a3 + 168);
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a3 + 168) = 0;
  return result;
}

uint64_t std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(176 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 176;
      std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(a1, v7 - 176, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 176;
      *((void *)&v16 + 1) -= 176;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 152);
  if (v3) {
    operator delete(v3);
  }
  long long v4 = *(void **)(a2 + 128);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void **)(a2 + 104);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 80);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 24);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void **std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 176;
    std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v4, i - 176);
  }
}

void std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D767ED8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D767ED8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(turi::random *a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a3;
  if (!*((unsigned char *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((unsigned char *)v4 + 24)) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 == *((void *)v4 + 1)) {
    return 0;
  }
  uint64_t v5 = **(void ***)v4;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(**(void **)v4 + 8) - *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v6 >> 4;
  do
  {
    uint64_t v9 = **((void **)v3 + 2);
    uint64_t v10 = **((void **)v3 + 3);
    BOOL v11 = v9 == v10;
    if (v9 == v10) {
      break;
    }
    float v12 = **((float **)v3 + 4);
    source = (char *)turi::random::get_source(a1);
    char v14 = (pthread_mutex_t *)(source + 6288);
    pthread_mutex_lock((pthread_mutex_t *)(source + 6288));
    if (v12 == 0.0)
    {
      a1 = (turi::random *)pthread_mutex_unlock(v14);
    }
    else
    {
      unint64_t v15 = 0x5DEECE66DLL * *((void *)source + 785) + 11;
      *((void *)source + 785) = v15 & 0xFFFFFFFFFFFFLL;
      BOOL v16 = v12 * 2147483650.0 < (double)((v15 >> 17) & 0x7FFFFFFF);
      a1 = (turi::random *)pthread_mutex_unlock(v14);
      if (!v16) {
        operator new();
      }
    }
    ++v7;
  }
  while (v7 != v8);
  return v11;
}

void sub_223FE1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, atomic_ullong *a18, int a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x1012C404EF22A49);
  a17 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v22 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      if (*((char *)a18 + 31) < 0) {
        operator delete((void *)a18[1]);
      }
      uint64_t v23 = v22;
      uint64_t v24 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v25 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      unint64_t v26 = (void *)a18[1];
      if (v26)
      {
        a18[2] = (atomic_ullong)v26;
        operator delete(v26);
      }
      uint64_t v23 = v25;
      uint64_t v24 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v27 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      a17 = (void **)(a18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v27 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      a17 = (void **)(a18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_18:
      uint64_t v23 = v27;
      uint64_t v24 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)a18 + 2);
      uint64_t v23 = v28;
      unsigned int v29 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v30 = a18;
      if (!a18) {
        goto LABEL_33;
      }
      long long v31 = (void *)a18[6];
      if (v31)
      {
        a18[7] = (atomic_ullong)v31;
        operator delete(v31);
      }
      long long v32 = (void *)v30[3];
      if (v32)
      {
        v30[4] = (atomic_ullong)v32;
        operator delete(v32);
      }
      uint64_t v33 = (std::__shared_weak_count *)v30[2];
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      uint64_t v23 = v30;
      unsigned int v29 = 2071181815;
LABEL_31:
      uint64_t v24 = v29 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v23, v24);
LABEL_33:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_33;
  }
}

uint64_t std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(uint64_t a1, uint64_t a2)
{
  void v32[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - v6) >> 3);
  uint64_t v8 = v7 - 1;
  if (*(void *)(v6 + 104 * (v7 - 1) + 16) >= (unint64_t)(*(v4 - 1) << (v7 - 1)))
  {
    long long v24 = 0uLL;
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0x3F847AE147AE147BLL;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)long long __p = 0u;
    uint64_t v30 = 0;
    if (v5 >= *(void *)(a1 + 40))
    {
      uint64_t v10 = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(v4, (uint64_t)&v24);
      BOOL v11 = __p[0];
      *(void *)(a1 + 32) = v10;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v9 = v25;
      *(_OWORD *)unint64_t v5 = v24;
      *(_OWORD *)(v5 + 16) = v9;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      long long v26 = 0uLL;
      *(void *)&long long v27 = 0;
      *(void *)(v5 + 64) = 0;
      *(void *)(v5 + 72) = 0;
      *((void *)&v27 + 1) = 0;
      *(void *)&long long v28 = 0;
      *(void *)(v5 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(void *)(v5 + 88) = 0;
      *(void *)(v5 + 96) = 0;
      *((void *)&v28 + 1) = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v30 = 0;
      *(void *)(a1 + 32) = v5 + 104;
    }
    long long v31 = (void **)&v27 + 1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v31);
    long long v31 = (void **)&v26;
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v31);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(*(void *)(a1 + 24) + 104 * v7, *(void *)(a1 + 16) << v7, a1 + 152, *(double *)a1 / 3.0);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v8 = v7;
  }
  memset(v32, 0, 13);
  if (v32 != (uint64_t *)a2)
  {
    *(uint64_t *)((char *)v32 + 5) = *(void *)(a2 + 5);
    v32[0] = *(void *)a2;
    BYTE4(v32[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v32[1]) <= 9u && ((1 << SBYTE4(v32[1])) & 0x33C) != 0) {
      atomic_fetch_add((atomic_ullong *volatile)v32[0], 1uLL);
    }
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(v6 + 104 * v8, v32);
  switch(BYTE4(v32[1]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v32[0];
        if (v32[0])
        {
          if (*(char *)(v32[0] + 31) < 0) {
            operator delete(*(void **)(v32[0] + 8));
          }
          long long v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v32[0];
        if (v32[0])
        {
          BOOL v16 = *(void **)(v32[0] + 8);
          if (v16)
          {
            *(void *)(v32[0] + 16) = v16;
            operator delete(v16);
          }
          long long v13 = (void *)v15;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v32[0];
        if (v32[0])
        {
          *(void *)&long long v24 = v32[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
          goto LABEL_37;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v32[0];
        if (v32[0])
        {
          *(void *)&long long v24 = v32[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
LABEL_37:
          long long v13 = (void *)v17;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v23 = v32[0];
        if (v32[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v32[0] + 16));
          long long v13 = (void *)v23;
          unsigned int v22 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v18 = (void *)v32[0];
        if (v32[0])
        {
          uint64_t v19 = *(void **)(v32[0] + 48);
          if (v19)
          {
            *(void *)(v32[0] + 56) = v19;
            operator delete(v19);
          }
          uint64_t v20 = (void *)v18[3];
          if (v20)
          {
            void v18[4] = v20;
            operator delete(v20);
          }
          uint64_t v21 = (std::__shared_weak_count *)v18[2];
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          long long v13 = v18;
          unsigned int v22 = 2071181815;
LABEL_41:
          uint64_t v14 = v22 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x22A614FA0](v13, v14);
        }
      }
      break;
    default:
      break;
  }
  ++*(void *)(a1 + 8);
}

void sub_223FE2690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  unint64_t v4 = v3[1];
  if (v4 >= v3[2])
  {
    uint64_t v5 = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__emplace_back_slow_path<turi::flexible_type&>(v3, a2);
  }
  else
  {
    std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>((uint64_t)(v3 + 2), v3[1], a2);
    uint64_t v5 = v4 + 32;
    v3[1] = v4 + 32;
  }
  v3[1] = v5;
  uint64_t v6 = *(void *)(a1 + 8);
  ++*(void *)(a1 + 16);
  if (v6 == (uint64_t)(*(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32)) >> 5)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(a1);
    double v7 = 1.0 / (1.0 / (double)*(unint64_t *)(a1 + 8));
    double v8 = ceil(v7 + v7) + 1.0;
    if ((unint64_t)v8 <= 2) {
      unint64_t v9 = 2;
    }
    else {
      unint64_t v9 = (unint64_t)v8;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(a1, *(uint64_t **)(a1 + 32), v9);
    uint64_t v10 = *(long long **)(a1 + 32);
    long long v14 = *v10;
    uint64_t v15 = *((void *)v10 + 2);
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    BOOL v11 = *(uint64_t **)(a1 + 32);
    uint64_t v13 = *v11;
    for (uint64_t i = v11[1];
          i != v13;
    v11[1] = v13;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compact((unint64_t *)a1, (uint64_t *)&v14, 1uLL);
    BOOL v16 = (void **)&v14;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_223FE2920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    double v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    double v7 = 0;
  }
  uint64_t v10 = v7;
  BOOL v11 = &v7[104 * v3];
  uint64_t v13 = &v7[104 * v6];
  std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 104;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(&v10);
  return v8;
}

void sub_223FE2A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

int64x2_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 32);
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  unint64_t v5 = 126 - 2 * __clz(((char *)v4 - (char *)*v2) >> 5);
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::vector<BOOL>::vector(__p, a1 + 80);
  std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(v3, v4, __p, v6, 1, v7);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  unint64_t v9 = *(int64x2_t ***)(a1 + 32);
  uint64_t v10 = *v9;
  uint64_t v11 = (char *)v9[1] - (char *)*v9;
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 5;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    long long v14 = v10 + 1;
    do
    {
      int64x2_t result = vdupq_n_s64(++v12);
      int64x2_t *v14 = result;
      v14 += 2;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_223FE2B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compact(unint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v7 = a1[4];
  unint64_t v6 = a1[5];
  unint64_t v5 = (uint64_t *)(a1 + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) <= a3)
  {
LABEL_11:
    if (v6 >= a1[6])
    {
      uint64_t v18 = std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(v5, a2);
    }
    else
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>((uint64_t)v5, a2);
      uint64_t v18 = v6 + 24;
    }
    a1[5] = v18;
  }
  else
  {
    unint64_t v8 = a3;
    while (1)
    {
      unint64_t v9 = (void *)(v7 + 24 * v8);
      if (v9[1] == *v9) {
        break;
      }
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge((uint64_t)a1, a2, (uint64_t *)(v7 + 24 * v8), &v19);
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)a2);
      *(_OWORD *)a2 = v19;
      a2[2] = v20;
      uint64_t v20 = 0;
      long long v19 = 0uLL;
      uint64_t v21 = (void **)&v19;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v21);
      double v10 = 1.0 / (1.0 / (double)a1[1]);
      double v11 = ceil(v10 + v10) + 1.0;
      if ((unint64_t)v11 <= 2) {
        unint64_t v12 = 2;
      }
      else {
        unint64_t v12 = (unint64_t)v11;
      }
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size((uint64_t)a1, a2, v12);
      uint64_t v7 = a1[4];
      unint64_t v13 = v7 + 24 * v8;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v15 = (void *)(v13 + 8);
      uint64_t v14 = v16;
      uint64_t v17 = *(void *)(v7 + 24 * v8);
      if (v16 != v17)
      {
        do
          uint64_t v14 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v14 - 32);
        while (v14 != v17);
        uint64_t v7 = *v5;
      }
      void *v15 = v17;
      ++v8;
      unint64_t v6 = a1[5];
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3)) {
        goto LABEL_11;
      }
    }
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(v7 + 24 * v8));
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
    *(void *)(v7 + 24 * v8 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__emplace_back_slow_path<turi::flexible_type&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  double v11 = v8;
  unint64_t v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  unint64_t v13 = v12 + 32;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_223FE2DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int v4 = *((_DWORD *)a3 + 2);
  unsigned int v5 = *((unsigned __int8 *)a3 + 12);
  if (v5 > 9 || ((1 << v5) & 0x33C) == 0)
  {
    *(void *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 12) = v5;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)v3, 1uLL);
    *(void *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 12) = v5;
    atomic_fetch_add((atomic_ullong *volatile)v3, 1uLL);
  }
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
  switch(v5)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      uint64_t v9 = *(void **)(v3 + 8);
      if (v9)
      {
        *(void *)(v3 + 16) = v9;
        operator delete(v9);
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      uint64_t v17 = (void **)(v3 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
      goto LABEL_32;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      uint64_t v17 = (void **)(v3 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_32:
      MEMORY[0x22A614FA0](v3, 0x1020C405E66F15BLL);
      return;
    case 8u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v3 + 16));
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) != 1 || v3 == 0) {
        return;
      }
      uint64_t v14 = *(void **)(v3 + 48);
      if (v14)
      {
        *(void *)(v3 + 56) = v14;
        operator delete(v14);
      }
      uint64_t v15 = *(void **)(v3 + 24);
      if (v15)
      {
        *(void *)(v3 + 32) = v15;
        operator delete(v15);
      }
      uint64_t v16 = *(std::__shared_weak_count **)(v3 + 16);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      break;
    default:
      return;
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 32) = 0;
      *(_DWORD *)(v6 - 24) = 0;
      *(unsigned char *)(v6 - 2CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      uint64_t v7 = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 27) = *(void *)(v2 + v5 - 27);
      *(void *)(v6 - 32) = v7;
      *(unsigned char *)(v6 - 2CoreML::Specification::AdamOptimizer::New(this, 0) = *(unsigned char *)(v2 + v5 - 20);
      *(unsigned char *)(v2 + v5 - 2CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *int64x2_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(uint64_t *result, uint64_t *a2, void *a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t v10 = a2;
  double v11 = result;
  long long v31 = a2;
  long long v32 = result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v13 = (char *)v10 - (char *)v11;
    unint64_t v14 = ((char *)v10 - (char *)v11) >> 5;
    if (!(!v7 & v6))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          long long v31 = v10 - 4;
          int64x2_t result = (uint64_t *)turi::query_eval::less_than_full_function::compare(a3, (void *)(*(v10 - 4) + 8), (void *)(*v11 + 8), a6);
          if (result) {
            int64x2_t result = (uint64_t *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v32, &v31);
          }
          break;
        case 3uLL:
          long long v31 = v10 - 4;
          int64x2_t result = (uint64_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, v11 + 4, v10 - 4, a3, a6);
          break;
        case 4uLL:
          long long v31 = v10 - 4;
          int64x2_t result = (uint64_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, v11 + 4, v11 + 8, v10 - 4, a3, a6);
          break;
        case 5uLL:
          long long v31 = v10 - 4;
          int64x2_t result = (uint64_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, v11 + 4, v11 + 8, v11 + 12, v10 - 4, a3, a6);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 767)
    {
      if (a5) {
        return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, v10, a3, a6);
      }
      else {
        return (uint64_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, v10, a3, a6);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = v10 - 4;
    if ((unint64_t)v13 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v11, &v11[4 * (v14 >> 1)], v16, a3, a6);
      uint64_t v17 = v31;
      uint64_t v18 = 32 * v15 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)(v32 + 4), (uint64_t *)((char *)v32 + v18), v31 - 8, a3, v19);
      uint64_t v20 = 32 * v15 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)(v32 + 8), (uint64_t *)((char *)v32 + v20), v17 - 12, a3, v21);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v32 + v18, &v32[4 * v15], (uint64_t *)((char *)v32 + v20), a3, v22);
      uint64_t v30 = &v32[4 * v15];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v32, &v30);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)&v11[4 * (v14 >> 1)], v11, v16, a3, a6);
      if (a5)
      {
LABEL_13:
        uint64_t v10 = v31;
        goto LABEL_14;
      }
    }
    char v23 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*(v32 - 4) + 8), (void *)(*v32 + 8), v24);
    uint64_t v10 = v31;
    if ((v23 & 1) == 0)
    {
      int64x2_t result = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>((uint64_t)v32, v31, a3);
      double v11 = result;
LABEL_22:
      a5 = 0;
      long long v32 = v11;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    long long v25 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>((uint64_t)v32, v10, a3);
    if ((v27 & 1) == 0) {
      goto LABEL_21;
    }
    int v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v32, v25, a3, v26);
    double v11 = v25 + 4;
    int64x2_t result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v25 + 4, v10, a3, v29);
    if (result)
    {
      if (v28) {
        return result;
      }
      long long v31 = v25;
      double v11 = v32;
      uint64_t v10 = v25;
    }
    else
    {
      if (!v28)
      {
LABEL_21:
        int64x2_t result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(v32, v25, a3, -i, a5 & 1);
        double v11 = v25 + 4;
        goto LABEL_22;
      }
      long long v32 = v25 + 4;
    }
  }
  if (v11 != v10) {
    return (uint64_t *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v11, (uint64_t)v10, (uint64_t)v10, a3, a6);
  }
  return result;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)v2;
  *(void *)&v6[5] = *(void *)(v2 + 5);
  *(void *)char v6 = v4;
  v6[12] = *(unsigned char *)(v2 + 12);
  *(unsigned char *)(v2 + 12) = 0;
  long long v7 = *(_OWORD *)(v2 + 16);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v2, v3);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v3, (uint64_t *)v6);
  return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v6);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, void *a2, void *a3, __n128 a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    char v6 = (void *)(result + 32);
    if ((void *)(result + 32) != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (void *)result;
      do
      {
        uint64_t v10 = v6;
        int64x2_t result = turi::query_eval::less_than_full_function::compare(a3, (void *)(v9[4] + 8), (void *)(*v9 + 8), a4);
        if (result)
        {
          *(void *)&v15[5] = *(void *)((char *)v10 + 5);
          *(void *)unint64_t v15 = *v10;
          v15[12] = *((unsigned char *)v9 + 44);
          *((unsigned char *)v9 + 44) = 0;
          long long v16 = *((_OWORD *)v9 + 3);
          uint64_t v11 = v8;
          while (1)
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5 + v11 + 32, (uint64_t *)(v5 + v11));
            if (!v11) {
              break;
            }
            char v13 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v15 + 8), (void *)(*(void *)(v5 + v11 - 32) + 8), v12);
            v11 -= 32;
            if ((v13 & 1) == 0)
            {
              uint64_t v14 = v5 + v11 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v5;
LABEL_10:
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v14, (uint64_t *)v15);
          int64x2_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
        }
        char v6 = v10 + 4;
        v8 += 32;
        uint64_t v9 = v10;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

void sub_223FE35F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t *a2, void *a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    char v6 = (uint64_t *)(result + 32);
    if ((uint64_t *)(result + 32) != a2)
    {
      do
      {
        uint64_t v8 = v6;
        int64x2_t result = turi::query_eval::less_than_full_function::compare(a3, (void *)(v5[4] + 8), (void *)(*v5 + 8), a4);
        if (result)
        {
          *(void *)&v11[5] = *(uint64_t *)((char *)v8 + 5);
          *(void *)uint64_t v11 = *v8;
          v11[12] = *((unsigned char *)v5 + 44);
          *((unsigned char *)v5 + 44) = 0;
          long long v12 = *((_OWORD *)v5 + 3);
          do
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v5 + 4), v5);
            uint64_t v9 = *(v5 - 4);
            v5 -= 4;
          }
          while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v11 + 8), (void *)(v9 + 8), v10) & 1) != 0);
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v5 + 4), (uint64_t *)v11);
          int64x2_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v11);
        }
        char v6 = v8 + 4;
        uint64_t v5 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_223FE3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, __n128 a5)
{
  long long v16 = a2;
  uint64_t v17 = a1;
  unint64_t v15 = a3;
  char v8 = turi::query_eval::less_than_full_function::compare(a4, (void *)(*a2 + 8), (void *)(*(void *)a1 + 8), a5);
  uint64_t result = turi::query_eval::less_than_full_function::compare(a4, (void *)(*a3 + 8), (void *)(*a2 + 8), v9);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
    if (!turi::query_eval::less_than_full_function::compare(a4, (void *)(*v16 + 8), (void *)(*(void *)v17 + 8), v11))return 1; {
    long long v12 = &v17;
    }
    uint64_t v13 = &v16;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v16);
    if (!turi::query_eval::less_than_full_function::compare(a4, (void *)(*v15 + 8), (void *)(*v16 + 8), v14))return 1; {
    long long v12 = (uint64_t *)&v16;
    }
    uint64_t v13 = &v15;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(v12, v13);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v15);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  __n128 v19 = a2;
  unint64_t v20 = a1;
  *(void *)&v21[5] = *(void *)(a1 + 5);
  *(void *)__n128 v21 = *(void *)a1;
  v21[12] = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = 0;
  __n128 v22 = *(__n128 *)(a1 + 16);
  if (turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(*(a2 - 4) + 8), v22))
  {
    uint64_t v7 = a1 + 32;
    do
    {
      unint64_t v20 = v7;
      char v8 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(*(void *)v7 + 8), v6);
      v7 += 32;
    }
    while ((v8 & 1) == 0);
    unint64_t v9 = v7 - 32;
  }
  else
  {
    unint64_t v10 = a1 + 32;
    do
    {
      unint64_t v9 = v10;
      unint64_t v20 = v10;
      if (v10 >= (unint64_t)v4) {
        break;
      }
      char v11 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(*(void *)v10 + 8), v6);
      unint64_t v10 = v9 + 32;
    }
    while ((v11 & 1) == 0);
  }
  if (v9 < (unint64_t)v4)
  {
    long long v12 = v4 - 4;
    do
    {
      __n128 v19 = v12;
      char v13 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(*v12 + 8), v6);
      v12 -= 4;
    }
    while ((v13 & 1) != 0);
    uint64_t v4 = v12 + 4;
  }
  if (v9 < (unint64_t)v4)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v20, &v19);
      do
      {
        uint64_t v15 = *(void *)(v20 + 32);
        v20 += 32;
      }
      while (!turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(v15 + 8), v14));
      do
      {
        long long v16 = v19;
        v19 -= 4;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v21 + 8), (void *)(*(v16 - 4) + 8), v14) & 1) != 0);
      unint64_t v9 = v20;
    }
    while (v20 < (unint64_t)v19);
  }
  if (v9 - 32 != a1) {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v9 - 32));
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v9 - 32, (uint64_t *)v21);
  unint64_t v17 = v20;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v21);
  return v17;
}

void sub_223FE3A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v22[5] = *(void *)(a1 + 5);
  *(void *)__n128 v22 = *(void *)a1;
  v22[12] = *(unsigned char *)(a1 + 12);
  unint64_t v20 = a2;
  *(unsigned char *)(a1 + 12) = 0;
  __n128 v7 = *(__n128 *)(a1 + 16);
  __n128 v23 = v7;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 32);
    unint64_t v21 = a1 + v6 + 32;
    v6 += 32;
  }
  while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(v8 + 8), (void *)(*(void *)v22 + 8), v7) & 1) != 0);
  unint64_t v9 = a1 + v6;
  if (v6 == 32)
  {
    char v13 = a2 - 4;
    while (1)
    {
      long long v12 = v13 + 4;
      if (v9 >= (unint64_t)(v13 + 4)) {
        break;
      }
      unint64_t v20 = v13;
      char v14 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*v13 + 8), (void *)(*(void *)v22 + 8), v7);
      v13 -= 4;
      if (v14)
      {
        long long v12 = v13 + 4;
        break;
      }
    }
  }
  else
  {
    unint64_t v10 = a2 - 4;
    do
    {
      unint64_t v20 = v10;
      char v11 = turi::query_eval::less_than_full_function::compare(a3, (void *)(*v10 + 8), (void *)(*(void *)v22 + 8), v7);
      v10 -= 4;
    }
    while ((v11 & 1) == 0);
    long long v12 = v10 + 4;
  }
  unint64_t v15 = v9;
  if (v9 < (unint64_t)v12)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v21, &v20);
      do
      {
        uint64_t v17 = *(void *)(v21 + 32);
        v21 += 32;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(v17 + 8), (void *)(*(void *)v22 + 8), v16) & 1) != 0);
      do
        v20 -= 4;
      while (!turi::query_eval::less_than_full_function::compare(a3, (void *)(*v20 + 8), (void *)(*(void *)v22 + 8), v16));
      unint64_t v15 = v21;
    }
    while (v21 < (unint64_t)v20);
  }
  uint64_t v18 = v15 - 32;
  if (v15 - 32 != a1) {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v15 - 32));
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v18, (uint64_t *)v22);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v22);
  return v18;
}

void sub_223FE3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t *a1, uint64_t *a2, void *a3, __n128 a4)
{
  uint64_t v5 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  __n128 v16 = a2;
  uint64_t v17 = a1;
  BOOL v7 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v7;
    case 2:
      uint64_t v8 = *(a2 - 4);
      __n128 v16 = a2 - 4;
      if (turi::query_eval::less_than_full_function::compare(a3, (void *)(v8 + 8), (void *)(*a1 + 8), a4))std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v17, &v16); {
      return v7;
      }
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a2 - 4, a3, a4);
      return v7;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3, a4);
      return v7;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3, a4);
      return v7;
    default:
      unint64_t v9 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a3, a4);
      char v11 = a1 + 12;
      if (v11 == v5) {
        return 1;
      }
      int v12 = 0;
      break;
  }
  while (!turi::query_eval::less_than_full_function::compare(a3, (void *)(*v11 + 8), (void *)(*v9 + 8), v10))
  {
LABEL_12:
    unint64_t v9 = v11;
    v11 += 4;
    if (v11 == v5) {
      return 1;
    }
  }
  *(void *)&void v18[5] = *(uint64_t *)((char *)v11 + 5);
  *(void *)uint64_t v18 = *v11;
  v18[12] = *((unsigned char *)v11 + 12);
  *((unsigned char *)v11 + 12) = 0;
  long long v19 = *((_OWORD *)v11 + 1);
  do
  {
    uint64_t v13 = (uint64_t)v9;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v9 + 4), v9);
    if (v9 == v17) {
      break;
    }
    v9 -= 4;
  }
  while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(*(void *)v18 + 8), (void *)(*(void *)(v13 - 32) + 8), v14) & 1) != 0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v13, (uint64_t *)v18);
  if (++v12 != 8)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
    uint64_t v5 = v16;
    goto LABEL_12;
  }
  BOOL v7 = v11 + 4 == v16;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
  return v7;
}

void sub_223FE3E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t turi::query_eval::less_than_full_function::compare(void *a1, void *a2, void *a3, __n128 a4)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v7 = 0;
LABEL_3:
  unint64_t v8 = *(void *)(*a1 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8));
  unint64_t v9 = (unsigned __int8 *)(*a2 + 16 * v7);
  switch(byte_268081F8C)
  {
    case 0:
      switch(v9[12])
      {
        case 0u:
          if (*(void *)v9 == turi::FLEX_UNDEFINED) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 1u:
          a4.n128_u64[0] = *(void *)v9;
          uint64_t v62 = turi::FLEX_UNDEFINED;
          goto LABEL_158;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v9 << 8) >> 8 && !*((_DWORD *)v9 + 2)) {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(v9[12])
      {
        case 0u:
          a4.n128_u64[0] = turi::FLEX_UNDEFINED;
          uint64_t v62 = *(void *)v9;
LABEL_158:
          double v122 = (double)v62;
          goto LABEL_159;
        case 1u:
          a4.n128_u64[0] = *(void *)v9;
          double v122 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_159:
          if (a4.n128_f64[0] != v122) {
            goto LABEL_76;
          }
          goto LABEL_168;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          a4.n128_f64[0] = vabdd_f64((double)*((int *)v9 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v9 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_167;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v10 = v9[12];
      if (v10 - 3 < 7 || v10 < 2) {
        goto LABEL_76;
      }
      if (v10 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v12 = *(void *)v9;
      int v13 = *(char *)(*(void *)v9 + 31);
      uint64_t v14 = *(unsigned __int8 *)(*(void *)v9 + 31);
      size_t v15 = v13 < 0 ? *(void *)(v12 + 16) : v14;
      uint64_t v179 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(void *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v15 != v179) {
        goto LABEL_76;
      }
      unint64_t v180 = (unsigned __int8 *)(v12 + 8);
      if ((v14 & 0x80) != 0) {
        unint64_t v180 = *(unsigned __int8 **)v180;
      }
      v181 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        v181 = *(unsigned __int8 **)v181;
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(v180, v181, v15)) {
          goto LABEL_76;
        }
      }
      else if (v15)
      {
        while (*v180 == *v181)
        {
          ++v180;
          ++v181;
          if (!--v15) {
            goto LABEL_168;
          }
        }
LABEL_76:
        uint64_t v65 = (unsigned __int8 *)(*a3 + 16 * v7);
        switch(byte_268081F8C)
        {
          case 0:
            switch(v65[12])
            {
              case 0u:
                if (*(void *)v65 == turi::FLEX_UNDEFINED) {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              case 1u:
                a4.n128_u64[0] = *(void *)v65;
                uint64_t v118 = turi::FLEX_UNDEFINED;
                goto LABEL_176;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v65 << 8) >> 8 && !*((_DWORD *)v65 + 2)) {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 1:
            switch(v65[12])
            {
              case 0u:
                a4.n128_u64[0] = turi::FLEX_UNDEFINED;
                uint64_t v118 = *(void *)v65;
LABEL_176:
                double v124 = (double)v118;
                goto LABEL_181;
              case 1u:
                a4.n128_u64[0] = *(void *)v65;
                double v124 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_181:
                if (a4.n128_f64[0] == v124) {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                a4.n128_f64[0] = vabdd_f64((double)*((int *)v65 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v65 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_185;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 2:
            unsigned int v66 = v65[12];
            if (v66 - 3 < 7 || v66 < 2) {
              goto LABEL_313;
            }
            if (v66 != 2) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            uint64_t v68 = *(void *)v65;
            int v69 = *(char *)(*(void *)v65 + 31);
            uint64_t v70 = *(unsigned __int8 *)(*(void *)v65 + 31);
            size_t v71 = v69 < 0 ? *(void *)(v68 + 16) : v70;
            uint64_t v182 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
                 ? *(void *)(turi::FLEX_UNDEFINED + 16)
                 : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v71 != v182) {
              goto LABEL_313;
            }
            v183 = (unsigned __int8 *)(v68 + 8);
            if ((v70 & 0x80) != 0) {
              v183 = *(unsigned __int8 **)v183;
            }
            v184 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
              v184 = *(unsigned __int8 **)v184;
            }
            if ((v70 & 0x80) == 0)
            {
              if (!v71) {
                return ((v8 >> v7) & 1) == 0;
              }
              do
              {
                if (*v183 != *v184) {
                  goto LABEL_313;
                }
                ++v183;
                ++v184;
                --v71;
              }
              while (v71);
              return ((v8 >> v7) & 1) == 0;
            }
            if (!memcmp(v183, v184, v71)) {
              return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 3:
            unsigned int v72 = v65[12];
            if (v72 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v72 != 3) {
              goto LABEL_313;
            }
            uint64_t v75 = *(void *)v65 + 8;
            unint64_t v73 = *(unint64_t **)v75;
            atomic_ullong *volatile v74 = *(unint64_t **)(v75 + 8);
            unint64_t v76 = ((uint64_t)v74 - *(void *)v75) >> 3;
            long long v77 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v76 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v77) >> 3) {
              goto LABEL_313;
            }
            if (v74 == v73) {
              return ((v8 >> v7) & 1) == 0;
            }
            if (v76 <= 1) {
              unint64_t v76 = 1;
            }
            while (1)
            {
              a4.n128_u64[0] = *v73;
              if (*(double *)v73 != *v77) {
                break;
              }
              ++v77;
              ++v73;
              if (!--v76) {
                return ((v8 >> v7) & 1) == 0;
              }
            }
            goto LABEL_313;
          case 4:
            unsigned int v78 = v65[12];
            if (v78 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v78 == 4
              && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(void *)v65 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
            {
              return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 5:
            unsigned int v119 = v65[12];
            if (v119 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v119 == 5
              && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(void *)v65 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 6:
            switch(v65[12])
            {
              case 0u:
                if (*(void *)v65 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268081F88) {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              case 1u:
                a4.n128_f64[0] = vabdd_f64(*(double *)v65, (double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_185:
                if (a4.n128_f64[0] < 0.0000005) {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (((turi::FLEX_UNDEFINED ^ *(void *)v65) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v65 + 2) == dword_268081F88)
                {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7:
            unsigned int v120 = v65[12];
            if (v120 < 7 || v120 - 8 < 2) {
              goto LABEL_313;
            }
            if (v120 != 7) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return ((v8 >> v7) & 1) == 0;
          case 8:
            unsigned int v121 = v65[12];
            if (v121 < 8) {
              goto LABEL_313;
            }
            if (v121 != 8)
            {
              if (v121 != 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_313;
            }
            if (!turi::image_type::operator==(*(void *)v65 + 8, turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_313;
            }
            return ((v8 >> v7) & 1) == 0;
          case 9:
            unsigned int v79 = v65[12];
            if (v79 < 9) {
              goto LABEL_313;
            }
            if (v79 != 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            uint64_t v80 = turi::FLEX_UNDEFINED;
            unint64_t v81 = *(void **)v65;
            if (turi::FLEX_UNDEFINED == *(void *)v65) {
              return ((v8 >> v7) & 1) == 0;
            }
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v81 + 1), turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_313;
            }
            uint64_t v83 = (char *)v81[3];
            atomic_ullong *volatile v82 = (char *)v81[4];
            uint64_t v84 = v82 - v83;
            if (v82 == v83) {
              return ((v8 >> v7) & 1) == 0;
            }
            if (!v81[1]) {
              return ((v8 >> v7) & 1) == 0;
            }
            uint64_t v85 = 1;
            do
            {
              uint64_t v86 = *(void *)v83;
              v83 += 8;
              v85 *= v86;
            }
            while (v83 != v82);
            if (!v85) {
              return ((v8 >> v7) & 1) == 0;
            }
            uint64_t v262 = 0;
            std::vector<unsigned long>::vector(&v263, v84 >> 3, &v262);
            unint64_t v87 = v263;
            long long v88 = v264;
            uint64_t v89 = **(void **)(v80 + 8);
            uint64_t v90 = (char *)v264 - (char *)v263;
            unint64_t v91 = v264 - v263;
            unint64_t v92 = v91 - 1;
            if (v91 <= 1) {
              uint64_t v93 = 1;
            }
            else {
              uint64_t v93 = v264 - v263;
            }
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        do
        {
          if (v88 == v87)
          {
            uint64_t v101 = 0;
            double v102 = *(double *)(*(void *)v81[1] + 8 * v81[9]);
          }
          else
          {
            uint64_t v94 = 0;
            pthread_mutex_t v95 = (uint64_t *)v81[6];
            uint64_t v96 = v87;
            uint64_t v97 = v93;
            do
            {
              uint64_t v99 = *v96++;
              uint64_t v98 = v99;
              uint64_t v100 = *v95++;
              v94 += v100 * v98;
              --v97;
            }
            while (v97);
            uint64_t v101 = 0;
            double v102 = *(double *)(*(void *)v81[1] + 8 * (v81[9] + v94));
            uint64_t v103 = *(uint64_t **)(v80 + 48);
            uint64_t v104 = v87;
            uint64_t v105 = v93;
            do
            {
              uint64_t v107 = *v104++;
              uint64_t v106 = v107;
              uint64_t v108 = *v103++;
              v101 += v108 * v106;
              --v105;
            }
            while (v105);
          }
          double v109 = *(double *)(v89 + 8 * (*(void *)(v80 + 72) + v101));
          if (v102 != v109) {
            break;
          }
          uint64_t v110 = v91;
          unint64_t v111 = v91 - 1;
          if (v90 >= 1)
          {
            uint64_t v112 = v81[3];
            unint64_t v113 = v87[v92] + 1;
            v87[v92] = v113;
            unint64_t v114 = (v90 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v115 = v91 - 1;
            if (v113 >= *(void *)(v112 + 8 * v92))
            {
              do
              {
                *(uint64_t *)((char *)v87 + v114 + 8) = 0;
                if (v115 <= 0)
                {
                  v264 = v87;
                  operator delete(v87);
                  return ((v8 >> v7) & 1) == 0;
                }
                --v115;
                unint64_t v116 = *(uint64_t *)((char *)v87 + v114) + 1;
                *(uint64_t *)((char *)v87 + v114) = v116;
                unint64_t v117 = *(void *)(v112 + v114);
                v114 -= 8;
              }
              while (v116 >= v117);
              uint64_t v110 = 1;
              if ((v115 & 0x8000000000000000) == 0) {
                continue;
              }
              break;
            }
            uint64_t v110 = 1;
            unint64_t v111 = v91 - 1;
          }
          if ((v111 & 0x8000000000000000) != 0) {
            break;
          }
        }
        while (v110);
        if (v87)
        {
          v264 = v87;
          operator delete(v87);
        }
        if (v102 != v109)
        {
LABEL_313:
          uint64_t v190 = *a3 + 16 * v7;
          uint64_t v191 = *a2 + 16 * v7;
          switch(*(unsigned char *)(v190 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v191 + 12))
              {
                case 0:
                  if (*(void *)v191 < *(void *)v190) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v191;
                  double v240 = (double)*(uint64_t *)v190;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  if (*(void *)v190 > (uint64_t)(*(void *)v191 << 8) >> 8) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v191 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(void *)v190;
                  if (*(double *)v190 > (double)*(uint64_t *)v191) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v191;
                  double v240 = *(double *)v190;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  double v240 = *(double *)v190;
                  a4.n128_f64[0] = (double)*(int *)(v191 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(void *)v191 << 8) >> 8);
LABEL_423:
                  if (a4.n128_f64[0] < v240) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v192 = *(unsigned __int8 *)(v191 + 12);
              if (v192 - 3 < 7 || v192 < 2) {
                goto LABEL_355;
              }
              if (v192 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              unint64_t v194 = *(void *)v191;
              if (*(char *)(v194 + 31) < 0)
              {
                v195 = *(const void **)(v194 + 8);
                size_t v196 = *(void *)(v194 + 16);
              }
              else
              {
                v195 = (const void *)(v194 + 8);
                size_t v196 = *(unsigned __int8 *)(v194 + 31);
              }
              double v244 = *(double *)v190;
              v245 = (const void *)(*(void *)&v244 + 8);
              size_t v246 = *(unsigned __int8 *)(*(void *)&v244 + 31);
              v248 = *(const void **)(*(void *)&v244 + 8);
              size_t v247 = *(void *)(*(void *)&v244 + 16);
              if ((v246 & 0x80u) == 0) {
                size_t v249 = v246;
              }
              else {
                size_t v249 = v247;
              }
              if ((v246 & 0x80u) == 0) {
                v250 = v245;
              }
              else {
                v250 = v248;
              }
              if (v249 >= v196) {
                size_t v251 = v196;
              }
              else {
                size_t v251 = v249;
              }
              int v252 = memcmp(v195, v250, v251);
              BOOL v253 = v196 < v249;
              if (v252) {
                BOOL v253 = v252 < 0;
              }
              if (v253) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_356;
            case 3:
              unsigned int v197 = *(unsigned __int8 *)(v191 + 12);
              if (v197 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v197 != 3) {
                goto LABEL_355;
              }
              double v198 = *(double *)v190;
              unint64_t v199 = *(unint64_t **)(*(void *)v191 + 8);
              uint64_t v200 = *(void *)(*(void *)v191 + 16);
              uint64_t v201 = *(double **)(*(void *)&v198 + 8);
              unint64_t v202 = (uint64_t)(*(void *)(*(void *)&v198 + 16) - (void)v201) >> 3;
              uint64_t v203 = v200 - (void)v199;
              BOOL v255 = v203 == 0;
              unint64_t v204 = v203 >> 3;
              if (v255) {
                goto LABEL_339;
              }
              if (v204 <= 1) {
                uint64_t v205 = 1;
              }
              else {
                uint64_t v205 = v204;
              }
              unint64_t v206 = v202;
              break;
            case 4:
              unsigned int v207 = *(unsigned __int8 *)(v191 + 12);
              if (v207 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v207 != 4) {
                goto LABEL_355;
              }
              if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v263, (uint64_t *)(*(void *)v191 + 8), (void *)(*(void *)v190 + 8)))
              {
                return (v8 >> v7) & 1;
              }
              goto LABEL_356;
            case 5:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 6:
              switch(*(unsigned char *)(v191 + 12))
              {
                case 0:
                  if (*(void *)v191 < (uint64_t)(*(void *)v190 << 8) >> 8) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v191;
                  if ((double)*(int *)(v190 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v190 << 8) >> 8) > *(double *)v191) {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  uint64_t v241 = (uint64_t)(*(void *)v191 << 8) >> 8;
                  if (v241 < (uint64_t)(*(void *)v190 << 8) >> 8
                    || v241 == (uint64_t)(*(void *)v190 << 8) >> 8 && *(_DWORD *)(v191 + 8) < *(_DWORD *)(v190 + 8))
                  {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 8:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 9:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_355:
              turi::flexible_type_fail(0);
              goto LABEL_356;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v206)
          {
            a4.n128_u64[0] = *v199;
            if (*(double *)v199 > *v201) {
              break;
            }
            if (*(double *)v199 < *v201) {
              return (v8 >> v7) & 1;
            }
            --v206;
            ++v199;
            ++v201;
            if (!--v205)
            {
LABEL_339:
              if (v204 < v202) {
                return (v8 >> v7) & 1;
              }
              break;
            }
          }
LABEL_356:
          uint64_t v208 = *a3 + 16 * v7;
          uint64_t v209 = *a2 + 16 * v7;
          switch(*(unsigned char *)(v208 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v209 + 12))
              {
                case 0:
                  if (*(void *)v209 > *(void *)v208) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v209;
                  double v242 = (double)*(uint64_t *)v208;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  if (*(void *)v208 < (uint64_t)(*(void *)v209 << 8) >> 8) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v209 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(void *)v208;
                  if (*(double *)v208 < (double)*(uint64_t *)v209) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v209;
                  double v242 = *(double *)v208;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  double v242 = *(double *)v208;
                  a4.n128_f64[0] = (double)*(int *)(v209 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(void *)v209 << 8) >> 8);
LABEL_436:
                  if (a4.n128_f64[0] > v242) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v210 = *(unsigned __int8 *)(v209 + 12);
              if (v210 - 3 < 7 || v210 < 2) {
                goto LABEL_415;
              }
              if (v210 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              double v212 = *(double *)v208;
              unint64_t v213 = *(void *)v209;
              v216 = *(const void **)(v213 + 8);
              unint64_t v214 = v213 + 8;
              v215 = v216;
              int v217 = *(char *)(v214 + 23);
              uint64_t v220 = *(const void **)(*(void *)&v212 + 8);
              uint64_t v218 = *(void *)&v212 + 8;
              long long v219 = v220;
              int v221 = *(char *)(v218 + 23);
              if (v221 >= 0) {
                size_t v222 = *(unsigned __int8 *)(v218 + 23);
              }
              else {
                size_t v222 = *(void *)(v218 + 8);
              }
              if (v221 >= 0) {
                v223 = (const void *)v218;
              }
              else {
                v223 = v219;
              }
              if (v217 >= 0) {
                size_t v224 = *(unsigned __int8 *)(v214 + 23);
              }
              else {
                size_t v224 = *(void *)(v214 + 8);
              }
              if (v217 >= 0) {
                v225 = (const void *)v214;
              }
              else {
                v225 = v215;
              }
              if (v224 >= v222) {
                size_t v226 = v222;
              }
              else {
                size_t v226 = v224;
              }
              int v227 = memcmp(v223, v225, v226);
              BOOL v228 = v222 < v224;
              if (v227) {
                BOOL v228 = v227 < 0;
              }
              if (v228) {
                return ((v8 >> v7) & 1) == 0;
              }
              goto LABEL_416;
            case 3:
              unsigned int v230 = *(unsigned __int8 *)(v209 + 12);
              if (v230 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v230 != 3) {
                goto LABEL_415;
              }
              double v231 = *(double *)v208;
              v232 = *(unint64_t **)(*(void *)v209 + 8);
              uint64_t v233 = *(void *)(*(void *)v209 + 16);
              v234 = *(double **)(*(void *)&v231 + 8);
              unint64_t v235 = (uint64_t)(*(void *)(*(void *)&v231 + 16) - (void)v234) >> 3;
              uint64_t v236 = v233 - (void)v232;
              BOOL v255 = v236 == 0;
              unint64_t v237 = v236 >> 3;
              if (v255) {
                goto LABEL_405;
              }
              if (v237 <= 1) {
                uint64_t v238 = 1;
              }
              else {
                uint64_t v238 = v237;
              }
              unint64_t v239 = v235;
              break;
            case 4:
              unsigned int v229 = *(unsigned __int8 *)(v209 + 12);
              if (v229 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v229 != 4) {
                goto LABEL_415;
              }
              if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v263, (uint64_t *)(*(void *)v209 + 8), (void *)(*(void *)v208 + 8)))
              {
                return ((v8 >> v7) & 1) == 0;
              }
              goto LABEL_416;
            case 5:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 6:
              switch(*(unsigned char *)(v209 + 12))
              {
                case 0:
                  if (*(void *)v209 > (uint64_t)(*(void *)v208 << 8) >> 8) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v209;
                  if ((double)*(int *)(v208 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v208 << 8) >> 8) < *(double *)v209) {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  uint64_t v243 = (uint64_t)(*(void *)v209 << 8) >> 8;
                  if (v243 > (uint64_t)(*(void *)v208 << 8) >> 8
                    || v243 == (uint64_t)(*(void *)v208 << 8) >> 8 && *(_DWORD *)(v209 + 8) > *(_DWORD *)(v208 + 8))
                  {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 8:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 9:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_415:
              turi::flexible_type_fail(0);
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v239)
          {
            a4.n128_u64[0] = *v232;
            if (*(double *)v232 > *v234) {
              break;
            }
            if (*(double *)v232 < *v234) {
              goto LABEL_416;
            }
            --v239;
            ++v232;
            ++v234;
            if (!--v238)
            {
LABEL_405:
              if (v237 <= v235) {
                goto LABEL_416;
              }
              return ((v8 >> v7) & 1) == 0;
            }
          }
        }
        return ((v8 >> v7) & 1) == 0;
      }
LABEL_168:
      unint64_t v123 = (unsigned __int8 *)(*a3 + 16 * v7);
      switch(byte_268081F8C)
      {
        case 0:
          switch(v123[12])
          {
            case 0u:
              if (*(void *)v123 != turi::FLEX_UNDEFINED) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            case 1u:
              a4.n128_u64[0] = *(void *)v123;
              uint64_t v125 = turi::FLEX_UNDEFINED;
              goto LABEL_280;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              if (turi::FLEX_UNDEFINED != (uint64_t)(*(void *)v123 << 8) >> 8 || *((_DWORD *)v123 + 2)) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(v123[12])
          {
            case 0u:
              a4.n128_u64[0] = turi::FLEX_UNDEFINED;
              uint64_t v125 = *(void *)v123;
LABEL_280:
              double v185 = (double)v125;
              goto LABEL_281;
            case 1u:
              a4.n128_u64[0] = *(void *)v123;
              double v185 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_281:
              if (a4.n128_f64[0] != v185) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              double v186 = (double)*((int *)v123 + 2) / 1000000.0
                   + (double)((uint64_t)(*(void *)v123 << 8) >> 8)
                   - *(double *)&turi::FLEX_UNDEFINED;
              goto LABEL_289;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v126 = v123[12];
          if (v126 == 2)
          {
            uint64_t v127 = *(void *)v123;
            int v128 = *(char *)(*(void *)v123 + 31);
            size_t v129 = *(unsigned __int8 *)(*(void *)v123 + 31);
            if (v128 < 0) {
              size_t v130 = *(void *)(v127 + 16);
            }
            else {
              size_t v130 = v129;
            }
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
              uint64_t v187 = *(void *)(turi::FLEX_UNDEFINED + 16);
            }
            else {
              uint64_t v187 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            }
            if (v130 == v187)
            {
              unint64_t v188 = (unsigned __int8 *)(v127 + 8);
              if ((v129 & 0x80) != 0) {
                unint64_t v188 = *(unsigned __int8 **)v188;
              }
              v189 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
              if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
                v189 = *(unsigned __int8 **)v189;
              }
              if ((v129 & 0x80) != 0)
              {
                if (!memcmp(v188, v189, v130)) {
                  goto LABEL_416;
                }
              }
              else
              {
                if (!v130) {
                  goto LABEL_416;
                }
                while (*v188 == *v189)
                {
                  ++v188;
                  ++v189;
                  if (!--v130) {
                    goto LABEL_416;
                  }
                }
              }
            }
          }
          else
          {
            BOOL v255 = v126 > 9 || v126 == 2;
            if (v255) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          }
          return (v8 >> v7) & 1;
        case 3:
          unsigned int v131 = v123[12];
          if (v131 == 3)
          {
            uint64_t v134 = *(void *)v123 + 8;
            unint64_t v132 = *(unint64_t **)v134;
            uint64_t v133 = *(unint64_t **)(v134 + 8);
            unint64_t v135 = ((uint64_t)v133 - *(void *)v134) >> 3;
            std::string::size_type v136 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v135 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v136) >> 3)
            {
              if (v133 == v132) {
                goto LABEL_416;
              }
              if (v135 <= 1) {
                unint64_t v135 = 1;
              }
              while (1)
              {
                a4.n128_u64[0] = *v132;
                if (*(double *)v132 != *v136) {
                  break;
                }
                ++v136;
                ++v132;
                if (!--v135) {
                  goto LABEL_416;
                }
              }
            }
          }
          else if (v131 > 9 || v131 == 3)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v8 >> v7) & 1;
        case 4:
          unsigned int v137 = v123[12];
          if (v137 == 4)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(void *)v123 + 8), (void *)(turi::FLEX_UNDEFINED + 8)))goto LABEL_416; {
          }
            }
          else if (v137 > 9 || v137 == 4)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v8 >> v7) & 1;
        case 5:
          unsigned int v138 = v123[12];
          if (v138 == 5)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(void *)v123 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              goto LABEL_416;
            }
          }
          else if (v138 > 9 || v138 == 5)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v8 >> v7) & 1;
        case 6:
          switch(v123[12])
          {
            case 0u:
              if (*(void *)v123 != turi::FLEX_UNDEFINED << 8 >> 8 || dword_268081F88) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            case 1u:
              double v186 = *(double *)v123 - ((double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_289:
              a4.n128_f64[0] = fabs(v186);
              if (a4.n128_f64[0] >= 0.0000005) {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(void *)v123) & 0xFFFFFFFFFFFFFFLL) != 0
                || *((_DWORD *)v123 + 2) != dword_268081F88)
              {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v139 = v123[12];
          if (v139 == 7) {
            goto LABEL_416;
          }
          if (v139 > 9 || v139 == 7) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v8 >> v7) & 1;
        case 8:
          unsigned int v140 = v123[12];
          if (v140 == 8)
          {
            if (turi::image_type::operator==(*(void *)v123 + 8, turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_416;
            }
          }
          else if (v140 > 9 || v140 == 8)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v8 >> v7) & 1;
        case 9:
          unsigned int v141 = v123[12];
          if (v141 != 9)
          {
            if (v141 >= 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return (v8 >> v7) & 1;
          }
          uint64_t v142 = turi::FLEX_UNDEFINED;
          uint64_t v143 = *(void **)v123;
          if (turi::FLEX_UNDEFINED == *(void *)v123) {
            goto LABEL_416;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v143 + 1), turi::FLEX_UNDEFINED + 8)) {
            return (v8 >> v7) & 1;
          }
          uint64_t v145 = (char *)v143[3];
          uint64_t v144 = (char *)v143[4];
          uint64_t v146 = v144 - v145;
          if (v144 == v145) {
            goto LABEL_416;
          }
          if (!v143[1]) {
            goto LABEL_416;
          }
          uint64_t v147 = 1;
          do
          {
            uint64_t v148 = *(void *)v145;
            v145 += 8;
            v147 *= v148;
          }
          while (v145 != v144);
          if (!v147) {
            goto LABEL_416;
          }
          uint64_t v262 = 0;
          std::vector<unsigned long>::vector(&v263, v146 >> 3, &v262);
          unint64_t v149 = v263;
          uint64_t v150 = v264;
          uint64_t v151 = **(void **)(v142 + 8);
          uint64_t v152 = (char *)v264 - (char *)v263;
          unint64_t v153 = v264 - v263;
          unint64_t v154 = v153 - 1;
          if (v153 <= 1) {
            uint64_t v155 = 1;
          }
          else {
            uint64_t v155 = v264 - v263;
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 3:
      unsigned int v16 = v9[12];
      if (v16 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v16 != 3) {
        goto LABEL_76;
      }
      uint64_t v19 = *(void *)v9 + 8;
      uint64_t v17 = *(unint64_t **)v19;
      uint64_t v18 = *(unint64_t **)(v19 + 8);
      unint64_t v20 = ((uint64_t)v18 - *(void *)v19) >> 3;
      unint64_t v21 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v20 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v21) >> 3) {
        goto LABEL_76;
      }
      if (v18 == v17) {
        goto LABEL_168;
      }
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      while (1)
      {
        a4.n128_u64[0] = *v17;
        if (*(double *)v17 != *v21) {
          goto LABEL_76;
        }
        ++v21;
        ++v17;
        if (!--v20) {
          goto LABEL_168;
        }
      }
    case 4:
      unsigned int v22 = v9[12];
      if (v22 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v22 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(void *)v9 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 5:
      unsigned int v63 = v9[12];
      if (v63 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v63 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(void *)v9 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 6:
      switch(v9[12])
      {
        case 0u:
          if (*(void *)v9 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268081F88) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 1u:
          a4.n128_f64[0] = vabdd_f64(*(double *)v9, (double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_167:
          if (a4.n128_f64[0] < 0.0000005) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(void *)v9) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)v9 + 2) == dword_268081F88)
          {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v23 = v9[12];
      if (v23 < 7 || v23 - 8 < 2) {
        goto LABEL_76;
      }
      if (v23 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_168;
    case 8:
      unsigned int v64 = v9[12];
      if (v64 < 8) {
        goto LABEL_76;
      }
      if (v64 != 8)
      {
        if (v64 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_76;
      }
      if (!turi::image_type::operator==(*(void *)v9 + 8, turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_76;
      }
      goto LABEL_168;
    case 9:
      unsigned int v24 = v9[12];
      if (v24 < 9) {
        goto LABEL_76;
      }
      if (v24 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v25 = turi::FLEX_UNDEFINED;
      __n128 v26 = *(void **)v9;
      if (turi::FLEX_UNDEFINED == *(void *)v9) {
        goto LABEL_168;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_76;
      }
      int v28 = (char *)v26[3];
      char v27 = (char *)v26[4];
      uint64_t v29 = v27 - v28;
      if (v27 == v28) {
        goto LABEL_168;
      }
      if (!v26[1]) {
        goto LABEL_168;
      }
      uint64_t v30 = 1;
      do
      {
        uint64_t v31 = *(void *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30) {
        goto LABEL_168;
      }
      uint64_t v262 = 0;
      std::vector<unsigned long>::vector(&v263, v29 >> 3, &v262);
      long long v32 = v263;
      uint64_t v33 = v264;
      uint64_t v34 = **(void **)(v25 + 8);
      uint64_t v35 = (char *)v264 - (char *)v263;
      unint64_t v36 = v264 - v263;
      unint64_t v37 = v36 - 1;
      if (v36 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v264 - v263;
      }
      while (2)
      {
        if (v33 == v32)
        {
          uint64_t v46 = 0;
          double v47 = *(double *)(*(void *)v26[1] + 8 * v26[9]);
        }
        else
        {
          uint64_t v39 = 0;
          uint64_t v40 = (uint64_t *)v26[6];
          uint64_t v41 = v32;
          uint64_t v42 = v38;
          do
          {
            uint64_t v44 = *v41++;
            uint64_t v43 = v44;
            uint64_t v45 = *v40++;
            v39 += v45 * v43;
            --v42;
          }
          while (v42);
          uint64_t v46 = 0;
          double v47 = *(double *)(*(void *)v26[1] + 8 * (v26[9] + v39));
          uint64_t v48 = *(uint64_t **)(v25 + 48);
          uint64_t v49 = v32;
          uint64_t v50 = v38;
          do
          {
            uint64_t v52 = *v49++;
            uint64_t v51 = v52;
            uint64_t v53 = *v48++;
            v46 += v53 * v51;
            --v50;
          }
          while (v50);
        }
        double v54 = *(double *)(v34 + 8 * (*(void *)(v25 + 72) + v46));
        if (v47 == v54)
        {
          uint64_t v55 = v36;
          uint64_t v56 = v36 - 1;
          if (v35 < 1) {
            goto LABEL_59;
          }
          uint64_t v57 = v26[3];
          unint64_t v58 = v32[v37] + 1;
          v32[v37] = v58;
          unint64_t v59 = (v35 & 0xFFFFFFFFFFFFFFF8) - 16;
          uint64_t v56 = v36 - 1;
          if (v58 < *(void *)(v57 + 8 * v37))
          {
            uint64_t v55 = 1;
            uint64_t v56 = v36 - 1;
LABEL_59:
            if (v56 < 0 || !v55) {
              goto LABEL_61;
            }
            continue;
          }
          while (1)
          {
            *(uint64_t *)((char *)v32 + v59 + 8) = 0;
            if (v56 <= 0) {
              break;
            }
            --v56;
            unint64_t v60 = *(uint64_t *)((char *)v32 + v59) + 1;
            *(uint64_t *)((char *)v32 + v59) = v60;
            unint64_t v61 = *(void *)(v57 + v59);
            v59 -= 8;
            if (v60 < v61)
            {
              uint64_t v55 = 1;
              goto LABEL_59;
            }
          }
          v264 = v32;
          operator delete(v32);
        }
        else
        {
LABEL_61:
          if (v32)
          {
            v264 = v32;
            operator delete(v32);
          }
          if (v47 != v54) {
            goto LABEL_76;
          }
        }
        goto LABEL_168;
      }
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v150 == v149)
    {
      uint64_t v163 = 0;
      double v164 = *(double *)(*(void *)v143[1] + 8 * v143[9]);
    }
    else
    {
      uint64_t v156 = 0;
      uint64_t v157 = (uint64_t *)v143[6];
      uint64_t v158 = v149;
      uint64_t v159 = v155;
      do
      {
        uint64_t v161 = *v158++;
        uint64_t v160 = v161;
        uint64_t v162 = *v157++;
        v156 += v162 * v160;
        --v159;
      }
      while (v159);
      uint64_t v163 = 0;
      double v164 = *(double *)(*(void *)v143[1] + 8 * (v143[9] + v156));
      unint64_t v165 = *(uint64_t **)(v142 + 48);
      uint64_t v166 = v149;
      uint64_t v167 = v155;
      do
      {
        uint64_t v169 = *v166++;
        uint64_t v168 = v169;
        uint64_t v170 = *v165++;
        v163 += v170 * v168;
        --v167;
      }
      while (v167);
    }
    double v171 = *(double *)(v151 + 8 * (*(void *)(v142 + 72) + v163));
    if (v164 != v171) {
      break;
    }
    uint64_t v172 = v153;
    uint64_t v173 = v153 - 1;
    if (v152 >= 1)
    {
      uint64_t v174 = v143[3];
      unint64_t v175 = v149[v154] + 1;
      v149[v154] = v175;
      unint64_t v176 = (v152 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v173 = v153 - 1;
      if (v175 >= *(void *)(v174 + 8 * v154))
      {
        while (1)
        {
          *(uint64_t *)((char *)v149 + v176 + 8) = 0;
          if (v173 <= 0) {
            break;
          }
          --v173;
          unint64_t v177 = *(uint64_t *)((char *)v149 + v176) + 1;
          *(uint64_t *)((char *)v149 + v176) = v177;
          unint64_t v178 = *(void *)(v174 + v176);
          v176 -= 8;
          if (v177 < v178)
          {
            uint64_t v172 = 1;
            goto LABEL_245;
          }
        }
        v264 = v149;
        operator delete(v149);
LABEL_416:
        if (++v7 >= a1[1]) {
          return 0;
        }
        goto LABEL_3;
      }
      uint64_t v172 = 1;
      uint64_t v173 = v153 - 1;
    }
LABEL_245:
    ;
  }
  while ((v173 & 0x8000000000000000) == 0 && v172);
  if (v149)
  {
    v264 = v149;
    operator delete(v149);
  }
  if (v164 == v171) {
    goto LABEL_416;
  }
  return (v8 >> v7) & 1;
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            int v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            size_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

{
  atomic_ullong *volatile v4;
  atomic_ullong *volatile v5;
  uint64_t v6;
  atomic_ullong *volatile v7;
  void *v8;
  atomic_ullong *volatile v9;
  atomic_ullong *volatile v10;
  unsigned int v11;
  atomic_ullong *volatile v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  void **v21;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v21 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v21 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            int v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            size_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    LODWORD(v16) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(a1 + 12) = v16;
    uint64_t v17 = v16 > 9;
    uint64_t v18 = (1 << v16) & 0x33C;
    if (!v17 && v18 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, __n128 a6)
{
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  size_t v15 = a4;
  uint64_t v16 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(a1, a2, a3, a5, a6);
  uint64_t result = turi::query_eval::less_than_full_function::compare(a5, (void *)(*a4 + 8), (void *)(*a3 + 8), v11);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
    uint64_t result = turi::query_eval::less_than_full_function::compare(a5, (void *)(*v16 + 8), (void *)(*a2 + 8), v13);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v17, &v16);
      uint64_t result = turi::query_eval::less_than_full_function::compare(a5, (void *)(*v17 + 8), (void *)(*(void *)a1 + 8), v14);
      if (result) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v18, &v17);
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6, __n128 a7)
{
  unint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v19 = a4;
  unint64_t v20 = a3;
  uint64_t v18 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(a1, a2, a3, a4, a6, a7);
  uint64_t result = turi::query_eval::less_than_full_function::compare(a6, (void *)(*a5 + 8), (void *)(*a4 + 8), v13);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v19, &v18);
    uint64_t result = turi::query_eval::less_than_full_function::compare(a6, (void *)(*v19 + 8), (void *)(*a3 + 8), v15);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v20, &v19);
      uint64_t result = turi::query_eval::less_than_full_function::compare(a6, (void *)(*v20 + 8), (void *)(*a2 + 8), v16);
      if (result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v21, &v20);
        uint64_t result = turi::query_eval::less_than_full_function::compare(a6, (void *)(*v21 + 8), (void *)(*(void *)a1 + 8), v17);
        if (result) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v22, &v21);
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, __n128 a5)
{
  __n128 v17 = a1;
  if (a1 != (uint64_t *)a2)
  {
    unint64_t v8 = a1;
    uint64_t v9 = (a2 - (uint64_t)a1) >> 5;
    if (a2 - (uint64_t)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v8, a4, v9, v12, a5);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    uint64_t v16 = a2;
    if (a2 != a3)
    {
      uint64_t v13 = a2;
      do
      {
        if (turi::query_eval::less_than_full_function::compare(a4, (void *)(*(void *)v13 + 8), (void *)(*v17 + 8), a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v16, &v17);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v17, a4, v9, (uint64_t)v17, v14);
        }
        uint64_t v13 = v16 + 32;
        uint64_t v16 = v13;
      }
      while (v13 != a3);
      unint64_t v8 = v17;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v8, a2, a4);
    return v16;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = a4;
    uint64_t v7 = result;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (a4 - result) >> 5)
    {
      uint64_t v11 = (a4 - result) >> 4;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = (uint64_t *)(result + 32 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3
        && turi::query_eval::less_than_full_function::compare(a2, (void *)(*v13 + 8), (void *)(v13[4] + 8), a5))
      {
        v13 += 4;
        uint64_t v12 = v14;
      }
      uint64_t result = turi::query_eval::less_than_full_function::compare(a2, (void *)(*v13 + 8), (void *)(*(void *)v6 + 8), a5);
      if ((result & 1) == 0)
      {
        *(void *)&void v18[5] = *(void *)(v6 + 5);
        *(void *)uint64_t v18 = *(void *)v6;
        v18[12] = *(unsigned char *)(v6 + 12);
        *(unsigned char *)(v6 + 12) = 0;
        long long v19 = *(_OWORD *)(v6 + 16);
        do
        {
          uint64_t v15 = (uint64_t)v13;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v6, v13);
          if (v8 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          uint64_t v13 = (uint64_t *)(v7 + 32 * v17);
          uint64_t v12 = 2 * v12 + 2;
          if (v12 >= a3)
          {
            uint64_t v12 = v17;
          }
          else if (turi::query_eval::less_than_full_function::compare(a2, (void *)(*v13 + 8), (void *)(v13[4] + 8), v16))
          {
            v13 += 4;
          }
          else
          {
            uint64_t v12 = v17;
          }
          uint64_t v6 = v15;
        }
        while (!turi::query_eval::less_than_full_function::compare(a2, (void *)(*v13 + 8), (void *)(*(void *)v18 + 8), v16));
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v15, (uint64_t *)v18);
        return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
      }
    }
  }
  return result;
}

void sub_223FE615C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 - result >= 33)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unint64_t)(a2 - result) >> 5;
    uint64_t v6 = (__n128 *)(result + 16);
    uint64_t v7 = (uint64_t *)(a2 - 32);
    do
    {
      *(void *)&v12[5] = *(void *)(v4 + 5);
      *(void *)uint64_t v12 = *(void *)v4;
      v12[12] = *(unsigned char *)(v4 + 12);
      *(unsigned char *)(v4 + 12) = 0;
      __n128 v13 = *v6;
      uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v4, a3, v5, v13);
      uint64_t v9 = v8;
      if (v7 == v8)
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, (uint64_t *)v12);
      }
      else
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, v7);
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v7, (uint64_t *)v12);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v4, (uint64_t)(v9 + 4), a3, ((uint64_t)v9 - v4 + 32) >> 5, v10);
      }
      uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v12);
      v7 -= 4;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_223FE62A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a3 - 2;
  if (a3 < 2) {
    uint64_t v8 = a3 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    __n128 v10 = (uint64_t *)(a1 + 32 * v7 + 32);
    uint64_t v11 = (2 * v7) | 1;
    uint64_t v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_full_function::compare(a2, (void *)(*v10 + 8), (void *)(*(void *)(a1 + 32 * v7 + 64) + 8), a4))
    {
      v10 += 4;
      uint64_t v11 = v12;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, v10);
    a1 = (uint64_t)v10;
    uint64_t v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t a2, void *a3, uint64_t a4, __n128 a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v5 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    unint64_t v9 = v5 >> 1;
    __n128 v10 = (uint64_t *)(result + 32 * (v5 >> 1));
    uint64_t v11 = (void *)(a2 - 32);
    uint64_t result = turi::query_eval::less_than_full_function::compare(a3, (void *)(*v10 + 8), (void *)(*(void *)(a2 - 32) + 8), a5);
    if (result)
    {
      *(void *)&v14[5] = *(void *)((char *)v11 + 5);
      *(void *)uint64_t v14 = *v11;
      v14[12] = *(unsigned char *)(a2 - 20);
      *(unsigned char *)(a2 - 2CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      long long v15 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v12 = (uint64_t)v10;
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v11, v10);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        __n128 v10 = (uint64_t *)(v8 + 32 * v9);
        uint64_t v11 = (void *)v12;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (void *)(*v10 + 8), (void *)(*(void *)v14 + 8), v13) & 1) != 0);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v14);
      return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v14);
    }
  }
  return result;
}

void sub_223FE6484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (a2[1] - *a2) >> 5;
  if (v4 > a3)
  {
    unint64_t v7 = a3 - 1;
    if (a3 != 1)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      double v10 = (double)v4 / (double)a3;
      do
      {
        unint64_t v11 = (unint64_t)(v10 * (double)v9);
        unint64_t v12 = (a2[1] - *a2) >> 5;
        if (v12 <= v11) {
          unint64_t v11 = v12 - 1;
        }
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*a2 + v8, (uint64_t *)(*a2 + 32 * v11));
        ++v9;
        v8 += 32;
      }
      while (v7 != v9);
      uint64_t v3 = *a2;
      unint64_t v4 = (a2[1] - *a2) >> 5;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v3 + 32 * v7, (uint64_t *)(v3 + 32 * v4 - 32));
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::resize(a2, a3);
  }
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = (result - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (result != v6)
        uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(result - 32);
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__append(a1, v5);
  }
  return result;
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 0;
        *(void *)(v7 + 16) = -1;
        *(void *)(v7 + 24) = -1;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v17[4] = result;
    if (v12) {
      __n128 v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, v12);
    }
    else {
      __n128 v13 = 0;
    }
    long long v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    uint64_t v16 = &v15[32 * a2];
    do
    {
      *(void *)long long v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      *((void *)v15 + 2) = -1;
      *((void *)v15 + 3) = -1;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_223FE6998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v198 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9 == v8)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    unint64_t v11 = (v9 - *a3) >> 5;
LABEL_202:
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a4, v8, v9, v11);
  }
  unint64_t v11 = (v9 - v8) >> 5;
  uint64_t v12 = a3[1] - *a3;
  if (!v12)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_202;
  }
  uint64_t v190 = a4;
  uint64_t v191 = a3;
  uint64_t result = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::vector(a4, v11 + (v12 >> 5));
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (v16 == *a2)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v15 = a2[1];
    uint64_t v17 = v191;
  }
  else
  {
    uint64_t v17 = v191;
    uint64_t v18 = *v191;
    if (v191[1] != *v191)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = (void *)(a1 + 80);
      while (1)
      {
        char v23 = turi::query_eval::less_than_full_function::compare(v22, (void *)(*(void *)(v15 + 32 * v19) + 8), (void *)(*(void *)(v18 + 32 * v20) + 8), v14);
        unsigned int v24 = v191;
        if (v23)
        {
LABEL_7:
          uint64_t v25 = *a2 + 32 * v19;
          uint64_t v26 = *(void *)v25;
          int v27 = *(_DWORD *)(v25 + 8);
          unsigned int v28 = *(unsigned __int8 *)(v25 + 12);
          *(unsigned char *)(v25 + 12) = 0;
          uint64_t v29 = *a2 + 32 * v19;
          uint64_t v30 = *(void *)(v29 + 16);
          uint64_t v31 = *v24;
          if (v20) {
            uint64_t v32 = *(void *)(v31 + 32 * v20 - 16);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v35 = *(void *)(v29 + 24);
          uint64_t v36 = *(void *)(v31 + 32 * v20 + 24);
          BOOL v93 = v36 != 0;
          uint64_t v37 = v36 - 1;
          if (!v93) {
            uint64_t v37 = 0;
          }
          v195 = (uint64_t *)v26;
          LODWORD(v196) = v27;
          BYTE4(v196) = v28;
          if (v28 <= 9 && ((1 << v28) & 0x33C) != 0) {
            atomic_fetch_add((atomic_ullong *volatile)v26, 1uLL);
          }
          v197.i64[0] = v32 + v30;
          v197.i64[1] = v37 + v35;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v190 + 32 * v21, (uint64_t *)&v195);
          uint64_t result = (void *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v195);
          switch(v28)
          {
            case 2u:
              unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && add == 1)
              {
                uint64_t v40 = 0x1012C404EF22A49;
                if (*(char *)(v26 + 31) < 0)
                {
                  operator delete(*(void **)(v26 + 8));
                  uint64_t v40 = 0x1012C404EF22A49;
                }
                goto LABEL_49;
              }
              break;
            case 3u:
              unint64_t v47 = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && v47 == 1)
              {
                uint64_t v48 = *(void **)(v26 + 8);
                uint64_t v40 = 0x1080C409938AC02;
                if (v48)
                {
                  *(void *)(v26 + 16) = v48;
                  operator delete(v48);
                  uint64_t v40 = 0x1080C409938AC02;
                }
                goto LABEL_49;
              }
              break;
            case 4u:
              unint64_t v41 = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && v41 == 1)
              {
                unint64_t v194 = (void **)(v26 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v194);
                goto LABEL_44;
              }
              break;
            case 5u:
              unint64_t v49 = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && v49 == 1)
              {
                unint64_t v194 = (void **)(v26 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v194);
LABEL_44:
                uint64_t v40 = 0x1020C405E66F15BLL;
                goto LABEL_49;
              }
              break;
            case 8u:
              unint64_t v50 = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && v50 == 1)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(v26 + 16));
                unsigned int v46 = -235920773;
                goto LABEL_48;
              }
              break;
            case 9u:
              unint64_t v42 = atomic_fetch_add((atomic_ullong *volatile)v26, 0xFFFFFFFFFFFFFFFFLL);
              if (v26 && v42 == 1)
              {
                uint64_t v43 = *(void **)(v26 + 48);
                if (v43)
                {
                  *(void *)(v26 + 56) = v43;
                  operator delete(v43);
                }
                uint64_t v44 = *(void **)(v26 + 24);
                if (v44)
                {
                  *(void *)(v26 + 32) = v44;
                  operator delete(v44);
                }
                uint64_t v45 = *(std::__shared_weak_count **)(v26 + 16);
                uint64_t v40 = 0x1030C407B73B9F7;
                if (v45)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                  unsigned int v46 = 2071181815;
LABEL_48:
                  uint64_t v40 = v46 | 0x1030C4000000000;
                }
LABEL_49:
                uint64_t result = (void *)MEMORY[0x22A614FA0](v26, v40);
              }
              break;
            default:
              break;
          }
          ++v19;
        }
        else
        {
          uint64_t v33 = *v191 + 32 * v20;
          uint64_t v34 = (unsigned __int8 *)(*a2 + 32 * v19);
          switch(*(unsigned char *)(v33 + 12))
          {
            case 0:
              switch(v34[12])
              {
                case 0u:
                  if (*(void *)v34 != *(void *)v33) {
                    goto LABEL_121;
                  }
                  goto LABEL_7;
                case 1u:
                  double v105 = *(double *)v34;
                  uint64_t v106 = *(void *)v33;
                  goto LABEL_176;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_121;
                case 6u:
                  if (*(void *)v33 == (uint64_t)(*(void *)v34 << 8) >> 8 && !*((_DWORD *)v34 + 2)) {
                    goto LABEL_7;
                  }
                  goto LABEL_121;
                default:
                  goto LABEL_310;
              }
            case 1:
              switch(v34[12])
              {
                case 0u:
                  double v105 = *(double *)v33;
                  uint64_t v106 = *(void *)v34;
LABEL_176:
                  double v135 = (double)v106;
                  goto LABEL_177;
                case 1u:
                  double v105 = *(double *)v34;
                  double v135 = *(double *)v33;
LABEL_177:
                  if (v105 != v135) {
                    goto LABEL_121;
                  }
                  goto LABEL_7;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_121;
                case 6u:
                  double v134 = vabdd_f64((double)*((int *)v34 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v34 << 8) >> 8), *(double *)v33);
                  goto LABEL_181;
                default:
                  goto LABEL_310;
              }
            case 2:
              unsigned int v92 = v34[12];
              BOOL v93 = v92 - 3 >= 7 && v92 >= 2;
              if (!v93) {
                goto LABEL_121;
              }
              if (v92 != 2) {
                goto LABEL_310;
              }
              double v94 = *(double *)v34;
              int v95 = *(char *)(*(void *)v34 + 31);
              size_t v96 = *(unsigned __int8 *)(*(void *)v34 + 31);
              if (v95 < 0) {
                size_t v97 = *(void *)(*(void *)&v94 + 16);
              }
              else {
                size_t v97 = v96;
              }
              double v136 = *(double *)v33;
              if (*(char *)(*(void *)&v136 + 31) < 0) {
                uint64_t v137 = *(void *)(*(void *)&v136 + 16);
              }
              else {
                uint64_t v137 = *(unsigned __int8 *)(*(void *)&v136 + 31);
              }
              if (v97 != v137) {
                goto LABEL_121;
              }
              unsigned int v138 = (unsigned __int8 *)(*(void *)&v94 + 8);
              if ((v96 & 0x80) != 0) {
                unsigned int v138 = *(unsigned __int8 **)v138;
              }
              unsigned int v139 = (unsigned __int8 *)(*(void *)&v136 + 8);
              if ((*(unsigned char *)(*(void *)&v136 + 31) & 0x80) != 0) {
                unsigned int v139 = *(unsigned __int8 **)v139;
              }
              if ((v96 & 0x80) != 0)
              {
                int v140 = memcmp(v138, v139, v97);
                unsigned int v24 = v191;
                if (v140) {
                  goto LABEL_121;
                }
              }
              else
              {
                if (!v97) {
                  goto LABEL_7;
                }
                do
                {
                  if (*v138 != *v139) {
                    goto LABEL_121;
                  }
                  ++v138;
                  ++v139;
                  --v97;
                }
                while (v97);
              }
              goto LABEL_7;
            case 3:
              unsigned int v98 = v34[12];
              if (v98 > 9) {
                goto LABEL_310;
              }
              if (v98 != 3) {
                goto LABEL_121;
              }
              double v99 = *(double *)v33;
              uint64_t v100 = *(double **)(*(void *)v34 + 8);
              uint64_t v101 = *(double **)(*(void *)v34 + 16);
              unint64_t v102 = v101 - v100;
              uint64_t v103 = *(double **)(*(void *)&v99 + 8);
              if (v102 != (uint64_t)(*(void *)(*(void *)&v99 + 16) - (void)v103) >> 3) {
                goto LABEL_121;
              }
              if (v101 == v100) {
                goto LABEL_7;
              }
              if (v102 <= 1) {
                unint64_t v102 = 1;
              }
              while (*v100 == *v103)
              {
                ++v103;
                ++v100;
                if (!--v102) {
                  goto LABEL_7;
                }
              }
              goto LABEL_121;
            case 4:
              unsigned int v51 = v34[12];
              if (v51 > 9) {
                goto LABEL_310;
              }
              if (v51 != 4) {
                goto LABEL_121;
              }
              int v52 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v192, (uint64_t *)(*(void *)v34 + 8), (void *)(*(void *)v33 + 8));
              goto LABEL_166;
            case 5:
              unsigned int v107 = v34[12];
              if (v107 > 9) {
                goto LABEL_310;
              }
              if (v107 != 5) {
                goto LABEL_121;
              }
              int v52 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v192, (uint64_t **)(*(void *)v34 + 8), (uint64_t **)(*(void *)v33 + 8));
              goto LABEL_166;
            case 6:
              switch(v34[12])
              {
                case 0u:
                  if (*(void *)v34 == (uint64_t)(*(void *)v33 << 8) >> 8 && !*(_DWORD *)(v33 + 8)) {
                    goto LABEL_7;
                  }
                  goto LABEL_121;
                case 1u:
                  double v134 = vabdd_f64(*(double *)v34, (double)*(int *)(v33 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v33 << 8) >> 8));
LABEL_181:
                  if (v134 >= 0.0000005) {
                    goto LABEL_121;
                  }
                  goto LABEL_7;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_121;
                case 6u:
                  if (((*(void *)v33 ^ *(void *)v34) & 0xFFFFFFFFFFFFFFLL) != 0
                    || *((_DWORD *)v34 + 2) != *(_DWORD *)(v33 + 8))
                  {
                    goto LABEL_121;
                  }
                  goto LABEL_7;
                default:
                  goto LABEL_310;
              }
            case 7:
              unsigned int v104 = v34[12];
              if (v104 < 7 || v104 - 8 < 2) {
                goto LABEL_121;
              }
              if (v104 != 7) {
                goto LABEL_310;
              }
              goto LABEL_7;
            case 8:
              unsigned int v108 = v34[12];
              if (v108 < 8 || v108 == 9) {
                goto LABEL_121;
              }
              if (v108 != 8) {
                goto LABEL_310;
              }
              int v52 = turi::image_type::operator==(*(void *)v34 + 8, *(void *)v33 + 8);
LABEL_166:
              unsigned int v24 = v191;
              if (!v52) {
                goto LABEL_121;
              }
              goto LABEL_7;
            case 9:
              unsigned int v53 = v34[12];
              if (v53 < 9) {
                goto LABEL_121;
              }
              if (v53 != 9)
              {
LABEL_310:
                uint64_t result = (void *)turi::flexible_type_fail(0);
                __break(1u);
                return result;
              }
              double v54 = *(double *)v33;
              uint64_t v55 = *(void **)v34;
              if (*(void *)v33 == *(void *)v34) {
                goto LABEL_7;
              }
              BOOL v56 = turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v55 + 1), *(void *)&v54 + 8);
              unsigned int v24 = v191;
              if (!v56) {
                goto LABEL_121;
              }
              unint64_t v58 = (char *)v55[3];
              uint64_t v57 = (char *)v55[4];
              uint64_t v59 = v57 - v58;
              if (v57 == v58) {
                goto LABEL_7;
              }
              if (!v55[1]) {
                goto LABEL_7;
              }
              uint64_t v60 = 1;
              do
              {
                uint64_t v61 = *(void *)v58;
                v58 += 8;
                v60 *= v61;
              }
              while (v58 != v57);
              if (!v60) {
                goto LABEL_7;
              }
              uint64_t v193 = 0;
              std::vector<unsigned long>::vector(&v195, v59 >> 3, &v193);
              uint64_t v62 = v195;
              unsigned int v63 = v196;
              uint64_t v64 = **(void **)(*(void *)&v54 + 8);
              uint64_t v65 = (char *)v196 - (char *)v195;
              unint64_t v66 = v196 - v195;
              unint64_t v67 = v66 - 1;
              if (v66 <= 1) {
                uint64_t v68 = 1;
              }
              else {
                uint64_t v68 = v196 - v195;
              }
              do
              {
                if (v63 == v62)
                {
                  uint64_t v76 = 0;
                  double v77 = *(double *)(*(void *)v55[1] + 8 * v55[9]);
                }
                else
                {
                  uint64_t v69 = 0;
                  uint64_t v70 = (uint64_t *)v55[6];
                  size_t v71 = v62;
                  uint64_t v72 = v68;
                  do
                  {
                    uint64_t v74 = *v71++;
                    uint64_t v73 = v74;
                    uint64_t v75 = *v70++;
                    v69 += v75 * v73;
                    --v72;
                  }
                  while (v72);
                  uint64_t v76 = 0;
                  double v77 = *(double *)(*(void *)v55[1] + 8 * (v55[9] + v69));
                  unsigned int v78 = *(uint64_t **)(*(void *)&v54 + 48);
                  unsigned int v79 = v62;
                  uint64_t v80 = v68;
                  do
                  {
                    uint64_t v82 = *v79++;
                    uint64_t v81 = v82;
                    uint64_t v83 = *v78++;
                    v76 += v83 * v81;
                    --v80;
                  }
                  while (v80);
                }
                double v84 = *(double *)(v64 + 8 * (*(void *)(*(void *)&v54 + 72) + v76));
                if (v77 != v84) {
                  break;
                }
                uint64_t v85 = v66;
                uint64_t v86 = v66 - 1;
                if (v65 >= 1)
                {
                  uint64_t v87 = v55[3];
                  unint64_t v88 = v62[v67] + 1;
                  v62[v67] = v88;
                  unint64_t v89 = (v65 & 0xFFFFFFFFFFFFFFF8) - 16;
                  uint64_t v86 = v66 - 1;
                  if (v88 >= *(void *)(v87 + 8 * v67))
                  {
                    while (1)
                    {
                      *(uint64_t *)((char *)v62 + v89 + 8) = 0;
                      if (v86 <= 0) {
                        break;
                      }
                      --v86;
                      unint64_t v90 = *(uint64_t *)((char *)v62 + v89) + 1;
                      *(uint64_t *)((char *)v62 + v89) = v90;
                      unint64_t v91 = *(void *)(v87 + v89);
                      v89 -= 8;
                      if (v90 < v91)
                      {
                        uint64_t v85 = 1;
                        goto LABEL_80;
                      }
                    }
                    size_t v196 = v62;
                    operator delete(v62);
                    unsigned int v24 = v191;
                    goto LABEL_7;
                  }
                  uint64_t v85 = 1;
                  uint64_t v86 = v66 - 1;
                }
LABEL_80:
                ;
              }
              while ((v86 & 0x8000000000000000) == 0 && v85);
              if (v62)
              {
                size_t v196 = v62;
                operator delete(v62);
              }
              unsigned int v24 = v191;
              if (v77 == v84) {
                goto LABEL_7;
              }
LABEL_121:
              uint64_t v110 = *v24 + 32 * v20;
              uint64_t v111 = *(void *)v110;
              int v112 = *(_DWORD *)(v110 + 8);
              unsigned int v113 = *(unsigned __int8 *)(v110 + 12);
              *(unsigned char *)(v110 + 12) = 0;
              uint64_t v114 = *a2;
              if (v19) {
                uint64_t v115 = *(void *)(v114 + 32 * v19 - 16);
              }
              else {
                uint64_t v115 = 0;
              }
              uint64_t v116 = *v24 + 32 * v20;
              uint64_t v117 = *(void *)(v116 + 16);
              uint64_t v118 = *(void *)(v116 + 24);
              uint64_t v119 = *(void *)(v114 + 32 * v19 + 24);
              BOOL v93 = v119 != 0;
              uint64_t v120 = v119 - 1;
              if (!v93) {
                uint64_t v120 = 0;
              }
              v195 = (uint64_t *)v111;
              LODWORD(v196) = v112;
              BYTE4(v196) = v113;
              if (v113 <= 9 && ((1 << v113) & 0x33C) != 0) {
                atomic_fetch_add((atomic_ullong *volatile)v111, 1uLL);
              }
              v197.i64[0] = v115 + v117;
              v197.i64[1] = v120 + v118;
              turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v190 + 32 * v21, (uint64_t *)&v195);
              uint64_t result = (void *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v195);
              switch(v113)
              {
                case 2u:
                  unint64_t v122 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v122 == 1)
                  {
                    uint64_t v123 = 0x1012C404EF22A49;
                    if (*(char *)(v111 + 31) < 0)
                    {
                      operator delete(*(void **)(v111 + 8));
                      uint64_t v123 = 0x1012C404EF22A49;
                    }
                    goto LABEL_159;
                  }
                  break;
                case 3u:
                  unint64_t v130 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v130 == 1)
                  {
                    unsigned int v131 = *(void **)(v111 + 8);
                    uint64_t v123 = 0x1080C409938AC02;
                    if (v131)
                    {
                      *(void *)(v111 + 16) = v131;
                      operator delete(v131);
                      uint64_t v123 = 0x1080C409938AC02;
                    }
                    goto LABEL_159;
                  }
                  break;
                case 4u:
                  unint64_t v124 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v124 == 1)
                  {
                    unint64_t v194 = (void **)(v111 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v194);
                    goto LABEL_154;
                  }
                  break;
                case 5u:
                  unint64_t v132 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v132 == 1)
                  {
                    unint64_t v194 = (void **)(v111 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v194);
LABEL_154:
                    uint64_t v123 = 0x1020C405E66F15BLL;
                    goto LABEL_159;
                  }
                  break;
                case 8u:
                  unint64_t v133 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v133 == 1)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(v111 + 16));
                    unsigned int v129 = -235920773;
                    goto LABEL_158;
                  }
                  break;
                case 9u:
                  unint64_t v125 = atomic_fetch_add((atomic_ullong *volatile)v111, 0xFFFFFFFFFFFFFFFFLL);
                  if (v111 && v125 == 1)
                  {
                    unsigned int v126 = *(void **)(v111 + 48);
                    if (v126)
                    {
                      *(void *)(v111 + 56) = v126;
                      operator delete(v126);
                    }
                    uint64_t v127 = *(void **)(v111 + 24);
                    if (v127)
                    {
                      *(void *)(v111 + 32) = v127;
                      operator delete(v127);
                    }
                    int v128 = *(std::__shared_weak_count **)(v111 + 16);
                    uint64_t v123 = 0x1030C407B73B9F7;
                    if (v128)
                    {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v128);
                      unsigned int v129 = 2071181815;
LABEL_158:
                      uint64_t v123 = v129 | 0x1030C4000000000;
                    }
LABEL_159:
                    uint64_t result = (void *)MEMORY[0x22A614FA0](v111, v123);
                  }
                  break;
                default:
                  break;
              }
              ++v20;
              break;
            default:
              goto LABEL_310;
          }
        }
        uint64_t v17 = v191;
        ++v21;
        uint64_t v15 = *a2;
        uint64_t v16 = a2[1];
        if (v19 < (v16 - *a2) >> 5)
        {
          uint64_t v18 = *v191;
          if (v20 < (v191[1] - *v191) >> 5) {
            continue;
          }
        }
        goto LABEL_207;
      }
    }
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
  }
LABEL_207:
  if (v19 < (v16 - v15) >> 5)
  {
    uint64_t v141 = 32 * v21;
    uint64_t v142 = 32 * v19;
    do
    {
      uint64_t v143 = v15 + v142;
      uint64_t v144 = *(void *)v143;
      int v145 = *(_DWORD *)(v143 + 8);
      unsigned int v146 = *(unsigned __int8 *)(v143 + 12);
      unsigned int v147 = v146 - 2;
      switch(v146)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 8u:
        case 9u:
          atomic_fetch_add((atomic_ullong *volatile)v144, 1uLL);
          break;
        default:
          break;
      }
      int64x2_t v148 = *(int64x2_t *)(*a2 + v142 + 16);
      int64x2_t v149 = *(int64x2_t *)(*v17 + 32 * (v20 - 1) + 16);
      v195 = (uint64_t *)v144;
      LODWORD(v196) = v145;
      BYTE4(v196) = v146;
      BOOL v150 = v146 > 9;
      int v151 = (1 << v146) & 0x33C;
      if (!v150 && v151 != 0) {
        atomic_fetch_add((atomic_ullong *volatile)v144, 1uLL);
      }
      int64x2_t v197 = vaddq_s64(v149, v148);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v190 + v141, (uint64_t *)&v195);
      uint64_t result = (void *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v195);
      switch(v147)
      {
        case 0u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            uint64_t v154 = 0x1012C404EF22A49;
            if (*(char *)(v144 + 31) < 0)
            {
              operator delete(*(void **)(v144 + 8));
              uint64_t v154 = 0x1012C404EF22A49;
            }
            goto LABEL_256;
          }
          break;
        case 1u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            uint64_t v162 = *(void **)(v144 + 8);
            uint64_t v154 = 0x1080C409938AC02;
            if (v162)
            {
              *(void *)(v144 + 16) = v162;
              operator delete(v162);
              uint64_t v154 = 0x1080C409938AC02;
            }
            goto LABEL_256;
          }
          break;
        case 2u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            unint64_t v194 = (void **)(v144 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v194);
            goto LABEL_249;
          }
          break;
        case 3u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            unint64_t v194 = (void **)(v144 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v194);
LABEL_249:
            uint64_t v154 = 0x1020C405E66F15BLL;
            goto LABEL_256;
          }
          break;
        case 6u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v144 + 16));
            unsigned int v160 = -235920773;
            goto LABEL_255;
          }
          break;
        case 7u:
          if (atomic_fetch_add((atomic_ullong *volatile)v144, 0xFFFFFFFFFFFFFFFFLL) == 1 && v144 != 0)
          {
            uint64_t v157 = *(void **)(v144 + 48);
            if (v157)
            {
              *(void *)(v144 + 56) = v157;
              operator delete(v157);
            }
            uint64_t v158 = *(void **)(v144 + 24);
            if (v158)
            {
              *(void *)(v144 + 32) = v158;
              operator delete(v158);
            }
            uint64_t v159 = *(std::__shared_weak_count **)(v144 + 16);
            uint64_t v154 = 0x1030C407B73B9F7;
            if (v159)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v159);
              unsigned int v160 = 2071181815;
LABEL_255:
              uint64_t v154 = v160 | 0x1030C4000000000;
            }
LABEL_256:
            uint64_t result = (void *)MEMORY[0x22A614FA0](v144, v154);
          }
          break;
        default:
          break;
      }
      ++v19;
      ++v21;
      uint64_t v15 = *a2;
      v141 += 32;
      v142 += 32;
      uint64_t v17 = v191;
    }
    while (v19 < (a2[1] - *a2) >> 5);
  }
  uint64_t v165 = *v17;
  if (v20 < (v17[1] - *v17) >> 5)
  {
    unint64_t v166 = v19 - 1;
    uint64_t v167 = 32 * v21;
    uint64_t v168 = 32 * v20;
    do
    {
      uint64_t v169 = v165 + v168;
      uint64_t v170 = *(void *)v169;
      int v171 = *(_DWORD *)(v169 + 8);
      unsigned int v172 = *(unsigned __int8 *)(v169 + 12);
      unsigned int v173 = v172 - 2;
      switch(v172)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 8u:
        case 9u:
          atomic_fetch_add((atomic_ullong *volatile)v170, 1uLL);
          break;
        default:
          break;
      }
      int64x2_t v174 = *(int64x2_t *)(*v17 + v168 + 16);
      int64x2_t v175 = *(int64x2_t *)(*a2 + 32 * v166 + 16);
      v195 = (uint64_t *)v170;
      LODWORD(v196) = v171;
      BYTE4(v196) = v172;
      BOOL v150 = v172 > 9;
      int v176 = (1 << v172) & 0x33C;
      if (!v150 && v176 != 0) {
        atomic_fetch_add((atomic_ullong *volatile)v170, 1uLL);
      }
      int64x2_t v197 = vaddq_s64(v175, v174);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v190 + v167, (uint64_t *)&v195);
      uint64_t result = (void *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v195);
      switch(v173)
      {
        case 0u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            uint64_t v179 = 0x1012C404EF22A49;
            if (*(char *)(v170 + 31) < 0)
            {
              operator delete(*(void **)(v170 + 8));
              uint64_t v179 = 0x1012C404EF22A49;
            }
            goto LABEL_307;
          }
          break;
        case 1u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            uint64_t v187 = *(void **)(v170 + 8);
            uint64_t v179 = 0x1080C409938AC02;
            if (v187)
            {
              *(void *)(v170 + 16) = v187;
              operator delete(v187);
              uint64_t v179 = 0x1080C409938AC02;
            }
            goto LABEL_307;
          }
          break;
        case 2u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            unint64_t v194 = (void **)(v170 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v194);
            goto LABEL_300;
          }
          break;
        case 3u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            unint64_t v194 = (void **)(v170 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v194);
LABEL_300:
            uint64_t v179 = 0x1020C405E66F15BLL;
            goto LABEL_307;
          }
          break;
        case 6u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v170 + 16));
            unsigned int v185 = -235920773;
            goto LABEL_306;
          }
          break;
        case 7u:
          if (atomic_fetch_add((atomic_ullong *volatile)v170, 0xFFFFFFFFFFFFFFFFLL) == 1 && v170 != 0)
          {
            uint64_t v182 = *(void **)(v170 + 48);
            if (v182)
            {
              *(void *)(v170 + 56) = v182;
              operator delete(v182);
            }
            v183 = *(void **)(v170 + 24);
            if (v183)
            {
              *(void *)(v170 + 32) = v183;
              operator delete(v183);
            }
            v184 = *(std::__shared_weak_count **)(v170 + 16);
            uint64_t v179 = 0x1030C407B73B9F7;
            if (v184)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v184);
              unsigned int v185 = 2071181815;
LABEL_306:
              uint64_t v179 = v185 | 0x1030C4000000000;
            }
LABEL_307:
            uint64_t result = (void *)MEMORY[0x22A614FA0](v170, v179);
          }
          break;
        default:
          break;
      }
      ++v20;
      uint64_t v17 = v191;
      uint64_t v165 = *v191;
      v167 += 32;
      v168 += 32;
    }
    while (v20 < (v191[1] - *v191) >> 5);
  }
  return result;
}

void sub_223FE7ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = a9;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v3 - 32);
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223FE7D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = a4 + v5;
      *(void *)uint64_t v6 = 0;
      uint64_t v7 = (uint64_t *)(a2 + v5);
      *(_DWORD *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 12) = 0;
      if (a4 != a2)
      {
        uint64_t v8 = *v7;
        *(void *)(v6 + 5) = *(uint64_t *)((char *)v7 + 5);
        *(void *)uint64_t v6 = v8;
        LODWORD(v8) = *((unsigned __int8 *)v7 + 12);
        *(unsigned char *)(v6 + 12) = v8;
        BOOL v9 = v8 > 9;
        int v10 = (1 << v8) & 0x33C;
        if (!v9 && v10 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
        }
      }
      *(_OWORD *)(v6 + 16) = *((_OWORD *)v7 + 1);
      v5 += 32;
    }
    while (a2 + v5 != a3);
    return a4 + v5;
  }
  return result;
}

void *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 12) = 0;
      *(void *)(v4 + 16) = -1;
      *(void *)(v4 + 24) = -1;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_223FE7E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v3, *a2, a2[1], (a2[1] - *a2) >> 5);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_223FE7EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  v15 += 24;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(v14);
  return v12;
}

void sub_223FE7FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(uint64_t a1)
{
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(a1);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(a1, 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3), &v10);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 56));
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 72) = v11;
  uint64_t v11 = 0;
  long long v10 = 0uLL;
  uint64_t v12 = (void **)&v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v12);
  double v2 = ceil(1.0 / (*(double *)(a1 + 24) * 0.5) + 1.0 / (*(double *)(a1 + 24) * 0.5)) + 1.0;
  if ((unint64_t)v2 <= 2) {
    unint64_t v3 = 2;
  }
  else {
    unint64_t v3 = (unint64_t)v2;
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(a1, (uint64_t *)(a1 + 56), v3);
  unint64_t v4 = *(uint64_t **)(a1 + 56);
  unint64_t v5 = *(uint64_t **)(a1 + 64);
  unint64_t v6 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 5);
  *(void *)&long long v10 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::rank_center_comparator;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(v4, v5, (uint64_t (**)(uint64_t *, uint64_t))&v10, v7, 1);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  while (v9 != v8)
  {
    v9 -= 24;
    *(void *)&long long v10 = v9;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  }
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v8;
  *(void *)a1 = *(void *)(a1 + 16);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3 - a2 == 2)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 32) + 24 * a2);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(a1, v7, v7 + 3, a4);
  }
  else if (a3 - a2 == 1)
  {
    uint64_t v6 = *(void *)(a1 + 32) + 24 * a2;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *(_OWORD *)a4 = *(_OWORD *)v6;
    a4[2] = *(void *)(v6 + 16);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
  }
  else
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(v9, a1);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(v8, a1);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(a1, v9, (uint64_t *)v8, a4);
    long long v10 = v8;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    v8[0] = (void **)v9;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](v8);
  }
}

void sub_223FE820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 4CoreML::Specification::AdamOptimizer::New(this, 0) = v13;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::rank_center_comparator(uint64_t a1, uint64_t a2)
{
  return (float)((float)((float)*(unint64_t *)(a1 + 16) + (float)*(unint64_t *)(a1 + 24)) * 0.5) < (float)((float)((float)*(unint64_t *)(a2 + 16) + (float)*(unint64_t *)(a2 + 24)) * 0.5);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  long long v10 = result;
  uint64_t v25 = a2;
  uint64_t v26 = result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = ((char *)v9 - (char *)v10) >> 5;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          char v23 = *a3;
          uint64_t v25 = v9 - 4;
          uint64_t result = (uint64_t *)((uint64_t (*)(void))v23)();
          if (result) {
            uint64_t result = (uint64_t *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v26, &v25);
          }
          break;
        case 3uLL:
          uint64_t v25 = v9 - 4;
          uint64_t result = (uint64_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, v10 + 4, v9 - 4, a3);
          break;
        case 4uLL:
          uint64_t v25 = v9 - 4;
          uint64_t result = (uint64_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, v10 + 4, v10 + 8, v9 - 4, a3);
          break;
        case 5uLL:
          uint64_t v25 = v9 - 4;
          uint64_t result = (uint64_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, v10 + 4, v10 + 8, v10 + 12, v9 - 4, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 767)
    {
      if (a5) {
        return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, v9, (uint64_t (**)(unsigned char *, uint64_t))a3);
      }
      else {
        return (uint64_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, v9, (uint64_t (**)(unsigned char *, void))a3);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 4;
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v10, &v10[4 * (v13 >> 1)], v15, a3);
      uint64_t v16 = v25;
      uint64_t v17 = 32 * v14 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v26 + 4), (uint64_t *)((char *)v26 + v17), v25 - 8, a3);
      uint64_t v18 = 32 * v14 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v26 + 8), (uint64_t *)((char *)v26 + v18), v16 - 12, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v26 + v17, &v26[4 * v14], (uint64_t *)((char *)v26 + v18), a3);
      unsigned int v24 = &v26[4 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v26, &v24);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)&v10[4 * (v13 >> 1)], v10, v15, a3);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v25;
        goto LABEL_14;
      }
    }
    char v19 = ((uint64_t (*)(uint64_t *))*a3)(v26 - 4);
    uint64_t v9 = v25;
    if ((v19 & 1) == 0)
    {
      uint64_t result = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>((uint64_t)v26, v25, (unsigned int (**)(unsigned char *))a3);
      long long v10 = result;
LABEL_22:
      a5 = 0;
      uint64_t v26 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    unint64_t v20 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>((uint64_t)v26, v9, (uint64_t (**)(void))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v26, v20, a3);
    long long v10 = v20 + 4;
    uint64_t result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v20 + 4, v9, a3);
    if (result)
    {
      if (v22) {
        return result;
      }
      uint64_t v25 = v20;
      long long v10 = v26;
      uint64_t v9 = v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        uint64_t result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(v26, v20, a3, -i, a5 & 1);
        long long v10 = v20 + 4;
        goto LABEL_22;
      }
      uint64_t v26 = v20 + 4;
    }
  }
  if (v10 != v9) {
    return (uint64_t *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v10, (uint64_t)v9, (uint64_t)v9, a3);
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, void *a2, uint64_t (**a3)(unsigned char *, uint64_t))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((void *)result != a2)
  {
    uint64_t v4 = result;
    char v5 = (void *)(result + 32);
    if ((void *)(result + 32) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)result;
      do
      {
        uint64_t v9 = v5;
        uint64_t result = (*a3)(v5, (uint64_t)v8);
        if (result)
        {
          *(void *)&v13[5] = *(void *)((char *)v9 + 5);
          *(void *)unint64_t v13 = *v9;
          v13[12] = *((unsigned char *)v8 + 44);
          *((unsigned char *)v8 + 44) = 0;
          long long v14 = *((_OWORD *)v8 + 3);
          uint64_t v10 = v7;
          while (1)
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v4 + v10 + 32, (uint64_t *)(v4 + v10));
            if (!v10) {
              break;
            }
            char v11 = (*a3)(v13, v4 + v10 - 32);
            v10 -= 32;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = v4 + v10 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v12 = v4;
LABEL_10:
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v13);
          uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v13);
        }
        char v5 = v9 + 4;
        v7 += 32;
        uint64_t v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
  return result;
}

void sub_223FE8690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, void *a2, uint64_t (**a3)(unsigned char *, void))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 32);
    if ((void *)(result + 32) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        uint64_t result = (*a3)(v5, v4);
        if (result)
        {
          *(void *)&v8[5] = *(void *)((char *)v7 + 5);
          *(void *)uint64_t v8 = *v7;
          v8[12] = *((unsigned char *)v4 + 44);
          *((unsigned char *)v4 + 44) = 0;
          long long v9 = *((_OWORD *)v4 + 3);
          do
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v4 + 4), v4);
            v4 -= 4;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v4 + 4), (uint64_t *)v8);
          uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v8);
        }
        char v5 = v7 + 4;
        uint64_t v4 = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

void sub_223FE87B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t))
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  char v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
    if (!(*a4)(v12, v13)) {
      return 1;
    }
    long long v9 = &v13;
    uint64_t v10 = &v12;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v13, &v12);
    if (!(*a4)(v11, (uint64_t)v12)) {
      return 1;
    }
    long long v9 = (uint64_t *)&v12;
    uint64_t v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v13, &v11);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>(uint64_t a1, uint64_t *a2, unsigned int (**a3)(unsigned char *))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v11 = a2;
  unint64_t v12 = a1;
  *(void *)&v13[5] = *(void *)(a1 + 5);
  *(void *)uint64_t v13 = *(void *)a1;
  v13[12] = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = 0;
  long long v14 = *(_OWORD *)(a1 + 16);
  if (((uint64_t (*)(unsigned char *, uint64_t *))*a3)(v13, a2 - 4))
  {
    unint64_t v5 = a1;
    do
    {
      v5 += 32;
      unint64_t v12 = v5;
    }
    while ((((uint64_t (*)(unsigned char *, unint64_t))*a3)(v13, v5) & 1) == 0);
  }
  else
  {
    unint64_t v6 = a1 + 32;
    do
    {
      unint64_t v5 = v6;
      unint64_t v12 = v6;
      if (v6 >= (unint64_t)v11) {
        break;
      }
      int v7 = ((uint64_t (*)(unsigned char *, unint64_t))*a3)(v13, v6);
      unint64_t v6 = v5 + 32;
    }
    while (!v7);
  }
  uint64_t v8 = v11;
  if (v5 < (unint64_t)v11)
  {
    do
    {
      v8 -= 4;
      char v11 = v8;
    }
    while ((((uint64_t (*)(unsigned char *, uint64_t *))*a3)(v13, v8) & 1) != 0);
    unint64_t v5 = v12;
  }
  if (v5 < (unint64_t)v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
      do
        v12 += 32;
      while (!(*a3)(v13));
      do
        v11 -= 4;
      while ((((uint64_t (*)(unsigned char *))*a3)(v13) & 1) != 0);
      unint64_t v5 = v12;
    }
    while (v12 < (unint64_t)v11);
  }
  if (v5 - 32 != a1) {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v5 - 32));
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5 - 32, (uint64_t *)v13);
  unint64_t v9 = v12;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v13);
  return v9;
}

void sub_223FE8A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(void))
{
  uint64_t v5 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v14 = a2;
  *(void *)&void v16[5] = *(void *)(a1 + 5);
  *(void *)uint64_t v16 = *(void *)a1;
  v16[12] = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = 0;
  long long v17 = *(_OWORD *)(a1 + 16);
  do
  {
    unint64_t v15 = a1 + v5 + 32;
    v5 += 32;
  }
  while (((*a3)() & 1) != 0);
  unint64_t v6 = v14;
  if (v5 == 32)
  {
    unint64_t v9 = a1 + 32;
    do
    {
      if (v9 >= (unint64_t)v6) {
        break;
      }
      uint64_t v10 = *a3;
      v6 -= 4;
      long long v14 = v6;
    }
    while ((((uint64_t (*)(uint64_t *, unsigned char *))v10)(v6, v16) & 1) == 0);
  }
  else
  {
    int v7 = v14 - 4;
    do
    {
      long long v14 = v7;
      int v8 = ((uint64_t (*)(uint64_t *, unsigned char *))*a3)(v7, v16);
      v7 -= 4;
    }
    while (!v8);
    unint64_t v9 = v15;
  }
  unint64_t v11 = v9;
  if (v9 < (unint64_t)v14)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v15, &v14);
      do
        v15 += 32;
      while (((*a3)() & 1) != 0);
      do
        v14 -= 4;
      while (!(*a3)());
      unint64_t v11 = v15;
    }
    while (v15 < (unint64_t)v14);
  }
  uint64_t v12 = v11 - 32;
  if (v11 - 32 != a1) {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v11 - 32));
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v16);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v16);
  return v12;
}

void sub_223FE8C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  long long v14 = a1;
  BOOL v6 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      int v7 = *a3;
      uint64_t v13 = a2 - 4;
      if (((unsigned int (*)(void))v7)()) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v14, &v13);
      }
      return v6;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a2 - 4, a3);
      return v6;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return v6;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return v6;
    default:
      int v8 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a3);
      unint64_t v9 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (!(*a3)(v9, (uint64_t)v8))
  {
LABEL_12:
    int v8 = v9;
    v9 += 4;
    if (v9 == v13) {
      return 1;
    }
  }
  *(void *)&v15[5] = *(uint64_t *)((char *)v9 + 5);
  *(void *)unint64_t v15 = *v9;
  v15[12] = *((unsigned char *)v9 + 12);
  *((unsigned char *)v9 + 12) = 0;
  long long v16 = *((_OWORD *)v9 + 1);
  do
  {
    uint64_t v11 = (uint64_t)v8;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v8 + 4), v8);
    if (v8 == v14) {
      break;
    }
    v8 -= 4;
  }
  while (((*a3)((uint64_t *)v15, v11 - 32) & 1) != 0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v11, (uint64_t *)v15);
  if (++v10 != 8)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
    goto LABEL_12;
  }
  BOOL v6 = v9 + 4 == v13;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
  return v6;
}

void sub_223FE8E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t))
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, (uint64_t)a3);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
    uint64_t result = (*a5)(v12, (uint64_t)a2);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v13, &v12);
      uint64_t result = (*a5)(v13, a1);
      if (result) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v14, &v13);
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t))
{
  long long v16 = a2;
  uint64_t v17 = a1;
  uint64_t v14 = a4;
  unint64_t v15 = a3;
  uint64_t v13 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, (uint64_t)a4);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v14, &v13);
    uint64_t result = (*a6)(v14, (uint64_t)a3);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v15, &v14);
      uint64_t result = (*a6)(v15, (uint64_t)a2);
      if (result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
        uint64_t result = (*a6)(v16, a1);
        if (result) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v16);
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t *, uint64_t))
{
  unint64_t v15 = a1;
  if (a1 != (uint64_t *)a2)
  {
    int v7 = a1;
    uint64_t v8 = (a2 - (uint64_t)a1) >> 5;
    if (a2 - (uint64_t)a1 >= 33)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&a1[4 * v9];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v7, a4, v8, v11);
        v11 -= 32;
        --v10;
      }
      while (v10);
    }
    uint64_t v14 = a2;
    if (a2 != a3)
    {
      uint64_t v12 = a2;
      do
      {
        if ((*a4)((uint64_t *)v12, (uint64_t)v15))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v14, &v15);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v15, a4, v8, (uint64_t)v15);
        }
        uint64_t v12 = v14 + 32;
        uint64_t v14 = v12;
      }
      while (v12 != a3);
      int v7 = v15;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v7, a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return v14;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t (**a2)(uint64_t *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 5)
    {
      uint64_t v10 = (a4 - result) >> 4;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 32 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 4)))
      {
        v12 += 4;
        uint64_t v11 = v13;
      }
      uint64_t result = (*a2)(v12, v5);
      if ((result & 1) == 0)
      {
        *(void *)&void v16[5] = *(void *)(v5 + 5);
        *(void *)long long v16 = *(void *)v5;
        v16[12] = *(unsigned char *)(v5 + 12);
        *(unsigned char *)(v5 + 12) = 0;
        long long v17 = *(_OWORD *)(v5 + 16);
        do
        {
          uint64_t v14 = (uint64_t)v12;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5, v12);
          if (v7 < v11) {
            break;
          }
          uint64_t v15 = (2 * v11) | 1;
          uint64_t v12 = (uint64_t *)(v6 + 32 * v15);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v15;
          }
          else if ((*a2)((uint64_t *)(v6 + 32 * v15), (uint64_t)(v12 + 4)))
          {
            v12 += 4;
          }
          else
          {
            uint64_t v11 = v15;
          }
          uint64_t v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)v16));
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v14, (uint64_t *)v16);
        return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v16);
      }
    }
  }
  return result;
}

void sub_223FE92C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2 - result >= 33)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unint64_t)(a2 - result) >> 5;
    uint64_t v6 = (long long *)(result + 16);
    uint64_t v7 = (uint64_t *)(a2 - 32);
    do
    {
      *(void *)&v11[5] = *(void *)(v4 + 5);
      *(void *)uint64_t v11 = *(void *)v4;
      v11[12] = *(unsigned char *)(v4 + 12);
      *(unsigned char *)(v4 + 12) = 0;
      long long v12 = *v6;
      uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, a3, v5);
      unint64_t v9 = v8;
      if (v7 == v8)
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, (uint64_t *)v11);
      }
      else
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, v7);
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v7, (uint64_t *)v11);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, (uint64_t)(v9 + 4), (uint64_t (**)(uint64_t *, uint64_t))a3, ((uint64_t)v9 - v4 + 32) >> 5);
      }
      uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v11);
      v7 -= 4;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_223FE9408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    unint64_t v9 = (uint64_t *)(a1 + 32 * v6 + 32);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 4;
      uint64_t v10 = v11;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    unint64_t v9 = (uint64_t *)(result + 32 * (v4 >> 1));
    uint64_t v10 = (void *)(a2 - 32);
    uint64_t result = (*a3)(v9, a2 - 32);
    if (result)
    {
      *(void *)&v12[5] = *(void *)((char *)v10 + 5);
      *(void *)long long v12 = *v10;
      v12[12] = *(unsigned char *)(a2 - 20);
      *(unsigned char *)(a2 - 2CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      long long v13 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v11 = (uint64_t)v9;
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v10, v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        unint64_t v9 = (uint64_t *)(v7 + 32 * v8);
        uint64_t v10 = (void *)v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v11, (uint64_t *)v12);
      return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v12);
    }
  }
  return result;
}

void sub_223FE95D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (char **)v9);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (char **)v9);
  uint64_t v15 = v14;
  long long v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      char v19 = v16;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_223FE975C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223FE9764(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, *v6, v6[1], (v6[1] - *v6) >> 5);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223FE9880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    unint64_t v3 = v1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char **)v5 != a4) {
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a4, *(uint64_t **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 5);
      }
      v5 += 24;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(char **a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  char v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)a1);
    if (a4 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v8, (uint64_t)v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (char *)result;
    return result;
  }
  uint64_t result = (uint64_t)a1[1];
  unint64_t v14 = (result - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (uint64_t)&a2[4 * v14];
    if ((char *)result != v9)
    {
      uint64_t v16 = 32 * v14;
      do
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v9, v6);
        v6 += 4;
        v9 += 32;
        v16 -= 32;
      }
      while (v16);
      char v9 = a1[1];
    }
    uint64_t result = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == (uint64_t *)a3)
  {
    char v17 = v9;
  }
  else
  {
    char v17 = v9;
    do
    {
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v9, v6);
      v6 += 4;
      v9 += 32;
      v17 += 32;
    }
    while (v6 != (uint64_t *)a3);
    uint64_t result = (uint64_t)a1[1];
  }
  while ((char *)result != v17)
    uint64_t result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(result - 32);
  a1[1] = v17;
  return result;
}

void sub_223FE9AF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>((void *)(a1 + 24), *((void *)a2 + 3), *((void *)a2 + 4), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  long long v5 = a2[3];
  long long v6 = a2[4];
  *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((void *)(a1 + 80), *((uint64_t **)a2 + 10), *((uint64_t **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((void *)(a1 + 104), *((void *)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 5);
  std::vector<BOOL>::vector((void *)(a1 + 128), (uint64_t)(a2 + 8));
  std::vector<BOOL>::vector((void *)(a1 + 152), (uint64_t)a2 + 152);
  return a1;
}

void sub_223FE9BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(v2);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223FE9CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&>(a1, v4, v6);
      v6 += 104;
      uint64_t v4 = v12 + 104;
      v12 += 104;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_223FE9DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((void *)(a2 + 32), *(uint64_t **)(a3 + 32), *(uint64_t **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((void *)(a2 + 56), *(void *)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 5);
  return std::vector<BOOL>::vector((void *)(a2 + 80), a3 + 80);
}

void sub_223FE9E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void *std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223FE9F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC8uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__shared_ptr_emplace[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223FE9FF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__shared_ptr_emplace[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D767F58;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_223FEA050(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *turi::query_eval::less_than_partial_function::less_than_partial_function(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::vector<BOOL>::vector(a1 + 3, a3);
  return a1;
}

void sub_223FEA1EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

turi::dense_bitset *turi::dense_bitset::dense_bitset(turi::dense_bitset *this, unint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  unint64_t v3 = a2 >> 6;
  if ((a2 & 0x3F) != 0) {
    ++v3;
  }
  *((void *)this + 2) = v3;
  uint64_t v4 = malloc_type_realloc(0, 8 * v3, 0x100004000313F17uLL);
  *(void *)this = v4;
  uint64_t v5 = *((void *)this + 1) & 0x3FLL;
  if (v5) {
    v4[*((void *)this + 2) - 1] &= ~(-1 << v5);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6 >= 1) {
    bzero(v4, 8 * v6);
  }
  return this;
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::open_for_write(uint64_t a1)
{
  uint64_t v2 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(unsigned char *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  uint64_t instance = turi::fileio::fixed_size_cache_manager::get_instance(v2);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 152), &__str);
  operator new();
}

void sub_223FEA56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x130uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEEC2B8ne180100IJESG_Li0EEESG_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_223FEA628(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEEC2B8ne180100IJESG_Li0EEESG_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D767FA8;
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = a1 + 24;
  *(_OWORD *)(v2 + 24CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray(v2);
  return a1;
}

void sub_223FEA6CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D767FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D767FF8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_223FEA848(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v3);
  }
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(uint64_t a1)
{
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::set_num_segments(uint64_t a1, uint64_t a2)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (a2 && (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 120))(*(void *)(a1 + 176)) != a2)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    operator new();
  }
  return 0;
}

void sub_223FEAB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::num_segments(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  assert_msg(*((unsigned __int8 *)a1 + 248), "Invalid SArray");
  assert_msg(*((unsigned __int8 *)a1 + 249), "SArray not opened for writing");
  uint64_t v9 = (void *)a1[22];
  if (!v9)
  {
    v8[0] = &v9;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v8[0] = a2;
  v7[0] = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (v7[0] <= a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v7;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  uint64_t v9 = &unk_26D768120;
  uint64_t v10 = a1;
  unint64_t v11 = a2;
  uint64_t v12 = &v9;
  v8[0] = &unk_26D7681B0;
  v8[1] = a1;
  v8[2] = a2;
  void v8[3] = v8;
  v7[0] = &unk_26D768240;
  void v7[3] = v7;
  turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::~__value_func[abi:ne180100](&v9);
}

void sub_223FEAD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::close(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 40))(*(void *)(a1 + 176));
  (*(void (**)(void))(**(void **)(a1 + 176) + 48))(*(void *)(a1 + 176));
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 176) + 32))(*(void *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v2);
  uint64_t v3 = *(void *)(v2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 24);
  *(void *)(a1 + 48) = v3;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v2 + 48));
  if (a1 + 8 != v2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v2 + 72), *(void *)(v2 + 80), (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v2 + 96), *(long long **)(v2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 104) - *(void *)(v2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(long long **)(v2 + 120), (long long *)(v2 + 128));
  }
  uint64_t v4 = *(void *)(a1 + 176);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(unsigned char *)(a1 + 249) = 0;
  turi::sarray<turi::flexible_type>::keep_array_file_ref((std::__split_buffer<std::string>::pointer)a1);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D767FF8;
  uint64_t v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(void **)(a1 + 136));
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_group_format_writer_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D768060;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(void *)a1 = &unk_26D768060;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x22A614FA0](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  if (a4) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = 0;
  }
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    uint64_t v8 = 8;
    do
    {
      std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize((uint64_t *)(*(void *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(void *)(a1 + 16)) {
    turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open_segment(a1, 0);
  }
}

void sub_223FEB198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::close(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = 0;
    do
    {
      if (*(void *)(a1 + 392) != *(void *)(a1 + 384))
      {
        unint64_t v3 = 0;
        do
          turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(void *)(a1 + 16));
  }
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 8);
  uint64_t v8 = v7 + 24 * a3;
  uint64_t v10 = *(std::string **)(v8 + 8);
  unint64_t v9 = *(void *)(v8 + 16);
  uint64_t v11 = (uint64_t *)(v8 + 8);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v10, a4);
    uint64_t v12 = (uint64_t)&v10[2];
    uint64_t *v11 = (uint64_t)&v10[2];
  }
  uint64_t *v11 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
  {
    turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
  }
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  long long v12;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v7 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 8);
  uint64_t v8 = v7 + 24 * a3;
  unint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = (uint64_t *)(v8 + 8);
  if (v9 >= v10)
  {
    uint64_t v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string>>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a4;
    *(void *)(v9 + 16) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v12 = *(_OWORD *)(a4 + 24);
    *(void *)(v9 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a4 + 40);
    *(_OWORD *)(v9 + 24) = v12;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
    *(void *)(a4 + 24) = 0;
    uint64_t v13 = v9 + 48;
  }
  uint64_t *v11 = v13;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
  {
    turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
  }
}

void sub_223FEB4CC(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384) + 56 * a2;
    unint64_t v9 = (void *)(v8 + 32);
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 8) + 24 * a3);
    uint64_t v11 = (std::string **)(v10 + 1);
    do
    {
      uint64_t v12 = *v11;
      if ((unint64_t)*v11 >= v10[2])
      {
        uint64_t v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(v10, v4);
      }
      else
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](*v11, v4);
        uint64_t v13 = (uint64_t)&v12[2];
        uint64_t *v11 = v12 + 2;
      }
      uint64_t *v11 = (std::string *)v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v10) >> 4) >= *v9) {
        turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  std::string **v11;
  std::string *v12;
  uint64_t v13;

  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384);
    unint64_t v9 = (uint64_t *)(*(void *)(v8 + 56 * a2 + 8) + 24 * a3);
    uint64_t v10 = *(void *)(v8 + 56 * a2 + 32);
    uint64_t v11 = (std::string **)(v9 + 1);
    do
    {
      uint64_t v12 = *v11;
      if ((unint64_t)*v11 >= v9[2])
      {
        uint64_t v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(v9, v4);
      }
      else
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](*v11, v4);
        uint64_t v13 = (uint64_t)&v12[2];
        uint64_t *v11 = v12 + 2;
      }
      uint64_t *v11 = (std::string *)v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v9) >> 4) >= v10)
      {
        turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
        uint64_t v10 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_223FEB6F8(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

void sub_223FEB818(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

void **turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_segment(void **result, uint64_t a2)
{
  if (result[49] != result[48])
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = 0;
    uint64_t v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(v3, v4, a2);
      uint64_t result = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)(*(void *)(*(void *)(v3 + 384) + v5) + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 392) - *(void *)(v3 + 384)) >> 3));
  }
  return result;
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (turi::simple_spinlock **)*a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  unint64_t v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      uint64_t v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  uint64_t v3 = (void **)a2;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  BOOL v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open_segment(uint64_t a1, std::string::size_type a2)
{
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    BOOL v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        unint64_t v9 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  uint64_t index_info = turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)(a1 + 24));
  if (*(char *)(index_info + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(void *)(index_info + 8));
  }
  else {
    std::string __str = *(std::string *)index_info;
  }
  *(_DWORD *)((char *)v36 + 3) = 0;
  v36[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&v33, &__str, 0, size - 5, (std::allocator<char> *)v38);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v33;
  }
  else {
    uint64_t v12 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v33.__r_.__value_.__l.__size_;
  }
  unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  locale = v34.__locale_;
  uint64_t v16 = (char *)&v34 + *((void *)v34.__locale_ - 3);
  if (*((_DWORD *)v16 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *((void *)v34.__locale_ - 3)));
    char v17 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 32);
    std::locale::~locale((std::locale *)&v33);
    locale = v34.__locale_;
  }
  *((_DWORD *)v16 + 36) = 48;
  *(void **)((char *)&v35[1] + *((void *)locale - 3)) = (void *)4;
  std::ostream::operator<<();
  std::stringbuf::str();
  long long v18 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  v36[0] = v33.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v36 + 3) = *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3);
  int v19 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  unint64_t v20 = (int *)global_logger();
  if (v20[169] > 1) {
    goto LABEL_39;
  }
  if (cppipc::must_cancel((cppipc *)v20)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  char v21 = (file_logger *)global_logger();
  int v22 = file_logger::start_stream(v21, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  char v23 = pthread_getspecific(*((void *)v22 + 74));
  if (v23 && *((unsigned char *)v23 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Open segment ", 13);
  }
  uint64_t v24 = file_logger::operator<<<unsigned long>((uint64_t)v22);
  uint64_t v25 = pthread_getspecific(*(void *)(v24 + 592));
  if (v25 && *((unsigned char *)v25 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)" for write on ", 14);
  }
  if (v19 < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
    LODWORD(v32.__r_.__value_.__r.__words[2]) = v36[0];
    *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = v19;
  }
  uint64_t v26 = file_logger::operator<<<std::string>(v24, (uint64_t)&v32);
  int v27 = pthread_getspecific(*(void *)(v26 + 592));
  if (v27 && *((unsigned char *)v27 + 280))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(v27[2] - 24) + 16));
    uint64_t v28 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale((std::locale *)&v33);
    std::ostream::put();
    std::ostream::flush();
    file_logger::stream_flush((file_logger *)v26);
    if (*(_DWORD *)(v26 + 600) == 7)
    {
      __print_back_trace();
      uint64_t v30 = __cxa_allocate_exception(8uLL);
      *uint64_t v30 = "LOG_FATAL encountered";
      __cxa_throw(v30, MEMORY[0x263F8C1D8], 0);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  else
  {
LABEL_39:
    if ((v19 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
      LODWORD(v31.__r_.__value_.__r.__words[2]) = v36[0];
      *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
      *((unsigned char *)&v31.__r_.__value_.__s + 23) = v19;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(a1 + 24, a2);
}

void sub_223FEC244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  std::locale::~locale(&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0) {
    operator delete(v28);
  }
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    uint64_t v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)unint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_223FEC474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer const&>(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_223FEC5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>((std::string *)(a2 + 8), *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  __n128 result = *(__n128 *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_223FEC62C(_Unwind_Exception *a1)
{
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223FEC6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4));
      unint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223FEC774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223FEC7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 48;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223FEC8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  uint64_t v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_223FEC980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  unint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  unint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 1;
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    uint64_t i = (void **)(*(void *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (turi::simple_spinlock *)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    uint64_t v6 = (void **)(i - 48);
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(&v15);
  }
}

void sub_223FECDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 384);
  uint64_t v4 = v3 + 56 * a2;
  uint64_t v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = (uint64_t *)(*(void *)(v4 + 8) + 24 * a3);
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
    uint64_t v11 = (v7 - *v6) >> 4;
    uint64_t v25 = -1;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
    uint64_t v12 = turi::v2_block_impl::block_writer::write_block<std::pair<std::vector<turi::flexible_type>,std::string>>((pthread_mutex_t *)(a1 + 24), a3, a2, v6, (uint64_t)&v25);
    uint64_t v13 = *v5;
    uint64_t v14 = *v5 + 24 * a3;
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v16 = (void *)(v14 + 8);
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v13 + 24 * a3);
    if (v17 != v18)
    {
      uint64_t v19 = v13 + 24 * a3 + 16;
      do
      {
        v15 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v19, v15);
      }
      while (v15 != v18);
    }
    *uint64_t v16 = v18;
    do
    {
      while (*(unsigned char *)v4 == 1)
        ;
    }
    while (atomic_exchange((atomic_uchar *volatile)v4, 1u));
    unint64_t v20 = (void *)(v3 + 56 * a2);
    uint64_t v21 = v20[5] + v12;
    uint64_t v22 = v20[6] - 0x5555555555555555 * v11;
    v20[5] = v21;
    v20[6] = v22;
    unint64_t v23 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v21 + 1) / (float)(unint64_t)(v22 + 1)));
    if (*(void *)"\b" > v23) {
      unint64_t v23 = *(void *)"\b";
    }
    void v20[4] = v23;
    unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) * *(void *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v24 < v23) {
      unint64_t v23 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v24;
    }
    void v20[4] = v23;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v23) {
      unint64_t v23 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    }
    void v20[4] = v23;
    __dmb(0xBu);
    *(unsigned char *)uint64_t v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<std::pair<std::vector<turi::flexible_type>,std::string>>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v19);
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = v19.n128_u64[0];
  *((void *)&v16 + 1) = *(void *)v19.n128_u64[0];
  uint64_t v18 = *(void *)(v19.n128_u64[0] + 8) - *((void *)&v16 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec((uint64_t)&v15, a4);
  *(void *)(a5 + 16) = v17;
  *(void *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  uint64_t v10 = *(void *)v19.n128_u64[0];
  long long v11 = *(_OWORD *)(a5 + 32);
  v14[1] = *(_OWORD *)(a5 + 16);
  uint64_t v14[2] = v11;
  v14[0] = *(_OWORD *)a5;
  uint64_t v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v14);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v19);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  return v12;
}

void sub_223FED2D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v11 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v11;
      uint64_t v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        uint64_t result = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7 + v8;
      turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)(v7 + v8));
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)(v10 + 24));
      ++v9;
      uint64_t v7 = *a2;
      v8 += 48;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (a2[1] - *a2) >> 4;
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v10;
      size_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v7 + v8);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 16;
    }
    while (v9 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(uint64_t a1, uint64_t *a2)
{
  char v4 = *((unsigned char *)a2 + 12) ^ 0x80;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v5)
    {
      size_t v9 = 2 * v5 + 2;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v9;
      size_t v10 = *(void **)(a1 + 16);
      if (v10)
      {
        unint64_t v6 = (unsigned char *)*v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v13);
          unint64_t v6 = **(unsigned char ***)(a1 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v6[v9];
        }
      }
      else
      {
        unint64_t v6 = malloc_type_realloc(*(void **)(a1 + 24), v9, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(unsigned char **)(a1 + 24);
    }
    v6[(*(void *)(a1 + 32))++] = v4;
  }
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
    case 1:
      if (*(void *)a1)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v7 = *(void *)(a1 + 40);
        if (*(void *)(a1 + 32) + 8 > v7)
        {
          size_t v14 = 2 * v7 + 16;
          *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v14;
          std::vector<char>::size_type v15 = *(char ***)(a1 + 16);
          if (v15)
          {
            uint64_t v8 = *v15;
            size_t v16 = v15[1] - *v15;
            BOOL v17 = v14 >= v16;
            std::vector<char>::size_type v18 = v14 - v16;
            if (v18 != 0 && v17)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
              uint64_t v8 = **(char ***)(a1 + 16);
            }
            else if (!v17)
            {
              v15[1] = &v8[v14];
            }
          }
          else
          {
            uint64_t v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
          }
          *(void *)(a1 + 24) = v8;
        }
        else
        {
          uint64_t v8 = *(char **)(a1 + 24);
        }
        *(void *)&v8[*(void *)(a1 + 32)] = *a2;
        *(void *)(a1 + 32) += 8;
      }
      break;
    case 2:
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)(*a2 + 8));
      break;
    case 3:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a1, (const void **)(*a2 + 8));
      break;
    case 4:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)(*a2 + 8));
      break;
    case 5:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a1, (uint64_t *)(*a2 + 8));
      break;
    case 6:
      turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(a1, a2);
      break;
    case 7:
      return;
    case 8:
      turi::image_type::save(*a2 + 8, a1);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::save(*a2 + 8, a1);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v12 = 2 * v5 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v12;
      std::vector<char>::size_type v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        unint64_t v6 = *v13;
        size_t v14 = v13[1] - *v13;
        BOOL v15 = v12 >= v14;
        std::vector<char>::size_type v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          unint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  unint64_t v7 = *a2;
  size_t v8 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v10 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v8 > v10)
  {
    size_t v17 = 2 * (v10 + v8);
    *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v17;
    std::vector<char>::size_type v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      size_t v11 = *v18;
      size_t v19 = v18[1] - *v18;
      BOOL v20 = v17 >= v19;
      std::vector<char>::size_type v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        size_t v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      size_t v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    size_t v11 = *(char **)(a1 + 24);
  }
  uint64_t result = memcpy(&v11[*(void *)(a1 + 32)], v7, v8);
  *(void *)(a1 + 32) += v8;
  return result;
}

void turi::flexible_type_impl::ndarray<double>::save(uint64_t a1, uint64_t a2)
{
  if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)a1)) {
    turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
  }
  LOBYTE(v11) = 0;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 1 > v4)
    {
      size_t v6 = 2 * v4 + 2;
      *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v6;
      unint64_t v7 = *(void **)(a2 + 16);
      if (v7)
      {
        unint64_t v5 = (unsigned char *)*v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v10);
          unint64_t v5 = **(unsigned char ***)(a2 + 16);
        }
        else if (!v9)
        {
          v7[1] = &v5[v6];
        }
      }
      else
      {
        unint64_t v5 = malloc_type_realloc(*(void **)(a2 + 24), v6, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v5;
    }
    else
    {
      unint64_t v5 = *(unsigned char **)(a2 + 24);
    }
    v5[(*(void *)(a2 + 32))++] = 0;
  }
  if (turi::flexible_type_impl::ndarray<double>::is_full((void *)a1))
  {
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)(a1 + 16));
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)(a1 + 40));
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, *(const void ***)a1);
  }
  else
  {
    turi::flexible_type_impl::ndarray<double>::compact(a1, (uint64_t **)&v11);
    if (!turi::flexible_type_impl::ndarray<double>::is_full(&v11)) {
      turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#2}::operator()();
    }
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)v13);
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)__p);
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, v11);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_223FEDB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 526, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FEDC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::compact(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)a1)) {
    turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
  }
  if (turi::flexible_type_impl::ndarray<double>::is_full((void *)a1))
  {
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, a1);
  }
  else
  {
    unint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::string __p = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v67, (uint64_t)&v64, (uint64_t)&__p, 0);
    if (__p)
    {
      uint64_t v62 = __p;
      operator delete(__p);
    }
    if (v64)
    {
      uint64_t v65 = (uint64_t *)v64;
      operator delete(v64);
    }
    if (v67)
    {
      uint64_t v68 = (unint64_t *)v67;
      operator delete(v67);
    }
    a2[8] = 0;
    if (a2 != (uint64_t **)a1) {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2 + 16, *(char **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    }
    unint64_t v5 = *(uint64_t **)(a1 + 16);
    unint64_t v4 = *(uint64_t **)(a1 + 24);
    if (v4 == v5 || !*(void *)a1)
    {
      unint64_t v6 = 0;
    }
    else
    {
      unint64_t v6 = 1;
      do
      {
        uint64_t v7 = *v5++;
        v6 *= v7;
      }
      while (v5 != v4);
    }
    std::vector<double>::resize((uint64_t)*a2, v6);
    size_t v8 = (uint64_t *)(a2 + 5);
    std::vector<unsigned long>::resize((uint64_t)(a2 + 5), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    if (a2[3] != a2[2] && (*a2)[1] != **a2)
    {
      std::vector<std::pair<unsigned long,unsigned long>>::vector(&v67, (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      size_t v11 = (unint64_t *)v67;
      uint64_t v12 = v10 - v9;
      if (v10 != v9)
      {
        uint64_t v13 = 0;
        unint64_t v14 = v12 >> 3;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        BOOL v15 = (char *)v67 + 8;
        do
        {
          *(v15 - 1) = *(void *)(v9 + 8 * v13);
          void *v15 = v13++;
          v15 += 2;
        }
        while (v14 != v13);
      }
      unint64_t v16 = 126 - 2 * __clz(((char *)v68 - (char *)v11) >> 4);
      if (v68 == v11) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>((uint64_t)v68, v68, (uint64_t)v11, v11, (uint64_t)&v64, v17, 1);
      std::vector<char>::size_type v18 = (char *)v67;
      uint64_t v19 = *v8;
      *(void *)(*v8 + 8 * *((void *)v67 + 1)) = 1;
      uint64_t v20 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
      if ((unint64_t)v20 >= 9)
      {
        unint64_t v21 = v20 >> 3;
        uint64_t v22 = a2[2];
        if (v21 <= 2) {
          unint64_t v21 = 2;
        }
        unint64_t v23 = v21 - 1;
        unint64_t v24 = (uint64_t *)(v18 + 24);
        do
        {
          uint64_t v25 = v22[*(v24 - 2)] * *(void *)(v19 + 8 * *(v24 - 2));
          uint64_t v26 = *v24;
          v24 += 2;
          *(void *)(v19 + 8 * v26) = v25;
          --v23;
        }
        while (v23);
      }
      unint64_t v27 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
      std::string __p = 0;
      std::vector<unsigned long>::vector(&v64, v27, &__p);
      uint64_t v28 = (uint64_t *)v64;
      int v29 = v65;
      uint64_t v30 = (char *)v65 - (unsigned char *)v64;
      unint64_t v31 = ((char *)v65 - (unsigned char *)v64) >> 3;
      unint64_t v32 = v31 - 1;
      if (v31 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = ((char *)v65 - (unsigned char *)v64) >> 3;
      }
      std::locale v34 = a2[5];
      uint64_t v35 = **a2;
      do
      {
        if (v29 == v28)
        {
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(**(void **)a1 + 8 * *(void *)(a1 + 64));
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(uint64_t **)(a1 + 40);
          uint64_t v38 = v28;
          uint64_t v39 = v33;
          do
          {
            uint64_t v41 = *v38++;
            uint64_t v40 = v41;
            uint64_t v42 = *v37++;
            v36 += v42 * v40;
            --v39;
          }
          while (v39);
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(**(void **)a1 + 8 * (*(void *)(a1 + 64) + v36));
          uint64_t v45 = v28;
          unsigned int v46 = v34;
          uint64_t v47 = v33;
          do
          {
            uint64_t v49 = *v45++;
            uint64_t v48 = v49;
            uint64_t v50 = *v46++;
            v43 += v50 * v48;
            --v47;
          }
          while (v47);
        }
        *(void *)(v35 + 8 * v43) = v44;
        uint64_t v51 = v31;
        unint64_t v52 = v31 - 1;
        if (v30 >= 1)
        {
          uint64_t v53 = *(void *)(a1 + 16);
          unint64_t v54 = v28[v32] + 1;
          v28[v32] = v54;
          if (v54 >= *(void *)(v53 + 8 * v32))
          {
            uint64_t v55 = v53 - 16;
            unint64_t v56 = v31;
            uint64_t v57 = (unint64_t *)((char *)v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              unint64_t v58 = v56 - 1;
              v57[1] = 0;
              if ((uint64_t)(v56 - 1) <= 0) {
                goto LABEL_57;
              }
              unint64_t v59 = *v57 + 1;
              *v57-- = v59;
              unint64_t v60 = *(void *)(v55 + 8 * v56--);
              if (v59 < v60)
              {
                uint64_t v51 = 1;
                if (((v58 - 1) & 0x8000000000000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_56;
              }
            }
          }
          uint64_t v51 = 1;
          unint64_t v52 = v31 - 1;
        }
        if ((v52 & 0x8000000000000000) != 0) {
          break;
        }
LABEL_50:
        ;
      }
      while (v51);
LABEL_56:
      if (!v28) {
        goto LABEL_58;
      }
LABEL_57:
      uint64_t v65 = v28;
      operator delete(v28);
LABEL_58:
      if (v67)
      {
        uint64_t v68 = (unint64_t *)v67;
        operator delete(v67);
      }
    }
  }
}

void sub_223FEE0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(v17);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"c.is_full()", 11);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 534, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FEE23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (a2[1] - *a2) >> 5;
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v11 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v11;
      uint64_t v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        uint64_t result = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7 + v8;
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v7 + v8);
      uint64_t result = turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v10 + 16);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 32;
    }
    while (v9 < (a2[1] - *a2) >> 5);
  }
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 12 > v5)
    {
      size_t v8 = 2 * v5 + 24;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v8;
      unint64_t v9 = *(char ***)(a1 + 16);
      if (v9)
      {
        uint64_t result = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
          uint64_t result = **(char ***)(a1 + 16);
        }
        else if (!v11)
        {
          v9[1] = &result[v8];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a1 + 24);
    }
    unint64_t v6 = &result[*(void *)(a1 + 32)];
    uint64_t v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v6 = v7;
    *(void *)(a1 + 32) += 12;
  }
  return result;
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  size_t v13 = v10;
  BOOL v14 = (std::string *)&v10[48 * v4];
  unint64_t v16 = &v10[48 * v9];
  std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v14, a2);
  std::vector<char>::size_type v15 = v14 + 2;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_223FEE658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      long long v9 = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v12 = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = v12;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a2 + 24) = 0;
  v15[2] = v11 + 48;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(v15);
  return v13;
}

void sub_223FEE9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 4uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v4);
    }
    uint64_t v10 = v8;
    uint64_t v11 = &v8[48 * v5];
    long long v12 = v11;
    uint64_t v13 = &v8[48 * v9];
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v10);
  }
  return result;
}

void sub_223FEEA90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D768120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D768120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 72))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D7681B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7681B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 80))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::target_type()
{
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D768240;
  return result;
}

void std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D768240;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

uint64_t turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_223FEEDB0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::~__value_func[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::~__value_func[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 96 * a2;
    uint64_t v6 = 96 * a2;
    uint64_t v7 = (void *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      *uint64_t v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_223FEF084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int64x2_t v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 96)
  {
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
    std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::~__value_func[abi:ne180100]((void *)(i - 64));
    __n128 result = std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::~__value_func[abi:ne180100]((void *)(i - 96));
  }
  v3[1] = a2;
  return result;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::operator=[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<std::vector<turi::flexible_type>,std::string> &&)>::operator=[abi:ne180100](void *a1)
{
  int64x2_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<turi::mutex>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::mutex>::__vallocate[abi:ne180100](a1, a2);
    std::vector<turi::mutex>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_223FEF414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::mutex>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::vector<turi::mutex>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(pthread_mutex_t **)(result + 8);
  if (a2)
  {
    uint64_t v4 = a2 << 6;
    uint64_t v5 = &v3[a2];
    do
    {
      int v6 = pthread_mutex_init(v3, 0);
      __n128 result = assert_msg(v6 == 0, "Mutex create error %d", v6);
      ++v3;
      v4 -= 64;
    }
    while (v4);
    uint64_t v3 = v5;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_223FEF4F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void *std::vector<turi::simple_spinlock>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v3 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (unsigned char *)a1[1];
    uint64_t v5 = &v4[v3];
    do
    {
      *v4++ = 0;
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

void sub_223FEF598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<turi::oarchive>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_223FEF62C(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v2 = &unk_26D7682C0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7682C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  long long v5 = *(uint64_t **)(a1 + 8);
  tls_int data = (turi::thread *)turi::thread::get_tls_data((turi::thread *)a1);
  uint64_t v7 = *(void *)tls_data;
  uint64_t v8 = *v5;
  uint64_t v9 = *(uint64_t **)(a1 + 16);
  uint64_t v10 = (uint64_t)turi::thread::get_tls_data(tls_data);
  long long v12 = *(unsigned __int8 **)v10;
  uint64_t v13 = *v9;
  uint64_t v14 = *a3;
  if (!*((unsigned char *)v14 + 24))
  {
    turi::sframe_rows::ensure_unique(v14);
    if (!*((unsigned char *)v14 + 24)) {
      turi::sframe_rows::ensure_unique(v14);
    }
  }
  if (*(void *)v14 != *((void *)v14 + 1))
  {
    long long v15 = **(void ***)v14;
    if (v15)
    {
      uint64_t v16 = *(void *)(**(void **)v14 + 8) - *v15;
      if (v16)
      {
        uint64_t v17 = 0;
        std::vector<char>::size_type v18 = (void *)(v13 + 24 * (void)v12);
        uint64_t v19 = v8 + 48 * v7;
        uint64_t v66 = (uint64_t **)(v18 + 1);
        uint64_t v67 = v19;
        uint64_t v68 = v16 >> 4;
        uint64_t v69 = (void *)(v19 + 24);
        uint64_t v70 = (void *)(v19 + 32);
        do
        {
          if (**(void **)(a1 + 24))
          {
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            do
            {
              uint64_t v22 = **(void **)(*(void *)v14 + v20) + 16 * v17;
              uint64_t v23 = *v18 + v20;
              if (v23 != v22)
              {
                switch(*(unsigned char *)(v23 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v23;
                      if (!*(void *)v23) {
                        goto LABEL_42;
                      }
                      if (*((char *)v24 + 31) < 0) {
                        operator delete((void *)v24[1]);
                      }
                      atomic_ullong *volatile v25 = v24;
                      uint64_t v26 = 0x1012C404EF22A49;
                      goto LABEL_41;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v23;
                      if (!*(void *)v23) {
                        goto LABEL_42;
                      }
                      uint64_t v33 = (void *)v32[1];
                      if (v33)
                      {
                        void v32[2] = (atomic_ullong)v33;
                        operator delete(v33);
                      }
                      atomic_ullong *volatile v25 = v32;
                      uint64_t v26 = 0x1080C409938AC02;
                      goto LABEL_41;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v23;
                      if (!*(void *)v23) {
                        goto LABEL_42;
                      }
                      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
                      goto LABEL_37;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v23;
                      if (!*(void *)v23) {
                        goto LABEL_42;
                      }
                      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
LABEL_37:
                      atomic_ullong *volatile v25 = v27;
                      uint64_t v26 = 0x1020C405E66F15BLL;
                      goto LABEL_41;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v23;
                      if (!*(void *)v23) {
                        goto LABEL_42;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v34 + 2);
                      atomic_ullong *volatile v25 = v34;
                      uint64_t v26 = 0x1030C40F1F0227BLL;
                      goto LABEL_41;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)v23;
                      if (*(void *)v23)
                      {
                        int v29 = (void *)v28[6];
                        if (v29)
                        {
                          v28[7] = (atomic_ullong)v29;
                          operator delete(v29);
                        }
                        uint64_t v30 = (void *)v28[3];
                        if (v30)
                        {
                          v28[4] = (atomic_ullong)v30;
                          operator delete(v30);
                        }
                        unint64_t v31 = (std::__shared_weak_count *)v28[2];
                        if (v31) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                        }
                        atomic_ullong *volatile v25 = v28;
                        uint64_t v26 = 0x1030C407B73B9F7;
LABEL_41:
                        uint64_t v10 = MEMORY[0x22A614FA0](v25, v26);
                      }
LABEL_42:
                      *(void *)uint64_t v23 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v35 = *(void *)v22;
                *(void *)(v23 + 5) = *(void *)(v22 + 5);
                *(void *)uint64_t v23 = v35;
                LODWORD(v35) = *(unsigned __int8 *)(v22 + 12);
                *(unsigned char *)(v23 + 12) = v35;
                BOOL v36 = v35 > 9;
                int v37 = (1 << v35) & 0x33C;
                if (!v36 && v37 != 0) {
                  atomic_fetch_add(*(atomic_ullong *volatile *)v23, 1uLL);
                }
              }
              ++v21;
              v20 += 16;
            }
            while (v21 < **(void **)(a1 + 24));
          }
          uint64_t v39 = *(char ***)(a1 + 40);
          uint64_t v40 = *v39;
          uint64_t v41 = v39[1];
          uint64_t v42 = v41 - *v39;
          if (v42)
          {
            uint64_t v43 = *(void **)(a1 + 48);
            unint64_t v44 = v42 >> 4;
            uint64_t v41 = v40;
            do
            {
              uint64_t v45 = (uint64_t *)&v41[16 * (v44 >> 1)];
              uint64_t v47 = *v45;
              unsigned int v46 = (char *)(v45 + 2);
              uint64_t v10 = turi::query_eval::less_than_full_function::compare(v43, (void *)(v47 + 8), v18, v11);
              if (v10) {
                v44 += ~(v44 >> 1);
              }
              else {
                v44 >>= 1;
              }
              if (v10) {
                uint64_t v41 = v46;
              }
            }
            while (v44);
            uint64_t v48 = **(char ***)(a1 + 40);
            uint64_t v49 = *(char **)(*(void *)(a1 + 40) + 8);
            uint64_t v19 = v67;
          }
          else
          {
            uint64_t v48 = v40;
            uint64_t v49 = v40;
          }
          unint64_t v50 = (v41 - v40) >> 4;
          if (v50 != (v49 - v48) >> 4)
          {
            if (v41 == v40)
            {
              unint64_t v50 = 0;
              goto LABEL_64;
            }
            uint64_t v10 = turi::query_eval::less_than_full_function::compare(*(void **)(a1 + 48), v18, (void *)(*(void *)&v48[16 * v50] + 8), v11);
            if (!v10) {
              goto LABEL_64;
            }
          }
          --v50;
LABEL_64:
          unint64_t v51 = v50 >> 6;
          uint64_t v52 = 1 << v50;
          if ((*(void *)(**(void **)(a1 + 56) + 8 * (v50 >> 6)) & (1 << v50)) != 0)
          {
            uint64_t v53 = **(void **)(a1 + 64);
            do
            {
              while (*(unsigned char *)(v53 + v50) == 1)
                ;
            }
            while (atomic_exchange((atomic_uchar *volatile)(v53 + v50), 1u));
            uint64_t v54 = **(void **)(a1 + 56);
            if ((*(void *)(v54 + 8 * v51) & v52) != 0)
            {
              uint64_t v10 = **(void **)(a1 + 72) + 24 * v50;
              unint64_t v56 = *(unsigned __int8 **)v10;
              uint64_t v55 = *(unsigned __int8 **)(v10 + 8);
              if (v55 == *(unsigned __int8 **)v10)
              {
                if ((void *)v10 != v18) {
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v10, (uint64_t *)*v18, *v66, ((uint64_t)*v66 - *v18) >> 4);
                }
              }
              else
              {
                uint64_t v57 = *v18;
                if (&v55[-*(void *)v10] == (unsigned __int8 *)((char *)*v66 - *v18))
                {
                  while (1)
                  {
                    uint64_t v10 = std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>((uint64_t)&v71, v56, v57);
                    if (!v10) {
                      break;
                    }
                    v56 += 16;
                    v57 += 16;
                    if (v56 == v55) {
                      goto LABEL_78;
                    }
                  }
                  uint64_t v54 = **(void **)(a1 + 56);
                  unint64_t v51 = v50 >> 6;
                }
                atomic_fetch_and((atomic_ullong *volatile)(v54 + 8 * v51), ~v52);
              }
            }
LABEL_78:
            uint64_t v58 = **(void **)(a1 + 64);
            __dmb(0xBu);
            *(unsigned char *)(v58 + v5CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
          }
          *uint64_t v70 = 0;
          unint64_t v59 = **(void **)(a1 + 24);
          uint64_t v60 = *(void *)v14;
          if (v59 < (uint64_t)(*((void *)v14 + 1) - *(void *)v14) >> 4)
          {
            uint64_t v61 = 16 * v59;
            do
            {
              turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(v19, (uint64_t *)(**(void **)(v60 + v61) + 16 * v17));
              ++v59;
              uint64_t v60 = *(void *)v14;
              v61 += 16;
            }
            while (v59 < (uint64_t)(*((void *)v14 + 1) - *(void *)v14) >> 4);
          }
          uint64_t v62 = *(void **)(a1 + 80);
          uint64_t v63 = (long long *)(*v62 + 24 * *(void *)turi::thread::get_tls_data((turi::thread *)v10));
          MEMORY[0x22A614710](v63, *v69, *v70);
          pthread_mutex_lock((pthread_mutex_t *)(**(void **)(a1 + 88) + (v50 << 6)));
          *(void *)(**(void **)(a1 + 96) + 8 * v50) += *v70 + (**(void **)(a1 + 24) << 6) + 32;
          ++*(void *)(**(void **)(a1 + 104) + 8 * v50);
          std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100]<std::vector<turi::flexible_type>&,std::string&,0>(&v71, (uint64_t **)v18, v63);
          uint64_t v64 = *(void *)(**(void **)(a1 + 112) + 96 * v50 + 56);
          if (!v64) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, std::string *))(*(void *)v64 + 48))(v64, &v71);
          if (v73 < 0) {
            operator delete(__p);
          }
          uint64_t v74 = &v71;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          uint64_t v10 = pthread_mutex_unlock((pthread_mutex_t *)(**(void **)(a1 + 88) + (v50 << 6)));
          ++v17;
        }
        while (v17 != v68);
      }
    }
  }
  return 0;
}

void sub_223FEFDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  *(void *)(v24 - 88) = &a16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  switch(*(unsigned char *)(a3 + 12))
  {
    case 0:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(void *)a2 == *(void *)a3;
        case 1u:
          double v5 = *(double *)a2;
          uint64_t v6 = *(void *)a3;
          return v5 == (double)v6;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return *(void *)a3 == (uint64_t)(*(void *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          double v5 = *(double *)a3;
          uint64_t v6 = *(void *)a2;
          return v5 == (double)v6;
        case 1u:
          return *(double *)a2 == *(double *)a3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          double v73 = *(double *)a3;
          double v74 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
          return vabdd_f64(v74, v73) < 0.0000005;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v7 = a2[12];
      BOOL v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8) {
        return 0;
      }
      if (v7 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v9 = *(void *)a3;
      double v10 = *(double *)a2;
      char v11 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v12 = v11 < 0 ? *(void *)(*(void *)&v10 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v75 = *(char *)(v9 + 31) < 0 ? *(void *)(v9 + 16) : *(unsigned __int8 *)(v9 + 31);
      if (v12 != v75) {
        return 0;
      }
      uint64_t v76 = (void *)(*(void *)&v10 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        uint64_t v76 = (void *)*v76;
      }
      double v77 = (void *)(v9 + 8);
      if ((*(unsigned char *)(v9 + 31) & 0x80) != 0) {
        double v77 = (void *)*v77;
      }
      if (v11 < 0)
      {
        return memcmp(v76, v77, v12) == 0;
      }
      else
      {
        if (!v12) {
          return 1;
        }
        size_t v78 = v12 - 1;
        do
        {
          int v80 = *(unsigned __int8 *)v76;
          uint64_t v76 = (void *)((char *)v76 + 1);
          int v79 = v80;
          int v82 = *(unsigned __int8 *)v77;
          double v77 = (void *)((char *)v77 + 1);
          int v81 = v82;
          BOOL v8 = v78-- != 0;
          char v83 = v8;
          BOOL v3 = v79 == v81;
        }
        while (v79 == v81 && (v83 & 1) != 0);
      }
      return v3;
    case 3:
      unsigned int v13 = a2[12];
      if (v13 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v13 != 3) {
        return 0;
      }
      uint64_t v14 = *(double **)(*(void *)a2 + 8);
      long long v15 = *(double **)(*(void *)a2 + 16);
      unint64_t v16 = v15 - v14;
      uint64_t v17 = *(double **)(*(void *)a3 + 8);
      if (v16 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3) {
        return 0;
      }
      if (v15 == v14) {
        return 1;
      }
      if (v16 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v15 - v14;
      }
      if (*v14 != *v17) {
        return 0;
      }
      uint64_t v19 = 1;
      do
      {
        unint64_t v20 = v19;
        if (v18 == v19) {
          break;
        }
        double v21 = v14[v19];
        double v22 = v17[v19++];
      }
      while (v21 == v22);
      return v20 >= v16;
    case 4:
      unsigned int v23 = a2[12];
      if (v23 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v23 != 4) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v85, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)a3 + 8));
    case 5:
      unsigned int v25 = a2[12];
      if (v25 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v25 != 5) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v85, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(*(void *)a3 + 8));
    case 6:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(void *)a2 == (uint64_t)(*(void *)a3 << 8) >> 8 && *(_DWORD *)(a3 + 8) == 0;
        case 1u:
          double v74 = *(double *)a2;
          double v73 = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
          return vabdd_f64(v74, v73) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return ((*(void *)a3 ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(a3 + 8);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v26 = a2[12];
      if (v26 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return v26 == 7;
    case 8:
      unsigned int v27 = a2[12];
      if (v27 < 8 || v27 == 9) {
        return 0;
      }
      if (v27 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v29 = *(void *)a2 + 8;
      uint64_t v30 = *(void *)a3 + 8;
      return turi::image_type::operator==(v29, v30);
    case 9:
      unsigned int v32 = a2[12];
      if (v32 < 9) {
        return 0;
      }
      if (v32 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v33 = *(void *)a3;
      atomic_ullong *volatile v34 = *(void **)a2;
      if (*(void *)a3 == *(void *)a2) {
        return 1;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v34 + 1), v33 + 8)) {
        return 0;
      }
      BOOL v36 = (char *)v34[3];
      uint64_t v35 = (char *)v34[4];
      uint64_t v37 = v35 - v36;
      if (v35 == v36) {
        return 1;
      }
      if (!v34[1]) {
        return 1;
      }
      uint64_t v38 = 1;
      do
      {
        uint64_t v39 = *(void *)v36;
        v36 += 8;
        v38 *= v39;
      }
      while (v36 != v35);
      if (!v38) {
        return 1;
      }
      uint64_t v84 = 0;
      std::vector<unsigned long>::vector(&v85, v37 >> 3, &v84);
      uint64_t v40 = v85;
      uint64_t v41 = v86;
      uint64_t v42 = **(void **)(v33 + 8);
      uint64_t v43 = (char *)v86 - (char *)v85;
      unint64_t v44 = v86 - v85;
      unint64_t v45 = v44 - 1;
      if (v44 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v86 - v85;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v41 == v40)
    {
      uint64_t v54 = 0;
      double v55 = *(double *)(*(void *)v34[1] + 8 * v34[9]);
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t *)v34[6];
      uint64_t v49 = v40;
      uint64_t v50 = v46;
      do
      {
        uint64_t v52 = *v49++;
        uint64_t v51 = v52;
        uint64_t v53 = *v48++;
        v47 += v53 * v51;
        --v50;
      }
      while (v50);
      uint64_t v54 = 0;
      double v55 = *(double *)(*(void *)v34[1] + 8 * (v34[9] + v47));
      unint64_t v56 = *(uint64_t **)(v33 + 48);
      uint64_t v57 = v40;
      uint64_t v58 = v46;
      do
      {
        uint64_t v60 = *v57++;
        uint64_t v59 = v60;
        uint64_t v61 = *v56++;
        v54 += v61 * v59;
        --v58;
      }
      while (v58);
    }
    double v62 = *(double *)(v42 + 8 * (*(void *)(v33 + 72) + v54));
    BOOL v3 = v55 == v62;
    if (v55 != v62)
    {
LABEL_82:
      if (!v40) {
        return v3;
      }
      goto LABEL_117;
    }
    uint64_t v63 = v44;
    unint64_t v64 = v44 - 1;
    if (v43 >= 1) {
      break;
    }
LABEL_80:
    if ((v64 & 0x8000000000000000) != 0 || !v63) {
      goto LABEL_82;
    }
  }
  uint64_t v65 = v34[3];
  unint64_t v66 = v40[v45] + 1;
  v40[v45] = v66;
  if (v66 < *(void *)(v65 + 8 * v45))
  {
    uint64_t v63 = 1;
    unint64_t v64 = v44 - 1;
    goto LABEL_80;
  }
  uint64_t v67 = v65 - 16;
  unint64_t v68 = v44;
  uint64_t v69 = (unint64_t *)((char *)v40 + (v43 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    unint64_t v70 = v68 - 1;
    v69[1] = 0;
    if ((uint64_t)(v68 - 1) <= 0) {
      break;
    }
    unint64_t v71 = *v69 + 1;
    *v69-- = v71;
    unint64_t v72 = *(void *)(v67 + 8 * v68--);
    if (v71 < v72)
    {
      unint64_t v64 = v70 - 1;
      uint64_t v63 = 1;
      goto LABEL_80;
    }
  }
  BOOL v3 = 1;
LABEL_117:
  uint64_t v86 = v40;
  operator delete(v40);
  return v3;
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100]<std::vector<turi::flexible_type>&,std::string&,0>(std::string *a1, uint64_t **a2, long long *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  double v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_223FF0568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::query@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t **)(result + 56);
  uint64_t v5 = *(void *)(result + 64) - (void)v4;
  if (!v5)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    return result;
  }
  unint64_t v6 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (v4 != (uint64_t *)a3)
    {
      uint64_t v7 = *v4;
      *(void *)(a3 + 5) = *(uint64_t *)((char *)v4 + 5);
      *(void *)a3 = v7;
      int v8 = *((unsigned __int8 *)v4 + 12);
      *(unsigned char *)(a3 + 12) = v8;
      switch(v8)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          return result;
      }
    }
    return result;
  }
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(result + 16);
  if (v6 >= v10)
  {
    *(void *)a3 = 0;
    uint64_t v30 = (uint64_t)&v4[4 * (v5 >> 5) - 4];
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (v30 != a3)
    {
      uint64_t v31 = *(void *)v30;
      *(void *)(a3 + 5) = *(void *)(v30 + 5);
      *(void *)a3 = v31;
      int v32 = *(unsigned __int8 *)(v30 + 12);
      *(unsigned char *)(a3 + 12) = v32;
      switch(v32)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
LABEL_31:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return result;
      }
    }
    return result;
  }
  double v11 = *(double *)(result + 24);
  __n128 result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::fast_query_iterator((void *)result, a2);
  unint64_t v12 = *(void *)(result + 16);
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_33;
  }
  int v13 = (int)((double)(int)v6 + (double)v10 * v11);
  unint64_t v14 = (int)((double)(int)v6 - (double)v10 * v11) & ~((int)((double)(int)v6 - (double)v10 * v11) >> 31);
  if (v12 >= v14)
  {
    uint64_t v15 = *(void *)(result + 24);
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15 <= v13)
      {
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(unsigned char *)(a3 + 12) = 0;
        if (result != a3)
        {
          uint64_t v34 = *(void *)result;
          *(void *)(a3 + 5) = *(void *)(result + 5);
          *(void *)a3 = v34;
          LODWORD(v34) = *(unsigned __int8 *)(result + 12);
          *(unsigned char *)(a3 + 12) = v34;
          switch((int)v34)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              goto LABEL_31;
            default:
              return result;
          }
        }
        return result;
      }
      goto LABEL_11;
    }
LABEL_33:
    truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()();
  }
LABEL_11:
  uint64_t v16 = *(void *)(v9 + 56);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = v17 - v16;
  if (v17 == v16) {
    goto LABEL_27;
  }
  uint64_t v19 = 0;
  unint64_t v20 = v18 >> 5;
  if (v20 <= 1) {
    unint64_t v20 = 1;
  }
  double v21 = (uint64_t *)(v16 + 24);
  unint64_t v22 = -1;
  uint64_t v23 = -1;
  do
  {
    uint64_t v24 = *(v21 - 1);
    if (v24 < 0) {
      goto LABEL_33;
    }
    if (v24 >= (uint64_t)v14)
    {
      uint64_t v25 = *v21;
      if (*v21 < 0) {
        goto LABEL_33;
      }
      if (v25 <= v13)
      {
        double v26 = (double)(((unint64_t)(v24 + v25) >> 1) - v6);
        if (v26 < (double)v22)
        {
          unint64_t v22 = (unint64_t)v26;
          uint64_t v23 = v19;
        }
      }
    }
    v21 += 4;
    ++v19;
  }
  while (v20 != v19);
  if (v23 == -1)
  {
LABEL_27:
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (result != a3)
    {
      uint64_t v33 = *(void *)result;
      *(void *)(a3 + 5) = *(void *)(result + 5);
      *(void *)a3 = v33;
      LODWORD(v33) = *(unsigned __int8 *)(result + 12);
      *(unsigned char *)(a3 + 12) = v33;
      switch((int)v33)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          return result;
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    unsigned int v27 = (uint64_t *)(v16 + 32 * v23);
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (v27 != (uint64_t *)a3)
    {
      uint64_t v28 = *v27;
      *(void *)(a3 + 5) = *(uint64_t *)((char *)v27 + 5);
      *(void *)a3 = v28;
      int v29 = *((unsigned __int8 *)v27 + 12);
      *(unsigned char *)(a3 + 12) = v29;
      switch(v29)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::fast_query_iterator(void *a1, uint64_t a2)
{
  void v15[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1) {
    return a1[7];
  }
  if (v2 >= a1[2]) {
    return a1[8] - 32;
  }
  *(void *)((char *)v15 + 5) = 0;
  v15[0] = 0;
  v15[2] = a2 + 1;
  v15[3] = a2 + 1;
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    goto LABEL_17;
  }
  v5 >>= 5;
  float v6 = (float)v2;
  uint64_t v7 = a1[7];
  unint64_t v8 = v5;
  do
  {
    unint64_t v9 = v8 >> 1;
    uint64_t v10 = v7 + 32 * (v8 >> 1);
    float v11 = (float)((float)*(unint64_t *)(v10 + 16) + (float)*(unint64_t *)(v10 + 24)) * 0.5;
    uint64_t v12 = v10 + 32;
    v8 += ~(v8 >> 1);
    if (v11 < (float)((float)(v6 + v6) * 0.5)) {
      uint64_t v7 = v12;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  while (v8);
  if (v7 == v4)
  {
LABEL_17:
    uint64_t v3 = v3 + 32 * v5 - 32;
  }
  else if (v7 != v3)
  {
    if (vabds_f32((float)((float)*(unint64_t *)(v7 - 16) + (float)*(unint64_t *)(v7 - 8)) * 0.5, v6) >= vabds_f32((float)((float)*(unint64_t *)(v7 + 16) + (float)*(unint64_t *)(v7 + 24)) * 0.5, v6)) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v3 = v7 + 32 * v13;
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
  return v3;
}

void truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/basic_types.hpp", 91);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"x", 1);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(1ULL << 63)", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  float v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/basic_types.hpp", "operator()", 31, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FF0C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  float v11 = &a2[-2].n128_i64[1];
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (turi::query_eval::less_than_partial_function::operator()(a3, v11, v12, a6))
          {
            unint64_t v31 = v12->n128_u64[0];
            v12->n128_u64[0] = a2[-2].n128_u64[1];
            a2[-2].n128_u64[1] = v31;
            unint64_t v32 = v12->n128_u64[1];
            v12->n128_u64[1] = a2[-1].n128_u64[0];
            a2[-1].n128_u64[0] = v32;
            unint64_t v33 = v12[1].n128_u64[0];
            v12[1].n128_u64[0] = a2[-1].n128_u64[1];
            a2[-1].n128_u64[1] = v33;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12, &v12[1].n128_i64[1], v11, a3, a6);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12, &v12[1].n128_i64[1], (uint64_t *)&v12[3], v11, a3, a6);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12, &v12[1].n128_i64[1], (uint64_t *)&v12[3], &v12[4].n128_i64[1], v11, a3, a6);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *>(v12, a2, a2->n128_u64, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = (uint64_t *)v12 + 3 * (v16 >> 1);
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12, (uint64_t *)v12 + 3 * (v16 >> 1), v11, a3, a6);
      uint64_t v19 = v11;
      unint64_t v20 = (uint64_t *)v12 + 3 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(&v12[1].n128_i64[1], v20 - 3, (uint64_t *)&a2[-3], a3, v21);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)&v12[3], &v12[1].n128_i64[3 * v17 + 1], &a2[-5].n128_i64[1], a3, v22);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v20 - 3, v18, &v12[1].n128_i64[3 * v17 + 1], a3, v23);
      __n128 v25 = *v12;
      *uint64_t v12 = *(__n128 *)v18;
      *(__n128 *)uint64_t v18 = v25;
      unint64_t v24 = v12[1].n128_u64[0];
      v12[1].n128_u64[0] = v20[2];
      v20[2] = v24;
      float v11 = v19;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12 + 3 * (v16 >> 1), (uint64_t *)v12, v11, a3, a6);
    }
    if ((a5 & 1) == 0
      && (turi::query_eval::less_than_partial_function::operator()(a3, &v12[-2].n128_u64[1], v12, v25) & 1) == 0)
    {
      uint64_t v12 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(v12, a2, a3);
      goto LABEL_17;
    }
    double v26 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(v12, (void **)a2, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
    char v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v12, v26, a3, v27);
    uint64_t v12 = (__n128 *)(v26 + 3);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v26 + 3, (uint64_t *)a2, a3, v30))
    {
      a4 = -v14;
      a2 = (__n128 *)v26;
      if (v29) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if ((v29 & 1) == 0)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,false>(a1, v26, a3, -v14, a5 & 1);
      uint64_t v12 = (__n128 *)(v26 + 3);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v12, a2, a3, a6);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v12, a2, a3, a6);
  }
}

  float v11 = (uint64_t *)(a2 - 48);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 4);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (turi::query_eval::less_than_full_function::compare(a3, v11, v12, a6))
          {
            uint64_t v34 = *(void *)v12;
            *(void *)uint64_t v12 = *((void *)a2 - 6);
            *((void *)a2 - 6) = v34;
            uint64_t v35 = *((void *)v12 + 1);
            *((void *)v12 + 1) = *((void *)a2 - 5);
            *((void *)a2 - 5) = v35;
            BOOL v36 = *((void *)v12 + 2);
            *((void *)v12 + 2) = *((void *)a2 - 4);
            *((void *)a2 - 4) = v36;
            uint64_t v37 = *((void *)v12 + 5);
            uint64_t v38 = *(_OWORD *)(v12 + 24);
            uint64_t v39 = *((void *)a2 - 1);
            *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 - 24);
            *((void *)v12 + 5) = v39;
            *(_OWORD *)(a2 - 24) = v38;
            *((void *)a2 - 1) = v37;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v12, (uint64_t *)v12 + 6, v11, a3, a6);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v12, (uint64_t)(v12 + 48), (uint64_t)(v12 + 96), (uint64_t)v11, a3, a6);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v12, (uint64_t)(v12 + 48), (uint64_t)(v12 + 96), (uint64_t)(v12 + 144), (uint64_t)v11, a3, a6);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1151) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,std::pair<std::vector<turi::flexible_type>,std::string> *>(v12, a2, (uint64_t)a2, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = (uint64_t *)&v12[48 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v12, (uint64_t *)&v12[48 * (v16 >> 1)], v11, a3, a6);
      uint64_t v19 = v11;
      unint64_t v20 = &v12[48 * v17];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v12 + 6, (uint64_t *)v20 - 6, (uint64_t *)a2 - 12, a3, v21);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v12 + 12, (uint64_t *)&v12[48 * v17 + 48], (uint64_t *)a2 - 18, a3, v22);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v20 - 6, v18, (uint64_t *)&v12[48 * v17 + 48], a3, v23);
      unint64_t v24 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v18;
      *(_OWORD *)uint64_t v18 = v24;
      __n128 v25 = *((void *)v12 + 2);
      *((void *)v12 + 2) = v18[2];
      v18[2] = v25;
      char v28 = *(__n128 *)(v12 + 24);
      double v26 = *((void *)v12 + 5);
      __n128 v27 = *((void *)v20 + 5);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v20 + 24);
      *((void *)v12 + 5) = v27;
      *((void *)v20 + 5) = v26;
      *(__n128 *)(v20 + 24) = v28;
      float v11 = v19;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)&v12[48 * (v16 >> 1)], (uint64_t *)v12, v11, a3, a6);
    }
    if ((a5 & 1) == 0 && (turi::query_eval::less_than_full_function::compare(a3, (void *)v12 - 6, v12, v28) & 1) == 0)
    {
      uint64_t v12 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>((uint64_t)v12, (unint64_t)a2, a3);
      goto LABEL_17;
    }
    char v29 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>((uint64_t)v12, a2, a3);
    if ((v31 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v12, v29, a3, v30);
    uint64_t v12 = (char *)(v29 + 48);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(v29 + 48, (uint64_t)a2, a3, v33))
    {
      a4 = -v14;
      a2 = (char *)v29;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v32)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(a1, v29, a3, -v14, a5 & 1);
      uint64_t v12 = (char *)(v29 + 48);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v12, a2, a3, a6);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v12, a2, a3, a6);
  }
}

  float v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          __n128 v22 = *(a2 - 2);
          __n128 v21 = (long long *)(a2 - 2);
          if (v22 < *v11)
          {
            __n128 v30 = *(_OWORD *)v11;
            *(_OWORD *)float v11 = *v21;
            uint64_t *v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, v11 + 4, (_OWORD *)a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, v11 + 2, v11 + 4, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11 + 1, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v11 + 2, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)v17 - 1, v17, &v11[2 * v16 + 2]);
      char v29 = *(_OWORD *)v11;
      *(_OWORD *)float v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 2) >= *v11)
    {
      float v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>((long long *)v11, (long long *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)v11, (unint64_t *)v18);
    float v11 = (unint64_t *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)(v18 + 1), a2))
    {
      a4 = -v13;
      a2 = (unint64_t *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(a1, v18, a3, -v13, a5 & 1);
      float v11 = (unint64_t *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v11, a2);
  }
  else if (v11 != a2)
  {
    __n128 v23 = v11 + 2;
    while (v23 != a2)
    {
      unint64_t v24 = v23;
      __n128 v25 = a1[2];
      if (v25 < *a1)
      {
        double v26 = a1[3];
        __n128 v27 = v24;
        do
        {
          *(_OWORD *)__n128 v27 = *((_OWORD *)v27 - 1);
          char v28 = *(v27 - 4);
          v27 -= 2;
        }
        while (v25 < v28);
        *__n128 v27 = v25;
        v27[1] = v26;
      }
      __n128 v23 = v24 + 2;
      a1 = v24;
    }
  }
}

  uint64_t v12 = (double *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v28 = a2[-2].n128_f64[1];
          __n128 v27 = &a2[-2].n128_f64[1];
          if (v28 < *v12)
          {
            uint64_t v38 = *((void *)v12 + 2);
            uint64_t v35 = *(_OWORD *)v12;
            char v29 = *(_OWORD *)v27;
            void v12[2] = v27[2];
            *(_OWORD *)uint64_t v12 = v29;
            *(_OWORD *)__n128 v27 = v35;
            *((void *)v27 + 2) = v38;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)v12, (long long *)(v12 + 3), (long long *)&a2[-2].n128_i8[8]);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v12, (uint64_t)(v12 + 3), (uint64_t)(v12 + 6), &a2[-2].n128_u64[1]);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__n128 *)v12, (__n128 *)(v12 + 3), (__n128 *)v12 + 3, (unint64_t *)v12 + 9, &a2[-2].n128_u64[1]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (double *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v12, a2, a2, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)v12, (long long *)&v12[3 * (v16 >> 1)], (long long *)&a2[-2].n128_i8[8]);
      uint64_t v19 = 3 * v17;
      unint64_t v20 = (long long *)&v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)(v12 + 3), v20, (long long *)&a2[-3]);
      __n128 v21 = (long long *)(v12 + 6);
      __n128 v22 = (long long *)&v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v21, v22, (long long *)&a2[-5].n128_i8[8]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v20, (long long *)v18, v22);
      uint64_t v37 = *(void *)(a1 + 16);
      uint64_t v34 = *(_OWORD *)a1;
      __n128 v23 = *(_OWORD *)v18;
      *(double *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      *((void *)v18 + 2) = v37;
      *(_OWORD *)uint64_t v18 = v34;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)&v12[3 * (v16 >> 1)], (long long *)v12, (long long *)&a2[-2].n128_i8[8]);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(double *)(a1 - 24) >= *(double *)a1)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>((double *)a1, a2->n128_f64);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(a1, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    double v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v24);
    uint64_t v12 = (double *)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v24 + 24, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (__n128 *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (double *)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v12, (uint64_t)a2);
  }
  else if (v12 != (double *)a2)
  {
    __n128 v30 = v12 + 3;
    while (v30 != (double *)a2)
    {
      unint64_t v31 = (uint64_t)v30;
      unint64_t v32 = *(double *)(a1 + 24);
      if (v32 < *(double *)a1)
      {
        BOOL v36 = *(_OWORD *)(a1 + 32);
        do
        {
          *(_OWORD *)__n128 v30 = *(_OWORD *)(v30 - 3);
          v30[2] = *(v30 - 1);
          unint64_t v33 = *(v30 - 6);
          v30 -= 3;
        }
        while (v32 < v33);
        *__n128 v30 = v32;
        *(_OWORD *)(v30 + 1) = v36;
      }
      __n128 v30 = (double *)(v31 + 24);
      a1 = v31;
    }
  }
}

  uint64_t v12 = (long long *)&a2[-2].n128_i8[8];
  uint64_t v13 = (long long *)a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v13;
    uint64_t v15 = v14;
    unint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-2].n128_i8[8], v13))
          {
            unint64_t v32 = *((void *)v13 + 2);
            __n128 v30 = *v13;
            char v28 = *v12;
            *((void *)v13 + 2) = a2[-1].n128_u64[1];
            void *v13 = v28;
            *uint64_t v12 = v30;
            a2[-1].n128_u64[1] = v32;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v13, (long long *)((char *)v13 + 24), (long long *)&a2[-2].n128_i8[8], a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)v13 + 72, (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 575) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)v13, a2, a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
      }
      return;
    }
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = (long long *)((char *)v13 + 24 * (v17 >> 1));
    if ((unint64_t)v16 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v13, (long long *)((char *)v13 + 24 * (v17 >> 1)), (long long *)&a2[-2].n128_i8[8], a3);
      unint64_t v20 = 3 * v18;
      __n128 v21 = (long long *)((char *)v13 + 24 * v18 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((long long *)((char *)v13 + 24), v21, (long long *)&a2[-3], a3);
      __n128 v22 = v13 + 3;
      __n128 v23 = (long long *)((char *)v13 + 8 * v20 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v22, v23, (long long *)&a2[-5].n128_i8[8], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v21, v19, v23, a3);
      unint64_t v31 = *(void *)(a1 + 16);
      char v29 = *(_OWORD *)a1;
      unint64_t v24 = *v19;
      *(void *)(a1 + 16) = *((void *)v19 + 2);
      *(_OWORD *)a1 = v24;
      *((void *)v19 + 2) = v31;
      *uint64_t v19 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((long long *)((char *)v13 + 24 * (v17 >> 1)), v13, (long long *)&a2[-2].n128_i8[8], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 24), (long long *)a1) & 1) == 0)
    {
      uint64_t v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>((long long *)a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    __n128 v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>((long long *)a1, (unint64_t)a2, (uint64_t (**)(char *, long long *))a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    __n128 v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a1, v25, a3);
    uint64_t v13 = (long long *)(v25 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v25 + 24, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(a1, v25, a3, -v15, a5 & 1);
      uint64_t v13 = (long long *)(v25 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

  float v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)a2 - 3, v12))
          {
            unint64_t v31 = v12[2];
            char v29 = *(_OWORD *)v12;
            __n128 v27 = *v11;
            void v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            uint64_t *v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      unint64_t v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (const void **)a2 - 6, a3);
      __n128 v21 = v12 + 6;
      __n128 v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (const void **)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22, a3);
      __n128 v30 = *(const void **)(a1 + 16);
      char v28 = *(_OWORD *)a1;
      __n128 v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    double v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24, a3);
    uint64_t v12 = (const void **)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)a2, a3);
  }
}

  float v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v24 = *((void *)a2 - 2);
          __n128 v25 = *v11;
          if (v24 >= *v11)
          {
            if (v25 < v24) {
              return;
            }
            __n128 v27 = *(a2 - 1);
            double v26 = *((double *)v11 + 1);
            if (v27 >= v26) {
              return;
            }
          }
          else
          {
            double v26 = *((double *)v11 + 1);
            __n128 v27 = *(a2 - 1);
          }
          uint64_t *v11 = v24;
          *((void *)a2 - 2) = v25;
          *((double *)v11 + 1) = v27;
          *(a2 - 1) = v26;
          return;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11, v11 + 2, (unint64_t *)a2 - 2);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          return;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(v11 + 6), (unint64_t *)a2 - 2);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (unint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11, &v11[2 * (v15 >> 1)], (unint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11 + 2, v17 - 2, (unint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11 + 4, &v11[2 * v16 + 2], (unint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      *unint64_t v17 = v18;
      uint64_t v19 = v11[1];
      v11[1] = v17[1];
      v17[1] = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&v11[2 * (v15 >> 1)], v11, (unint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v20 = *(v11 - 2);
    if (v20 >= *v11 && (*v11 < v20 || *((double *)v11 - 1) >= *((double *)v11 + 1)))
    {
      float v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(v11, a2);
      goto LABEL_20;
    }
LABEL_15:
    __n128 v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>((double *)v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    __n128 v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)v21);
    float v11 = (unint64_t *)(v21 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)(v21 + 2), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(a1, v21, a3, -v13, a5 & 1);
      float v11 = (unint64_t *)(v21 + 2);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v11, (uint64_t *)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v11, (uint64_t *)a2);
  }
}

  float v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v24 = *((void *)a2 - 2);
          __n128 v25 = *v11;
          if (v24 >= *v11)
          {
            if (v25 < v24) {
              return;
            }
            __n128 v27 = *(a2 - 1);
            double v26 = *((double *)v11 + 1);
            if (v27 >= v26) {
              return;
            }
          }
          else
          {
            double v26 = *((double *)v11 + 1);
            __n128 v27 = *(a2 - 1);
          }
          uint64_t *v11 = v24;
          *((void *)a2 - 2) = v25;
          *((double *)v11 + 1) = v27;
          *(a2 - 1) = v26;
          return;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11, v11 + 2, (unint64_t *)a2 - 2);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          return;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(v11 + 6), (unint64_t *)a2 - 2);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (unint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>((uint64_t)v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11, &v11[2 * (v15 >> 1)], (unint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11 + 2, v17 - 2, (unint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v11 + 4, &v11[2 * v16 + 2], (unint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      *unint64_t v17 = v18;
      uint64_t v19 = v11[1];
      v11[1] = v17[1];
      v17[1] = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&v11[2 * (v15 >> 1)], v11, (unint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v20 = *(v11 - 2);
    if (v20 >= *v11 && (*v11 < v20 || *((double *)v11 - 1) >= *((double *)v11 + 1)))
    {
      float v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(v11, a2);
      goto LABEL_20;
    }
LABEL_15:
    __n128 v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>((double *)v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    __n128 v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>((uint64_t)v11, (uint64_t)v21);
    float v11 = (unint64_t *)(v21 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>((uint64_t)(v21 + 2), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(a1, v21, a3, -v13, a5 & 1);
      float v11 = (unint64_t *)(v21 + 2);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v11, (uint64_t *)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v11, (uint64_t *)a2);
  }
}

  float v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    uint64_t v15 = (a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          __n128 v22 = *((void *)a2 - 2);
          __n128 v21 = (long long *)(a2 - 16);
          if (v22 < (int64_t)v11->n128_u64[0])
          {
            __n128 v30 = (__int128)*v11;
            uint64_t *v11 = (__n128)*v21;
            uint64_t *v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)&v11[2], (_OWORD *)a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((char *)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[v15 >> 1], (uint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[1], v17 - 2, (uint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[2], (uint64_t *)&v11[v16 + 1], (uint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v17 - 1, v17, (uint64_t *)&v11[v16 + 1]);
      char v29 = (__int128)*v11;
      uint64_t *v11 = *(__n128 *)v17;
      *(_OWORD *)unint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[v15 >> 1], (uint64_t *)v11, (uint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((int64_t)v11[-1].n128_u64[0] >= (int64_t)v11->n128_u64[0])
    {
      float v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>((uint64_t *)v11, (uint64_t *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)v11, v18);
    float v11 = (__n128 *)(v18 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)(v18 + 2), a2))
    {
      a4 = -v13;
      a2 = (char *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,false>(a1, v18, a3, -v13, a5 & 1);
      float v11 = (__n128 *)(v18 + 2);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    __n128 v23 = (char *)&v11[1];
    while (v23 != a2)
    {
      unint64_t v24 = v23;
      __n128 v25 = a1[1].n128_i64[0];
      if (v25 < (int64_t)a1->n128_u64[0])
      {
        double v26 = a1[1].n128_i64[1];
        __n128 v27 = v24;
        do
        {
          *(_OWORD *)__n128 v27 = *((_OWORD *)v27 - 1);
          char v28 = *((void *)v27 - 4);
          v27 -= 16;
        }
        while (v25 < v28);
        *(void *)__n128 v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      __n128 v23 = v24 + 16;
      a1 = (__n128 *)v24;
    }
  }
}

  float v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    uint64_t v15 = (a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          __n128 v22 = *((void *)a2 - 2);
          __n128 v21 = (long long *)(a2 - 16);
          if (v22 < (int64_t)v11->n128_u64[0])
          {
            __n128 v30 = (__int128)*v11;
            uint64_t *v11 = (__n128)*v21;
            uint64_t *v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)&v11[2], (_OWORD *)a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[1], (uint64_t *)&v11[2], v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((char *)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v11, (uint64_t *)&v11[v15 >> 1], (uint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[1], v17 - 2, (uint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[2], (uint64_t *)&v11[v16 + 1], (uint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)v17 - 1, v17, (uint64_t *)&v11[v16 + 1]);
      char v29 = (__int128)*v11;
      uint64_t *v11 = *(__n128 *)v17;
      *(_OWORD *)unint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)&v11[v15 >> 1], (uint64_t *)v11, (uint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((int64_t)v11[-1].n128_u64[0] >= (int64_t)v11->n128_u64[0])
    {
      float v11 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>((uint64_t *)v11, (uint64_t *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>((uint64_t)v11, v18);
    float v11 = (__n128 *)(v18 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>((uint64_t)(v18 + 2), a2))
    {
      a4 = -v13;
      a2 = (char *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*,false>(a1, v18, a3, -v13, a5 & 1);
      float v11 = (__n128 *)(v18 + 2);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(v11, a2);
  }
  else if (v11 != (__n128 *)a2)
  {
    __n128 v23 = (char *)&v11[1];
    while (v23 != a2)
    {
      unint64_t v24 = v23;
      __n128 v25 = a1[1].n128_i64[0];
      if (v25 < (int64_t)a1->n128_u64[0])
      {
        double v26 = a1[1].n128_i64[1];
        __n128 v27 = v24;
        do
        {
          *(_OWORD *)__n128 v27 = *((_OWORD *)v27 - 1);
          char v28 = *((void *)v27 - 4);
          v27 -= 16;
        }
        while (v25 < v28);
        *(void *)__n128 v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      __n128 v23 = v24 + 16;
      a1 = (__n128 *)v24;
    }
  }
}

  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 3;
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 2, v12))
          {
            __n128 v25 = *v12;
            *uint64_t v12 = *(a2 - 2);
            *(a2 - 2) = v25;
            double v26 = v12[1];
            v12[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12, v12 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12, v12 + 2, v12 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*>((uint64_t)v12, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[2 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12, &v12[2 * (v16 >> 1)], a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12 + 2, v18 - 2, a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12 + 4, &v12[2 * v17 + 2], a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v18 - 2, v18, &v12[2 * v17 + 2], a3);
      uint64_t v19 = *v12;
      *uint64_t v12 = *v18;
      *uint64_t v18 = v19;
      unint64_t v20 = v12[1];
      v12[1] = v18[1];
      v18[1] = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(&v12[2 * (v16 >> 1)], v12, a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v12 - 2, v12) & 1) == 0)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned int> *,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&)>(v12, a2, (uint64_t (**)(uint64_t *, _DWORD *))a3);
      goto LABEL_18;
    }
LABEL_13:
    a6.n128_f32[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned int> *,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&)>(v12, a2, (uint64_t (**)(_DWORD *, uint64_t *))a3);
    __n128 v22 = v21;
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v12, v21, a3);
    uint64_t v12 = v22 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v22 + 2, a2, a3))
    {
      a4 = -v14;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v24)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(a1, v22, a3, -v14, a5 & 1, a6);
      uint64_t v12 = v22 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>((uint64_t)v12, a2, (uint64_t (**)(void *, void))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>((uint64_t)v12, a2, (uint64_t (**)(void *, _DWORD *))a3);
  }
}

uint64_t turi::query_eval::less_than_partial_function::operator()(uint64_t a1, void *a2, void *a3, __n128 a4)
{
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 == v5) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v10 = &turi::FLEX_UNDEFINED;
LABEL_3:
  uint64_t v11 = *v4;
  unint64_t v12 = *(void *)(*(void *)(a1 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
  uint64_t v13 = (unsigned __int8 *)(*a2 + 16 * *v4);
  switch(*((unsigned char *)v10 + 3980))
  {
    case 0:
      switch(v13[12])
      {
        case 0u:
          if (*(void *)v13 == turi::FLEX_UNDEFINED) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 1u:
          a4.n128_u64[0] = *(void *)v13;
          uint64_t v65 = turi::FLEX_UNDEFINED;
          goto LABEL_158;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v13 << 8) >> 8 && !*((_DWORD *)v13 + 2)) {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(v13[12])
      {
        case 0u:
          a4.n128_u64[0] = turi::FLEX_UNDEFINED;
          uint64_t v65 = *(void *)v13;
LABEL_158:
          double v124 = (double)v65;
          goto LABEL_159;
        case 1u:
          a4.n128_u64[0] = *(void *)v13;
          double v124 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_159:
          if (a4.n128_f64[0] != v124) {
            goto LABEL_76;
          }
          goto LABEL_168;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          a4.n128_f64[0] = vabdd_f64((double)*((int *)v13 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v13 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_167;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v14 = v13[12];
      if (v14 - 3 < 7 || v14 < 2) {
        goto LABEL_76;
      }
      if (v14 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v16 = *(void *)v13;
      int v17 = *(char *)(*(void *)v13 + 31);
      uint64_t v18 = *(unsigned __int8 *)(*(void *)v13 + 31);
      size_t v19 = v17 < 0 ? *(void *)(v16 + 16) : v18;
      uint64_t v180 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(void *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v19 != v180) {
        goto LABEL_76;
      }
      v181 = (unsigned __int8 *)(v16 + 8);
      if ((v18 & 0x80) != 0) {
        v181 = *(unsigned __int8 **)v181;
      }
      uint64_t v182 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        uint64_t v182 = *(unsigned __int8 **)v182;
      }
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(v181, v182, v19)) {
          goto LABEL_76;
        }
      }
      else if (v19)
      {
        while (*v181 == *v182)
        {
          ++v181;
          ++v182;
          if (!--v19) {
            goto LABEL_168;
          }
        }
LABEL_76:
        unint64_t v68 = (unsigned __int8 *)(*a3 + 16 * v11);
        switch(*((unsigned char *)v10 + 3980))
        {
          case 0:
            switch(v68[12])
            {
              case 0u:
                if (*(void *)v68 == turi::FLEX_UNDEFINED) {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              case 1u:
                a4.n128_u64[0] = *(void *)v68;
                uint64_t v120 = turi::FLEX_UNDEFINED;
                goto LABEL_176;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v68 << 8) >> 8 && !*((_DWORD *)v68 + 2)) {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 1:
            switch(v68[12])
            {
              case 0u:
                a4.n128_u64[0] = turi::FLEX_UNDEFINED;
                uint64_t v120 = *(void *)v68;
LABEL_176:
                double v126 = (double)v120;
                goto LABEL_181;
              case 1u:
                a4.n128_u64[0] = *(void *)v68;
                double v126 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_181:
                if (a4.n128_f64[0] == v126) {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                a4.n128_f64[0] = vabdd_f64((double)*((int *)v68 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v68 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_185;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 2:
            unsigned int v69 = v68[12];
            if (v69 - 3 < 7 || v69 < 2) {
              goto LABEL_313;
            }
            if (v69 != 2) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            uint64_t v71 = *(void *)v68;
            int v72 = *(char *)(*(void *)v68 + 31);
            uint64_t v73 = *(unsigned __int8 *)(*(void *)v68 + 31);
            size_t v74 = v72 < 0 ? *(void *)(v71 + 16) : v73;
            uint64_t v183 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
                 ? *(void *)(turi::FLEX_UNDEFINED + 16)
                 : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v74 != v183) {
              goto LABEL_313;
            }
            v184 = (unsigned __int8 *)(v71 + 8);
            if ((v73 & 0x80) != 0) {
              v184 = *(unsigned __int8 **)v184;
            }
            unsigned int v185 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
              unsigned int v185 = *(unsigned __int8 **)v185;
            }
            if ((v73 & 0x80) == 0)
            {
              if (!v74) {
                return ((v12 >> v9) & 1) == 0;
              }
              do
              {
                if (*v184 != *v185) {
                  goto LABEL_313;
                }
                ++v184;
                ++v185;
                --v74;
              }
              while (v74);
              return ((v12 >> v9) & 1) == 0;
            }
            if (!memcmp(v184, v185, v74)) {
              return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 3:
            unsigned int v75 = v68[12];
            if (v75 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v75 != 3) {
              goto LABEL_313;
            }
            uint64_t v78 = *(void *)v68 + 8;
            uint64_t v76 = *(unint64_t **)v78;
            double v77 = *(unint64_t **)(v78 + 8);
            unint64_t v79 = ((uint64_t)v77 - *(void *)v78) >> 3;
            int v80 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v79 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v80) >> 3) {
              goto LABEL_313;
            }
            if (v77 == v76) {
              return ((v12 >> v9) & 1) == 0;
            }
            if (v79 <= 1) {
              unint64_t v79 = 1;
            }
            while (1)
            {
              a4.n128_u64[0] = *v76;
              if (*(double *)v76 != *v80) {
                break;
              }
              ++v80;
              ++v76;
              if (!--v79) {
                return ((v12 >> v9) & 1) == 0;
              }
            }
            goto LABEL_313;
          case 4:
            unsigned int v81 = v68[12];
            if (v81 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v81 == 4
              && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(void *)v68 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
            {
              return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 5:
            unsigned int v121 = v68[12];
            if (v121 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v121 == 5
              && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(void *)v68 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 6:
            switch(v68[12])
            {
              case 0u:
                if (*(void *)v68 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268081F88) {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              case 1u:
                a4.n128_f64[0] = vabdd_f64(*(double *)v68, (double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_185:
                if (a4.n128_f64[0] < 0.0000005) {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (((turi::FLEX_UNDEFINED ^ *(void *)v68) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v68 + 2) == dword_268081F88)
                {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7:
            unsigned int v122 = v68[12];
            if (v122 < 7 || v122 - 8 < 2) {
              goto LABEL_313;
            }
            if (v122 != 7) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return ((v12 >> v9) & 1) == 0;
          case 8:
            unsigned int v123 = v68[12];
            if (v123 < 8) {
              goto LABEL_313;
            }
            if (v123 != 8)
            {
              if (v123 != 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_313;
            }
            if (!turi::image_type::operator==(*(void *)v68 + 8, turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_313;
            }
            return ((v12 >> v9) & 1) == 0;
          case 9:
            unsigned int v82 = v68[12];
            if (v82 < 9) {
              goto LABEL_313;
            }
            if (v82 != 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            char v83 = *(void **)v68;
            if (turi::FLEX_UNDEFINED == *(void *)v68) {
              return ((v12 >> v9) & 1) == 0;
            }
            uint64_t v263 = turi::FLEX_UNDEFINED;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v83 + 1), turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_313;
            }
            uint64_t v85 = (char *)v83[3];
            uint64_t v84 = (char *)v83[4];
            uint64_t v86 = v84 - v85;
            if (v84 == v85) {
              return ((v12 >> v9) & 1) == 0;
            }
            if (!v83[1]) {
              return ((v12 >> v9) & 1) == 0;
            }
            uint64_t v87 = 1;
            do
            {
              uint64_t v88 = *(void *)v85;
              v85 += 8;
              v87 *= v88;
            }
            while (v85 != v84);
            if (!v87) {
              return ((v12 >> v9) & 1) == 0;
            }
            uint64_t v266 = 0;
            std::vector<unsigned long>::vector(&v267, v86 >> 3, &v266);
            unint64_t v89 = v267;
            unint64_t v90 = v268;
            uint64_t v91 = **(void **)(v263 + 8);
            uint64_t v92 = (char *)v268 - (char *)v267;
            unint64_t v93 = v268 - v267;
            unint64_t v94 = v93 - 1;
            if (v93 <= 1) {
              uint64_t v95 = 1;
            }
            else {
              uint64_t v95 = v268 - v267;
            }
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        do
        {
          if (v90 == v89)
          {
            uint64_t v103 = 0;
            double v104 = *(double *)(*(void *)v83[1] + 8 * v83[9]);
          }
          else
          {
            uint64_t v96 = 0;
            size_t v97 = (uint64_t *)v83[6];
            unsigned int v98 = v89;
            uint64_t v99 = v95;
            do
            {
              uint64_t v101 = *v98++;
              uint64_t v100 = v101;
              uint64_t v102 = *v97++;
              v96 += v102 * v100;
              --v99;
            }
            while (v99);
            uint64_t v103 = 0;
            double v104 = *(double *)(*(void *)v83[1] + 8 * (v83[9] + v96));
            double v105 = *(uint64_t **)(v263 + 48);
            uint64_t v106 = v89;
            uint64_t v107 = v95;
            do
            {
              uint64_t v109 = *v106++;
              uint64_t v108 = v109;
              uint64_t v110 = *v105++;
              v103 += v110 * v108;
              --v107;
            }
            while (v107);
          }
          double v111 = *(double *)(v91 + 8 * (*(void *)(v263 + 72) + v103));
          if (v104 != v111) {
            break;
          }
          uint64_t v112 = v93;
          unint64_t v113 = v93 - 1;
          if (v92 >= 1)
          {
            uint64_t v114 = v83[3];
            unint64_t v115 = v89[v94] + 1;
            v89[v94] = v115;
            unint64_t v116 = (v92 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v117 = v93 - 1;
            if (v115 >= *(void *)(v114 + 8 * v94))
            {
              do
              {
                *(uint64_t *)((char *)v89 + v116 + 8) = 0;
                if (v117 <= 0)
                {
                  v268 = v89;
                  operator delete(v89);
                  return ((v12 >> v9) & 1) == 0;
                }
                --v117;
                unint64_t v118 = *(uint64_t *)((char *)v89 + v116) + 1;
                *(uint64_t *)((char *)v89 + v116) = v118;
                unint64_t v119 = *(void *)(v114 + v116);
                v116 -= 8;
              }
              while (v118 >= v119);
              uint64_t v112 = 1;
              if ((v117 & 0x8000000000000000) == 0) {
                continue;
              }
              break;
            }
            uint64_t v112 = 1;
            unint64_t v113 = v93 - 1;
          }
          if ((v113 & 0x8000000000000000) != 0) {
            break;
          }
        }
        while (v112);
        if (v89)
        {
          v268 = v89;
          operator delete(v89);
        }
        if (v104 != v111)
        {
LABEL_313:
          uint64_t v191 = *a3 + 16 * v11;
          uint64_t v192 = *a2 + 16 * v11;
          uint64_t v10 = &turi::FLEX_UNDEFINED;
          switch(*(unsigned char *)(v191 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v192 + 12))
              {
                case 0:
                  if (*(void *)v192 < *(void *)v191) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v192;
                  double v241 = (double)*(uint64_t *)v191;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  if (*(void *)v191 > (uint64_t)(*(void *)v192 << 8) >> 8) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v192 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(void *)v191;
                  if (*(double *)v191 > (double)*(uint64_t *)v192) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v192;
                  double v241 = *(double *)v191;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  double v241 = *(double *)v191;
                  a4.n128_f64[0] = (double)*(int *)(v192 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(void *)v192 << 8) >> 8);
LABEL_423:
                  if (a4.n128_f64[0] < v241) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v193 = *(unsigned __int8 *)(v192 + 12);
              if (v193 - 3 < 7 || v193 < 2) {
                goto LABEL_355;
              }
              if (v193 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              unint64_t v195 = *(void *)v192;
              if (*(char *)(v195 + 31) < 0)
              {
                size_t v196 = *(const void **)(v195 + 8);
                size_t v197 = *(void *)(v195 + 16);
              }
              else
              {
                size_t v196 = (const void *)(v195 + 8);
                size_t v197 = *(unsigned __int8 *)(v195 + 31);
              }
              double v245 = *(double *)v191;
              size_t v246 = (const void *)(*(void *)&v245 + 8);
              size_t v247 = *(unsigned __int8 *)(*(void *)&v245 + 31);
              size_t v249 = *(const void **)(*(void *)&v245 + 8);
              size_t v248 = *(void *)(*(void *)&v245 + 16);
              if ((v247 & 0x80u) == 0) {
                size_t v250 = v247;
              }
              else {
                size_t v250 = v248;
              }
              if ((v247 & 0x80u) == 0) {
                size_t v251 = v246;
              }
              else {
                size_t v251 = v249;
              }
              if (v250 >= v197) {
                size_t v252 = v197;
              }
              else {
                size_t v252 = v250;
              }
              int v253 = memcmp(v196, v251, v252);
              BOOL v254 = v197 < v250;
              if (v253) {
                BOOL v254 = v253 < 0;
              }
              uint64_t v10 = &turi::FLEX_UNDEFINED;
              if (v254) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_356;
            case 3:
              unsigned int v198 = *(unsigned __int8 *)(v192 + 12);
              if (v198 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v198 != 3) {
                goto LABEL_355;
              }
              double v199 = *(double *)v191;
              uint64_t v200 = *(unint64_t **)(*(void *)v192 + 8);
              uint64_t v201 = *(void *)(*(void *)v192 + 16);
              unint64_t v202 = *(double **)(*(void *)&v199 + 8);
              unint64_t v203 = (uint64_t)(*(void *)(*(void *)&v199 + 16) - (void)v202) >> 3;
              uint64_t v204 = v201 - (void)v200;
              BOOL v256 = v204 == 0;
              unint64_t v205 = v204 >> 3;
              if (v256) {
                goto LABEL_339;
              }
              if (v205 <= 1) {
                uint64_t v206 = 1;
              }
              else {
                uint64_t v206 = v205;
              }
              unint64_t v207 = v203;
              break;
            case 4:
              unsigned int v208 = *(unsigned __int8 *)(v192 + 12);
              if (v208 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v208 != 4) {
                goto LABEL_355;
              }
              if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v267, (uint64_t *)(*(void *)v192 + 8), (void *)(*(void *)v191 + 8)))
              {
                return (v12 >> v9) & 1;
              }
              goto LABEL_356;
            case 5:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 6:
              switch(*(unsigned char *)(v192 + 12))
              {
                case 0:
                  if (*(void *)v192 < (uint64_t)(*(void *)v191 << 8) >> 8) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(void *)v192;
                  if ((double)*(int *)(v191 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v191 << 8) >> 8) > *(double *)v192) {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  uint64_t v242 = (uint64_t)(*(void *)v192 << 8) >> 8;
                  if (v242 < (uint64_t)(*(void *)v191 << 8) >> 8
                    || v242 == (uint64_t)(*(void *)v191 << 8) >> 8 && *(_DWORD *)(v192 + 8) < *(_DWORD *)(v191 + 8))
                  {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 8:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_355;
            case 9:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_355:
              turi::flexible_type_fail(0);
              goto LABEL_356;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v207)
          {
            a4.n128_u64[0] = *v200;
            if (*(double *)v200 > *v202) {
              break;
            }
            if (*(double *)v200 < *v202) {
              return (v12 >> v9) & 1;
            }
            --v207;
            ++v200;
            ++v202;
            if (!--v206)
            {
LABEL_339:
              if (v205 < v203) {
                return (v12 >> v9) & 1;
              }
              break;
            }
          }
LABEL_356:
          uint64_t v209 = *a3 + 16 * v11;
          uint64_t v210 = *a2 + 16 * v11;
          switch(*(unsigned char *)(v209 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v210 + 12))
              {
                case 0:
                  if (*(void *)v210 > *(void *)v209) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v210;
                  double v243 = (double)*(uint64_t *)v209;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  if (*(void *)v209 < (uint64_t)(*(void *)v210 << 8) >> 8) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v210 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(void *)v209;
                  if (*(double *)v209 < (double)*(uint64_t *)v210) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v210;
                  double v243 = *(double *)v209;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  double v243 = *(double *)v209;
                  a4.n128_f64[0] = (double)*(int *)(v210 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(void *)v210 << 8) >> 8);
LABEL_436:
                  if (a4.n128_f64[0] > v243) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v211 = *(unsigned __int8 *)(v210 + 12);
              if (v211 - 3 < 7 || v211 < 2) {
                goto LABEL_415;
              }
              if (v211 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              double v213 = *(double *)v209;
              unint64_t v214 = *(void *)v210;
              int v217 = *(const void **)(v214 + 8);
              unint64_t v215 = v214 + 8;
              v216 = v217;
              int v218 = *(char *)(v215 + 23);
              int v221 = *(const void **)(*(void *)&v213 + 8);
              uint64_t v219 = *(void *)&v213 + 8;
              uint64_t v220 = v221;
              int v222 = *(char *)(v219 + 23);
              if (v222 >= 0) {
                size_t v223 = *(unsigned __int8 *)(v219 + 23);
              }
              else {
                size_t v223 = *(void *)(v219 + 8);
              }
              if (v222 >= 0) {
                size_t v224 = (const void *)v219;
              }
              else {
                size_t v224 = v220;
              }
              if (v218 >= 0) {
                size_t v225 = *(unsigned __int8 *)(v215 + 23);
              }
              else {
                size_t v225 = *(void *)(v215 + 8);
              }
              if (v218 >= 0) {
                size_t v226 = (const void *)v215;
              }
              else {
                size_t v226 = v216;
              }
              if (v225 >= v223) {
                size_t v227 = v223;
              }
              else {
                size_t v227 = v225;
              }
              int v228 = memcmp(v224, v226, v227);
              BOOL v229 = v223 < v225;
              if (v228) {
                BOOL v229 = v228 < 0;
              }
              uint64_t v10 = &turi::FLEX_UNDEFINED;
              if (v229) {
                return ((v12 >> v9) & 1) == 0;
              }
              goto LABEL_416;
            case 3:
              unsigned int v231 = *(unsigned __int8 *)(v210 + 12);
              if (v231 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v231 != 3) {
                goto LABEL_415;
              }
              double v232 = *(double *)v209;
              uint64_t v233 = *(unint64_t **)(*(void *)v210 + 8);
              uint64_t v234 = *(void *)(*(void *)v210 + 16);
              unint64_t v235 = *(double **)(*(void *)&v232 + 8);
              unint64_t v236 = (uint64_t)(*(void *)(*(void *)&v232 + 16) - (void)v235) >> 3;
              uint64_t v237 = v234 - (void)v233;
              BOOL v256 = v237 == 0;
              unint64_t v238 = v237 >> 3;
              if (v256) {
                goto LABEL_405;
              }
              if (v238 <= 1) {
                uint64_t v239 = 1;
              }
              else {
                uint64_t v239 = v238;
              }
              unint64_t v240 = v236;
              break;
            case 4:
              unsigned int v230 = *(unsigned __int8 *)(v210 + 12);
              if (v230 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v230 != 4) {
                goto LABEL_415;
              }
              if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v267, (uint64_t *)(*(void *)v210 + 8), (void *)(*(void *)v209 + 8)))
              {
                return ((v12 >> v9) & 1) == 0;
              }
              goto LABEL_416;
            case 5:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 6:
              switch(*(unsigned char *)(v210 + 12))
              {
                case 0:
                  if (*(void *)v210 > (uint64_t)(*(void *)v209 << 8) >> 8) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(void *)v210;
                  if ((double)*(int *)(v209 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v209 << 8) >> 8) < *(double *)v210) {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  uint64_t v244 = (uint64_t)(*(void *)v210 << 8) >> 8;
                  if (v244 > (uint64_t)(*(void *)v209 << 8) >> 8
                    || v244 == (uint64_t)(*(void *)v209 << 8) >> 8 && *(_DWORD *)(v210 + 8) > *(_DWORD *)(v209 + 8))
                  {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 8:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_415;
            case 9:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_415:
              turi::flexible_type_fail(0);
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v240)
          {
            a4.n128_u64[0] = *v233;
            if (*(double *)v233 > *v235) {
              break;
            }
            if (*(double *)v233 < *v235) {
              goto LABEL_416;
            }
            --v240;
            ++v233;
            ++v235;
            if (!--v239)
            {
LABEL_405:
              if (v238 <= v236) {
                goto LABEL_416;
              }
              return ((v12 >> v9) & 1) == 0;
            }
          }
        }
        return ((v12 >> v9) & 1) == 0;
      }
LABEL_168:
      unint64_t v125 = (unsigned __int8 *)(*a3 + 16 * v11);
      switch(*((unsigned char *)v10 + 3980))
      {
        case 0:
          switch(v125[12])
          {
            case 0u:
              if (*(void *)v125 != turi::FLEX_UNDEFINED) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            case 1u:
              a4.n128_u64[0] = *(void *)v125;
              uint64_t v127 = turi::FLEX_UNDEFINED;
              goto LABEL_280;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              if (turi::FLEX_UNDEFINED != (uint64_t)(*(void *)v125 << 8) >> 8 || *((_DWORD *)v125 + 2)) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(v125[12])
          {
            case 0u:
              a4.n128_u64[0] = turi::FLEX_UNDEFINED;
              uint64_t v127 = *(void *)v125;
LABEL_280:
              double v186 = (double)v127;
              goto LABEL_281;
            case 1u:
              a4.n128_u64[0] = *(void *)v125;
              double v186 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_281:
              if (a4.n128_f64[0] != v186) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              double v187 = (double)*((int *)v125 + 2) / 1000000.0
                   + (double)((uint64_t)(*(void *)v125 << 8) >> 8)
                   - *(double *)&turi::FLEX_UNDEFINED;
              goto LABEL_289;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v128 = v125[12];
          if (v128 == 2)
          {
            uint64_t v129 = *(void *)v125;
            int v130 = *(char *)(*(void *)v125 + 31);
            size_t v131 = *(unsigned __int8 *)(*(void *)v125 + 31);
            if (v130 < 0) {
              size_t v132 = *(void *)(v129 + 16);
            }
            else {
              size_t v132 = v131;
            }
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
              uint64_t v188 = *(void *)(turi::FLEX_UNDEFINED + 16);
            }
            else {
              uint64_t v188 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            }
            if (v132 == v188)
            {
              v189 = (unsigned __int8 *)(v129 + 8);
              if ((v131 & 0x80) != 0) {
                v189 = *(unsigned __int8 **)v189;
              }
              uint64_t v190 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
              if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
                uint64_t v190 = *(unsigned __int8 **)v190;
              }
              if ((v131 & 0x80) != 0)
              {
                if (!memcmp(v189, v190, v132)) {
                  goto LABEL_416;
                }
              }
              else
              {
                if (!v132) {
                  goto LABEL_416;
                }
                while (*v189 == *v190)
                {
                  ++v189;
                  ++v190;
                  if (!--v132) {
                    goto LABEL_416;
                  }
                }
              }
            }
          }
          else
          {
            BOOL v256 = v128 > 9 || v128 == 2;
            if (v256) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          }
          return (v12 >> v9) & 1;
        case 3:
          unsigned int v133 = v125[12];
          if (v133 == 3)
          {
            uint64_t v136 = *(void *)v125 + 8;
            double v134 = *(unint64_t **)v136;
            double v135 = *(unint64_t **)(v136 + 8);
            unint64_t v137 = ((uint64_t)v135 - *(void *)v136) >> 3;
            unsigned int v138 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v137 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v138) >> 3)
            {
              if (v135 == v134) {
                goto LABEL_416;
              }
              if (v137 <= 1) {
                unint64_t v137 = 1;
              }
              while (1)
              {
                a4.n128_u64[0] = *v134;
                if (*(double *)v134 != *v138) {
                  break;
                }
                ++v138;
                ++v134;
                if (!--v137) {
                  goto LABEL_416;
                }
              }
            }
          }
          else if (v133 > 9 || v133 == 3)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v12 >> v9) & 1;
        case 4:
          unsigned int v139 = v125[12];
          if (v139 == 4)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(void *)v125 + 8), (void *)(turi::FLEX_UNDEFINED + 8)))goto LABEL_416; {
          }
            }
          else if (v139 > 9 || v139 == 4)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v12 >> v9) & 1;
        case 5:
          unsigned int v140 = v125[12];
          if (v140 == 5)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(void *)v125 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              goto LABEL_416;
            }
          }
          else if (v140 > 9 || v140 == 5)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v12 >> v9) & 1;
        case 6:
          switch(v125[12])
          {
            case 0u:
              if (*(void *)v125 != turi::FLEX_UNDEFINED << 8 >> 8 || dword_268081F88) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            case 1u:
              double v187 = *(double *)v125 - ((double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_289:
              a4.n128_f64[0] = fabs(v187);
              if (a4.n128_f64[0] >= 0.0000005) {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(void *)v125) & 0xFFFFFFFFFFFFFFLL) != 0
                || *((_DWORD *)v125 + 2) != dword_268081F88)
              {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v141 = v125[12];
          if (v141 == 7) {
            goto LABEL_416;
          }
          if (v141 > 9 || v141 == 7) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v12 >> v9) & 1;
        case 8:
          unsigned int v142 = v125[12];
          if (v142 == 8)
          {
            if (turi::image_type::operator==(*(void *)v125 + 8, turi::FLEX_UNDEFINED + 8)) {
              goto LABEL_416;
            }
          }
          else if (v142 > 9 || v142 == 8)
          {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return (v12 >> v9) & 1;
        case 9:
          unsigned int v143 = v125[12];
          if (v143 != 9)
          {
            if (v143 >= 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return (v12 >> v9) & 1;
          }
          uint64_t v144 = *(void **)v125;
          if (turi::FLEX_UNDEFINED == *(void *)v125) {
            goto LABEL_416;
          }
          uint64_t v264 = turi::FLEX_UNDEFINED;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v144 + 1), turi::FLEX_UNDEFINED + 8)) {
            return (v12 >> v9) & 1;
          }
          unsigned int v146 = (char *)v144[3];
          int v145 = (char *)v144[4];
          uint64_t v147 = v145 - v146;
          if (v145 == v146) {
            goto LABEL_416;
          }
          if (!v144[1]) {
            goto LABEL_416;
          }
          uint64_t v148 = 1;
          do
          {
            uint64_t v149 = *(void *)v146;
            v146 += 8;
            v148 *= v149;
          }
          while (v146 != v145);
          if (!v148) {
            goto LABEL_416;
          }
          uint64_t v266 = 0;
          std::vector<unsigned long>::vector(&v267, v147 >> 3, &v266);
          BOOL v150 = v267;
          int v151 = v268;
          uint64_t v152 = **(void **)(v264 + 8);
          uint64_t v153 = (char *)v268 - (char *)v267;
          unint64_t v154 = v268 - v267;
          unint64_t v155 = v154 - 1;
          if (v154 <= 1) {
            uint64_t v156 = 1;
          }
          else {
            uint64_t v156 = v268 - v267;
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 3:
      unsigned int v20 = v13[12];
      if (v20 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v20 != 3) {
        goto LABEL_76;
      }
      uint64_t v23 = *(void *)v13 + 8;
      __n128 v21 = *(unint64_t **)v23;
      __n128 v22 = *(unint64_t **)(v23 + 8);
      unint64_t v24 = ((uint64_t)v22 - *(void *)v23) >> 3;
      __n128 v25 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v24 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v25) >> 3) {
        goto LABEL_76;
      }
      if (v22 == v21) {
        goto LABEL_168;
      }
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      while (1)
      {
        a4.n128_u64[0] = *v21;
        if (*(double *)v21 != *v25) {
          goto LABEL_76;
        }
        ++v25;
        ++v21;
        if (!--v24) {
          goto LABEL_168;
        }
      }
    case 4:
      unsigned int v26 = v13[12];
      if (v26 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v26 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(void *)v13 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 5:
      unsigned int v66 = v13[12];
      if (v66 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v66 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(void *)v13 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 6:
      switch(v13[12])
      {
        case 0u:
          if (*(void *)v13 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268081F88) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 1u:
          a4.n128_f64[0] = vabdd_f64(*(double *)v13, (double)dword_268081F88 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_167:
          if (a4.n128_f64[0] < 0.0000005) {
            goto LABEL_168;
          }
          goto LABEL_76;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(void *)v13) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)v13 + 2) == dword_268081F88)
          {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v27 = v13[12];
      if (v27 < 7 || v27 - 8 < 2) {
        goto LABEL_76;
      }
      if (v27 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_168;
    case 8:
      unsigned int v67 = v13[12];
      if (v67 < 8) {
        goto LABEL_76;
      }
      if (v67 != 8)
      {
        if (v67 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_76;
      }
      if (!turi::image_type::operator==(*(void *)v13 + 8, turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_76;
      }
      goto LABEL_168;
    case 9:
      unsigned int v28 = v13[12];
      if (v28 < 9) {
        goto LABEL_76;
      }
      if (v28 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      char v29 = *(void **)v13;
      if (turi::FLEX_UNDEFINED == *(void *)v13) {
        goto LABEL_168;
      }
      uint64_t v262 = turi::FLEX_UNDEFINED;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_76;
      }
      unint64_t v31 = (char *)v29[3];
      __n128 v30 = (char *)v29[4];
      uint64_t v32 = v30 - v31;
      if (v30 == v31) {
        goto LABEL_168;
      }
      if (!v29[1]) {
        goto LABEL_168;
      }
      uint64_t v33 = 1;
      do
      {
        uint64_t v34 = *(void *)v31;
        v31 += 8;
        v33 *= v34;
      }
      while (v31 != v30);
      if (!v33) {
        goto LABEL_168;
      }
      uint64_t v266 = 0;
      std::vector<unsigned long>::vector(&v267, v32 >> 3, &v266);
      uint64_t v35 = v267;
      BOOL v36 = v268;
      uint64_t v37 = **(void **)(v262 + 8);
      uint64_t v38 = (char *)v268 - (char *)v267;
      unint64_t v39 = v268 - v267;
      unint64_t v40 = v39 - 1;
      if (v39 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v268 - v267;
      }
      while (2)
      {
        if (v36 == v35)
        {
          uint64_t v49 = 0;
          double v50 = *(double *)(*(void *)v29[1] + 8 * v29[9]);
        }
        else
        {
          uint64_t v42 = 0;
          uint64_t v43 = (uint64_t *)v29[6];
          unint64_t v44 = v35;
          uint64_t v45 = v41;
          do
          {
            uint64_t v47 = *v44++;
            uint64_t v46 = v47;
            uint64_t v48 = *v43++;
            v42 += v48 * v46;
            --v45;
          }
          while (v45);
          uint64_t v49 = 0;
          double v50 = *(double *)(*(void *)v29[1] + 8 * (v29[9] + v42));
          uint64_t v51 = *(uint64_t **)(v262 + 48);
          uint64_t v52 = v35;
          uint64_t v53 = v41;
          do
          {
            uint64_t v55 = *v52++;
            uint64_t v54 = v55;
            uint64_t v56 = *v51++;
            v49 += v56 * v54;
            --v53;
          }
          while (v53);
        }
        double v57 = *(double *)(v37 + 8 * (*(void *)(v262 + 72) + v49));
        if (v50 == v57)
        {
          uint64_t v58 = v39;
          uint64_t v59 = v39 - 1;
          if (v38 < 1) {
            goto LABEL_59;
          }
          uint64_t v60 = v29[3];
          unint64_t v61 = v35[v40] + 1;
          v35[v40] = v61;
          unint64_t v62 = (v38 & 0xFFFFFFFFFFFFFFF8) - 16;
          uint64_t v59 = v39 - 1;
          if (v61 < *(void *)(v60 + 8 * v40))
          {
            uint64_t v58 = 1;
            uint64_t v59 = v39 - 1;
LABEL_59:
            if (v59 < 0 || !v58) {
              goto LABEL_61;
            }
            continue;
          }
          while (1)
          {
            *(uint64_t *)((char *)v35 + v62 + 8) = 0;
            if (v59 <= 0) {
              break;
            }
            --v59;
            unint64_t v63 = *(uint64_t *)((char *)v35 + v62) + 1;
            *(uint64_t *)((char *)v35 + v62) = v63;
            unint64_t v64 = *(void *)(v60 + v62);
            v62 -= 8;
            if (v63 < v64)
            {
              uint64_t v58 = 1;
              goto LABEL_59;
            }
          }
          v268 = v35;
          operator delete(v35);
        }
        else
        {
LABEL_61:
          if (v35)
          {
            v268 = v35;
            operator delete(v35);
          }
          if (v50 != v57) {
            goto LABEL_76;
          }
        }
        goto LABEL_168;
      }
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v151 == v150)
    {
      uint64_t v164 = 0;
      double v165 = *(double *)(*(void *)v144[1] + 8 * v144[9]);
    }
    else
    {
      uint64_t v157 = 0;
      uint64_t v158 = (uint64_t *)v144[6];
      uint64_t v159 = v150;
      uint64_t v160 = v156;
      do
      {
        uint64_t v162 = *v159++;
        uint64_t v161 = v162;
        uint64_t v163 = *v158++;
        v157 += v163 * v161;
        --v160;
      }
      while (v160);
      uint64_t v164 = 0;
      double v165 = *(double *)(*(void *)v144[1] + 8 * (v144[9] + v157));
      unint64_t v166 = *(uint64_t **)(v264 + 48);
      uint64_t v167 = v150;
      uint64_t v168 = v156;
      do
      {
        uint64_t v170 = *v167++;
        uint64_t v169 = v170;
        uint64_t v171 = *v166++;
        v164 += v171 * v169;
        --v168;
      }
      while (v168);
    }
    double v172 = *(double *)(v152 + 8 * (*(void *)(v264 + 72) + v164));
    if (v165 != v172) {
      break;
    }
    uint64_t v173 = v154;
    uint64_t v174 = v154 - 1;
    if (v153 >= 1)
    {
      uint64_t v175 = v144[3];
      unint64_t v176 = v150[v155] + 1;
      v150[v155] = v176;
      unint64_t v177 = (v153 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v174 = v154 - 1;
      if (v176 >= *(void *)(v175 + 8 * v155))
      {
        while (1)
        {
          *(uint64_t *)((char *)v150 + v177 + 8) = 0;
          if (v174 <= 0) {
            break;
          }
          --v174;
          unint64_t v178 = *(uint64_t *)((char *)v150 + v177) + 1;
          *(uint64_t *)((char *)v150 + v177) = v178;
          unint64_t v179 = *(void *)(v175 + v177);
          v177 -= 8;
          if (v178 < v179)
          {
            uint64_t v173 = 1;
            goto LABEL_245;
          }
        }
        v268 = v150;
        operator delete(v150);
LABEL_416:
        ++v9;
        if (++v4 == v5) {
          return 0;
        }
        goto LABEL_3;
      }
      uint64_t v173 = 1;
      uint64_t v174 = v154 - 1;
    }
LABEL_245:
    ;
  }
  while ((v174 & 0x8000000000000000) == 0 && v173);
  if (v150)
  {
    v268 = v150;
    operator delete(v150);
  }
  if (v165 == v172) {
    goto LABEL_416;
  }
  return (v12 >> v9) & 1;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(void *a1, void *a2, uint64_t a3, __n128 a4)
{
  if (a1 != a2)
  {
    char v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v8 = 0;
      unint64_t v9 = a1;
      do
      {
        uint64_t v10 = v6;
        if (turi::query_eval::less_than_partial_function::operator()(a3, v6, v9, a4))
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = v9[5];
          v10[1] = 0;
          v10[2] = 0;
          *uint64_t v10 = 0;
          uint64_t v11 = v8;
          while (1)
          {
            unint64_t v12 = (char *)a1 + v11;
            std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v11 + 24));
            __n128 v13 = *(__n128 *)((char *)a1 + v11);
            *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
            *((void *)v12 + 5) = *((void *)v12 + 2);
            *((void *)v12 + 1) = 0;
            *((void *)v12 + 2) = 0;
            *(void *)unint64_t v12 = 0;
            if (!v11) {
              break;
            }
            v11 -= 24;
            if ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, (void *)v12 - 3, v13) & 1) == 0)
            {
              uint64_t v14 = (uint64_t)a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v14 = (uint64_t)a1;
LABEL_10:
          std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
          uint64_t v16 = 0;
          long long v15 = 0uLL;
          int v17 = (void **)&v15;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        }
        char v6 = v10 + 3;
        v8 += 24;
        unint64_t v9 = v10;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_223FF2F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(void *a1, void *a2, uint64_t a3, __n128 a4)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    char v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v8 = (void **)(a1 + 5);
      do
      {
        unint64_t v9 = v6;
        if (turi::query_eval::less_than_partial_function::operator()(a3, v6, v5, a4))
        {
          long long v13 = *(_OWORD *)v9;
          uint64_t v14 = (void *)v5[5];
          v9[1] = 0;
          v9[2] = 0;
          void *v9 = 0;
          uint64_t v10 = v8;
          do
          {
            std::vector<turi::flexible_type>::__vdeallocate(v10 - 2);
            __n128 v11 = *(__n128 *)(v10 - 5);
            *((__n128 *)v10 - 1) = v11;
            *uint64_t v10 = *(v10 - 3);
            *(v10 - 4) = 0;
            *(v10 - 3) = 0;
            *(v10 - 5) = 0;
            char v12 = turi::query_eval::less_than_partial_function::operator()(a3, &v13, v10 - 8, v11);
            v10 -= 3;
          }
          while ((v12 & 1) != 0);
          std::vector<turi::flexible_type>::__vdeallocate(v10 - 2);
          *((_OWORD *)v10 - 1) = v13;
          *uint64_t v10 = v14;
          uint64_t v14 = 0;
          long long v13 = 0uLL;
          long long v15 = (void **)&v13;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
        }
        char v6 = v9 + 3;
        v8 += 3;
        uint64_t v5 = v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void sub_223FF3040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __n128 a5)
{
  char v9 = turi::query_eval::less_than_partial_function::operator()(a4, a2, a1, a5);
  uint64_t result = turi::query_eval::less_than_partial_function::operator()(a4, a3, a2, v10);
  if (v9)
  {
    uint64_t v14 = a1 + 2;
    uint64_t v13 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v13;
      uint64_t v15 = a1[1];
      a1[1] = a3[1];
      a3[1] = v15;
      uint64_t v16 = a3 + 2;
      uint64_t result = 1;
LABEL_10:
      uint64_t v26 = *v14;
      uint64_t *v14 = *v16;
      *uint64_t v16 = v26;
      return result;
    }
    *a1 = *a2;
    *a2 = v13;
    uint64_t v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    uint64_t v14 = a2 + 2;
    uint64_t v23 = a1[2];
    a1[2] = a2[2];
    a2[2] = v23;
    if (turi::query_eval::less_than_partial_function::operator()(a4, a3, a2, v12))
    {
      uint64_t v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      uint64_t v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v16 = a3 + 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    uint64_t v18 = a2[1];
    a2[1] = a3[1];
    a3[1] = v18;
    uint64_t v16 = a2 + 2;
    uint64_t v19 = a2[2];
    a2[2] = a3[2];
    a3[2] = v19;
    if (turi::query_eval::less_than_partial_function::operator()(a4, a2, a1, v12))
    {
      uint64_t v20 = *a1;
      *a1 = *a2;
      *a2 = v20;
      uint64_t v21 = a1[1];
      a1[1] = a2[1];
      a2[1] = v21;
      uint64_t v14 = a1 + 2;
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  __n128 v15 = *(__n128 *)a1;
  __n128 v6 = v15;
  uint64_t v16 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (turi::query_eval::less_than_partial_function::operator()(a3, &v15, a2 - 3, v6))
  {
    uint64_t v8 = a1;
    do
      v8 += 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v8, v7) & 1) == 0);
  }
  else
  {
    char v9 = a1 + 3;
    do
    {
      uint64_t v8 = v9;
      if (v9 >= v4) {
        break;
      }
      int v10 = turi::query_eval::less_than_partial_function::operator()(a3, &v15, v9, v7);
      char v9 = v8 + 3;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v4, v7) & 1) != 0);
  }
  while (v8 < v4)
  {
    __n128 v11 = (void *)*v8;
    *uint64_t v8 = *v4;
    *uint64_t v4 = v11;
    uint64_t v12 = v8[1];
    v8[1] = v4[1];
    v4[1] = v12;
    uint64_t v13 = v8[2];
    v8[2] = v4[2];
    v4[2] = v13;
    do
      v8 += 3;
    while (!turi::query_eval::less_than_partial_function::operator()(a3, &v15, v8, v7));
    do
      v4 -= 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v4, v7) & 1) != 0);
  }
  if (v8 - 3 != a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    *(v8 - 3) = 0;
    *(v8 - 2) = 0;
    *(v8 - 1) = 0;
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)v8 - 3);
  *(__n128 *)(v8 - 3) = v15;
  *(v8 - 1) = v16;
  __n128 v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v17 = &v15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  return v8;
}

void sub_223FF337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(__n128 *a1, void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  __n128 v7 = *a1;
  __n128 v16 = *a1;
  uint64_t v17 = (void *)a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  do
  {
    char v8 = turi::query_eval::less_than_partial_function::operator()(a3, &a1[1].n128_u64[v6 + 1], &v16, v7);
    v6 += 3;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = (unint64_t)&a1->n128_u64[v6];
  if (v6 == 3)
  {
    do
    {
      if (v9 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while ((turi::query_eval::less_than_partial_function::operator()(a3, a2, &v16, v7) & 1) == 0);
  }
  else
  {
    do
      a2 -= 3;
    while (!turi::query_eval::less_than_partial_function::operator()(a3, a2, &v16, v7));
  }
  int v10 = (void **)((char *)a1 + v6 * 8);
  if (v9 < (unint64_t)a2)
  {
    __n128 v11 = a2;
    do
    {
      uint64_t v12 = *v10;
      *int v10 = *v11;
      void *v11 = v12;
      uint64_t v13 = v10[1];
      v10[1] = v11[1];
      v11[1] = v13;
      uint64_t v14 = v10[2];
      v10[2] = v11[2];
      v11[2] = v14;
      do
        v10 += 3;
      while ((turi::query_eval::less_than_partial_function::operator()(a3, v10, &v16, v7) & 1) != 0);
      do
        v11 -= 3;
      while (!turi::query_eval::less_than_partial_function::operator()(a3, v11, &v16, v7));
    }
    while (v10 < v11);
  }
  if (v10 - 3 != (void **)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *a1 = *(__n128 *)(v10 - 3);
    a1[1].n128_u64[0] = (unint64_t)*(v10 - 1);
    *(v10 - 3) = 0;
    *(v10 - 2) = 0;
    *(v10 - 1) = 0;
  }
  std::vector<turi::flexible_type>::__vdeallocate(v10 - 3);
  *(__n128 *)(v10 - 3) = v16;
  *(v10 - 1) = v17;
  __n128 v16 = 0uLL;
  uint64_t v17 = 0;
  uint64_t v18 = &v16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v10 - 3;
}

void sub_223FF354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t a3, __n128 a4)
{
  BOOL v7 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v7;
    case 2uLL:
      if (turi::query_eval::less_than_partial_function::operator()(a3, a2 - 3, a1, a4))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v9;
        uint64_t v10 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return v7;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a2 - 3, a3, a4);
      return v7;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a2 - 3, a3, a4);
      return v7;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3, a4);
      return v7;
    default:
      __n128 v11 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a3, a4);
      uint64_t v13 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (!turi::query_eval::less_than_partial_function::operator()(a3, v13, v11, v12))
  {
LABEL_14:
    __n128 v11 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2) {
      return 1;
    }
  }
  long long v21 = *(_OWORD *)v13;
  uint64_t v22 = v13[2];
  v13[1] = 0;
  v13[2] = 0;
  uint64_t *v13 = 0;
  uint64_t v16 = v14;
  while (1)
  {
    uint64_t v17 = (char *)a1 + v16;
    std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v16 + 72));
    __n128 v18 = *(__n128 *)((char *)a1 + v16 + 48);
    *(__n128 *)(v17 + 72) = v18;
    *((void *)v17 + 11) = *((void *)v17 + 8);
    *((void *)v17 + 7) = 0;
    *((void *)v17 + 8) = 0;
    *((void *)v17 + 6) = 0;
    if (v16 == -48) {
      break;
    }
    v16 -= 24;
    if ((turi::query_eval::less_than_partial_function::operator()(a3, &v21, (void *)v17 + 3, v18) & 1) == 0)
    {
      uint64_t v19 = (uint64_t)a1 + v16 + 72;
      goto LABEL_12;
    }
  }
  uint64_t v19 = (uint64_t)a1;
LABEL_12:
  std::vector<turi::flexible_type>::__vdeallocate((void **)v19);
  *(_OWORD *)uint64_t v19 = v21;
  *(void *)(v19 + 16) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  if (++v15 != 8)
  {
    uint64_t v23 = (void **)&v21;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
    goto LABEL_14;
  }
  BOOL v7 = v13 + 3 == a2;
  uint64_t v23 = (void **)&v21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
  return v7;
}

void sub_223FF37D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a2, a3, a5, a6);
  uint64_t result = turi::query_eval::less_than_partial_function::operator()(a5, a4, a3, v11);
  if (result)
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    uint64_t v16 = a3[2];
    a3[2] = a4[2];
    a4[2] = v16;
    uint64_t result = turi::query_eval::less_than_partial_function::operator()(a5, a3, a2, v13);
    if (result)
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      uint64_t v20 = a2[2];
      a2[2] = a3[2];
      a3[2] = v20;
      uint64_t result = turi::query_eval::less_than_partial_function::operator()(a5, a2, a1, v17);
      if (result)
      {
        uint64_t v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
        uint64_t v22 = a1[1];
        a1[1] = a2[1];
        a2[1] = v22;
        uint64_t v23 = a1[2];
        a1[2] = a2[2];
        a2[2] = v23;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, __n128 a7)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a2, a3, a4, a6, a7);
  uint64_t result = turi::query_eval::less_than_partial_function::operator()(a6, a5, a4, v13);
  if (result)
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = a4[1];
    a4[1] = a5[1];
    a5[1] = v17;
    uint64_t v18 = a4[2];
    a4[2] = a5[2];
    a5[2] = v18;
    uint64_t result = turi::query_eval::less_than_partial_function::operator()(a6, a4, a3, v15);
    if (result)
    {
      uint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      uint64_t v21 = a3[1];
      a3[1] = a4[1];
      a4[1] = v21;
      uint64_t v22 = a3[2];
      a3[2] = a4[2];
      a4[2] = v22;
      uint64_t result = turi::query_eval::less_than_partial_function::operator()(a6, a3, a2, v19);
      if (result)
      {
        uint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        uint64_t v25 = a2[1];
        a2[1] = a3[1];
        a3[1] = v25;
        uint64_t v26 = a2[2];
        a2[2] = a3[2];
        a3[2] = v26;
        uint64_t result = turi::query_eval::less_than_partial_function::operator()(a6, a2, a1, v23);
        if (result)
        {
          uint64_t v27 = *a1;
          *a1 = *a2;
          *a2 = v27;
          uint64_t v28 = a1[1];
          a1[1] = a2[1];
          a2[1] = v28;
          uint64_t v29 = a1[2];
          a1[2] = a2[2];
          a2[2] = v29;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *>(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = (uint64_t)a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      __n128 v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, a4, v10, v13, a5);
        __n128 v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if ((unint64_t *)v7 != a3)
    {
      __n128 v15 = (unint64_t *)v7;
      do
      {
        if (turi::query_eval::less_than_partial_function::operator()(a4, v15, a1, a5))
        {
          unint64_t v16 = *v15;
          unint64_t *v15 = a1->n128_u64[0];
          a1->n128_u64[0] = v16;
          unint64_t v17 = v15[1];
          v15[1] = a1->n128_u64[1];
          a1->n128_u64[1] = v17;
          unint64_t v18 = v15[2];
          v15[2] = a1[1].n128_u64[0];
          a1[1].n128_u64[0] = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, a4, v10, a1, a5);
        }
        v15 += 3;
      }
      while (v15 != a3);
      uint64_t v14 = (uint64_t)a3;
    }
    if (v9 >= 25)
    {
      unint64_t v19 = v9 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function,std::vector<turi::flexible_type> *>(a1, v7, a4, v19);
        v7 -= 24;
      }
      while (v19-- > 2);
    }
    return (unint64_t *)v14;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, __n128 a5)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = a4;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v12 = (__n128 *)(a1 + 24 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 < a3
        && turi::query_eval::less_than_partial_function::operator()(a2, (void *)(a1 + 24 * v11), &v12[1].n128_u64[1], a5))
      {
        unint64_t v12 = (__n128 *)((char *)v12 + 24);
        uint64_t v11 = v13;
      }
      if ((turi::query_eval::less_than_partial_function::operator()(a2, v12, v6, a5) & 1) == 0)
      {
        __n128 v17 = *v6;
        uint64_t v18 = v6[1].n128_i64[0];
        v6->n128_u64[1] = 0;
        v6[1].n128_u64[0] = 0;
        v6->n128_u64[0] = 0;
        do
        {
          uint64_t v14 = v12;
          std::vector<turi::flexible_type>::__vdeallocate((void **)v6);
          __n128 v15 = *v12;
          __n128 *v6 = *v12;
          v6[1].n128_u64[0] = v12[1].n128_u64[0];
          v12->n128_u64[0] = 0;
          v12->n128_u64[1] = 0;
          v12[1].n128_u64[0] = 0;
          if (v8 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          unint64_t v12 = (__n128 *)(a1 + 24 * v16);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v16;
          }
          else if (turi::query_eval::less_than_partial_function::operator()(a2, (void *)(a1 + 24 * v16), &v12[1].n128_u64[1], v15))
          {
            unint64_t v12 = (__n128 *)((char *)v12 + 24);
          }
          else
          {
            uint64_t v11 = v16;
          }
          uint64_t v6 = v14;
        }
        while (!turi::query_eval::less_than_partial_function::operator()(a2, v12, &v17, v15));
        std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
        __n128 *v14 = v17;
        v14[1].n128_u64[0] = v18;
        __n128 v17 = 0uLL;
        uint64_t v18 = 0;
        unint64_t v19 = &v17;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      }
    }
  }
}

void sub_223FF3D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function,std::vector<turi::flexible_type> *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    __n128 v10 = *a1;
    __n128 v7 = v10;
    unint64_t v11 = a1[1].n128_u64[0];
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    a1->n128_u64[0] = 0;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a3, a4, v7);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v8);
    if (v8 == (__n128 *)(a2 - 24))
    {
      *uint64_t v8 = v10;
      v8[1].n128_u64[0] = v11;
      __n128 v10 = 0uLL;
      unint64_t v11 = 0;
    }
    else
    {
      *uint64_t v8 = *(__n128 *)(a2 - 24);
      v8[1].n128_u64[0] = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a2 - 24));
      __n128 v9 = v10;
      *(__n128 *)(a2 - 24) = v10;
      *(void *)(a2 - 8) = v11;
      unint64_t v11 = 0;
      __n128 v10 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, (uint64_t)&v8[1].n128_i64[1], a3, 0xAAAAAAAAAAAAAAABLL * ((&v8[1].n128_i8[8] - (__int8 *)a1) >> 3), v9);
    }
    unint64_t v12 = &v10;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
}

void sub_223FF3EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__n128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a3 - 2;
  if (a3 < 2) {
    uint64_t v8 = a3 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    __n128 v10 = (__n128 *)((char *)a1 + 24 * v7 + 24);
    uint64_t v11 = (2 * v7) | 1;
    uint64_t v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_partial_function::operator()(a2, &a1[1].n128_u64[3 * v7 + 1], &a1[3].n128_u64[3 * v7], a4))
    {
      __n128 v10 = (__n128 *)((char *)v10 + 24);
      uint64_t v11 = v12;
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    a4 = *v10;
    *a1 = *v10;
    a1[1].n128_u64[0] = v10[1].n128_u64[0];
    v10->n128_u64[0] = 0;
    v10->n128_u64[1] = 0;
    v10[1].n128_u64[0] = 0;
    a1 = v10;
    uint64_t v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  if (a4 >= 2)
  {
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (__n128 *)(a1 + 24 * v8);
    __n128 v10 = (__n128 *)(a2 - 24);
    if (turi::query_eval::less_than_partial_function::operator()(a3, v9, (void *)(a2 - 24), a5))
    {
      __n128 v13 = *(__n128 *)(a2 - 24);
      unint64_t v14 = *(void *)(a2 - 8);
      v10->n128_u64[1] = 0;
      v10[1].n128_u64[0] = 0;
      v10->n128_u64[0] = 0;
      do
      {
        uint64_t v11 = v9;
        std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
        __n128 v12 = *v9;
        *__n128 v10 = *v9;
        v10[1].n128_u64[0] = v9[1].n128_u64[0];
        v9->n128_u64[0] = 0;
        v9->n128_u64[1] = 0;
        v9[1].n128_u64[0] = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (__n128 *)(a1 + 24 * v8);
        __n128 v10 = v11;
      }
      while ((turi::query_eval::less_than_partial_function::operator()(a3, v9, &v13, v12) & 1) != 0);
      std::vector<turi::flexible_type>::__vdeallocate((void **)v11);
      __n128 *v11 = v13;
      v11[1].n128_u64[0] = v14;
      unint64_t v14 = 0;
      __n128 v13 = 0uLL;
      __n128 v15 = &v13;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
  }
}

void sub_223FF409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v9, a4);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v9);
}

void sub_223FF4184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v28[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v20, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v21, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v19, (uint64_t)v22);
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v22, &v25);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v19);
  uint64_t v9 = v25;
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v14, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v15, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v26);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v27);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v28);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v13, (uint64_t)v10, (uint64_t)v16);
  std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v9, (uint64_t)v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v28);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v27);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v26);
}

void sub_223FF43A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v8 = *(void *)(a3 + 56);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    uint64_t v5 = a2;
  }
  uint64_t v10 = v5;
  return std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

void *std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v7[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v5, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v7, a1 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]((uint64_t)v5, a2);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v5);
}

void sub_223FF4540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a10);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v10, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, a1 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v8, a2 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]((uint64_t)v7, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v10);
}

void *std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](v5, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a3 + 64);
  return a1;
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

atomic_ullong *volatile *OUTLINED_FUNCTION_0_9(atomic_ullong *volatile *result)
{
  return result;
}

void OUTLINED_FUNCTION_2_4()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_3_4()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_4_3()
{
  JUMPOUT(0x22A614FA0);
}

void turi::query_eval::sort_and_merge(uint64_t *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 24))(*a1);
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_reader(*a1);
}

void sub_223FF4CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&STACK[0x268]);
  if (__p) {
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&a35);
  turi::conditional::~conditional(&a72);
  turi::mutex::~mutex((pthread_mutex_t *)&STACK[0x228]);
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  _Unwind_Resume(a1);
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_reader(uint64_t a1)
{
  assert_msg(*(unsigned char *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  operator new();
}

void sub_223FF4E5C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::init(uint64_t a1, uint64_t a2)
{
  assert_msg(*(void *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::open_format_reader(a1, a2);
}

void sub_223FF51F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  unint64_t v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(void *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D768340;
  *(void *)(a1 + 8) = 0;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v11 = a2;
  unint64_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (uint64_t i = *(void **)(a1 + 96); i; uint64_t i = (void *)*i)
  {
    unint64_t v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2) {
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      }
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(void *)(a1 + 8)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  }
  unint64_t v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  }
  turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_iterator(a3, (uint64_t *)(*(void *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_223FF5408(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

double turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::end@<D0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = a1[1];
  if (!v9[0])
  {
    unint64_t v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v11 = (void *)a2;
  unint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v10 <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = a1[20] + 96 * a2;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  uint64_t v8 = *(void *)(v6 + 72) - *(void *)(v6 + 56);
  *(void *)(a3 + 64) = v8;
  *(void *)(a3 + 72) = v8;
  return result;
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::read_rows(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::reset_iterators(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  int v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v3 = (void *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  unint64_t v4 = (uint64_t *)v1[8];
  unint64_t v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(v4);
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D768340;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(void **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)a2;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t std::pair<std::vector<turi::flexible_type>,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a2[9] - a2[7];
  *(void *)(a1 + 72) = v6;
  if (a4 && v6)
  {
    uint64_t v7 = turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(a2);
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5, v7);
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_223FF57DC(_Unwind_Exception *a1)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *a1;
  if (v2 == 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4))
  {
    uint64_t v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4)) {
      uint64_t v5 = a1[9] - v4;
    }
    else {
      uint64_t v5 = a1[10];
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    uint64_t v2 = 0;
    a1[8] += v5;
    uint64_t v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 48 * v2;
}

uint64_t std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return a1;
}

void turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
  uint64_t v4 = a1[7];
  a1[8] = v4;
  a1[11] = v4;
  a1[6] = 0;
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::open_format_reader(uint64_t a1, uint64_t a2)
{
  turi::index_file_information::index_file_information(&v4, (const turi::index_file_information *)(a2 + 8));
  uint64_t v3 = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, v11[1]);
  uint64_t v12 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == 2) {
    operator new();
  }
  if (v3 != 1)
  {
    if (!v3) {
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
    }
    *(void *)(a1 + 8) = 0;
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
  }
  turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
}

void sub_223FF5AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::size(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    turi::sarray_reader<turi::flexible_type>::size(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  uint64_t v3 = *(uint64_t **)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t result = 0;
  uint64_t v6 = v4 - (void)v3;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      uint64_t v8 = *v3++;
      result += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::create_segment_read_buffers(void *a1, void *a2)
{
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(a1 + 20, a1[10]);
  uint64_t v5 = a1[14];
  if (a1[15] != v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a2 + v7;
      *(void *)(v5 + 8 * v8) = *(void *)(v9 + 8) - *(void *)v9;
      turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::init((uint64_t *)(a1[20] + v6), (uint64_t)a1, *(void *)v9, *(void *)(v9 + 8), 1024);
      ++v8;
      uint64_t v5 = a1[14];
      v7 += 16;
      v6 += 96;
    }
    while (v8 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D7683B8;
  uint64_t instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 8) = instance;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = -1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void sub_223FF5D70(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(void *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(long long **)(a2 + 120), (long long *)(a2 + 128));
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  uint64_t v86 = (void **)(a1 + 192);
  uint64_t v87 = (char **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 216);
  char v83 = (char **)(a1 + 216);
  *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = v5;
  *(void *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a2 + 104) == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v84 = a2;
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = (long long *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      unint64_t v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = *(unint64_t **)(a1 + 224);
      unint64_t v15 = *(void *)(a1 + 232);
      uint64_t v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = ((char *)v16 - *v83) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - (void)*v83;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        __n128 v23 = (unint64_t *)&v22[16 * v18];
        *__n128 v23 = v12;
        v23[1] = v14;
        uint64_t v25 = *(char **)(a1 + 216);
        uint64_t v24 = *(char **)(a1 + 224);
        uint64_t v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          uint64_t v24 = *v83;
        }
        __n128 v17 = v23 + 2;
        *(void *)(a1 + 216) = v26;
        *(void *)(a1 + 224) = v23 + 2;
        *(void *)(a1 + 232) = &v22[16 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v16 = v12;
        v16[1] = v14;
        __n128 v17 = v16 + 2;
      }
      *(void *)(a1 + 224) = v17;
      unint64_t v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      all_uint64_t block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        uint64_t v29 = (void *)all_block_info;
        for (unint64_t i = 0; i != v27; ++i)
        {
          uint64_t v32 = *(char **)(a1 + 200);
          unint64_t v31 = *(void *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v34 = (char *)*v86;
            uint64_t v35 = (v32 - (unsigned char *)*v86) >> 3;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 2 > v36) {
              unint64_t v36 = v37 >> 2;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              uint64_t v34 = *(char **)(a1 + 192);
              uint64_t v32 = *(char **)(a1 + 200);
            }
            else
            {
              unint64_t v39 = 0;
            }
            unint64_t v40 = &v39[8 * v35];
            *(void *)unint64_t v40 = v8;
            uint64_t v33 = v40 + 8;
            while (v32 != v34)
            {
              uint64_t v41 = *((void *)v32 - 1);
              v32 -= 8;
              *((void *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(void *)(a1 + 192) = v40;
            *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = v33;
            *(void *)(a1 + 208) = &v39[8 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(void *)uint64_t v32 = v8;
            uint64_t v33 = v32 + 8;
          }
          *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = v33;
          uint64_t v42 = *(void *)(*(void *)(*v29 + 24 * v14) + 48 * i + 24);
          unint64_t v44 = *(unint64_t **)(a1 + 176);
          unint64_t v43 = *(void *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            unint64_t v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)*v87) >> 3);
            if (2 * v48 > v47) {
              unint64_t v47 = 2 * v48;
            }
            if (v48 >= 0x555555555555555) {
              unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49) {
              double v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            }
            else {
              double v50 = 0;
            }
            uint64_t v51 = (unint64_t *)&v50[24 * v46];
            *uint64_t v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            uint64_t v53 = *(char **)(a1 + 168);
            uint64_t v52 = *(char **)(a1 + 176);
            uint64_t v54 = v51;
            if (v52 != v53)
            {
              do
              {
                long long v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((void *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              uint64_t v52 = *v87;
            }
            uint64_t v45 = v51 + 3;
            *(void *)(a1 + 168) = v54;
            *(void *)(a1 + 176) = v51 + 3;
            *(void *)(a1 + 184) = &v50[24 * v49];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *unint64_t v44 = v12;
            v44[1] = v14;
            uint64_t v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(void *)(a1 + 176) = v45;
        }
      }
      uint64_t v7 = v85 + 1;
      uint64_t v6 = *(void *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v84 + 104) - v6) >> 3));
  }
  uint64_t v56 = *(uint64_t **)(a1 + 88);
  double v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    uint64_t v58 = *(void *)(a1 + 160);
    do
    {
      uint64_t v59 = *v56++;
      v58 += v59;
      *(void *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = v58;
    }
    while (v56 != v57);
  }
  uint64_t v60 = *(void **)(a1 + 336);
  for (unint64_t j = *(void **)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(void *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3));
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3);
  unint64_t v63 = *(void *)(a1 + 320);
  unint64_t v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0) {
    ++v64;
  }
  *(void *)(a1 + 312) = v62;
  *(void *)(a1 + 32CoreML::Specification::AdamOptimizer::New(this, 0) = v64;
  uint64_t v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  unsigned int v66 = v65;
  *(void *)(a1 + 304) = v65;
  uint64_t v67 = *(void *)(a1 + 312) & 0x3FLL;
  if (v67) {
    *(void *)&v65[8 * *(void *)(a1 + 320) - 8] &= ~(-1 << v67);
  }
  uint64_t v68 = *(void *)(a1 + 320);
  if (v68 > v63)
  {
    unsigned int v69 = &v65[8 * v63];
    uint64_t v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      uint64_t v68 = *(void *)(a1 + 320);
    }
  }
  if (v68 >= 1) {
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  }
  unint64_t v71 = *(void *)(a1 + 208);
  int v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    size_t v74 = (char *)*v86;
    uint64_t v75 = (v72 - (unsigned char *)*v86) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v77 = v71 - (void)v74;
    if (v77 >> 2 > v76) {
      unint64_t v76 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v78 = v76;
    }
    if (v78)
    {
      unint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      size_t v74 = *(char **)(a1 + 192);
      int v72 = *(char **)(a1 + 200);
    }
    else
    {
      unint64_t v79 = 0;
    }
    int v80 = &v79[8 * v75];
    unsigned int v81 = &v79[8 * v78];
    *(void *)int v80 = *(void *)(a1 + 160);
    uint64_t v73 = v80 + 8;
    while (v72 != v74)
    {
      uint64_t v82 = *((void *)v72 - 1);
      v72 -= 8;
      *((void *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(void *)(a1 + 192) = v80;
    *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = v73;
    *(void *)(a1 + 208) = v81;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    *(void *)int v72 = *(void *)(a1 + 160);
    uint64_t v73 = v72 + 8;
  }
  *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = v73;
  if (*(void *)(a1 + 160) != v8) {
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
  }
}

{
  std::string v2;

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    uint64_t v2 = *(std::string *)a2;
  }
  turi::read_index_file((uint64_t)&v2);
}

void sub_223FF64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FF65B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::read_rows(atomic_ullong *a1, unint64_t a2, void *a3, uint64_t *a4)
{
  if (a1[20] >= (unint64_t)a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (void *)a1[20];
  }
  BOOL v7 = (unint64_t)v6 >= a2;
  unint64_t v8 = (unint64_t)v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(a4, v8);
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_rows_from_cache(a1, a2, v6, a4);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  }
  else
  {
    uint64_t v13 = *a4;
    uint64_t v12 = a4[1];
    if (v12 != *a4)
    {
      do
      {
        v12 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a4 + 2), v12);
      }
      while (v12 != v13);
    }
    unint64_t result = 0;
    a4[1] = v13;
  }
  return result;
}

void sub_223FF66C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D7683B8;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  BOOL v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 20CoreML::Specification::AdamOptimizer::New(this, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  BOOL v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void *)a1[1];
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 184 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
  {
    return (void **)std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xB21642C8590B21) {
      unint64_t v11 = 0x1642C8590B21642;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[184 * v8];
    v17[0] = v12;
    v17[1] = v14;
    uint64_t v18 = v14;
    unint64_t v19 = &v12[184 * v11];
    uint64_t v15 = 184 * a2;
    uint64_t v16 = &v14[184 * a2];
    do
    {
      *((void *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0u;
      *((_OWORD *)v14 + 1CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
      *((_OWORD *)v14 + 7) = 0u;
      *((_OWORD *)v14 + 8) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *(_OWORD *)unint64_t v14 = 0u;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
      v14 += 184;
      v15 -= 184;
    }
    while (v15);
    uint64_t v18 = v16;
    std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
  }
}

void sub_223FF69E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 184 * a2;
    uint64_t v5 = 184 * a2;
    do
    {
      *(void *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      unint64_t result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_223FF6A7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_223FF6BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_rows_from_cache(atomic_ullong *a1, unint64_t a2, void *a3, void *a4)
{
  unint64_t v6 = a1;
  unint64_t v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  unint64_t v36 = a3;
  unint64_t v34 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, (unint64_t)a3 - 1);
  if (v7 < v34 + 1)
  {
    unint64_t v8 = 0;
    uint64_t v37 = v6;
    do
    {
      unint64_t v9 = v7;
      atomic_ullong v10 = v6[24];
      unint64_t v11 = *(void *)(v10 + 8 * v7);
      unint64_t v38 = v7 + 1;
      uint64_t v12 = *(void **)(v10 + 8 * (v7 + 1));
      atomic_ullong v13 = v6[42];
      long long v14 = (atomic_uchar *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
      }
      while (atomic_exchange(v14, 1u));
      if (v11 <= a2) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = v11;
      }
      unint64_t v16 = v13 + 184 * v9;
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (void **)(v16 + 24);
      uint64_t v17 = v19;
      if (v12 >= v36) {
        uint64_t v20 = v36;
      }
      else {
        uint64_t v20 = v12;
      }
      unint64_t v21 = (unint64_t)*(v18 - 2);
      if (v17) {
        BOOL v22 = v21 > v15;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(v6, v9, (uint64_t)v14);
        unint64_t v21 = (unint64_t)*(v18 - 2);
      }
      atomic_ullong v23 = v6[24];
      uint64_t v24 = *(void *)(v23 + 8 * v9);
      if (v21 == v15)
      {
        uint64_t v25 = (char *)v20 - v15;
        if ((unint64_t)v20 <= v15)
        {
          unint64_t v7 = v38;
        }
        else
        {
          uint64_t v26 = -48 * v24;
          unint64_t v27 = v20;
          uint64_t v28 = v26 + 48 * v15;
          uint64_t v29 = 48 * v8;
          uint64_t v33 = v27;
          unint64_t v8 = (unint64_t)v27 + v8 - v15;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](*a4 + v29, **v18 + v28);
            v28 += 48;
            v29 += 48;
            --v25;
          }
          while (v25);
          unint64_t v6 = v37;
          unint64_t v7 = v38;
          atomic_ullong v23 = v37[24];
          uint64_t v20 = v33;
        }
        *(v18 - 2) = v20;
        if (v20 == *(void **)(v23 + 8 * v7)) {
          turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(v6, v9);
        }
      }
      else
      {
        BOOL v22 = (unint64_t)v20 > v15;
        __n128 v30 = (char *)v20 - v15;
        if (v22)
        {
          uint64_t v31 = -48 * v24 + 48 * v15;
          uint64_t v32 = 48 * v8;
          unint64_t v7 = v38;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((std::string *)(*a4 + v32), **v18 + v31);
            ++v8;
            v31 += 48;
            v32 += 48;
            --v30;
          }
          while (v30);
        }
        else
        {
          unint64_t v7 = v38;
        }
      }
      __dmb(0xBu);
      atomic_uchar *v14 = 0;
      unint64_t v6 = v37;
    }
    while (v9 != v34);
  }
}

void sub_223FF6EB4(_Unwind_Exception *a1)
{
  __dmb(0xBu);
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = &v12[48 * v8];
    uint64_t v18 = &v12[48 * v11];
    size_t v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v15);
  }
}

void sub_223FF701C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(atomic_ullong *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::get_new_buffer(&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, (uint64_t)&v18);
    long long v7 = v18;
    long long v18 = 0uLL;
    unint64_t v8 = *(std::__shared_weak_count **)(a3 + 32);
    *(_OWORD *)(a3 + 24) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
    }
    uint64_t v6 = *(uint64_t **)(a3 + 24);
  }
  uint64_t v9 = a1[21] + 24 * a2;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(v9 + 16);
  long long v16 = *(_OWORD *)v9;
  uint64_t v17 = v11;
  if (!turi::v2_block_impl::block_manager::read_block<std::pair<std::vector<turi::flexible_type>,std::string>>(v10, &v16, v6, 0)) {
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  }
  *(void *)(a3 + 8) = *(void *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  atomic_ullong v12 = a1[38];
  if ((*(void *)(v12 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    atomic_fetch_add(a1 + 41, 1uLL);
    atomic_ullong v12 = a1[38];
  }
  atomic_fetch_or((atomic_ullong *volatile)(v12 + 8 * (a2 >> 6)), 1 << a2);
  atomic_ullong v13 = a1[41];
  if (v13 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    uint64_t v14 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v13;
    do
    {
      if (a1[41] <= (unint64_t)turi::SFRAME_MAX_BLOCKS_IN_CACHE) {
        break;
      }
      turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v14++, 1));
  }
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[42];
  if (*(unsigned char *)(v2 + 184 * a2 + 17))
  {
    uint64_t v5 = 184 * a2;
    turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, (__n128 *)(v2 + 184 * a2 + 24));
    uint64_t v6 = a1[42] + v5;
    long long v7 = *(std::__shared_weak_count **)(v6 + 32);
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + 184 * a2 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42]
                                                                                                  + 184 * a2
                                                                                                  + 112));
    *(unsigned char *)(a1[42] + 184 * a2 + 17) = 0;
    atomic_fetch_and((atomic_ullong *volatile)(a1[38] + 8 * (a2 >> 6)), ~(1 << a2));
    atomic_fetch_add(a1 + 41, 0xFFFFFFFFFFFFFFFFLL);
  }
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](std::string *a1, uint64_t a2)
{
  if (a1 != (std::string *)a2) {
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  std::string::operator=(a1 + 1, (const std::string *)(a2 + 24));
  return a1;
}

uint64_t turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = &a1[1].__opaque[24];
  if (!*(void *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    uint64_t v6 = *(void *)a1[1].__opaque;
    uint64_t v5 = *(void *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + v7 + 8);
        if (v9 && !*(void *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(v4, (long long *)(v6 + v7));
          uint64_t v6 = *(void *)a1[1].__opaque;
          uint64_t v5 = *(void *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(void *)a1[2].__opaque) {
      goto LABEL_14;
    }
  }
  pthread_mutex_lock(a1);
  uint64_t v10 = *(void *)a1[2].__opaque;
  if (v10)
  {
    long long v11 = *(_OWORD *)(*(void *)(*(void *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  uint64_t result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_14:
    atomic_ullong v13 = operator new(0x30uLL);
    v13[1] = 0;
    v13[2] = 0;
    void v13[3] = 0;
    void *v13 = &unk_26D768458;
    void v13[4] = 0;
    v13[5] = 0;
    *(void *)a2 = v13 + 3;
    *(void *)(a2 + 8) = v13;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(void *)&a1[1].__opaque[8] - *(void *)a1[1].__opaque) >> 4)) {
      std::vector<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back[abi:ne180100]((uint64_t *)a1[1].__opaque, (long long *)a2);
    }
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_223FF73EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  if (*(void *)(v2 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v2 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<std::pair<std::vector<turi::flexible_type>,std::string>>(uint64_t a1, long long *a2, uint64_t *a3, void *a4)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v11, a4, &v13);
  unint64_t v6 = v13.n128_u64[0];
  if (v13.n128_u64[0])
  {
    uint64_t v7 = *(void *)v13.n128_u64[0];
    uint64_t v8 = *(void *)(v13.n128_u64[0] + 8) - *(void *)v13.n128_u64[0];
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = v7;
    v10[3] = 0;
    void v10[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec((turi::iarchive *)v10, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v13);
  if (v13.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
  }
  return v6 != 0;
}

void sub_223FF74F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2 = (uint64_t)(*((void *)a1 + 43) - *((void *)a1 + 42)) >> 3;
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = (char *)turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)(source + 6288));
    unint64_t v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)(source + 6288));
  }
  unint64_t v5 = v3 >> 6;
  unint64_t v6 = (void *)*((void *)a1 + 38);
  unint64_t v7 = v6[v3 >> 6];
  if ((v7 >> v3)) {
    goto LABEL_4;
  }
  unint64_t v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    unint64_t v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((void *)a1 + 39)) {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v10 = v5 << 6;
    unint64_t v11 = v5 + 1;
    while (v11 < *((void *)a1 + 40))
    {
      unint64_t v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        unint64_t v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    unint64_t v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      unint64_t v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    unint64_t v14 = *((void *)a1 + 40);
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v15 = v14 - 1;
    long long v16 = v6 + 1;
    while (v15)
    {
      unint64_t v18 = *v16++;
      unint64_t v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        unint64_t v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  unint64_t v3 = 0;
LABEL_4:
  uint64_t v19 = *((void *)a1 + 42) + 184 * v3;
  char v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19)) {
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(a1, v3);
  }
  if (v20)
  {
    uint64_t v8 = (unsigned char *)v19;
    __dmb(0xBu);
    *uint64_t v8 = 0;
  }
}

void sub_223FF76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_223FF77DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223FF7B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v11 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v11 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(a2, v11);
  if (v11)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v10 = (std::string *)(*a2 + v8);
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)v10);
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, v10 + 1);
      v8 += 48;
    }
  }
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(uint64_t a1, std::string *this)
{
  size_t __n = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    std::string::size_type v6 = *(void *)(v4 + v5);
    size_t __n = v6;
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    std::string::size_type v6 = 0;
  }
  std::string::resize(this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v8 + *(void *)(a1 + 24)), __n);
  *(void *)(a1 + 24) += __n;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v10 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v10 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::flexible_type>::resize(a2, v10);
  if (v10)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      v8 += 16;
    }
  }
}

void turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(turi::iarchive *a1, unint64_t *a2)
{
  unsigned __int8 v35 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (!v4)
  {
    std::istream::read();
    int v6 = 0;
LABEL_3:
    if (*((void *)a1 + 2))
    {
      *((void *)a1 + 3) += 4;
    }
    else
    {
      std::istream::read();
      int v6 = v35;
    }
    switch(*((unsigned char *)a2 + 12))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v10 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        if (*((char *)v10 + 31) < 0) {
          operator delete((void *)v10[1]);
        }
        atomic_ullong *volatile v11 = v10;
        uint64_t v12 = 0x1012C404EF22A49;
        goto LABEL_44;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v13 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        long long v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = (atomic_ullong)v14;
          operator delete(v14);
        }
        atomic_ullong *volatile v11 = v13;
        uint64_t v12 = 0x1080C409938AC02;
        goto LABEL_44;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v15 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        uint64_t v36 = (void **)(v15 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_30;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v15 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        uint64_t v36 = (void **)(v15 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_30:
        atomic_ullong *volatile v11 = v15;
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_44;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v16 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v16 + 2);
        atomic_ullong *volatile v11 = v16;
        unsigned int v17 = -235920773;
        goto LABEL_43;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_46;
        }
        atomic_ullong *volatile v18 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_45;
        }
        uint64_t v19 = (void *)v18[6];
        if (v19)
        {
          v18[7] = (atomic_ullong)v19;
          operator delete(v19);
        }
        int64_t v20 = (void *)v18[3];
        if (v20)
        {
          void v18[4] = (atomic_ullong)v20;
          operator delete(v20);
        }
        uint64_t v21 = (std::__shared_weak_count *)v18[2];
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        atomic_ullong *volatile v11 = v18;
        unsigned int v17 = 2071181815;
LABEL_43:
        uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_44:
        MEMORY[0x22A614FA0](v11, v12);
LABEL_45:
        *a2 = 0;
LABEL_46:
        uint64_t v22 = 0;
        *a2 = 0;
        *((_DWORD *)a2 + 2) = 0;
        *((unsigned char *)a2 + 12) = v6;
        switch(v6)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_70;
          case 6:
            goto LABEL_74;
          case 8:
            goto LABEL_75;
          case 9:
            operator new();
          default:
            goto LABEL_71;
        }
      default:
        goto LABEL_46;
    }
  }
  uint64_t v5 = *((void *)a1 + 3);
  unsigned __int8 v35 = *(unsigned char *)(v4 + v5);
  int v6 = v35;
  *((void *)a1 + 3) = v5 + 1;
  if ((v35 & 0x80) == 0) {
    goto LABEL_3;
  }
  switch(*((unsigned char *)a2 + 12))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_68;
        }
        if (*((char *)v7 + 31) < 0) {
          operator delete((void *)v7[1]);
        }
        uint64_t v8 = v7;
        uint64_t v9 = 0x1012C404EF22A49;
        goto LABEL_67;
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v23 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_68;
        }
        uint64_t v24 = (void *)v23[1];
        if (v24)
        {
          _OWORD v23[2] = (atomic_ullong)v24;
          operator delete(v24);
        }
        uint64_t v8 = v23;
        uint64_t v9 = 0x1080C409938AC02;
        goto LABEL_67;
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v25 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_68;
        }
        uint64_t v36 = (void **)(v25 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_59;
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v25 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_68;
        }
        uint64_t v36 = (void **)(v25 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_59:
        uint64_t v8 = v25;
        uint64_t v9 = 0x1020C405E66F15BLL;
        goto LABEL_67;
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v26 = (atomic_ullong *volatile)*a2;
        if (!*a2) {
          goto LABEL_68;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
        uint64_t v8 = v26;
        unsigned int v27 = -235920773;
        goto LABEL_66;
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)*a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        if (*a2)
        {
          uint64_t v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a2);
          unsigned int v27 = 2071181815;
LABEL_66:
          uint64_t v9 = v27 | 0x1030C4000000000;
LABEL_67:
          MEMORY[0x22A614FA0](v8, v9);
        }
LABEL_68:
        *a2 = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v22 = 0;
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((unsigned char *)a2 + 12) = v35 ^ 0x80;
  switch(v35 ^ 0x80)
  {
    case 2:
    case 3:
    case 4:
    case 5:
LABEL_70:
      operator new();
    case 6:
LABEL_74:
      uint64_t v22 = 0x1900000000000000;
      *a2 = 0x1900000000000000;
      *((_DWORD *)a2 + 2) = 0;
      break;
    case 8:
LABEL_75:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
LABEL_71:
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
    case 1:
      uint64_t v28 = *((void *)a1 + 2);
      if (!v28) {
        goto LABEL_95;
      }
      *a2 = *(void *)(v28 + *((void *)a1 + 3));
      uint64_t v29 = *((void *)a1 + 3) + 8;
      goto LABEL_106;
    case 2:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, (std::string *)(*a2 + 8));
      return;
    case 3:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)a1, (void *)(*a2 + 8));
      return;
    case 4:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)(*a2 + 8));
      return;
    case 5:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a1, (uint64_t *)(*a2 + 8));
      return;
    case 6:
      uint64_t v30 = *((void *)a1 + 2);
      if (v30)
      {
        *a2 = *(void *)(v30 + *((void *)a1 + 3));
        *((void *)a1 + 3) += 8;
      }
      else
      {
        std::istream::read();
      }
      uint64_t v31 = (uint64_t)*a2 >> 56;
      if ((v31 + 24) > 0x30)
      {
        uint64_t v34 = *((void *)a1 + 2);
        if (v34)
        {
          *((_DWORD *)a2 + 2) = *(_DWORD *)(v34 + *((void *)a1 + 3));
          uint64_t v29 = *((void *)a1 + 3) + 4;
LABEL_106:
          *((void *)a1 + 3) = v29;
        }
        else
        {
LABEL_95:
          std::istream::read();
        }
      }
      else
      {
        char v32 = 2 * v31;
        if ((2 * v31 - 49) <= 0xFFFFFF9E) {
          turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
        }
        if ((int)v31 >= 0) {
          char v33 = 25;
        }
        else {
          char v33 = -25;
        }
        *a2 = *a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v33 + v32) << 56);
        *((_DWORD *)a2 + 2) = 0;
      }
      return;
    case 7:
      return;
    case 8:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::image_type::load((turi::image_type *)(*a2 + 8), a1);
      return;
    case 9:
      if (*(void *)v22 != 1) {
        operator new();
      }
      turi::flexible_type_impl::ndarray<double>::load((void *)(*a2 + 8), (uint64_t)a1);
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_223FF8AB8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  a2[1] = *a2;
  std::vector<double>::resize((uint64_t)a2, v6);
  atomic_ullong *volatile v7 = (void *)*a2;
  size_t v8 = a2[1] - *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v9 + *(void *)(a1 + 24)), v8);
  *(void *)(a1 + 24) += v8;
  return result;
}

void *turi::flexible_type_impl::ndarray<double>::load(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    int v6 = *(unsigned __int8 *)(v4 + v5);
    *(void *)(a2 + 24) = v5 + 1;
    if (v6) {
      turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    std::istream::read();
  }
  a1[8] = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(a2, a1 + 2);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(a2, a1 + 5);
  atomic_ullong *volatile v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *atomic_ullong *volatile v7 = &unk_26D754C90;
  void v7[4] = 0;
  void v7[5] = 0;
  size_t v8 = (std::__shared_weak_count *)a1[1];
  a1[1] = v7;
  void v7[3] = 0;
  uint64_t v9 = v7 + 3;
  *a1 = v9;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    uint64_t v9 = (void *)*a1;
  }
  return turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec(a2, v9);
}

void turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"c == 0", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 545, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FF8E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  a2[1] = *a2;
  std::vector<unsigned long>::resize((uint64_t)a2, v6);
  char v7 = (void *)*a2;
  size_t v8 = a2[1] - *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v9 + *(void *)(a1 + 24)), v8);
  *(void *)(a1 + 24) += v8;
  return result;
}

uint64_t turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v11 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v11 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  for (uint64_t i = a2[1]; i != v7; uint64_t i = std::pair<turi::flexible_type,turi::flexible_type>::~pair(i - 32))
    ;
  a2[1] = v7;
  uint64_t result = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::resize(a2, v11);
  if (v11)
  {
    uint64_t v9 = 0;
    for (unint64_t j = 0; j < v11; ++j)
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      uint64_t result = turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      v9 += 32;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = (result - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (result != v6)
        uint64_t result = std::pair<turi::flexible_type,turi::flexible_type>::~pair(result - 32);
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__append(a1, v5);
  }
  return result;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(unsigned char *)(v7 + 28) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v17[4] = result;
    if (v12) {
      atomic_ullong *volatile v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, v12);
    }
    else {
      atomic_ullong *volatile v13 = 0;
    }
    atomic_ullong *volatile v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    atomic_ullong *volatile v16 = &v15[32 * a2];
    do
    {
      *(void *)atomic_ullong *volatile v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      *((void *)v15 + 2) = 0;
      *((_DWORD *)v15 + 6) = 0;
      v15[28] = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_223FF92C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::release_buffer(uint64_t a1, __n128 *a2)
{
  unint64_t v2 = (uint64_t *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    uint64_t v6 = *v2;
    uint64_t v5 = v2[1];
    if (v5 == *v2)
    {
      unint64_t v7 = a2->n128_u64[0];
    }
    else
    {
      do
      {
        v5 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v5);
      }
      while (v5 != v6);
      unint64_t v7 = a2->n128_u64[0];
      uint64_t v5 = *(void *)a2->n128_u64[0];
    }
    v2[1] = v6;
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 16) - v5) >> 4) >= 0x100000) {
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)v7);
    }
    if ((unint64_t)(*(void *)(a1 + 136) + ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4)) < *(void *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back((void *)(a1 + 96), a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    uint64_t v8 = (std::__shared_weak_count *)a2->n128_u64[1];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_223FF93E0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::init(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  a1[5] = a2;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  unint64_t v8 = turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::size(a2);
  if (v8 >= a4) {
    unint64_t v9 = a4;
  }
  else {
    unint64_t v9 = v8;
  }
  a1[9] = v9;
  a1[10] = a5;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v10 != *a1)
  {
    do
    {
      v10 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v10);
    }
    while (v10 != v11);
  }
  a1[1] = v11;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    atomic_ullong *volatile v15 = v12;
    atomic_ullong *volatile v16 = &v12[96 * v8];
    atomic_ullong *volatile v18 = &v12[96 * v11];
    size_t v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    unsigned int v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(&v15);
  }
}

void sub_223FF96FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  uint64_t v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      long long v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(void *)(v7 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      long long v9 = *(_OWORD *)(a3 + 56);
      long long v10 = *(_OWORD *)(a3 + 72);
      uint64_t v11 = *(void *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 4CoreML::Specification::AdamOptimizer::New(this, 0) = v9;
      uint64_t v7 = *((void *)&v17 + 1) - 96;
      *((void *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::destroy[abi:ne180100](v4, i - 96);
  }
}

void turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0::operator()(uint64_t a1)
{
  v65[4] = *MEMORY[0x263EF8340];
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
  if (add < **(void **)(a1 + 8))
  {
    while (1)
    {
      turi::sframe::get_output_iterator(*(size_t **)(a1 + 16), add, (uint64_t)v62);
      if ((*(void *)(**(void **)(a1 + 24) + ((add >> 3) & 0x1FFFFFFFFFFFFFF8)) >> add))
      {
        uint64_t v3 = (int *)global_logger();
        if (v3[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v3)) {
            goto LABEL_65;
          }
          uint64_t v4 = (file_logger *)global_logger();
          started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort_and_merge.cpp", "operator()", 157, 1);
          uint64_t v6 = pthread_getspecific(*((void *)started + 74));
          if (v6 && *((unsigned char *)v6 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"segment ", 8);
          }
          uint64_t v7 = file_logger::operator<<<unsigned long>((uint64_t)started);
          long long v8 = pthread_getspecific(*(void *)(v7 + 592));
          if (v8 && *((unsigned char *)v8 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)" is already sorted, skip sorting ", 33);
          }
          long long v9 = pthread_getspecific(*(void *)(v7 + 592));
          if (v9)
          {
            if (*((unsigned char *)v9 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
              long long v10 = std::locale::use_facet((const std::locale *)&v53, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
              std::locale::~locale((std::locale *)&v53);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v7);
              if (*(_DWORD *)(v7 + 600) == 7) {
                goto LABEL_66;
              }
            }
          }
        }
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v11 = *(void **)(a1 + 40);
        unint64_t v13 = **(void **)(a1 + 48);
        std::vector<turi::flexible_type>::vector(v60, v13);
        std::vector<turi::flexible_type>::vector(v59, v13);
        (*(void (**)(long long *__return_ptr))(**(void **)v12 + 32))(&v53);
        while (1)
        {
          (*(void (**)(long long *__return_ptr))(**(void **)v12 + 40))(&v47);
          BOOL v14 = v53 != v47 || v58 != v52;
          if (v51 < 0) {
            operator delete(__p);
          }
          unint64_t v61 = (void **)&v48;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          if (!v14) {
            break;
          }
          long long v47 = v54;
          uint64_t v48 = v55;
          uint64_t v55 = 0;
          long long v54 = 0uLL;
          long long v49 = v56;
          std::string __p = v57;
          long long v56 = 0uLL;
          double v57 = 0;
          turi::query_eval::sort_row_to_output_row((uint64_t)&v47, (uint64_t *)v60, v13);
          turi::query_eval::permute_row(v60, v59, v11);
          if (!v63) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v63 + 48))(v63, v59);
          if (SHIBYTE(__p) < 0) {
            operator delete((void *)v49);
          }
          unint64_t v61 = (void **)&v47;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::operator++((uint64_t)&v53);
        }
        if (SHIBYTE(v57) < 0) {
          operator delete((void *)v56);
        }
        *(void *)&long long v47 = &v54;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
        *(void *)&long long v53 = v59;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        *(void *)&long long v53 = v60;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        goto LABEL_61;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
      while (1)
      {
        char v15 = *(unint64_t **)(a1 + 64);
        unint64_t v16 = *(void *)(**(void **)(a1 + 72) + 8 * add);
        unint64_t v17 = v16 + *v15;
        if (v17 <= turi::sframe_config::SFRAME_SORT_BUFFER_SIZE) {
          break;
        }
        if (v16 <= turi::sframe_config::SFRAME_SORT_BUFFER_SIZE)
        {
          if (!v16) {
            break;
          }
        }
        else if (!*v15)
        {
          break;
        }
        int v18 = pthread_cond_wait(*(pthread_cond_t **)(a1 + 80), *(pthread_mutex_t **)(a1 + 56));
        assert_msg(v18 == 0, "Condition variable wait error %d", v18);
      }
      unint64_t *v15 = v17;
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
      uint64_t v19 = *(void **)(a1 + 32);
      unint64_t v20 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v19 + 24))(*v19, add);
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize((uint64_t *)&v44, v20);
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)&v44);
      if (!add) {
        break;
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      do
        v22 += (*(uint64_t (**)(void, uint64_t))(*(void *)*v19 + 24))(*v19, v21++);
      while (add != v21);
      if (add != -1) {
        goto LABEL_41;
      }
      uint64_t v23 = 0;
LABEL_43:
      (*(void (**)(void, uint64_t, uint64_t, char **))(*(void *)*v19 + 48))(*v19, v22, v23, &v44);
      atomic_ullong *volatile v25 = v44;
      atomic_ullong *volatile v26 = v45;
      std::vector<BOOL>::vector(v43, *(void *)(a1 + 88));
      unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 4));
      if (v26 == v25) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28;
      }
      std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(v25, v26, v43, v29, 1, v27);
      if (v43[0]) {
        operator delete(v43[0]);
      }
      uint64_t v30 = *(void **)(a1 + 40);
      unint64_t v31 = **(void **)(a1 + 48);
      std::vector<turi::flexible_type>::vector(&v53, v31);
      std::vector<turi::flexible_type>::vector(&v47, v31);
      char v33 = v44;
      char v32 = v45;
      while (v33 != v32)
      {
        turi::query_eval::sort_row_to_output_row((uint64_t)v33, (uint64_t *)&v53, v31);
        turi::query_eval::permute_row(&v53, (uint64_t *)&v47, v30);
        if (!v63) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v63 + 48))(v63, &v47);
        v33 += 48;
      }
      v60[0] = (void **)&v47;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v60);
      *(void *)&long long v47 = &v53;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      turi::sframe::flush_write_to_segment(*(turi::sframe **)(a1 + 16));
      uint64_t v34 = (int *)global_logger();
      if (v34[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v34)) {
LABEL_65:
        }
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        unsigned __int8 v35 = (file_logger *)global_logger();
        uint64_t v36 = file_logger::start_stream(v35, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort_and_merge.cpp", "operator()", 178, 1);
        uint64_t v37 = pthread_getspecific(*((void *)v36 + 74));
        if (v37 && *((unsigned char *)v37 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"Finished sorting segment ", 25);
        }
        uint64_t v38 = file_logger::operator<<<unsigned long>((uint64_t)v36);
        uint64_t v39 = pthread_getspecific(*(void *)(v38 + 592));
        if (v39)
        {
          if (*((unsigned char *)v39 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(v39[2] - 24) + 16));
            uint64_t v40 = std::locale::use_facet((const std::locale *)&v53, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
            std::locale::~locale((std::locale *)&v53);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v38);
            if (*(_DWORD *)(v38 + 600) == 7)
            {
LABEL_66:
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
      **(void **)(a1 + 64) -= *(void *)(**(void **)(a1 + 72) + 8 * add);
      int v41 = pthread_cond_signal(*(pthread_cond_t **)(a1 + 80));
      assert_msg(v41 == 0, "Condition variable signal error %d", v41);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
LABEL_61:
      unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v65);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v64);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v62);
      if (add >= **(void **)(a1 + 8)) {
        goto LABEL_62;
      }
    }
    uint64_t v22 = 0;
LABEL_41:
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    do
      v23 += (*(uint64_t (**)(void, uint64_t))(*(void *)*v19 + 24))(*v19, v24++);
    while (add + 1 != v24);
    goto LABEL_43;
  }
LABEL_62:
  v62[0] = (void **)&v44;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](v62);
}

void sub_223FFA1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::locale::~locale(&a30);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v40 - 192));
  *(void *)(v40 - 192) = &a16;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 192));
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_iterator(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void turi::query_eval::sort_row_to_output_row(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  std::vector<turi::flexible_type>::resize(a2, a3);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = (uint64_t)v6 - *(void *)a1;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)v14, *(uint64_t **)a1, v6, *a2);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v9 = a1 + 24;
  uint64_t v8 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v8 = v9;
  }
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v14[2] = v8;
  void v14[3] = 0;
  void v14[4] = v11;
  if (a3 > v7 >> 4)
  {
    unint64_t v12 = a3 - (v7 >> 4);
    uint64_t v13 = 16 * (v7 >> 4);
    do
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)v14, (unint64_t *)(*a2 + v13));
      v13 += 16;
      --v12;
    }
    while (v12);
  }
}

void turi::query_eval::permute_row(void *a1, uint64_t *a2, void *a3)
{
  std::vector<turi::flexible_type>::resize(a2, (uint64_t)(a1[1] - *a1) >> 4);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *a1 + 16 * *(void *)(*a3 + 8 * v9);
      uint64_t v11 = v7 + v8;
      if (v7 + v8 != v10)
      {
        switch(*(unsigned char *)(v11 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v11;
              if (!*(void *)v11) {
                goto LABEL_36;
              }
              if (*((char *)v12 + 31) < 0) {
                operator delete((void *)v12[1]);
              }
              atomic_ullong *volatile v13 = v12;
              uint64_t v14 = 0x1012C404EF22A49;
              goto LABEL_35;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v11;
              if (!*(void *)v11) {
                goto LABEL_36;
              }
              unint64_t v16 = (void *)v15[1];
              if (v16)
              {
                v15[2] = (atomic_ullong)v16;
                operator delete(v16);
              }
              atomic_ullong *volatile v13 = v15;
              uint64_t v14 = 0x1080C409938AC02;
              goto LABEL_35;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v11;
              if (!*(void *)v11) {
                goto LABEL_36;
              }
              atomic_ullong *volatile v25 = (void **)(v17 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
              goto LABEL_21;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v11;
              if (!*(void *)v11) {
                goto LABEL_36;
              }
              atomic_ullong *volatile v25 = (void **)(v17 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v25);
LABEL_21:
              atomic_ullong *volatile v13 = v17;
              uint64_t v14 = 0x1020C405E66F15BLL;
              goto LABEL_35;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v11;
              if (!*(void *)v11) {
                goto LABEL_36;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
              atomic_ullong *volatile v13 = v18;
              unsigned int v19 = -235920773;
              goto LABEL_34;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v11;
              if (*(void *)v11)
              {
                uint64_t v21 = (void *)v20[6];
                if (v21)
                {
                  v20[7] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                uint64_t v22 = (void *)v20[3];
                if (v22)
                {
                  void v20[4] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                uint64_t v23 = (std::__shared_weak_count *)v20[2];
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
                atomic_ullong *volatile v13 = v20;
                unsigned int v19 = 2071181815;
LABEL_34:
                uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_35:
                MEMORY[0x22A614FA0](v13, v14);
              }
LABEL_36:
              *(void *)uint64_t v11 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v24 = *(void *)v10;
        *(void *)(v11 + 5) = *(void *)(v10 + 5);
        *(void *)uint64_t v11 = v24;
        *(unsigned char *)(v11 + 12) = *(unsigned char *)(v10 + 12);
        *(unsigned char *)(v10 + 12) = 0;
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < (v6 - v7) >> 4);
  }
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::operator++(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (v2[11] >= (unint64_t)v2[9])
  {
    *(void *)(a1 + 64) = *(void *)(a1 + 72);
    turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(v2);
  }
  else
  {
    uint64_t v3 = turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(v2);
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + 16, v3);
    ++*(void *)(a1 + 64);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(char *a1, char *a2, void *a3, uint64_t a4, char a5, __n128 a6)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, void *a2, void *a3, __n128 a4)
{
  if ((void *)a1 != a2)
  {
    char v6 = (void *)(a1 + 48);
    if ((void *)(a1 + 48) != a2)
    {
      uint64_t v8 = 0;
      unint64_t v9 = (void *)a1;
      do
      {
        uint64_t v10 = v6;
        if (turi::query_eval::less_than_full_function::compare(a3, v6, v9, a4))
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = v9[8];
          v10[1] = 0;
          v10[2] = 0;
          *uint64_t v10 = 0;
          long long __p = *(_OWORD *)(v9 + 9);
          uint64_t v18 = v9[11];
          v9[10] = 0;
          v9[11] = 0;
          uint64_t v11 = v8;
          v9[9] = 0;
          while (1)
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + v11 + 48, a1 + v11);
            if (!v11) {
              break;
            }
            char v13 = turi::query_eval::less_than_full_function::compare(a3, &v15, (void *)(a1 + v11 - 48), v12);
            v11 -= 48;
            if ((v13 & 1) == 0)
            {
              uint64_t v14 = a1 + v11 + 48;
              goto LABEL_10;
            }
          }
          uint64_t v14 = a1;
LABEL_10:
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v14, (uint64_t)&v15);
          if (SHIBYTE(v18) < 0) {
            operator delete((void *)__p);
          }
          unsigned int v19 = (void **)&v15;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
        }
        char v6 = v10 + 6;
        v8 += 48;
        unint64_t v9 = v10;
      }
      while (v10 + 6 != a2);
    }
  }
}

void sub_223FFAC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, void *a2, void *a3, __n128 a4)
{
  if ((void *)a1 != a2)
  {
    uint64_t v5 = a1;
    char v6 = (void *)(a1 + 48);
    if ((void *)(a1 + 48) != a2)
    {
      do
      {
        uint64_t v8 = v6;
        if (turi::query_eval::less_than_full_function::compare(a3, v6, (void *)v5, a4))
        {
          long long v10 = *(_OWORD *)v8;
          uint64_t v11 = *(void *)(v5 + 64);
          v8[1] = 0;
          v8[2] = 0;
          *uint64_t v8 = 0;
          long long __p = *(_OWORD *)(v5 + 72);
          uint64_t v13 = *(void *)(v5 + 88);
          *(void *)(v5 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
          *(void *)(v5 + 88) = 0;
          *(void *)(v5 + 72) = 0;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5 + 48, v5);
            v5 -= 48;
          }
          while ((turi::query_eval::less_than_full_function::compare(a3, &v10, (void *)v5, v9) & 1) != 0);
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5 + 48, (uint64_t)&v10);
          if (SHIBYTE(v13) < 0) {
            operator delete((void *)__p);
          }
          uint64_t v14 = (void **)&v10;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
        }
        char v6 = v8 + 6;
        uint64_t v5 = (uint64_t)v8;
      }
      while (v8 + 6 != a2);
    }
  }
}

void sub_223FFADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4, __n128 a5)
{
  char v9 = turi::query_eval::less_than_full_function::compare(a4, a2, a1, a5);
  uint64_t result = turi::query_eval::less_than_full_function::compare(a4, a3, a2, v10);
  if ((v9 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v19 = *a2;
    *a2 = *a3;
    *a3 = v19;
    uint64_t v20 = a2[1];
    a2[1] = a3[1];
    a3[1] = v20;
    uint64_t v21 = a2[2];
    a2[2] = a3[2];
    a3[2] = v21;
    uint64_t v22 = a2[5];
    __n128 v23 = *(__n128 *)(a2 + 3);
    uint64_t v24 = a3[5];
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    a2[5] = v24;
    *(__n128 *)(a3 + 3) = v23;
    a3[5] = v22;
    if (!turi::query_eval::less_than_full_function::compare(a4, a2, a1, v23)) {
      return 1;
    }
    uint64_t v25 = *a1;
    *a1 = *a2;
    *a2 = v25;
    uint64_t v26 = a1[1];
    a1[1] = a2[1];
    a2[1] = v26;
    uint64_t v27 = a1[2];
    a1[2] = a2[2];
    a2[2] = v27;
    uint64_t v28 = a1[5];
    long long v29 = *(_OWORD *)(a1 + 3);
    uint64_t v30 = a2[5];
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    a1[5] = v30;
    *(_OWORD *)(a2 + 3) = v29;
    a2[5] = v28;
    return 2;
  }
  __n128 v12 = (__n128 *)(a1 + 3);
  uint64_t v13 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v13;
    uint64_t v31 = a1[1];
    a1[1] = a2[1];
    a2[1] = v31;
    uint64_t v32 = a1[2];
    a1[2] = a2[2];
    a2[2] = v32;
    uint64_t v33 = a1[5];
    __n128 v34 = *v12;
    uint64_t v35 = a2[5];
    *__n128 v12 = *(__n128 *)(a2 + 3);
    a1[5] = v35;
    *(__n128 *)(a2 + 3) = v34;
    a2[5] = v33;
    if (!turi::query_eval::less_than_full_function::compare(a4, a3, a2, v34)) {
      return 1;
    }
    uint64_t v36 = *a2;
    *a2 = *a3;
    *a3 = v36;
    uint64_t v37 = a2[1];
    a2[1] = a3[1];
    a3[1] = v37;
    uint64_t v38 = a2[2];
    a2[2] = a3[2];
    a3[2] = v38;
    uint64_t v39 = a2[5];
    long long v40 = *(_OWORD *)(a2 + 3);
    uint64_t v41 = a3[5];
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    a2[5] = v41;
    *(_OWORD *)(a3 + 3) = v40;
    a3[5] = v39;
    return 2;
  }
  *a1 = *a3;
  *a3 = v13;
  uint64_t v14 = a1[1];
  a1[1] = a3[1];
  a3[1] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a3[2];
  a3[2] = v15;
  uint64_t v16 = a1[5];
  __n128 v17 = *v12;
  uint64_t v18 = a3[5];
  *__n128 v12 = *(__n128 *)(a3 + 3);
  a1[5] = v18;
  *(__n128 *)(a3 + 3) = v17;
  a3[5] = v16;
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  long long v18 = *(_OWORD *)a1;
  uint64_t v19 = *(void *)(a1 + 16);
  __n128 v6 = *(__n128 *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(__n128 *)long long __p = v6;
  uint64_t v21 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  if (turi::query_eval::less_than_full_function::compare(a3, &v18, (void *)(a2 - 48), v6))
  {
    uint64_t v8 = (void *)a1;
    do
      v8 += 6;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, v8, v7) & 1) == 0);
  }
  else
  {
    char v9 = (void *)(a1 + 48);
    do
    {
      uint64_t v8 = v9;
      if ((unint64_t)v9 >= v4) {
        break;
      }
      int v10 = turi::query_eval::less_than_full_function::compare(a3, &v18, v9, v7);
      char v9 = v8 + 6;
    }
    while (!v10);
  }
  if ((unint64_t)v8 < v4)
  {
    do
      v4 -= 48;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, (void *)v4, v7) & 1) != 0);
  }
  while ((unint64_t)v8 < v4)
  {
    uint64_t v11 = *v8;
    *uint64_t v8 = *(void *)v4;
    *(void *)unint64_t v4 = v11;
    uint64_t v12 = v8[1];
    v8[1] = *(void *)(v4 + 8);
    *(void *)(v4 + 8) = v12;
    uint64_t v13 = v8[2];
    v8[2] = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = v13;
    uint64_t v14 = v8[5];
    __n128 v15 = *(__n128 *)(v8 + 3);
    uint64_t v16 = *(void *)(v4 + 40);
    *(_OWORD *)(v8 + 3) = *(_OWORD *)(v4 + 24);
    v8[5] = v16;
    *(__n128 *)(v4 + 24) = v15;
    *(void *)(v4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v14;
    do
      v8 += 6;
    while (!turi::query_eval::less_than_full_function::compare(a3, &v18, v8, v15));
    do
      v4 -= 48;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, (void *)v4, v15) & 1) != 0);
  }
  if (v8 - 6 != (void *)a1) {
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, (uint64_t)(v8 - 6));
  }
  std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((uint64_t)(v8 - 6), (uint64_t)&v18);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v22 = (void **)&v18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v8;
}

void sub_223FFB1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = 0;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 40);
  long long v20 = *(_OWORD *)a1;
  __n128 v7 = *(__n128 *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(__n128 *)long long __p = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  do
  {
    char v8 = turi::query_eval::less_than_full_function::compare(a3, (void *)(a1 + v6 + 48), &v20, v7);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while ((turi::query_eval::less_than_full_function::compare(a3, a2, &v20, v7) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!turi::query_eval::less_than_full_function::compare(a3, a2, &v20, v7));
  }
  if (v9 >= (unint64_t)a2)
  {
    uint64_t v18 = v9 - 48;
  }
  else
  {
    unint64_t v10 = a1 + v6;
    uint64_t v11 = a2;
    do
    {
      uint64_t v12 = *(void *)v10;
      *(void *)unint64_t v10 = *v11;
      void *v11 = v12;
      uint64_t v13 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v11[1];
      v11[1] = v13;
      uint64_t v14 = *(void *)(v10 + 16);
      *(void *)(v10 + 16) = v11[2];
      v11[2] = v14;
      uint64_t v15 = *(void *)(v10 + 40);
      __n128 v16 = *(__n128 *)(v10 + 24);
      uint64_t v17 = v11[5];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 3);
      *(void *)(v10 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v17;
      *(__n128 *)(v11 + 3) = v16;
      void v11[5] = v15;
      do
        v10 += 48;
      while ((turi::query_eval::less_than_full_function::compare(a3, (void *)v10, &v20, v16) & 1) != 0);
      do
        v11 -= 6;
      while (!turi::query_eval::less_than_full_function::compare(a3, v11, &v20, v16));
    }
    while (v10 < (unint64_t)v11);
    uint64_t v18 = v10 - 48;
  }
  if (v18 != a1) {
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, v18);
  }
  std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v18, (uint64_t)&v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = (void **)&v20;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v18;
}

void sub_223FFB3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, void *a3, __n128 a4)
{
  uint64_t v7 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v7)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (turi::query_eval::less_than_full_function::compare(a3, (void *)(a2 - 48), (void *)a1, a4))
      {
        uint64_t v9 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 48);
        *(void *)(a2 - 48) = v9;
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 40);
        *(void *)(a2 - 4CoreML::Specification::AdamOptimizer::New(this, 0) = v10;
        uint64_t v11 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 32);
        *(void *)(a2 - 32) = v11;
        uint64_t v12 = *(void *)(a1 + 40);
        long long v13 = *(_OWORD *)(a1 + 24);
        uint64_t v14 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v14;
        *(_OWORD *)(a2 - 24) = v13;
        *(void *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a2 - 48), a3, a4);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a1 + 48, a1 + 96, a2 - 48, a3, a4);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3, a4);
      return 1;
    default:
      uint64_t v15 = (void *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a3, a4);
      uint64_t v17 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if (turi::query_eval::less_than_full_function::compare(a3, (void *)v17, v15, v16))
    {
      long long v25 = *(_OWORD *)v17;
      uint64_t v26 = *(void *)(v17 + 16);
      long long v20 = *(_OWORD *)(v17 + 24);
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 24) = 0;
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;
      long long __p = v20;
      uint64_t v28 = *(void *)(v17 + 40);
      uint64_t v21 = v18;
      *(void *)(v17 + 32) = 0;
      *(void *)(v17 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      while (1)
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + v21 + 144, a1 + v21 + 96);
        if (v21 == -96) {
          break;
        }
        char v23 = turi::query_eval::less_than_full_function::compare(a3, &v25, (void *)(a1 + v21 + 48), v22);
        v21 -= 48;
        if ((v23 & 1) == 0)
        {
          uint64_t v24 = a1 + v21 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v24, (uint64_t)&v25);
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)__p);
      }
      ++v19;
      long long v29 = (void **)&v25;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
      if (v19 == 8) {
        return v17 + 48 == a2;
      }
    }
    uint64_t v15 = (void *)v17;
    v18 += 48;
    v17 += 48;
    if (v17 == a2) {
      return 1;
    }
  }
}

void sub_223FFB628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, __n128 a6)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5, a6);
  if (turi::query_eval::less_than_full_function::compare(a5, (void *)a4, (void *)a3, v11))
  {
    uint64_t v13 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v13;
    uint64_t v14 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v14;
    uint64_t v15 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v15;
    uint64_t v16 = *(void *)(a3 + 40);
    __n128 v17 = *(__n128 *)(a3 + 24);
    uint64_t v18 = *(void *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v18;
    *(__n128 *)(a4 + 24) = v17;
    *(void *)(a4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v16;
    if (turi::query_eval::less_than_full_function::compare(a5, (void *)a3, (void *)a2, v17))
    {
      uint64_t v19 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v19;
      uint64_t v20 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v20;
      uint64_t v21 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v21;
      uint64_t v22 = *(void *)(a2 + 40);
      __n128 v23 = *(__n128 *)(a2 + 24);
      uint64_t v24 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v24;
      *(__n128 *)(a3 + 24) = v23;
      *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v22;
      if (turi::query_eval::less_than_full_function::compare(a5, (void *)a2, (void *)a1, v23))
      {
        uint64_t v25 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v25;
        uint64_t v26 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v26;
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v27;
        uint64_t v28 = *(void *)(a1 + 40);
        __n128 result = *(__n128 *)(a1 + 24);
        uint64_t v29 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v29;
        *(__n128 *)(a2 + 24) = result;
        *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v28;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, __n128 a7)
{
  __n128 v13 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a2, a3, a4, a6, a7);
  if (turi::query_eval::less_than_full_function::compare(a6, (void *)a5, (void *)a4, v13))
  {
    uint64_t v15 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v15;
    uint64_t v16 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v16;
    uint64_t v17 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v17;
    uint64_t v18 = *(void *)(a4 + 40);
    __n128 v19 = *(__n128 *)(a4 + 24);
    uint64_t v20 = *(void *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(void *)(a4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v20;
    *(__n128 *)(a5 + 24) = v19;
    *(void *)(a5 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v18;
    if (turi::query_eval::less_than_full_function::compare(a6, (void *)a4, (void *)a3, v19))
    {
      uint64_t v21 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v21;
      uint64_t v22 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v22;
      uint64_t v23 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v23;
      uint64_t v24 = *(void *)(a3 + 40);
      __n128 v25 = *(__n128 *)(a3 + 24);
      uint64_t v26 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v26;
      *(__n128 *)(a4 + 24) = v25;
      *(void *)(a4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v24;
      if (turi::query_eval::less_than_full_function::compare(a6, (void *)a3, (void *)a2, v25))
      {
        uint64_t v27 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v27;
        uint64_t v28 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v28;
        uint64_t v29 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v29;
        uint64_t v30 = *(void *)(a2 + 40);
        __n128 v31 = *(__n128 *)(a2 + 24);
        uint64_t v32 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v32;
        *(__n128 *)(a3 + 24) = v31;
        *(void *)(a3 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v30;
        if (turi::query_eval::less_than_full_function::compare(a6, (void *)a2, (void *)a1, v31))
        {
          uint64_t v33 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v33;
          uint64_t v34 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v34;
          uint64_t v35 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v35;
          uint64_t v36 = *(void *)(a1 + 40);
          __n128 result = *(__n128 *)(a1 + 24);
          uint64_t v37 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v37;
          *(__n128 *)(a2 + 24) = result;
          *(void *)(a2 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v36;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,std::pair<std::vector<turi::flexible_type>,std::string> *>(char *a1, char *a2, uint64_t a3, void *a4, __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = (uint64_t)a2;
    uint64_t v9 = a2 - a1;
    uint64_t v10 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (uint64_t)&a1[48 * v11];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, a4, v10, v13, a5);
        v13 -= 48;
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      uint64_t v15 = (__n128 *)(a1 + 24);
      uint64_t v16 = v7;
      do
      {
        if (turi::query_eval::less_than_full_function::compare(a4, (void *)v16, a1, a5))
        {
          uint64_t v17 = *(void *)v16;
          *(void *)uint64_t v16 = *(void *)a1;
          *(void *)a1 = v17;
          uint64_t v18 = *(void *)(v16 + 8);
          *(void *)(v16 + 8) = *((void *)a1 + 1);
          *((void *)a1 + 1) = v18;
          uint64_t v19 = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = *((void *)a1 + 2);
          *((void *)a1 + 2) = v19;
          uint64_t v20 = *(void *)(v16 + 40);
          __n128 v21 = *(__n128 *)(v16 + 24);
          uint64_t v22 = *((void *)a1 + 5);
          *(__n128 *)(v16 + 24) = *v15;
          *(void *)(v16 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v22;
          __n128 *v15 = v21;
          *((void *)a1 + 5) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, a4, v10, (uint64_t)a1, v21);
        }
        v16 += 48;
      }
      while (v16 != a3);
      uint64_t v14 = a3;
    }
    if (v9 >= 49)
    {
      unint64_t v23 = v9 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, v7, a4, v23);
        v7 -= 48;
      }
      while (v23-- > 2);
    }
    return v14;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = a4;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      uint64_t v11 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      unint64_t v12 = (void *)(a1 + 48 * v11);
      uint64_t v13 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v13 < a3
        && turi::query_eval::less_than_full_function::compare(a2, (void *)(a1 + 48 * v11), v12 + 6, a5))
      {
        v12 += 6;
        uint64_t v11 = v13;
      }
      if ((turi::query_eval::less_than_full_function::compare(a2, v12, (void *)v6, a5) & 1) == 0)
      {
        long long v18 = *(_OWORD *)v6;
        uint64_t v19 = *(void *)(v6 + 16);
        long long v14 = *(_OWORD *)(v6 + 24);
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        *(_OWORD *)long long __p = v14;
        uint64_t v21 = *(void *)(v6 + 40);
        *(void *)(v6 + 32) = 0;
        *(void *)(v6 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
        do
        {
          uint64_t v15 = (uint64_t)v12;
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v6, (uint64_t)v12);
          if (v8 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          unint64_t v12 = (void *)(a1 + 48 * v17);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if (turi::query_eval::less_than_full_function::compare(a2, (void *)(a1 + 48 * v17), v12 + 6, v16))
          {
            v12 += 6;
          }
          else
          {
            uint64_t v11 = v17;
          }
          uint64_t v6 = v15;
        }
        while (!turi::query_eval::less_than_full_function::compare(a2, v12, &v18, v16));
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v15, (uint64_t)&v18);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v22 = (void **)&v18;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
      }
    }
  }
}

void sub_223FFBCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v12 = *(_OWORD *)a1;
    uint64_t v13 = *(void *)(a1 + 16);
    __n128 v7 = *(__n128 *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(__n128 *)long long __p = v7;
    uint64_t v15 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a3, a4, v7);
    uint64_t v9 = v8;
    uint64_t v10 = a2 - 48;
    if (v8 == v10)
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v8, (uint64_t)&v12);
    }
    else
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v8, v10);
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v10, (uint64_t)&v12);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, v9 + 48, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 48 - a1) >> 4), v11);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    __n128 v16 = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_223FFBE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a3 - 2;
  if (a3 < 2) {
    uint64_t v8 = a3 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    uint64_t v10 = a1 + 48 * v7 + 48;
    uint64_t v11 = (2 * v7) | 1;
    uint64_t v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_full_function::compare(a2, (void *)(a1 + 48 * v7 + 48), (void *)(a1 + 48 * v7 + 96), a4))
    {
      v10 += 48;
      uint64_t v11 = v12;
    }
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, v10);
    a1 = v10;
    uint64_t v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, __n128 a5)
{
  if (a4 >= 2)
  {
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (void *)(a1 + 48 * v8);
    uint64_t v10 = (void *)(a2 - 48);
    if (turi::query_eval::less_than_full_function::compare(a3, v9, (void *)(a2 - 48), a5))
    {
      long long v13 = *(_OWORD *)(a2 - 48);
      uint64_t v14 = *(void *)(a2 - 32);
      v10[1] = 0;
      v10[2] = 0;
      *uint64_t v10 = 0;
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 24);
      uint64_t v16 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v11 = (uint64_t)v9;
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(a1 + 48 * v8);
        uint64_t v10 = (void *)v11;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, v9, &v13, v12) & 1) != 0);
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v11, (uint64_t)&v13);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v17 = (void **)&v13;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
    }
  }
}

void sub_223FFBFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0>(unsigned long,unsigned long,turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval14sort_and_mergeERKNSt3__110shared_ptrINS_"
                                        "6sarrayINS2_4pairINS2_6vectorINS_13flexible_typeENS2_9allocatorIS7_EEEENS2_12bas"
                                        "ic_stringIcNS2_11char_traitsIcEENS8_IcEEEEEEEEEERKNS6_IbNS8_IbEEEERKNS6_ImNS8_Im"
                                        "EEEESO_SS_RKNS6_ISF_NS8_ISF_EEEERKNS6_INS_14flex_type_enumENS8_ISX_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval14sort_and_mergeERKNSt3__110shared_ptrINS_6sarrayINS2_4pairINS2_6vectorINS_13flexible_typeENS2_9allocatorIS7_EEEENS2_12basic_stringIcNS2_11char_traitsIcEENS8_IcEEEEEEEEEERKNS6_IbNS8_IbEEEERKNS6_ImNS8_ImEEEESO_SS_RKNS6_ISF_NS8_ISF_EEEERKNS6_INS_14flex_type_enumENS8_ISX_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0>(unsigned long,unsigned long,turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0::operator()(*a1);
}

uint64_t turi::query_eval::execution_node::execution_node(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 74) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  turi::query_eval::execution_node::init((void *)a1, a2, a3);
  return a1;
}

void sub_223FFC14C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  std::exception_ptr::~exception_ptr(v4);
  unint64_t v8 = *v6;
  if (*v6)
  {
    v1[13] = v8;
    operator delete(v8);
  }
  turi::query_eval::execution_node::execution_node(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::execution_node::init(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[3];
  a1[2] = v5;
  a1[3] = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v5 = a1[2];
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  turi::query_eval::planner_node_type_to_attributes(v8);
  uint64_t v10 = *(turi::query_eval::execution_node ***)a3;
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v11 = *(char **)(a3 + 8);
  }
  else
  {
    uint64_t v11 = *(char **)(a3 + 8);
    uint64_t v28 = v9;
    uint64_t v29 = (v11 - (char *)v10) >> 4;
    if (v29 != v9)
    {
      uint64_t v30 = &v29;
      __n128 v31 = (turi::query_eval::execution_node **)&v28;
      turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator()();
    }
  }
  if (v10 != (turi::query_eval::execution_node **)v11)
  {
    __n128 v12 = a1 + 6;
    do
    {
      uint64_t v14 = *v10;
      long long v13 = (std::__shared_weak_count *)v10[1];
      uint64_t v15 = *v10;
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = *v10;
      }
      uint64_t v16 = turi::query_eval::execution_node::register_consumer(v15);
      uint64_t v17 = v16;
      long long v18 = (turi::query_eval::execution_node **)a1[7];
      unint64_t v19 = a1[8];
      if ((unint64_t)v18 >= v19)
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *v12) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v12) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v34 = a1 + 8;
        if (v24) {
          __n128 v25 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 8), v24);
        }
        else {
          __n128 v25 = 0;
        }
        uint64_t v26 = (turi::query_eval::execution_node **)&v25[3 * v21];
        uint64_t v30 = v25;
        __n128 v31 = v26;
        uint64_t v33 = &v25[3 * v24];
        *uint64_t v26 = v14;
        v26[1] = (turi::query_eval::execution_node *)v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v25[3 * v21 + 2] = v17;
        uint64_t v32 = v26 + 3;
        std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(a1 + 6, &v30);
        uint64_t v20 = (void *)a1[7];
        std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((void **)&v30);
      }
      else
      {
        *long long v18 = v14;
        v18[1] = (turi::query_eval::execution_node *)v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v18[2] = (turi::query_eval::execution_node *)v16;
        uint64_t v20 = v18 + 3;
      }
      a1[7] = v20;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      v10 += 2;
    }
    while (v10 != (turi::query_eval::execution_node **)v11);
  }
  return turi::query_eval::execution_node::reset((turi::query_eval::execution_node *)a1);
}

void sub_223FFC3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((void **)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inputs.size()", 13);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(size_t)num_inputs", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    __n128 v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FFC56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::execution_node::register_consumer(turi::query_eval::execution_node *this)
{
  uint64_t v2 = (char *)this + 112;
  unint64_t v3 = *((void *)this + 14);
  uint64_t v4 = (char *)*((void *)this + 13);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = (char *)*((void *)this + 12);
    uint64_t v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = v3 - (void)v6;
    unint64_t v9 = (uint64_t)(v3 - (void)v6) >> 2;
    if (v9 <= v7 + 1) {
      unint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v2, v10);
      uint64_t v6 = (char *)*((void *)this + 12);
      uint64_t v4 = (char *)*((void *)this + 13);
    }
    else
    {
      uint64_t v11 = 0;
    }
    __n128 v12 = &v11[8 * v7];
    long long v13 = &v11[8 * v10];
    *(void *)__n128 v12 = 0;
    uint64_t v5 = v12 + 8;
    while (v4 != v6)
    {
      uint64_t v14 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v12 - 1) = v14;
      v12 -= 8;
    }
    *((void *)this + 12) = v12;
    *((void *)this + 13) = v5;
    *((void *)this + 14) = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    uint64_t v5 = v4 + 8;
  }
  *((void *)this + 13) = v5;
  return (((uint64_t)v5 - *((void *)this + 12)) >> 3) - 1;
}

uint64_t turi::query_eval::execution_node::reset(turi::query_eval::execution_node *this)
{
  if (*((unsigned char *)this + 88))
  {
    unint64_t v2 = (uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3;
    v7.__ptr_ = 0;
    std::vector<unsigned long>::assign((char **)this + 12, v2, &v7);
    *((unsigned char *)this + 88) = 0;
    uint64_t v3 = *((void *)this + 6);
    if (*((void *)this + 7) != v3)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        turi::query_eval::execution_node::reset(*(turi::query_eval::execution_node **)(v3 + v4));
        ++v5;
        uint64_t v3 = *((void *)this + 6);
        v4 += 24;
      }
      while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v3) >> 3));
    }
    *((unsigned char *)this + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
    v7.__ptr_ = 0;
    std::exception_ptr::operator=((std::exception_ptr *)this + 16, &v7);
    std::exception_ptr::~exception_ptr(&v7);
  }
  return std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100]((uint64_t *)this + 9, 0);
}

char *std::vector<unsigned long>::assign(char **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  __n128 result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    long long v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 3;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 3;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(void *)uint64_t v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      uint64_t v17 = &v13[8 * (a2 - v14)];
      uint64_t v18 = 8 * a2 - 8 * v14;
      do
      {
        *(void *)long long v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v9);
    unint64_t v10 = a1[1];
    uint64_t v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)unint64_t v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::~broadcast_queue(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void turi::query_eval::execution_node::start_coroutines(turi::query_eval::execution_node *this)
{
}

void sub_223FFCA70(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B2C408A395E1ALL);
  _Unwind_Resume(a1);
}

void turi::query_eval::execution_node::get_next(uint64_t **this@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  if (cppipc::must_cancel((cppipc *)this))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "Canceled by user";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
  *((unsigned char *)this + 89) = a3;
  while (1)
  {
    if (!*((unsigned char *)this + 88)) {
LABEL_7:
    }
      turi::query_eval::execution_node::start_coroutines((turi::query_eval::execution_node *)this);
    uint64_t v8 = this[9];
    uint64_t v9 = *(void *)(v8[21] + 40 * a2 + 32);
    uint64_t v10 = v8[24];
    if (v9 != v10) {
      goto LABEL_20;
    }
    if (((*(uint64_t (**)(uint64_t *))(*this[2] + 24))(this[2]) & 1) == 0) {
      break;
    }
    if (!*((unsigned char *)this + 88)) {
      goto LABEL_7;
    }
    if (*((unsigned char *)this + 89) && !*((unsigned char *)this + 136) && *((unsigned char *)this + 137))
    {
      if (this[7] != this[6])
      {
        unint64_t v11 = 0;
        do
        {
          turi::query_eval::execution_node::get_next_from_input(&v14, (turi::query_eval::execution_node *)this, v11, 1);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          ++v11;
        }
        while (v11 < 0xAAAAAAAAAAAAAAABLL * (this[7] - this[6]));
      }
      long long v13 = 0uLL;
      turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push(this[9], &v13);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(*this[2] + 48))(this[2], this[4]);
    }
  }
  uint64_t v8 = this[9];
  uint64_t v9 = *(void *)(v8[21] + 40 * a2 + 32);
  uint64_t v10 = v8[24];
LABEL_20:
  if (v9 == v10)
  {
    if (!(*(unsigned int (**)(uint64_t *))(*this[2] + 24))(this[2]))
    {
      *a4 = 0;
      a4[1] = 0;
      return;
    }
    uint64_t v8 = this[9];
    uint64_t v9 = *(void *)(v8[21] + 40 * a2 + 32);
    uint64_t v10 = v8[24];
  }
  if (v9 == v10) {
    turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator()();
  }
  long long v13 = 0uLL;
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop(v8, a2, (uint64_t)&v13);
  ++this[12][a2];
  if (a3)
  {
    *a4 = 0;
    a4[1] = 0;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  else
  {
    *(_OWORD *)a4 = v13;
  }
}

void sub_223FFCD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::execution_node::get_next_from_input(turi::query_eval::execution_node *this, unint64_t a2, BOOL a3)
{
  uint64_t v3 = *((void *)this + 6);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v3) >> 3) <= a2) {
    turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator()();
  }
  uint64_t v4 = v3 + 24 * a2;
  unint64_t v5 = *(turi::query_eval::execution_node **)v4;
  unint64_t v6 = *(void *)(v4 + 16);
  return turi::query_eval::execution_node::get_next(v5, v6, a3);
}

void turi::query_eval::execution_node::add_operator_output(uint64_t a1, long long *a2)
{
}

void turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!m_output_queue->empty(consumer_id)", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FFCED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[21];
  char v7 = (void *)(v6 + 40 * a2);
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    while (1)
    {
      uint64_t v9 = v6 + 40 * a2;
      unint64_t v11 = *(void *)(v9 + 24);
      uint64_t v10 = (void *)(v9 + 24);
      if (v11 < v8[3]) {
        break;
      }
      uint64_t v12 = v8[7];
      if (!v12)
      {
        uint64_t v12 = a1[12];
        if (v12)
        {
          turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues((uint64_t)a1);
          uint64_t v8 = (void *)*v7;
          uint64_t v12 = *(void *)(*v7 + 56);
        }
      }
      uint64_t v13 = v8[8];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)v7[1];
      *char v7 = v12;
      v7[1] = v13;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      *uint64_t v10 = 0;
      uint64_t v15 = *(void *)(*(void *)(a1[4] + ((a1[7] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[7] + 8);
      if (v15 && !*(void *)(v15 + 8)) {
        turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front(a1);
      }
      uint64_t v6 = a1[21];
      char v7 = (void *)(v6 + 40 * a2);
      uint64_t v8 = (void *)*v7;
      if (!*v7) {
        goto LABEL_14;
      }
    }
    std::istream::seekg();
    uint64_t v26 = *(void *)(*v7 + 32);
    long long v27 = 0u;
    long long v28 = 0u;
    turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>::load((uint64_t)(a1 + 2), (turi::iarchive *)&v26, (turi::sframe_rows **)a3);
    std::istream::tellg();
    *uint64_t v10 = v29;
  }
  else
  {
LABEL_14:
    uint64_t v16 = v6 + 40 * a2;
    unint64_t v19 = *(void *)(v16 + 16);
    uint64_t v18 = (void *)(v16 + 16);
    unint64_t v17 = v19;
    if (a1[19] <= v19) {
      return 0;
    }
    unint64_t v20 = a1[18] + v17;
    uint64_t v21 = *(void *)(a1[15] + ((v20 >> 5) & 0x7FFFFFFFFFFFFF8));
    long long v22 = *(_OWORD *)(v21 + 16 * v20);
    uint64_t v23 = *(void *)(v21 + 16 * v20 + 8);
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v24 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v22;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    ++*v18;
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(a1);
  }
  ++*(void *)(v6 + 40 * a2 + 32);
  return 1;
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 14;
  std::deque<std::shared_ptr<turi::sframe_rows>>::push_back(a1 + 14, a2);
  unint64_t v4 = a1[20] + 1;
  a1[20] = v4;
  ++a1[24];
  uint64_t v5 = a1[12];
  if (v5)
  {
    uint64_t v6 = (void *)a1[21];
    char v7 = (void *)a1[22];
    if (v6 == v7) {
      goto LABEL_8;
    }
    while (*v6 || v6[2] != 0)
    {
      v6 += 5;
      if (v6 == v7) {
        goto LABEL_8;
      }
    }
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues((uint64_t)a1);
    uint64_t v5 = a1[12];
    if (v5)
    {
LABEL_8:
      uint64_t v12 = v5;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v15 = 0;
      turi::sframe_rows::save(*(turi::sframe_rows **)(*(void *)(a1[15] + (((unint64_t)a1[18] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[18]), (turi::oarchive *)&v12);
      std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front(v3);
      uint64_t v9 = (void *)a1[21];
      uint64_t v10 = (void *)a1[22];
      while (v9 != v10)
      {
        if (!*v9) {
          --v9[2];
        }
        v9 += 5;
      }
      return;
    }
    unint64_t v4 = a1[20];
  }
  uint64_t v11 = *a1;
  if (v4 >= 2 * *a1)
  {
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(a1);
    unint64_t v4 = a1[20];
    uint64_t v11 = *a1;
  }
  if (v4 >= 2 * v11)
  {
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flush_push_queue((uint64_t)a1);
  }
}

void turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input_id", 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_inputs.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 148, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223FFD4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<turi::query_eval::execution_node::input_node>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::query_eval::execution_node::input_node>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 24;
  }
}

void **std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::query_eval::execution_node::input_node>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::~broadcast_queue(uint64_t a1)
{
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::reset(a1);
  std::deque<std::string>::~deque[abi:ne180100]((void *)(a1 + 200));
  unint64_t v4 = (void **)(a1 + 168);
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((void *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((void *)(a1 + 24));
  return a1;
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::reset(uint64_t a1)
{
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__clear[abi:ne180100]((uint64_t *)(a1 + 168));
  while (*(void *)(a1 + 64))
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front((void *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = *(char *)(a1 + 95);
  if ((v3 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 95)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(void *)(a1 + 80))
  {
LABEL_8:
    turi::fileio::delete_path(a1 + 72, 3);
    LOBYTE(v3) = *(unsigned char *)(a1 + 95);
  }
LABEL_9:
  if ((v3 & 0x80) != 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  return turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::delete_all_cache_files(a1);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push_queue::~push_queue(uint64_t a1)
{
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((void *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(a1[4] + ((a1[7] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[7]);
  uint64_t v4 = *v2;
  int v3 = (std::__shared_weak_count *)v2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 40);
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = *(char *)(v4 + 23);
  if (v6 < 0)
  {
    if (!*(void *)(v4 + 8)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(v4 + 23))
  {
LABEL_9:
    std::deque<std::string>::push_back(a1 + 25, (long long *)v4);
    LOBYTE(v6) = *(unsigned char *)(v4 + 23);
  }
LABEL_10:
  if ((v6 & 0x80) != 0)
  {
    **(unsigned char **)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
  }
  std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front(a1 + 3);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_223FFDACC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::delete_all_cache_files(uint64_t result)
{
  if (*(void *)(result + 240))
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = (void *)(result + 200);
    do
    {
      turi::fileio::delete_path(*(void *)(v1[26] + 8 * (v1[29] / 0xAAuLL)) + 24 * (v1[29] % 0xAAuLL), 3);
      uint64_t result = std::deque<std::string>::pop_front(v2);
    }
    while (v1[30]);
  }
  return result;
}

void std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 32);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  int v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void std::deque<std::string>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::string>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (std::string *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    v8->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  ++a1[5];
}

void std::deque<std::string>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223FFDFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__clear[abi:ne180100]((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::broadcast_queue(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::vector((void *)(a1 + 168), a2);
  *(void *)(a1 + 24CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (!*(void *)a1) {
    *(void *)a1 = 1;
  }
  return a1;
}

void sub_223FFE0DC(_Unwind_Exception *a1)
{
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push_queue::~push_queue(v1 + 72);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_223FFE188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::query_context,std::allocator<turi::query_eval::query_context>,turi::query_eval::execution_node *,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::query_context>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::execution_node *,unsigned long &,std::allocator<turi::query_eval::query_context>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223FFE240(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::query_context>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::execution_node *,unsigned long &,std::allocator<turi::query_eval::query_context>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7684C8;
  turi::query_eval::query_context::query_context(a1 + 3, *a2, *a3);
  return a1;
}

void sub_223FFE2A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7684C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7684C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::__on_zero_shared(uint64_t a1)
{
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  BOOL v3 = (char *)operator new(0x60uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)BOOL v3 = &unk_26D768518;
  *(void *)&long long v12 = v3 + 24;
  *((void *)&v12 + 1) = v3;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 72);
  *((void *)v3 + 5) = *(void *)(a1 + 88);
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 95) = 0;
  std::allocate_shared[abi:ne180100]<turi::general_ifstream,std::allocator<turi::general_ifstream>,std::string &,void>((uint64_t)(v3 + 24), &v11);
  long long v4 = v11;
  long long v11 = 0uLL;
  size_t v5 = (std::__shared_weak_count *)*((void *)v3 + 8);
  *(_OWORD *)(v3 + 56) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  *((void *)v3 + 6) = turi::general_ifstream::file_size(*((turi::neural_net::shared_float_array ***)v3 + 7));
  *((void *)v3 + 9) = *(void *)(a1 + 160) - *(void *)(a1 + 152);
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)(*(void *)(*(void *)(a1 + 32)
                               + (((unint64_t)(v6 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v6 + *(unsigned char *)(a1 + 56) - 1));
    uint64_t v8 = *v7;
    long long v9 = (std::__shared_weak_count *)v7[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 64);
    *(void *)(v8 + 56) = v3 + 24;
    *(void *)(v8 + 64) = v3;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::push_back((void *)(a1 + 24), &v12);
  *(void *)(a1 + 16CoreML::Specification::AdamOptimizer::New(this, 0) = *(void *)(a1 + 152);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_223FFE4B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>::load(uint64_t a1, turi::iarchive *a2, turi::sframe_rows **a3)
{
  size_t v5 = (char *)operator new(0x38uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)size_t v5 = &unk_26D768568;
  *(_OWORD *)(v5 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  v5[48] = 1;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  a3[1] = (turi::sframe_rows *)v5;
  *(_OWORD *)(v5 + 24) = 0u;
  unint64_t v7 = (turi::sframe_rows *)(v5 + 24);
  *a3 = v7;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    unint64_t v7 = *a3;
  }
  turi::sframe_rows::load(v7, a2);
}

void *turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)result[21];
  BOOL v3 = (void *)result[22];
  unint64_t v4 = -1;
  if (v2 == v3)
  {
LABEL_11:
    unint64_t v6 = result[18];
    uint64_t v7 = result[15];
    uint64_t v8 = (void *)(v7 + 8 * (v6 >> 8));
    if (result[16] == v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *v8 + 16 * v6;
    }
    v17[0] = v8;
    v17[1] = v9;
    uint64_t v10 = (char *)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)v17, v4);
    uint64_t v12 = v11;
    v1[20] -= v4;
    unint64_t v13 = v1[18];
    uint64_t v14 = v1[15];
    uint64_t v15 = (char *)(v14 + 8 * (v13 >> 8));
    if (v1[16] == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *(void *)v15 + 16 * v13;
    }
    return std::deque<std::shared_ptr<turi::sframe_rows>>::erase(v1 + 14, v15, v16, v10, v12);
  }
  else
  {
    size_t v5 = (void *)result[21];
    while (!*v5)
    {
      if (v5[2] < v4) {
        unint64_t v4 = v5[2];
      }
      v5 += 5;
      if (v5 == v3)
      {
        if (!v4) {
          return result;
        }
        while (v2 != v3)
        {
          v2[2] -= v4;
          v2 += 5;
        }
        goto LABEL_11;
      }
    }
  }
  return result;
}

void std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(std::__shared_weak_count **)(a2 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v5 = *(void **)a2;
    operator delete(v5);
  }
}

void std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223FFEAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::__on_zero_shared(uint64_t a1)
{
  char v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }
  return result;
}

void *std::deque<std::shared_ptr<turi::sframe_rows>>::erase(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(void *)a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  long long v9 = (char **)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)&(*v9)[16 * v7];
  }
  unint64_t v43 = v9;
  unint64_t v44 = (char *)v10;
  if (v10 == a3) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - (char *)v9) - ((v10 - (uint64_t)*v9) >> 4);
  }
  uint64_t v12 = (char **)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v43, v11);
  v42.n128_u64[0] = (unint64_t)v12;
  v42.n128_u64[1] = (unint64_t)v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      int64_t v20 = v12;
      uint64_t v21 = v13;
      unint64_t v22 = v43;
      uint64_t v23 = v44;
      uint64_t v24 = (char *)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v42, v6);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,0>(v22, v23, v20, v21, v24, v25, &v45);
      uint64_t v26 = v46;
      long long v27 = v44;
      while (v27 != v26)
      {
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v27 + 1);
        if (v28)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          long long v27 = v44;
        }
        v27 += 16;
        unint64_t v44 = v27;
        if (v27 - *v43 == 4096)
        {
          long long v27 = v43[1];
          ++v43;
          unint64_t v44 = v27;
        }
      }
      uint64_t v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1) & 1) != 0);
    }
    else
    {
      BOOL v14 = (long long **)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v42, v6);
      unint64_t v16 = a1[4] + a1[5];
      uint64_t v17 = a1[1];
      uint64_t v18 = (long long **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17) {
        unint64_t v19 = 0;
      }
      else {
        unint64_t v19 = &(*v18)[v16];
      }
      __n128 v45 = v42;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>>>(v14, v15, v18, v19, (uint64_t)&v45);
      unint64_t v30 = v45.n128_u64[1];
      uint64_t v31 = a1[1];
      if (a1[2] == v31)
      {
        uint64_t v33 = 0;
      }
      else
      {
        unint64_t v32 = a1[5] + a1[4];
        uint64_t v33 = *(void *)(v31 + ((v32 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v32;
      }
      if (v33 != v45.n128_u64[1])
      {
        uint64_t v34 = (void *)v45.n128_u64[0];
        do
        {
          uint64_t v35 = *(std::__shared_weak_count **)(v30 + 8);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          v30 += 16;
          if (v30 - *v34 == 4096)
          {
            unint64_t v36 = v34[1];
            ++v34;
            unint64_t v30 = v36;
          }
        }
        while (v30 != v33);
      }
      a1[5] -= v6;
      while ((std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
    }
  }
  unint64_t v37 = a1[4];
  uint64_t v38 = a1[1];
  uint64_t v39 = (void *)(v38 + 8 * (v37 >> 8));
  if (a1[2] == v38) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = *v39 + 16 * v37;
  }
  v45.n128_u64[0] = (unint64_t)v39;
  v45.n128_u64[1] = v40;
  return std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v45, v11);
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (char *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    unint64_t v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    long long v9 = a1;
  }
  else
  {
    long long v9 = a2;
    uint64_t v10 = a4 - *(void *)a3;
    if ((a2 - a1) >> 4 >= v10 >> 4) {
      uint64_t v11 = v10 >> 4;
    }
    else {
      uint64_t v11 = (a2 - a1) >> 4;
    }
    uint64_t v12 = &a2[-16 * v11];
    __n128 result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v16 = v15 + 4096;
        uint64_t v17 = (v12 - a1) >> 4;
        if (v17 >= 256) {
          uint64_t v17 = 256;
        }
        uint64_t v18 = &v12[-16 * v17];
        __n128 result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v20, v18, v12, v16);
        uint64_t v12 = v18;
      }
      while (v18 != a1);
    }
    uint64_t v5 = v14;
    if (*(void *)v6 + 4096 == v14)
    {
      uint64_t v19 = *((void *)v6 + 1);
      v6 += 8;
      uint64_t v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = (char *)v5;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    unint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *unint64_t v7 = 0;
      v7[1] = 0;
      long long v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>>>(long long **a1, long long *a2, long long **a3, long long *a4, uint64_t a5)
{
  unint64_t v7 = *(long long **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 256; ; uint64_t i = v12 + 256)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      unint64_t v7 = (long long *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(long long *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t a4@<X4>, long long **a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *(void *)a3 - a4 + 4096;
    if (a2 - a1 >= v9 >> 4) {
      uint64_t v10 = v9 >> 4;
    }
    else {
      uint64_t v10 = a2 - a1;
    }
    uint64_t v11 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v18, a1, &a1[v10], a4);
    if (v11 != v8)
    {
      uint64_t v13 = v11;
      do
      {
        uint64_t v15 = *((void *)v6 + 1);
        uint64_t v6 = (long long *)((char *)v6 + 8);
        uint64_t v14 = v15;
        uint64_t v16 = v8 - v13;
        if (v16 >= 256) {
          uint64_t v16 = 256;
        }
        uint64_t v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v18, v13, &v13[v16], v14);
      }
      while (v13 != v8);
    }
    uint64_t v5 = v12;
    if (*(void *)v6 + 4096 == v12)
    {
      uint64_t v17 = *((void *)v6 + 1);
      uint64_t v6 = (long long *)((char *)v6 + 8);
      uint64_t v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = v6;
  a5[2] = (long long *)v5;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::deque<std::shared_ptr<turi::sframe_rows>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<turi::sframe_rows>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void *turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flush_push_queue(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = (void *)(v3 + 8 * (v2 >> 8));
  if (*(void *)(a1 + 128) == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (turi::sframe_rows **)(*v4 + 16 * v2);
  }
  uint64_t v6 = (void **)(a1 + 72);
  v46[0].__r_.__value_.__r.__words[0] = v3 + 8 * (v2 >> 8);
  v46[0].__r_.__value_.__l.__size_ = (std::string::size_type)v5;
  uint64_t v7 = (char *)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)v46, *(void *)a1);
  uint64_t v9 = v8;
  for (uint64_t i = *(void **)(a1 + 168); ; i += 5)
  {
    if (i == *(void **)(a1 + 176))
    {
      turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file((void *)a1, v46);
      if (*(char *)(a1 + 95) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
      *(void *)(a1 + 88) = *((void *)&v46[0].__r_.__value_.__l + 2);
      std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>(a1 + 72, v46);
      long long v11 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
      *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 104);
      *(_OWORD *)(a1 + 96) = v11;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (v46[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46[0].__r_.__value_.__l.__size_);
        }
      }
      v46[0].__r_.__value_.__r.__words[0] = *(void *)(a1 + 96);
      memset(&v46[0].__r_.__value_.__r.__words[1], 0, 40);
      while (v5 != (turi::sframe_rows **)v9)
      {
        uint64_t v13 = *v5;
        v5 += 2;
        turi::sframe_rows::save(v13, (turi::oarchive *)v46);
        if ((turi::sframe_rows **)((char *)v5 - *v4) == (turi::sframe_rows **)4096)
        {
          uint64_t v14 = (turi::sframe_rows **)v4[1];
          ++v4;
          uint64_t v5 = v14;
        }
      }
      goto LABEL_64;
    }
    if (!*i) {
      break;
    }
  }
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file((void *)a1, v46);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v46[0].__r_.__value_.__l + 2);
  std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>(a1 + 72, v46);
  long long v15 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (v46[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46[0].__r_.__value_.__l.__size_);
    }
  }
  long long __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned long>::reserve(&__p, *(void *)a1);
  memset(v46, 0, sizeof(v46));
  if (v5 == (turi::sframe_rows **)v9)
  {
    std::string::pointer data = 0;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      char v18 = v48;
      if (v48 >= v49)
      {
        char v20 = (char *)__p;
        uint64_t v21 = (v48 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v49 - (unsigned char *)__p;
        if ((v49 - (unsigned char *)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v49, v24);
          char v20 = (char *)__p;
          char v18 = v48;
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[8 * v21];
        *(void *)uint64_t v26 = v17;
        uint64_t v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        long long __p = v26;
        uint64_t v48 = v19;
        uint64_t v49 = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)uint64_t v48 = v17;
        uint64_t v19 = v18 + 8;
      }
      uint64_t v48 = v19;
      turi::sframe_rows::save(*v5, (turi::oarchive *)v46);
      std::ostream::write();
      std::string::size_type size = v46[1].__r_.__value_.__l.__size_;
      v46[1].__r_.__value_.__l.__size_ = 0;
      v5 += 2;
      if ((turi::sframe_rows **)((char *)v5 - *v4) == (turi::sframe_rows **)4096)
      {
        uint64_t v29 = (turi::sframe_rows **)v4[1];
        ++v4;
        uint64_t v5 = v29;
      }
      v17 += size;
    }
    while (v5 != (turi::sframe_rows **)v9);
    std::string::pointer data = v46[1].__r_.__value_.__l.__data_;
  }
  free(data);
  uint64_t v31 = *(void *)(a1 + 168);
  unint64_t v32 = *(void **)(a1 + 176);
  if ((void *)v31 != v32)
  {
    uint64_t v33 = *(void **)(a1 + 168);
    while (*v33 || v33[2] >= *(void *)a1)
    {
      v33 += 5;
      if (v33 == v32) {
        goto LABEL_52;
      }
    }
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues(a1);
    uint64_t v31 = *(void *)(a1 + 168);
    unint64_t v32 = *(void **)(a1 + 176);
LABEL_52:
    while ((void *)v31 != v32)
    {
      if (!*(void *)v31)
      {
        unint64_t v34 = *(void *)(v31 + 16);
        BOOL v35 = v34 >= *(void *)a1;
        unint64_t v36 = v34 - *(void *)a1;
        if (!v35)
        {
          uint64_t v37 = *(void *)(*(void *)(a1 + 32)
                          + (((unint64_t)(*(void *)(a1 + 64) + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8));
          long long v38 = *(_OWORD *)(v37 + 16 * (*(unsigned char *)(a1 + 64) + *(unsigned char *)(a1 + 56) - 1));
          uint64_t v39 = *(void *)(v37 + 16 * (*(unsigned char *)(a1 + 64) + *(unsigned char *)(a1 + 56) - 1) + 8);
          if (v39) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v40 = *(std::__shared_weak_count **)(v31 + 8);
          *(_OWORD *)uint64_t v31 = v38;
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          unint64_t v36 = 0;
          *(void *)(v31 + 24) = *((void *)__p + *(void *)(v31 + 16));
        }
        *(void *)(v31 + 16) = v36;
      }
      v31 += 40;
    }
  }
  if (__p)
  {
    uint64_t v48 = (char *)__p;
    operator delete(__p);
  }
LABEL_64:
  unint64_t v41 = *(void *)(a1 + 144);
  uint64_t v42 = *(void *)(a1 + 120);
  unint64_t v43 = (char *)(v42 + 8 * (v41 >> 8));
  if (*(void *)(a1 + 128) == v42) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = *(void *)v43 + 16 * v41;
  }
  return std::deque<std::shared_ptr<turi::sframe_rows>>::erase((void *)(a1 + 112), v43, v44, v7, v9);
}

void sub_223FFF778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::shared_ptr<turi::sframe_rows>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223FFFA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file(void *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[30])
  {
    BOOL v3 = a1 + 25;
    unint64_t v4 = *(void *)(a1[26] + 8 * (a1[29] / 0xAAuLL)) + 24 * (a1[29] % 0xAAuLL);
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
    std::deque<std::string>::pop_front(v3);
  }
  else
  {
    uint64_t instance = turi::fileio::fixed_size_cache_manager::get_instance((turi::fileio::fixed_size_cache_manager *)a1);
    std::string::basic_string[abi:ne180100]<0>(__p, "dqueue");
    turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, a2);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_223FFFB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x198uLL);
  double result = std::__shared_ptr_emplace<turi::general_ofstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ofstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223FFFBFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::general_ofstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ofstream>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7685B8;
  std::allocator<turi::general_ofstream>::construct[abi:ne180100]<turi::general_ofstream,std::string &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_223FFFC6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::general_ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7685B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::general_ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7685B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::general_ofstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::general_ofstream>::construct[abi:ne180100]<turi::general_ofstream,std::string &>(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  turi::general_ofstream::general_ofstream(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_223FFFD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *turi::query_eval::query_context::query_context(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  char v4 = (char *)operator new(0x38uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)char v4 = &unk_26D768568;
  *(_OWORD *)(v4 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  v4[48] = 1;
  a1[2] = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  a1[1] = v4 + 24;
  return a1;
}

uint64_t turi::query_eval::query_context::get_output_buffer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void turi::query_eval::query_context::emit(uint64_t a1, long long *a2)
{
}

double turi::query_eval::query_context::get_next@<D0>(turi::query_eval::execution_node **this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  turi::query_eval::execution_node::get_next_from_input((uint64_t *)&v5, this[3], a2, 0);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void turi::query_eval::query_context::skip_next(turi::query_eval::execution_node **this, unint64_t a2)
{
  turi::query_eval::execution_node::get_next_from_input(&v2, this[3], a2, 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t turi::query_eval::query_context::should_skip(turi::query_eval::query_context *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 89);
}

void turi::query_eval::query_context::~query_context(turi::query_eval::query_context *this)
{
  char v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void turi::query_eval::subplan_executor::generate_to_callback_function(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = v25;
  turi::query_eval::get_executor(a2, (uint64_t)&v24, &v22);
  uint64_t v6 = (uint64_t **)v22;
  uint64_t v7 = turi::query_eval::execution_node::register_consumer(v22);
  do
  {
    turi::query_eval::execution_node::get_next(v6, v7, 0, &v20);
    if (v20)
    {
      if (std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(a4, a3))int v8 = 3; {
      else
      }
        int v8 = 0;
    }
    else
    {
      int v8 = 3;
    }
    if (v21[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21[0]);
    }
  }
  while (!v8);
  uint64_t v9 = v24;
  if (v24 == v25) {
    goto LABEL_19;
  }
  char v10 = 0;
  do
  {
    BOOL v11 = *(unsigned char *)(v9[6] + 120) != 0;
    uint64_t v12 = (void *)v9[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = (void **)v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (void **)v9[2];
        BOOL v14 = *v13 == v9;
        uint64_t v9 = v13;
      }
      while (!v14);
    }
    v10 |= v11;
    uint64_t v9 = v13;
  }
  while (v13 != v25);
  if (v10)
  {
    v21[0] = 0;
    v21[1] = 0;
    int64_t v20 = v21;
    uint64_t v17 = v6;
    uint64_t v18 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::find_earliest_exception((unint64_t *)&v17, (uint64_t)&v20, &v19);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    std::exception_ptr::exception_ptr(&v16, &v19);
    v15.__ptr_ = &v16;
    std::rethrow_exception(v15);
    __break(1u);
  }
  else
  {
LABEL_19:
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v24, v25[0]);
  }
}

void sub_224000084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, void *a19)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void turi::query_eval::get_executor(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = *a1;
  if (!v6)
  {
LABEL_6:
    std::vector<std::shared_ptr<turi::query_eval::execution_node>>::vector(v26, (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 4);
    uint64_t v9 = *a1;
    uint64_t v10 = *(void *)(*a1 + 56);
    if (*(void *)(*a1 + 64) != v10)
    {
      unint64_t v11 = 0;
      do
      {
        turi::query_eval::get_executor(&v25, v10 + 16 * v11, a2);
        uint64_t v12 = &v26[0][2 * v11];
        uint64_t v13 = (std::__shared_weak_count *)v12[1];
        *(_OWORD *)uint64_t v12 = v25;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        uint64_t v9 = *a1;
        uint64_t v10 = *(void *)(*a1 + 56);
        ++v11;
      }
      while (v11 < (*(void *)(*a1 + 64) - v10) >> 4);
    }
    BOOL v14 = (std::__shared_weak_count *)a1[1];
    uint64_t v23 = v9;
    uint64_t v24 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::planner_node_to_operator((uint64_t)&v23, (uint64_t)&v25);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    std::allocate_shared[abi:ne180100]<turi::query_eval::execution_node,std::allocator<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,void>(&v22);
    uint64_t v27 = a1;
    std::exception_ptr v15 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v27);
    long long v16 = v22;
    long long v22 = 0uLL;
    uint64_t v17 = (std::__shared_weak_count *)v15[7];
    *((_OWORD *)v15 + 3) = v16;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    *(void *)&long long v22 = a1;
    uint64_t v18 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
    std::exception_ptr v19 = v18[7];
    *a3 = v18[6];
    a3[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
    *(void *)&long long v25 = v26;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    return;
  }
  while (1)
  {
    unint64_t v8 = v6[4];
    if (v7 >= v8) {
      break;
    }
LABEL_5:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_5;
  }
  v26[0] = a1;
  int64_t v20 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v26);
  uint64_t v21 = v20[7];
  *a3 = v20[6];
  a3[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit(v21 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_2240002EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, std::__shared_weak_count *a14, uint64_t a15, char a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void turi::query_eval::find_earliest_exception(unint64_t *a1@<X0>, uint64_t a2@<X1>, std::exception_ptr *a3@<X8>)
{
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = *a1;
  if (!v6)
  {
LABEL_6:
    v23.__ptr_ = 0;
    unint64_t v10 = v7 + 48;
    uint64_t v9 = *(void *)(v7 + 48);
    if (*(void *)(v10 + 8) != v9)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = v9 + v11;
        uint64_t v14 = *(void *)(v9 + v11);
        std::exception_ptr v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v21 = v15;
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v20 = v14;
        turi::query_eval::find_earliest_exception(&v22, &v20, a2);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v19.__ptr_ = 0;
        ptr = v22.__ptr_;
        std::exception_ptr::~exception_ptr(&v19);
        if (ptr) {
          break;
        }
        std::exception_ptr::~exception_ptr(&v22);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        ++v12;
        uint64_t v9 = *(void *)(*a1 + 48);
        v11 += 24;
        if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a1 + 56) - v9) >> 3)) {
          goto LABEL_20;
        }
      }
      std::exception_ptr::operator=(&v23, &v22);
      std::exception_ptr::~exception_ptr(&v22);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
LABEL_20:
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>((uint64_t **)a2, a1, (uint64_t *)a1);
    v22.__ptr_ = 0;
    if (v23.__ptr_)
    {
      std::exception_ptr::~exception_ptr(&v22);
    }
    else
    {
      int v18 = *(unsigned __int8 *)(*a1 + 120);
      std::exception_ptr::~exception_ptr(&v22);
      if (v18)
      {
        uint64_t v17 = (std::exception_ptr *)(*a1 + 128);
        goto LABEL_25;
      }
    }
    uint64_t v17 = &v23;
LABEL_25:
    std::exception_ptr::exception_ptr(a3, v17);
    std::exception_ptr::~exception_ptr(&v23);
    return;
  }
  while (1)
  {
    unint64_t v8 = v6[4];
    if (v7 >= v8) {
      break;
    }
LABEL_5:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_5;
  }
  a3->__ptr_ = 0;
}

void sub_22400054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

void *turi::query_eval::subplan_executor::generate_to_sframe_segment(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void v11[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 32))(v9, a3, a4);
  v8[0] = &unk_26D768658;
  v8[1] = v9;
  void v8[3] = v8;
  turi::query_eval::subplan_executor::generate_to_callback_function((uint64_t)v6, a2, a4, (uint64_t)v8);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v9);
}

void sub_22400066C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

turi::sframe *turi::query_eval::subplan_executor::run@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, turi::sframe *a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 32))
  {
    if (*(char *)(a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
    }
    else {
      std::string v8 = *(std::string *)(a2 + 48);
    }
    memset(v7, 0, sizeof(v7));
    turi::query_eval::get_output_sframe_schema(a1, 1, &v8, v7, a3);
  }
  uint64_t v5 = std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2 + 8);
  turi::query_eval::subplan_executor::generate_to_callback_function(v5, a1, 0, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v9);
  return turi::sframe::sframe(a3);
}

void sub_2240007AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::get_output_sframe_schema(uint64_t *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, turi::sframe *a5@<X8>)
{
  v40[2] = *MEMORY[0x263EF8340];
  turi::sframe::sframe(a5);
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v35, (unint64_t *)&__p);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  uint64_t v14 = __p;
  uint64_t v13 = v38;
  if (v11 == *a4)
  {
    uint64_t v12 = a4[1];
    uint64_t v14 = v38;
    if (v38 != __p)
    {
      uint64_t v32 = a2;
      unint64_t v15 = 0;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "X");
        std::to_string(&v33, ++v15);
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v16 = &v33;
        }
        else {
          long long v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v33.__r_.__value_.__l.__size_;
        }
        int v18 = std::string::append(&v34, (const std::string::value_type *)v16, size);
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
        v40[0] = v18->__r_.__value_.__l.__size_;
        *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        unint64_t v21 = a4[1];
        unint64_t v22 = a4[2];
        if (v21 >= v22)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a4) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a4) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 2);
          if (v28) {
            uint64_t v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a4 + 2), v28);
          }
          else {
            uint64_t v29 = 0;
          }
          long long v30 = v29 + v25;
          __v.__first_ = v29;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = &v29[v28];
          std::string::size_type v31 = v40[0];
          v30->__r_.__value_.__r.__words[0] = v19;
          v30->__r_.__value_.__l.__size_ = v31;
          *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v40 + 7);
          *((unsigned char *)&v30->__r_.__value_.__s + 23) = v20;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
          unint64_t v24 = a4[1];
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          uint64_t v23 = v40[0];
          *(void *)unint64_t v21 = v19;
          *(void *)(v21 + 8) = v23;
          *(void *)(v21 + 15) = *(void *)((char *)v40 + 7);
          *(unsigned char *)(v21 + 23) = v20;
          unint64_t v24 = v21 + 24;
          a4[1] = v21 + 24;
        }
        a4[1] = v24;
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = __p;
        uint64_t v13 = v38;
      }
      while (v15 < v38 - (unsigned char *)__p);
      uint64_t v12 = *a4;
      uint64_t v11 = a4[1];
      a2 = v32;
    }
  }
  v34.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  v33.__r_.__value_.__r.__words[0] = v13 - v14;
  if (v34.__r_.__value_.__r.__words[0] == v13 - v14) {
    turi::sframe::open_for_write((uint64_t)a5, a4, &__p, a3, a2, 1);
  }
  __v.__first_ = &v34;
  __v.__begin_ = &v33;
  turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator()();
}

void sub_224000AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, __int16 a8, char a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, void *__p, void *a20,uint64_t a21,std::__split_buffer<std::string> *a22,uint64_t a23,uint64_t a24,void *__pa)
{
  if (__pa) {
    operator delete(__pa);
  }
  turi::sframe::~sframe(v25);
  _Unwind_Resume(a1);
}

turi::sframe *turi::query_eval::subplan_executor::run_concat@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, turi::sframe *a4@<X8>)
{
  v29[24] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    return turi::sframe::sframe(a4);
  }
  else
  {
    if (!*(void *)(a3 + 32))
    {
      if (*(char *)(a3 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a3 + 48), *(void *)(a3 + 56));
      }
      else {
        std::string v25 = *(std::string *)(a3 + 48);
      }
      memset(&v24, 0, sizeof(v24));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, *(long long **)(a3 + 72), *(long long **)(a3 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 80) - *(void *)(a3 + 72)) >> 3));
      turi::query_eval::get_output_sframe_schema(v5, ((char *)v6 - (char *)v5) >> 4, &v25, (uint64_t *)&v24, a4);
    }
    unint64_t v10 = (turi::thread_pool *)std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)&v28, a3 + 8);
    uint64_t v12 = *a2;
    uint64_t v11 = a2[1];
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = &v28;
    uint64_t instance = (turi::thread_pool *)turi::thread_pool::get_instance(v10);
    uint64_t v14 = (turi::thread *)turi::thread_pool::size(instance);
    tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v14);
    uint64_t v16 = ((char *)v11 - (char *)v12) >> 4;
    if (!*((unsigned char *)tls_data + 8) && (unint64_t)v14 > 1)
    {
      uint64_t v17 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v29, v17);
      double v18 = (double)(unint64_t)v16 / (double)(unint64_t)v14;
      v27[2] = (unint64_t)(v18 * (double)0 + 0.0);
      v27[3] = (unint64_t)(v18 * (double)1uLL + 0.0);
      v27[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1}>(turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0)::stored_vtable
             + 1;
      v27[1] = (uint64_t)v26;
      turi::parallel_task_queue::launch((uint64_t)v29, v27);
    }
    if (v11 != v12)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        unint64_t v22 = *a2;
        uint64_t v23 = std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)&v28);
        turi::query_eval::subplan_executor::generate_to_callback_function(v23, &v22[v20], v21, (uint64_t)v29);
        std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v29);
        ++v21;
        v20 += 2;
      }
      while (v16 != v21);
    }
    turi::sframe::sframe(a4);
    return (turi::sframe *)std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&v28);
  }
}

void sub_224000F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a31);
  turi::sframe::~sframe(v31);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  std::string v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        std::string v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        return v9;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        std::string v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x40uLL);
    uint64_t v13 = v12;
    v17[1] = v7;
    uint64_t v14 = *a4;
    void v12[4] = **a4;
    uint64_t v15 = v14[1];
    void v12[5] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    v12[6] = 0;
    v12[7] = 0;
    char v18 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,void *>>>>::reset[abi:ne180100]((uint64_t)v17, 0);
  }
  return (uint64_t **)v13;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::shared_ptr<turi::query_eval::execution_node>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::shared_ptr<turi::query_eval::execution_node>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::vector<std::shared_ptr<turi::query_eval::execution_node>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2240011FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::allocate_shared[abi:ne180100]<turi::query_eval::execution_node,std::allocator<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,void>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<turi::query_eval::execution_node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,std::allocator<turi::query_eval::execution_node>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_224001278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::execution_node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,std::allocator<turi::query_eval::execution_node>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768608;
  turi::query_eval::execution_node::execution_node(a1 + 3);
  return a1;
}

void sub_2240012D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::query_eval::execution_node>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::query_eval::execution_node>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a2 + 128));
  uint64_t v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }
  std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100]((uint64_t *)(a2 + 72), 0);
  uint64_t v7 = (void **)(a2 + 48);
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t *std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        std::string v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    std::string v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    void v10[4] = *a3;
    void v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

void turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  char v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/subplan_executor.cpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_names.size()", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_types.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/subplan_executor.cpp", "operator()", 50, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224001664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::shared_ptr<turi::query_eval::execution_node>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

void *std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D768658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D768658;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void))(*(void *)v3 + 48))(v3, *a3);
  return 0;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void *std::vector<turi::sframe>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (turi::sframe *)a1[1];
    uint64_t v5 = 296 * a2;
    uint64_t v6 = (char *)v4 + 296 * a2;
    do
    {
      turi::sframe::sframe(v4);
      uint64_t v4 = (turi::sframe *)((char *)v4 + 296);
      v5 -= 296;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_2240019C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::sframe>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(296 * a2);
}

void std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 37;
      unint64_t v7 = v4 - 37;
      do
      {
        (**v7)(v7);
        v6 -= 37;
        BOOL v8 = v7 == v2;
        v7 -= 37;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      double result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16v"
                                        "ectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materi"
                                        "alize_optionsEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (double result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16vectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materialize_optionsEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1},void>::invoke(void *result)
{
  void v6[4] = *MEMORY[0x263EF8340];
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    uint64_t v3 = 16 * v1;
    do
    {
      uint64_t v4 = **(void **)(*v2 + 8);
      uint64_t v5 = std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v6, *(void *)(*v2 + 16));
      turi::query_eval::subplan_executor::generate_to_callback_function(v5, (uint64_t *)(v4 + v3), v1, (uint64_t)v6);
      double result = std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v6);
      ++v1;
      v3 += 16;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void sub_224001C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      double result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16v"
                                        "ectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materi"
                                        "alize_optionsEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (double result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16vectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materialize_optionsEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1 const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    uint64_t v3 = 16 * v1;
    do
    {
      double result = turi::query_eval::subplan_executor::generate_to_sframe_segment((uint64_t)result, (uint64_t *)(**(void **)(*v2 + 8) + v3), *(void *)(*v2 + 16), v1++);
      v3 += 16;
    }
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t turi::query_eval::infer_planner_node_type@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v4 + 32, (const void **)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *a1;
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
    uint64_t v17 = __p;
    uint64_t v7 = *((void *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v6 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17)+ 7);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(a2, *(const void **)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 16) - *(void *)(v7 + 8));
    goto LABEL_11;
  }
  int v8 = *(_DWORD *)v6;
  unint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v13 = *a1;
  uint64_t v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(v8, &v13, a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*a2 != a2[1])
  {
    uint64_t v10 = *a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
    uint64_t v17 = __p;
    uint64_t v11 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17);
    turi::any::operator=<std::vector<turi::flex_type_enum>>((void *)v11 + 7, (char **)a2);
LABEL_11:
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return pthread_mutex_unlock(&turi::query_eval::global_query_lock);
}

void sub_224001F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::string::size_type v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(int a1@<W0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v4 = (std::__shared_weak_count *)a2[1];
      uint64_t v48 = *a2;
      uint64_t v49 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v48, a3);
      uint64_t v5 = v49;
      if (!v49) {
        return;
      }
      goto LABEL_63;
    case 1:
      uint64_t v6 = (std::__shared_weak_count *)a2[1];
      uint64_t v46 = *a2;
      uint64_t v47 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)1>::get((uint64_t)&v46, a3);
      uint64_t v5 = v47;
      if (!v47) {
        return;
      }
      goto LABEL_63;
    case 2:
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v44 = *a2;
      uint64_t v45 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)2>::get((uint64_t)&v44, a3);
      uint64_t v5 = v45;
      if (!v45) {
        return;
      }
      goto LABEL_63;
    case 3:
      int v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v42 = *a2;
      unint64_t v43 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v42, a3);
      uint64_t v5 = v43;
      if (!v43) {
        return;
      }
      goto LABEL_63;
    case 4:
      unint64_t v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v40 = *a2;
      unint64_t v41 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v40, a3);
      uint64_t v5 = v41;
      if (!v41) {
        return;
      }
      goto LABEL_63;
    case 5:
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v38 = *a2;
      uint64_t v39 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v38, a3);
      uint64_t v5 = v39;
      if (!v39) {
        return;
      }
      goto LABEL_63;
    case 6:
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v36 = *a2;
      uint64_t v37 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v36, a3);
      uint64_t v5 = v37;
      if (!v37) {
        return;
      }
      goto LABEL_63;
    case 7:
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v34 = *a2;
      uint64_t v35 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v34, a3);
      uint64_t v5 = v35;
      if (!v35) {
        return;
      }
      goto LABEL_63;
    case 8:
      uint64_t v13 = (std::__shared_weak_count *)a2[1];
      uint64_t v32 = *a2;
      std::string v33 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)8>::get((uint64_t)&v32, a3);
      uint64_t v5 = v33;
      if (!v33) {
        return;
      }
      goto LABEL_63;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 10:
      uint64_t v14 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      std::string::size_type v31 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)10>::get((uint64_t)&v30, a3);
      uint64_t v5 = v31;
      if (!v31) {
        return;
      }
      goto LABEL_63;
    case 11:
      char v15 = (std::__shared_weak_count *)a2[1];
      uint64_t v28 = *a2;
      uint64_t v29 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v28, (uint64_t)a3);
      uint64_t v5 = v29;
      if (!v29) {
        return;
      }
      goto LABEL_63;
    case 12:
      char v16 = (std::__shared_weak_count *)a2[1];
      uint64_t v24 = *a2;
      std::string v25 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v24, a3);
      uint64_t v5 = v25;
      if (!v25) {
        return;
      }
      goto LABEL_63;
    case 13:
      uint64_t v17 = (std::__shared_weak_count *)a2[1];
      uint64_t v26 = *a2;
      unint64_t v27 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)13>::get((uint64_t)&v26, a3);
      uint64_t v5 = v27;
      if (!v27) {
        return;
      }
      goto LABEL_63;
    case 14:
      char v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v22 = *a2;
      uint64_t v23 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v22, a3);
      uint64_t v5 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_63;
    case 15:
      std::string::size_type v19 = (std::__shared_weak_count *)a2[1];
      uint64_t v20 = *a2;
      uint64_t v21 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)15>::get(&v20, a3);
      uint64_t v5 = v21;
      if (v21) {
LABEL_63:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_59;
    default:
LABEL_59:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
  }
}

void sub_2240022F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_224002308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a26) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002378()
{
  if (!*(void *)(v0 - 120)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002388()
{
  if (!*(void *)(v0 - 104)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_224002398()
{
  if (!*(void *)(v0 - 88)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_2240023A8()
{
  if (!*(void *)(v0 - 72)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_2240023B8()
{
  if (!*(void *)(v0 - 56)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_2240023C8()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void sub_2240023D8()
{
  if (!*(void *)(v0 - 24)) {
    JUMPOUT(0x224002300);
  }
  JUMPOUT(0x2240022FCLL);
}

void *turi::any::operator=<std::vector<turi::flex_type_enum>>(void *a1, char **a2)
{
  uint64_t v4 = *a1;
  if (!v4 {
    || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4),
  }
  {
    turi::any::any<std::vector<turi::flex_type_enum>>();
  }
  uint64_t v6 = (char **)(*a1 + 8);
  if (v6 != a2) {
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(v6, *a2, a2[1], a2[1] - *a2);
  }
  return a1;
}

uint64_t turi::query_eval::infer_planner_node_length(uint64_t a1)
{
  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  uint64_t v2 = *(int **)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v2 + 8), (const void **)__p);
  uint64_t v4 = v3;
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      uint64_t v5 = *(int **)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
      char v18 = __p;
      uint64_t v6 = *(void *)(*((void *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18)+ 7)+ 8);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_15;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  int v8 = **(_DWORD **)a1;
  uint64_t v13 = *(int **)a1;
  uint64_t v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = turi::query_eval::extract_field<turi::query_eval::visitor_infer_length,long long,std::shared_ptr<turi::query_eval::planner_node>>(v8, (uint64_t *)&v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = v9;
  if (v9 == -1)
  {
    uint64_t v6 = -1;
  }
  else
  {
    uint64_t v10 = *(int **)a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
    char v18 = __p;
    uint64_t v11 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v10 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
    turi::any::operator=<long long>(v11 + 7, &v15);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = v15;
  }
LABEL_15:
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  return v6;
}

void sub_224002670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t turi::query_eval::extract_field<turi::query_eval::visitor_infer_length,long long,std::shared_ptr<turi::query_eval::planner_node>>(int a1, uint64_t *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v4 = (std::__shared_weak_count *)a2[1];
      uint64_t v43 = *a2;
      uint64_t v44 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v43);
      uint64_t v5 = v44;
      if (!v44) {
        return v3;
      }
      goto LABEL_58;
    case 1:
      uint64_t v6 = (std::__shared_weak_count *)a2[1];
      uint64_t v41 = *a2;
      uint64_t v42 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)1>::get((uint64_t)&v41);
      uint64_t v5 = v42;
      if (!v42) {
        return v3;
      }
      goto LABEL_58;
    case 2:
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v39 = *a2;
      uint64_t v40 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)2>::get((uint64_t)&v39);
      uint64_t v5 = v40;
      if (!v40) {
        return v3;
      }
      goto LABEL_58;
    case 3:
    case 13:
      uint64_t v2 = (std::__shared_weak_count *)a2[1];
      if (v2)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      return -1;
    case 4:
      int v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v37 = *a2;
      uint64_t v38 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v37);
      uint64_t v5 = v38;
      if (!v38) {
        return v3;
      }
      goto LABEL_58;
    case 5:
      uint64_t v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v35 = *a2;
      uint64_t v36 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v35);
      uint64_t v5 = v36;
      if (!v36) {
        return v3;
      }
      goto LABEL_58;
    case 6:
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v33 = *a2;
      uint64_t v34 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v33);
      uint64_t v5 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_58;
    case 7:
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v31 = *a2;
      uint64_t v32 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v31);
      uint64_t v5 = v32;
      if (!v32) {
        return v3;
      }
      goto LABEL_58;
    case 8:
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v29 = *a2;
      uint64_t v30 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)8>::get((uint64_t)&v29);
      uint64_t v5 = v30;
      if (!v30) {
        return v3;
      }
      goto LABEL_58;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 10:
      uint64_t v13 = (std::__shared_weak_count *)a2[1];
      uint64_t v27 = *a2;
      uint64_t v28 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)10>::get(&v27);
      uint64_t v5 = v28;
      if (!v28) {
        return v3;
      }
      goto LABEL_58;
    case 11:
      uint64_t v14 = (std::__shared_weak_count *)a2[1];
      uint64_t v25 = *a2;
      uint64_t v26 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v25);
      uint64_t v5 = v26;
      if (!v26) {
        return v3;
      }
      goto LABEL_58;
    case 12:
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      uint64_t v23 = *a2;
      uint64_t v24 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v23);
      uint64_t v5 = v24;
      if (!v24) {
        return v3;
      }
      goto LABEL_58;
    case 14:
      char v16 = (std::__shared_weak_count *)a2[1];
      uint64_t v21 = *a2;
      uint64_t v22 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v21);
      uint64_t v5 = v22;
      if (!v22) {
        return v3;
      }
      goto LABEL_58;
    case 15:
      char v17 = (std::__shared_weak_count *)a2[1];
      uint64_t v19 = *a2;
      uint64_t v20 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v3 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)15>::get(&v19);
      uint64_t v5 = v20;
      if (v20) {
LABEL_58:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return v3;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      return 0;
    default:
      return 0;
  }
}

void sub_2240029E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_2240029F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a20) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A58()
{
  if (!*(void *)(v0 - 104)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A68()
{
  if (!*(void *)(v0 - 88)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A78()
{
  if (!*(void *)(v0 - 72)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A88()
{
  if (!*(void *)(v0 - 56)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002A98()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

void sub_224002AA8()
{
  if (!*(void *)(v0 - 24)) {
    JUMPOUT(0x2240029F0);
  }
  JUMPOUT(0x2240029ECLL);
}

uint64_t *turi::any::operator=<long long>(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (!v4
    || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4),
        !std::type_info::operator==[abi:ne180100](v5, MEMORY[0x263F8C290])))
  {
    operator new();
  }
  *(void *)(*a1 + 8) = *a2;
  return a1;
}

int64_t turi::query_eval::infer_planner_node_num_output_columns(uint64_t *a1)
{
  unint64_t v1 = (std::__shared_weak_count *)a1[1];
  v5[0] = *a1;
  v5[1] = (uint64_t)v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(v5, (unint64_t *)&v6);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v3 - v2;
}

void sub_224002C50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::infer_planner_node_num_dependency_nodes(unint64_t *a1)
{
  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  unint64_t v5 = *a1;
  uint64_t v6 = v2;
  uint64_t v7 = &v8;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::_fill_dependency_set(&v5, (uint64_t)&v7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v3 = v9;
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v7, v8);
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  return v3;
}

void sub_224002CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, void *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a12, a13);
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

void turi::query_eval::_fill_dependency_set(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *a1;
    do
    {
      unint64_t v6 = v4[4];
      if (v5 >= v6)
      {
        if (v6 >= v5) {
          return;
        }
        ++v4;
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>((uint64_t **)a2, a1, (uint64_t *)a1);
  uint64_t v7 = *(uint64_t **)(*a1 + 56);
  for (uint64_t i = *(uint64_t **)(*a1 + 64); v7 != i; v7 += 2)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = (std::__shared_weak_count *)v7[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v10;
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v11 = v9;
    turi::query_eval::_fill_dependency_set(&v11, a2);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_224002E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::planner_node_to_operator(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(int **)a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  int v4 = **(_DWORD **)a1;
  unint64_t v5 = v3;
  unint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_planner_to_operator,std::shared_ptr<turi::query_eval::query_operator>,std::shared_ptr<turi::query_eval::planner_node>>(v4, (uint64_t *)&v5, a2);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_224002E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_planner_to_operator,std::shared_ptr<turi::query_eval::query_operator>,std::shared_ptr<turi::query_eval::planner_node>>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 0:
      int v4 = (std::__shared_weak_count *)a2[1];
      uint64_t v46 = *a2;
      uint64_t v47 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v46, (_OWORD *)a3);
      unint64_t v5 = v47;
      if (!v47) {
        return;
      }
      goto LABEL_62;
    case 1:
      unint64_t v6 = (std::__shared_weak_count *)a2[1];
      uint64_t v44 = *a2;
      uint64_t v45 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)1>::get(&v44, (void *)a3);
      unint64_t v5 = v45;
      if (!v45) {
        return;
      }
      goto LABEL_62;
    case 2:
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v42 = *a2;
      uint64_t v43 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)2>::get((uint64_t)&v42, (_OWORD *)a3);
      unint64_t v5 = v43;
      if (!v43) {
        return;
      }
      goto LABEL_62;
    case 3:
      int v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v40 = *a2;
      uint64_t v41 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v40, (void *)a3);
      unint64_t v5 = v41;
      if (!v41) {
        return;
      }
      goto LABEL_62;
    case 4:
      uint64_t v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v38 = *a2;
      uint64_t v39 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v38, (_OWORD *)a3);
      unint64_t v5 = v39;
      if (!v39) {
        return;
      }
      goto LABEL_62;
    case 5:
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v36 = *a2;
      uint64_t v37 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v36, (_OWORD *)a3);
      unint64_t v5 = v37;
      if (!v37) {
        return;
      }
      goto LABEL_62;
    case 6:
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v34 = *a2;
      uint64_t v35 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v34, (_OWORD *)a3);
      unint64_t v5 = v35;
      if (!v35) {
        return;
      }
      goto LABEL_62;
    case 7:
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v32 = *a2;
      uint64_t v33 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v32, (_OWORD *)a3);
      unint64_t v5 = v33;
      if (!v33) {
        return;
      }
      goto LABEL_62;
    case 8:
      uint64_t v13 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      uint64_t v31 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)8>::get(&v30, (_OWORD *)a3);
      unint64_t v5 = v31;
      if (!v31) {
        return;
      }
      goto LABEL_62;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 10:
      uint64_t v14 = (std::__shared_weak_count *)a2[1];
      uint64_t v28 = *a2;
      uint64_t v29 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)10>::get((uint64_t)&v28, (_OWORD *)a3);
      unint64_t v5 = v29;
      if (!v29) {
        return;
      }
      goto LABEL_62;
    case 11:
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      uint64_t v26 = *a2;
      uint64_t v27 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v26, (void *)a3);
      unint64_t v5 = v27;
      if (!v27) {
        return;
      }
      goto LABEL_62;
    case 12:
      char v16 = (std::__shared_weak_count *)a2[1];
      uint64_t v23 = *a2;
      uint64_t v24 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v23, (void *)a3);
      unint64_t v5 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_62;
    case 13:
      uint64_t v17 = a2[1];
      v25[0] = *a2;
      v25[1] = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)13>::get((uint64_t)v25);
    case 14:
      char v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v21 = *a2;
      uint64_t v22 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v21, (void *)a3);
      unint64_t v5 = v22;
      if (!v22) {
        return;
      }
LABEL_62:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return;
    case 15:
      uint64_t v19 = a2[1];
      v20[0] = *a2;
      v20[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)15>::get((uint64_t)v20);
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_58;
    default:
LABEL_58:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      return;
  }
}

void sub_2240031E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_2240031FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400320C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400321C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400322C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400323C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400324C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400325C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a26) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400326C()
{
  if (!*(void *)(v0 - 120)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400327C()
{
  if (!*(void *)(v0 - 104)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400328C()
{
  if (!*(void *)(v0 - 88)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_22400329C()
{
  if (!*(void *)(v0 - 72)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_2240032AC()
{
  if (!*(void *)(v0 - 56)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_2240032BC()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void sub_2240032CC()
{
  if (!*(void *)(v0 - 24)) {
    JUMPOUT(0x2240031F4);
  }
  JUMPOUT(0x2240031F0);
}

void *turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      uint64_t v3 = "constant";
      goto LABEL_17;
    case 1:
      uint64_t v3 = "append";
      goto LABEL_17;
    case 2:
      uint64_t v3 = "binary_transform";
      goto LABEL_17;
    case 3:
      uint64_t v3 = "logical_filter";
      goto LABEL_17;
    case 4:
      uint64_t v3 = "project";
      goto LABEL_17;
    case 5:
      uint64_t v3 = "range";
      goto LABEL_17;
    case 6:
      uint64_t v3 = "sarray_source";
      goto LABEL_17;
    case 7:
      uint64_t v3 = "sframe_source";
      goto LABEL_17;
    case 8:
      uint64_t v3 = "transform";
      goto LABEL_17;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 10:
      uint64_t v3 = "generalized_transform";
      goto LABEL_17;
    case 11:
      uint64_t v3 = "union";
      goto LABEL_17;
    case 12:
      uint64_t v3 = "union-project";
      goto LABEL_17;
    case 13:
      uint64_t v3 = "reduce";
      goto LABEL_17;
    case 14:
      uint64_t v3 = "ternary";
      goto LABEL_17;
    case 15:
      uint64_t v3 = "identity_node";
LABEL_17:
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 16:
      double result = (void *)assert_msg(0, "Infering type of an invalid node");
      goto LABEL_21;
    default:
LABEL_21:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
  }
}

uint64_t turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(int a1)
{
  switch(a1)
  {
    case 0:
    case 5:
      return 4;
    case 1:
      return 0;
    case 2:
      return 1;
    case 3:
      return 2;
    case 4:
    case 8:
    case 10:
      return 1;
    case 6:
    case 7:
      return 260;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 11:
    case 12:
      return 1;
    case 13:
      return 2;
    case 14:
      return 1;
    case 15:
      return 8;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      return 0;
    default:
      return 0;
  }
}

uint64_t turi::query_eval::consumes_inputs_at_same_rates(int **a1)
{
  unint64_t operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (v2 != 1 && (operator & 1) == 0) {
    return (operator >> 1) & 1;
  }
  else {
    return 1;
  }
}

uint64_t turi::query_eval::is_linear_transform(uint64_t a1)
{
  if (((*(void *)a1 & 3) != 0 || *(_DWORD *)(a1 + 8) == 1) && (*(void *)a1 & 4) == 0) {
    return *(void *)a1 & 1;
  }
  else {
    return 0;
  }
}

uint64_t turi::query_eval::is_source_node(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

uint64_t turi::query_eval::is_linear_transform(int **a1)
{
  char operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (((operator & 3) != 0 || v2 == 1) && (operator & 4) == 0) {
    return operator & 1;
  }
  else {
    return 0;
  }
}

uint64_t turi::query_eval::is_sublinear_transform(int **a1)
{
  unint64_t operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (((operator & 3) != 0 || v2 == 1) && (operator & 4) == 0) {
    return (operator >> 1) & 1;
  }
  else {
    return 0;
  }
}

unint64_t turi::query_eval::is_source_node(int **a1)
{
  return ((unint64_t)turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1) >> 2) & 1;
}

BOOL turi::query_eval::is_parallel_slicable(int **a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v3 = 1;
  int v4 = v5;
  BOOL v1 = turi::query_eval::_propagate_parallel_slicing(a1, (uint64_t)&v4, (uint64_t)&v3) != -1;
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v4, v5[0]);
  return v1;
}

void sub_22400373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t turi::query_eval::_propagate_parallel_slicing(int **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *a1;
  if (v6)
  {
    int v8 = (void *)(a2 + 8);
    do
    {
      unint64_t v9 = v6[4];
      BOOL v10 = v9 >= (unint64_t)v7;
      if (v9 >= (unint64_t)v7) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v6 + 1;
      }
      if (v10) {
        int v8 = v6;
      }
      unint64_t v6 = (void *)*v11;
    }
    while (*v11);
    if (v8 != (void *)(a2 + 8) && (unint64_t)v7 >= v8[4]) {
      return v8[6];
    }
  }
  if ((turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(*v7) & 4) != 0) {
    return 1;
  }
  char is_linear_transform = turi::query_eval::is_linear_transform(a1);
  int is_sublinear_transform = turi::query_eval::is_sublinear_transform(a1);
  int v14 = is_sublinear_transform;
  if ((is_linear_transform & 1) == 0 && !is_sublinear_transform) {
    return -1;
  }
  uint64_t v16 = *((void *)*a1 + 7);
  if (v16 == *((void *)*a1 + 8)) {
    turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator()();
  }
  uint64_t v15 = turi::query_eval::_propagate_parallel_slicing(v16, a2, a3);
  if (v15 != -1)
  {
    uint64_t v17 = *((void *)*a1 + 7);
    if ((unint64_t)(*((void *)*a1 + 8) - v17) >= 0x11)
    {
      unint64_t v18 = 1;
      uint64_t v19 = 16;
      do
      {
        uint64_t v20 = turi::query_eval::_propagate_parallel_slicing(v17 + v19, a2, a3);
        if (v20 == -1 || v20 != v15) {
          return -1;
        }
        ++v18;
        uint64_t v17 = *((void *)*a1 + 7);
        v19 += 16;
      }
      while (v18 < (*((void *)*a1 + 8) - v17) >> 4);
    }
    if (v14)
    {
      uint64_t v22 = (uint64_t *)(*(void *)a3 + 1);
      *(void *)a3 = v22;
      uint64_t v24 = a1;
      std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v24)[6] = v22;
      return *(void *)a3;
    }
  }
  return v15;
}

BOOL turi::query_eval::_is_linear_graph(unint64_t *a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *a1;
    do
    {
      unint64_t v6 = v4[4];
      if (v5 >= v6)
      {
        if (v6 >= v5)
        {
          uint64_t v11 = a1;
          return *((unsigned char *)std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, a1, (uint64_t)&std::piecewise_construct, &v11)+ 48) != 0;
        }
        ++v4;
      }
      int v4 = (void *)*v4;
    }
    while (v4);
  }
  if ((turi::query_eval::is_linear_transform((int **)a1) & 1) != 0
    || (turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(*(_DWORD *)*a1) & 4) != 0)
  {
    uint64_t v8 = *(void *)(*a1 + 56);
    uint64_t v9 = *(void *)(*a1 + 64);
    if (v8 == v9)
    {
      uint64_t is_linear_graph = 1;
    }
    else
    {
      do
      {
        uint64_t is_linear_graph = turi::query_eval::is_linear_graph(v8);
        if (!is_linear_graph) {
          break;
        }
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
  else
  {
    uint64_t is_linear_graph = 0;
  }
  uint64_t v11 = a1;
  *((unsigned char *)std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, a1, (uint64_t)&std::piecewise_construct, &v11)+ 48) = is_linear_graph;
  return is_linear_graph;
}

BOOL turi::query_eval::is_linear_graph(unint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = v4;
  BOOL is_linear_graph = turi::query_eval::_is_linear_graph(a1, (uint64_t)&v3);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v3, v4[0]);
  return is_linear_graph;
}

void sub_224003A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t turi::query_eval::prove_equal_length(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = v14;
  uint64_t v3 = turi::query_eval::propagate_length(a1, (uint64_t)&v13);
  uint64_t v5 = v4;
  uint64_t v6 = turi::query_eval::propagate_length(a2, (uint64_t)&v13);
  if (v3 == -1 || v6 == -1)
  {
    BOOL v10 = v5 == v7;
    if (v6 != -1) {
      BOOL v10 = 0;
    }
    BOOL v11 = v3 == -1;
    int v9 = v3 == -1 && v10;
    int v8 = v11 && v10;
  }
  else
  {
    int v8 = v3 == v6;
    int v9 = 1;
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v13, v14[0]);
  return v9 | (v8 << 8);
}

void sub_224003B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t turi::query_eval::propagate_length(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(int **)a1;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v6 = (void *)(a2 + 8);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)v5;
    if (v7 >= (unint64_t)v5) {
      int v9 = v4;
    }
    else {
      int v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != (void *)(a2 + 8) && (unint64_t)v5 >= v6[4]) {
    return v6[6];
  }
LABEL_12:
  BOOL v10 = *(std::__shared_weak_count **)(a1 + 8);
  v20[0] = *(void *)a1;
  v20[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = turi::query_eval::infer_planner_node_length((uint64_t)v20);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v11 < 0)
  {
    int is_linear_transform = turi::query_eval::is_linear_transform((int **)a1);
    int v14 = *(int **)a1;
    if (is_linear_transform)
    {
      uint64_t v15 = *((void *)v14 + 7);
      if (v15 == *((void *)v14 + 8)) {
        turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator()();
      }
      uint64_t v11 = turi::query_eval::propagate_length(v15, a2);
      uint64_t v17 = v16;
      uint64_t v21 = (uint64_t *)a1;
      unint64_t v18 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v21);
      v18[6] = (uint64_t *)v11;
      v18[7] = v17;
    }
    else
    {
      return -1;
    }
  }
  else
  {
    uint64_t v21 = (uint64_t *)a1;
    uint64_t v12 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v21);
    v12[6] = (uint64_t *)v11;
    v12[7] = 0;
  }
  return v11;
}

void turi::query_eval::extract_field<turi::query_eval::visitor_repr,std::string,std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>>(int a1@<W0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v5 = (std::__shared_weak_count *)a2[1];
      uint64_t v49 = *a2;
      uint64_t v50 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v49);
      uint64_t v6 = v50;
      if (!v50) {
        return;
      }
      goto LABEL_63;
    case 1:
      unint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v47 = *a2;
      uint64_t v48 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)1>::get((uint64_t *)&v47, a3, a4);
      uint64_t v6 = v48;
      if (!v48) {
        return;
      }
      goto LABEL_63;
    case 2:
      BOOL v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v45 = *a2;
      uint64_t v46 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v45, a4);
      uint64_t v6 = v46;
      if (!v46) {
        return;
      }
      goto LABEL_63;
    case 3:
      int v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v43 = *a2;
      uint64_t v44 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)3>::get((uint64_t *)&v43, a3, a4);
      uint64_t v6 = v44;
      if (!v44) {
        return;
      }
      goto LABEL_63;
    case 4:
      BOOL v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v41 = *a2;
      uint64_t v42 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v41);
      uint64_t v6 = v42;
      if (!v42) {
        return;
      }
      goto LABEL_63;
    case 5:
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v39 = *a2;
      uint64_t v40 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v39);
      uint64_t v6 = v40;
      if (!v40) {
        return;
      }
      goto LABEL_63;
    case 6:
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v37 = *a2;
      uint64_t v38 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)6>::get((uint64_t *)&v37);
      uint64_t v6 = v38;
      if (!v38) {
        return;
      }
      goto LABEL_63;
    case 7:
      uint64_t v13 = (std::__shared_weak_count *)a2[1];
      uint64_t v35 = *a2;
      uint64_t v36 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)7>::get((uint64_t *)&v35);
      uint64_t v6 = v36;
      if (!v36) {
        return;
      }
      goto LABEL_63;
    case 8:
      int v14 = (std::__shared_weak_count *)a2[1];
      uint64_t v33 = *a2;
      uint64_t v34 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v33, a4);
      uint64_t v6 = v34;
      if (!v34) {
        return;
      }
      goto LABEL_63;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>();
    case 10:
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      uint64_t v31 = *a2;
      uint64_t v32 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)10>::get((uint64_t *)&v31, a4);
      uint64_t v6 = v32;
      if (!v32) {
        return;
      }
      goto LABEL_63;
    case 11:
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      uint64_t v29 = *a2;
      uint64_t v30 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)11>::get((uint64_t *)&v29, a3);
      uint64_t v6 = v30;
      if (!v30) {
        return;
      }
      goto LABEL_63;
    case 12:
      uint64_t v17 = (std::__shared_weak_count *)a2[1];
      uint64_t v25 = *a2;
      uint64_t v26 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)12>::get((uint64_t *)&v25, a3);
      uint64_t v6 = v26;
      if (!v26) {
        return;
      }
      goto LABEL_63;
    case 13:
      unint64_t v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v27 = *a2;
      uint64_t v28 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v27, a4);
      uint64_t v6 = v28;
      if (!v28) {
        return;
      }
      goto LABEL_63;
    case 14:
      uint64_t v19 = (std::__shared_weak_count *)a2[1];
      uint64_t v23 = *a2;
      uint64_t v24 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v23, a4);
      uint64_t v6 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_63;
    case 15:
      uint64_t v20 = (std::__shared_weak_count *)a2[1];
      uint64_t v21 = *a2;
      uint64_t v22 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v21, a4);
      uint64_t v6 = v22;
      if (v22) {
LABEL_63:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_59;
    default:
LABEL_59:
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      return;
  }
}

void sub_224004004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_22400401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400402C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400403C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400404C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400405C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400406C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400407C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a26) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400408C()
{
  if (!*(void *)(v0 - 120)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_22400409C()
{
  if (!*(void *)(v0 - 104)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_2240040AC()
{
  if (!*(void *)(v0 - 88)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_2240040BC()
{
  if (!*(void *)(v0 - 72)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_2240040CC()
{
  if (!*(void *)(v0 - 56)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_2240040DC()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void sub_2240040EC()
{
  if (!*(void *)(v0 - 24)) {
    JUMPOUT(0x224004014);
  }
  JUMPOUT(0x224004010);
}

void *turi::query_eval::operator<<(void *a1, uint64_t *a2)
{
  v6.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&v6.__end_;
  v6.__end_ = 0;
  v6.__end_cap_.__value_ = 0;
  memset(v7, 0, sizeof(v7));
  v9[0] = 0;
  v9[1] = 0;
  BOOL v8 = v9;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = (void **)v5;
  turi::query_eval::recursive_print_impl(a2, (uint64_t)&v4, &v6);
  turi::dot_graph::print(&v6, a1);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v8, v9[0]);
  uint64_t v4 = (void **)v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v6, (char *)v6.__end_);
  return a1;
}

void sub_2240041FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

std::vector<std::pair<std::string, std::string>> *turi::query_eval::recursive_print_impl(uint64_t *a1, uint64_t a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v33[0] = &unk_26D768718;
  v33[1] = a2;
  uint64_t v34 = v33;
  std::to_string(&v28, *a1);
  std::vector<std::pair<std::string, std::string>> v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v34) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(std::string *__return_ptr))(*v34 + 48))(&v26);
  unint64_t v7 = std::string::append(&v26, ": ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = (std::__shared_weak_count *)a1[1];
  int v10 = *(_DWORD *)*a1;
  uint64_t v21 = (unsigned int *)*a1;
  uint64_t v22 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)v33);
  turi::query_eval::extract_field<turi::query_eval::visitor_repr,std::string,std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>>(v10, &v21, (uint64_t)v32, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__value_func[abi:ne180100](v32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v28.__r_.__value_.__l.__data_))
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v28);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&a3[2], (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v29);
    std::string::operator=((std::string *)(v16 + 7), &__str);
    uint64_t v17 = *(uint64_t **)(*a1 + 56);
    unint64_t v18 = *(uint64_t **)(*a1 + 64);
    if (v17 != v18)
    {
      while (1)
      {
        uint64_t v19 = *v17;
        __p.__r_.__value_.__r.__words[0] = *v17;
        uint64_t v20 = (std::__shared_weak_count *)v17[1];
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::to_string(&v26, v19);
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v29, (long long *)&v26, (long long *)&v28);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3 + 1, (long long *)&v29);
        if (v31 < 0) {
          operator delete(v30);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        turi::query_eval::recursive_print_impl(&__p, a2, a3);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (v20) {
          goto LABEL_37;
        }
LABEL_38:
        v17 += 2;
        if (v17 == v18) {
          goto LABEL_23;
        }
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      if (!v20) {
        goto LABEL_38;
      }
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      goto LABEL_38;
    }
  }
LABEL_23:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__value_func[abi:ne180100](v33);
  return a3;
}

void sub_22400453C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__value_func[abi:ne180100]((void *)(v42 - 136));
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__value_func[abi:ne180100]((void *)(v42 - 104));
  _Unwind_Resume(a1);
}

void *turi::dot_graph::print(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  uint64_t v34 = (uint64_t **)a1;
  std::vector<std::pair<std::string, std::string>> v6 = (uint64_t *)*a1;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = v6;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string v35 = *(std::string *)(v4 + 4);
      }
      unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v8 = &v35;
      }
      else {
        long long v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[label=\"", 8);
      uint64_t v38 = &v35;
      uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34 + 6, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v38);
      uint64_t v15 = v12[7];
      uint64_t v13 = v12 + 7;
      uint64_t v14 = v15;
      int v16 = *((char *)v13 + 23);
      if (v16 >= 0) {
        uint64_t v17 = (uint64_t)v13;
      }
      else {
        uint64_t v17 = v14;
      }
      if (v16 >= 0) {
        uint64_t v18 = *((unsigned __int8 *)v13 + 23);
      }
      else {
        uint64_t v18 = v13[1];
      }
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"]\n", 3);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (uint64_t *)v4[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (uint64_t *)v4[2];
          BOOL v22 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v22);
      }
      uint64_t v4 = v21;
    }
    while (v21 != v5);
  }
  uint64_t v23 = (long long *)v34[3];
  for (uint64_t i = (long long *)v34[4]; v23 != i; v23 += 3)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100](&v35, v23);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v26 = &v35;
    }
    else {
      std::string v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v35.__r_.__value_.__l.__size_;
    }
    std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    std::string v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\" -> \"", 6);
    if ((v37 & 0x80u) == 0) {
      uint64_t v30 = __p;
    }
    else {
      uint64_t v30 = (void **)__p[0];
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v31 = v37;
    }
    else {
      uint64_t v31 = (uint64_t)__p[1];
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"\n", 2);
    if ((char)v37 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}", 1);
}

void sub_2240048B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void turi::dot_graph::~dot_graph(turi::dot_graph *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  int v2 = (void **)((char *)this + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  BOOL v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(n->inputs.empty())", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 288, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224004A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  char v7 = a1 + 1;
  std::vector<std::pair<std::string, std::string>> v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        std::vector<std::pair<std::string, std::string>> v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        return v9;
      }
      std::vector<std::pair<std::string, std::string>> v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    uint64_t v12 = v11;
    uint64_t v13 = (*a4)[1];
    void v11[4] = **a4;
    void v11[5] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    v11[6] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

void turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  BOOL v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(n->inputs.empty())", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 399, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224004D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  char v7 = a1 + 1;
  std::vector<std::pair<std::string, std::string>> v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        std::vector<std::pair<std::string, std::string>> v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        return v9;
      }
      std::vector<std::pair<std::string, std::string>> v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = v11;
    uint64_t v13 = (*a4)[1];
    void v11[4] = **a4;
    void v11[5] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

void std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__func()
{
}

void *std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D768718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D768718;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::operator()(uint64_t a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5 = *a2;
  std::vector<std::pair<std::string, std::string>> v6 = (std::__shared_weak_count *)a2[1];
  unint64_t v18 = *a2;
  uint64_t v19 = v6;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v10 = *(void **)(v7 + 8);
  unint64_t v8 = (void *)(v7 + 8);
  int v9 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v8;
  do
  {
    unint64_t v12 = v9[4];
    BOOL v13 = v12 >= v5;
    if (v12 >= v5) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = v9 + 1;
    }
    if (v13) {
      uint64_t v11 = v9;
    }
    int v9 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v8 && v5 >= v11[4])
  {
    if (*((char *)v11 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v11[6], v11[7]);
    }
    else
    {
      long long v17 = *((_OWORD *)v11 + 3);
      a3->__r_.__value_.__r.__words[2] = v11[8];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v17;
    }
  }
  else
  {
LABEL_12:
    turi::query_eval::to_name(*(void *)(*(void *)(a1 + 8) + 16), a3);
    uint64_t v15 = *(uint64_t ***)(a1 + 8);
    uint64_t v20 = &v18;
    int v16 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(v15, &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    std::string::operator=((std::string *)v16 + 2, a3);
    std::vector<std::pair<std::string, std::string>> v6 = v19;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_224005068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::target_type()
{
}

void *turi::query_eval::to_name@<X0>(unint64_t this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  do
  {
    __src[v4] = this % 0x1A + 65;
    size_t v5 = v4 + 1;
    if (this < 0x1A) {
      break;
    }
    this /= 0x1AuLL;
  }
  while (v4++ < 0xF);
  return std::string::basic_string[abi:ne180100](a2, __src, v5);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  std::vector<std::pair<std::string, std::string>> v6 = a1[1];
  unint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        std::vector<std::pair<std::string, std::string>> v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        return v9;
      }
      std::vector<std::pair<std::string, std::string>> v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = (uint64_t *)operator new(0x48uLL);
    BOOL v13 = v12;
    v17[1] = v7;
    uint64_t v14 = *a4;
    void v12[4] = **a4;
    uint64_t v15 = v14[1];
    void v12[5] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    v12[6] = 0;
    v12[7] = 0;
    v12[8] = 0;
    char v18 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v17, 0);
  }
  return (uint64_t **)v13;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  size_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2240053B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserialize()
{
}

void sub_224005418(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::holder(void *a1)
{
  *a1 = &unk_26D768818;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002246CF209 & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_2240054B0(_Unwind_Exception *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::~holder(void *a1)
{
  *a1 = &unk_26D768818;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::~holder(void *a1)
{
  *a1 = &unk_26D768818;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::type()
{
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::clone()
{
}

void sub_2240055DC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserializer_id()
{
  return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry;
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=((void *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::save(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      size_t v6 = 2 * v3 + 16;
      v2[5] = v6;
      uint64_t v7 = (char **)v2[2];
      if (v7)
      {
        long long v4 = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          long long v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        long long v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      void v2[3] = v4;
    }
    else
    {
      long long v4 = (char *)v2[3];
    }
    *(void *)&v4[v2[4]] = turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002246CF209 & 0x7FFFFFFFFFFFFFFFLL));
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::print(uint64_t a1, void *a2)
{
  return a2;
}

void *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_224005B40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  size_t v2 = strlen((const char *)(0x80000002246CF209 & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002246CF209 & 0x7FFFFFFFFFFFFFFFLL, v2);
  char v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

_OWORD *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  size_t v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    BOOL v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserialize()
{
}

void sub_224005CD0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::holder(void *a1)
{
  *a1 = &unk_26D7688F0;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002246D0346 & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_224005D68(_Unwind_Exception *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::~holder(void *a1)
{
  *a1 = &unk_26D7688F0;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::~holder(void *a1)
{
  *a1 = &unk_26D7688F0;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::type()
{
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::clone()
{
}

void sub_224005E94(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserializer_id()
{
  return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry;
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=((void *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::save(uint64_t a1, void *a2)
{
  size_t v2 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      size_t v6 = 2 * v3 + 16;
      v2[5] = v6;
      uint64_t v7 = (char **)v2[2];
      if (v7)
      {
        long long v4 = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          long long v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        long long v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      void v2[3] = v4;
    }
    else
    {
      long long v4 = (char *)v2[3];
    }
    *(void *)&v4[v2[4]] = turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002246D0346 & 0x7FFFFFFFFFFFFFFFLL));
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::print(uint64_t a1, void *a2)
{
  return a2;
}

void *std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    long long v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2240062DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  size_t v2 = strlen((const char *)(0x80000002246D0346 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002246D0346 & 0x7FFFFFFFFFFFFFFFLL, v2);
  char v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

void turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserialize()
{
}

void sub_2240063A8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::holder(void *a1)
{
  *a1 = &unk_26D7689C8;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002246D04B6 & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_224006440(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100]((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::~holder(void *a1)
{
  *a1 = &unk_26D7689C8;
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::~holder(void *a1)
{
  *a1 = &unk_26D7689C8;
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::type()
{
}

void turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::clone()
{
}

void sub_22400656C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserializer_id()
{
  return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry;
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=((void *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::save(uint64_t a1, void *a2)
{
  size_t v2 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      size_t v6 = 2 * v3 + 16;
      v2[5] = v6;
      uint64_t v7 = (char **)v2[2];
      if (v7)
      {
        long long v4 = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          long long v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        long long v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      void v2[3] = v4;
    }
    else
    {
      long long v4 = (char *)v2[3];
    }
    *(void *)&v4[v2[4]] = turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002246D04B6 & 0x7FFFFFFFFFFFFFFFLL));
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::print(uint64_t a1, void *a2)
{
  return a2;
}

void *std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](void *a1)
{
  size_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_224006AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *turi::any::print_type_or_contents<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  size_t v2 = strlen((const char *)(0x80000002246D04B6 & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002246D04B6 & 0x7FFFFFFFFFFFFFFFLL, v2);
  char v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

void turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserialize()
{
}

void sub_224006B9C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::holder(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768A40;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002246CF356 & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_224006C34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::~holder(void *a1)
{
  *a1 = &unk_26D768A40;
  size_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::~holder(void *a1)
{
  *a1 = &unk_26D768A40;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::type()
{
}

void turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::clone()
{
}

uint64_t turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserializer_id()
{
  return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry;
}

uint64_t turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::save(uint64_t a1, void *a2)
{
  size_t v2 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      size_t v6 = 2 * v3 + 16;
      v2[5] = v6;
      uint64_t v7 = (char **)v2[2];
      if (v7)
      {
        long long v4 = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          long long v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        long long v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      void v2[3] = v4;
    }
    else
    {
      long long v4 = (char *)v2[3];
    }
    *(void *)&v4[v2[4]] = turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002246CF356 & 0x7FFFFFFFFFFFFFFFLL));
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)0>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224006EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)1>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224006F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)2>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224006FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)3>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)4>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)5>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2240070E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)6>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)7>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2240071B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)8>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)10>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(uint64_t ***)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(turi::query_eval::planner_node_type,std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::vector<turi::flex_type_enum> turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(turi::query_eval::planner_node_type,std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)11>::get(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2240074F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)13>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)12>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(_DWORD **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2240075C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)14>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v3 = *(int **)a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)15>::get(uint64_t *a1@<X0>, void *a2@<X8>)
{
  size_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  long long v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type((uint64_t)&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224007690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v29.__r_.__value_.__l.__data_) = **a1;
  if (!LODWORD(v29.__r_.__value_.__l.__data_))
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "type");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v8 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v23, "type");
    __p[0] = v23;
    char v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v8) = 0;
    switch(*((unsigned char *)v7 + 68))
    {
      case 0:
        uint64_t v8 = *((void *)v7 + 7);
        goto LABEL_29;
      case 1:
        uint64_t v8 = (uint64_t)*((double *)v7 + 7);
        goto LABEL_29;
      case 2:
        uint64_t v10 = *((void *)v7 + 7);
        size_t __idx = 0;
        unint64_t v11 = (char *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0) {
          unint64_t v11 = *(char **)(v10 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v10 + 31) < 0) {
          uint64_t v12 = *(void *)(v10 + 16);
        }
        else {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 31);
        }
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v21 = std::string::append(&v29, " cannot be interpreted as an integer");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          *(void *)&long long v26 = *((void *)&v21->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_29;
      case 3:
        uint64_t v9 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_28;
      case 4:
        uint64_t v13 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 5:
        uint64_t v14 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 6:
        uint64_t v8 = (uint64_t)(*((void *)v7 + 7) << 8) >> 8;
        goto LABEL_29;
      case 7:
        goto LABEL_29;
      case 8:
        uint64_t v15 = *((void *)v7 + 7);
        int v16 = *(atomic_uint **)(v15 + 16);
        __p[0] = *(void **)(v15 + 8);
        __p[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
        }
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 56);
        long long v27 = *(_OWORD *)(v15 + 40);
        long long v28 = v18;
        long long v26 = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_28;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v7 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v27 + 1))
        {
          *(void *)&long long v28 = *((void *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if ((void)v26)
        {
          *((void *)&v26 + 1) = v26;
          operator delete((void *)v26);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_28:
        LOBYTE(v8) = 0;
LABEL_29:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        uint64_t v19 = operator new(1uLL);
        *a2 = v19;
        *v19++ = v8;
        a2[1] = v19;
        a2[2] = v19;
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        return;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v29;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_224007A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224007CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"type\")", 40);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 106, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224007EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(__p) = **a1;
  if (__p != 1)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  p_p = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  long long v4 = (uint64_t *)*((void *)v3 + 7);
  uint64_t v5 = (uint64_t *)*((void *)v3 + 8);
  if (v4 == v5)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    do
    {
      uint64_t v6 = *v4;
      char v7 = (std::__shared_weak_count *)v4[1];
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = v6;
        uint64_t v23 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v22 = *v4;
        uint64_t v23 = 0;
      }
      turi::query_eval::infer_planner_node_type(&__p, &v22);
      std::vector<std::vector<turi::flex_type_enum>>::push_back[abi:ne180100]((uint64_t *)&p_p, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v25 = __p;
        operator delete(__p);
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
    }
    while (v4 != v5);
    uint64_t v9 = p_p;
    uint64_t v8 = v27;
  }
  assert_msg(v8 != v9, "Append with no input");
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v27 - p_p);
  unint64_t v11 = (unsigned __int8 *)*p_p;
  uint64_t v12 = (uint64_t)p_p[1];
  if (v10 >= 2)
  {
    for (uint64_t i = 1; i != v10; ++i)
    {
      uint64_t v14 = p_p[3 * i];
      char v15 = p_p[3 * i + 1];
      unint64_t v16 = v15 - v14;
      uint64_t v20 = v12 - (void)v11;
      int64_t v21 = v15 - v14;
      if (v15 - v14 != v12 - (void)v11)
      {
        std::string __p = &v21;
        uint64_t v25 = &v20;
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
      }
      if (v15 != v14)
      {
        unint64_t v17 = 0;
        do
        {
          int v18 = v14[v17];
          LODWORD(v21) = (char)v18;
          int v19 = v11[v17];
          LODWORD(v2CoreML::Specification::AdamOptimizer::New(this, 0) = (char)v19;
          if (v18 != v19)
          {
            std::string __p = &v21;
            uint64_t v25 = &v20;
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
          }
          ++v17;
        }
        while (v17 < v16);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(a2, v11, v12, v12 - (void)v11);
  std::string __p = &p_p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2240081E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  std::string __p = &a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240083C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flex_type_enum>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<turi::flex_type_enum>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)char v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2240085F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"types[i].size()", 15);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"types[0].size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224008798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)types[i][j]", 16);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)types[0][j]", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224008A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flex_type_enum>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v29.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v29.__r_.__value_.__l.__data_) == 2)
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v8 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v23, "output_type");
    __p[0] = v23;
    uint64_t v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v8) = 0;
    switch(*((unsigned char *)v7 + 68))
    {
      case 0:
        uint64_t v8 = *((void *)v7 + 7);
        goto LABEL_29;
      case 1:
        uint64_t v8 = (uint64_t)*((double *)v7 + 7);
        goto LABEL_29;
      case 2:
        uint64_t v10 = *((void *)v7 + 7);
        size_t __idx = 0;
        unint64_t v11 = (char *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0) {
          unint64_t v11 = *(char **)(v10 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v10 + 31) < 0) {
          uint64_t v12 = *(void *)(v10 + 16);
        }
        else {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 31);
        }
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int64_t v21 = std::string::append(&v29, " cannot be interpreted as an integer");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          *(void *)&long long v26 = *((void *)&v21->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_29;
      case 3:
        uint64_t v9 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_28;
      case 4:
        uint64_t v13 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 5:
        uint64_t v14 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 6:
        uint64_t v8 = (uint64_t)(*((void *)v7 + 7) << 8) >> 8;
        goto LABEL_29;
      case 7:
        goto LABEL_29;
      case 8:
        uint64_t v15 = *((void *)v7 + 7);
        unint64_t v16 = *(atomic_uint **)(v15 + 16);
        __p[0] = *(void **)(v15 + 8);
        __p[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
        }
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 56);
        long long v27 = *(_OWORD *)(v15 + 40);
        long long v28 = v18;
        long long v26 = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_28;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v7 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v27 + 1))
        {
          *(void *)&long long v28 = *((void *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if ((void)v26)
        {
          *((void *)&v26 + 1) = v26;
          operator delete((void *)v26);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_28:
        LOBYTE(v8) = 0;
LABEL_29:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        int v19 = operator new(1uLL);
        *a2 = v19;
        *v19++ = v8;
        a2[1] = v19;
        a2[2] = v19;
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        return;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v29;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_224009018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240092D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240094D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *a1;
  LODWORD(v8) = **a1;
  if (v8 != 3)
  {
    uint64_t v9 = (uint64_t)&v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  long long v4 = v2 + 14;
  uint64_t v3 = (void *)*((void *)v2 + 7);
  uint64_t v5 = *((void *)v4 + 1) - (void)v3;
  uint64_t v9 = v5 >> 4;
  if (v5 != 32)
  {
    uint64_t v8 = &v9;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[1];
  v7[0] = *v3;
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(a2, v7);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22400969C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::LOGICAL_FILTER_NODE", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 150, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224009840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 151, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224009AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(_DWORD **a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v42) = **a1;
  if (v42 != 4)
  {
    v46[0] = &v42;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = (void *)*((void *)v3 + 7);
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  v45[0] = *v5;
  v45[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(v46, v45);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  uint64_t v8 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v7 + 2), (const void **)__p);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v42, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v9 = v42;
  for (uint64_t i = v43; v9 != i; v9 += 2)
  {
    uint64_t v11 = *v9;
    unsigned int v12 = *((unsigned __int8 *)v9 + 12);
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0) {
      atomic_fetch_add((atomic_ullong *volatile)v11, 1uLL);
    }
    uint64_t v14 = v46[0];
    unint64_t v16 = (unsigned char *)a2[1];
    unint64_t v15 = a2[2];
    if ((unint64_t)v16 >= v15)
    {
      unint64_t v18 = *a2;
      int v19 = &v16[-*a2];
      unint64_t v20 = (unint64_t)(v19 + 1);
      if ((uint64_t)(v19 + 1) < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = v15 - v18;
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22) {
        uint64_t v23 = (char *)operator new(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      char v24 = &v19[(void)v23];
      v19[(void)v23] = v14[v11];
      uint64_t v17 = (uint64_t)&v19[(void)v23 + 1];
      if (v16 != (unsigned char *)v18)
      {
        uint64_t v25 = &v16[~v18];
        do
        {
          char v26 = *--v16;
          (v25--)[(void)v23] = v26;
        }
        while (v16 != (unsigned char *)v18);
        char v24 = v23;
      }
      *a2 = (unint64_t)v24;
      a2[1] = v17;
      a2[2] = (unint64_t)&v23[v22];
      if (v18) {
        operator delete((void *)v18);
      }
    }
    else
    {
      *unint64_t v16 = *((unsigned char *)v46[0] + v11);
      uint64_t v17 = (uint64_t)(v16 + 1);
    }
    a2[1] = v17;
    switch(v12)
    {
      case 2u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          if (*(char *)(v11 + 31) < 0) {
            operator delete(*(void **)(v11 + 8));
          }
          uint64_t v28 = v11;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_74;
        }
        break;
      case 3u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          unsigned __int8 v37 = *(void **)(v11 + 8);
          if (v37)
          {
            *(void *)(v11 + 16) = v37;
            operator delete(v37);
          }
          uint64_t v28 = v11;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_74;
        }
        break;
      case 4u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          __p[0] = (void *)(v11 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_67;
        }
        break;
      case 5u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          __p[0] = (void *)(v11 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_67:
          uint64_t v28 = v11;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_74;
        }
        break;
      case 8u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v11 + 16));
          uint64_t v28 = v11;
          unsigned int v35 = -235920773;
          goto LABEL_73;
        }
        break;
      case 9u:
        if (atomic_fetch_add((atomic_ullong *volatile)v11, 0xFFFFFFFFFFFFFFFFLL) == 1 && v11 != 0)
        {
          uint64_t v32 = *(void **)(v11 + 48);
          if (v32)
          {
            *(void *)(v11 + 56) = v32;
            operator delete(v32);
          }
          uint64_t v33 = *(void **)(v11 + 24);
          if (v33)
          {
            *(void *)(v11 + 32) = v33;
            operator delete(v33);
          }
          uint64_t v34 = *(std::__shared_weak_count **)(v11 + 16);
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          uint64_t v28 = v11;
          unsigned int v35 = 2071181815;
LABEL_73:
          uint64_t v29 = v35 | 0x1030C4000000000;
LABEL_74:
          MEMORY[0x22A614FA0](v28, v29);
        }
        break;
      default:
        continue;
    }
  }
  __p[0] = &v42;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_224009F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400A330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unsigned char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type@<X0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  if (**a1 != 5) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a2 = v3;
  *uint64_t v3 = 0;
  uint64_t result = v3 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 102, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unsigned char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type@<X0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v27.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v27.__r_.__value_.__l.__data_) == 6)
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(v21, "type");
    __p[0] = v21;
    long long v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5, (const void **)v21, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v5) = 0;
    switch(*((unsigned char *)v4 + 68))
    {
      case 0:
        uint64_t v5 = *((void *)v4 + 7);
        goto LABEL_26;
      case 1:
        uint64_t v5 = (uint64_t)*((double *)v4 + 7);
        goto LABEL_26;
      case 2:
        uint64_t v7 = *((void *)v4 + 7);
        size_t __idx = 0;
        uint64_t v8 = (char *)(v7 + 8);
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v8 = *(char **)(v7 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v8);
        LOBYTE(v5) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SHIBYTE(v24[0]) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v9 = *(void *)(v7 + 16);
        }
        else {
          uint64_t v9 = *(unsigned __int8 *)(v7 + 31);
        }
        if (__idx != v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int v19 = std::string::append(&v27, " cannot be interpreted as an integer");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v24[0] = (void *)v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_26;
      case 3:
        uint64_t v6 = *((void *)v4 + 7);
        __p[1] = 0;
        v24[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_25;
      case 4:
        uint64_t v10 = *((void *)v4 + 7);
        __p[1] = 0;
        v24[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
        goto LABEL_25;
      case 5:
        uint64_t v11 = *((void *)v4 + 7);
        __p[1] = 0;
        v24[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
        goto LABEL_25;
      case 6:
        uint64_t v5 = (uint64_t)(*((void *)v4 + 7) << 8) >> 8;
        goto LABEL_26;
      case 7:
        goto LABEL_26;
      case 8:
        uint64_t v12 = *((void *)v4 + 7);
        uint64_t v13 = *(atomic_uint **)(v12 + 16);
        __p[0] = *(void **)(v12 + 8);
        __p[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
        }
        long long v14 = *(_OWORD *)(v12 + 24);
        long long v15 = *(_OWORD *)(v12 + 56);
        long long v25 = *(_OWORD *)(v12 + 40);
        long long v26 = v15;
        *(_OWORD *)char v24 = v14;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_25;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v4 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v25 + 1))
        {
          *(void *)&long long v26 = *((void *)&v25 + 1);
          operator delete(*((void **)&v25 + 1));
        }
        if (v24[0])
        {
          v24[1] = v24[0];
          operator delete(v24[0]);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_25:
        LOBYTE(v5) = 0;
LABEL_26:
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        unint64_t v16 = operator new(1uLL);
        *a2 = v16;
        *unint64_t v16 = v5;
        uint64_t result = v16 + 1;
        a2[1] = result;
        a2[2] = result;
        return result;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v27;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_22400AA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400AD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(_DWORD **a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LODWORD(__p) = **a1;
  if (__p != 7)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "types");
  uint64_t v4 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v3 + 2), (const void **)&__p);
  switch(*(unsigned char *)(v4 + 12))
  {
    case 0:
      std::string::size_type v5 = *(void *)v4;
      v104.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v104.__r_.__value_.__r.__words[1]) = 0;
      v104.__r_.__value_.__r.__words[0] = v5;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v84 = 0;
      p_p = (void **)&v84;
      LOBYTE(v10CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      uint64_t v84 = (double *)operator new(0x10uLL);
      uint64_t v85 = v84;
      uint64_t v86 = (char *)(v84 + 2);
      uint64_t v85 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v86, (uint64_t *)&v104, (uint64_t *)&v104.__r_.__value_.__r.__words[2], (uint64_t)v84);
      switch(v104.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_53;
        case 3:
          goto LABEL_73;
        case 4:
          goto LABEL_61;
        case 5:
          goto LABEL_78;
        case 8:
          goto LABEL_82;
        case 9:
          goto LABEL_64;
        default:
          goto LABEL_87;
      }
      goto LABEL_87;
    case 1:
      std::string::size_type v24 = *(void *)v4;
      LODWORD(v104.__r_.__value_.__r.__words[1]) = 0;
      v104.__r_.__value_.__s.__data_[12] = 1;
      v104.__r_.__value_.__r.__words[0] = v24;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v84 = 0;
      p_p = (void **)&v84;
      LOBYTE(v10CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      uint64_t v84 = (double *)operator new(0x10uLL);
      uint64_t v85 = v84;
      uint64_t v86 = (char *)(v84 + 2);
      uint64_t v85 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v86, (uint64_t *)&v104, (uint64_t *)&v104.__r_.__value_.__r.__words[2], (uint64_t)v84);
      switch(v104.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_53;
        case 3:
          goto LABEL_73;
        case 4:
          goto LABEL_61;
        case 5:
          goto LABEL_78;
        case 8:
          goto LABEL_82;
        case 9:
          goto LABEL_64;
        default:
          goto LABEL_87;
      }
      goto LABEL_87;
    case 2:
      v104.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v104.__r_.__value_.__r.__words[1]) = 0;
      v104.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t)&v104);
    case 3:
      std::string::size_type v7 = *(void *)v4;
      std::vector<turi::flexible_type>::vector(&v84, (uint64_t)(*(void *)(*(void *)v4 + 16) - *(void *)(*(void *)v4 + 8)) >> 3);
      uint64_t v8 = *(void *)(v7 + 8);
      if (*(void *)(v7 + 16) != v8)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          uint64_t v11 = (char *)&v84[v9];
          switch(BYTE4(v84[v9 + 1]))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v11;
                if (!*(void *)v11) {
                  goto LABEL_46;
                }
                if (*((char *)v12 + 31) < 0) {
                  operator delete((void *)v12[1]);
                }
                atomic_ullong *volatile v13 = v12;
                uint64_t v14 = 0x1012C404EF22A49;
                goto LABEL_45;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v11;
                if (!*(void *)v11) {
                  goto LABEL_46;
                }
                int v22 = (void *)v21[1];
                if (v22)
                {
                  v21[2] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                atomic_ullong *volatile v13 = v21;
                uint64_t v14 = 0x1080C409938AC02;
                goto LABEL_45;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v11;
                if (!*(void *)v11) {
                  goto LABEL_46;
                }
                p_p = (void **)(v15 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                goto LABEL_40;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v11;
                if (!*(void *)v11) {
                  goto LABEL_46;
                }
                p_p = (void **)(v15 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_40:
                atomic_ullong *volatile v13 = v15;
                uint64_t v14 = 0x1020C405E66F15BLL;
                goto LABEL_45;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v11;
                if (!*(void *)v11) {
                  goto LABEL_46;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v23 + 2);
                atomic_ullong *volatile v13 = v23;
                unsigned int v20 = -235920773;
                goto LABEL_44;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v11;
                if (*(void *)v11)
                {
                  uint64_t v17 = (void *)v16[6];
                  if (v17)
                  {
                    v16[7] = (atomic_ullong)v17;
                    operator delete(v17);
                  }
                  unint64_t v18 = (void *)v16[3];
                  if (v18)
                  {
                    void v16[4] = (atomic_ullong)v18;
                    operator delete(v18);
                  }
                  int v19 = (std::__shared_weak_count *)v16[2];
                  if (v19) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                  }
                  atomic_ullong *volatile v13 = v16;
                  unsigned int v20 = 2071181815;
LABEL_44:
                  uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_45:
                  MEMORY[0x22A614FA0](v13, v14);
                }
LABEL_46:
                *(void *)uint64_t v11 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)uint64_t v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          v11[12] = 1;
          *(void *)uint64_t v11 = *(void *)(v8 + 8 * v10++);
          uint64_t v8 = *(void *)(v7 + 8);
          v9 += 2;
        }
        while (v10 < (*(void *)(v7 + 16) - v8) >> 3);
      }
      goto LABEL_87;
    case 4:
      std::string::size_type v6 = *(void *)v4;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v84 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v84, *(uint64_t **)(v6 + 8), *(uint64_t **)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 4);
      goto LABEL_87;
    case 5:
      std::string::size_type v25 = *(void *)v4;
      uint64_t v100 = 0;
      *(void *)&long long v101 = 0;
      p_p = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&p_p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 5);
      turi::flexible_type_fail(0);
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      goto LABEL_87;
    case 6:
      double v26 = (double)((uint64_t)(*(void *)v4 << 8) >> 8);
      double v27 = (double)*(int *)(v4 + 8) / 1000000.0;
      LODWORD(v104.__r_.__value_.__r.__words[1]) = 0;
      v104.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v104.__r_.__value_.__l.__data_ = v27 + v26;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v84 = 0;
      p_p = (void **)&v84;
      LOBYTE(v10CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      uint64_t v84 = (double *)operator new(0x10uLL);
      uint64_t v85 = v84;
      uint64_t v86 = (char *)(v84 + 2);
      uint64_t v85 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v86, (uint64_t *)&v104, (uint64_t *)&v104.__r_.__value_.__r.__words[2], (uint64_t)v84);
      switch(v104.__r_.__value_.__s.__data_[12])
      {
        case 2:
LABEL_53:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v28 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v104.__r_.__value_.__r.__words[0] + 31) < 0) {
                operator delete(*(void **)(v104.__r_.__value_.__r.__words[0] + 8));
              }
              uint64_t v29 = (void *)v28;
              uint64_t v30 = 0x1012C404EF22A49;
              goto LABEL_86;
            }
          }
          break;
        case 3:
LABEL_73:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v41 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              uint64_t v42 = *(void **)(v104.__r_.__value_.__r.__words[0] + 8);
              if (v42)
              {
                *(void *)(v104.__r_.__value_.__r.__words[0] + 16) = v42;
                operator delete(v42);
              }
              uint64_t v29 = (void *)v41;
              uint64_t v30 = 0x1080C409938AC02;
              goto LABEL_86;
            }
          }
          break;
        case 4:
LABEL_61:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v35 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v104.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
              goto LABEL_81;
            }
          }
          break;
        case 5:
LABEL_78:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v35 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v104.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_81:
              uint64_t v29 = (void *)v35;
              uint64_t v30 = 0x1020C405E66F15BLL;
              goto LABEL_86;
            }
          }
          break;
        case 8:
LABEL_82:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v43 = v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v104.__r_.__value_.__r.__words[0] + 16));
              uint64_t v29 = (void *)v43;
              unsigned int v40 = -235920773;
              goto LABEL_85;
            }
          }
          break;
        case 9:
LABEL_64:
          if (atomic_fetch_add((atomic_ullong *volatile)v104.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v36 = (void *)v104.__r_.__value_.__r.__words[0];
            if (v104.__r_.__value_.__r.__words[0])
            {
              unsigned __int8 v37 = *(void **)(v104.__r_.__value_.__r.__words[0] + 48);
              if (v37)
              {
                *(void *)(v104.__r_.__value_.__r.__words[0] + 56) = v37;
                operator delete(v37);
              }
              uint64_t v38 = (void *)v36[3];
              if (v38)
              {
                v36[4] = v38;
                operator delete(v38);
              }
              uint64_t v39 = (std::__shared_weak_count *)v36[2];
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
              uint64_t v29 = v36;
              unsigned int v40 = 2071181815;
LABEL_85:
              uint64_t v30 = v40 | 0x1030C4000000000;
LABEL_86:
              MEMORY[0x22A614FA0](v29, v30);
            }
          }
          break;
        default:
          goto LABEL_87;
      }
      goto LABEL_87;
    case 7:
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      goto LABEL_87;
    case 8:
      std::string::size_type v31 = *(void *)v4;
      uint64_t v32 = *(atomic_uint **)(*(void *)v4 + 16);
      p_p = *(void ***)(*(void *)v4 + 8);
      uint64_t v100 = (std::__shared_weak_count *)v32;
      if (v32) {
        atomic_fetch_add_explicit(v32 + 2, 1u, memory_order_relaxed);
      }
      long long v33 = *(_OWORD *)(v31 + 24);
      long long v34 = *(_OWORD *)(v31 + 40);
      long long v103 = *(_OWORD *)(v31 + 56);
      long long v102 = v34;
      long long v101 = v33;
      turi::flexible_type_fail(0);
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v100);
      goto LABEL_87;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(void *)v4 + 8);
      turi::flexible_type_fail(0);
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      if (*((void *)&v102 + 1))
      {
        *(void *)&long long v103 = *((void *)&v102 + 1);
        operator delete(*((void **)&v102 + 1));
      }
      if ((void)v101)
      {
        *((void *)&v101 + 1) = v101;
        operator delete((void *)v101);
      }
      if (v100) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      }
LABEL_87:
      if (SBYTE7(v89) < 0) {
        operator delete(__p);
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v44 = v84;
      char v83 = v85;
      if (v84 != v85)
      {
        while (2)
        {
          double v45 = *v44;
          int v46 = *((unsigned __int8 *)v44 + 12) - 2;
          switch(*((unsigned char *)v44 + 12))
          {
            case 2:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              size_t __idx = 0;
              uint64_t v47 = (char *)(*(void *)&v45 + 8);
              if (*(char *)(*(void *)&v45 + 31) < 0) {
                uint64_t v47 = *(char **)(*(void *)&v45 + 8);
              }
              uint64_t v48 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v104, v47);
              LOBYTE(v49) = std::stoll(v48, &__idx, 10);
              if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v104.__r_.__value_.__l.__data_);
              }
              if (*(char *)(*(void *)&v45 + 31) < 0) {
                uint64_t v50 = *(void *)(*(void *)&v45 + 16);
              }
              else {
                uint64_t v50 = *(unsigned __int8 *)(*(void *)&v45 + 31);
              }
              if (__idx != v50)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                unsigned int v81 = std::string::append(&v97, " cannot be interpreted as an integer");
                long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                v104.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v82;
                v81->__r_.__value_.__l.__size_ = 0;
                v81->__r_.__value_.__r.__words[2] = 0;
                v81->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v104);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_113;
            case 3:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              uint64_t v95 = 0;
              uint64_t v96 = 0;
              unint64_t v94 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v94, *(const void **)(*(void *)&v45 + 8), *(void *)(*(void *)&v45 + 16), (uint64_t)(*(void *)(*(void *)&v45 + 16) - *(void *)(*(void *)&v45 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v94)
              {
                uint64_t v95 = v94;
                operator delete(v94);
              }
              goto LABEL_112;
            case 4:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              memset(v93, 0, sizeof(v93));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v93, *(uint64_t **)(*(void *)&v45 + 8), *(uint64_t **)(*(void *)&v45 + 16), (uint64_t)(*(void *)(*(void *)&v45 + 16) - *(void *)(*(void *)&v45 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
              goto LABEL_112;
            case 5:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              memset(v92, 0, sizeof(v92));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v92, *(uint64_t **)(*(void *)&v45 + 8), *(uint64_t **)(*(void *)&v45 + 16), (uint64_t)(*(void *)(*(void *)&v45 + 16) - *(void *)(*(void *)&v45 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
              goto LABEL_112;
            case 8:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              char v51 = *(atomic_uint **)(*(void *)&v45 + 16);
              std::string __p = *(void **)(*(void *)&v45 + 8);
              std::string v88 = v51;
              if (v51) {
                atomic_fetch_add_explicit(v51 + 2, 1u, memory_order_relaxed);
              }
              long long v52 = *(_OWORD *)(*(void *)&v45 + 24);
              long long v53 = *(_OWORD *)(*(void *)&v45 + 56);
              long long v90 = *(_OWORD *)(*(void *)&v45 + 40);
              long long v91 = v53;
              long long v89 = v52;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v88);
              goto LABEL_112;
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 1uLL);
              turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(void *)&v45 + 8);
              turi::flexible_type_fail(0);
              if (*((void *)&v102 + 1))
              {
                *(void *)&long long v103 = *((void *)&v102 + 1);
                operator delete(*((void **)&v102 + 1));
              }
              if ((void)v101)
              {
                *((void *)&v101 + 1) = v101;
                operator delete((void *)v101);
              }
              if (v100) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v100);
              }
LABEL_112:
              LOBYTE(v49) = 0;
LABEL_113:
              long long v55 = (unsigned char *)a2[1];
              unint64_t v54 = a2[2];
              if ((unint64_t)v55 >= v54)
              {
                unint64_t v57 = *a2;
                uint64_t v58 = &v55[-*a2];
                unint64_t v59 = (unint64_t)(v58 + 1);
                if ((uint64_t)(v58 + 1) < 0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v60 = v54 - v57;
                if (2 * v60 > v59) {
                  unint64_t v59 = 2 * v60;
                }
                if (v60 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v61 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v61 = v59;
                }
                if (v61) {
                  unint64_t v62 = (char *)operator new(v61);
                }
                else {
                  unint64_t v62 = 0;
                }
                uint64_t v63 = &v58[(void)v62];
                unint64_t v64 = &v58[(void)v62];
                *unint64_t v64 = v49;
                long long v56 = v64 + 1;
                if (v55 != (unsigned char *)v57)
                {
                  uint64_t v65 = &v55[~v57];
                  do
                  {
                    char v66 = *--v55;
                    (v65--)[(void)v62] = v66;
                  }
                  while (v55 != (unsigned char *)v57);
                  uint64_t v63 = v62;
                }
                *a2 = (unint64_t)v63;
                a2[1] = (unint64_t)v56;
                a2[2] = (unint64_t)&v62[v61];
                if (v57) {
                  operator delete((void *)v57);
                }
              }
              else
              {
                *long long v55 = v49;
                long long v56 = v55 + 1;
              }
              a2[1] = (unint64_t)v56;
              switch(v46)
              {
                case 0:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    if (*(char *)(*(void *)&v45 + 31) < 0) {
                      operator delete(*(void **)(*(void *)&v45 + 8));
                    }
                    double v68 = v45;
                    uint64_t v69 = 0x1012C404EF22A49;
                    goto LABEL_173;
                  }
                  break;
                case 1:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    uint64_t v77 = *(void **)(*(void *)&v45 + 8);
                    if (v77)
                    {
                      *(void *)(*(void *)&v45 + 16) = v77;
                      operator delete(v77);
                    }
                    double v68 = v45;
                    uint64_t v69 = 0x1080C409938AC02;
                    goto LABEL_173;
                  }
                  break;
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    p_p = (void **)(*(void *)&v45 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                    goto LABEL_166;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    p_p = (void **)(*(void *)&v45 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_166:
                    double v68 = v45;
                    uint64_t v69 = 0x1020C405E66F15BLL;
                    goto LABEL_173;
                  }
                  break;
                case 6:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v45 + 16));
                    double v68 = v45;
                    unsigned int v75 = -235920773;
                    goto LABEL_172;
                  }
                  break;
                case 7:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v45, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v45 != 0)
                  {
                    int v72 = *(void **)(*(void *)&v45 + 48);
                    if (v72)
                    {
                      *(void *)(*(void *)&v45 + 56) = v72;
                      operator delete(v72);
                    }
                    uint64_t v73 = *(void **)(*(void *)&v45 + 24);
                    if (v73)
                    {
                      *(void *)(*(void *)&v45 + 32) = v73;
                      operator delete(v73);
                    }
                    size_t v74 = *(std::__shared_weak_count **)(*(void *)&v45 + 16);
                    if (v74) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
                    }
                    double v68 = v45;
                    unsigned int v75 = 2071181815;
LABEL_172:
                    uint64_t v69 = v75 | 0x1030C4000000000;
LABEL_173:
                    MEMORY[0x22A614FA0](*(void *)&v68, v69);
                  }
                  break;
                default:
                  break;
              }
              v44 += 2;
              if (v44 == v83) {
                break;
              }
              continue;
            default:
              LOBYTE(v49) = 0;
              switch(*((unsigned char *)v44 + 12))
              {
                case 0:
                  uint64_t v49 = *(void *)v44;
                  goto LABEL_113;
                case 1:
                  uint64_t v49 = (uint64_t)v45;
                  goto LABEL_113;
                case 6:
                  uint64_t v49 = (uint64_t)(*(void *)&v45 << 8) >> 8;
                  goto LABEL_113;
                case 7:
                  goto LABEL_113;
                default:
                  turi::flexible_type_fail(0);
                  goto LABEL_186;
              }
          }
          break;
        }
      }
      p_p = (void **)&v84;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_186:
      __break(1u);
      break;
  }
}

void sub_22400BB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, _Unwind_Exception *exception_object, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
  switch(*(unsigned char *)(v40 - 116))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v41 = *(void *)(v40 - 128);
      if (!v41) {
        goto LABEL_27;
      }
      if (*(char *)(v41 + 31) < 0) {
        operator delete(*(void **)(v41 + 8));
      }
      uint64_t v42 = (void *)v41;
      uint64_t v43 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void **)(v40 - 128);
      if (!v44) {
        goto LABEL_27;
      }
      double v45 = (void *)v44[1];
      if (v45)
      {
        v44[2] = v45;
        operator delete(v45);
      }
      uint64_t v42 = v44;
      uint64_t v43 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v46 = *(void **)(v40 - 128);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v40 - 20CoreML::Specification::AdamOptimizer::New(this, 0) = v46 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v46 = *(void **)(v40 - 128);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v40 - 20CoreML::Specification::AdamOptimizer::New(this, 0) = v46 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
LABEL_18:
      uint64_t v42 = v46;
      uint64_t v43 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v47 = *(void *)(v40 - 128);
      if (!v47) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v47 + 16));
      uint64_t v42 = (void *)v47;
      unsigned int v48 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v49 = *(void **)(v40 - 128);
      if (!v49) {
        goto LABEL_27;
      }
      uint64_t v42 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v49);
      unsigned int v48 = 2071181815;
LABEL_25:
      uint64_t v43 = v48 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v42, v43);
LABEL_27:
      if (a20 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  std::string::size_type v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  std::string::size_type v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  std::string::size_type v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  atomic_ullong *volatile v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v29.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v29.__r_.__value_.__l.__data_) == 8)
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v8 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v23, "output_type");
    __p[0] = v23;
    std::string::size_type v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v8) = 0;
    switch(*((unsigned char *)v7 + 68))
    {
      case 0:
        uint64_t v8 = *((void *)v7 + 7);
        goto LABEL_29;
      case 1:
        uint64_t v8 = (uint64_t)*((double *)v7 + 7);
        goto LABEL_29;
      case 2:
        uint64_t v10 = *((void *)v7 + 7);
        size_t __idx = 0;
        uint64_t v11 = (char *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0) {
          uint64_t v11 = *(char **)(v10 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v10 + 31) < 0) {
          uint64_t v12 = *(void *)(v10 + 16);
        }
        else {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 31);
        }
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          atomic_ullong *volatile v21 = std::string::append(&v29, " cannot be interpreted as an integer");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          *(void *)&long long v26 = *((void *)&v21->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_29;
      case 3:
        uint64_t v9 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_28;
      case 4:
        uint64_t v13 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 5:
        uint64_t v14 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 6:
        uint64_t v8 = (uint64_t)(*((void *)v7 + 7) << 8) >> 8;
        goto LABEL_29;
      case 7:
        goto LABEL_29;
      case 8:
        uint64_t v15 = *((void *)v7 + 7);
        atomic_ullong *volatile v16 = *(atomic_uint **)(v15 + 16);
        __p[0] = *(void **)(v15 + 8);
        __p[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
        }
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 56);
        long long v27 = *(_OWORD *)(v15 + 40);
        long long v28 = v18;
        long long v26 = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_28;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v7 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v27 + 1))
        {
          *(void *)&long long v28 = *((void *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if ((void)v26)
        {
          *((void *)&v26 + 1) = v26;
          operator delete((void *)v26);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_28:
        LOBYTE(v8) = 0;
LABEL_29:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        int v19 = operator new(1uLL);
        *a2 = v19;
        *v19++ = v8;
        a2[1] = v19;
        a2[2] = v19;
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        return;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v29;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_22400C970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  std::string::size_type v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400CC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(uint64_t ***a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LODWORD(__p) = *(_DWORD *)*a1;
  if (__p != 10)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "output_types");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 1), (const void **)&p_p);
  if (SBYTE7(v104) < 0) {
    operator delete(p_p);
  }
  if (!v5) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_types");
  p_p = &__p;
  char v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  switch(*((unsigned char *)v7 + 68))
  {
    case 0:
      std::string::size_type v8 = *((void *)v7 + 7);
      v107.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v107.__r_.__value_.__r.__words[1]) = 0;
      v107.__r_.__value_.__r.__words[0] = v8;
      std::string v88 = 0;
      long long v89 = 0;
      uint64_t v87 = 0;
      p_p = (void **)&v87;
      LOBYTE(v103) = 0;
      uint64_t v87 = (double *)operator new(0x10uLL);
      std::string v88 = v87;
      long long v89 = (char *)(v87 + 2);
      std::string v88 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v89, (uint64_t *)&v107, (uint64_t *)&v107.__r_.__value_.__r.__words[2], (uint64_t)v87);
      switch(v107.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_56;
        case 3:
          goto LABEL_76;
        case 4:
          goto LABEL_64;
        case 5:
          goto LABEL_81;
        case 8:
          goto LABEL_85;
        case 9:
          goto LABEL_67;
        default:
          goto LABEL_90;
      }
      goto LABEL_90;
    case 1:
      std::string::size_type v27 = *((void *)v7 + 7);
      LODWORD(v107.__r_.__value_.__r.__words[1]) = 0;
      v107.__r_.__value_.__s.__data_[12] = 1;
      v107.__r_.__value_.__r.__words[0] = v27;
      std::string v88 = 0;
      long long v89 = 0;
      uint64_t v87 = 0;
      p_p = (void **)&v87;
      LOBYTE(v103) = 0;
      uint64_t v87 = (double *)operator new(0x10uLL);
      std::string v88 = v87;
      long long v89 = (char *)(v87 + 2);
      std::string v88 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v89, (uint64_t *)&v107, (uint64_t *)&v107.__r_.__value_.__r.__words[2], (uint64_t)v87);
      switch(v107.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_56;
        case 3:
          goto LABEL_76;
        case 4:
          goto LABEL_64;
        case 5:
          goto LABEL_81;
        case 8:
          goto LABEL_85;
        case 9:
          goto LABEL_67;
        default:
          goto LABEL_90;
      }
      goto LABEL_90;
    case 2:
      v107.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v107.__r_.__value_.__r.__words[1]) = 0;
      v107.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t)&v107);
    case 3:
      uint64_t v10 = *((void *)v7 + 7);
      std::vector<turi::flexible_type>::vector(&v87, (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
      uint64_t v11 = *(void *)(v10 + 8);
      if (*(void *)(v10 + 16) != v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = (char *)&v87[v12];
          switch(BYTE4(v87[v12 + 1]))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v14;
                if (!*(void *)v14) {
                  goto LABEL_49;
                }
                if (*((char *)v15 + 31) < 0) {
                  operator delete((void *)v15[1]);
                }
                atomic_ullong *volatile v16 = v15;
                uint64_t v17 = 0x1012C404EF22A49;
                goto LABEL_48;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v14;
                if (!*(void *)v14) {
                  goto LABEL_49;
                }
                std::string::size_type v25 = (void *)v24[1];
                if (v25)
                {
                  v24[2] = (atomic_ullong)v25;
                  operator delete(v25);
                }
                atomic_ullong *volatile v16 = v24;
                uint64_t v17 = 0x1080C409938AC02;
                goto LABEL_48;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v14;
                if (!*(void *)v14) {
                  goto LABEL_49;
                }
                p_p = (void **)(v18 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                goto LABEL_43;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v14;
                if (!*(void *)v14) {
                  goto LABEL_49;
                }
                p_p = (void **)(v18 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_43:
                atomic_ullong *volatile v16 = v18;
                uint64_t v17 = 0x1020C405E66F15BLL;
                goto LABEL_48;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v14;
                if (!*(void *)v14) {
                  goto LABEL_49;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
                atomic_ullong *volatile v16 = v26;
                unsigned int v23 = -235920773;
                goto LABEL_47;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v14;
                if (*(void *)v14)
                {
                  unsigned int v20 = (void *)v19[6];
                  if (v20)
                  {
                    v19[7] = (atomic_ullong)v20;
                    operator delete(v20);
                  }
                  atomic_ullong *volatile v21 = (void *)v19[3];
                  if (v21)
                  {
                    void v19[4] = (atomic_ullong)v21;
                    operator delete(v21);
                  }
                  int v22 = (std::__shared_weak_count *)v19[2];
                  if (v22) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                  }
                  atomic_ullong *volatile v16 = v19;
                  unsigned int v23 = 2071181815;
LABEL_47:
                  uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_48:
                  MEMORY[0x22A614FA0](v16, v17);
                }
LABEL_49:
                *(void *)uint64_t v14 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)uint64_t v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          v14[12] = 1;
          *(void *)uint64_t v14 = *(void *)(v11 + 8 * v13++);
          uint64_t v11 = *(void *)(v10 + 8);
          v12 += 2;
        }
        while (v13 < (*(void *)(v10 + 16) - v11) >> 3);
      }
      goto LABEL_90;
    case 4:
      uint64_t v9 = *((void *)v7 + 7);
      std::string v88 = 0;
      long long v89 = 0;
      uint64_t v87 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v87, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      goto LABEL_90;
    case 5:
      uint64_t v28 = *((void *)v7 + 7);
      long long v103 = 0;
      *(void *)&long long v104 = 0;
      p_p = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&p_p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 5);
      turi::flexible_type_fail(0);
      uint64_t v87 = 0;
      std::string v88 = 0;
      long long v89 = 0;
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
      goto LABEL_90;
    case 6:
      double v29 = (double)((uint64_t)(*((void *)v7 + 7) << 8) >> 8);
      double v30 = (double)*((int *)v7 + 16) / 1000000.0;
      LODWORD(v107.__r_.__value_.__r.__words[1]) = 0;
      v107.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v107.__r_.__value_.__l.__data_ = v30 + v29;
      std::string v88 = 0;
      long long v89 = 0;
      uint64_t v87 = 0;
      p_p = (void **)&v87;
      LOBYTE(v103) = 0;
      uint64_t v87 = (double *)operator new(0x10uLL);
      std::string v88 = v87;
      long long v89 = (char *)(v87 + 2);
      std::string v88 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v89, (uint64_t *)&v107, (uint64_t *)&v107.__r_.__value_.__r.__words[2], (uint64_t)v87);
      switch(v107.__r_.__value_.__s.__data_[12])
      {
        case 2:
LABEL_56:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v31 = v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v107.__r_.__value_.__r.__words[0] + 31) < 0) {
                operator delete(*(void **)(v107.__r_.__value_.__r.__words[0] + 8));
              }
              uint64_t v32 = (void *)v31;
              uint64_t v33 = 0x1012C404EF22A49;
              goto LABEL_89;
            }
          }
          break;
        case 3:
LABEL_76:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v44 = v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              double v45 = *(void **)(v107.__r_.__value_.__r.__words[0] + 8);
              if (v45)
              {
                *(void *)(v107.__r_.__value_.__r.__words[0] + 16) = v45;
                operator delete(v45);
              }
              uint64_t v32 = (void *)v44;
              uint64_t v33 = 0x1080C409938AC02;
              goto LABEL_89;
            }
          }
          break;
        case 4:
LABEL_64:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v38 = v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v107.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
              goto LABEL_84;
            }
          }
          break;
        case 5:
LABEL_81:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v38 = v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v107.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_84:
              uint64_t v32 = (void *)v38;
              uint64_t v33 = 0x1020C405E66F15BLL;
              goto LABEL_89;
            }
          }
          break;
        case 8:
LABEL_85:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v46 = v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v107.__r_.__value_.__r.__words[0] + 16));
              uint64_t v32 = (void *)v46;
              unsigned int v43 = -235920773;
              goto LABEL_88;
            }
          }
          break;
        case 9:
LABEL_67:
          if (atomic_fetch_add((atomic_ullong *volatile)v107.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v39 = (void *)v107.__r_.__value_.__r.__words[0];
            if (v107.__r_.__value_.__r.__words[0])
            {
              uint64_t v40 = *(void **)(v107.__r_.__value_.__r.__words[0] + 48);
              if (v40)
              {
                *(void *)(v107.__r_.__value_.__r.__words[0] + 56) = v40;
                operator delete(v40);
              }
              uint64_t v41 = (void *)v39[3];
              if (v41)
              {
                v39[4] = v41;
                operator delete(v41);
              }
              uint64_t v42 = (std::__shared_weak_count *)v39[2];
              if (v42) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v42);
              }
              uint64_t v32 = v39;
              unsigned int v43 = 2071181815;
LABEL_88:
              uint64_t v33 = v43 | 0x1030C4000000000;
LABEL_89:
              MEMORY[0x22A614FA0](v32, v33);
            }
          }
          break;
        default:
          goto LABEL_90;
      }
      goto LABEL_90;
    case 7:
      uint64_t v87 = 0;
      std::string v88 = 0;
      long long v89 = 0;
      goto LABEL_90;
    case 8:
      uint64_t v34 = *((void *)v7 + 7);
      std::string::size_type v35 = *(atomic_uint **)(v34 + 16);
      p_p = *(void ***)(v34 + 8);
      long long v103 = (std::__shared_weak_count *)v35;
      if (v35) {
        atomic_fetch_add_explicit(v35 + 2, 1u, memory_order_relaxed);
      }
      long long v36 = *(_OWORD *)(v34 + 24);
      long long v37 = *(_OWORD *)(v34 + 40);
      long long v106 = *(_OWORD *)(v34 + 56);
      long long v105 = v37;
      long long v104 = v36;
      turi::flexible_type_fail(0);
      uint64_t v87 = 0;
      std::string v88 = 0;
      long long v89 = 0;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v103);
      goto LABEL_90;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *((void *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      uint64_t v87 = 0;
      std::string v88 = 0;
      long long v89 = 0;
      if (*((void *)&v105 + 1))
      {
        *(void *)&long long v106 = *((void *)&v105 + 1);
        operator delete(*((void **)&v105 + 1));
      }
      if ((void)v104)
      {
        *((void *)&v104 + 1) = v104;
        operator delete((void *)v104);
      }
      if (v103) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v103);
      }
LABEL_90:
      if (SBYTE7(v92) < 0) {
        operator delete(__p);
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v47 = v87;
      uint64_t v86 = v88;
      if (v87 != v88)
      {
        while (2)
        {
          double v48 = *v47;
          int v49 = *((unsigned __int8 *)v47 + 12) - 2;
          switch(*((unsigned char *)v47 + 12))
          {
            case 2:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              size_t __idx = 0;
              uint64_t v50 = (char *)(*(void *)&v48 + 8);
              if (*(char *)(*(void *)&v48 + 31) < 0) {
                uint64_t v50 = *(char **)(*(void *)&v48 + 8);
              }
              char v51 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v107, v50);
              LOBYTE(v52) = std::stoll(v51, &__idx, 10);
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v107.__r_.__value_.__l.__data_);
              }
              if (*(char *)(*(void *)&v48 + 31) < 0) {
                uint64_t v53 = *(void *)(*(void *)&v48 + 16);
              }
              else {
                uint64_t v53 = *(unsigned __int8 *)(*(void *)&v48 + 31);
              }
              if (__idx != v53)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v84 = std::string::append(&v100, " cannot be interpreted as an integer");
                long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                v107.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v85;
                v84->__r_.__value_.__l.__size_ = 0;
                v84->__r_.__value_.__r.__words[2] = 0;
                v84->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v107);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_116;
            case 3:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              unsigned int v98 = 0;
              uint64_t v99 = 0;
              std::string v97 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v97, *(const void **)(*(void *)&v48 + 8), *(void *)(*(void *)&v48 + 16), (uint64_t)(*(void *)(*(void *)&v48 + 16) - *(void *)(*(void *)&v48 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v97)
              {
                unsigned int v98 = v97;
                operator delete(v97);
              }
              goto LABEL_115;
            case 4:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              memset(v96, 0, sizeof(v96));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v96, *(uint64_t **)(*(void *)&v48 + 8), *(uint64_t **)(*(void *)&v48 + 16), (uint64_t)(*(void *)(*(void *)&v48 + 16) - *(void *)(*(void *)&v48 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
              goto LABEL_115;
            case 5:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              memset(v95, 0, sizeof(v95));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v95, *(uint64_t **)(*(void *)&v48 + 8), *(uint64_t **)(*(void *)&v48 + 16), (uint64_t)(*(void *)(*(void *)&v48 + 16) - *(void *)(*(void *)&v48 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
              goto LABEL_115;
            case 8:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              unint64_t v54 = *(atomic_uint **)(*(void *)&v48 + 16);
              std::string __p = *(void **)(*(void *)&v48 + 8);
              long long v91 = v54;
              if (v54) {
                atomic_fetch_add_explicit(v54 + 2, 1u, memory_order_relaxed);
              }
              long long v55 = *(_OWORD *)(*(void *)&v48 + 24);
              long long v56 = *(_OWORD *)(*(void *)&v48 + 56);
              long long v93 = *(_OWORD *)(*(void *)&v48 + 40);
              long long v94 = v56;
              long long v92 = v55;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v91);
              goto LABEL_115;
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 1uLL);
              turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(void *)&v48 + 8);
              turi::flexible_type_fail(0);
              if (*((void *)&v105 + 1))
              {
                *(void *)&long long v106 = *((void *)&v105 + 1);
                operator delete(*((void **)&v105 + 1));
              }
              if ((void)v104)
              {
                *((void *)&v104 + 1) = v104;
                operator delete((void *)v104);
              }
              if (v103) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v103);
              }
LABEL_115:
              LOBYTE(v52) = 0;
LABEL_116:
              uint64_t v58 = (unsigned char *)a2[1];
              unint64_t v57 = a2[2];
              if ((unint64_t)v58 >= v57)
              {
                unint64_t v60 = *a2;
                size_t v61 = &v58[-*a2];
                unint64_t v62 = (unint64_t)(v61 + 1);
                if ((uint64_t)(v61 + 1) < 0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v63 = v57 - v60;
                if (2 * v63 > v62) {
                  unint64_t v62 = 2 * v63;
                }
                if (v63 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v64 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v64 = v62;
                }
                if (v64) {
                  uint64_t v65 = (char *)operator new(v64);
                }
                else {
                  uint64_t v65 = 0;
                }
                char v66 = &v61[(void)v65];
                uint64_t v67 = &v61[(void)v65];
                *uint64_t v67 = v52;
                unint64_t v59 = v67 + 1;
                if (v58 != (unsigned char *)v60)
                {
                  double v68 = &v58[~v60];
                  do
                  {
                    char v69 = *--v58;
                    (v68--)[(void)v65] = v69;
                  }
                  while (v58 != (unsigned char *)v60);
                  char v66 = v65;
                }
                *a2 = (unint64_t)v66;
                a2[1] = (unint64_t)v59;
                a2[2] = (unint64_t)&v65[v64];
                if (v60) {
                  operator delete((void *)v60);
                }
              }
              else
              {
                *uint64_t v58 = v52;
                unint64_t v59 = v58 + 1;
              }
              a2[1] = (unint64_t)v59;
              switch(v49)
              {
                case 0:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    if (*(char *)(*(void *)&v48 + 31) < 0) {
                      operator delete(*(void **)(*(void *)&v48 + 8));
                    }
                    double v71 = v48;
                    uint64_t v72 = 0x1012C404EF22A49;
                    goto LABEL_176;
                  }
                  break;
                case 1:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    int v80 = *(void **)(*(void *)&v48 + 8);
                    if (v80)
                    {
                      *(void *)(*(void *)&v48 + 16) = v80;
                      operator delete(v80);
                    }
                    double v71 = v48;
                    uint64_t v72 = 0x1080C409938AC02;
                    goto LABEL_176;
                  }
                  break;
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    p_p = (void **)(*(void *)&v48 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                    goto LABEL_169;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    p_p = (void **)(*(void *)&v48 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_169:
                    double v71 = v48;
                    uint64_t v72 = 0x1020C405E66F15BLL;
                    goto LABEL_176;
                  }
                  break;
                case 6:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v48 + 16));
                    double v71 = v48;
                    unsigned int v78 = -235920773;
                    goto LABEL_175;
                  }
                  break;
                case 7:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v48, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v48 != 0)
                  {
                    unsigned int v75 = *(void **)(*(void *)&v48 + 48);
                    if (v75)
                    {
                      *(void *)(*(void *)&v48 + 56) = v75;
                      operator delete(v75);
                    }
                    unint64_t v76 = *(void **)(*(void *)&v48 + 24);
                    if (v76)
                    {
                      *(void *)(*(void *)&v48 + 32) = v76;
                      operator delete(v76);
                    }
                    uint64_t v77 = *(std::__shared_weak_count **)(*(void *)&v48 + 16);
                    if (v77) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                    }
                    double v71 = v48;
                    unsigned int v78 = 2071181815;
LABEL_175:
                    uint64_t v72 = v78 | 0x1030C4000000000;
LABEL_176:
                    MEMORY[0x22A614FA0](*(void *)&v71, v72);
                  }
                  break;
                default:
                  break;
              }
              v47 += 2;
              if (v47 == v86) {
                break;
              }
              continue;
            default:
              LOBYTE(v52) = 0;
              switch(*((unsigned char *)v47 + 12))
              {
                case 0:
                  uint64_t v52 = *(void *)v47;
                  goto LABEL_116;
                case 1:
                  uint64_t v52 = (uint64_t)v48;
                  goto LABEL_116;
                case 6:
                  uint64_t v52 = (uint64_t)(*(void *)&v48 << 8) >> 8;
                  goto LABEL_116;
                case 7:
                  goto LABEL_116;
                default:
                  turi::flexible_type_fail(0);
                  goto LABEL_190;
              }
          }
          break;
        }
      }
      p_p = (void **)&v87;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_190:
      __break(1u);
      break;
  }
}

void sub_22400DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, _Unwind_Exception *exception_object, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
  switch(*(unsigned char *)(v40 - 116))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v41 = *(void *)(v40 - 128);
      if (!v41) {
        goto LABEL_27;
      }
      if (*(char *)(v41 + 31) < 0) {
        operator delete(*(void **)(v41 + 8));
      }
      uint64_t v42 = (void *)v41;
      uint64_t v43 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::string::size_type v44 = *(void **)(v40 - 128);
      if (!v44) {
        goto LABEL_27;
      }
      double v45 = (void *)v44[1];
      if (v45)
      {
        v44[2] = v45;
        operator delete(v45);
      }
      uint64_t v42 = v44;
      uint64_t v43 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::string::size_type v46 = *(void **)(v40 - 128);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v40 - 20CoreML::Specification::AdamOptimizer::New(this, 0) = v46 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::string::size_type v46 = *(void **)(v40 - 128);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v40 - 20CoreML::Specification::AdamOptimizer::New(this, 0) = v46 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
LABEL_18:
      uint64_t v42 = v46;
      uint64_t v43 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v47 = *(void *)(v40 - 128);
      if (!v47) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v47 + 16));
      uint64_t v42 = (void *)v47;
      unsigned int v48 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v49 = *(void **)(v40 - 128);
      if (!v49) {
        goto LABEL_27;
      }
      uint64_t v42 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v49);
      unsigned int v48 = 2071181815;
LABEL_25:
      uint64_t v43 = v48 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v42, v43);
LABEL_27:
      if (a20 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 127, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400E65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_types\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 128, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400E85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(_DWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(p_p) = **a1;
  if (p_p != 11)
  {
    std::string __p = &p_p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = v3 + 14;
  uint64_t v4 = (void *)*((void *)v3 + 7);
  uint64_t v6 = *((void *)v5 + 1) - (void)v4;
  std::string __p = (void *)(v6 >> 4);
  if (!v6)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::size_type v8 = (std::__shared_weak_count *)v4[1];
  v16[0] = *v4;
  v16[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type((void *)a2, v16);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *((void *)*a1 + 7);
  if ((unint64_t)(*((void *)*a1 + 8) - v9) >= 0x11)
  {
    unint64_t v10 = 1;
    do
    {
      long long v11 = *(_OWORD *)(v9 + 16 * v10);
      long long v13 = v11;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v11 + 1);
      if (*((void *)&v11 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::infer_planner_node_type(&__p, &v13);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>(a2, *(char **)(a2 + 8), (char *)__p, v15, v15 - (unsigned char *)__p);
      if (__p)
      {
        char v15 = (char *)__p;
        operator delete(__p);
      }
      ++v10;
      uint64_t v9 = *((void *)*a1 + 7);
    }
    while (v10 < (*((void *)*a1 + 8) - v9) >> 4);
  }
}

void sub_22400EAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400EC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 125, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

char *std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  char v7 = __src;
  unint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    long long v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    long long v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      atomic_ullong *volatile v16 = operator new(v15);
    }
    else {
      atomic_ullong *volatile v16 = 0;
    }
    atomic_ullong *volatile v26 = &v13[(void)v16];
    std::string::size_type v27 = &v13[(void)v16 + v6];
    int64_t v28 = (unsigned char *)v16 - v11;
    do
    {
      char v29 = *v7++;
      v5[v28++] = v29;
      --v6;
    }
    while (v6);
    double v30 = &v13[(void)v16];
    if (v11 != v5)
    {
      do
      {
        v13[(void)v16 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      double v30 = (char *)v16;
    }
    std::string::size_type v31 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v11) {
      operator delete(v11);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    atomic_ullong *volatile v18 = &__src[a5];
    unsigned int v20 = *(char **)(a1 + 8);
LABEL_17:
    atomic_ullong *volatile v21 = &v5[v6];
    int v22 = &v20[-v6];
    unsigned int v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      unsigned int v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  atomic_ullong *volatile v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unsigned int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v29.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v29.__r_.__value_.__l.__data_) == 13)
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v8 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v23, "output_type");
    __p[0] = v23;
    char v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v8) = 0;
    switch(*((unsigned char *)v7 + 68))
    {
      case 0:
        uint64_t v8 = *((void *)v7 + 7);
        goto LABEL_29;
      case 1:
        uint64_t v8 = (uint64_t)*((double *)v7 + 7);
        goto LABEL_29;
      case 2:
        uint64_t v10 = *((void *)v7 + 7);
        size_t __idx = 0;
        long long v11 = (char *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0) {
          long long v11 = *(char **)(v10 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v10 + 31) < 0) {
          uint64_t v12 = *(void *)(v10 + 16);
        }
        else {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 31);
        }
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          atomic_ullong *volatile v21 = std::string::append(&v29, " cannot be interpreted as an integer");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          *(void *)&long long v26 = *((void *)&v21->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_29;
      case 3:
        uint64_t v9 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_28;
      case 4:
        uint64_t v13 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 5:
        uint64_t v14 = *((void *)v7 + 7);
        __p[1] = 0;
        *(void *)&long long v26 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        goto LABEL_28;
      case 6:
        uint64_t v8 = (uint64_t)(*((void *)v7 + 7) << 8) >> 8;
        goto LABEL_29;
      case 7:
        goto LABEL_29;
      case 8:
        uint64_t v15 = *((void *)v7 + 7);
        atomic_ullong *volatile v16 = *(atomic_uint **)(v15 + 16);
        __p[0] = *(void **)(v15 + 8);
        __p[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
        }
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 56);
        long long v27 = *(_OWORD *)(v15 + 40);
        long long v28 = v18;
        long long v26 = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_28;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v7 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v27 + 1))
        {
          *(void *)&long long v28 = *((void *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if ((void)v26)
        {
          *((void *)&v26 + 1) = v26;
          operator delete((void *)v26);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_28:
        LOBYTE(v8) = 0;
LABEL_29:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        int64_t v19 = operator new(1uLL);
        *a2 = v19;
        *v19++ = v8;
        a2[1] = v19;
        a2[2] = v19;
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        return;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v29;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_22400F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::REDUCE_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400F84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400FA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(__p[0]) = **a1;
  if (LODWORD(__p[0]) != 12)
  {
    v26[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  v26[0] = v4 >> 4;
  if (!v4)
  {
    __p[0] = v26;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::vector<std::vector<turi::flex_type_enum>>::vector(v26, v4 >> 4);
  uint64_t v6 = *a1;
  uint64_t v7 = *((void *)*a1 + 7);
  if (*((void *)*a1 + 8) != v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      long long v10 = *(_OWORD *)(v7 + 16 * v9);
      long long v23 = v10;
      long long v11 = (std::__shared_weak_count *)*((void *)&v10 + 1);
      if (*((void *)&v10 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::infer_planner_node_type(__p, &v23);
      uint64_t v12 = (void *)(v26[0] + v8);
      uint64_t v13 = *(void **)(v26[0] + v8);
      if (v13)
      {
        v12[1] = v13;
        operator delete(v13);
        *uint64_t v12 = 0;
        v12[1] = 0;
        void v12[2] = 0;
      }
      *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
      void v12[2] = v25;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v25 = 0;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      ++v9;
      uint64_t v6 = *a1;
      uint64_t v7 = *((void *)*a1 + 7);
      v8 += 24;
    }
    while (v9 < (*((void *)*a1 + 8) - v7) >> 4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  uint64_t v14 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v6 + 2), (const void **)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  std::vector<turi::flex_type_enum>::vector(a2, (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v16 = *(void *)(v14 + 16) - v15;
  if (v16)
  {
    unint64_t v17 = v16 >> 5;
    uint64_t v18 = v26[0];
    int64_t v19 = (unsigned char *)*a2;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    unsigned int v20 = (uint64_t *)(v15 + 16);
    do
    {
      uint64_t v21 = 24 * *(v20 - 2);
      uint64_t v22 = *v20;
      v20 += 4;
      *v19++ = *(unsigned char *)(*(void *)(v18 + v21) + v22);
      --v17;
    }
    while (v17);
  }
  __p[0] = v26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22400FD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::string __p = &a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 137, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22400FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224010190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<turi::flex_type_enum>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_224010324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(int **a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *a1;
  int v6 = **a1;
  if (v6 != 14)
  {
    uint64_t v5[2] = &v6;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = *((void *)v2 + 7);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 24);
  v5[0] = *(void *)(v3 + 16);
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(a2, v5);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_2240103D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 158, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224010574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v2 = *(void **)(*(void *)a1 + 56);
  uint64_t v3 = *(void *)(*(void *)a1 + 64) - (void)v2;
  uint64_t v6 = v3 >> 4;
  if (v3 != 16)
  {
    uint64_t v5[2] = &v6;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  v5[0] = *v2;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(a2, v5);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224010714(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240108B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::any::any<std::vector<turi::flex_type_enum>>()
{
}

void sub_224010A3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::~holder(void *a1)
{
  *a1 = &unk_26D768AB8;
  size_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void turi::any::holder<std::vector<turi::flex_type_enum>>::~holder(void *a1)
{
  *a1 = &unk_26D768AB8;
  size_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::type()
{
}

void turi::any::holder<std::vector<turi::flex_type_enum>>::clone()
{
}

void sub_224010B9C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::vector<turi::flex_type_enum>>::deserializer_id()
{
  return turi::any::holder<std::vector<turi::flex_type_enum>>::registry;
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::deep_op_equal(void *result, uint64_t a2)
{
  if (result != (void *)a2) {
    return std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(result + 1, *(char **)(a2 + 8), *(char **)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  }
  return result;
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::save(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = v4[5];
    if (v4[4] + 8 > v5)
    {
      size_t v8 = 2 * v5 + 16;
      void v4[5] = v8;
      unint64_t v9 = (char **)v4[2];
      if (v9)
      {
        uint64_t v6 = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append((std::vector<char> *)v4[2], v12);
          uint64_t v6 = *(char **)v4[2];
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc((void *)v4[3], v8, 0xF6EA6B1uLL);
      }
      v4[3] = v6;
    }
    else
    {
      uint64_t v6 = (char *)v4[3];
    }
    *(void *)&v6[v4[4]] = turi::any::holder<std::vector<turi::flex_type_enum>>::registry;
    v4[4] += 8;
  }
  return turi::archive_detail::vector_serialize_impl<turi::oarchive_soft_fail,turi::flex_type_enum,true>::exec(a2, (const void **)(a1 + 8));
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::print(uint64_t a1, void *a2)
{
  return a2;
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive_soft_fail,turi::flex_type_enum,true>::exec(void *a1, const void **a2)
{
  int64_t v4 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  unint64_t v5 = (void *)*a1;
  if (*(void *)*a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = v5[5];
    if (v5[4] + 8 > v6)
    {
      size_t v14 = 2 * v6 + 16;
      v5[5] = v14;
      char v15 = (char **)v5[2];
      if (v15)
      {
        uint64_t v7 = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append((std::vector<char> *)v5[2], v18);
          uint64_t v7 = *(char **)v5[2];
        }
        else if (!v17)
        {
          v15[1] = &v7[v14];
        }
      }
      else
      {
        uint64_t v7 = (char *)malloc_type_realloc((void *)v5[3], v14, 0xF6EA6B1uLL);
      }
      void v5[3] = v7;
    }
    else
    {
      uint64_t v7 = (char *)v5[3];
    }
    *(void *)&v7[v5[4]] = v4;
    v5[4] += 8;
  }
  size_t v8 = *a2;
  size_t v9 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  size_t v10 = (void *)*a1;
  if (*v10) {
    return (void *)std::ostream::write();
  }
  size_t v12 = v10[5];
  if (v10[4] + v9 > v12)
  {
    size_t v19 = 2 * (v12 + v9);
    void v10[5] = v19;
    unsigned int v20 = (char **)v10[2];
    if (v20)
    {
      uint64_t v13 = *v20;
      size_t v21 = v20[1] - *v20;
      BOOL v22 = v19 >= v21;
      std::vector<char>::size_type v23 = v19 - v21;
      if (v23 != 0 && v22)
      {
        std::vector<char>::__append((std::vector<char> *)v10[2], v23);
        uint64_t v13 = *(char **)v10[2];
      }
      else if (!v22)
      {
        v20[1] = &v13[v19];
      }
    }
    else
    {
      uint64_t v13 = (char *)malloc_type_realloc((void *)v10[3], v19, 0xF6EA6B1uLL);
    }
    v10[3] = v13;
  }
  else
  {
    uint64_t v13 = (char *)v10[3];
  }
  uint64_t result = memcpy(&v13[v10[4]], v8, v9);
  v10[4] += v9;
  return result;
}

void *turi::operator<<<turi::flex_type_enum>(void *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "[");
  std::string::basic_string[abi:ne180100]<0>(v8, ", ");
  std::string::basic_string[abi:ne180100]<0>(__p, "]");
  int64_t v4 = turi::print_range<std::vector<turi::flex_type_enum>>(a1, a2, (uint64_t)v10, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return v4;
}

void sub_224010F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *turi::print_range<std::vector<turi::flex_type_enum>>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  uint64_t v12 = *a2;
  while (v12 != a2[1])
  {
    ++v12;
    std::ostream::operator<<();
    if (v12 == a2[1]) {
      break;
    }
    int v13 = *(char *)(a4 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = *(void *)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v14, v15);
  }
  int v16 = *(char *)(a5 + 23);
  if (v16 >= 0) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = *(void *)a5;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v18 = *(void *)(a5 + 8);
  }
  size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  unsigned int v20 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_224011104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::any::holder<std::vector<turi::flex_type_enum>>::deserialize()
{
}

void sub_224011160(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::vector<turi::flex_type_enum>>::holder(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_26D768AB8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive_soft_fail,turi::flex_type_enum,true>::exec(a2, (void **)(a1 + 8));
  return a1;
}

void sub_2240111E4(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive_soft_fail,turi::flex_type_enum,true>::exec(uint64_t *a1, void **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    size_t v7 = *(void *)(v5 + v6);
    *(void *)(v4 + 24) = v6 + 8;
  }
  else
  {
    std::istream::read();
    size_t v7 = 0;
  }
  size_t v8 = *a2;
  a2[1] = *a2;
  if (v7)
  {
    std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)a2, v7);
    int v9 = *a2;
    size_t v8 = a2[1];
  }
  else
  {
    int v9 = v8;
  }
  size_t v10 = v8 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v9, (const void *)(v12 + *(void *)(v11 + 24)), v10);
  *(void *)(v11 + 24) += v10;
  return result;
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)0>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(uint64_t ***)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)1>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)2>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)4>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)5>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(uint64_t ***)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_2240114E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)6>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)7>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_2240115C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)8>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)10>::get(uint64_t *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v4 = *a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_2240116A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)11>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)12>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)14>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v4 = *(int **)a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_2240117F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)15>::get(uint64_t *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v4 = *a1;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length((uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224011864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(uint64_t ***a1)
{
  uint64_t v1 = *a1;
  LODWORD(v44.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (!LODWORD(v44.__r_.__value_.__l.__data_))
  {
    uint64_t v3 = v1 + 1;
    std::string::basic_string[abi:ne180100]<0>(v38, "end_index");
    __p[0] = v38;
    uint64_t v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)v38, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    uint64_t v5 = 0;
    switch(*((unsigned char *)v4 + 68))
    {
      case 0:
        uint64_t v5 = *((void *)v4 + 7);
        goto LABEL_26;
      case 1:
        uint64_t v5 = (uint64_t)*((double *)v4 + 7);
        goto LABEL_26;
      case 2:
        uint64_t v7 = *((void *)v4 + 7);
        v36[0] = 0;
        size_t v8 = (char *)(v7 + 8);
        if (*(char *)(v7 + 31) < 0) {
          size_t v8 = *(char **)(v7 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v8);
        uint64_t v5 = std::stoll((const std::string *)__p, (size_t *)v36, 10);
        if (SHIBYTE(v41[0]) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v7 + 31) < 0) {
          int v9 = *(void **)(v7 + 16);
        }
        else {
          int v9 = (void *)*(unsigned __int8 *)(v7 + 31);
        }
        if (v36[0] != v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::string::size_type v31 = std::string::append(&v44, " cannot be interpreted as an integer");
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v41[0] = (void *)v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_26;
      case 3:
        uint64_t v6 = *((void *)v4 + 7);
        __p[1] = 0;
        v41[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_25;
      case 4:
        uint64_t v10 = *((void *)v4 + 7);
        __p[1] = 0;
        v41[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        goto LABEL_25;
      case 5:
        uint64_t v11 = *((void *)v4 + 7);
        __p[1] = 0;
        v41[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        goto LABEL_25;
      case 6:
        uint64_t v5 = (uint64_t)(*((void *)v4 + 7) << 8) >> 8;
        goto LABEL_26;
      case 7:
        goto LABEL_26;
      case 8:
        uint64_t v12 = *((void *)v4 + 7);
        int v13 = *(atomic_uint **)(v12 + 16);
        __p[0] = *(void **)(v12 + 8);
        __p[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
        }
        long long v14 = *(_OWORD *)(v12 + 24);
        long long v15 = *(_OWORD *)(v12 + 56);
        long long v42 = *(_OWORD *)(v12 + 40);
        long long v43 = v15;
        *(_OWORD *)uint64_t v41 = v14;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_25;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v4 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v42 + 1))
        {
          *(void *)&long long v43 = *((void *)&v42 + 1);
          operator delete(*((void **)&v42 + 1));
        }
        if (v41[0])
        {
          v41[1] = v41[0];
          operator delete(v41[0]);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_25:
        uint64_t v5 = 0;
LABEL_26:
        int v16 = *a1;
        std::string::basic_string[abi:ne180100]<0>(v36, "begin_index");
        __p[0] = v36;
        uint64_t v17 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 1, (const void **)v36, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        uint64_t v18 = 0;
        switch(*((unsigned char *)v17 + 68))
        {
          case 0:
            uint64_t v18 = *((void *)v17 + 7);
            goto LABEL_50;
          case 1:
            uint64_t v18 = (uint64_t)*((double *)v17 + 7);
            goto LABEL_50;
          case 2:
            uint64_t v20 = *((void *)v17 + 7);
            size_t __idx = 0;
            uint64_t v21 = (char *)(v20 + 8);
            if (*(char *)(v20 + 31) < 0) {
              uint64_t v21 = *(char **)(v20 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v21);
            uint64_t v18 = std::stoll((const std::string *)__p, &__idx, 10);
            if (SHIBYTE(v41[0]) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v20 + 31) < 0) {
              uint64_t v22 = *(void *)(v20 + 16);
            }
            else {
              uint64_t v22 = *(unsigned __int8 *)(v20 + 31);
            }
            if (__idx != v22)
            {
              uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v34 = std::string::append(&v44, " cannot be interpreted as an integer");
              long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
              v41[0] = (void *)v34->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v35;
              v34->__r_.__value_.__l.__size_ = 0;
              v34->__r_.__value_.__r.__words[2] = 0;
              v34->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v33, (const std::string *)__p);
              __cxa_throw(v33, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_50;
          case 3:
            uint64_t v19 = *((void *)v17 + 7);
            __p[1] = 0;
            v41[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v19 + 8), *(void *)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_49;
          case 4:
            uint64_t v23 = *((void *)v17 + 7);
            __p[1] = 0;
            v41[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
            goto LABEL_49;
          case 5:
            uint64_t v24 = *((void *)v17 + 7);
            __p[1] = 0;
            v41[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
            goto LABEL_49;
          case 6:
            uint64_t v18 = (uint64_t)(*((void *)v17 + 7) << 8) >> 8;
            goto LABEL_50;
          case 7:
            goto LABEL_50;
          case 8:
            uint64_t v25 = *((void *)v17 + 7);
            long long v26 = *(atomic_uint **)(v25 + 16);
            __p[0] = *(void **)(v25 + 8);
            __p[1] = v26;
            if (v26) {
              atomic_fetch_add_explicit(v26 + 2, 1u, memory_order_relaxed);
            }
            long long v27 = *(_OWORD *)(v25 + 24);
            long long v28 = *(_OWORD *)(v25 + 56);
            long long v42 = *(_OWORD *)(v25 + 40);
            long long v43 = v28;
            *(_OWORD *)uint64_t v41 = v27;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_49;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v17 + 7) + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v42 + 1))
            {
              *(void *)&long long v43 = *((void *)&v42 + 1);
              operator delete(*((void **)&v42 + 1));
            }
            if (v41[0])
            {
              v41[1] = v41[0];
              operator delete(v41[0]);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_49:
            uint64_t v18 = 0;
LABEL_50:
            if (v37 < 0) {
              operator delete(v36[0]);
            }
            if (v39 < 0) {
              operator delete(v38[0]);
            }
            return v5 - v18;
          default:
            turi::flexible_type_fail(0);
            break;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        break;
    }
    __break(1u);
  }
  __p[0] = &v44;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_224011E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((v27 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0) {
        operator delete(a9);
      }
      if (a20 < 0) {
        operator delete(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401223C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v12 = **a1;
  if (v12 != 1)
  {
    uint64_t v11 = &v12;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (uint64_t *)*((void *)v1 + 7);
  uint64_t v3 = (uint64_t *)*((void *)v1 + 8);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = *v2;
      uint64_t v10 = 0;
    }
    uint64_t v7 = turi::query_eval::infer_planner_node_length(&v9);
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (v7 == -1) {
      break;
    }
    v4 += v7;
    v2 += 2;
    if (v2 == v3) {
      return v4;
    }
  }
  return -1;
}

void sub_22401241C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240125C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 2)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_224012750(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 129, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240128F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 4)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_224012A7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224012C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(uint64_t ***a1)
{
  v159[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  LODWORD(v14CoreML::Specification::AdamOptimizer::New(this, 0) = *(_DWORD *)*a1;
  if (v140 != 5)
  {
    uint64_t v147 = (char *)&v140;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v138, "end_index");
  uint64_t v147 = (char *)v138;
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1 + 1, (const void **)v138, (uint64_t)&std::piecewise_construct, (_OWORD **)&v147);
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v136, "begin_index");
  uint64_t v147 = (char *)v136;
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 1, (const void **)v136, (uint64_t)&std::piecewise_construct, (_OWORD **)&v147);
  memset(v159, 0, 13);
  if ((atomic_ullong **)((char *)v3 + 56) != v159)
  {
    *(atomic_ullong **)((char *)v159 + 5) = *(atomic_ullong **)((char *)v3 + 61);
    v159[0] = *((atomic_ullong **)v3 + 7);
    BYTE4(v159[1]) = *((unsigned char *)v3 + 68);
    if (BYTE4(v159[1]) <= 9u && ((1 << SBYTE4(v159[1])) & 0x33C) != 0) {
      atomic_fetch_add(v159[0], 1uLL);
    }
  }
  switch(*((unsigned char *)v5 + 68))
  {
    case 0:
      switch(BYTE4(v159[1]))
      {
        case 0:
          int v7 = (atomic_ullong *)((char *)v159[0] - *((void *)v5 + 7));
          goto LABEL_28;
        case 1:
          double v105 = (double)*((uint64_t *)v5 + 7);
          goto LABEL_189;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          int v49 = (double *)v159[0][1];
          uint64_t v50 = v159[0][2] - (void)v49;
          if (v50)
          {
            unint64_t v51 = v50 >> 3;
            double v52 = (double)*((uint64_t *)v5 + 7);
            if (v51 <= 1) {
              unint64_t v51 = 1;
            }
            do
            {
              *int v49 = *v49 - v52;
              ++v49;
              --v51;
            }
            while (v51);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | ((unint64_t)v159[0]
                                                                                        - *((void *)v5 + 7)) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          unint64_t v57 = v159[0];
          unint64_t v59 = (uint64_t *)v159[0][3];
          atomic_ullong v58 = v159[0][4];
          if ((uint64_t *)v58 == v59) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v60 = (double)*((uint64_t *)v5 + 7);
          uint64_t v61 = 1;
          do
          {
            uint64_t v62 = *v59++;
            v61 *= v62;
          }
          while (v59 != (uint64_t *)v58);
          if (!v61) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v63 = (v57[4] - v57[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v63, &v157);
          uint64_t v23 = (std::__shared_weak_count *)v147;
          size_t v64 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v65 = 0;
        uint64_t v66 = (char *)v64 - (char *)v23;
        if (v66)
        {
          unint64_t v67 = v66 >> 3;
          double v68 = (uint64_t *)v57[6];
          if (v67 <= 1) {
            unint64_t v67 = 1;
          }
          do
          {
            uint64_t v70 = v23->__vftable;
            uint64_t v23 = (std::__shared_weak_count *)((char *)v23 + 8);
            char v69 = v70;
            uint64_t v71 = *v68++;
            v65 += v71 * (void)v69;
            --v67;
          }
          while (v67);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v57 + 1);
        *(double *)(*(void *)v57[1] + 8 * (v57[9] + v65)) = *(double *)(*(void *)v57[1] + 8 * (v57[9] + v65)) - v60;
        uint64_t v23 = (std::__shared_weak_count *)v147;
        size_t v64 = v148;
        int64_t v72 = ((char *)v148 - v147) >> 3;
        int64_t v73 = v72 - 1;
        if ((char *)v148 - v147 < 1) {
          goto LABEL_132;
        }
        atomic_ullong v74 = v57[3];
        unint64_t v75 = *(void *)&v147[8 * v73] + 1;
        *(void *)&v147[8 * v73] = v75;
        if (v75 < *(void *)(v74 + 8 * v73))
        {
LABEL_131:
          int64_t v72 = 1;
LABEL_132:
          if (v73 < 0 || !v72) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      unint64_t v76 = (unint64_t *)((char *)v23 + 8 * v72 - 16);
      atomic_ullong v77 = v74 - 16;
      while (1)
      {
        int64_t v78 = v72 - 1;
        v76[1] = 0;
        if (v72 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v79 = *v76 + 1;
        *v76-- = v79;
        unint64_t v80 = *(void *)(v77 + 8 * v72--);
        if (v79 < v80)
        {
          int64_t v73 = v78 - 1;
          goto LABEL_131;
        }
      }
    case 1:
      switch(BYTE4(v159[1]))
      {
        case 0:
          int v7 = (atomic_ullong *)(uint64_t)((double)(uint64_t)v159[0] - *((double *)v5 + 7));
LABEL_28:
          v159[0] = v7;
          goto LABEL_233;
        case 1:
          double v105 = *((double *)v5 + 7);
LABEL_189:
          *(double *)uint64_t v159 = *(double *)v159 - v105;
          goto LABEL_233;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v53 = (double *)v159[0][1];
          uint64_t v54 = v159[0][2] - (void)v53;
          if (v54)
          {
            double v55 = *((double *)v5 + 7);
            unint64_t v56 = v54 >> 3;
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
            do
            {
              double *v53 = *v53 - v55;
              ++v53;
              --v56;
            }
            while (v56);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          double v106 = *((double *)v5 + 7);
          unint64_t v107 = vcvtmd_s64_f64(v106);
          unint64_t v108 = (unint64_t)v159[0];
          uint64_t v109 = (char *)v159[0] - v107;
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | ((unint64_t)v159[0]
                                                                                        - v107) & 0xFFFFFFFFFFFFFFLL);
          uint64_t v110 = SLODWORD(v159[1]) - (uint64_t)((v106 - (double)(uint64_t)floor(v106)) * 1000000.0);
          if (v110 < 0)
          {
            v159[0] = (atomic_ullong *)((unint64_t)(v109 - 1) & 0xFFFFFFFFFFFFFFLL | v108 & 0xFF00000000000000);
            LODWORD(v11CoreML::Specification::AdamOptimizer::New(this, 0) = v110 + 1000000;
          }
          if (v110 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          LODWORD(v159[1]) = v110;
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          unsigned int v81 = v159[0];
          char v83 = (uint64_t *)v159[0][3];
          atomic_ullong v82 = v159[0][4];
          if ((uint64_t *)v82 == v83) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v84 = *((double *)v5 + 7);
          uint64_t v85 = 1;
          do
          {
            uint64_t v86 = *v83++;
            v85 *= v86;
          }
          while (v83 != (uint64_t *)v82);
          if (!v85) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v87 = (v81[4] - v81[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v87, &v157);
          uint64_t v23 = (std::__shared_weak_count *)v147;
          std::string v88 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v89 = 0;
        uint64_t v90 = (char *)v88 - (char *)v23;
        if (v90)
        {
          unint64_t v91 = v90 >> 3;
          long long v92 = (uint64_t *)v81[6];
          if (v91 <= 1) {
            unint64_t v91 = 1;
          }
          do
          {
            long long v94 = v23->__vftable;
            uint64_t v23 = (std::__shared_weak_count *)((char *)v23 + 8);
            long long v93 = v94;
            uint64_t v95 = *v92++;
            v89 += v95 * (void)v93;
            --v91;
          }
          while (v91);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v81 + 1);
        *(double *)(*(void *)v81[1] + 8 * (v81[9] + v89)) = *(double *)(*(void *)v81[1] + 8 * (v81[9] + v89)) - v84;
        uint64_t v23 = (std::__shared_weak_count *)v147;
        std::string v88 = v148;
        int64_t v96 = ((char *)v148 - v147) >> 3;
        int64_t v97 = v96 - 1;
        if ((char *)v148 - v147 < 1) {
          goto LABEL_154;
        }
        atomic_ullong v98 = v81[3];
        unint64_t v99 = *(void *)&v147[8 * v97] + 1;
        *(void *)&v147[8 * v97] = v99;
        if (v99 < *(void *)(v98 + 8 * v97))
        {
LABEL_153:
          int64_t v96 = 1;
LABEL_154:
          if (v97 < 0 || !v96) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      std::string v100 = (unint64_t *)((char *)v23 + 8 * v96 - 16);
      atomic_ullong v101 = v98 - 16;
      while (1)
      {
        int64_t v102 = v96 - 1;
        v100[1] = 0;
        if (v96 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v103 = *v100 + 1;
        *v100-- = v103;
        unint64_t v104 = *(void *)(v101 + 8 * v96--);
        if (v103 < v104)
        {
          int64_t v97 = v102 - 1;
          goto LABEL_153;
        }
      }
    case 2:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 3:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          uint64_t v8 = *((void *)v5 + 7);
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v9 = v159[0];
          turi::flexible_type_fail(v9[2] - v9[1] == *(void *)(v8 + 16) - *(void *)(v8 + 8));
          uint64_t v10 = (double *)v9[1];
          uint64_t v11 = v9[2] - (void)v10;
          if (v11)
          {
            unint64_t v12 = v11 >> 3;
            int v13 = *(double **)(v8 + 8);
            if (v12 <= 1) {
              unint64_t v12 = 1;
            }
            do
            {
              double v14 = *v13++;
              *uint64_t v10 = *v10 - v14;
              ++v10;
              --v12;
            }
            while (v12);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 4:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 5:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 6:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 7:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 8:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 9:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
LABEL_232:
          turi::flexible_type_fail(0);
          goto LABEL_233;
        case 9:
          uint64_t v15 = *((void *)v5 + 7);
          if (*v159[0] != 1) {
            operator new();
          }
          int v16 = v159[0];
          uint64_t v17 = v159[0] + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v159[0] + 1), v15 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v19 = (uint64_t *)v16[3];
          uint64_t v18 = (uint64_t *)v16[4];
          if (v18 == v19) {
            goto LABEL_233;
          }
          if (!*v17) {
            goto LABEL_233;
          }
          uint64_t v20 = 1;
          do
          {
            uint64_t v21 = *v19++;
            v20 *= v21;
          }
          while (v19 != v18);
          if (!v20) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v16 + 1);
          unint64_t v22 = (v16[4] - v16[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v22, &v157);
          uint64_t v23 = (std::__shared_weak_count *)v147;
          uint64_t v24 = v148;
          break;
        default:
          goto LABEL_300;
      }
      break;
    default:
LABEL_300:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_303:
      __break(1u);
      return result;
  }
  while (1)
  {
    uint64_t v25 = (char *)v24 - (char *)v23;
    if (v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = v25 >> 3;
      uint64_t v28 = *(uint64_t **)(v15 + 48);
      if (v27 <= 1) {
        unint64_t v27 = 1;
      }
      std::string v29 = (uint64_t *)v23;
      unint64_t v30 = v27;
      do
      {
        uint64_t v32 = *v29++;
        uint64_t v31 = v32;
        uint64_t v33 = *v28++;
        v26 += v33 * v31;
        --v30;
      }
      while (v30);
      uint64_t v34 = 0;
      double v35 = *(double *)(**(void **)(v15 + 8) + 8 * (*(void *)(v15 + 72) + v26));
      long long v36 = (uint64_t *)v16[6];
      do
      {
        std::string::size_type v38 = v23->__vftable;
        uint64_t v23 = (std::__shared_weak_count *)((char *)v23 + 8);
        char v37 = v38;
        uint64_t v39 = *v36++;
        v34 += v39 * (void)v37;
        --v27;
      }
      while (v27);
    }
    else
    {
      uint64_t v34 = 0;
      double v35 = *(double *)(**(void **)(v15 + 8) + 8 * *(void *)(v15 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v16 + 1);
    *(double *)(*(void *)v16[1] + 8 * (v16[9] + v34)) = *(double *)(*(void *)v16[1] + 8 * (v16[9] + v34)) - v35;
    uint64_t v23 = (std::__shared_weak_count *)v147;
    uint64_t v24 = v148;
    int64_t v40 = ((char *)v148 - v147) >> 3;
    int64_t v41 = v40 - 1;
    if ((char *)v148 - v147 < 1) {
      goto LABEL_80;
    }
    atomic_ullong v42 = v16[3];
    unint64_t v43 = *(void *)&v147[8 * v41] + 1;
    *(void *)&v147[8 * v41] = v43;
    if (v43 >= *(void *)(v42 + 8 * v41)) {
      break;
    }
LABEL_79:
    int64_t v40 = 1;
LABEL_80:
    if (v41 < 0 || !v40) {
      goto LABEL_156;
    }
  }
  std::string v44 = (unint64_t *)((char *)v23 + 8 * v40 - 16);
  atomic_ullong v45 = v42 - 16;
  while (1)
  {
    int64_t v46 = v40 - 1;
    v44[1] = 0;
    if (v40 - 1 <= 0) {
      break;
    }
    unint64_t v47 = *v44 + 1;
    *v44-- = v47;
    unint64_t v48 = *(void *)(v45 + 8 * v40--);
    if (v47 < v48)
    {
      int64_t v41 = v46 - 1;
      goto LABEL_79;
    }
  }
LABEL_156:
  if (v23)
  {
LABEL_157:
    uint64_t v148 = v23;
    operator delete(v23);
  }
LABEL_233:
  uint64_t v111 = 0;
  switch(BYTE4(v159[1]))
  {
    case 0:
      uint64_t v111 = (uint64_t)v159[0];
      goto LABEL_290;
    case 1:
      uint64_t v111 = (uint64_t)*(double *)v159;
      goto LABEL_290;
    case 2:
      uint64_t v112 = v159[0];
      size_t __idx = 0;
      unint64_t v113 = (char *)(v159[0] + 1);
      if (*((char *)v159[0] + 31) < 0) {
        unint64_t v113 = (char *)v159[0][1];
      }
      uint64_t v114 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v157, v113);
      uint64_t v111 = std::stoll(v114, &__idx, 10);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (*((char *)v112 + 31) < 0) {
        atomic_ullong v115 = v112[2];
      }
      else {
        atomic_ullong v115 = *((unsigned __int8 *)v112 + 31);
      }
      if (__idx != v115)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v134 = std::string::append(&v156, " cannot be interpreted as an integer");
        long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v135;
        v134->__r_.__value_.__l.__size_ = 0;
        v134->__r_.__value_.__r.__words[2] = 0;
        v134->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v157);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_257;
    case 3:
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      uint64_t v153 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v153, *((const void **)v159[0] + 1), v159[0][2], (v159[0][2] - v159[0][1]) >> 3);
      turi::flexible_type_fail(0);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      goto LABEL_256;
    case 4:
      memset(v146, 0, sizeof(v146));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v146, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 4);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 5:
      memset(v145, 0, sizeof(v145));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v145, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 5);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 6:
      uint64_t v111 = (uint64_t)v159[0] << 8 >> 8;
      goto LABEL_290;
    case 7:
      goto LABEL_290;
    case 8:
      unint64_t v116 = v159[0];
      uint64_t v117 = (atomic_uint *)v159[0][2];
      atomic_ullong v140 = v159[0][1];
      unsigned int v141 = v117;
      if (v117) {
        atomic_fetch_add_explicit(v117 + 2, 1u, memory_order_relaxed);
      }
      long long v118 = *(_OWORD *)(v116 + 3);
      long long v119 = *(_OWORD *)(v116 + 5);
      long long v144 = *(_OWORD *)(v116 + 7);
      long long v143 = v119;
      long long v142 = v118;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v141);
      goto LABEL_256;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v147, (uint64_t)(v159[0] + 1));
      turi::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v152 = __p;
        operator delete(__p);
      }
      if (v149)
      {
        BOOL v150 = v149;
        operator delete(v149);
      }
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
LABEL_256:
      uint64_t v111 = 0;
LABEL_257:
      switch(BYTE4(v159[1]))
      {
        case 2:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v120 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            if (*((char *)v159[0] + 31) < 0) {
              operator delete(*((void **)v159[0] + 1));
            }
            unsigned int v121 = v120;
            uint64_t v122 = 0x1012C404EF22A49;
            goto LABEL_288;
          }
          break;
        case 3:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v129 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            int v130 = (void *)v159[0][1];
            if (v130)
            {
              v159[0][2] = (atomic_ullong)v130;
              operator delete(v130);
            }
            unsigned int v121 = v129;
            uint64_t v122 = 0x1080C409938AC02;
            goto LABEL_288;
          }
          break;
        case 4:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = (char *)(v159[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
            goto LABEL_283;
          }
          break;
        case 5:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = (char *)(v159[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
LABEL_283:
            unsigned int v121 = v123;
            uint64_t v122 = 0x1020C405E66F15BLL;
            goto LABEL_288;
          }
          break;
        case 8:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v131 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v159[0] + 2);
            unsigned int v121 = v131;
            unsigned int v128 = -235920773;
            goto LABEL_287;
          }
          break;
        case 9:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v124 = v159[0];
            if (v159[0])
            {
              unint64_t v125 = (void *)v159[0][6];
              if (v125)
              {
                v159[0][7] = (atomic_ullong)v125;
                operator delete(v125);
              }
              double v126 = (void *)v124[3];
              if (v126)
              {
                v124[4] = (atomic_ullong)v126;
                operator delete(v126);
              }
              uint64_t v127 = (std::__shared_weak_count *)v124[2];
              if (v127) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v127);
              }
              unsigned int v121 = v124;
              unsigned int v128 = 2071181815;
LABEL_287:
              uint64_t v122 = v128 | 0x1030C4000000000;
LABEL_288:
              MEMORY[0x22A614FA0](v121, v122);
            }
LABEL_289:
            v159[0] = 0;
          }
          break;
        default:
          break;
      }
LABEL_290:
      memset(v159, 0, 13);
      if (v137 < 0) {
        operator delete(v136[0]);
      }
      if (v139 < 0) {
        operator delete(v138[0]);
      }
      uint64_t result = v111;
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_303;
  }
  return result;
}

void sub_224014AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  MEMORY[0x22A614FA0](v37, 0x1020C405E66F15BLL);
  switch(*(unsigned char *)(v38 - 76))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v39 = *(void *)(v38 - 88);
      if (!v39) {
        goto LABEL_27;
      }
      if (*(char *)(v39 + 31) < 0) {
        operator delete(*(void **)(v39 + 8));
      }
      int64_t v40 = (void *)v39;
      uint64_t v41 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong v42 = *(void **)(v38 - 88);
      if (!v42) {
        goto LABEL_27;
      }
      unint64_t v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      int64_t v40 = v42;
      uint64_t v41 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_25:
      int64_t v40 = v47;
      uint64_t v41 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void *)(v38 - 88);
      if (!v44) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v44 + 16));
      int64_t v40 = (void *)v44;
      unsigned int v45 = -235920773;
      goto LABEL_18;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v46 = *(void **)(v38 - 88);
      if (!v46) {
        goto LABEL_27;
      }
      int64_t v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v46);
      unsigned int v45 = 2071181815;
LABEL_18:
      uint64_t v41 = v45 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v40, v41);
LABEL_27:
      *(void *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(unsigned char *)(v38 - 76) = 0;
      if (a15 < 0) {
        operator delete(__p);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224015330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(_DWORD **a1)
{
  v159[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  LODWORD(v14CoreML::Specification::AdamOptimizer::New(this, 0) = **a1;
  if (v140 != 6)
  {
    uint64_t v147 = &v140;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v138, "end_index");
  uint64_t v3 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v1 + 2), (const void **)v138);
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v136, "begin_index");
  uint64_t v5 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v4 + 2), (const void **)v136);
  memset(v159, 0, 13);
  if ((atomic_ullong **)v3 != v159)
  {
    uint64_t v6 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v159 + 5) = *(atomic_ullong **)(v3 + 5);
    v159[0] = v6;
    BYTE4(v159[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v159[1]) <= 9u && ((1 << SBYTE4(v159[1])) & 0x33C) != 0) {
      atomic_fetch_add(v159[0], 1uLL);
    }
  }
  switch(*(unsigned char *)(v5 + 12))
  {
    case 0:
      switch(BYTE4(v159[1]))
      {
        case 0:
          uint64_t v8 = (atomic_ullong *)((char *)v159[0] - *(void *)v5);
          goto LABEL_28;
        case 1:
          double v106 = (double)*(uint64_t *)v5;
          goto LABEL_189;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v50 = (double *)v159[0][1];
          uint64_t v51 = v159[0][2] - (void)v50;
          if (v51)
          {
            unint64_t v52 = v51 >> 3;
            double v53 = (double)*(uint64_t *)v5;
            if (v52 <= 1) {
              unint64_t v52 = 1;
            }
            do
            {
              *uint64_t v50 = *v50 - v53;
              ++v50;
              --v52;
            }
            while (v52);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | ((unint64_t)v159[0]
                                                                                        - *(void *)v5) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          atomic_ullong v58 = v159[0];
          double v60 = (uint64_t *)v159[0][3];
          atomic_ullong v59 = v159[0][4];
          if ((uint64_t *)v59 == v60) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v61 = (double)*(uint64_t *)v5;
          uint64_t v62 = 1;
          do
          {
            uint64_t v63 = *v60++;
            v62 *= v63;
          }
          while (v60 != (uint64_t *)v59);
          if (!v62) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v64 = (v58[4] - v58[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v64, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v65 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v66 = 0;
        uint64_t v67 = (char *)v65 - (char *)v24;
        if (v67)
        {
          unint64_t v68 = v67 >> 3;
          char v69 = (uint64_t *)v58[6];
          if (v68 <= 1) {
            unint64_t v68 = 1;
          }
          do
          {
            uint64_t v71 = v24->__vftable;
            uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
            uint64_t v70 = v71;
            uint64_t v72 = *v69++;
            v66 += v72 * (void)v70;
            --v68;
          }
          while (v68);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
        *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) = *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) - v61;
        uint64_t v24 = (std::__shared_weak_count *)v147;
        uint64_t v65 = v148;
        int64_t v73 = ((char *)v148 - (char *)v147) >> 3;
        int64_t v74 = v73 - 1;
        if ((char *)v148 - (char *)v147 < 1) {
          goto LABEL_132;
        }
        atomic_ullong v75 = v58[3];
        unint64_t v76 = (char *)(v147[v74] + 1);
        v147[v74] = (atomic_ullong)v76;
        if ((unint64_t)v76 < *(void *)(v75 + 8 * v74))
        {
LABEL_131:
          int64_t v73 = 1;
LABEL_132:
          if (v74 < 0 || !v73) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      atomic_ullong v77 = (unint64_t *)((char *)v24 + 8 * v73 - 16);
      atomic_ullong v78 = v75 - 16;
      while (1)
      {
        int64_t v79 = v73 - 1;
        v77[1] = 0;
        if (v73 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v80 = *v77 + 1;
        *v77-- = v80;
        unint64_t v81 = *(void *)(v78 + 8 * v73--);
        if (v80 < v81)
        {
          int64_t v74 = v79 - 1;
          goto LABEL_131;
        }
      }
    case 1:
      switch(BYTE4(v159[1]))
      {
        case 0:
          uint64_t v8 = (atomic_ullong *)(uint64_t)((double)(uint64_t)v159[0] - *(double *)v5);
LABEL_28:
          v159[0] = v8;
          goto LABEL_233;
        case 1:
          double v106 = *(double *)v5;
LABEL_189:
          *(double *)uint64_t v159 = *(double *)v159 - v106;
          goto LABEL_233;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v54 = (double *)v159[0][1];
          uint64_t v55 = v159[0][2] - (void)v54;
          if (v55)
          {
            double v56 = *(double *)v5;
            unint64_t v57 = v55 >> 3;
            if (v57 <= 1) {
              unint64_t v57 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 - v56;
              ++v54;
              --v57;
            }
            while (v57);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          double v107 = (*(double *)v5 - (double)(uint64_t)floor(*(double *)v5)) * 1000000.0;
          unint64_t v108 = (unint64_t)v159[0];
          unint64_t v109 = (unint64_t)v159[0] - vcvtmd_s64_f64(*(double *)v5);
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | v109 & 0xFFFFFFFFFFFFFFLL);
          uint64_t v110 = SLODWORD(v159[1]) - (uint64_t)v107;
          if (v110 < 0)
          {
            v159[0] = (atomic_ullong *)((v109 - 1) & 0xFFFFFFFFFFFFFFLL | v108 & 0xFF00000000000000);
            LODWORD(v11CoreML::Specification::AdamOptimizer::New(this, 0) = v110 + 1000000;
          }
          if (v110 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          LODWORD(v159[1]) = v110;
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          atomic_ullong v82 = v159[0];
          double v84 = (uint64_t *)v159[0][3];
          atomic_ullong v83 = v159[0][4];
          if ((uint64_t *)v83 == v84) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v85 = *(double *)v5;
          uint64_t v86 = 1;
          do
          {
            uint64_t v87 = *v84++;
            v86 *= v87;
          }
          while (v84 != (uint64_t *)v83);
          if (!v86) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v88 = (v82[4] - v82[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v88, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v89 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v90 = 0;
        uint64_t v91 = (char *)v89 - (char *)v24;
        if (v91)
        {
          unint64_t v92 = v91 >> 3;
          long long v93 = (uint64_t *)v82[6];
          if (v92 <= 1) {
            unint64_t v92 = 1;
          }
          do
          {
            uint64_t v95 = v24->__vftable;
            uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
            long long v94 = v95;
            uint64_t v96 = *v93++;
            v90 += v96 * (void)v94;
            --v92;
          }
          while (v92);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
        *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) = *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) - v85;
        uint64_t v24 = (std::__shared_weak_count *)v147;
        uint64_t v89 = v148;
        int64_t v97 = ((char *)v148 - (char *)v147) >> 3;
        int64_t v98 = v97 - 1;
        if ((char *)v148 - (char *)v147 < 1) {
          goto LABEL_154;
        }
        atomic_ullong v99 = v82[3];
        std::string v100 = (char *)(v147[v98] + 1);
        v147[v98] = (atomic_ullong)v100;
        if ((unint64_t)v100 < *(void *)(v99 + 8 * v98))
        {
LABEL_153:
          int64_t v97 = 1;
LABEL_154:
          if (v98 < 0 || !v97) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      atomic_ullong v101 = (unint64_t *)((char *)v24 + 8 * v97 - 16);
      atomic_ullong v102 = v99 - 16;
      while (1)
      {
        int64_t v103 = v97 - 1;
        v101[1] = 0;
        if (v97 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v104 = *v101 + 1;
        *v101-- = v104;
        unint64_t v105 = *(void *)(v102 + 8 * v97--);
        if (v104 < v105)
        {
          int64_t v98 = v103 - 1;
          goto LABEL_153;
        }
      }
    case 2:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 3:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          double v9 = *(double *)v5;
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v10 = v159[0];
          turi::flexible_type_fail(v10[2] - v10[1] == *(void *)(*(void *)&v9 + 16)
                                                    - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            double v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              double *v11 = *v11 - v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 4:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 5:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 6:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 7:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 8:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 9:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
LABEL_232:
          turi::flexible_type_fail(0);
          goto LABEL_233;
        case 9:
          double v16 = *(double *)v5;
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v17 = v159[0];
          uint64_t v18 = v159[0] + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v159[0] + 1), *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            goto LABEL_233;
          }
          if (!*v18) {
            goto LABEL_233;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v17 + 1);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v23, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v25 = v148;
          break;
        default:
          goto LABEL_300;
      }
      break;
    default:
LABEL_300:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  while (1)
  {
    uint64_t v26 = (char *)v25 - (char *)v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      std::string v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      unint64_t v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      uint64_t v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = v24->__vftable;
        uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * (void)v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v17 + 1);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) - v36;
    uint64_t v24 = (std::__shared_weak_count *)v147;
    uint64_t v25 = v148;
    int64_t v41 = ((char *)v148 - (char *)v147) >> 3;
    int64_t v42 = v41 - 1;
    if ((char *)v148 - (char *)v147 < 1) {
      goto LABEL_80;
    }
    atomic_ullong v43 = v17[3];
    uint64_t v44 = (char *)(v147[v42] + 1);
    v147[v42] = (atomic_ullong)v44;
    if ((unint64_t)v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_79:
    int64_t v41 = 1;
LABEL_80:
    if (v42 < 0 || !v41) {
      goto LABEL_156;
    }
  }
  unsigned int v45 = (unint64_t *)((char *)v24 + 8 * v41 - 16);
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    int64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      int64_t v42 = v47 - 1;
      goto LABEL_79;
    }
  }
LABEL_156:
  if (v24)
  {
LABEL_157:
    uint64_t v148 = v24;
    operator delete(v24);
  }
LABEL_233:
  uint64_t v111 = 0;
  switch(BYTE4(v159[1]))
  {
    case 0:
      uint64_t v111 = (uint64_t)v159[0];
      goto LABEL_290;
    case 1:
      uint64_t v111 = (uint64_t)*(double *)v159;
      goto LABEL_290;
    case 2:
      uint64_t v112 = v159[0];
      size_t __idx = 0;
      unint64_t v113 = (char *)(v159[0] + 1);
      if (*((char *)v159[0] + 31) < 0) {
        unint64_t v113 = (char *)v159[0][1];
      }
      uint64_t v114 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v157, v113);
      uint64_t v111 = std::stoll(v114, &__idx, 10);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (*((char *)v112 + 31) < 0) {
        atomic_ullong v115 = v112[2];
      }
      else {
        atomic_ullong v115 = *((unsigned __int8 *)v112 + 31);
      }
      if (__idx != v115)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v134 = std::string::append(&v156, " cannot be interpreted as an integer");
        long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v135;
        v134->__r_.__value_.__l.__size_ = 0;
        v134->__r_.__value_.__r.__words[2] = 0;
        v134->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v157);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_257;
    case 3:
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      uint64_t v153 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v153, *((const void **)v159[0] + 1), v159[0][2], (v159[0][2] - v159[0][1]) >> 3);
      turi::flexible_type_fail(0);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      goto LABEL_256;
    case 4:
      memset(v146, 0, sizeof(v146));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v146, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 4);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 5:
      memset(v145, 0, sizeof(v145));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v145, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 5);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 6:
      uint64_t v111 = (uint64_t)v159[0] << 8 >> 8;
      goto LABEL_290;
    case 7:
      goto LABEL_290;
    case 8:
      unint64_t v116 = v159[0];
      uint64_t v117 = (atomic_uint *)v159[0][2];
      atomic_ullong v140 = v159[0][1];
      unsigned int v141 = v117;
      if (v117) {
        atomic_fetch_add_explicit(v117 + 2, 1u, memory_order_relaxed);
      }
      long long v118 = *(_OWORD *)(v116 + 3);
      long long v119 = *(_OWORD *)(v116 + 5);
      long long v144 = *(_OWORD *)(v116 + 7);
      long long v143 = v119;
      long long v142 = v118;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v141);
      goto LABEL_256;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v147, (uint64_t)(v159[0] + 1));
      turi::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v152 = __p;
        operator delete(__p);
      }
      if (v149)
      {
        BOOL v150 = v149;
        operator delete(v149);
      }
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
LABEL_256:
      uint64_t v111 = 0;
LABEL_257:
      switch(BYTE4(v159[1]))
      {
        case 2:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v120 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            if (*((char *)v159[0] + 31) < 0) {
              operator delete(*((void **)v159[0] + 1));
            }
            unsigned int v121 = v120;
            uint64_t v122 = 0x1012C404EF22A49;
            goto LABEL_288;
          }
          break;
        case 3:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v129 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            int v130 = (void *)v159[0][1];
            if (v130)
            {
              v159[0][2] = (atomic_ullong)v130;
              operator delete(v130);
            }
            unsigned int v121 = v129;
            uint64_t v122 = 0x1080C409938AC02;
            goto LABEL_288;
          }
          break;
        case 4:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = v159[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
            goto LABEL_283;
          }
          break;
        case 5:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = v159[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
LABEL_283:
            unsigned int v121 = v123;
            uint64_t v122 = 0x1020C405E66F15BLL;
            goto LABEL_288;
          }
          break;
        case 8:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v131 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v159[0] + 2);
            unsigned int v121 = v131;
            unsigned int v128 = -235920773;
            goto LABEL_287;
          }
          break;
        case 9:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v124 = v159[0];
            if (v159[0])
            {
              unint64_t v125 = (void *)v159[0][6];
              if (v125)
              {
                v159[0][7] = (atomic_ullong)v125;
                operator delete(v125);
              }
              double v126 = (void *)v124[3];
              if (v126)
              {
                v124[4] = (atomic_ullong)v126;
                operator delete(v126);
              }
              uint64_t v127 = (std::__shared_weak_count *)v124[2];
              if (v127) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v127);
              }
              unsigned int v121 = v124;
              unsigned int v128 = 2071181815;
LABEL_287:
              uint64_t v122 = v128 | 0x1030C4000000000;
LABEL_288:
              MEMORY[0x22A614FA0](v121, v122);
            }
LABEL_289:
            v159[0] = 0;
          }
          break;
        default:
          break;
      }
LABEL_290:
      memset(v159, 0, 13);
      if (v137 < 0) {
        operator delete(v136[0]);
      }
      if (v139 < 0) {
        operator delete(v138[0]);
      }
      uint64_t result = v111;
      break;
    default:
      goto LABEL_300;
  }
  return result;
}

void sub_22401719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  MEMORY[0x22A614FA0](v37, 0x1020C405E66F15BLL);
  switch(*(unsigned char *)(v38 - 76))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v39 = *(void *)(v38 - 88);
      if (!v39) {
        goto LABEL_27;
      }
      if (*(char *)(v39 + 31) < 0) {
        operator delete(*(void **)(v39 + 8));
      }
      uint64_t v40 = (void *)v39;
      uint64_t v41 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v42 = *(void **)(v38 - 88);
      if (!v42) {
        goto LABEL_27;
      }
      atomic_ullong v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      uint64_t v40 = v42;
      uint64_t v41 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_25:
      uint64_t v40 = v47;
      uint64_t v41 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void *)(v38 - 88);
      if (!v44) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v44 + 16));
      uint64_t v40 = (void *)v44;
      unsigned int v45 = -235920773;
      goto LABEL_18;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong v46 = *(void **)(v38 - 88);
      if (!v46) {
        goto LABEL_27;
      }
      uint64_t v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v46);
      unsigned int v45 = 2071181815;
LABEL_18:
      uint64_t v41 = v45 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v40, v41);
LABEL_27:
      *(void *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(unsigned char *)(v38 - 76) = 0;
      if (a15 < 0) {
        operator delete(__p);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224017A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(_DWORD **a1)
{
  v159[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  LODWORD(v14CoreML::Specification::AdamOptimizer::New(this, 0) = **a1;
  if (v140 != 7)
  {
    uint64_t v147 = &v140;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v138, "end_index");
  uint64_t v3 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v1 + 2), (const void **)v138);
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v136, "begin_index");
  uint64_t v5 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v4 + 2), (const void **)v136);
  memset(v159, 0, 13);
  if ((atomic_ullong **)v3 != v159)
  {
    uint64_t v6 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v159 + 5) = *(atomic_ullong **)(v3 + 5);
    v159[0] = v6;
    BYTE4(v159[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v159[1]) <= 9u && ((1 << SBYTE4(v159[1])) & 0x33C) != 0) {
      atomic_fetch_add(v159[0], 1uLL);
    }
  }
  switch(*(unsigned char *)(v5 + 12))
  {
    case 0:
      switch(BYTE4(v159[1]))
      {
        case 0:
          uint64_t v8 = (atomic_ullong *)((char *)v159[0] - *(void *)v5);
          goto LABEL_28;
        case 1:
          double v106 = (double)*(uint64_t *)v5;
          goto LABEL_189;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v50 = (double *)v159[0][1];
          uint64_t v51 = v159[0][2] - (void)v50;
          if (v51)
          {
            unint64_t v52 = v51 >> 3;
            double v53 = (double)*(uint64_t *)v5;
            if (v52 <= 1) {
              unint64_t v52 = 1;
            }
            do
            {
              *uint64_t v50 = *v50 - v53;
              ++v50;
              --v52;
            }
            while (v52);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | ((unint64_t)v159[0]
                                                                                        - *(void *)v5) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          atomic_ullong v58 = v159[0];
          double v60 = (uint64_t *)v159[0][3];
          atomic_ullong v59 = v159[0][4];
          if ((uint64_t *)v59 == v60) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v61 = (double)*(uint64_t *)v5;
          uint64_t v62 = 1;
          do
          {
            uint64_t v63 = *v60++;
            v62 *= v63;
          }
          while (v60 != (uint64_t *)v59);
          if (!v62) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v64 = (v58[4] - v58[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v64, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v65 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v66 = 0;
        uint64_t v67 = (char *)v65 - (char *)v24;
        if (v67)
        {
          unint64_t v68 = v67 >> 3;
          char v69 = (uint64_t *)v58[6];
          if (v68 <= 1) {
            unint64_t v68 = 1;
          }
          do
          {
            uint64_t v71 = v24->__vftable;
            uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
            uint64_t v70 = v71;
            uint64_t v72 = *v69++;
            v66 += v72 * (void)v70;
            --v68;
          }
          while (v68);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v58 + 1);
        *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) = *(double *)(*(void *)v58[1] + 8 * (v58[9] + v66)) - v61;
        uint64_t v24 = (std::__shared_weak_count *)v147;
        uint64_t v65 = v148;
        int64_t v73 = ((char *)v148 - (char *)v147) >> 3;
        int64_t v74 = v73 - 1;
        if ((char *)v148 - (char *)v147 < 1) {
          goto LABEL_132;
        }
        atomic_ullong v75 = v58[3];
        unint64_t v76 = (char *)(v147[v74] + 1);
        v147[v74] = (atomic_ullong)v76;
        if ((unint64_t)v76 < *(void *)(v75 + 8 * v74))
        {
LABEL_131:
          int64_t v73 = 1;
LABEL_132:
          if (v74 < 0 || !v73) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      atomic_ullong v77 = (unint64_t *)((char *)v24 + 8 * v73 - 16);
      atomic_ullong v78 = v75 - 16;
      while (1)
      {
        int64_t v79 = v73 - 1;
        v77[1] = 0;
        if (v73 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v80 = *v77 + 1;
        *v77-- = v80;
        unint64_t v81 = *(void *)(v78 + 8 * v73--);
        if (v80 < v81)
        {
          int64_t v74 = v79 - 1;
          goto LABEL_131;
        }
      }
    case 1:
      switch(BYTE4(v159[1]))
      {
        case 0:
          uint64_t v8 = (atomic_ullong *)(uint64_t)((double)(uint64_t)v159[0] - *(double *)v5);
LABEL_28:
          v159[0] = v8;
          goto LABEL_233;
        case 1:
          double v106 = *(double *)v5;
LABEL_189:
          *(double *)uint64_t v159 = *(double *)v159 - v106;
          goto LABEL_233;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v54 = (double *)v159[0][1];
          uint64_t v55 = v159[0][2] - (void)v54;
          if (v55)
          {
            double v56 = *(double *)v5;
            unint64_t v57 = v55 >> 3;
            if (v57 <= 1) {
              unint64_t v57 = 1;
            }
            do
            {
              *uint64_t v54 = *v54 - v56;
              ++v54;
              --v57;
            }
            while (v57);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 6:
          double v107 = (*(double *)v5 - (double)(uint64_t)floor(*(double *)v5)) * 1000000.0;
          unint64_t v108 = (unint64_t)v159[0];
          unint64_t v109 = (unint64_t)v159[0] - vcvtmd_s64_f64(*(double *)v5);
          v159[0] = (atomic_ullong *)((unint64_t)v159[0] & 0xFF00000000000000 | v109 & 0xFFFFFFFFFFFFFFLL);
          uint64_t v110 = SLODWORD(v159[1]) - (uint64_t)v107;
          if (v110 < 0)
          {
            v159[0] = (atomic_ullong *)((v109 - 1) & 0xFFFFFFFFFFFFFFLL | v108 & 0xFF00000000000000);
            LODWORD(v11CoreML::Specification::AdamOptimizer::New(this, 0) = v110 + 1000000;
          }
          if (v110 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          LODWORD(v159[1]) = v110;
          goto LABEL_233;
        case 7:
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          atomic_ullong v82 = v159[0];
          double v84 = (uint64_t *)v159[0][3];
          atomic_ullong v83 = v159[0][4];
          if ((uint64_t *)v83 == v84) {
            goto LABEL_233;
          }
          if (!v159[0][1]) {
            goto LABEL_233;
          }
          double v85 = *(double *)v5;
          uint64_t v86 = 1;
          do
          {
            uint64_t v87 = *v84++;
            v86 *= v87;
          }
          while (v84 != (uint64_t *)v83);
          if (!v86) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v159[0] + 1);
          unint64_t v88 = (v82[4] - v82[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v88, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v89 = v148;
          break;
        default:
          goto LABEL_300;
      }
      while (2)
      {
        uint64_t v90 = 0;
        uint64_t v91 = (char *)v89 - (char *)v24;
        if (v91)
        {
          unint64_t v92 = v91 >> 3;
          long long v93 = (uint64_t *)v82[6];
          if (v92 <= 1) {
            unint64_t v92 = 1;
          }
          do
          {
            uint64_t v95 = v24->__vftable;
            uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
            long long v94 = v95;
            uint64_t v96 = *v93++;
            v90 += v96 * (void)v94;
            --v92;
          }
          while (v92);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v82 + 1);
        *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) = *(double *)(*(void *)v82[1] + 8 * (v82[9] + v90)) - v85;
        uint64_t v24 = (std::__shared_weak_count *)v147;
        uint64_t v89 = v148;
        int64_t v97 = ((char *)v148 - (char *)v147) >> 3;
        int64_t v98 = v97 - 1;
        if ((char *)v148 - (char *)v147 < 1) {
          goto LABEL_154;
        }
        atomic_ullong v99 = v82[3];
        std::string v100 = (char *)(v147[v98] + 1);
        v147[v98] = (atomic_ullong)v100;
        if ((unint64_t)v100 < *(void *)(v99 + 8 * v98))
        {
LABEL_153:
          int64_t v97 = 1;
LABEL_154:
          if (v98 < 0 || !v97) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      atomic_ullong v101 = (unint64_t *)((char *)v24 + 8 * v97 - 16);
      atomic_ullong v102 = v99 - 16;
      while (1)
      {
        int64_t v103 = v97 - 1;
        v101[1] = 0;
        if (v97 - 1 <= 0) {
          goto LABEL_157;
        }
        unint64_t v104 = *v101 + 1;
        *v101-- = v104;
        unint64_t v105 = *(void *)(v102 + 8 * v97--);
        if (v104 < v105)
        {
          int64_t v98 = v103 - 1;
          goto LABEL_153;
        }
      }
    case 2:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 3:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          double v9 = *(double *)v5;
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v10 = v159[0];
          turi::flexible_type_fail(v10[2] - v10[1] == *(void *)(*(void *)&v9 + 16)
                                                    - *(void *)(*(void *)&v9 + 8));
          uint64_t v11 = (double *)v10[1];
          uint64_t v12 = v10[2] - (void)v11;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            double v14 = *(double **)(*(void *)&v9 + 8);
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            do
            {
              double v15 = *v14++;
              double *v11 = *v11 - v15;
              ++v11;
              --v13;
            }
            while (v13);
          }
          goto LABEL_233;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 4:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 5:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 6:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 7:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 8:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 9:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        default:
          goto LABEL_300;
      }
    case 9:
      switch(BYTE4(v159[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_232;
        case 2:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 3:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 4:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 5:
          if (*v159[0] != 1) {
            operator new();
          }
          goto LABEL_232;
        case 8:
          if (*v159[0] != 1) {
            operator new();
          }
LABEL_232:
          turi::flexible_type_fail(0);
          goto LABEL_233;
        case 9:
          double v16 = *(double *)v5;
          if (*v159[0] != 1) {
            operator new();
          }
          uint64_t v17 = v159[0];
          uint64_t v18 = v159[0] + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v159[0] + 1), *(void *)&v16 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v20 = (uint64_t *)v17[3];
          uint64_t v19 = (uint64_t *)v17[4];
          if (v19 == v20) {
            goto LABEL_233;
          }
          if (!*v18) {
            goto LABEL_233;
          }
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v20++;
            v21 *= v22;
          }
          while (v20 != v19);
          if (!v21) {
            goto LABEL_233;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v17 + 1);
          unint64_t v23 = (v17[4] - v17[3]) >> 3;
          v157.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v147, v23, &v157);
          uint64_t v24 = (std::__shared_weak_count *)v147;
          uint64_t v25 = v148;
          break;
        default:
          goto LABEL_300;
      }
      break;
    default:
LABEL_300:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  while (1)
  {
    uint64_t v26 = (char *)v25 - (char *)v24;
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v26 >> 3;
      std::string v29 = *(uint64_t **)(*(void *)&v16 + 48);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      unint64_t v30 = (uint64_t *)v24;
      unint64_t v31 = v28;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * (*(void *)(*(void *)&v16 + 72) + v27));
      uint64_t v37 = (uint64_t *)v17[6];
      do
      {
        uint64_t v39 = v24->__vftable;
        uint64_t v24 = (std::__shared_weak_count *)((char *)v24 + 8);
        uint64_t v38 = v39;
        uint64_t v40 = *v37++;
        v35 += v40 * (void)v38;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v35 = 0;
      double v36 = *(double *)(**(void **)(*(void *)&v16 + 8) + 8 * *(void *)(*(void *)&v16 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v17 + 1);
    *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) = *(double *)(*(void *)v17[1] + 8 * (v17[9] + v35)) - v36;
    uint64_t v24 = (std::__shared_weak_count *)v147;
    uint64_t v25 = v148;
    int64_t v41 = ((char *)v148 - (char *)v147) >> 3;
    int64_t v42 = v41 - 1;
    if ((char *)v148 - (char *)v147 < 1) {
      goto LABEL_80;
    }
    atomic_ullong v43 = v17[3];
    uint64_t v44 = (char *)(v147[v42] + 1);
    v147[v42] = (atomic_ullong)v44;
    if ((unint64_t)v44 >= *(void *)(v43 + 8 * v42)) {
      break;
    }
LABEL_79:
    int64_t v41 = 1;
LABEL_80:
    if (v42 < 0 || !v41) {
      goto LABEL_156;
    }
  }
  unsigned int v45 = (unint64_t *)((char *)v24 + 8 * v41 - 16);
  atomic_ullong v46 = v43 - 16;
  while (1)
  {
    int64_t v47 = v41 - 1;
    v45[1] = 0;
    if (v41 - 1 <= 0) {
      break;
    }
    unint64_t v48 = *v45 + 1;
    *v45-- = v48;
    unint64_t v49 = *(void *)(v46 + 8 * v41--);
    if (v48 < v49)
    {
      int64_t v42 = v47 - 1;
      goto LABEL_79;
    }
  }
LABEL_156:
  if (v24)
  {
LABEL_157:
    uint64_t v148 = v24;
    operator delete(v24);
  }
LABEL_233:
  uint64_t v111 = 0;
  switch(BYTE4(v159[1]))
  {
    case 0:
      uint64_t v111 = (uint64_t)v159[0];
      goto LABEL_290;
    case 1:
      uint64_t v111 = (uint64_t)*(double *)v159;
      goto LABEL_290;
    case 2:
      uint64_t v112 = v159[0];
      size_t __idx = 0;
      unint64_t v113 = (char *)(v159[0] + 1);
      if (*((char *)v159[0] + 31) < 0) {
        unint64_t v113 = (char *)v159[0][1];
      }
      uint64_t v114 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v157, v113);
      uint64_t v111 = std::stoll(v114, &__idx, 10);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (*((char *)v112 + 31) < 0) {
        atomic_ullong v115 = v112[2];
      }
      else {
        atomic_ullong v115 = *((unsigned __int8 *)v112 + 31);
      }
      if (__idx != v115)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v134 = std::string::append(&v156, " cannot be interpreted as an integer");
        long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v135;
        v134->__r_.__value_.__l.__size_ = 0;
        v134->__r_.__value_.__r.__words[2] = 0;
        v134->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v157);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_257;
    case 3:
      unint64_t v154 = 0;
      uint64_t v155 = 0;
      uint64_t v153 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v153, *((const void **)v159[0] + 1), v159[0][2], (v159[0][2] - v159[0][1]) >> 3);
      turi::flexible_type_fail(0);
      if (v153)
      {
        unint64_t v154 = v153;
        operator delete(v153);
      }
      goto LABEL_256;
    case 4:
      memset(v146, 0, sizeof(v146));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v146, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 4);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 5:
      memset(v145, 0, sizeof(v145));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v145, *((uint64_t **)v159[0] + 1), *((uint64_t **)v159[0] + 2), (v159[0][2] - v159[0][1]) >> 5);
      turi::flexible_type_fail(0);
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
      goto LABEL_256;
    case 6:
      uint64_t v111 = (uint64_t)v159[0] << 8 >> 8;
      goto LABEL_290;
    case 7:
      goto LABEL_290;
    case 8:
      unint64_t v116 = v159[0];
      uint64_t v117 = (atomic_uint *)v159[0][2];
      atomic_ullong v140 = v159[0][1];
      unsigned int v141 = v117;
      if (v117) {
        atomic_fetch_add_explicit(v117 + 2, 1u, memory_order_relaxed);
      }
      long long v118 = *(_OWORD *)(v116 + 3);
      long long v119 = *(_OWORD *)(v116 + 5);
      long long v144 = *(_OWORD *)(v116 + 7);
      long long v143 = v119;
      long long v142 = v118;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v141);
      goto LABEL_256;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v147, (uint64_t)(v159[0] + 1));
      turi::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v152 = __p;
        operator delete(__p);
      }
      if (v149)
      {
        BOOL v150 = v149;
        operator delete(v149);
      }
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
LABEL_256:
      uint64_t v111 = 0;
LABEL_257:
      switch(BYTE4(v159[1]))
      {
        case 2:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v120 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            if (*((char *)v159[0] + 31) < 0) {
              operator delete(*((void **)v159[0] + 1));
            }
            unsigned int v121 = v120;
            uint64_t v122 = 0x1012C404EF22A49;
            goto LABEL_288;
          }
          break;
        case 3:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v129 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            int v130 = (void *)v159[0][1];
            if (v130)
            {
              v159[0][2] = (atomic_ullong)v130;
              operator delete(v130);
            }
            unsigned int v121 = v129;
            uint64_t v122 = 0x1080C409938AC02;
            goto LABEL_288;
          }
          break;
        case 4:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = v159[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
            goto LABEL_283;
          }
          break;
        case 5:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v123 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            uint64_t v147 = v159[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
LABEL_283:
            unsigned int v121 = v123;
            uint64_t v122 = 0x1020C405E66F15BLL;
            goto LABEL_288;
          }
          break;
        case 8:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v131 = v159[0];
            if (!v159[0]) {
              goto LABEL_289;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v159[0] + 2);
            unsigned int v121 = v131;
            unsigned int v128 = -235920773;
            goto LABEL_287;
          }
          break;
        case 9:
          if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v124 = v159[0];
            if (v159[0])
            {
              unint64_t v125 = (void *)v159[0][6];
              if (v125)
              {
                v159[0][7] = (atomic_ullong)v125;
                operator delete(v125);
              }
              double v126 = (void *)v124[3];
              if (v126)
              {
                v124[4] = (atomic_ullong)v126;
                operator delete(v126);
              }
              uint64_t v127 = (std::__shared_weak_count *)v124[2];
              if (v127) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v127);
              }
              unsigned int v121 = v124;
              unsigned int v128 = 2071181815;
LABEL_287:
              uint64_t v122 = v128 | 0x1030C4000000000;
LABEL_288:
              MEMORY[0x22A614FA0](v121, v122);
            }
LABEL_289:
            v159[0] = 0;
          }
          break;
        default:
          break;
      }
LABEL_290:
      memset(v159, 0, 13);
      if (v137 < 0) {
        operator delete(v136[0]);
      }
      if (v139 < 0) {
        operator delete(v138[0]);
      }
      uint64_t result = v111;
      break;
    default:
      goto LABEL_300;
  }
  return result;
}

void sub_224019878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  MEMORY[0x22A614FA0](v37, 0x1020C405E66F15BLL);
  switch(*(unsigned char *)(v38 - 76))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v39 = *(void *)(v38 - 88);
      if (!v39) {
        goto LABEL_27;
      }
      if (*(char *)(v39 + 31) < 0) {
        operator delete(*(void **)(v39 + 8));
      }
      uint64_t v40 = (void *)v39;
      uint64_t v41 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v42 = *(void **)(v38 - 88);
      if (!v42) {
        goto LABEL_27;
      }
      atomic_ullong v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      uint64_t v40 = v42;
      uint64_t v41 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64_t v47 = *(void **)(v38 - 88);
      if (!v47) {
        goto LABEL_27;
      }
      a22 = v47 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_25:
      uint64_t v40 = v47;
      uint64_t v41 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void *)(v38 - 88);
      if (!v44) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v44 + 16));
      uint64_t v40 = (void *)v44;
      unsigned int v45 = -235920773;
      goto LABEL_18;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong v46 = *(void **)(v38 - 88);
      if (!v46) {
        goto LABEL_27;
      }
      uint64_t v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v46);
      unsigned int v45 = 2071181815;
LABEL_18:
      uint64_t v41 = v45 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v40, v41);
LABEL_27:
      *(void *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      *(unsigned char *)(v38 - 76) = 0;
      if (a15 < 0) {
        operator delete(__p);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 8)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401A270(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 129, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401A414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 10)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length((uint64_t)v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401A59C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 137, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401A740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 11)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401A8C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401AA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 12)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401ABF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401AD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(int **a1)
{
  uint64_t v1 = *a1;
  int v7 = **a1;
  if (v7 != 14)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (void *)*((void *)v1 + 7);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401AF20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 163, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401B0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)a1 + 56);
  uint64_t v2 = *(void *)(*(void *)a1 + 64) - (void)v1;
  uint64_t v7 = v2 >> 4;
  if (v2 != 16)
  {
    long long v6[2] = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::infer_planner_node_length(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_22401B250(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", "operator()", 62, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401B3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::any::holder<long long>::~holder()
{
}

uint64_t turi::any::holder<long long>::type()
{
  return MEMORY[0x263F8C290];
}

void turi::any::holder<long long>::clone()
{
}

uint64_t turi::any::holder<long long>::deserializer_id()
{
  return turi::any::holder<long long>::registry;
}

uint64_t turi::any::holder<long long>::deep_op_equal(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

char *turi::any::holder<long long>::save(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)*a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = v4[5];
    if (v4[4] + 8 > v5)
    {
      size_t v11 = 2 * v5 + 16;
      void v4[5] = v11;
      uint64_t v12 = (char **)v4[2];
      if (v12)
      {
        uint64_t v6 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append((std::vector<char> *)v4[2], v15);
          uint64_t v6 = *(char **)v4[2];
        }
        else if (!v14)
        {
          v12[1] = &v6[v11];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc((void *)v4[3], v11, 0xF6EA6B1uLL);
      }
      v4[3] = v6;
    }
    else
    {
      uint64_t v6 = (char *)v4[3];
    }
    *(void *)&v6[v4[4]] = turi::any::holder<long long>::registry;
    v4[4] += 8;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = (void *)*a2;
  if (*v8)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v10 = v8[5];
    if (v8[4] + 8 > v10)
    {
      size_t v16 = 2 * v10 + 16;
      v8[5] = v16;
      uint64_t v17 = (char **)v8[2];
      if (v17)
      {
        uint64_t result = *v17;
        size_t v18 = v17[1] - *v17;
        BOOL v19 = v16 >= v18;
        std::vector<char>::size_type v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append((std::vector<char> *)v8[2], v20);
          uint64_t result = *(char **)v8[2];
        }
        else if (!v19)
        {
          v17[1] = &result[v16];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc((void *)v8[3], v16, 0xF6EA6B1uLL);
      }
      void v8[3] = result;
    }
    else
    {
      uint64_t result = (char *)v8[3];
    }
    *(void *)&result[v8[4]] = *v7;
    v8[4] += 8;
  }
  return result;
}

uint64_t turi::any::holder<long long>::print(uint64_t a1, uint64_t a2)
{
  return a2;
}

void turi::any::holder<long long>::deserialize()
{
}

void sub_22401B7B0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void *turi::any::holder<long long>::holder(void *a1, uint64_t *a2)
{
  *a1 = &unk_26D768B20;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 16);
  if (v4)
  {
    a1[1] = *(void *)(v4 + *(void *)(v3 + 24));
    *(void *)(v3 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  return a1;
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)0>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401B8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)1>::get(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node((uint64_t)&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401B908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)2>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401B970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)3>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401B9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)4>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)5>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)6>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)7>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)8>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)10>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)11>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)13>::get(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  v2[0] = *(uint64_t ***)a1;
  v2[1] = (uint64_t **)v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(v2);
}

void sub_22401BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)12>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)14>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22401BDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)15>::get(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_22401BE34(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(uint64_t ***a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v57.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (!LODWORD(v57.__r_.__value_.__l.__data_))
  {
    uint64_t v5 = (uint64_t)(v3 + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "value");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v7 = (uint64_t)(*a1 + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
    if (!v8) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
    }
    uint64_t v9 = (uint64_t)(*a1 + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v9, (const void **)__p);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
    if (!v10) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
    }
    uint64_t v11 = (uint64_t)(*a1 + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "type");
    uint64_t v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v11, (const void **)__p);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
    if (!v12) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator()();
    }
    uint64_t v52 = 0;
    size_t v13 = *a1 + 1;
    std::string::basic_string[abi:ne180100]<0>(v50, "end_index");
    __p[0] = v50;
    BOOL v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    uint64_t v15 = 0;
    switch(*((unsigned char *)v14 + 68))
    {
      case 0:
        uint64_t v15 = *((void *)v14 + 7);
        goto LABEL_38;
      case 1:
        uint64_t v15 = (uint64_t)*((double *)v14 + 7);
        goto LABEL_38;
      case 2:
        uint64_t v17 = *((void *)v14 + 7);
        __idx[0] = 0;
        size_t v18 = (char *)(v17 + 8);
        if (*(char *)(v17 + 31) < 0) {
          size_t v18 = *(char **)(v17 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v18);
        uint64_t v15 = std::stoll((const std::string *)__p, __idx, 10);
        if (SBYTE7(v54) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v17 + 31) < 0) {
          uint64_t v19 = *(void *)(v17 + 16);
        }
        else {
          uint64_t v19 = *(unsigned __int8 *)(v17 + 31);
        }
        if (__idx[0] != v19)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          atomic_ullong v43 = std::string::append(&v57, " cannot be interpreted as an integer");
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          *(void *)&long long v54 = *((void *)&v43->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_38;
      case 3:
        uint64_t v16 = *((void *)v14 + 7);
        __p[1] = 0;
        *(void *)&long long v54 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v16 + 8), *(void *)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_37;
      case 4:
        uint64_t v20 = *((void *)v14 + 7);
        __p[1] = 0;
        *(void *)&long long v54 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        goto LABEL_37;
      case 5:
        uint64_t v21 = *((void *)v14 + 7);
        __p[1] = 0;
        *(void *)&long long v54 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        goto LABEL_37;
      case 6:
        uint64_t v15 = (uint64_t)(*((void *)v14 + 7) << 8) >> 8;
        goto LABEL_38;
      case 7:
        goto LABEL_38;
      case 8:
        uint64_t v22 = *((void *)v14 + 7);
        unint64_t v23 = *(atomic_uint **)(v22 + 16);
        __p[0] = *(void **)(v22 + 8);
        __p[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 2, 1u, memory_order_relaxed);
        }
        long long v24 = *(_OWORD *)(v22 + 24);
        long long v25 = *(_OWORD *)(v22 + 56);
        long long v55 = *(_OWORD *)(v22 + 40);
        long long v56 = v25;
        long long v54 = v24;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_37;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v14 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v55 + 1))
        {
          *(void *)&long long v56 = *((void *)&v55 + 1);
          operator delete(*((void **)&v55 + 1));
        }
        if ((void)v54)
        {
          *((void *)&v54 + 1) = v54;
          operator delete((void *)v54);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_37:
        uint64_t v15 = 0;
LABEL_38:
        uint64_t v26 = *a1;
        std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
        __p[0] = __idx;
        uint64_t v27 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 1, (const void **)__idx, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        uint64_t v28 = 0;
        switch(*((unsigned char *)v27 + 68))
        {
          case 0:
            uint64_t v28 = *((void *)v27 + 7);
            goto LABEL_62;
          case 1:
            uint64_t v28 = (uint64_t)*((double *)v27 + 7);
            goto LABEL_62;
          case 2:
            uint64_t v30 = *((void *)v27 + 7);
            size_t v58 = 0;
            unint64_t v31 = (char *)(v30 + 8);
            if (*(char *)(v30 + 31) < 0) {
              unint64_t v31 = *(char **)(v30 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v31);
            uint64_t v28 = std::stoll((const std::string *)__p, &v58, 10);
            if (SBYTE7(v54) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v30 + 31) < 0) {
              uint64_t v32 = *(void *)(v30 + 16);
            }
            else {
              uint64_t v32 = *(unsigned __int8 *)(v30 + 31);
            }
            if (v58 != v32)
            {
              unsigned int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              atomic_ullong v46 = std::string::append(&v57, " cannot be interpreted as an integer");
              long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              *(void *)&long long v54 = *((void *)&v46->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v45, (const std::string *)__p);
              __cxa_throw(v45, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_62;
          case 3:
            uint64_t v29 = *((void *)v27 + 7);
            __p[1] = 0;
            *(void *)&long long v54 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v29 + 8), *(void *)(v29 + 16), (uint64_t)(*(void *)(v29 + 16) - *(void *)(v29 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_61;
          case 4:
            uint64_t v33 = *((void *)v27 + 7);
            __p[1] = 0;
            *(void *)&long long v54 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            goto LABEL_61;
          case 5:
            uint64_t v34 = *((void *)v27 + 7);
            __p[1] = 0;
            *(void *)&long long v54 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(void *)(v34 + 16) - *(void *)(v34 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            goto LABEL_61;
          case 6:
            uint64_t v28 = (uint64_t)(*((void *)v27 + 7) << 8) >> 8;
            goto LABEL_62;
          case 7:
            goto LABEL_62;
          case 8:
            uint64_t v35 = *((void *)v27 + 7);
            double v36 = *(atomic_uint **)(v35 + 16);
            __p[0] = *(void **)(v35 + 8);
            __p[1] = v36;
            if (v36) {
              atomic_fetch_add_explicit(v36 + 2, 1u, memory_order_relaxed);
            }
            long long v37 = *(_OWORD *)(v35 + 24);
            long long v38 = *(_OWORD *)(v35 + 56);
            long long v55 = *(_OWORD *)(v35 + 40);
            long long v56 = v38;
            long long v54 = v37;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_61;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v27 + 7) + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v55 + 1))
            {
              *(void *)&long long v56 = *((void *)&v55 + 1);
              operator delete(*((void **)&v55 + 1));
            }
            if ((void)v54)
            {
              *((void *)&v54 + 1) = v54;
              operator delete((void *)v54);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_61:
            uint64_t v28 = 0;
LABEL_62:
            if (v49 < 0) {
              operator delete((void *)__idx[0]);
            }
            uint64_t v39 = v15 - v28;
            if (v51 < 0) {
              operator delete(v50[0]);
            }
            uint64_t v52 = v39;
            uint64_t v40 = *a1 + 1;
            std::string::basic_string[abi:ne180100]<0>(__p, "value");
            v50[0] = __p;
            uint64_t v41 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v50);
            std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type &,unsigned long &,void>(v41 + 7, &v52, &v57);
            *a2 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
            if (SBYTE7(v54) < 0) {
              operator delete(__p[0]);
            }
            return;
          default:
            turi::flexible_type_fail(0);
            break;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        break;
    }
    __break(1u);
  }
  __p[0] = &v57;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_22401C5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 57) < 0)
  {
    operator delete(*(void **)(v30 - 80));
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      if (a21 < 0) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 93, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  size_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401C9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"value\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 94, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401CBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 95, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401CFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"type\")", 40);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 97, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401D1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22401D324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768B88;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type &,unsigned long &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_22401D398(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  int v5 = *((_DWORD *)a3 + 2);
  unsigned int v6 = *((unsigned __int8 *)a3 + 12);
  switch(*((unsigned char *)a3 + 12))
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      atomic_fetch_add((atomic_ullong *volatile)v4, 1uLL);
      break;
    default:
      break;
  }
  uint64_t v7 = *a4;
  *(void *)a2 = &unk_26D768BD8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = v4;
  *(_DWORD *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 6CoreML::Specification::AdamOptimizer::New(this, 0) = v6;
  if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
    atomic_fetch_add((atomic_ullong *volatile)v4, 1uLL);
  }
  *(void *)(a2 + 64) = v7;
  switch(v6)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*(void **)(v4 + 8));
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      uint64_t v10 = *(void **)(v4 + 8);
      if (v10)
      {
        *(void *)(v4 + 16) = v10;
        operator delete(v10);
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      size_t v18 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
      goto LABEL_31;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      size_t v18 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_31:
      MEMORY[0x22A614FA0](v4, 0x1020C405E66F15BLL);
      return;
    case 8u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v4 + 16));
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      char v15 = *(void **)(v4 + 48);
      if (v15)
      {
        *(void *)(v4 + 56) = v15;
        operator delete(v15);
      }
      uint64_t v16 = *(void **)(v4 + 24);
      if (v16)
      {
        *(void *)(v4 + 32) = v16;
        operator delete(v16);
      }
      uint64_t v17 = *(std::__shared_weak_count **)(v4 + 16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      break;
    default:
      return;
  }
  JUMPOUT(0x22A614FA0);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(uint64_t a1)
{
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(a1);
  JUMPOUT(0x22A614FA0);
}

BOOL turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::coro_running(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::print(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "constant(");
  uint64_t v4 = (turi::flexible_type_impl *)(a1 + 48);
  switch(*(unsigned char *)(a1 + 60))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      v16[0] = *MEMORY[0x263F8C2B8];
      uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      void v16[2] = v7;
      v16[3] = MEMORY[0x263F8C318] + 16;
      if (v17 < 0) {
        operator delete((void *)v16[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v18);
      goto LABEL_17;
    case 2:
      uint64_t v5 = *(void *)v4;
      if (*(char *)(*(void *)v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 8);
        v13.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (void *)(*(void *)v4 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (uint64_t *)(*(void *)v4 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (void *)(*(void *)v4 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v4, &v13);
      goto LABEL_17;
    case 7:
      memset(&v13, 0, sizeof(v13));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (void *)(*(void *)v4 + 8));
LABEL_17:
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v13;
      }
      else {
        uint64_t v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v13.__r_.__value_.__l.__size_;
      }
      uint64_t v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v15, ")");
      *a2 = *v12;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_22401DAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type const&,unsigned long const&,void>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 64), v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 73)
  {
    unint64_t v5 = *(void *)(a1 + 32) + *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v5;
  }
  else
  {
    if (v4) {
      return;
    }
    unint64_t v5 = 0;
    *(void *)(a1 + 32) = 0;
  }
  if (v5 >= *(void *)(a1 + 64))
  {
    int v29 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v30);
    long long v6 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v30;
    long long v30 = 0uLL;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (*((void *)&v30 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
      }
    }
    if (*(void *)this >= *(void *)(a1 + 64) - *(void *)(a1 + 32)) {
      unint64_t v7 = *(void *)(a1 + 64) - *(void *)(a1 + 32);
    }
    else {
      unint64_t v7 = *(void *)this;
    }
    *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v7;
    turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 16), 1uLL, v7);
    uint64_t v8 = *(void *)(a1 + 16);
    if (!*(unsigned char *)(v8 + 24)) {
      turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 16));
    }
    uint64_t v9 = **(uint64_t ***)v8;
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 != v11)
    {
      uint64_t v12 = (uint64_t *)(a1 + 48);
      do
      {
        if ((uint64_t *)v10 != v12)
        {
          switch(*(unsigned char *)(v10 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v10;
                if (!*(void *)v10) {
                  goto LABEL_49;
                }
                if (*((char *)v13 + 31) < 0) {
                  operator delete((void *)v13[1]);
                }
                atomic_ullong *volatile v14 = v13;
                uint64_t v15 = 0x1012C404EF22A49;
                goto LABEL_48;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v10;
                if (!*(void *)v10) {
                  goto LABEL_49;
                }
                char v17 = (void *)v16[1];
                if (v17)
                {
                  void v16[2] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                atomic_ullong *volatile v14 = v16;
                uint64_t v15 = 0x1080C409938AC02;
                goto LABEL_48;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v10;
                if (!*(void *)v10) {
                  goto LABEL_49;
                }
                *(void *)&long long v30 = v18 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
                goto LABEL_34;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v10;
                if (!*(void *)v10) {
                  goto LABEL_49;
                }
                *(void *)&long long v30 = v18 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
LABEL_34:
                atomic_ullong *volatile v14 = v18;
                uint64_t v15 = 0x1020C405E66F15BLL;
                goto LABEL_48;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v10;
                if (!*(void *)v10) {
                  goto LABEL_49;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
                atomic_ullong *volatile v14 = v19;
                unsigned int v20 = -235920773;
                goto LABEL_47;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v10;
                if (*(void *)v10)
                {
                  uint64_t v22 = (void *)v21[6];
                  if (v22)
                  {
                    v21[7] = (atomic_ullong)v22;
                    operator delete(v22);
                  }
                  unint64_t v23 = (void *)v21[3];
                  if (v23)
                  {
                    void v21[4] = (atomic_ullong)v23;
                    operator delete(v23);
                  }
                  long long v24 = (std::__shared_weak_count *)v21[2];
                  if (v24) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                  }
                  atomic_ullong *volatile v14 = v21;
                  unsigned int v20 = 2071181815;
LABEL_47:
                  uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_48:
                  MEMORY[0x22A614FA0](v14, v15);
                }
LABEL_49:
                *(void *)uint64_t v10 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v25 = *v12;
          *(void *)(v10 + 5) = *(void *)(a1 + 53);
          *(void *)uint64_t v10 = v25;
          LODWORD(v25) = *(unsigned __int8 *)(a1 + 60);
          *(unsigned char *)(v10 + 12) = v25;
          BOOL v26 = v25 > 9;
          int v27 = (1 << v25) & 0x33C;
          if (!v26 && v27 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v10, 1uLL);
          }
        }
        v10 += 16;
      }
      while (v10 != v11);
    }
    turi::query_eval::query_context::emit((uint64_t)this, (long long *)(a1 + 16));
    int v29 = 73;
  }
  *(_DWORD *)(a1 + 8) = v29;
}

void *turi::query_eval::query_operator::print@<X0>(turi::query_eval::query_operator *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(turi::query_eval::query_operator *))(*(void *)this + 16))(this);
  return turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>(v3, a2);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26D768BD8;
  switch(*(unsigned char *)(a1 + 60))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 48);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = *(void **)(a1 + 48);
        if (v5)
        {
          long long v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        if (v7)
        {
          atomic_ullong *volatile v16 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        if (v7)
        {
          atomic_ullong *volatile v16 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 48);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 48);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 6CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
  atomic_ullong *volatile v14 = *(std::__shared_weak_count **)(a1 + 24);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type const&,unsigned long const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type const&,unsigned long const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22401E198(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type const&,unsigned long const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768B88;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type const&,unsigned long const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_22401E20C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type const&,unsigned long const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  int v5 = *((_DWORD *)a3 + 2);
  unsigned int v6 = *((unsigned __int8 *)a3 + 12);
  switch(*((unsigned char *)a3 + 12))
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      atomic_fetch_add((atomic_ullong *volatile)v4, 1uLL);
      break;
    default:
      break;
  }
  uint64_t v7 = *a4;
  *(void *)a2 = &unk_26D768BD8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = v4;
  *(_DWORD *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 6CoreML::Specification::AdamOptimizer::New(this, 0) = v6;
  if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
    atomic_fetch_add((atomic_ullong *volatile)v4, 1uLL);
  }
  *(void *)(a2 + 64) = v7;
  switch(v6)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*(void **)(v4 + 8));
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      uint64_t v10 = *(void **)(v4 + 8);
      if (v10)
      {
        *(void *)(v4 + 16) = v10;
        operator delete(v10);
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      atomic_ullong *volatile v18 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
      goto LABEL_31;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      atomic_ullong *volatile v18 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_31:
      MEMORY[0x22A614FA0](v4, 0x1020C405E66F15BLL);
      return;
    case 8u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v4 + 16));
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) != 1 || v4 == 0) {
        return;
      }
      uint64_t v15 = *(void **)(v4 + 48);
      if (v15)
      {
        *(void *)(v4 + 56) = v15;
        operator delete(v15);
      }
      atomic_ullong *volatile v16 = *(void **)(v4 + 24);
      if (v16)
      {
        *(void *)(v4 + 32) = v16;
        operator delete(v16);
      }
      char v17 = *(std::__shared_weak_count **)(v4 + 16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      break;
    default:
      return;
  }
  JUMPOUT(0x22A614FA0);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 64) - *(void *)(*(void *)a1 + 56);
  uint64_t v8 = v4 >> 4;
  if (v4 != 32)
  {
    uint64_t v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  LODWORD(v7) = *v3;
  if (v7 != 1)
  {
    uint64_t v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  int v5 = (char *)operator new(0x88uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26D768C48;
  *((void *)v5 + 3) = &unk_26D768C98;
  *((_DWORD *)v5 + 8) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  atomic_ullong *volatile v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  atomic_ullong *volatile v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768C98;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768C98;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::clone@<D0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26D768C48;
  *((void *)v2 + 3) = &unk_26D768C98;
  *((_DWORD *)v2 + 8) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 12CoreML::Specification::AdamOptimizer::New(this, 0) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v3 = *(_DWORD *)(a1 + 8);
  switch(v3)
  {
    case 98:
      goto LABEL_9;
    case 85:
      turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v28);
      long long v6 = v28;
      long long v28 = 0uLL;
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      *(_OWORD *)(a1 + 16) = v6;
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
      }
      turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 16), (uint64_t)(*(void *)(*(void *)(a1 + 48) + 8) - **(void **)(a1 + 48)) >> 4, *(void *)this);
      *(void *)(a1 + 32) = 0;
      goto LABEL_38;
    case 0:
      unint64_t v5 = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
      while (v5 <= 1)
      {
        turi::query_eval::query_context::get_next((turi::query_eval::execution_node **)this, v5, &v28);
        long long v9 = v28;
        long long v28 = 0uLL;
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
        *(_OWORD *)(a1 + 48) = v9;
        uint64_t v11 = v9;
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          if (*((void *)&v28 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
          }
          uint64_t v11 = *(void *)(a1 + 48);
        }
        if (v11 && !*(void *)(a1 + 16))
        {
          turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v28);
          long long v12 = v28;
          long long v28 = 0uLL;
          atomic_ullong *volatile v13 = *(std::__shared_weak_count **)(a1 + 24);
          *(_OWORD *)(a1 + 16) = v12;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            if (*((void *)&v28 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
            }
          }
          turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 16), (uint64_t)(*(void *)(*(void *)(a1 + 48) + 8) - **(void **)(a1 + 48)) >> 4, *(void *)this);
          *(void *)(a1 + 32) = 0;
        }
        while (1)
        {
          char v17 = *(void ***)(a1 + 48);
          if (!v17) {
            break;
          }
          uint64_t v18 = 0;
          *(void *)(a1 + 64) = 0;
          *(void *)(a1 + 72) = v17;
          *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = 0;
          if (*v17 != v17[1])
          {
            uint64_t v18 = 0;
            atomic_ullong *volatile v19 = (void *)**v17;
            if (v19) {
              uint64_t v18 = (uint64_t)(*(void *)(**v17 + 8) - *v19) >> 4;
            }
          }
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          *(void *)(a1 + 88) = 0;
          *(void *)(a1 + 96) = v17;
          *(void *)(a1 + 104) = v18;
          while (v22 != v21 || v20 != v18)
          {
            atomic_ullong *volatile v16 = (long long *)(a1 + 16);
            uint64_t v25 = *(void *)(a1 + 16);
            uint64_t v26 = *(void *)(a1 + 32);
            if (!*(unsigned char *)(v25 + 24)) {
              turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 16));
            }
            *(void *)&long long v28 = v25;
            *((void *)&v28 + 1) = v26;
            turi::sframe_rows::row::operator=((uint64_t **)&v28, (void *)(a1 + 72));
            uint64_t v27 = *(void *)(a1 + 32) + 1;
            *(void *)(a1 + 32) = v27;
            if (v27 == *(void *)this)
            {
              int v8 = 85;
              goto LABEL_40;
            }
LABEL_38:
            uint64_t v21 = *(void *)(a1 + 88);
            uint64_t v20 = *(void *)(a1 + 80) + 1;
            *(void *)(a1 + 8CoreML::Specification::AdamOptimizer::New(this, 0) = v20;
            uint64_t v22 = *(void *)(a1 + 64);
            uint64_t v18 = *(void *)(a1 + 104);
          }
          turi::query_eval::query_context::get_next((turi::query_eval::execution_node **)this, *(void *)(a1 + 40), &v28);
          long long v23 = v28;
          long long v28 = 0uLL;
          long long v24 = *(std::__shared_weak_count **)(a1 + 56);
          *(_OWORD *)(a1 + 48) = v23;
          if (v24)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            if (*((void *)&v28 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
            }
          }
        }
        unint64_t v5 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 4CoreML::Specification::AdamOptimizer::New(this, 0) = v5;
      }
      unint64_t v14 = *(void *)(a1 + 32);
      if (v14)
      {
        atomic_ullong *volatile v16 = (long long *)(a1 + 16);
        char v15 = *(turi::sframe_rows **)(a1 + 16);
        if (v15)
        {
          turi::sframe_rows::resize(v15, (uint64_t)(*((void *)v15 + 1) - *(void *)v15) >> 4, v14);
          int v8 = 98;
LABEL_40:
          turi::query_eval::query_context::emit((uint64_t)this, v16);
          goto LABEL_41;
        }
      }
LABEL_9:
      int v8 = 0;
LABEL_41:
      *(_DWORD *)(a1 + 8) = v8;
      break;
  }
}

uint64_t **turi::sframe_rows::row::operator=(uint64_t **a1, void *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v29 = (v3 - v2) >> 4;
  uint64_t v28 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 4;
  if (v29 != v28)
  {
    v27[0] = (void **)&v29;
    v27[1] = (void **)&v28;
    turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()();
  }
  if (v3 != v2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = **(void **)(*(void *)*a2 + v6) + 16 * a2[1];
      uint64_t v9 = **(void **)(v2 + v6) + 16 * (void)a1[1];
      if (v8 != v9)
      {
        switch(*(unsigned char *)(v9 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_37;
              }
              if (*((char *)v10 + 31) < 0) {
                operator delete((void *)v10[1]);
              }
              atomic_ullong *volatile v11 = v10;
              uint64_t v12 = 0x1012C404EF22A49;
              goto LABEL_36;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_37;
              }
              uint64_t v20 = (void *)v19[1];
              if (v20)
              {
                v19[2] = (atomic_ullong)v20;
                operator delete(v20);
              }
              atomic_ullong *volatile v11 = v19;
              uint64_t v12 = 0x1080C409938AC02;
              goto LABEL_36;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_37;
              }
              v27[0] = (void **)(v13 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v27);
              goto LABEL_31;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_37;
              }
              v27[0] = (void **)(v13 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v27);
LABEL_31:
              atomic_ullong *volatile v11 = v13;
              uint64_t v12 = 0x1020C405E66F15BLL;
              goto LABEL_36;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_37;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
              atomic_ullong *volatile v11 = v21;
              unsigned int v18 = -235920773;
              goto LABEL_35;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                char v15 = (void *)v14[6];
                if (v15)
                {
                  v14[7] = (atomic_ullong)v15;
                  operator delete(v15);
                }
                atomic_ullong *volatile v16 = (void *)v14[3];
                if (v16)
                {
                  void v14[4] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                char v17 = (std::__shared_weak_count *)v14[2];
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                atomic_ullong *volatile v11 = v14;
                unsigned int v18 = 2071181815;
LABEL_35:
                uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_36:
                MEMORY[0x22A614FA0](v11, v12);
              }
LABEL_37:
              *(void *)uint64_t v9 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v22 = *(void *)v8;
        *(void *)(v9 + 5) = *(void *)(v8 + 5);
        *(void *)uint64_t v9 = v22;
        LODWORD(v22) = *(unsigned __int8 *)(v8 + 12);
        *(unsigned char *)(v9 + 12) = v22;
        BOOL v23 = v22 > 9;
        int v24 = (1 << v22) & 0x33C;
        if (!v23 && v24 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
        }
      }
      ++v7;
      uint64_t v2 = **a1;
      v6 += 16;
    }
    while (v7 < ((*a1)[1] - v2) >> 4);
  }
  return a1;
}

void turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.hpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size()", 6);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  atomic_ullong *volatile v10 = (void *)std::ostream::operator<<();
  atomic_ullong *volatile v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.hpp", "operator()", 203, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  atomic_ullong *volatile v13 = v16;
  turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}