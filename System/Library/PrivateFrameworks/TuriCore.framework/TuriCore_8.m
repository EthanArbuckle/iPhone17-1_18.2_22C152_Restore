void sub_2241DE834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;
  int v37;
  uint64_t v38;

  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0)
  {
    operator delete(*(void **)(v38 - 144));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a9) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (long long *)&a3[a5];
      }
      else
      {
        v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v18);
      }
      else {
        v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>((uint64_t)&__v, (long long *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_2241DED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(void *)(a1 + 16) = v4;
}

void sub_2241DEDDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D7708A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7708A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  v139[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(***(void ***)(a1 + 8) + 32))(v136);
  std::vector<turi::flexible_type>::vector(v134, **(void **)(a1 + 16) + **(void **)(a1 + 24) - 1);
  v5 = *a3;
  if (!*((unsigned char *)v5 + 24))
  {
    turi::sframe_rows::ensure_unique(v5);
    if (!*((unsigned char *)v5 + 24)) {
      turi::sframe_rows::ensure_unique(v5);
    }
  }
  if (*(void *)v5 != *((void *)v5 + 1))
  {
    v6 = **(void ***)v5;
    if (v6)
    {
      uint64_t v7 = *(void *)(**(void **)v5 + 8) - *v6;
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v132 = v7 >> 4;
        while (1)
        {
          v9 = (unsigned char *)(**(void **)(*(void *)v5 + 16 * **(void **)(a1 + 32)) + 16 * v8);
          char v10 = v9[12];
          switch(v10)
          {
            case 3:
              uint64_t v11 = (void *)(*(void *)v9 + 8);
              v12 = (void *)(*(void *)v9 + 16);
              char v13 = 3;
              goto LABEL_12;
            case 4:
              uint64_t v11 = (void *)(*(void *)v9 + 8);
              v12 = (void *)(*(void *)v9 + 16);
              char v13 = 4;
              goto LABEL_12;
            case 5:
              uint64_t v11 = (void *)(*(void *)v9 + 8);
              v12 = (void *)(*(void *)v9 + 16);
              char v13 = 5;
LABEL_12:
              uint64_t v14 = (uint64_t)(*v12 - *v11) >> v13;
              goto LABEL_13;
            case 7:
              goto LABEL_165;
            case 9:
              v82 = *(uint64_t **)(*(void *)v9 + 24);
              v81 = *(uint64_t **)(*(void *)v9 + 32);
              if (v81 == v82 || !*(void *)(*(void *)v9 + 8)) {
                goto LABEL_165;
              }
              uint64_t v14 = 1;
              do
              {
                uint64_t v83 = *v82++;
                v14 *= v83;
              }
              while (v82 != v81);
LABEL_13:
              if (v14)
              {
LABEL_14:
                unint64_t v15 = 0;
                for (i = **(void **)(*(void *)v5 + 16 * **(void **)(a1 + 32)) + 16 * v8; ; char v10 = *(unsigned char *)(i + 12))
                {
                  unint64_t v16 = 1;
                  switch(v10)
                  {
                    case 3:
                      uint64_t v17 = (void *)(*(void *)v9 + 8);
                      unint64_t v18 = (void *)(*(void *)v9 + 16);
                      char v19 = 3;
                      goto LABEL_19;
                    case 4:
                      uint64_t v17 = (void *)(*(void *)v9 + 8);
                      unint64_t v18 = (void *)(*(void *)v9 + 16);
                      char v19 = 4;
                      goto LABEL_19;
                    case 5:
                      uint64_t v17 = (void *)(*(void *)v9 + 8);
                      unint64_t v18 = (void *)(*(void *)v9 + 16);
                      char v19 = 5;
LABEL_19:
                      unint64_t v16 = (uint64_t)(*v18 - *v17) >> v19;
                      break;
                    case 9:
                      v32 = *(uint64_t **)(*(void *)v9 + 24);
                      v31 = *(uint64_t **)(*(void *)v9 + 32);
                      if (v31 == v32)
                      {
                        unint64_t v16 = 0;
                      }
                      else
                      {
                        unint64_t v16 = *(void *)(*(void *)v9 + 8);
                        if (v16)
                        {
                          unint64_t v16 = 1;
                          do
                          {
                            uint64_t v33 = *v32++;
                            v16 *= v33;
                          }
                          while (v32 != v31);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                  if (v15 >= v16) {
                    goto LABEL_286;
                  }
                  int v20 = **(unsigned __int8 **)(a1 + 48);
                  if (v20 == 4) {
                    break;
                  }
                  if (v20 == 5)
                  {
                    uint64_t v21 = *(void *)v9;
                    uint64_t v22 = *(void *)(*(void *)v9 + 8) + 32 * v15;
                    uint64_t v23 = v134[0] + 16 * **(void **)(a1 + 16) - 16;
                    if (v22 != v23)
                    {
                      switch(*(unsigned char *)(v134[0] + 16 * **(void **)(a1 + 16) - 4))
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v23;
                            if (!*(void *)v23) {
                              goto LABEL_71;
                            }
                            if (*((char *)v24 + 31) < 0) {
                              operator delete((void *)v24[1]);
                            }
                            atomic_ullong *volatile v25 = v24;
                            uint64_t v26 = 0x1012C404EF22A49;
                            goto LABEL_70;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v23;
                            if (!*(void *)v23) {
                              goto LABEL_71;
                            }
                            v41 = (void *)v40[1];
                            if (v41)
                            {
                              v40[2] = (atomic_ullong)v41;
                              operator delete(v41);
                            }
                            atomic_ullong *volatile v25 = v40;
                            uint64_t v26 = 0x1080C409938AC02;
                            goto LABEL_70;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v23;
                            if (!*(void *)v23) {
                              goto LABEL_71;
                            }
                            v135 = (void **)(v35 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                            goto LABEL_66;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v23;
                            if (!*(void *)v23) {
                              goto LABEL_71;
                            }
                            v135 = (void **)(v35 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_66:
                            atomic_ullong *volatile v25 = v35;
                            uint64_t v26 = 0x1020C405E66F15BLL;
                            goto LABEL_70;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)v23;
                            if (!*(void *)v23) {
                              goto LABEL_71;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v42 + 2);
                            atomic_ullong *volatile v25 = v42;
                            uint64_t v26 = 0x1030C40F1F0227BLL;
                            goto LABEL_70;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v23;
                            if (*(void *)v23)
                            {
                              v37 = (void *)v36[6];
                              if (v37)
                              {
                                v36[7] = (atomic_ullong)v37;
                                operator delete(v37);
                              }
                              v38 = (void *)v36[3];
                              if (v38)
                              {
                                v36[4] = (atomic_ullong)v38;
                                operator delete(v38);
                              }
                              v39 = (std::__shared_weak_count *)v36[2];
                              if (v39) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                              }
                              atomic_ullong *volatile v25 = v36;
                              uint64_t v26 = 0x1030C407B73B9F7;
LABEL_70:
                              MEMORY[0x22A614FA0](v25, v26);
                            }
LABEL_71:
                            *(void *)uint64_t v23 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      uint64_t v43 = *(void *)v22;
                      *(void *)(v23 + 5) = *(void *)(v22 + 5);
                      *(void *)uint64_t v23 = v43;
                      LODWORD(v43) = *(unsigned __int8 *)(v22 + 12);
                      *(unsigned char *)(v23 + 12) = v43;
                      BOOL v44 = v43 > 9;
                      int v45 = (1 << v43) & 0x33C;
                      if (!v44 && v45 != 0) {
                        atomic_fetch_add(*(atomic_ullong *volatile *)v23, 1uLL);
                      }
                    }
                    uint64_t v27 = *(void *)(v21 + 8) + 32 * v15 + 16;
                    uint64_t v28 = v134[0] + 16 * **(void **)(a1 + 16);
                    if (v27 != v28)
                    {
                      switch(*(unsigned char *)(v28 + 12))
                      {
                        case 2:
                          goto LABEL_79;
                        case 3:
                          goto LABEL_96;
                        case 4:
                          goto LABEL_84;
                        case 5:
                          goto LABEL_101;
                        case 8:
                          goto LABEL_105;
                        case 9:
                          goto LABEL_87;
                        default:
                          break;
                      }
LABEL_110:
                      uint64_t v58 = *(void *)v27;
                      *(void *)(v28 + 5) = *(void *)(v27 + 5);
                      *(void *)uint64_t v28 = v58;
                      LODWORD(v58) = *(unsigned __int8 *)(v27 + 12);
                      *(unsigned char *)(v28 + 12) = v58;
                      BOOL v44 = v58 > 9;
                      int v59 = (1 << v58) & 0x33C;
                      if (!v44 && v59 != 0) {
                        atomic_fetch_add(*(atomic_ullong *volatile *)v28, 1uLL);
                      }
                    }
                  }
                  else
                  {
                    if (v10 == 1)
                    {
                      if (v15)
                      {
LABEL_289:
                        turi::flexible_type_fail(0);
                        __break(1u);
                      }
                    }
                    else
                    {
                      if (v10 == 9)
                      {
                        uint64_t v34 = *(void *)v9;
                        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)v9 + 8));
                        v29 = *(void **)(v34 + 8);
                        unint64_t v30 = *(void *)(v34 + 72) + v15;
                      }
                      else
                      {
                        if (v10 != 3) {
                          goto LABEL_289;
                        }
                        v29 = (void *)(*(void *)v9 + 8);
                        unint64_t v30 = v15;
                      }
                      v9 = (unsigned char *)(*v29 + 8 * v30);
                    }
                    turi::flexible_type::operator=<double>(v134[0] + 16 * **(void **)(a1 + 16) - 16, v9);
                  }
LABEL_115:
                  if (**(void **)(a1 + 16))
                  {
                    uint64_t v61 = 0;
                    uint64_t v62 = 0;
                    unint64_t v63 = 0;
                    do
                    {
                      if (v63 == **(void **)(a1 + 32))
                      {
                        uint64_t v64 = v62;
                      }
                      else
                      {
                        uint64_t v65 = **(void **)(*(void *)v5 + v61) + 16 * v8;
                        uint64_t v64 = v62 + 1;
                        uint64_t v66 = v134[0] + 16 * v62;
                        if (v65 != v66)
                        {
                          switch(*(unsigned char *)(v66 + 12))
                          {
                            case 2:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v67 = *(atomic_ullong *volatile *)v66;
                                if (!*(void *)v66) {
                                  goto LABEL_151;
                                }
                                if (*((char *)v67 + 31) < 0) {
                                  operator delete((void *)v67[1]);
                                }
                                atomic_ullong *volatile v68 = v67;
                                uint64_t v69 = 0x1012C404EF22A49;
                                goto LABEL_150;
                              }
                              break;
                            case 3:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v75 = *(atomic_ullong *volatile *)v66;
                                if (!*(void *)v66) {
                                  goto LABEL_151;
                                }
                                v76 = (void *)v75[1];
                                if (v76)
                                {
                                  v75[2] = (atomic_ullong)v76;
                                  operator delete(v76);
                                }
                                atomic_ullong *volatile v68 = v75;
                                uint64_t v69 = 0x1080C409938AC02;
                                goto LABEL_150;
                              }
                              break;
                            case 4:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v70 = *(atomic_ullong *volatile *)v66;
                                if (!*(void *)v66) {
                                  goto LABEL_151;
                                }
                                v135 = (void **)(v70 + 1);
                                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                                goto LABEL_146;
                              }
                              break;
                            case 5:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v70 = *(atomic_ullong *volatile *)v66;
                                if (!*(void *)v66) {
                                  goto LABEL_151;
                                }
                                v135 = (void **)(v70 + 1);
                                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_146:
                                atomic_ullong *volatile v68 = v70;
                                uint64_t v69 = 0x1020C405E66F15BLL;
                                goto LABEL_150;
                              }
                              break;
                            case 8:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v77 = *(atomic_ullong *volatile *)v66;
                                if (!*(void *)v66) {
                                  goto LABEL_151;
                                }
                                boost::detail::shared_count::~shared_count((atomic_uint **)v77 + 2);
                                atomic_ullong *volatile v68 = v77;
                                uint64_t v69 = 0x1030C40F1F0227BLL;
                                goto LABEL_150;
                              }
                              break;
                            case 9:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v66, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v66;
                                if (*(void *)v66)
                                {
                                  v72 = (void *)v71[6];
                                  if (v72)
                                  {
                                    v71[7] = (atomic_ullong)v72;
                                    operator delete(v72);
                                  }
                                  v73 = (void *)v71[3];
                                  if (v73)
                                  {
                                    v71[4] = (atomic_ullong)v73;
                                    operator delete(v73);
                                  }
                                  v74 = (std::__shared_weak_count *)v71[2];
                                  if (v74) {
                                    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
                                  }
                                  atomic_ullong *volatile v68 = v71;
                                  uint64_t v69 = 0x1030C407B73B9F7;
LABEL_150:
                                  MEMORY[0x22A614FA0](v68, v69);
                                }
LABEL_151:
                                *(void *)uint64_t v66 = 0;
                              }
                              break;
                            default:
                              break;
                          }
                          uint64_t v78 = *(void *)v65;
                          *(void *)(v66 + 5) = *(void *)(v65 + 5);
                          *(void *)uint64_t v66 = v78;
                          LODWORD(v78) = *(unsigned __int8 *)(v65 + 12);
                          *(unsigned char *)(v66 + 12) = v78;
                          BOOL v44 = v78 > 9;
                          int v79 = (1 << v78) & 0x33C;
                          if (!v44 && v79 != 0) {
                            atomic_fetch_add(*(atomic_ullong *volatile *)v66, 1uLL);
                          }
                        }
                      }
                      ++v63;
                      v61 += 16;
                      uint64_t v62 = v64;
                    }
                    while (v63 < **(void **)(a1 + 16));
                  }
                  if (!v137) {
                    std::__throw_bad_function_call[abi:ne180100]();
                  }
                  (*(void (**)(uint64_t, void *))(*(void *)v137 + 48))(v137, v134);
                  v9 = (unsigned char *)i;
                  ++v15;
                }
                uint64_t v27 = *(void *)(*(void *)v9 + 8) + 16 * v15;
                uint64_t v28 = v134[0] + 16 * **(void **)(a1 + 16) - 16;
                if (v27 == v28) {
                  goto LABEL_115;
                }
                switch(*(unsigned char *)(v134[0] + 16 * **(void **)(a1 + 16) - 4))
                {
                  case 2:
LABEL_79:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v28;
                      if (!*(void *)v28) {
                        goto LABEL_109;
                      }
                      if (*((char *)v47 + 31) < 0) {
                        operator delete((void *)v47[1]);
                      }
                      atomic_ullong *volatile v48 = v47;
                      uint64_t v49 = 0x1012C404EF22A49;
                      goto LABEL_108;
                    }
                    break;
                  case 3:
LABEL_96:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v55 = *(atomic_ullong *volatile *)v28;
                      if (!*(void *)v28) {
                        goto LABEL_109;
                      }
                      v56 = (void *)v55[1];
                      if (v56)
                      {
                        v55[2] = (atomic_ullong)v56;
                        operator delete(v56);
                      }
                      atomic_ullong *volatile v48 = v55;
                      uint64_t v49 = 0x1080C409938AC02;
                      goto LABEL_108;
                    }
                    break;
                  case 4:
LABEL_84:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)v28;
                      if (!*(void *)v28) {
                        goto LABEL_109;
                      }
                      v135 = (void **)(v50 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                      goto LABEL_104;
                    }
                    break;
                  case 5:
LABEL_101:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)v28;
                      if (!*(void *)v28) {
                        goto LABEL_109;
                      }
                      v135 = (void **)(v50 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_104:
                      atomic_ullong *volatile v48 = v50;
                      uint64_t v49 = 0x1020C405E66F15BLL;
                      goto LABEL_108;
                    }
                    break;
                  case 8:
LABEL_105:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v28;
                      if (!*(void *)v28) {
                        goto LABEL_109;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v57 + 2);
                      atomic_ullong *volatile v48 = v57;
                      uint64_t v49 = 0x1030C40F1F0227BLL;
                      goto LABEL_108;
                    }
                    break;
                  case 9:
LABEL_87:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v51 = *(atomic_ullong *volatile *)v28;
                      if (*(void *)v28)
                      {
                        v52 = (void *)v51[6];
                        if (v52)
                        {
                          v51[7] = (atomic_ullong)v52;
                          operator delete(v52);
                        }
                        v53 = (void *)v51[3];
                        if (v53)
                        {
                          v51[4] = (atomic_ullong)v53;
                          operator delete(v53);
                        }
                        v54 = (std::__shared_weak_count *)v51[2];
                        if (v54) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                        }
                        atomic_ullong *volatile v48 = v51;
                        uint64_t v49 = 0x1030C407B73B9F7;
LABEL_108:
                        MEMORY[0x22A614FA0](v48, v49);
                      }
LABEL_109:
                      *(void *)uint64_t v28 = 0;
                    }
                    break;
                  default:
                    goto LABEL_110;
                }
                goto LABEL_110;
              }
LABEL_165:
              if (**(unsigned char **)(a1 + 40)) {
                goto LABEL_286;
              }
              uint64_t v84 = v134[0] + 16 * **(void **)(a1 + 16) - 16;
              if (**(unsigned char **)(a1 + 48) != 5)
              {
                if ((uint64_t *)v84 == &turi::FLEX_UNDEFINED) {
                  goto LABEL_241;
                }
                switch(*(unsigned char *)(v134[0] + 16 * **(void **)(a1 + 16) - 4))
                {
                  case 2:
LABEL_207:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v98 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_237;
                      }
                      if (*(char *)(v98 + 31) < 0) {
                        operator delete(*(void **)(v98 + 8));
                      }
                      v99 = (void *)v98;
                      uint64_t v100 = 0x1012C404EF22A49;
                      goto LABEL_236;
                    }
                    break;
                  case 3:
LABEL_224:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v106 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_237;
                      }
                      v107 = *(void **)(v106 + 8);
                      if (v107)
                      {
                        *(void *)(v106 + 16) = v107;
                        operator delete(v107);
                      }
                      v99 = (void *)v106;
                      uint64_t v100 = 0x1080C409938AC02;
                      goto LABEL_236;
                    }
                    break;
                  case 4:
LABEL_212:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v101 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_237;
                      }
                      v135 = (void **)(v101 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                      goto LABEL_232;
                    }
                    break;
                  case 5:
LABEL_229:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v101 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_237;
                      }
                      v135 = (void **)(v101 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_232:
                      v99 = (void *)v101;
                      uint64_t v100 = 0x1020C405E66F15BLL;
                      goto LABEL_236;
                    }
                    break;
                  case 8:
LABEL_233:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v108 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_237;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)(v108 + 16));
                      v99 = (void *)v108;
                      uint64_t v100 = 0x1030C40F1F0227BLL;
                      goto LABEL_236;
                    }
                    break;
                  case 9:
LABEL_215:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v102 = *(void **)v84;
                      if (*(void *)v84)
                      {
                        v103 = (void *)v102[6];
                        if (v103)
                        {
                          v102[7] = v103;
                          operator delete(v103);
                        }
                        v104 = (void *)v102[3];
                        if (v104)
                        {
                          v102[4] = v104;
                          operator delete(v104);
                        }
                        v105 = (std::__shared_weak_count *)v102[2];
                        if (v105) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
                        }
                        v99 = v102;
                        uint64_t v100 = 0x1030C407B73B9F7;
LABEL_236:
                        MEMORY[0x22A614FA0](v99, v100);
                      }
LABEL_237:
                      *(void *)uint64_t v84 = 0;
                    }
                    break;
                  default:
                    goto LABEL_238;
                }
                goto LABEL_238;
              }
              if ((uint64_t *)v84 != &turi::FLEX_UNDEFINED)
              {
                switch(*(unsigned char *)(v134[0] + 16 * **(void **)(a1 + 16) - 4))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v85 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_201;
                      }
                      if (*(char *)(v85 + 31) < 0) {
                        operator delete(*(void **)(v85 + 8));
                      }
                      v86 = (void *)v85;
                      uint64_t v87 = 0x1012C404EF22A49;
                      goto LABEL_200;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v93 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_201;
                      }
                      v94 = *(void **)(v93 + 8);
                      if (v94)
                      {
                        *(void *)(v93 + 16) = v94;
                        operator delete(v94);
                      }
                      v86 = (void *)v93;
                      uint64_t v87 = 0x1080C409938AC02;
                      goto LABEL_200;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v88 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_201;
                      }
                      v135 = (void **)(v88 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                      goto LABEL_196;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v88 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_201;
                      }
                      v135 = (void **)(v88 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_196:
                      v86 = (void *)v88;
                      uint64_t v87 = 0x1020C405E66F15BLL;
                      goto LABEL_200;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v95 = *(void *)v84;
                      if (!*(void *)v84) {
                        goto LABEL_201;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)(v95 + 16));
                      v86 = (void *)v95;
                      uint64_t v87 = 0x1030C40F1F0227BLL;
                      goto LABEL_200;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v84, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v89 = *(void **)v84;
                      if (*(void *)v84)
                      {
                        v90 = (void *)v89[6];
                        if (v90)
                        {
                          v89[7] = v90;
                          operator delete(v90);
                        }
                        v91 = (void *)v89[3];
                        if (v91)
                        {
                          v89[4] = v91;
                          operator delete(v91);
                        }
                        v92 = (std::__shared_weak_count *)v89[2];
                        if (v92) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
                        }
                        v86 = v89;
                        uint64_t v87 = 0x1030C407B73B9F7;
LABEL_200:
                        MEMORY[0x22A614FA0](v86, v87);
                      }
LABEL_201:
                      *(void *)uint64_t v84 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v96 = turi::FLEX_UNDEFINED;
                *(void *)(v84 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                *(void *)uint64_t v84 = v96;
                unsigned int v97 = byte_268085C74;
                *(unsigned char *)(v84 + 12) = byte_268085C74;
                if (v97 <= 9 && ((1 << v97) & 0x33C) != 0) {
                  atomic_fetch_add(*(atomic_ullong *volatile *)v84, 1uLL);
                }
              }
              uint64_t v84 = v134[0] + 16 * **(void **)(a1 + 16);
              if ((uint64_t *)v84 != &turi::FLEX_UNDEFINED)
              {
                switch(*(unsigned char *)(v84 + 12))
                {
                  case 2:
                    goto LABEL_207;
                  case 3:
                    goto LABEL_224;
                  case 4:
                    goto LABEL_212;
                  case 5:
                    goto LABEL_229;
                  case 8:
                    goto LABEL_233;
                  case 9:
                    goto LABEL_215;
                  default:
                    break;
                }
LABEL_238:
                uint64_t v109 = turi::FLEX_UNDEFINED;
                *(void *)(v84 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                *(void *)uint64_t v84 = v109;
                unsigned int v110 = byte_268085C74;
                *(unsigned char *)(v84 + 12) = byte_268085C74;
                if (v110 <= 9 && ((1 << v110) & 0x33C) != 0) {
                  atomic_fetch_add(*(atomic_ullong *volatile *)v84, 1uLL);
                }
              }
LABEL_241:
              if (**(void **)(a1 + 16))
              {
                uint64_t v111 = 0;
                uint64_t v112 = 0;
                unint64_t v113 = 0;
                do
                {
                  if (v113 == **(void **)(a1 + 32))
                  {
                    uint64_t v114 = v112;
                  }
                  else
                  {
                    uint64_t v115 = **(void **)(*(void *)v5 + v111) + 16 * v8;
                    uint64_t v114 = v112 + 1;
                    uint64_t v116 = v134[0] + 16 * v112;
                    if (v115 != v116)
                    {
                      switch(*(unsigned char *)(v116 + 12))
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v117 = *(atomic_ullong *volatile *)v116;
                            if (!*(void *)v116) {
                              goto LABEL_277;
                            }
                            if (*((char *)v117 + 31) < 0) {
                              operator delete((void *)v117[1]);
                            }
                            atomic_ullong *volatile v118 = v117;
                            uint64_t v119 = 0x1012C404EF22A49;
                            goto LABEL_276;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v125 = *(atomic_ullong *volatile *)v116;
                            if (!*(void *)v116) {
                              goto LABEL_277;
                            }
                            v126 = (void *)v125[1];
                            if (v126)
                            {
                              v125[2] = (atomic_ullong)v126;
                              operator delete(v126);
                            }
                            atomic_ullong *volatile v118 = v125;
                            uint64_t v119 = 0x1080C409938AC02;
                            goto LABEL_276;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)v116;
                            if (!*(void *)v116) {
                              goto LABEL_277;
                            }
                            v135 = (void **)(v120 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                            goto LABEL_272;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)v116;
                            if (!*(void *)v116) {
                              goto LABEL_277;
                            }
                            v135 = (void **)(v120 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_272:
                            atomic_ullong *volatile v118 = v120;
                            uint64_t v119 = 0x1020C405E66F15BLL;
                            goto LABEL_276;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v127 = *(atomic_ullong *volatile *)v116;
                            if (!*(void *)v116) {
                              goto LABEL_277;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v127 + 2);
                            atomic_ullong *volatile v118 = v127;
                            uint64_t v119 = 0x1030C40F1F0227BLL;
                            goto LABEL_276;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v116, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v121 = *(atomic_ullong *volatile *)v116;
                            if (*(void *)v116)
                            {
                              v122 = (void *)v121[6];
                              if (v122)
                              {
                                v121[7] = (atomic_ullong)v122;
                                operator delete(v122);
                              }
                              v123 = (void *)v121[3];
                              if (v123)
                              {
                                v121[4] = (atomic_ullong)v123;
                                operator delete(v123);
                              }
                              v124 = (std::__shared_weak_count *)v121[2];
                              if (v124) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v124);
                              }
                              atomic_ullong *volatile v118 = v121;
                              uint64_t v119 = 0x1030C407B73B9F7;
LABEL_276:
                              MEMORY[0x22A614FA0](v118, v119);
                            }
LABEL_277:
                            *(void *)uint64_t v116 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      uint64_t v128 = *(void *)v115;
                      *(void *)(v116 + 5) = *(void *)(v115 + 5);
                      *(void *)uint64_t v116 = v128;
                      LODWORD(v128) = *(unsigned __int8 *)(v115 + 12);
                      *(unsigned char *)(v116 + 12) = v128;
                      BOOL v44 = v128 > 9;
                      int v129 = (1 << v128) & 0x33C;
                      if (!v44 && v129 != 0) {
                        atomic_fetch_add(*(atomic_ullong *volatile *)v116, 1uLL);
                      }
                    }
                  }
                  ++v113;
                  v111 += 16;
                  uint64_t v112 = v114;
                }
                while (v113 < **(void **)(a1 + 16));
              }
              if (!v137) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, void *))(*(void *)v137 + 48))(v137, v134);
LABEL_286:
              if (++v8 == v132) {
                goto LABEL_287;
              }
              break;
            default:
              goto LABEL_14;
          }
        }
      }
    }
  }
LABEL_287:
  v135 = (void **)v134;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v139);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v138);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v136);
  return 0;
}

void sub_2241E015C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  uint64_t v19 = va_arg(va4, void);
  va_copy((va_list)v8, va);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((uint64_t *)va4);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((uint64_t *)va3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

turi::thread_pool *turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>(turi::sframe &)::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      __n128 result = (turi::thread_pool *)turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_2241E0498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(void **a1, uint64_t a2)
{
  v19[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**a1 + 32))(v16);
  uint64_t v4 = *a1[1];
  unint64_t v5 = (*(uint64_t (**)(void))(**a1 + 24))();
  uint64_t v6 = *a1[1];
  unint64_t v7 = (*(uint64_t (**)(void))(**a1 + 24))();
  unint64_t v8 = v4 * a2 / v5;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (*a1[2] == 1)
  {
    for (; v8 < v9; v8 += 1024)
      (*(void (**)(void))(*(void *)*a1[4] + 48))();
  }
  else if (v8 < v9)
  {
    do
    {
      unint64_t v10 = *a1[3] + *a1[2] * v8;
      (*(void (**)(void, unint64_t, unint64_t, uint64_t *))(*(void *)*a1[4] + 48))(*a1[4], v10, v10 + 1, &v12);
      if (v13 == v12) {
        break;
      }
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v15 = (void **)&v12;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v18);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v16);
}

void sub_2241E0758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246DCFECLL & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246DCFECLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      __n128 result = turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()((void **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D770948;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D770948;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(void *a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4 = *a3;
  if (*((unsigned char *)*a3 + 24))
  {
    uint64_t v21 = 0;
    uint64_t v22 = v4;
    uint64_t v23 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    int v5 = *((unsigned __int8 *)v4 + 24);
    uint64_t v21 = 0;
    uint64_t v22 = v4;
    uint64_t v23 = 0;
    if (!v5) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 == *((void *)v4 + 1)) {
    return 0;
  }
  uint64_t v6 = **(void ***)v4;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(**(void **)v4 + 8) - *v6;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v7 >> 4;
  unint64_t v10 = (unint64_t *)a1[1];
  do
  {
    unint64_t v11 = *v10;
    unint64_t v12 = a1[5];
    BOOL v13 = *v10 >= v12;
    if (*v10 >= v12) {
      break;
    }
    unint64_t v14 = a1[3];
    BOOL v15 = v11 >= v14;
    unint64_t v16 = v11 - v14;
    if (v15 && !(v16 % a1[4]))
    {
      turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v22, v20);
      uint64_t v18 = *(void *)(a1[2] + 56);
      if (!v18) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, v20);
      atomic_ullong *volatile v24 = (void **)v20;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
      unint64_t v10 = (unint64_t *)a1[1];
      ++*v10;
      uint64_t v8 = v21;
    }
    else
    {
      unint64_t *v10 = v11 + 1;
    }
    uint64_t v17 = ++v23;
  }
  while (v8 || v17 != v9);
  return v13;
}

void sub_2241E0AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D7709C8;
  return result;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7709C8;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = **(char ***)a1;
  long long v3 = *(char **)(*(void *)a1 + 8);
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    uint64_t v5 = v4 >> 4;
    uint64_t v4 = 1;
    while (*(unsigned char *)(**(void **)v2 + 16 * *(void *)(a1 + 8) + 12) == 7)
    {
      v2 += 16;
      if (!--v5)
      {
        uint64_t v4 = 0;
        break;
      }
    }
  }
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = v4;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D770A48;
  return result;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770A48;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = **(char ***)a1;
  long long v3 = *(char **)(*(void *)a1 + 8);
  if (v3 == v2)
  {
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v4 = (v3 - v2) >> 4;
    uint64_t v5 = 1;
    while (*(unsigned char *)(**(void **)v2 + 16 * *(void *)(a1 + 8) + 12) != 7)
    {
      v2 += 16;
      if (!--v4) {
        goto LABEL_8;
      }
    }
    uint64_t v5 = 0;
  }
LABEL_8:
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = v5;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D770AC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D770AC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = **a2;
  if (v5)
  {
    uint64_t v7 = (void **)**a2;
    uint64_t v8 = *(void *)(result + 8);
    while (*(unsigned char *)(**v7 + 16 * (void)a2[1] + 12) == 7)
    {
      v7 += 2;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if (v5 >= ((*a2)[1] - v6) >> 4)
    {
LABEL_9:
      *(void *)(a3 + 5) = 0;
      *(void *)a3 = 0;
      return result;
    }
    uint64_t v9 = 16 * v5;
    while (1)
    {
      __n128 result = turi::flexible_type::contains_na((turi::flexible_type *)(**(void **)(v6 + v9) + 16 * (void)a2[1]));
      if ((result & 1) == 0) {
        break;
      }
      ++v5;
      uint64_t v6 = **a2;
      v9 += 16;
      if (v5 >= ((*a2)[1] - v6) >> 4) {
        goto LABEL_9;
      }
    }
  }
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)a3 = 1;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D770B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D770B48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = **a2;
  if (v5)
  {
    uint64_t v7 = (void **)**a2;
    uint64_t v8 = *(void *)(result + 8);
    while (*(unsigned char *)(**v7 + 16 * (void)a2[1] + 12) != 7)
    {
      v7 += 2;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if (v5 >= ((*a2)[1] - v6) >> 4)
    {
LABEL_9:
      *(unsigned char *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(void *)a3 = 1;
      return result;
    }
    uint64_t v9 = 16 * v5;
    while (1)
    {
      __n128 result = turi::flexible_type::contains_na((turi::flexible_type *)(**(void **)(v6 + v9) + 16 * (void)a2[1]));
      if (result) {
        break;
      }
      ++v5;
      uint64_t v6 = **a2;
      v9 += 16;
      if (v5 >= ((*a2)[1] - v6) >> 4) {
        goto LABEL_9;
      }
    }
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D770BC8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D770BC8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26D770BC8;
  std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_2241E125C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D770BC8;
  return std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  turi::visualization::process_wrapper::process_wrapper(v16, a1 + 8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"{\"table_spec\":", 14);
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  turi::visualization::table_spec((turi::visualization::WebServer *)(a1 + 32), (uint64_t *)(a1 + 48), (uint64_t)v12);
  if ((v10 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v4 = v10;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::stringbuf::str();
  turi::visualization::process_wrapper::operator<<((uint64_t)v16, (long long *)__p);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  turi::unity_sframe::get_underlying_sframe(*(turi::unity_sframe **)(a1 + 32), &v11);
  turi::sframe::get_reader(v11);
}

void sub_2241E2160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x22A614FA0](v63, 0x1012C404EF22A49);
  switch(LOBYTE(STACK[0x214]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v65 = STACK[0x208];
        if (STACK[0x208])
        {
          if (*(char *)(v65 + 31) < 0) {
            operator delete(*(void **)(v65 + 8));
          }
          MEMORY[0x22A614FA0](v65, 0x1012C404EF22A49);
        }
      }
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      unint64_t v73 = STACK[0x208];
      if (!STACK[0x208]) {
        goto LABEL_33;
      }
      v74 = *(void **)(v73 + 8);
      if (v74)
      {
        *(void *)(v73 + 16) = v74;
        operator delete(v74);
      }
      atomic_ullong *volatile v71 = (void *)v73;
      uint64_t v75 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      unint64_t v66 = STACK[0x208];
      if (!STACK[0x208]) {
        goto LABEL_33;
      }
      STACK[0x200] = v66 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      unint64_t v66 = STACK[0x208];
      if (!STACK[0x208]) {
        goto LABEL_33;
      }
      STACK[0x200] = v66 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
LABEL_27:
      atomic_ullong *volatile v71 = (void *)v66;
      uint64_t v75 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      unint64_t v76 = STACK[0x208];
      if (!STACK[0x208]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v76 + 16));
      atomic_ullong *volatile v71 = (void *)v76;
      unsigned int v72 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x208], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v67 = (void *)STACK[0x208];
      if (!STACK[0x208]) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v68 = (void *)v67[6];
      if (v68)
      {
        v67[7] = v68;
        operator delete(v68);
      }
      uint64_t v69 = (void *)v67[3];
      if (v69)
      {
        v67[4] = v69;
        operator delete(v69);
      }
      atomic_ullong *volatile v70 = (std::__shared_weak_count *)v67[2];
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      atomic_ullong *volatile v71 = v67;
      unsigned int v72 = 2071181815;
LABEL_31:
      uint64_t v75 = v72 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v71, v75);
LABEL_33:
      STACK[0x208] = 0;
LABEL_34:
      if (a32 < 0) {
        operator delete(__p);
      }
      if (a38 < 0) {
        operator delete(a33);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
      if (a40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a40);
      }
      a44 = *MEMORY[0x263F8C2B8];
      uint64_t v77 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(uint64_t *)((char *)&a44 + *(void *)(a44 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      a46 = v77;
      a47 = MEMORY[0x263F8C318] + 16;
      if (a60 < 0) {
        operator delete(a55);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&a63);
      turi::visualization::process_wrapper::~process_wrapper((turi::visualization::process_wrapper *)&STACK[0x218]);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_34;
  }
}

uint64_t std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_2241E2A68(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  turi::fileio::cache_block::cache_block(v1);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t OUTLINED_FUNCTION_22_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return file_logger::operator<<<std::string>(v8, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return std::stringbuf::str();
}

std::string *OUTLINED_FUNCTION_26_0(uint64_t a1, std::string *a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return std::string::insert((std::string *)&a10, 0, a3);
}

std::string *OUTLINED_FUNCTION_29(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = **v10;
  return std::to_string((std::string *)&a10, v12);
}

uint64_t turi::unity_sgraph::get_dag(turi::unity_sgraph *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t result = turi::unity_sgraph::dag_singleton;
  if (!turi::unity_sgraph::dag_singleton) {
    operator new();
  }
  return result;
}

void sub_2241E2C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(turi::sgraph &,turi::sgraph &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<turi::sgraph * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  MEMORY[0x22A614FA0](v2, 0x10A0C40A3EE9154);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::unity_sgraph(turi::unity_sgraph *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D770C48;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  int v1 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), 0);
  assert_msg(v1 == 0, "Mutex create error %d", v1);
  uint64_t v2 = (turi::unity_sgraph *)pthread_mutex_lock(&turi::dag_access_mutex);
  turi::unity_sgraph::get_dag(v2);
  operator new();
}

void sub_2241E2D70(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v3, 0x1020C40CF206F44);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  turi::mutex::~mutex(v2);
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::shared_ptr[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(&v2, a2);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_value(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(&v2, a2);
}

void sub_2241E2E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sgraph::unity_sgraph(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D770C48;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 40), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  uint64_t v4 = (turi::unity_sgraph *)pthread_mutex_lock(&turi::dag_access_mutex);
  turi::unity_sgraph::get_dag(v4);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::add_value();
}

void sub_2241E2F74(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&turi::dag_access_mutex);
  turi::mutex::~mutex(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_value()
{
}

void sub_2241E30D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C404161829ELL);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::~unity_sgraph(turi::unity_sgraph *this)
{
  *(void *)this = &unk_26D770C48;
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 40));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  uint64_t vars8;

  turi::unity_sgraph::~unity_sgraph(this);
  JUMPOUT(0x22A614FA0);
}

double turi::unity_sgraph::clone@<D0>(turi::unity_sgraph *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "clone", 62, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::allocate_shared[abi:ne180100]<turi::unity_sgraph,std::allocator<turi::unity_sgraph>,turi::unity_sgraph&,void>(this, &v12);
  double result = *(double *)&v12;
  *a2 = v12;
  return result;
}

void sub_2241E3328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void turi::unity_sgraph::get_vertices()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2241E344C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  turi::sframe::~sframe((turi::sframe *)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::get_edges(turi::unity_sgraph *a1, void *a2, void *a3, uint64_t a4)
{
  if (!(((uint64_t)(a3[1] - *a3) >> 4) + ((uint64_t)(a2[1] - *a2) >> 4) + *(void *)(a4 + 16)))
  {
    turi::unity_sgraph::get_edges_lazy(a1);
  }
  operator new();
}

void sub_2241E3654(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  turi::sframe::~sframe((turi::sframe *)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::get_edges_lazy(turi::unity_sgraph *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2241E44D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  a45 = (uint64_t)&a47;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy((uint64_t)&a50, (void *)a51);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = &a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a60);
  }
  _Unwind_Resume(a1);
}

void turi::binary_sframe_append(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  if (a2 + 1 == a3)
  {
    long long v6 = *(_OWORD *)(*a1 + 16 * a2);
    uint64_t v7 = *(void *)(*a1 + 16 * a2 + 8);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)a4 = v6;
  }
  else if (a3 > a2)
  {
    turi::binary_sframe_append(&v17, a1);
    turi::binary_sframe_append(&v15, a1);
    uint64_t v8 = v17;
    uint64_t v9 = v15;
    if (v17)
    {
      if (v15)
      {
        char v13 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v8 + 288))(&v14);
        long long v10 = v14;
        long long v14 = 0uLL;
        *(_OWORD *)a4 = v10;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
      else
      {
        long long v12 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *a4 = v8;
        a4[1] = v12;
      }
    }
    else
    {
      uint64_t v11 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *a4 = v9;
      a4[1] = v11;
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_2241E49C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sgraph::summary(turi::unity_sgraph *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "summary", 225, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v10 = *((void *)this + 3);
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v10);
    uint64_t v11 = *(void *)(v10 + 16);
  }
  uint64_t v12 = *(void *)(v11 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v43, "num_vertices");
  int v45 = &v43;
  char v13 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v43.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v45);
  long long v14 = v13;
  switch(*((unsigned char *)v13 + 68))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = *((void *)v13 + 7);
        if (!v15) {
          goto LABEL_43;
        }
        if (*(char *)(v15 + 31) < 0) {
          operator delete(*(void **)(v15 + 8));
        }
        unint64_t v16 = (std::locale *)v15;
        uint64_t v17 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = (std::locale *)*((void *)v13 + 7);
        if (!v18) {
          goto LABEL_43;
        }
        locale = v18[1].__locale_;
        if (locale)
        {
          v18[2].__locale_ = locale;
          operator delete(locale);
        }
        unint64_t v16 = v18;
        uint64_t v17 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v20 = (std::locale *)*((void *)v13 + 7);
        if (!v20) {
          goto LABEL_43;
        }
        int v45 = v20 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        goto LABEL_28;
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v20 = (std::locale *)*((void *)v13 + 7);
        if (!v20) {
          goto LABEL_43;
        }
        int v45 = v20 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
LABEL_28:
        unint64_t v16 = v20;
        uint64_t v17 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v21 = *((void *)v13 + 7);
        if (!v21) {
          goto LABEL_43;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
        unint64_t v16 = (std::locale *)v21;
        unsigned int v22 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v13 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v23 = (std::locale *)*((void *)v13 + 7);
        if (v23)
        {
          atomic_ullong *volatile v24 = v23[6].__locale_;
          if (v24)
          {
            v23[7].__locale_ = v24;
            operator delete(v24);
          }
          atomic_ullong *volatile v25 = v23[3].__locale_;
          if (v25)
          {
            v23[4].__locale_ = v25;
            operator delete(v25);
          }
          uint64_t v26 = (std::__shared_weak_count *)v23[2].__locale_;
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          unint64_t v16 = v23;
          unsigned int v22 = 2071181815;
LABEL_41:
          uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x22A614FA0](v16, v17);
        }
LABEL_43:
        *((void *)v14 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v14 + 16) = 0;
  *((unsigned char *)v14 + 68) = 0;
  *((void *)v14 + 7) = v12;
  if (v44 < 0) {
    operator delete(v43.__locale_);
  }
  uint64_t v27 = *(void *)(v11 + 48);
  std::string::basic_string[abi:ne180100]<0>(&v43, "num_edges");
  int v45 = &v43;
  uint64_t v28 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v43.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v45);
  v29 = v28;
  switch(*((unsigned char *)v28 + 68))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v30 = *((void *)v28 + 7);
        if (!v30) {
          goto LABEL_78;
        }
        if (*(char *)(v30 + 31) < 0) {
          operator delete(*(void **)(v30 + 8));
        }
        v31 = (std::locale *)v30;
        uint64_t v32 = 0x1012C404EF22A49;
        goto LABEL_77;
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = (std::locale *)*((void *)v28 + 7);
        if (!v33) {
          goto LABEL_78;
        }
        uint64_t v34 = v33[1].__locale_;
        if (v34)
        {
          v33[2].__locale_ = v34;
          operator delete(v34);
        }
        v31 = v33;
        uint64_t v32 = 0x1080C409938AC02;
        goto LABEL_77;
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v35 = (std::locale *)*((void *)v28 + 7);
        if (!v35) {
          goto LABEL_78;
        }
        int v45 = v35 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        goto LABEL_63;
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v35 = (std::locale *)*((void *)v28 + 7);
        if (!v35) {
          goto LABEL_78;
        }
        int v45 = v35 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
LABEL_63:
        v31 = v35;
        uint64_t v32 = 0x1020C405E66F15BLL;
        goto LABEL_77;
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v36 = *((void *)v28 + 7);
        if (!v36) {
          goto LABEL_78;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v36 + 16));
        v31 = (std::locale *)v36;
        unsigned int v37 = -235920773;
        goto LABEL_76;
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)v28 + 7), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v38 = (std::locale *)*((void *)v28 + 7);
        if (v38)
        {
          v39 = v38[6].__locale_;
          if (v39)
          {
            v38[7].__locale_ = v39;
            operator delete(v39);
          }
          atomic_ullong *volatile v40 = v38[3].__locale_;
          if (v40)
          {
            v38[4].__locale_ = v40;
            operator delete(v40);
          }
          v41 = (std::__shared_weak_count *)v38[2].__locale_;
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          v31 = v38;
          unsigned int v37 = 2071181815;
LABEL_76:
          uint64_t v32 = v37 | 0x1030C4000000000;
LABEL_77:
          MEMORY[0x22A614FA0](v31, v32);
        }
LABEL_78:
        *((void *)v29 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v29 + 16) = 0;
  *((unsigned char *)v29 + 68) = 0;
  *((void *)v29 + 7) = v27;
  if (v44 < 0) {
    operator delete(v43.__locale_);
  }
}

void sub_2241E4FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

std::string *turi::unity_sgraph::get_vertex_fields@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  long long v6 = *(turi::sgraph **)(v5 + 16);
  if (!v6)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v5);
    long long v6 = *(turi::sgraph **)(v5 + 16);
  }
  return turi::sgraph::get_vertex_fields(v6, a2, a3);
}

std::string *turi::unity_sgraph::get_edge_fields@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *(turi::sgraph **)(v7 + 16);
  if (!v8)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v7);
    uint64_t v8 = *(turi::sgraph **)(v7 + 16);
  }
  return turi::sgraph::get_edge_fields(v8, a2, a3, a4);
}

void *turi::unity_sgraph::get_vertex_field_types@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  long long v6 = *(turi::sgraph **)(v5 + 16);
  if (!v6)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v5);
    long long v6 = *(turi::sgraph **)(v5 + 16);
  }
  return turi::sgraph::get_vertex_field_types(v6, a2, a3);
}

void turi::unity_sgraph::get_edge_field_types(turi::unity_sgraph *this@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *(turi::sgraph **)(v7 + 16);
  if (!v8)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v7);
    uint64_t v8 = *(turi::sgraph **)(v7 + 16);
  }
  turi::sgraph::get_edge_field_types(v8, a2, a3, a4);
}

void turi::unity_sgraph::add_vertices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_vertices", 253, 1);
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  uint64_t v11 = *(turi::unity_sframe **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    turi::unity_sframe::get_underlying_sframe(v11, &v18);
    long long v14 = v18;
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v17 = *(std::string *)a3;
    }
    turi::unity_sgraph::fast_validate_add_vertices(v13, v14, (char *)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator()();
}

void sub_2241E54E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  atomic_ullong *volatile v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"unity_sf != __null", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 256, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241E56E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::fast_validate_add_vertices(uint64_t a1, uint64_t *a2, char *a3)
{
  if (!turi::sframe::contains_column((uint64_t)a2, (unsigned __int8 **)a3))
  {
    uint64_t v8 = a3;
    turi::unity_sgraph::fast_validate_add_vertices(turi::sframe const&,std::string,unsigned long)const::$_0::operator()();
  }
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], (unsigned __int8 **)a3);
  if (v5 == a2[6])
  {
    uint64_t v8 = a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t result = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v5 - a2[5]) >> 3));
  char v7 = result;
  if ((result & 0xFFFFFFFD) != 0)
  {
    uint64_t v8 = &v7;
    turi::unity_sgraph::fast_validate_add_vertices(turi::sframe const&,std::string,unsigned long)const::$_1::operator()(&v8);
  }
  return result;
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(uint64_t a1, uint64_t (***a2)(void), void *a3)
{
  if (a2)
  {
    uint64_t v4 = (**a2)(a2);
    uint64_t v7 = (uint64_t)(a3[1] - *a3) >> 3;
    uint64_t v8 = v4;
    if (v4 == v7) {
      operator new();
    }
    uint64_t v5 = &v8;
    long long v6 = &v7;
    turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator()();
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator()();
}

void sub_2241E5B18(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C404161829ELL);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::add_edges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_edges", 271, 1);
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        uint64_t v12 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  uint64_t v13 = *(turi::unity_sframe **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  if (v13)
  {
    turi::unity_sframe::get_underlying_sframe(v13, &v21);
    std::locale v16 = v21;
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v20 = *(std::string *)a3;
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v19 = *(std::string *)a4;
    }
    turi::unity_sgraph::fast_validate_add_edges(v15, v16, (unsigned __int8 **)&v20, (unsigned __int8 **)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
}

void sub_2241E5E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 88);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"unity_sf != __null", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241E60A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::fast_validate_add_edges(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  if (!turi::sframe::contains_column((uint64_t)a2, a3))
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_0::operator()();
  }
  if (!turi::sframe::contains_column((uint64_t)a2, a4))
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_1::operator()();
  }
  uint64_t v7 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], a3);
  if (v7 == a2[6])
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    goto LABEL_25;
  }
  unsigned int v8 = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v7 - a2[5]) >> 3));
  char v25 = v8;
  uint64_t v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], a4);
  if (v9 == a2[6])
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
LABEL_25:
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t result = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v9 - a2[5]) >> 3));
  if (v8 != result)
  {
    unsigned int v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v24, "Source and target ids have different types: ");
    if (v8 > 9) {
      uint64_t v12 = "undefined";
    }
    else {
      uint64_t v12 = off_2646D6FD0[v8];
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, v12);
    uint64_t v13 = std::string::append(&v20, " != ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v11 > 9) {
      uint64_t v15 = "undefined";
    }
    else {
      uint64_t v15 = off_2646D6FD0[v11];
    }
    std::locale v16 = std::string::append(&v21, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v23 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      std::locale v18 = __p;
    }
    else {
      std::locale v18 = (void **)__p[0];
    }
    if (v23 >= 0) {
      std::string::size_type v19 = HIBYTE(v23);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(&v24, (const std::string::value_type *)v18, v19);
    turi::unity_sgraph::fast_validate_add_edges((char *)&v23 + 7, (uint64_t)&v20, (uint64_t)&v21, __p);
    __p[0] = &v24;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_2::operator()((const std::string **)__p);
  }
  if ((v8 & 0xFFFFFFFD) != 0)
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_3::operator()(&v24.__r_.__value_.__l.__data_);
  }
  return result;
}

void turi::unity_sgraph::copy_vertex_field(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "copy_vertex_field", 289, 1);
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  uint64_t v11 = a2[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a2[23];
  }
  else {
    uint64_t v12 = *((void *)a2 + 1);
  }
  uint64_t v13 = a3[23];
  uint64_t v14 = *((void *)a3 + 1);
  if ((v13 & 0x80u) == 0) {
    uint64_t v15 = a3[23];
  }
  else {
    uint64_t v15 = *((void *)a3 + 1);
  }
  if (v12 != v15) {
    goto LABEL_26;
  }
  if ((v13 & 0x80u) == 0) {
    std::locale v16 = a3;
  }
  else {
    std::locale v16 = *(unsigned __int8 **)a3;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v16, *((void *)a2 + 1))) {
      goto LABEL_26;
    }
  }
  else if (a2[23])
  {
    long long v17 = a2;
    while (*v17 == *v16)
    {
      ++v17;
      ++v16;
      if (!--v11) {
        goto LABEL_24;
      }
    }
LABEL_26:
    size_t v18 = strlen(turi::sgraph::VID_COLUMN_NAME[0]);
    size_t v19 = v18;
    if ((v13 & 0x80) != 0)
    {
      if (v18 != v14) {
        goto LABEL_33;
      }
      if (v14 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      std::string v20 = *(const void **)a3;
    }
    else
    {
      std::string v20 = a3;
      if (v19 != v13) {
        goto LABEL_33;
      }
    }
    if (!memcmp(v20, turi::sgraph::VID_COLUMN_NAME[0], v19))
    {
      v22.__locale_ = (std::locale::__imp *)a3;
      turi::unity_sgraph::copy_vertex_field(std::string,std::string,unsigned long)::$_1::operator()();
    }
LABEL_33:
    operator new();
  }
LABEL_24:
  turi::unity_sgraph::copy_vertex_field(std::string,std::string,unsigned long)::$_0::operator()();
}

void sub_2241E6764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void turi::unity_sgraph::delete_vertex_field(uint64_t a1, char *a2)
{
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "delete_vertex_field", 307, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v9 = strlen(turi::sgraph::VID_COLUMN_NAME[0]);
  size_t v10 = v9;
  if (a2[23] < 0)
  {
    if (v9 != *((void *)a2 + 1)) {
      goto LABEL_17;
    }
    if (v9 == -1) {
      goto LABEL_19;
    }
    uint64_t v11 = *(char **)a2;
  }
  else
  {
    if (v9 != a2[23]) {
      goto LABEL_17;
    }
    uint64_t v11 = a2;
    if (v10 == -1) {
LABEL_19:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v11, turi::sgraph::VID_COLUMN_NAME[0], v10))
  {
    v13.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sgraph::delete_vertex_field(std::string,unsigned long)::$_0::operator()();
  }
LABEL_17:
  operator new();
}

void sub_2241E6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void turi::unity_sgraph::add_vertex_field(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_vertex_field", 322, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet((const std::locale *)&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v10 = strlen(turi::sgraph::VID_COLUMN_NAME[0]);
  size_t v11 = v10;
  if (a3[23] < 0)
  {
    if (v10 != *((void *)a3 + 1)) {
      goto LABEL_17;
    }
    if (v10 == -1) {
      goto LABEL_19;
    }
    uint64_t v12 = *(char **)a3;
  }
  else
  {
    if (v10 != a3[23]) {
      goto LABEL_17;
    }
    uint64_t v12 = a3;
    if (v11 == -1) {
LABEL_19:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v12, turi::sgraph::VID_COLUMN_NAME[0], v11))
  {
    *(void *)&long long v14 = a3;
    turi::unity_sgraph::add_vertex_field(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  }
LABEL_17:
  operator new();
}

void sub_2241E6EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::swap_vertex_fields(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "swap_vertex_fields", 338, 1);
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
      size_t v10 = std::locale::use_facet(v17, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(v17);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v11 = turi::sgraph::VID_COLUMN_NAME[0];
  size_t v12 = strlen(turi::sgraph::VID_COLUMN_NAME[0]);
  size_t v13 = v12;
  if ((char)a2[23] < 0)
  {
    if (v12 == *((void *)a2 + 1))
    {
      if (v12 == -1) {
        goto LABEL_28;
      }
      long long v14 = *(unsigned __int8 **)a2;
      goto LABEL_16;
    }
  }
  else if (v12 == a2[23])
  {
    long long v14 = a2;
    if (v13 == -1) {
LABEL_28:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_16:
    if (!memcmp(v14, turi::sgraph::VID_COLUMN_NAME[0], v13)) {
      goto LABEL_26;
    }
  }
  if (a3[23] < 0)
  {
    if (v13 != *((void *)a3 + 1)) {
      goto LABEL_25;
    }
    if (v13 == -1) {
      goto LABEL_29;
    }
    uint64_t v15 = *(char **)a3;
  }
  else
  {
    if (v13 != a3[23]) {
      goto LABEL_25;
    }
    uint64_t v15 = a3;
    if (v13 == -1) {
LABEL_29:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (memcmp(v15, v11, v13)) {
LABEL_25:
  }
    operator new();
LABEL_26:
  v17[0].__locale_ = (std::locale::__imp *)a2;
  v17[1].__locale_ = (std::locale::__imp *)a3;
  turi::unity_sgraph::swap_vertex_fields(std::string const&,std::string const&)::$_0::operator()();
}

void sub_2241E728C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void turi::unity_sgraph::rename_vertex_fields()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "rename_vertex_fields", 353, 1);
    int v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      uint64_t v5 = std::locale::use_facet((const std::locale *)&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale((std::locale *)&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  operator new();
}

void sub_2241E755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void turi::unity_sgraph::select_vertex_fields(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v16 = *MEMORY[0x263EF8340];
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "select_vertex_fields", 364, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet((const std::locale *)&v11, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale((std::locale *)&v11);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME[0]);
  memset(&v11, 0, sizeof(v11));
  size_t v12 = &v11;
  char v13 = 0;
  v11.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v11.__end_ = v11.__begin_;
  v11.__end_cap_.__value_ = v11.__begin_ + 1;
  end = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__end_cap_, (long long *)__p, &v16, v11.__begin_);
  v11.__end_ = end;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    end = v11.__end_;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v11, end, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  operator new();
}

void sub_2241E7900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void turi::unity_sgraph::copy_edge_field(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "copy_edge_field", 379, 1);
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        size_t v10 = std::locale::use_facet(&v25, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  uint64_t v11 = a2[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a2[23];
  }
  else {
    uint64_t v12 = *((void *)a2 + 1);
  }
  size_t v13 = a3[23];
  size_t v14 = *((void *)a3 + 1);
  if ((v13 & 0x80u) == 0) {
    uint64_t v15 = a3[23];
  }
  else {
    uint64_t v15 = *((void *)a3 + 1);
  }
  if (v12 != v15) {
    goto LABEL_26;
  }
  if ((v13 & 0x80u) == 0) {
    long long v16 = a3;
  }
  else {
    long long v16 = *(unsigned __int8 **)a3;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v16, *((void *)a2 + 1))) {
      goto LABEL_26;
    }
  }
  else if (a2[23])
  {
    long long v17 = a2;
    while (*v17 == *v16)
    {
      ++v17;
      ++v16;
      if (!--v11) {
        goto LABEL_24;
      }
    }
LABEL_26:
    size_t v18 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
    size_t v19 = v18;
    if ((v13 & 0x80) != 0)
    {
      if (v18 != v14)
      {
        std::string v21 = turi::sgraph::DST_COLUMN_NAME;
        size_t v22 = strlen(turi::sgraph::DST_COLUMN_NAME);
        goto LABEL_37;
      }
      if (v14 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      std::string v20 = *(const void **)a3;
    }
    else
    {
      std::string v20 = a3;
      if (v19 != v13)
      {
        std::string v21 = turi::sgraph::DST_COLUMN_NAME;
        size_t v22 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_34:
        int64_t v23 = a3;
        if (v22 != v13) {
LABEL_41:
        }
          operator new();
        goto LABEL_40;
      }
    }
    if (!memcmp(v20, turi::sgraph::SRC_COLUMN_NAME[0], v19)) {
      goto LABEL_42;
    }
    std::string v21 = turi::sgraph::DST_COLUMN_NAME;
    size_t v22 = strlen(turi::sgraph::DST_COLUMN_NAME);
    if ((v13 & 0x80) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    if (v22 != v14) {
      goto LABEL_41;
    }
    if (v14 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int64_t v23 = *(const void **)a3;
    size_t v13 = v14;
LABEL_40:
    if (memcmp(v23, v21, v13)) {
      goto LABEL_41;
    }
LABEL_42:
    v25.__locale_ = (std::locale::__imp *)a3;
    turi::unity_sgraph::copy_edge_field(std::string,std::string,unsigned long,unsigned long)::$_1::operator()();
  }
LABEL_24:
  turi::unity_sgraph::copy_edge_field(std::string,std::string,unsigned long,unsigned long)::$_0::operator()();
}

void sub_2241E7DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void turi::unity_sgraph::delete_edge_field(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "delete_edge_field", 398, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v17);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v9 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
  size_t v10 = v9;
  size_t v11 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v9 != *(void *)(a2 + 8))
    {
      size_t v13 = turi::sgraph::DST_COLUMN_NAME;
      size_t v14 = strlen(turi::sgraph::DST_COLUMN_NAME);
      size_t v11 = *(void *)(a2 + 8);
      goto LABEL_23;
    }
    if (v9 == -1) {
      goto LABEL_30;
    }
    uint64_t v12 = *(const void **)a2;
  }
  else
  {
    if (v9 != v11)
    {
      size_t v13 = turi::sgraph::DST_COLUMN_NAME;
      size_t v14 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_20;
    }
    uint64_t v12 = (const void *)a2;
    if (v10 == -1) {
LABEL_30:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v12, turi::sgraph::SRC_COLUMN_NAME[0], v10)) {
    goto LABEL_28;
  }
  size_t v13 = turi::sgraph::DST_COLUMN_NAME;
  size_t v14 = strlen(turi::sgraph::DST_COLUMN_NAME);
  if ((v11 & 0x80) != 0)
  {
    size_t v11 = *(void *)(a2 + 8);
LABEL_23:
    if (v14 != v11) {
      goto LABEL_27;
    }
    if (v11 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v15 = *(const void **)a2;
LABEL_26:
    if (memcmp(v15, v13, v11)) {
      goto LABEL_27;
    }
LABEL_28:
    v17.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sgraph::delete_edge_field(std::string,unsigned long,unsigned long)::$_0::operator()();
  }
LABEL_20:
  uint64_t v15 = (const void *)a2;
  if (v14 != v11) {
LABEL_27:
  }
    operator new();
  goto LABEL_26;
}

void sub_2241E81F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void turi::unity_sgraph::add_edge_field(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_edge_field", 414, 1);
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        size_t v9 = std::locale::use_facet((const std::locale *)&v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v10 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
  size_t v11 = v10;
  size_t v12 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    if (v10 != *(void *)(a3 + 8))
    {
      size_t v14 = turi::sgraph::DST_COLUMN_NAME;
      size_t v15 = strlen(turi::sgraph::DST_COLUMN_NAME);
      size_t v12 = *(void *)(a3 + 8);
      goto LABEL_23;
    }
    if (v10 == -1) {
      goto LABEL_30;
    }
    size_t v13 = *(const void **)a3;
  }
  else
  {
    if (v10 != v12)
    {
      size_t v14 = turi::sgraph::DST_COLUMN_NAME;
      size_t v15 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_20;
    }
    size_t v13 = (const void *)a3;
    if (v11 == -1) {
LABEL_30:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v13, turi::sgraph::SRC_COLUMN_NAME[0], v11)) {
    goto LABEL_28;
  }
  size_t v14 = turi::sgraph::DST_COLUMN_NAME;
  size_t v15 = strlen(turi::sgraph::DST_COLUMN_NAME);
  if ((v12 & 0x80) != 0)
  {
    size_t v12 = *(void *)(a3 + 8);
LABEL_23:
    if (v15 != v12) {
      goto LABEL_27;
    }
    if (v12 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    long long v16 = *(const void **)a3;
LABEL_26:
    if (memcmp(v16, v14, v12)) {
      goto LABEL_27;
    }
LABEL_28:
    *(void *)&long long v18 = a3;
    turi::unity_sgraph::add_edge_field(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  }
LABEL_20:
  long long v16 = (const void *)a3;
  if (v15 != v12) {
LABEL_27:
  }
    operator new();
  goto LABEL_26;
}

void sub_2241E8654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::swap_edge_fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "swap_edge_fields", 432, 1);
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        size_t v10 = std::locale::use_facet(v24, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  size_t v11 = turi::sgraph::SRC_COLUMN_NAME[0];
  size_t v12 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
  size_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v12 != *(void *)(a2 + 8)) {
      goto LABEL_17;
    }
    if (v12 == -1) {
      goto LABEL_42;
    }
    size_t v15 = *(const void **)a2;
  }
  else
  {
    if (v12 != v14) {
      goto LABEL_17;
    }
    size_t v15 = (const void *)a2;
    if (v13 == -1) {
LABEL_42:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v15, turi::sgraph::SRC_COLUMN_NAME[0], v13)) {
    goto LABEL_40;
  }
LABEL_17:
  uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    if (v13 != *(void *)(a3 + 8)) {
      goto LABEL_25;
    }
    if (v13 == -1) {
      goto LABEL_43;
    }
    std::locale v17 = *(const void **)a3;
  }
  else
  {
    if (v13 != v16) {
      goto LABEL_25;
    }
    std::locale v17 = (const void *)a3;
    if (v13 == -1) {
LABEL_43:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v17, v11, v13)) {
    goto LABEL_40;
  }
LABEL_25:
  long long v18 = turi::sgraph::DST_COLUMN_NAME;
  size_t v19 = strlen(turi::sgraph::DST_COLUMN_NAME);
  size_t v20 = v19;
  if ((v14 & 0x80) != 0)
  {
    if (v19 != *(void *)(a2 + 8))
    {
LABEL_32:
      if ((v16 & 0x80) != 0)
      {
        if (v20 != *(void *)(a3 + 8)) {
          goto LABEL_39;
        }
        if (v20 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        size_t v22 = *(const void **)a3;
      }
      else
      {
        size_t v22 = (const void *)a3;
        if (v20 != v16) {
LABEL_39:
        }
          operator new();
      }
      if (memcmp(v22, v18, v20)) {
        goto LABEL_39;
      }
LABEL_40:
      v24[0].__locale_ = (std::locale::__imp *)a2;
      v24[1].__locale_ = (std::locale::__imp *)a3;
      turi::unity_sgraph::swap_edge_fields(std::string const&,std::string const&)::$_0::operator()();
    }
    if (v19 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    std::string v21 = *(const void **)a2;
  }
  else
  {
    std::string v21 = (const void *)a2;
    if (v20 != v14) {
      goto LABEL_32;
    }
  }
  if (!memcmp(v21, turi::sgraph::DST_COLUMN_NAME, v20)) {
    goto LABEL_40;
  }
  goto LABEL_32;
}

void sub_2241E8AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2241E8B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x2241E8B4CLL);
}

void turi::unity_sgraph::rename_edge_fields()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "rename_edge_fields", 448, 1);
    int v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      uint64_t v5 = std::locale::use_facet((const std::locale *)&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale((std::locale *)&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  operator new();
}

void sub_2241E8DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void turi::unity_sgraph::select_edge_fields(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v16 = *MEMORY[0x263EF8340];
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "select_edge_fields", 460, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet((const std::locale *)&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale((std::locale *)&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  std::string::basic_string[abi:ne180100]<0>(&v14, turi::sgraph::SRC_COLUMN_NAME[0]);
  std::string::basic_string[abi:ne180100]<0>(v15, turi::sgraph::DST_COLUMN_NAME);
  memset(&v11, 0, sizeof(v11));
  size_t v12 = &v11;
  char v13 = 0;
  v11.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
  v11.__end_ = v11.__begin_;
  v11.__end_cap_.__value_ = v11.__begin_ + 2;
  uint64_t v9 = 0;
  v11.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__end_cap_, &v14, &v16, v11.__begin_);
  while (1)
  {
    if (SHIBYTE(v15[v9 + 2]) < 0) {
      operator delete((void *)v15[v9]);
    }
    v9 -= 3;
    if (v9 == -6)
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v11, v11.__end_, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      operator new();
    }
  }
}

void sub_2241E918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void turi::unity_sgraph::lambda_triple_apply()
{
}

void turi::unity_sgraph::lambda_triple_apply_native(uint64_t a1, uint64_t a2, long long **a3)
{
  v103[3] = *MEMORY[0x263EF8340];
  long long v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "lambda_triple_apply_native", 511, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::vector<std::string> v11 = std::locale::use_facet(&v97, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v97);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*a3 == a3[1]) {
    turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_0::operator()();
  }
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(const turi::sgraph **)(v12 + 16);
  if (!v13)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v12);
    char v13 = *(const turi::sgraph **)(v12 + 16);
  }
  std::allocate_shared[abi:ne180100]<turi::sgraph,std::allocator<turi::sgraph>,turi::sgraph&,void>(v13, &v85);
  v82 = 0;
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  int v79 = 0;
  v80 = 0;
  unint64_t v81 = 0;
  turi::sgraph::get_vertex_fields(v85, 0, &v78);
  turi::sgraph::get_edge_fields(v85, 0, 0, &v77);
  __p = 0;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  atomic_ullong *volatile v71 = 0;
  unsigned int v72 = 0;
  unint64_t v73 = 0;
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v70, (const void **)v78.__r_.__value_.__l.__data_, (const void **)v78.__r_.__value_.__l.__size_);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v69, (const void **)v77.__r_.__value_.__l.__data_, (const void **)v77.__r_.__value_.__l.__size_);
  long long v14 = *a3;
  size_t v15 = a3[1];
  if (*a3 == v15)
  {
LABEL_91:
    atomic_ullong *volatile v67 = 0;
    uint64_t v68 = 0;
    unint64_t v66 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v66, (uint64_t)v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 3));
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v63 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v63, (uint64_t)v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]) >> 3));
    v97.__locale_ = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v97, v66, v67, ((char *)v67 - (char *)v66) >> 4);
    memset(v100, 0, sizeof(v100));
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v100, v63, v64, ((char *)v64 - (char *)v63) >> 4);
    std::__function::__value_func<void ()(turi::edge_triple &)>::__value_func[abi:ne180100]((uint64_t)&v101, a2);
    memset(v102, 0, sizeof(v102));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102, __p, (uint64_t)v75, ((char *)v75 - (unsigned char *)__p) >> 3);
    memset(v103, 0, 24);
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103, v71, (uint64_t)v72, ((char *)v72 - (unsigned char *)v71) >> 3);
    atomic_ullong *volatile v57 = v85;
    turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(&v86, (uint64_t)&v97);
    uint64_t v96 = 0;
    uint64_t v58 = (char *)operator new(0x88uLL);
    *(_OWORD *)(v58 + 8) = v86;
    *(void *)uint64_t v58 = &unk_26D771418;
    uint64_t v59 = v89;
    *((void *)v58 + 3) = v87;
    long long v86 = 0uLL;
    *((_OWORD *)v58 + 2) = v88;
    *((void *)v58 + 6) = v59;
    uint64_t v87 = 0;
    long long v88 = 0uLL;
    uint64_t v89 = 0;
    std::__function::__value_func<void ()(turi::edge_triple &)>::__value_func[abi:ne180100]((uint64_t)(v58 + 56), (uint64_t)v90);
    uint64_t v60 = v94;
    *((void *)v58 + 13) = v92;
    *(_OWORD *)(v58 + 88) = *(_OWORD *)v91;
    v91[0] = 0;
    v91[1] = 0;
    *((_OWORD *)v58 + 7) = v93;
    *((void *)v58 + 16) = v60;
    uint64_t v92 = 0;
    long long v93 = 0uLL;
    uint64_t v94 = 0;
    uint64_t v96 = v58;
    turi::sgraph_compute::triple_apply(v57, (uint64_t)v95, &v82, &v79, 1);
    std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](v95);
    if ((void)v93)
    {
      *((void *)&v93 + 1) = v93;
      operator delete((void *)v93);
    }
    if (v91[0])
    {
      v91[1] = v91[0];
      operator delete(v91[0]);
    }
    std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100](v90);
    *(void *)&long long v62 = &v88;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    *(void *)&long long v62 = &v86;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    operator new();
  }
  while (1)
  {
    size_t v16 = strlen(turi::sgraph::VID_COLUMN_NAME[0]);
    size_t v17 = v16;
    size_t v18 = *((unsigned __int8 *)v14 + 23);
    if (*((char *)v14 + 23) < 0)
    {
      size_t v20 = *((void *)v14 + 1);
      if (v16 != v20)
      {
        std::string v21 = turi::sgraph::SRC_COLUMN_NAME[0];
        size_t v22 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
        goto LABEL_27;
      }
      if (v16 == -1) {
LABEL_97:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      size_t v19 = *(const std::string::value_type **)v14;
    }
    else
    {
      if (v16 != v18)
      {
        std::string v21 = turi::sgraph::SRC_COLUMN_NAME[0];
        size_t v22 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
LABEL_24:
        size_t v20 = v18;
        int64_t v23 = (const std::string::value_type *)v14;
        if (v22 != v18)
        {
          std::string v24 = turi::sgraph::DST_COLUMN_NAME;
          size_t v25 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_32:
          uint64_t v26 = (const std::string::value_type *)v14;
          if (v25 == v18) {
            goto LABEL_39;
          }
          goto LABEL_40;
        }
        goto LABEL_30;
      }
      size_t v19 = (const std::string::value_type *)v14;
      if (v17 == -1) {
        goto LABEL_97;
      }
    }
    if (!memcmp(v19, turi::sgraph::VID_COLUMN_NAME[0], v17)) {
      goto LABEL_96;
    }
    std::string v21 = turi::sgraph::SRC_COLUMN_NAME[0];
    size_t v22 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
    if ((v18 & 0x80) == 0) {
      goto LABEL_24;
    }
    size_t v20 = *((void *)v14 + 1);
LABEL_27:
    if (v22 != v20)
    {
      std::string v24 = turi::sgraph::DST_COLUMN_NAME;
      size_t v25 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_36;
    }
    if (v20 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int64_t v23 = *(const std::string::value_type **)v14;
LABEL_30:
    if (!memcmp(v23, v21, v20)) {
      goto LABEL_96;
    }
    std::string v24 = turi::sgraph::DST_COLUMN_NAME;
    size_t v25 = strlen(turi::sgraph::DST_COLUMN_NAME);
    if ((v18 & 0x80) == 0) {
      goto LABEL_32;
    }
    size_t v20 = *((void *)v14 + 1);
LABEL_36:
    if (v25 == v20)
    {
      if (v20 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v26 = *(const std::string::value_type **)v14;
      size_t v18 = v20;
LABEL_39:
      if (!memcmp(v26, v24, v18))
      {
LABEL_96:
        v97.__locale_ = (std::locale::__imp *)v14;
        turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_1::operator()();
      }
    }
LABEL_40:
    if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v70, (const void **)v14)&& !std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v69, (const void **)v14))
    {
      v97.__locale_ = (std::locale::__imp *)v14;
      turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_2::operator()();
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v70, (const void **)v14))
    {
      uint64_t v27 = v83;
      if ((unint64_t)v83 >= v84)
      {
        v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v82, v14);
      }
      else
      {
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)v14, *((void *)v14 + 1));
        }
        else
        {
          long long v28 = *v14;
          v83->__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        }
        v29 = v27 + 1;
      }
      uint64_t v83 = v29;
      uint64_t v30 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_, (unsigned __int8 **)v14);
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v30 - v78.__r_.__value_.__r.__words[0]) >> 3);
      uint64_t v32 = v75;
      if ((unint64_t)v75 >= v76)
      {
        uint64_t v34 = (unint64_t *)__p;
        uint64_t v35 = ((char *)v75 - (unsigned char *)__p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v76 - (void)__p;
        if ((uint64_t)(v76 - (void)__p) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v76, v38);
          uint64_t v34 = (unint64_t *)__p;
          uint64_t v32 = v75;
        }
        else
        {
          v39 = 0;
        }
        atomic_ullong *volatile v40 = (unint64_t *)&v39[8 * v35];
        *atomic_ullong *volatile v40 = v31;
        uint64_t v33 = v40 + 1;
        while (v32 != v34)
        {
          unint64_t v41 = *--v32;
          *--atomic_ullong *volatile v40 = v41;
        }
        __p = v40;
        uint64_t v75 = v33;
        unint64_t v76 = (unint64_t)&v39[8 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *uint64_t v75 = v31;
        uint64_t v33 = v32 + 1;
      }
      uint64_t v75 = v33;
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v69, (const void **)v14))
    {
      atomic_ullong *volatile v42 = v80;
      if ((unint64_t)v80 >= v81)
      {
        char v44 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v79, v14);
      }
      else
      {
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)v14, *((void *)v14 + 1));
        }
        else
        {
          long long v43 = *v14;
          v80->__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        }
        char v44 = v42 + 1;
      }
      v80 = v44;
      uint64_t v45 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_, (unsigned __int8 **)v14);
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v45 - v77.__r_.__value_.__r.__words[0]) >> 3);
      atomic_ullong *volatile v47 = v72;
      if ((unint64_t)v72 >= v73)
      {
        uint64_t v49 = (unint64_t *)v71;
        uint64_t v50 = ((char *)v72 - (unsigned char *)v71) >> 3;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = v73 - (void)v71;
        if ((uint64_t)(v73 - (void)v71) >> 2 > v51) {
          unint64_t v51 = v52 >> 2;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v73, v53);
          uint64_t v49 = (unint64_t *)v71;
          atomic_ullong *volatile v47 = v72;
        }
        else
        {
          v54 = 0;
        }
        atomic_ullong *volatile v55 = (unint64_t *)&v54[8 * v50];
        *atomic_ullong *volatile v55 = v46;
        atomic_ullong *volatile v48 = v55 + 1;
        while (v47 != v49)
        {
          unint64_t v56 = *--v47;
          *--atomic_ullong *volatile v55 = v56;
        }
        atomic_ullong *volatile v71 = v55;
        unsigned int v72 = v48;
        unint64_t v73 = (unint64_t)&v54[8 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        unint64_t *v72 = v46;
        atomic_ullong *volatile v48 = v47 + 1;
      }
      unsigned int v72 = v48;
    }
    long long v14 = (long long *)((char *)v14 + 24);
    if (v14 == v15) {
      goto LABEL_91;
    }
  }
}

void sub_2241E9CB0(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 232));
  _Unwind_Resume(a1);
}

void *turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 3, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
  std::__function::__value_func<void ()(turi::edge_triple &)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a2 + 48);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 13, *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  return a1;
}

void sub_2241E9F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 88) = v14;
    operator delete(v14);
  }
  std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100](v11);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::~$_3(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  uint64_t v5 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void turi::_map_to_flex_dict(void *a1@<X0>, uint64_t a2@<X8>)
{
  v6[6] = *MEMORY[0x263EF8340];
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v4, a1[2]);
  if ((void *)*a1 != a1 + 1) {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v6);
  }
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 5;
  operator new();
}

void sub_2241EA4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v19 = v17;
  MEMORY[0x22A614FA0](v19, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v21 = *v16;
    if (*v16)
    {
      a16 = (void **)(v21 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
      MEMORY[0x22A614FA0](v21, 0x1020C405E66F15BLL);
    }
    *size_t v16 = 0;
  }
  *size_t v16 = 0;
  *((_DWORD *)v16 + 2) = 0;
  *((unsigned char *)v16 + 12) = 0;
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void turi::_map_from_flex_dict(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v3 = *a1;
  long long v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v26 = (_OWORD *)*MEMORY[0x263F8C2B8];
    std::string v24 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 72);
    size_t v25 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 64);
    while (2)
    {
      switch(*((unsigned char *)v3 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_12:
          v28[0] = v26;
          *(_OWORD **)((char *)v28 + *((void *)v26 - 3)) = v25;
          v28[2] = v24;
          v28[3] = (_OWORD *)(MEMORY[0x263F8C318] + 16);
          if (v29 < 0) {
            operator delete(v28[11]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v30);
          goto LABEL_19;
        case 2:
          uint64_t v5 = *v3;
          if (*(char *)(*v3 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
          }
          else
          {
            long long v6 = *(_OWORD *)(v5 + 8);
            v27.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
            *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
          }
          goto LABEL_19;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v28, (void *)(*v3 + 8));
          goto LABEL_19;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v28, (uint64_t *)(*v3 + 8));
          goto LABEL_19;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v28, (void *)(*v3 + 8));
          goto LABEL_19;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v3, &v27);
          goto LABEL_19;
        case 7:
          memset(&v27, 0, sizeof(v27));
          goto LABEL_19;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_19;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v28, (void *)(*v3 + 8));
LABEL_19:
          v28[0] = &v27;
          long long v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v28);
          unsigned int v8 = v7;
          uint64_t v9 = (char *)v7 + 56;
          if (v3 + 2 != (uint64_t *)((char *)v7 + 56))
          {
            switch(*((unsigned char *)v7 + 68))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_52;
                  }
                  if (*((char *)v10 + 31) < 0) {
                    operator delete((void *)v10[1]);
                  }
                  atomic_ullong *volatile v11 = v10;
                  uint64_t v12 = 0x1012C404EF22A49;
                  goto LABEL_51;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_52;
                  }
                  size_t v20 = (void *)v19[1];
                  if (v20)
                  {
                    v19[2] = (atomic_ullong)v20;
                    operator delete(v20);
                  }
                  atomic_ullong *volatile v11 = v19;
                  uint64_t v12 = 0x1080C409938AC02;
                  goto LABEL_51;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_52;
                  }
                  v28[0] = v13 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
                  goto LABEL_46;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_52;
                  }
                  v28[0] = v13 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
LABEL_46:
                  atomic_ullong *volatile v11 = v13;
                  uint64_t v12 = 0x1020C405E66F15BLL;
                  goto LABEL_51;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_52;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
                  atomic_ullong *volatile v11 = v21;
                  unsigned int v18 = -235920773;
                  goto LABEL_50;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
                  if (*(void *)v9)
                  {
                    size_t v15 = (void *)v14[6];
                    if (v15)
                    {
                      v14[7] = (atomic_ullong)v15;
                      operator delete(v15);
                    }
                    size_t v16 = (void *)v14[3];
                    if (v16)
                    {
                      v14[4] = (atomic_ullong)v16;
                      operator delete(v16);
                    }
                    uint64_t v17 = (std::__shared_weak_count *)v14[2];
                    if (v17) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                    }
                    atomic_ullong *volatile v11 = v14;
                    unsigned int v18 = 2071181815;
LABEL_50:
                    uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_51:
                    MEMORY[0x22A614FA0](v11, v12);
                  }
LABEL_52:
                  *(void *)uint64_t v9 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v22 = v3[2];
            *(void *)(v9 + 5) = *(uint64_t *)((char *)v3 + 21);
            *(void *)uint64_t v9 = v22;
            unsigned int v23 = *((unsigned __int8 *)v3 + 28);
            *((unsigned char *)v8 + 68) = v23;
            if (v23 <= 9 && ((1 << v23) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
            }
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          v3 += 4;
          if (v3 == v4) {
            return;
          }
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
  }
}

void sub_2241EAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v23, *(void **)(v23 + 8));
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::lambda_triple_apply_native(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t *)&v23);
  uint64_t v11 = turi::neural_net::external_float_array::shape(v23.__locale_);
  turi::toolkit_function_registry::get_native_function(v11, a2, (uint64_t)v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "lambda_triple_apply_native", 602, 1);
    size_t v15 = pthread_getspecific(*((void *)started + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16 && *((unsigned char *)v16 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
      uint64_t v17 = std::locale::use_facet(&v23, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)&v23);
  uint64_t v22 = 0;
  unsigned int v18 = operator new(0x28uLL);
  *unsigned int v18 = &unk_26D7714A8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 1), (uint64_t)v20);
  uint64_t v22 = v18;
  turi::unity_sgraph::lambda_triple_apply_native(a1, (uint64_t)v21, a3);
}

void sub_2241EAF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19)
{
  std::locale::~locale(&a18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::get_graph(turi::unity_sgraph *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    turi::unity_sgraph::get_graph(void)const::$_0::operator()();
  }
  uint64_t result = *(void *)(v1 + 16);
  if (!result)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v1);
    return *(void *)(v1 + 16);
  }
  return result;
}

void turi::unity_sgraph::get_graph(void)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_graph", 7);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 623, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sgraph::get_graph(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241EB0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::save(turi::unity_sgraph *this, turi::oarchive *a2)
{
  long long v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "save", 628, 1);
    char v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  atomic_ullong *volatile v10 = (const void *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  size_t v11 = strlen((const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    size_t v12 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + v11 > v12)
    {
      size_t v18 = 2 * (v12 + v11);
      *((void *)a2 + 5) = v18;
      uint64_t v19 = (char **)*((void *)a2 + 2);
      if (v19)
      {
        atomic_ullong *volatile v13 = *v19;
        size_t v20 = v19[1] - *v19;
        BOOL v21 = v18 >= v20;
        std::vector<char>::size_type v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v22);
          atomic_ullong *volatile v13 = (char *)**((void **)a2 + 2);
        }
        else if (!v21)
        {
          v19[1] = &v13[v18];
        }
      }
      else
      {
        atomic_ullong *volatile v13 = (char *)malloc_type_realloc(*((void **)a2 + 3), v18, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v13;
    }
    else
    {
      atomic_ullong *volatile v13 = (char *)*((void *)a2 + 3);
    }
    memcpy(&v13[*((void *)a2 + 4)], v10, v11);
    *((void *)a2 + 4) += v11;
  }
  atomic_ullong *volatile v14 = *(std::locale::__imp **)(turi::unity_sgraph::get_graph(this) + 24);
  v29.__locale_ = v14;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v15 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v15)
    {
      size_t v23 = 2 * v15 + 16;
      *((void *)a2 + 5) = v23;
      std::string v24 = (char **)*((void *)a2 + 2);
      if (v24)
      {
        size_t v16 = *v24;
        size_t v25 = v24[1] - *v24;
        BOOL v26 = v23 >= v25;
        std::vector<char>::size_type v27 = v23 - v25;
        if (v27 != 0 && v26)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v27);
          size_t v16 = (char *)**((void **)a2 + 2);
        }
        else if (!v26)
        {
          v24[1] = &v16[v23];
        }
      }
      else
      {
        size_t v16 = (char *)malloc_type_realloc(*((void **)a2 + 3), v23, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v16;
    }
    else
    {
      size_t v16 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v16[*((void *)a2 + 4)] = v14;
    *((void *)a2 + 4) += 8;
  }
  graph = (turi::sgraph *)turi::unity_sgraph::get_graph(this);
  turi::sgraph::save(graph, a2);
}

void sub_2241EB4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sgraph::load(turi::unity_sgraph *this, turi::iarchive *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "load", 641, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    char v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(__dst);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)&__dst[0].__locale_ = 0u;
  long long v15 = 0u;
  uint64_t v9 = (const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  size_t v10 = strlen((const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER);
  uint64_t v11 = *((void *)a2 + 2);
  if (v11)
  {
    uint64_t v12 = *((void *)a2 + 3);
    memcpy(__dst, (const void *)(v11 + v12), v10);
    *((void *)a2 + 3) = v12 + v10;
  }
  else
  {
    std::istream::read();
    uint64_t v9 = (const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  }
  if (!strcmp((const char *)__dst, v9))
  {
    if (*((void *)a2 + 2)) {
      *((void *)a2 + 3) += 8;
    }
    else {
      std::istream::read();
    }
    operator new();
  }
  turi::unity_sgraph::load(turi::iarchive &)::$_0::operator()();
}

void sub_2241EB7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void turi::unity_sgraph::save_graph(turi::unity_sgraph *a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  long long v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "save_graph", 669, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v15 = *((void *)a3 + 1);
    if (v15 != 3)
    {
      if (v15 == 4)
      {
        int v17 = **(_DWORD **)a3;
LABEL_30:
        if (v17 == 1852797802)
        {
          uint64_t graph = turi::unity_sgraph::get_graph(a1);
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v25 = *(std::string *)a2;
          }
          turi::save_sgraph_to_json(graph, (uint64_t)&v25);
        }
        goto LABEL_47;
      }
      if (v15 == 6 && **(_DWORD **)a3 == 1634625890 && *(_WORD *)(*(void *)a3 + 4) == 31090) {
        goto LABEL_26;
      }
LABEL_47:
      v27.__locale_ = (std::locale::__imp *)a3;
      turi::unity_sgraph::save_graph(std::string,std::string)::$_1::operator()();
    }
    atomic_ullong *volatile v13 = *(unsigned __int16 **)a3;
  }
  else
  {
    int v12 = *((unsigned __int8 *)a3 + 23);
    atomic_ullong *volatile v13 = a3;
    if (v12 != 3)
    {
      if (v12 != 4)
      {
        if (v12 != 6) {
          goto LABEL_47;
        }
        if (*(_DWORD *)a3 != 1634625890 || a3[2] != 31090) {
          goto LABEL_47;
        }
LABEL_26:
        v27.__locale_ = (std::locale::__imp *)-1;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unint64_t v31 = v32;
        v32[0] = 0;
        v32[1] = 0;
        uint64_t v37 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v26 = *(std::string *)a2;
        }
        turi::dir_archive::open_directory_for_write((uint64_t)&v27, (uint64_t)&v26, 0);
      }
      int v17 = *(_DWORD *)a3;
      goto LABEL_30;
    }
  }
  int v19 = *v13;
  int v20 = *((unsigned __int8 *)v13 + 2);
  if (v19 == 29539 && v20 == 118)
  {
    long long v22 = (turi::sgraph *)turi::unity_sgraph::get_graph(a1);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v24 = *(std::string *)a2;
    }
    turi::save_sgraph_to_csv(v22, (uint64_t)&v24);
  }
  goto LABEL_47;
}

void sub_2241EC0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (*(char *)(v55 - 201) < 0) {
    operator delete(*(void **)(v55 - 224));
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2241EC204()
{
}

void sub_2241EC228(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2241EC230);
  }
  __clang_call_terminate(a1);
}

void turi::unity_sgraph::load_graph(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "load_graph", 705, 1);
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    char v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        unsigned int v8 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v11);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v11.__locale_ = (std::locale::__imp *)-1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v21 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_read((uint64_t)&v11, (uint64_t)&v10);
}

void sub_2241EC930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 185) < 0) {
    operator delete(*(void **)(v51 - 208));
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2241ECA74()
{
}

void sub_2241ECA98(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2241ECAA0);
  }
  __clang_call_terminate(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string v10 = (void *)std::ostream::operator<<();
  std::locale v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 314, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241ECC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string v10 = (void *)std::ostream::operator<<();
  std::locale v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 315, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241ECED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string v10 = (void *)std::ostream::operator<<();
  std::locale v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 303, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241ED168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string v10 = (void *)std::ostream::operator<<();
  std::locale v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 304, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241ED3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupid", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string v10 = (void *)std::ostream::operator<<();
  std::locale v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 275, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241ED690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::unity_sgraph *turi::unity_sgraph::unity_sgraph(turi::unity_sgraph *this, const turi::unity_sgraph *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D770C48;
  uint64_t v3 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  return this;
}

void sub_2241ED820(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::copy_vertex_field_op::copy_vertex_field_op(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26D770D60;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  unsigned int v8 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)(a1 + 56) = a4;
  return a1;
}

void sub_2241ED8EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::copy_vertex_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::copy_vertex_field(a2, (unsigned __int8 **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(a1 + 56));
}

void turi::copy_vertex_field_op::~copy_vertex_field_op(void **this)
{
  *this = &unk_26D770D60;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D770D60;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::delete_vertex_field_op::delete_vertex_field_op(void *a1, long long *a2, uint64_t a3)
{
  *a1 = &unk_26D770DC0;
  uint64_t v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[4] = a3;
  return a1;
}

uint64_t turi::delete_vertex_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::remove_vertex_field(a2, (unsigned __int8 **)(a1 + 8), *(unsigned __int8 ***)(a1 + 32));
}

void turi::delete_vertex_field_op::~delete_vertex_field_op(void **this)
{
  *this = &unk_26D770DC0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D770DC0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x22A614FA0);
}

turi::sgraph *turi::sgraph::sgraph(turi::sgraph *this, const turi::sgraph *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  char v6 = *((unsigned char *)a2 + 56);
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<std::vector<turi::sframe>>::__init_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>((void *)this + 8, *((uint64_t **)a2 + 8), *((uint64_t **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::map[abi:ne180100]((uint64_t *)this + 11, (uint64_t)a2 + 88);
  return this;
}

void sub_2241EDBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<turi::sframe>>::__init_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2241EDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  std::locale v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(v4, *v6, v6[1], 0x14C1BACF914C1BADLL * ((v6[1] - *v6) >> 3));
      long long v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2241EDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<turi::sframe>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2241EDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      turi::sframe::sframe((turi::sframe *)(a4 + v7), (const turi::sframe *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2241EDE5C(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        char v6 = v4;
        std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2241EDFB0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  if (a1 + 1 == a2) {
    goto LABEL_3;
  }
  unint64_t v5 = *a5;
  unint64_t v6 = a2[4];
  if (*a5 < v6) {
    goto LABEL_3;
  }
  if (v6 < v5)
  {
LABEL_9:
    uint64_t v10 = a2[1];
    if (v10)
    {
      std::locale v11 = (void *)a2[1];
      do
      {
        a4 = v11;
        std::locale v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      long long v17 = a2;
      do
      {
        a4 = (void *)v17[2];
        BOOL v13 = *a4 == (void)v17;
        long long v17 = a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      unint64_t v18 = a4[4];
      if (v5 >= v18 && (v18 < v5 || a5[1] >= a4[5])) {
        return std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, a3, a5);
      }
    }
    if (v10)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return a4;
  }
  unint64_t v15 = a5[1];
  unint64_t v16 = a2[5];
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v7 = *a2;
  if ((void *)*a1 == a2)
  {
    uint64_t v9 = a2;
  }
  else
  {
    if (v7)
    {
      unsigned int v8 = (void *)*a2;
      do
      {
        uint64_t v9 = v8;
        unsigned int v8 = (void *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v12 = a2;
      do
      {
        uint64_t v9 = (void *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        uint64_t v12 = v9;
      }
      while (v13);
    }
    unint64_t v14 = v9[4];
    if (v14 >= *a5 && (*a5 < v14 || v9[5] >= a5[1])) {
      return std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, a3, a5);
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

void *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[2] = *(_OWORD *)a2;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 6) = 0;
  uint64_t result = std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>((void *)v6 + 6, *(void *)(a2 + 16), *(void *)(a2 + 24), 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2241EE2CC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 6;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a1, *((void *)a2 + 1));
    long long v4 = (void **)(a2 + 48);
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void *turi::select_vertex_fields_op::select_vertex_fields_op(void *a1, long long **a2, uint64_t a3)
{
  a1[1] = 0;
  long long v4 = a1 + 1;
  *a1 = &unk_26D770E10;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a3;
  v12[0] = 0;
  v12[1] = 0;
  std::locale v11 = v12;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v9 = 0;
  }
  else
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v11, (const void **)v5))
      {
        unint64_t v7 = a1[2];
        if (v7 >= a1[3])
        {
          uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v5);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v5);
          uint64_t v8 = v7 + 24;
        }
        a1[2] = v8;
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(&v11, v12, (const void **)v5, (uint64_t)v5);
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v6);
    uint64_t v9 = (char *)v12[0];
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v11, v9);
  return a1;
}

void sub_2241EE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char *a11)
{
}

uint64_t turi::select_vertex_fields_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::select_vertex_fields(a2, (const void ***)(a1 + 8), *(void *)(a1 + 32));
}

void turi::select_vertex_fields_op::~select_vertex_fields_op(turi::select_vertex_fields_op *this)
{
  *(void *)this = &unk_26D770E10;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D770E10;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C4069744673);
}

uint64_t turi::copy_edge_field_op::copy_edge_field_op(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_26D770E60;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  uint64_t v10 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  return a1;
}

void sub_2241EE640(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::copy_edge_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::copy_edge_field(a2, (unsigned __int8 **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 64));
}

void turi::copy_edge_field_op::~copy_edge_field_op(void **this)
{
  *this = &unk_26D770E60;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D770E60;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::delete_edge_field_op::delete_edge_field_op(void *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_26D770EB0;
  unint64_t v7 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[4] = a3;
  a1[5] = a4;
  return a1;
}

uint64_t turi::delete_edge_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::remove_edge_field(a2, (unsigned __int8 **)(a1 + 8), *(void *)(a1 + 32), *(unint64_t **)(a1 + 40));
}

void turi::delete_edge_field_op::~delete_edge_field_op(void **this)
{
  *this = &unk_26D770EB0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D770EB0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x22A614FA0);
}

void *turi::select_edge_fields_op::select_edge_fields_op(void *a1, long long **a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_26D770F00;
  a1[1] = 0;
  uint64_t v5 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = a4;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    uint64_t v10 = 0;
  }
  else
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v12, (const void **)v6))
      {
        unint64_t v8 = a1[2];
        if (v8 >= a1[3])
        {
          uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v6);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v6);
          uint64_t v9 = v8 + 24;
        }
        a1[2] = v9;
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(&v12, v13, (const void **)v6, (uint64_t)v6);
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
    uint64_t v10 = (char *)v13[0];
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v12, v10);
  return a1;
}

void sub_2241EE99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char *a11)
{
}

uint64_t turi::select_edge_fields_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::select_edge_fields(a2, (const void ***)(a1 + 8), *(void *)(a1 + 32), *(unint64_t **)(a1 + 40));
}

void turi::select_edge_fields_op::~select_edge_fields_op(turi::select_edge_fields_op *this)
{
  *(void *)this = &unk_26D770F00;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D770F00;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C40AA212178);
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::~__func()
{
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D770F50;
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770F50;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::operator()()
{
}

void sub_2241EEB5C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C40CF206F44);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::target_type()
{
}

void *std::__function::__value_func<turi::sgraph * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::~__func()
{
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D770FE0;
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D770FE0;
}

std::vector<std::string> *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::operator()(int a1, std::vector<std::string> *this, uint64_t a3)
{
  return turi::sgraph::operator=(this, a3);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::target_type()
{
}

std::vector<std::string> *turi::sgraph::operator=(std::vector<std::string> *this, uint64_t a2)
{
  if (this == (std::vector<std::string> *)a2)
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    long long v7 = *(_OWORD *)(a2 + 40);
    LOBYTE(this[2].__end_) = *(unsigned char *)(a2 + 56);
    *(_OWORD *)&this[1].__end_cap_.__value_ = v7;
    *(_OWORD *)&this[1].__begin_ = v6;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    long long v4 = *(_OWORD *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 40);
    LOBYTE(this[2].__end_) = *(unsigned char *)(a2 + 56);
    *(_OWORD *)&this[1].__end_cap_.__value_ = v5;
    *(_OWORD *)&this[1].__begin_ = v4;
    std::vector<std::vector<turi::sframe>>::__assign_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>((uint64_t)&this[2].__end_cap_, *(uint64_t **)(a2 + 64), *(uint64_t **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>((uint64_t **)&this[3].__end_cap_, *(void **)(a2 + 88), (void *)(a2 + 96));
  }
  return this;
}

void std::vector<std::vector<turi::sframe>>::__assign_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sframe>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    BOOL v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  unint64_t v15 = v14;
  unint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      long long v19 = v16;
      std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2241EEF48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2241EEF50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sframe>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    long long v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        long long v5 = v3;
        std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(a4, *v5, v5[1], 0x14C1BACF914C1BADLL * ((v5[1] - *v5) >> 3));
      }
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<turi::sframe>::__vdeallocate(a1);
    if (a4 > 0xDD67C8A60DD67CLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2983759F2298375ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
      unint64_t v11 = 0xDD67C8A60DD67CLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<turi::sframe>::__vallocate[abi:ne180100](a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x14C1BACF914C1BADLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(a2, v13, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(a2, a3, v9);
  unint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if ((uint64_t (***)(void))v16 != v14)
  {
    uint64_t v17 = v16 - 296;
    char v18 = (uint64_t (***)(void))(v16 - 296);
    do
    {
      uint64_t result = (**v18)(v18);
      v17 -= 296;
      BOOL v19 = v18 == v15;
      v18 -= 37;
    }
    while (!v19);
  }
  a1[1] = (uint64_t)v15;
  return result;
}

void sub_2241EF200(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2241EF208(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<turi::sframe>::__vdeallocate(void *a1)
{
  uint64_t v1 = (void (***)(void))*a1;
  if (*a1)
  {
    uint64_t v3 = (void (***)(void))a1[1];
    long long v4 = (void (***)(void))*a1;
    if (v3 != v1)
    {
      long long v5 = v3 - 37;
      long long v6 = v3 - 37;
      do
      {
        (**v6)(v6);
        v5 -= 37;
        BOOL v7 = v6 == v1;
        v6 -= 37;
      }
      while (!v7);
      long long v4 = (void (***)(void))*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      turi::sframe::operator=(a3, v4);
      v4 += 296;
      a3 += 296;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (unint64_t *)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 6);
          std::pair<std::pair<unsigned long,unsigned long> &,std::vector<turi::sframe> &>::operator=[abi:ne180100]<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          uint64_t v17 = (unint64_t *)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_multi<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2241EF484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<unsigned long,unsigned long> &,std::vector<turi::sframe> &>::operator=[abi:ne180100]<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_OWORD **)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  _OWORD *v4 = *(_OWORD *)a2;
  if (v3 != (uint64_t *)(a2 + 16)) {
    std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(v3, *(void *)(a2 + 16), *(void *)(a2 + 24), 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  }
  return a1;
}

void *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v3 = v4;
        unint64_t v7 = v4[4];
        if (v6 >= v7 && (v7 < v6 || a3[1] >= v4[5])) {
          break;
        }
        uint64_t v4 = (void *)*v4;
        uint64_t v8 = v3;
        if (!*v3) {
          goto LABEL_11;
        }
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4);
    uint64_t v8 = v3 + 1;
  }
  else
  {
    uint64_t v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

unint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_multi<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2241EF60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(turi::sgraph &,turi::sgraph &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t turi::lazy_eval_operation_dag<turi::sgraph>::lazy_eval_operation_dag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__function::__value_func<turi::sgraph * ()(void)>::__value_func[abi:ne180100](a1 + 48, a2);
  std::__function::__value_func<void ()(turi::sgraph &,turi::sgraph &)>::__value_func[abi:ne180100](a1 + 80, a3);
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "lazy_eval_operation_dag", 181, 1);
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        unint64_t v10 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return a1;
}

void sub_2241EF868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  std::__function::__value_func<void ()(turi::sgraph &,turi::sgraph &)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<turi::sgraph * ()(void)>::~__value_func[abi:ne180100](v11);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v10 + 8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<turi::sgraph * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(turi::sgraph &,turi::sgraph &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2241EFA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::sgraph>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sgraph *,std::shared_ptr<turi::sgraph>::__shared_ptr_default_delete<turi::sgraph,turi::sgraph>,std::allocator<turi::sgraph>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::sgraph>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::sgraph *,std::shared_ptr<turi::sgraph>::__shared_ptr_default_delete<turi::sgraph,turi::sgraph>,std::allocator<turi::sgraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::sgraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a2 + 88, *(char **)(a2 + 96));
    uint64_t v4 = (void **)(a2 + 64);
    std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)a2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x22A614FA0](a2, 0x1020C40CF206F44);
  }
  return result;
}

void std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::shared_ptr[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2241EFB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__shared_ptr_pointer<turi::lazy_eval_future<turi::sgraph> *,std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::__shared_ptr_default_delete<turi::lazy_eval_future<turi::sgraph>,turi::lazy_eval_future<turi::sgraph>>,std::allocator<turi::lazy_eval_future<turi::sgraph>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 24);
  if (result)
  {
    turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::lazy_eval_future<turi::sgraph> *,std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::__shared_ptr_default_delete<turi::lazy_eval_future<turi::sgraph>,turi::lazy_eval_future<turi::sgraph>>,std::allocator<turi::lazy_eval_future<turi::sgraph>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(uint64_t *a1)
{
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "~lazy_eval_future", 80, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        unint64_t v7 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v11);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::mark_for_deletion(*a1, a1[1]);
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_2241EFDCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::lazy_eval_operation_dag<turi::sgraph>::mark_for_deletion(uint64_t a1, unint64_t a2)
{
  unint64_t v11 = a2;
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "mark_for_deletion", 272, 1);
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        uint64_t v8 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)(a1 + 8), &v11))
  {
    uint64_t v9 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((void *)(a1 + 8), &v11);
    if (!v9) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    *(unsigned char *)(v9[3] + 88) = 1;
    turi::lazy_eval_operation_dag<turi::sgraph>::cleanup(a1, 1);
  }
}

void sub_2241EFFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::lazy_eval_operation_dag<turi::sgraph>::cleanup(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "cleanup", 304, 1);
    unint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v30.__locale_ = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v10 = *(void **)(a1 + 24);
  if (v10)
  {
    unint64_t v11 = 0;
    do
    {
      if (*(unsigned char *)(v10[3] + 88))
      {
        unint64_t v12 = v10[2];
        if (v11 >= v32)
        {
          locale = v30.__locale_;
          uint64_t v15 = ((char *)v11 - (char *)v30.__locale_) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = (char *)v32 - (char *)v30.__locale_;
          if (((char *)v32 - (char *)v30.__locale_) >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v18);
            locale = v30.__locale_;
            unint64_t v11 = (unint64_t *)v31;
          }
          else
          {
            BOOL v19 = 0;
          }
          long long v20 = (std::locale::__imp *)&v19[8 * v15];
          *(void *)long long v20 = v12;
          std::locale v13 = (std::locale::__imp *)((char *)v20 + 8);
          while (v11 != (unint64_t *)locale)
          {
            uint64_t v21 = *--v11;
            *((void *)v20 - 1) = v21;
            long long v20 = (std::locale::__imp *)((char *)v20 - 8);
          }
          v30.__locale_ = v20;
          unint64_t v31 = v13;
          uint64_t v32 = (unint64_t *)&v19[8 * v18];
          if (locale) {
            operator delete(locale);
          }
        }
        else
        {
          *unint64_t v11 = v12;
          std::locale v13 = (std::locale::__imp *)(v11 + 1);
        }
        unint64_t v31 = v13;
        unint64_t v11 = (unint64_t *)v13;
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
    uint64_t v22 = (unint64_t *)v30.__locale_;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v11 = 0;
  }
  unint64_t v23 = 126 - 2 * __clz(v11 - v22);
  if (v11 == v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>((uint64_t)v11, v11, (uint64_t)v22, v22, (uint64_t)&v29, v24, 1);
  std::string v25 = v30.__locale_;
  std::string v26 = v31;
  if (v30.__locale_ != v31)
  {
    do
    {
      unint64_t v29 = *(void *)v25;
      std::locale v27 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((void *)(a1 + 8), &v29);
      if (!v27) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (*(unsigned char *)(v27[3] + 88)) {
        turi::lazy_eval_operation_dag<turi::sgraph>::delete_vertex(a1, v29, a2);
      }
      std::string v25 = (std::locale::__imp *)((char *)v25 + 8);
    }
    while (v25 != v26);
    std::string v25 = v30.__locale_;
  }
  if (v25)
  {
    unint64_t v31 = v25;
    operator delete(v25);
  }
}

void sub_2241F02D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

void turi::lazy_eval_operation_dag<turi::sgraph>::delete_vertex(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v38 = a2;
  uint64_t v5 = (void *)(a1 + 8);
  if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)(a1 + 8), &v38))
  {
    unint64_t v6 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v38);
    if (!v6) {
LABEL_51:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    uint64_t v7 = v6[3];
    uint64_t v8 = *(void *)(v7 + 72) - *(void *)(v7 + 64);
    if (v8)
    {
      if (v8 == 8 && *(void *)(v7 + 48) == *(void *)(v7 + 40))
      {
        unint64_t v37 = v38;
        uint64_t v10 = v7;
        if (*(unsigned char *)(v7 + 88))
        {
          uint64_t v10 = v7;
          do
          {
            unint64_t v11 = *(unint64_t **)(v10 + 64);
            if (*(void *)(v10 + 72) - (void)v11 != 8) {
              break;
            }
            unint64_t v37 = *v11;
            unint64_t v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v37);
            if (!v12) {
              goto LABEL_51;
            }
            uint64_t v10 = v12[3];
          }
          while (*(unsigned char *)(v10 + 88));
        }
        if (!a3 || *(void *)(v10 + 16))
        {
          turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(a1, v37, &v35);
          uint64_t v13 = v35;
          unint64_t v14 = v36;
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = *(std::__shared_weak_count **)(v10 + 24);
          *(void *)(v10 + 16) = v13;
          *(void *)(v10 + 24) = v14;
          if (v15)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            uint64_t v13 = v35;
          }
          unint64_t v16 = v36;
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = *(std::__shared_weak_count **)(v10 + 8);
          *(void *)uint64_t v10 = v13;
          *(void *)(v10 + 8) = v16;
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          unint64_t v34 = v38;
          unint64_t v18 = *(unint64_t **)(v7 + 64);
          do
          {
            unint64_t v33 = 0;
            unint64_t v33 = *v18;
            BOOL v19 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v33);
            if (!v19) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            uint64_t v20 = v19[3];
            uint64_t v22 = *(char **)(v20 + 40);
            uint64_t v21 = *(char **)(v20 + 48);
            if (v22 != v21)
            {
              while (*(void *)v22 != v34)
              {
                v22 += 8;
                if (v22 == v21)
                {
                  uint64_t v22 = *(char **)(v20 + 48);
                  break;
                }
              }
            }
            int64_t v23 = v21 - (v22 + 8);
            if (v21 != v22 + 8) {
              memmove(v22, v22 + 8, v21 - (v22 + 8));
            }
            *(void *)(v20 + 48) = &v22[v23];
            if (v7)
            {
              uint64_t v24 = turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex((void *)v7);
              MEMORY[0x22A614FA0](v24, 0x1030C40B7245AFFLL);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v5, &v34);
            unint64_t v34 = v33;
            if (!*(unsigned char *)(v20 + 88)) {
              break;
            }
            unint64_t v18 = *(unint64_t **)(v20 + 64);
            uint64_t v7 = v20;
          }
          while (*(void *)(v20 + 72) - (void)v18 == 8);
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
        }
      }
    }
    else
    {
      std::string v25 = *(uint64_t **)(v7 + 40);
      std::string v26 = *(uint64_t **)(v7 + 48);
      if (v25 == v26) {
        goto LABEL_48;
      }
      do
      {
        uint64_t v35 = *v25;
        std::locale v27 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, (unint64_t *)&v35);
        if (!v27) {
          goto LABEL_51;
        }
        uint64_t v28 = v27[3];
        std::locale v30 = *(char **)(v28 + 64);
        unint64_t v29 = *(char **)(v28 + 72);
        if (v30 != v29)
        {
          while (*(void *)v30 != v38)
          {
            v30 += 8;
            if (v30 == v29)
            {
              std::locale v30 = *(char **)(v28 + 72);
              break;
            }
          }
        }
        int64_t v31 = v29 - (v30 + 8);
        if (v29 != v30 + 8) {
          memmove(v30, v30 + 8, v29 - (v30 + 8));
        }
        *(void *)(v28 + 72) = &v30[v31];
        ++v25;
      }
      while (v25 != v26);
      if (v7)
      {
LABEL_48:
        uint64_t v32 = turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex((void *)v7);
        MEMORY[0x22A614FA0](v32, 0x1030C40B7245AFFLL);
      }
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v5, &v38);
    }
  }
}

void sub_2241F05F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, int a7)
{
  while (2)
  {
    while (2)
    {
      while (2)
      {
        uint64_t v15 = (uint64_t)(a4 + 1);
        uint64_t v50 = (uint64_t)(a4 + 3);
        uint64_t v51 = (uint64_t)(a4 + 2);
        uint64_t v16 = 1 - a6;
        unint64_t v53 = a4;
        while (1)
        {
          uint64_t v17 = (char *)a2 - (char *)a4;
          unint64_t v18 = a2 - a4;
          if (!(!v8 & v7))
          {
            switch(v18)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v33 = *(a2 - 1);
                if (*a4 < v33)
                {
                  *(a2 - 1) = *a4;
                  *a4 = v33;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), a3, (uint64_t)(a4 + 1));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 1));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 3), (uint64_t)(a2 - 3), a3, (uint64_t)(a4 + 1));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v17 <= 191)
          {
            unint64_t v34 = a2 - 1;
            BOOL v36 = a2 == a4 || v34 == a4;
            if (a7)
            {
              if (!v36)
              {
                uint64_t v37 = 0;
                unint64_t v38 = a2 - 1;
                do
                {
                  unint64_t v40 = *--v38;
                  unint64_t v39 = v40;
                  unint64_t v41 = *v34;
                  if (v40 < v41)
                  {
                    uint64_t v42 = v37;
                    do
                    {
                      long long v43 = (char *)a2 + v42;
                      *(unint64_t *)((char *)a2 + v42 - 16) = v41;
                      if (!v42) {
                        break;
                      }
                      unint64_t v41 = *(unint64_t *)((char *)a2 + v42);
                      v42 += 8;
                    }
                    while (v39 < v41);
                    *((void *)v43 - 1) = v39;
                  }
                  v37 -= 8;
                  unint64_t v34 = v38;
                }
                while (v38 != a4);
              }
            }
            else if (!v36)
            {
              char v44 = a2 - 2;
              uint64_t v45 = a2 - 1;
              do
              {
                unint64_t v47 = *--v45;
                unint64_t v46 = v47;
                unint64_t v48 = *v34;
                if (v47 < v48)
                {
                  uint64_t v49 = v44;
                  do
                  {
                    *uint64_t v49 = v48;
                    unint64_t v48 = v49[2];
                    ++v49;
                  }
                  while (v46 < v48);
                  *uint64_t v49 = v46;
                }
                --v44;
                unint64_t v34 = v45;
              }
              while (v45 != a4);
            }
            return;
          }
          if (v16 == 1)
          {
            if (a2 != a4) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, a3, a4, a3, a4, a5);
            }
            return;
          }
          unint64_t v19 = v18 >> 1;
          uint64_t v20 = (uint64_t)&a2[-(v18 >> 1)];
          if ((unint64_t)v17 < 0x401) {
            break;
          }
          int v27 = a7;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)&a2[-(v18 >> 1)], (uint64_t)&a2[-(v18 >> 1)], v15, v15);
          uint64_t v21 = a3;
          uint64_t v22 = (uint64_t)&a2[1 - v19];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(a2 - 1), (uint64_t)(a2 - 1), v22, v22, v51, v51);
          uint64_t v23 = (uint64_t)&a2[~v19];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v23, v23, v50, v50);
          uint64_t v24 = v22;
          uint64_t v25 = v22;
          a3 = v21;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(v24, v25, v20, v20, v23, v23);
          uint64_t v26 = *(a2 - 1);
          *(a2 - 1) = *(void *)(v20 - 8);
          *(void *)(v20 - 8) = v26;
          if (v27) {
            goto LABEL_13;
          }
LABEL_11:
          if (*a2 < *(a2 - 1)) {
            goto LABEL_13;
          }
          a4 = v53;
          std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(a1, a2, a3, v53);
          a1 = v28;
          a2 = v29;
          a7 = 0;
          ++v16;
        }
        int v27 = a7;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)&a2[-(v18 >> 1)], (uint64_t)&a2[-(v18 >> 1)], a1, (uint64_t)a2, v15, v15);
        if ((v27 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_13:
        int v52 = v27;
        a4 = v53;
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(a2, v53, (uint64_t)&v54);
        uint64_t v30 = v54;
        int64_t v31 = v55;
        a6 = -v16;
        if (!v56)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>(a1, a2, v30, v31, a5, a6, v52 & 1);
          a7 = 0;
          a2 = v31 - 1;
          a1 = v30;
          continue;
        }
        break;
      }
      char v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, v54, v55);
      if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(v31 - 1), (uint64_t)(v31 - 1), a3, v53))
      {
        if (v32)
        {
          a1 = v30;
          a2 = v31 - 1;
          a7 = v52;
          continue;
        }
        goto LABEL_19;
      }
      break;
    }
    a3 = v30;
    a4 = v31;
    a7 = v52;
    if ((v32 & 1) == 0) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(a2 - 8);
  unint64_t v8 = *(void *)(a6 - 8);
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *(void *)(a2 - 8) = v8;
      *(void *)(a6 - 8) = v7;
      return 1;
    }
    *(void *)(a2 - 8) = v6;
    *(void *)(a4 - 8) = v7;
    unint64_t v11 = *(void *)(a6 - 8);
    if (v11 >= v7) {
      return 1;
    }
    *(void *)(a4 - 8) = v11;
    *(void *)(a6 - 8) = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *(void *)(a4 - 8) = v8;
    *(void *)(a6 - 8) = v6;
    unint64_t v9 = *(void *)(a4 - 8);
    unint64_t v10 = *(void *)(a2 - 8);
    if (v9 >= v10) {
      return 1;
    }
    *(void *)(a2 - 8) = v9;
    *(void *)(a4 - 8) = v10;
    return 2;
  }
  return 0;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4 = *(a2 - 1);
  if (v4 >= *a4)
  {
    unint64_t v8 = a2 - 1;
    do
    {
      unint64_t v6 = v8;
      if (v8 <= a4) {
        break;
      }
      --v8;
    }
    while (v4 >= *(v6 - 1));
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = v5 - 1;
      unint64_t v7 = *(v5 - 2);
      --v5;
    }
    while (v4 >= v7);
  }
  if (v6 > a4)
  {
    do
      unint64_t v9 = *a4++;
    while (v4 < v9);
  }
  while (a4 < v6)
  {
    unint64_t v10 = *(v6 - 1);
    *(v6 - 1) = *(a4 - 1);
    *(a4 - 1) = v10;
    do
    {
      unint64_t v11 = *(v6 - 2);
      --v6;
    }
    while (v4 >= v11);
    do
      unint64_t v12 = *a4++;
    while (v4 < v12);
  }
  if (v6 + 1 != a2) {
    *(a2 - 1) = *v6;
  }
  unint64_t *v6 = v4;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(unint64_t *a1@<X1>, unint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = *(a1 - 1);
  do
  {
    unint64_t v5 = a1[v3 - 2];
    --v3;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v3];
  if (v3 == -1)
  {
    do
    {
      if ((unint64_t)a2 >= v6) {
        break;
      }
      unint64_t v8 = *a2++;
    }
    while (v8 >= v4);
  }
  else
  {
    do
      unint64_t v7 = *a2++;
    while (v7 >= v4);
  }
  unint64_t v9 = &a1[v3];
  if ((unint64_t)a2 < v6)
  {
    unint64_t v10 = a2;
    do
    {
      unint64_t v11 = *(v9 - 1);
      *(v9 - 1) = *(v10 - 1);
      *(v10 - 1) = v11;
      do
      {
        unint64_t v12 = *(v9 - 2);
        --v9;
      }
      while (v12 < v4);
      do
        unint64_t v13 = *v10++;
      while (v13 >= v4);
    }
    while (v10 < v9);
  }
  unint64_t v14 = v9 + 1;
  if (v9 + 1 != a1) {
    *(a1 - 1) = *v9;
  }
  unint64_t *v9 = v4;
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v14;
  *(unsigned char *)(a3 + 16) = (unint64_t)a2 >= v6;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6 = 1;
  switch((a2 - (uint64_t)a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      unint64_t v7 = *(void *)(a2 - 8);
      if (*a4 < v7)
      {
        *(void *)(a2 - 8) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, (uint64_t)(a4 + 1));
LABEL_18:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v8 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      unint64_t v10 = (void *)(a2 - 24);
      if ((unint64_t *)(a2 - 24) == a4) {
        goto LABEL_14;
      }
      int v11 = 0;
      uint64_t v9 = a2 - 24;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v9 - 8);
    v9 -= 8;
    unint64_t v12 = v13;
    if (v13 < *(void *)(v8 - 8))
    {
      unint64_t v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (void *)a2) {
          break;
        }
        uint64_t v15 = v14 + 1;
        unint64_t v16 = v14[1];
        ++v14;
        if (v12 >= v16) {
          goto LABEL_12;
        }
      }
      uint64_t v15 = (void *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8) {
        break;
      }
    }
    uint64_t v8 = (uint64_t)v10;
    unint64_t v10 = (void *)v9;
    if ((unint64_t *)v9 == a4)
    {
LABEL_14:
      char v17 = 1;
      goto LABEL_20;
    }
  }
  char v17 = 0;
  LOBYTE(v9) = v9 == (void)a4;
LABEL_20:
  char v6 = v17 | v9;
  return v6 & 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a3, a4, a5, a6);
  unint64_t v13 = *(void *)(a8 - 8);
  unint64_t v14 = *(void *)(a6 - 8);
  if (v13 < v14)
  {
    *(void *)(a6 - 8) = v13;
    *(void *)(a8 - 8) = v14;
    unint64_t v15 = *(void *)(a6 - 8);
    unint64_t v16 = *(void *)(a4 - 8);
    if (v15 < v16)
    {
      *(void *)(a4 - 8) = v15;
      *(void *)(a6 - 8) = v16;
      unint64_t v17 = *(void *)(a4 - 8);
      unint64_t v18 = *(void *)(a2 - 8);
      if (v17 < v18)
      {
        *(void *)(a2 - 8) = v17;
        *(void *)(a4 - 8) = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v15 = *(void *)(a10 - 8);
  unint64_t v16 = *(void *)(a8 - 8);
  if (v15 < v16)
  {
    *(void *)(a8 - 8) = v15;
    *(void *)(a10 - 8) = v16;
    unint64_t v17 = *(void *)(a8 - 8);
    unint64_t v18 = *(void *)(a6 - 8);
    if (v17 < v18)
    {
      *(void *)(a6 - 8) = v17;
      *(void *)(a8 - 8) = v18;
      unint64_t v19 = *(void *)(a6 - 8);
      unint64_t v20 = *(void *)(a4 - 8);
      if (v19 < v20)
      {
        *(void *)(a4 - 8) = v19;
        *(void *)(a6 - 8) = v20;
        unint64_t v21 = *(void *)(a4 - 8);
        unint64_t v22 = *(void *)(a2 - 8);
        if (v21 < v22)
        {
          *(void *)(a2 - 8) = v21;
          *(void *)(a4 - 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v8 = a2 - (void)a4;
  if ((unint64_t *)a2 == a4) {
    return a5;
  }
  unint64_t v10 = a4;
  if (v8 >= 9)
  {
    unint64_t v14 = (unint64_t)((v8 >> 3) - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = a2 - 8 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a7, v8 >> 3, v16, v16);
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    unint64_t v17 = v10;
    unint64_t v18 = v10;
    do
    {
      unint64_t v20 = *--v18;
      unint64_t v19 = v20;
      unint64_t v21 = *(void *)(a2 - 8);
      if (v20 < v21)
      {
        *(v17 - 1) = v21;
        *(void *)(a2 - 8) = v19;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a7, v8 >> 3, a1, a2);
      }
      unint64_t v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 9)
  {
    uint64_t v22 = (unint64_t)v8 >> 3;
    do
    {
      uint64_t v23 = 0;
      unint64_t v24 = *(void *)(a2 - 8);
      uint64_t v25 = a2;
      do
      {
        uint64_t v26 = (unint64_t *)(v25 + 8 * ~v23);
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v28 = 2 * v23 + 2;
        if (v28 < v22 && *(v26 - 1) < *(v26 - 2))
        {
          --v26;
          uint64_t v27 = v28;
        }
        *(void *)(v25 - 8) = *(v26 - 1);
        uint64_t v25 = (uint64_t)v26;
        uint64_t v23 = v27;
      }
      while (v27 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      unint64_t v29 = v26 - 1;
      if (v26 == v10 + 1)
      {
        unint64_t *v29 = v24;
      }
      else
      {
        unint64_t *v29 = *v10;
        unint64_t *v10 = v24;
        if (a2 - (uint64_t)v29 >= 9)
        {
          unint64_t v30 = (((unint64_t)(a2 - (void)v29) >> 3) - 2) >> 1;
          unint64_t v31 = a2 - 8 * v30;
          unint64_t v32 = *(void *)(v31 - 8);
          unint64_t v33 = *v29;
          if (v32 < v33)
          {
            do
            {
              *(v26 - 1) = v32;
              uint64_t v26 = (unint64_t *)v31;
              if (!v30) {
                break;
              }
              unint64_t v30 = (v30 - 1) >> 1;
              unint64_t v31 = a2 - 8 * v30;
              unint64_t v32 = *(void *)(v31 - 8);
            }
            while (v32 < v33);
            *(v26 - 1) = v33;
          }
        }
      }
      ++v10;
    }
    while (v22-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v6 = a2 - a6;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 3)
    {
      uint64_t v8 = v6 >> 2;
      uint64_t v9 = (v6 >> 2) | 1;
      uint64_t v10 = a2 - 8 * v9;
      uint64_t v11 = v8 + 2;
      if (v11 < a4 && *(void *)(v10 - 8) < *(void *)(v10 - 16))
      {
        v10 -= 8;
        uint64_t v9 = v11;
      }
      unint64_t v12 = *(void *)(v10 - 8);
      unint64_t v13 = *(void *)(a6 - 8);
      if (v12 >= v13)
      {
        do
        {
          *(void *)(a6 - 8) = v12;
          a6 = v10;
          if (v7 < v9) {
            break;
          }
          uint64_t v14 = (2 * v9) | 1;
          uint64_t v10 = a2 - 8 * v14;
          uint64_t v15 = 2 * v9 + 2;
          if (v15 < a4 && *(void *)(v10 - 8) < *(void *)(v10 - 16))
          {
            v10 -= 8;
            uint64_t v14 = v15;
          }
          unint64_t v12 = *(void *)(v10 - 8);
          uint64_t v9 = v14;
        }
        while (v12 >= v13);
        *(void *)(a6 - 8) = v13;
      }
    }
  }
}

std::__shared_weak_count *turi::lazy_eval_operation_dag<turi::sgraph>::make_eager@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v38 = a2;
  unint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "make_eager", 237, 1);
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v36, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)(a1 + 8), &v38);
  v36.__locale_ = (std::locale::__imp *)(v11 != 0);
  if (!v11)
  {
    unint64_t v32 = &v36;
    turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((void *)(a1 + 8), &v38);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v13 = (uint64_t *)v12[3];
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  if (!v14 || v14->__shared_owners_ == -1)
  {
    turi::lazy_eval_operation_dag<turi::sgraph>::list_ancestors(a1, v38, (uint64_t)&v36);
    for (uint64_t i = v37; i; uint64_t i = (uint64_t **)*i)
    {
      unint64_t v32 = (std::locale *)i[2];
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, i[3], (uint64_t)i[4], i[4] - i[3]);
      unint64_t v17 = __p;
      if ((unint64_t)(v34 - (unsigned char *)__p) >= 9)
      {
        turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(&v30, a1, v32);
        unint64_t v39 = &v32;
        uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 8, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, &v39)[3];
        uint64_t v20 = v30;
        unint64_t v19 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v21 = *(std::__shared_weak_count **)(v18 + 24);
        *(void *)(v18 + 16) = v20;
        *(void *)(v18 + 24) = v19;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        unint64_t v39 = &v32;
        uint64_t v22 = (void *)std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 8, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, &v39)[3];
        uint64_t v24 = v30;
        uint64_t v23 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = (std::__shared_weak_count *)v22[1];
        *uint64_t v22 = v24;
        v22[1] = v23;
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        unint64_t v17 = __p;
      }
      if (v17)
      {
        unint64_t v34 = v17;
        operator delete(v17);
      }
    }
    turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(a1, v38, 1, a3);
    uint64_t v27 = *a3;
    uint64_t v26 = a3[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v13[1];
    *unint64_t v13 = v27;
    v13[1] = v26;
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    return (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v36);
  }
  else
  {
    *a3 = 0;
    uint64_t result = std::__shared_weak_count::lock(v14);
    a3[1] = (uint64_t)result;
    if (result) {
      *a3 = *v13;
    }
  }
  return result;
}

void sub_2241F156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::locale a15)
{
}

void *turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vertices.count(vertex_id)", 25);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 239, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241F17D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::list_ancestors(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  turi::mutable_queue<unsigned long,unsigned long>::mutable_queue(&__p);
  turi::mutable_queue<unsigned long,unsigned long>::push((uint64_t *)&__p, a2, a2);
  if (v31 - (unsigned char *)__p != 16)
  {
    uint64_t v6 = (void *)(a1 + 8);
    do
    {
      uint64_t v29 = 0;
      uint64_t v29 = turi::mutable_queue<unsigned long,unsigned long>::pop((uint64_t *)&__p);
      if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)a3, (unint64_t *)&v29))
      {
        unint64_t v33 = &v29;
        int64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a3, (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, &v33);
        if (v7[4] - v7[3] > 8uLL) {
          continue;
        }
      }
      uint64_t v8 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v6, (unint64_t *)&v29);
      if (!v8) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v9 = v8[3];
      uint64_t v11 = *(unint64_t **)(v9 + 40);
      uint64_t v10 = *(unint64_t **)(v9 + 48);
      while (v11 != v10)
      {
        unint64_t v28 = 0;
        unint64_t v28 = *v11;
        unint64_t v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v6, (unint64_t *)&v29);
        if (!v12) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v13 = *(void *)(v12[3] + 8);
        if (!v13 || *(void *)(v13 + 8) == -1)
        {
          unint64_t v33 = (uint64_t *)&v28;
          uint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a3, &v28, (uint64_t)&std::piecewise_construct, &v33);
          char v15 = v14;
          uint64_t v16 = (uint64_t *)v14[4];
          uint64_t v17 = (uint64_t)(v14 + 5);
          unint64_t v18 = v14[5];
          if ((unint64_t)v16 >= v18)
          {
            uint64_t v20 = (uint64_t *)v14[3];
            uint64_t v21 = v16 - v20;
            if ((unint64_t)(v21 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v22 = v18 - (void)v20;
            unint64_t v23 = (uint64_t)(v18 - (void)v20) >> 2;
            if (v23 <= v21 + 1) {
              unint64_t v23 = v21 + 1;
            }
            if (v22 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24)
            {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17, v24);
              uint64_t v20 = (uint64_t *)v15[3];
              uint64_t v16 = (uint64_t *)v15[4];
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (uint64_t *)&v25[8 * v21];
            *uint64_t v26 = v29;
            unint64_t v19 = v26 + 1;
            while (v16 != v20)
            {
              uint64_t v27 = *--v16;
              *--uint64_t v26 = v27;
            }
            void v15[3] = v26;
            v15[4] = v19;
            v15[5] = &v25[8 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *uint64_t v16 = v29;
            unint64_t v19 = v16 + 1;
          }
          v15[4] = v19;
          if (!boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(v32, v28, &v28))turi::mutable_queue<unsigned long,unsigned long>::push((uint64_t *)&__p, v28, v28); {
        }
          }
        ++v11;
      }
    }
    while (v31 - (unsigned char *)__p != 16);
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v32);
  if (__p)
  {
    unint64_t v31 = __p;
    operator delete(__p);
  }
}

void sub_2241F1B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  turi::mutable_queue<unsigned long,unsigned long>::~mutable_queue((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(v4);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v53 = a2;
  int64_t v7 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((void *)(a1 + 8), &v53);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = v7[3];
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v9 || v9->__shared_owners_ == -1)
  {
    uint64_t v13 = *(void *)(v8 + 48) - *(void *)(v8 + 40);
    if (!v13)
    {
      *a4 = 0;
      a4[1] = 0;
      uint64_t v38 = *(void *)(a1 + 72);
      if (v38)
      {
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
        std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>((uint64_t)a4, v39);
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    std::vector<std::shared_ptr<turi::sgraph>>::vector(&v51, v13 >> 3);
    __p = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v14 = *(void *)(v8 + 40);
    if (*(void *)(v8 + 48) != v14)
    {
      unint64_t v15 = 0;
      do
      {
        turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(&v47, a1, *(void *)(v14 + 8 * v15), v15 == 0);
        uint64_t v16 = (char *)v51 + 16 * v15;
        long long v17 = v47;
        long long v47 = 0uLL;
        unint64_t v18 = (std::__shared_weak_count *)*((void *)v16 + 1);
        *(_OWORD *)uint64_t v16 = v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (*((void *)&v47 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
        }
        if (v15)
        {
          uint64_t v19 = *((void *)v51 + 2 * v15);
          uint64_t v20 = v49;
          if (v49 >= v50)
          {
            uint64_t v22 = (v49 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v22 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v23 = (v50 - (unsigned char *)__p) >> 2;
            if (v23 <= v22 + 1) {
              unint64_t v23 = v22 + 1;
            }
            if ((unint64_t)(v50 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v50, v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = &v25[8 * v22];
            *(void *)uint64_t v26 = v19;
            uint64_t v21 = v26 + 8;
            unint64_t v28 = (char *)__p;
            uint64_t v27 = v49;
            if (v49 != __p)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              uint64_t v27 = (char *)__p;
            }
            __p = v26;
            uint64_t v49 = v21;
            uint64_t v50 = &v25[8 * v24];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)uint64_t v49 = v19;
            uint64_t v21 = v20 + 8;
          }
          uint64_t v49 = v21;
        }
        ++v15;
        uint64_t v14 = *(void *)(v8 + 40);
      }
      while (v15 < (*(void *)(v8 + 48) - v14) >> 3);
    }
    uint64_t v30 = v51;
    *a4 = *(void *)v51;
    uint64_t v31 = v30[1];
    a4[1] = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void))(**(void **)(v8 + 32) + 16))(*(void *)(v8 + 32));
    uint64_t v49 = (char *)__p;
    unint64_t v32 = (char *)v51;
    for (uint64_t i = v52; i != v32; i -= 16)
    {
      unint64_t v34 = (std::__shared_weak_count *)*((void *)i - 1);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
    int v52 = v32;
    if ((a3 & 1) == 0)
    {
      uint64_t v36 = *a4;
      uint64_t v35 = a4[1];
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(std::__shared_weak_count **)(v8 + 8);
      *(void *)uint64_t v8 = v36;
      *(void *)(v8 + 8) = v35;
      if (v37) {
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (__p)
    {
      uint64_t v49 = (char *)__p;
      operator delete(__p);
    }
    __p = &v51;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else if (a3)
  {
    *a4 = 0;
    a4[1] = 0;
    if (!*(void *)(v8 + 32))
    {
      uint64_t v41 = *(void *)(a1 + 72);
      if (v41)
      {
        uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(v41);
        std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>((uint64_t)a4, v42);
      }
LABEL_67:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(v8 + 24);
    if (!v10 || *(void *)(v10 + 8))
    {
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
        std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>((uint64_t)a4, v12);
      }
      goto LABEL_67;
    }
    uint64_t v43 = *(void *)(v8 + 16);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    char v44 = (std::__shared_weak_count *)a4[1];
    *a4 = v43;
    a4[1] = v10;
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    uint64_t v45 = *(std::__shared_weak_count **)(v8 + 24);
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    unint64_t v46 = *(std::__shared_weak_count **)(v8 + 8);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    if (v46) {
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    *a4 = 0;
    unint64_t v40 = std::__shared_weak_count::lock(v9);
    a4[1] = (uint64_t)v40;
    if (v40) {
      *a4 = *(void *)v8;
    }
  }
}

void sub_2241F20F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void *turi::mutable_queue<unsigned long,unsigned long>::push(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v21 = a2;
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = a1[2];
  uint64_t v8 = (unint64_t *)a1[1];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (unint64_t *)*a1;
    uint64_t v11 = ((uint64_t)v8 - *a1) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
      uint64_t v10 = (unint64_t *)*a1;
      uint64_t v8 = (unint64_t *)a1[1];
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = (unint64_t *)&v15[16 * v11];
    long long v17 = &v15[16 * v14];
    *uint64_t v16 = a2;
    v16[1] = a3;
    uint64_t v9 = v16 + 2;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 2;
        v8 -= 2;
      }
      while (v8 != v10);
      uint64_t v10 = (unint64_t *)*a1;
    }
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    v8[1] = a3;
    uint64_t v9 = v8 + 2;
  }
  a1[1] = (uint64_t)v9;
  unint64_t v18 = (((uint64_t)v9 - *a1) >> 4) - 1;
  uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(a1 + 3, &v21);
  result[3] = v18;
  if (v18 >= 2)
  {
    do
    {
      if (*(void *)(*a1 + 16 * (v18 >> 1) + 8) > a3) {
        break;
      }
      uint64_t result = turi::mutable_queue<unsigned long,unsigned long>::swap(a1, v18, v18 >> 1);
      BOOL v20 = v18 > 3;
      v18 >>= 1;
    }
    while (v20);
  }
  return result;
}

uint64_t turi::mutable_queue<unsigned long,unsigned long>::pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  long long v5 = *(_OWORD *)(*a1 + 16);
  turi::mutable_queue<unsigned long,unsigned long>::swap(a1, 1, ((v3 - v2) >> 4) - 1);
  a1[1] -= 16;
  turi::mutable_queue<unsigned long,unsigned long>::heapify(a1, 1);
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::erase_key_unique(a1 + 3, &v5);
  return v5;
}

uint64_t turi::mutable_queue<unsigned long,unsigned long>::~mutable_queue(uint64_t a1)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((void *)(a1 + 24));
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *turi::mutable_queue<unsigned long,unsigned long>::mutable_queue(void *a1)
{
  long long v4 = 0uLL;
  uint64_t v2 = std::vector<std::pair<unsigned long,unsigned long>>::vector(a1, 1uLL, &v4);
  boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map((uint64_t)(v2 + 3));
  return a1;
}

void sub_2241F23DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<unsigned long,unsigned long>>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2241F2460(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *turi::mutable_queue<unsigned long,unsigned long>::swap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = (unint64_t *)(*a1 + 16 * a2);
  long long v8 = *(_OWORD *)v7;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)(*a1 + 16 * a3);
  *(_OWORD *)(v6 + 16 * a3) = v8;
  uint64_t v9 = a1 + 3;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(a1 + 3, v7)[3] = a2;
  uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(v9, (unint64_t *)(*a1 + 16 * a3));
  result[3] = a3;
  return result;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  long long v5 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(a1, *a2, a2);
  if (v5) {
    return v5;
  }
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = 0;
  v6[1] = 0;
  v6[2] = *a2;
  v6[3] = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(a1, a1[2] + 1);
  unint64_t v7 = a1[1];
  unint64_t v8 = v4 % v7;
  uint64_t v9 = a1[5];
  v6[1] = (v4 % v7) & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v10 = *(void **)(v9 + 8 * (v4 % v7));
  if (v10)
  {
    void *v6 = *v10;
    uint64_t v11 = *(void *)(v9 + 8 * v8);
  }
  else
  {
    uint64_t v11 = v9 + 8 * v7;
    if (*(void *)v11) {
      *(void *)(v9 + 8 * *(void *)(*(void *)v11 + 8)) = v6;
    }
    *(void *)(v9 + 8 * v8) = v11;
    void *v6 = *(void *)v11;
  }
  *(void *)uint64_t v11 = v6;
  ++a1[2];
  return v6;
}

void sub_2241F25D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::mutable_queue<unsigned long,unsigned long>::heapify(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = a2; ; a2 = i)
  {
    uint64_t v4 = *v2;
    unint64_t v5 = ((v2[1] - *v2) >> 4) - 1;
    if (2 * a2 <= v5)
    {
      if (*(void *)(v4 + 16 * a2 + 8) >= *(void *)(v4 + 32 * a2 + 8)) {
        uint64_t i = a2;
      }
      else {
        uint64_t i = 2 * a2;
      }
    }
    unint64_t v6 = (2 * a2) | 1;
    if (v6 <= v5 && *(void *)(v4 + 16 * i + 8) < *(void *)(v4 + 16 * v6 + 8)) {
      uint64_t i = (2 * a2) | 1;
    }
    if (i == a2) {
      break;
    }
    uint64_t result = turi::mutable_queue<unsigned long,unsigned long>::swap(v2, a2, i);
  }
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::erase_key_unique(void *a1, void *a2)
{
  if (!a1[2]) {
    return 0;
  }
  uint64_t v3 = *a2 % a1[1];
  uint64_t result = (uint64_t)boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::find_previous_node((uint64_t)a1, a2, v3);
  if (!result) {
    return result;
  }
  unint64_t v5 = (void *)result;
  unint64_t v6 = *(uint64_t **)result;
  uint64_t v7 = *v6;
  void *v5 = *v6;
  --a1[2];
  if (!v7)
  {
    uint64_t v9 = a1[5];
LABEL_8:
    if (*(void **)(v9 + 8 * v3) == v5) {
      *(void *)(v9 + 8 * v3) = 0;
    }
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (v8 != v3)
  {
    uint64_t v9 = a1[5];
    *(void *)(v9 + 8 * v8) = v5;
    goto LABEL_8;
  }
LABEL_10:
  operator delete(v6);
  return 1;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::find_previous_node(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = *(void **)(*(void *)(a1 + 40) + 8 * a3);
  if (result)
  {
    uint64_t v4 = (void *)*result;
    if (*result)
    {
      while (1)
      {
        unint64_t v5 = v4;
        uint64_t v6 = v4[1];
        if ((v6 & 0x8000000000000000) == 0)
        {
          if (v6 != a3) {
            return 0;
          }
          if (*a2 == v5[2]) {
            break;
          }
        }
        uint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2241F29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *size_t v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2241F2C30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(&v2, a2);
}

void *std::vector<std::shared_ptr<turi::sgraph>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2241F2CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    long long v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::unique_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void *turi::lazy_eval_future<turi::sgraph>::lazy_eval_future(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "lazy_eval_future", 103, 1);
    unint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint8x8_t v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return a1;
}

void sub_2241F2F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  std::locale v12 = *(std::__shared_weak_count **)(v10 + 24);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::unity_sgraph,std::allocator<turi::unity_sgraph>,turi::unity_sgraph&,void>(const turi::unity_sgraph *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x80uLL);
  std::__shared_ptr_emplace<turi::unity_sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::unity_sgraph&,std::allocator<turi::unity_sgraph>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_2241F2FEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::unity_sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::unity_sgraph&,std::allocator<turi::unity_sgraph>,0>(void *a1, const turi::unity_sgraph *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D75A0D8;
  turi::unity_sgraph::unity_sgraph((turi::unity_sgraph *)(a1 + 3), a2);
  return a1;
}

void sub_2241F3048(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_future<turi::sgraph>::make_eager(uint64_t a1)
{
  long long v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "make_eager", 107, 1);
    unint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        unint64_t v7 = std::locale::use_facet((const std::locale *)&v11, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v11);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(*(void *)a1, *(void *)(a1 + 8), (uint64_t *)&v11);
  long long v8 = v11;
  long long v11 = 0uLL;
  uint8x8_t v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
}

void sub_2241F31F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>,std::vector<turi::flexible_type>&,void>@<X0>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type> const>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2241F32B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type> const>,0>(uint64_t a1, uint64_t **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D771160;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((void *)(a1 + 24), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_2241F332C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D771160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D771160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D7711B0;
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D7711B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D7711B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D7711B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::lazy_id_translation_functor::operator()(uint64_t **a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = 0;
  unint64_t v5 = *a1;
  switch(a2[12])
  {
    case 0:
      unint64_t v4 = *(void *)a2;
      goto LABEL_25;
    case 1:
      unint64_t v4 = (uint64_t)*(double *)a2;
      goto LABEL_25;
    case 2:
      uint64_t v7 = *(void *)a2;
      long long v8 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint8x8_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        uint8x8_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      unint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v28[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v10 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v10 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v25 = std::string::append(&v31, " cannot be interpreted as an integer");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v28[0] = (void *)v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v6 = *(void *)a2;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v11 = *(void *)a2;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      goto LABEL_24;
    case 5:
      uint64_t v12 = *(void *)a2;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      goto LABEL_24;
    case 6:
      unint64_t v4 = (uint64_t)(*(void *)a2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v13 = *(void *)a2;
      float v14 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(v13 + 24);
      long long v16 = *(_OWORD *)(v13 + 56);
      long long v29 = *(_OWORD *)(v13 + 40);
      long long v30 = v16;
      *(_OWORD *)unint64_t v28 = v15;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v29 + 1))
      {
        *(void *)&long long v30 = *((void *)&v29 + 1);
        operator delete(*((void **)&v29 + 1));
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      unint64_t v4 = 0;
LABEL_25:
      uint64_t v17 = *v5;
      if (v4 >= (v5[1] - *v5) >> 4) {
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)a3 = 0;
      size_t v18 = (uint64_t *)(v17 + 16 * v4);
      *(_DWORD *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 12) = 0;
      if (v18 != (uint64_t *)a3)
      {
        uint64_t v19 = *v18;
        *(void *)(a3 + 5) = *(uint64_t *)((char *)v18 + 5);
        *(void *)a3 = v19;
        unsigned int v20 = *((unsigned __int8 *)v18 + 12);
        *(unsigned char *)(a3 + 12) = v20;
        BOOL v21 = v20 > 9;
        int v22 = (1 << v20) & 0x33C;
        if (!v21 && v22 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
        }
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2241F3990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D771230;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D771230;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D771230;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D771230;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::vector<std::shared_ptr<turi::unity_sframe_base>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::unity_sframe_base>>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::unity_sframe_base>>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::unity_sframe_base>>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::unity_sframe_base>>,std::reverse_iterator<std::shared_ptr<turi::unity_sframe_base>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2241F3E40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::unity_sgraph *,std::shared_ptr<turi::unity_sgraph>::__shared_ptr_default_delete<turi::unity_sgraph,turi::unity_sgraph>,std::allocator<turi::unity_sgraph>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::unity_sgraph *,std::shared_ptr<turi::unity_sgraph>::__shared_ptr_default_delete<turi::unity_sgraph,turi::unity_sgraph>,std::allocator<turi::unity_sgraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"operation != __null", 19);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 215, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241F3FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"operation->num_arguments()", 26);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"parents.size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 216, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241F425C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::add_vertices_op<turi::sframe>::add_vertices_op(std::string *a1, std::string::size_type *a2, long long *a3, std::string::size_type a4)
{
  std::string::size_type v7 = *a2;
  std::string::size_type v6 = a2[1];
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D771328;
  a1->__r_.__value_.__l.__size_ = v7;
  a1->__r_.__value_.__r.__words[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  a1[2].__r_.__value_.__r.__words[0] = a4;
  return a1;
}

void sub_2241F43E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::add_vertices_op<turi::sframe>::execute(uint64_t a1, turi::sgraph *a2)
{
  v4[37] = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v4, *(const turi::sframe **)(a1 + 8));
  turi::sgraph::add_vertices(a2, (uint64_t)v4, (unsigned __int8 **)(a1 + 24), 0);
  turi::sframe::~sframe((turi::sframe *)v4);
}

void sub_2241F4488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t turi::add_vertices_op<turi::sframe>::~add_vertices_op(uint64_t a1)
{
  *(void *)a1 = &unk_26D771328;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::add_vertices_op<turi::sframe>::~add_vertices_op(uint64_t a1)
{
  *(void *)a1 = &unk_26D771328;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x22A614FA0);
}

std::string *turi::add_edges_op<turi::sframe>::add_edges_op(std::string *a1, std::string::size_type *a2, long long *a3, long long *a4, std::string::size_type a5, std::string::size_type a6)
{
  std::string::size_type v11 = *a2;
  std::string::size_type v10 = a2[1];
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D771378;
  a1->__r_.__value_.__l.__size_ = v11;
  a1->__r_.__value_.__r.__words[2] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v12;
  }
  char v13 = a1 + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    a1[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  a1[3].__r_.__value_.__r.__words[0] = a5;
  a1[3].__r_.__value_.__l.__size_ = a6;
  return a1;
}

void sub_2241F4648(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void turi::add_edges_op<turi::sframe>::execute(uint64_t a1, turi::sgraph *a2)
{
  v4[37] = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v4, *(const turi::sframe **)(a1 + 8));
  turi::sgraph::add_edges(a2, (uint64_t)v4, (unsigned __int8 **)(a1 + 24), (unsigned __int8 **)(a1 + 48), *(void ***)(a1 + 72), *(unint64_t **)(a1 + 80));
  turi::sframe::~sframe((turi::sframe *)v4);
}

void sub_2241F4704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t turi::add_edges_op<turi::sframe>::~add_edges_op(uint64_t a1)
{
  *(void *)a1 = &unk_26D771378;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::add_edges_op<turi::sframe>::~add_edges_op(uint64_t a1)
{
  *(void *)a1 = &unk_26D771378;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::allocate_shared[abi:ne180100]<turi::sgraph,std::allocator<turi::sgraph>,turi::sgraph&,void>@<X0>(const turi::sgraph *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::sgraph&,std::allocator<turi::sgraph>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2241F4860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::sgraph&,std::allocator<turi::sgraph>,0>(void *a1, const turi::sgraph *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7713C8;
  turi::sgraph::sgraph((turi::sgraph *)(a1 + 3), a2);
  return a1;
}

void sub_2241F48BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7713C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7713C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::sgraph>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::sgraph>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::sgraph>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a2 + 88, *(char **)(a2 + 96));
  uint64_t v3 = (void **)(a2 + 64);
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)a2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string const*,std::string const*,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2241F4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string const*,std::string const*,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  char v7 = 0;
  if (a2 != a3) {
    turi::flexible_type::flexible_type<std::string>(a4);
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return a4;
}

void sub_2241F4ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__value_func<void ()(turi::edge_triple &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D771418;
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

{
  void *v2;
  void *v3;
  void **v5;

  *(void *)a1 = &unk_26D771418;
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  return MEMORY[0x22A614FA0](a1, 0x10B1C4021313D50);
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x88uLL);
  *uint64_t v2 = &unk_26D771418;
  turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(v2 + 1, v1);
  return v2;
}

void sub_2241F4D94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D771418;
  return turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(a2 + 1, a1 + 8);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy(uint64_t a1)
{
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::operator()(uint64_t a1, uint64_t **a2)
{
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::target_type()
{
}

void std::__function::__alloc_func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(turi::edge_triple &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::operator()(void *a1, uint64_t **this)
{
  turi::sgraph_compute::edge_scope::lock_vertices((uint64_t)this);
  v152 = (uint64_t *)v153;
  v153[0] = 0;
  v155[0] = 0;
  v155[1] = 0;
  v153[1] = 0;
  v154 = (uint64_t *)v155;
  v157[0] = 0;
  v157[1] = 0;
  v156 = (uint64_t *)v157;
  uint64_t v4 = **this;
  if ((*this)[1] != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    v145 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 64);
    v148 = (_OWORD *)*MEMORY[0x263F8C2B8];
    uint64_t v142 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (2)
    {
      char v7 = (turi::flexible_type_impl *)(*a1 + v5);
      switch(*((unsigned char *)v7 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_12:
          v158[0] = v148;
          *(_OWORD **)((char *)v158 + *((void *)v148 - 3)) = v145;
          uint64_t v159 = v142;
          uint64_t v160 = MEMORY[0x263F8C318] + 16;
          if (v162 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v163);
          goto LABEL_19;
        case 2:
          uint64_t v8 = *(void *)v7;
          if (*(char *)(*(void *)v7 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
          }
          else
          {
            long long v9 = *(_OWORD *)(v8 + 8);
            v151.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v9;
          }
          goto LABEL_19;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v7 + 8));
          goto LABEL_19;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v7 + 8));
          goto LABEL_19;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v7 + 8));
          goto LABEL_19;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v7, &v151);
          goto LABEL_19;
        case 7:
          memset(&v151, 0, sizeof(v151));
          goto LABEL_19;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_19;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v7 + 8));
LABEL_19:
          v158[0] = &v151;
          uint64_t v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v152, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
          std::string::size_type v11 = v10;
          long long v12 = (uint64_t *)(v4 + v5);
          char v13 = (char *)v10 + 56;
          if ((_OWORD *)(v4 + v5) != (_OWORD *)((char *)v10 + 56))
          {
            switch(*((unsigned char *)v10 + 68))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v13;
                  if (!*(void *)v13) {
                    goto LABEL_52;
                  }
                  if (*((char *)v14 + 31) < 0) {
                    operator delete((void *)v14[1]);
                  }
                  atomic_ullong *volatile v15 = v14;
                  uint64_t v16 = 0x1012C404EF22A49;
                  goto LABEL_51;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v13;
                  if (!*(void *)v13) {
                    goto LABEL_52;
                  }
                  unint64_t v24 = (void *)v23[1];
                  if (v24)
                  {
                    v23[2] = (atomic_ullong)v24;
                    operator delete(v24);
                  }
                  atomic_ullong *volatile v15 = v23;
                  uint64_t v16 = 0x1080C409938AC02;
                  goto LABEL_51;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v13;
                  if (!*(void *)v13) {
                    goto LABEL_52;
                  }
                  v158[0] = v17 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
                  goto LABEL_46;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v13;
                  if (!*(void *)v13) {
                    goto LABEL_52;
                  }
                  v158[0] = v17 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_46:
                  atomic_ullong *volatile v15 = v17;
                  uint64_t v16 = 0x1020C405E66F15BLL;
                  goto LABEL_51;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v13;
                  if (!*(void *)v13) {
                    goto LABEL_52;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v25 + 2);
                  atomic_ullong *volatile v15 = v25;
                  unsigned int v22 = -235920773;
                  goto LABEL_50;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v13;
                  if (*(void *)v13)
                  {
                    uint64_t v19 = (void *)v18[6];
                    if (v19)
                    {
                      v18[7] = (atomic_ullong)v19;
                      operator delete(v19);
                    }
                    unsigned int v20 = (void *)v18[3];
                    if (v20)
                    {
                      uint64_t v18[4] = (atomic_ullong)v20;
                      operator delete(v20);
                    }
                    BOOL v21 = (std::__shared_weak_count *)v18[2];
                    if (v21) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                    }
                    atomic_ullong *volatile v15 = v18;
                    unsigned int v22 = 2071181815;
LABEL_50:
                    uint64_t v16 = v22 | 0x1030C4000000000;
LABEL_51:
                    MEMORY[0x22A614FA0](v15, v16);
                  }
LABEL_52:
                  *(void *)char v13 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v26 = *v12;
            *(void *)(v13 + 5) = *(uint64_t *)((char *)v12 + 5);
            *(void *)char v13 = v26;
            unsigned int v27 = *(unsigned __int8 *)(v4 + v5 + 12);
            *((unsigned char *)v11 + 68) = v27;
            if (v27 <= 9 && ((1 << v27) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v13, 1uLL);
            }
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          int v28 = (turi::flexible_type_impl *)(*a1 + v5);
          uint64_t v29 = *this[1];
          switch(*((unsigned char *)v28 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_67;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_67:
              v158[0] = v148;
              *(_OWORD **)((char *)v158 + *((void *)v148 - 3)) = v145;
              uint64_t v159 = v142;
              uint64_t v160 = MEMORY[0x263F8C318] + 16;
              if (v162 < 0) {
                operator delete(__p);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x22A614E30](v163);
              break;
            case 2:
              uint64_t v30 = *(void *)v28;
              if (*(char *)(*(void *)v28 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v30 + 8), *(void *)(v30 + 16));
              }
              else
              {
                long long v31 = *(_OWORD *)(v30 + 8);
                v151.__r_.__value_.__r.__words[2] = *(void *)(v30 + 24);
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v31;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v28 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v28 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v28 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v28, &v151);
              break;
            case 7:
              memset(&v151, 0, sizeof(v151));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v28 + 8));
              break;
            default:
              goto LABEL_341;
          }
          v158[0] = &v151;
          unint64_t v32 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v156, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
          unint64_t v33 = v32;
          unint64_t v34 = (uint64_t *)(v29 + v5);
          uint64_t v35 = (char *)v32 + 56;
          if ((_OWORD *)(v29 + v5) != (_OWORD *)((char *)v32 + 56))
          {
            switch(*((unsigned char *)v32 + 68))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v35;
                  if (!*(void *)v35) {
                    goto LABEL_107;
                  }
                  if (*((char *)v36 + 31) < 0) {
                    operator delete((void *)v36[1]);
                  }
                  atomic_ullong *volatile v37 = v36;
                  uint64_t v38 = 0x1012C404EF22A49;
                  goto LABEL_106;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v35;
                  if (!*(void *)v35) {
                    goto LABEL_107;
                  }
                  unint64_t v46 = (void *)v45[1];
                  if (v46)
                  {
                    v45[2] = (atomic_ullong)v46;
                    operator delete(v46);
                  }
                  atomic_ullong *volatile v37 = v45;
                  uint64_t v38 = 0x1080C409938AC02;
                  goto LABEL_106;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
                  if (!*(void *)v35) {
                    goto LABEL_107;
                  }
                  v158[0] = v39 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
                  goto LABEL_101;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
                  if (!*(void *)v35) {
                    goto LABEL_107;
                  }
                  v158[0] = v39 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_101:
                  atomic_ullong *volatile v37 = v39;
                  uint64_t v38 = 0x1020C405E66F15BLL;
                  goto LABEL_106;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v35;
                  if (!*(void *)v35) {
                    goto LABEL_107;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v47 + 2);
                  atomic_ullong *volatile v37 = v47;
                  unsigned int v44 = -235920773;
                  goto LABEL_105;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v35;
                  if (*(void *)v35)
                  {
                    uint64_t v41 = (void *)v40[6];
                    if (v41)
                    {
                      v40[7] = (atomic_ullong)v41;
                      operator delete(v41);
                    }
                    uint64_t v42 = (void *)v40[3];
                    if (v42)
                    {
                      v40[4] = (atomic_ullong)v42;
                      operator delete(v42);
                    }
                    uint64_t v43 = (std::__shared_weak_count *)v40[2];
                    if (v43) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
                    }
                    atomic_ullong *volatile v37 = v40;
                    unsigned int v44 = 2071181815;
LABEL_105:
                    uint64_t v38 = v44 | 0x1030C4000000000;
LABEL_106:
                    MEMORY[0x22A614FA0](v37, v38);
                  }
LABEL_107:
                  *(void *)uint64_t v35 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v48 = *v34;
            *(void *)(v35 + 5) = *(uint64_t *)((char *)v34 + 5);
            *(void *)uint64_t v35 = v48;
            LODWORD(v48) = *(unsigned __int8 *)(v29 + v5 + 12);
            *((unsigned char *)v33 + 68) = v48;
            BOOL v49 = v48 > 9;
            int v50 = (1 << v48) & 0x33C;
            if (!v49 && v50 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v35, 1uLL);
            }
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          ++v6;
          uint64_t v4 = **this;
          v5 += 16;
          if (v6 >= ((*this)[1] - v4) >> 4) {
            break;
          }
          continue;
        default:
LABEL_341:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      break;
    }
  }
  int v52 = this[2];
  uint64_t v53 = *v52;
  if (v52[1] != *v52)
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    v146 = (_OWORD *)*MEMORY[0x263F8C2B8];
    uint64_t v138 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    v139 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      char v56 = (turi::flexible_type_impl *)(a1[3] + v54);
      switch(*((unsigned char *)v56 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_127;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_127:
          v158[0] = v146;
          *(_OWORD **)((char *)v158 + *((void *)v146 - 3)) = v139;
          uint64_t v159 = v138;
          uint64_t v160 = MEMORY[0x263F8C318] + 16;
          if (v162 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v163);
          break;
        case 2:
          uint64_t v57 = *(void *)v56;
          if (*(char *)(*(void *)v56 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v57 + 8), *(void *)(v57 + 16));
          }
          else
          {
            long long v58 = *(_OWORD *)(v57 + 8);
            v151.__r_.__value_.__r.__words[2] = *(void *)(v57 + 24);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v58;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v56 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v56 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v56 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v56, &v151);
          break;
        case 7:
          memset(&v151, 0, sizeof(v151));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v56 + 8));
          break;
        default:
          goto LABEL_341;
      }
      v158[0] = &v151;
      uint64_t v59 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v154, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
      uint64_t v60 = v59;
      uint64_t v61 = (uint64_t *)(v53 + v54);
      long long v62 = (char *)v59 + 56;
      if ((_OWORD *)(v53 + v54) != (_OWORD *)((char *)v59 + 56))
      {
        switch(*((unsigned char *)v59 + 68))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v63 = *(atomic_ullong *volatile *)v62;
              if (!*(void *)v62) {
                goto LABEL_167;
              }
              if (*((char *)v63 + 31) < 0) {
                operator delete((void *)v63[1]);
              }
              atomic_ullong *volatile v64 = v63;
              uint64_t v65 = 0x1012C404EF22A49;
              goto LABEL_166;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v62;
              if (!*(void *)v62) {
                goto LABEL_167;
              }
              unint64_t v73 = (void *)v72[1];
              if (v73)
              {
                v72[2] = (atomic_ullong)v73;
                operator delete(v73);
              }
              atomic_ullong *volatile v64 = v72;
              uint64_t v65 = 0x1080C409938AC02;
              goto LABEL_166;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v62;
              if (!*(void *)v62) {
                goto LABEL_167;
              }
              v158[0] = v66 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
              goto LABEL_161;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v62;
              if (!*(void *)v62) {
                goto LABEL_167;
              }
              v158[0] = v66 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_161:
              atomic_ullong *volatile v64 = v66;
              uint64_t v65 = 0x1020C405E66F15BLL;
              goto LABEL_166;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v62;
              if (!*(void *)v62) {
                goto LABEL_167;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v74 + 2);
              atomic_ullong *volatile v64 = v74;
              unsigned int v71 = -235920773;
              goto LABEL_165;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v67 = *(atomic_ullong *volatile *)v62;
              if (*(void *)v62)
              {
                uint64_t v68 = (void *)v67[6];
                if (v68)
                {
                  v67[7] = (atomic_ullong)v68;
                  operator delete(v68);
                }
                uint64_t v69 = (void *)v67[3];
                if (v69)
                {
                  v67[4] = (atomic_ullong)v69;
                  operator delete(v69);
                }
                atomic_ullong *volatile v70 = (std::__shared_weak_count *)v67[2];
                if (v70) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v70);
                }
                atomic_ullong *volatile v64 = v67;
                unsigned int v71 = 2071181815;
LABEL_165:
                uint64_t v65 = v71 | 0x1030C4000000000;
LABEL_166:
                MEMORY[0x22A614FA0](v64, v65);
              }
LABEL_167:
              *(void *)long long v62 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v75 = *v61;
        *(void *)(v62 + 5) = *(uint64_t *)((char *)v61 + 5);
        *(void *)long long v62 = v75;
        unsigned int v76 = *(unsigned __int8 *)(v53 + v54 + 12);
        *((unsigned char *)v60 + 68) = v76;
        if (v76 <= 9 && ((1 << v76) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v62, 1uLL);
        }
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      ++v55;
      std::string v77 = this[2];
      uint64_t v53 = *v77;
      v54 += 16;
    }
    while (v55 < (v77[1] - *v77) >> 4);
  }
  uint64_t v78 = a1[9];
  if (!v78) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v78 + 48))(v78, &v152);
  int v79 = (uint64_t *)a1[10];
  v150 = (uint64_t *)a1[11];
  if (v79 != v150)
  {
    v143 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 64);
    v147 = (_OWORD *)*MEMORY[0x263F8C2B8];
    uint64_t v140 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      uint64_t v80 = *v79;
      unint64_t v81 = (turi::flexible_type_impl *)(*a1 + 16 * *v79);
      switch(*((unsigned char *)v81 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_186;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_186:
          v158[0] = v147;
          *(_OWORD **)((char *)v158 + *((void *)v147 - 3)) = v143;
          uint64_t v159 = v140;
          uint64_t v160 = MEMORY[0x263F8C318] + 16;
          if (v162 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v163);
          break;
        case 2:
          uint64_t v82 = *(void *)v81;
          if (*(char *)(*(void *)v81 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v82 + 8), *(void *)(v82 + 16));
          }
          else
          {
            long long v83 = *(_OWORD *)(v82 + 8);
            v151.__r_.__value_.__r.__words[2] = *(void *)(v82 + 24);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v83;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v81 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v81 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v81 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v81, &v151);
          break;
        case 7:
          memset(&v151, 0, sizeof(v151));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v81 + 8));
          break;
        default:
          goto LABEL_341;
      }
      v158[0] = &v151;
      unint64_t v84 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v152, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
      uint64_t v85 = **this + 16 * v80;
      if ((_OWORD *)((char *)v84 + 56) != (_OWORD *)v85)
      {
        switch(*(unsigned char *)(v85 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v86 = *(atomic_ullong *volatile *)v85;
              if (!*(void *)v85) {
                goto LABEL_226;
              }
              if (*((char *)v86 + 31) < 0) {
                operator delete((void *)v86[1]);
              }
              atomic_ullong *volatile v87 = v86;
              uint64_t v88 = 0x1012C404EF22A49;
              goto LABEL_225;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v95 = *(atomic_ullong *volatile *)v85;
              if (!*(void *)v85) {
                goto LABEL_226;
              }
              uint64_t v96 = (void *)v95[1];
              if (v96)
              {
                v95[2] = (atomic_ullong)v96;
                operator delete(v96);
              }
              atomic_ullong *volatile v87 = v95;
              uint64_t v88 = 0x1080C409938AC02;
              goto LABEL_225;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v89 = *(atomic_ullong *volatile *)v85;
              if (!*(void *)v85) {
                goto LABEL_226;
              }
              v158[0] = v89 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
              goto LABEL_220;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v89 = *(atomic_ullong *volatile *)v85;
              if (!*(void *)v85) {
                goto LABEL_226;
              }
              v158[0] = v89 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_220:
              atomic_ullong *volatile v87 = v89;
              uint64_t v88 = 0x1020C405E66F15BLL;
              goto LABEL_225;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v97 = *(atomic_ullong *volatile *)v85;
              if (!*(void *)v85) {
                goto LABEL_226;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v97 + 2);
              atomic_ullong *volatile v87 = v97;
              unsigned int v94 = -235920773;
              goto LABEL_224;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v90 = *(atomic_ullong *volatile *)v85;
              if (*(void *)v85)
              {
                v91 = (void *)v90[6];
                if (v91)
                {
                  v90[7] = (atomic_ullong)v91;
                  operator delete(v91);
                }
                uint64_t v92 = (void *)v90[3];
                if (v92)
                {
                  v90[4] = (atomic_ullong)v92;
                  operator delete(v92);
                }
                long long v93 = (std::__shared_weak_count *)v90[2];
                if (v93) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v93);
                }
                atomic_ullong *volatile v87 = v90;
                unsigned int v94 = 2071181815;
LABEL_224:
                uint64_t v88 = v94 | 0x1030C4000000000;
LABEL_225:
                MEMORY[0x22A614FA0](v87, v88);
              }
LABEL_226:
              *(void *)uint64_t v85 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v98 = *((void *)v84 + 7);
        *(void *)(v85 + 5) = *(void *)((char *)v84 + 61);
        *(void *)uint64_t v85 = v98;
        *(unsigned char *)(v85 + 12) = *((unsigned char *)v84 + 68);
        *((unsigned char *)v84 + 68) = 0;
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      uint64_t v99 = (turi::flexible_type_impl *)(*a1 + 16 * v80);
      switch(*((unsigned char *)v99 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_239;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_239:
          v158[0] = v147;
          *(_OWORD **)((char *)v158 + *((void *)v147 - 3)) = v143;
          uint64_t v159 = v140;
          uint64_t v160 = MEMORY[0x263F8C318] + 16;
          if (v162 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v163);
          break;
        case 2:
          uint64_t v100 = *(void *)v99;
          if (*(char *)(*(void *)v99 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v100 + 8), *(void *)(v100 + 16));
          }
          else
          {
            long long v101 = *(_OWORD *)(v100 + 8);
            v151.__r_.__value_.__r.__words[2] = *(void *)(v100 + 24);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v101;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v99 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v99 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v99 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v99, &v151);
          break;
        case 7:
          memset(&v151, 0, sizeof(v151));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v99 + 8));
          break;
        default:
          goto LABEL_341;
      }
      v158[0] = &v151;
      v102 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v156, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
      uint64_t v103 = *this[1] + 16 * v80;
      if ((_OWORD *)((char *)v102 + 56) != (_OWORD *)v103)
      {
        switch(*(unsigned char *)(v103 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v104 = *(atomic_ullong *volatile *)v103;
              if (!*(void *)v103) {
                goto LABEL_279;
              }
              if (*((char *)v104 + 31) < 0) {
                operator delete((void *)v104[1]);
              }
              atomic_ullong *volatile v105 = v104;
              uint64_t v106 = 0x1012C404EF22A49;
              goto LABEL_278;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v113 = *(atomic_ullong *volatile *)v103;
              if (!*(void *)v103) {
                goto LABEL_279;
              }
              uint64_t v114 = (void *)v113[1];
              if (v114)
              {
                v113[2] = (atomic_ullong)v114;
                operator delete(v114);
              }
              atomic_ullong *volatile v105 = v113;
              uint64_t v106 = 0x1080C409938AC02;
              goto LABEL_278;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v107 = *(atomic_ullong *volatile *)v103;
              if (!*(void *)v103) {
                goto LABEL_279;
              }
              v158[0] = v107 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
              goto LABEL_273;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v107 = *(atomic_ullong *volatile *)v103;
              if (!*(void *)v103) {
                goto LABEL_279;
              }
              v158[0] = v107 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_273:
              atomic_ullong *volatile v105 = v107;
              uint64_t v106 = 0x1020C405E66F15BLL;
              goto LABEL_278;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v115 = *(atomic_ullong *volatile *)v103;
              if (!*(void *)v103) {
                goto LABEL_279;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v115 + 2);
              atomic_ullong *volatile v105 = v115;
              unsigned int v112 = -235920773;
              goto LABEL_277;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v103, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v108 = *(atomic_ullong *volatile *)v103;
              if (*(void *)v103)
              {
                uint64_t v109 = (void *)v108[6];
                if (v109)
                {
                  v108[7] = (atomic_ullong)v109;
                  operator delete(v109);
                }
                unsigned int v110 = (void *)v108[3];
                if (v110)
                {
                  v108[4] = (atomic_ullong)v110;
                  operator delete(v110);
                }
                uint64_t v111 = (std::__shared_weak_count *)v108[2];
                if (v111) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v111);
                }
                atomic_ullong *volatile v105 = v108;
                unsigned int v112 = 2071181815;
LABEL_277:
                uint64_t v106 = v112 | 0x1030C4000000000;
LABEL_278:
                MEMORY[0x22A614FA0](v105, v106);
              }
LABEL_279:
              *(void *)uint64_t v103 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v116 = *((void *)v102 + 7);
        *(void *)(v103 + 5) = *(void *)((char *)v102 + 61);
        *(void *)uint64_t v103 = v116;
        *(unsigned char *)(v103 + 12) = *((unsigned char *)v102 + 68);
        *((unsigned char *)v102 + 68) = 0;
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      ++v79;
    }
    while (v79 != v150);
  }
  atomic_ullong *volatile v117 = (uint64_t *)a1[13];
  atomic_ullong *volatile v118 = (uint64_t *)a1[14];
  if (v117 != v118)
  {
    v149 = (_OWORD *)*MEMORY[0x263F8C2B8];
    uint64_t v141 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    v144 = *(_OWORD **)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      uint64_t v119 = *v117;
      atomic_ullong *volatile v120 = (turi::flexible_type_impl *)(a1[3] + 16 * *v117);
      switch(*((unsigned char *)v120 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_295;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_295:
          v158[0] = v149;
          *(_OWORD **)((char *)v158 + *((void *)v149 - 3)) = v144;
          uint64_t v159 = v141;
          uint64_t v160 = MEMORY[0x263F8C318] + 16;
          if (v162 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v163);
          break;
        case 2:
          uint64_t v121 = *(void *)v120;
          if (*(char *)(*(void *)v120 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v121 + 8), *(void *)(v121 + 16));
          }
          else
          {
            long long v122 = *(_OWORD *)(v121 + 8);
            v151.__r_.__value_.__r.__words[2] = *(void *)(v121 + 24);
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v122;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v120 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v120 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v120 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v120, &v151);
          break;
        case 7:
          memset(&v151, 0, sizeof(v151));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v120 + 8));
          break;
        default:
          goto LABEL_341;
      }
      v158[0] = &v151;
      v123 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v154, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v158);
      uint64_t v124 = *this[2] + 16 * v119;
      if ((_OWORD *)((char *)v123 + 56) != (_OWORD *)v124)
      {
        switch(*(unsigned char *)(v124 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v125 = *(atomic_ullong *volatile *)v124;
              if (!*(void *)v124) {
                goto LABEL_335;
              }
              if (*((char *)v125 + 31) < 0) {
                operator delete((void *)v125[1]);
              }
              atomic_ullong *volatile v126 = v125;
              uint64_t v127 = 0x1012C404EF22A49;
              goto LABEL_334;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v134 = *(atomic_ullong *volatile *)v124;
              if (!*(void *)v124) {
                goto LABEL_335;
              }
              v135 = (void *)v134[1];
              if (v135)
              {
                v134[2] = (atomic_ullong)v135;
                operator delete(v135);
              }
              atomic_ullong *volatile v126 = v134;
              uint64_t v127 = 0x1080C409938AC02;
              goto LABEL_334;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v128 = *(atomic_ullong *volatile *)v124;
              if (!*(void *)v124) {
                goto LABEL_335;
              }
              v158[0] = v128 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
              goto LABEL_329;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v128 = *(atomic_ullong *volatile *)v124;
              if (!*(void *)v124) {
                goto LABEL_335;
              }
              v158[0] = v128 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_329:
              atomic_ullong *volatile v126 = v128;
              uint64_t v127 = 0x1020C405E66F15BLL;
              goto LABEL_334;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v136 = *(atomic_ullong *volatile *)v124;
              if (!*(void *)v124) {
                goto LABEL_335;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v136 + 2);
              atomic_ullong *volatile v126 = v136;
              unsigned int v133 = -235920773;
              goto LABEL_333;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v124, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v129 = *(atomic_ullong *volatile *)v124;
              if (*(void *)v124)
              {
                v130 = (void *)v129[6];
                if (v130)
                {
                  v129[7] = (atomic_ullong)v130;
                  operator delete(v130);
                }
                v131 = (void *)v129[3];
                if (v131)
                {
                  v129[4] = (atomic_ullong)v131;
                  operator delete(v131);
                }
                uint64_t v132 = (std::__shared_weak_count *)v129[2];
                if (v132) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v132);
                }
                atomic_ullong *volatile v126 = v129;
                unsigned int v133 = 2071181815;
LABEL_333:
                uint64_t v127 = v133 | 0x1030C4000000000;
LABEL_334:
                MEMORY[0x22A614FA0](v126, v127);
              }
LABEL_335:
              *(void *)uint64_t v124 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v137 = *((void *)v123 + 7);
        *(void *)(v124 + 5) = *(void *)((char *)v123 + 61);
        *(void *)uint64_t v124 = v137;
        *(unsigned char *)(v124 + 12) = *((unsigned char *)v123 + 68);
        *((unsigned char *)v123 + 68) = 0;
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      ++v117;
    }
    while (v117 != v118);
  }
  turi::sgraph_compute::edge_scope::unlock_vertices((uint64_t)this);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v156, v157[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v154, v155[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v152, v153[0]);
}

void sub_2241F6CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t turi::sgraph_compute::edge_scope::lock_vertices(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 32);
    if (v3)
    {
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 24));
      if (v1 != v3)
      {
        uint64_t v4 = *(pthread_mutex_t **)(v2 + 32);
        return pthread_mutex_lock(v4);
      }
    }
  }
  return this;
}

uint64_t turi::sgraph_compute::edge_scope::unlock_vertices(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 32);
    if (v3)
    {
      this = pthread_mutex_unlock(*(pthread_mutex_t **)(this + 24));
      if (v1 != v3)
      {
        uint64_t v4 = *(pthread_mutex_t **)(v2 + 32);
        return pthread_mutex_unlock(v4);
      }
    }
  }
  return this;
}

void turi::edge_triple::~edge_triple(turi::edge_triple *this)
{
}

void *std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::~__func(void *a1)
{
  *a1 = &unk_26D7714A8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::~__func(void *a1)
{
  *a1 = &unk_26D7714A8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D7714A8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2241F71EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7714A8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::operator()(uint64_t a1, void *a2)
{
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::target_type()
{
}

void turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0::operator()(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(&v3, 3uLL);
  turi::_map_to_flex_dict(a2, (uint64_t)&v4);
}

void sub_2241F86D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void *a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a17 = (void **)(v24 - 144);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = a18;
      if (!a18) {
        goto LABEL_27;
      }
      if (*((char *)a18 + 31) < 0) {
        operator delete((void *)a18[1]);
      }
      unsigned int v27 = v26;
      uint64_t v28 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = a18;
      if (!a18) {
        goto LABEL_27;
      }
      long long v31 = (void *)a18[1];
      if (v31)
      {
        a18[2] = v31;
        operator delete(v31);
      }
      unsigned int v27 = v30;
      uint64_t v28 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v29 = a18;
      if (!a18) {
        goto LABEL_27;
      }
      a17 = (void **)(a18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v29 = a18;
      if (!a18) {
        goto LABEL_27;
      }
      a17 = (void **)(a18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_21:
      unsigned int v27 = v29;
      uint64_t v28 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v32 = a18;
        if (a18)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)a18 + 2);
          MEMORY[0x22A614FA0](v32, 0x1030C40F1F0227BLL);
        }
        a18 = 0;
      }
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_27;
      }
      unsigned int v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a18);
      uint64_t v28 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_27;
  }
  MEMORY[0x22A614FA0](v27, v28);
LABEL_27:
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a24);
  a24 = (void **)&a13;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

void *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 80 * a2;
    uint64_t v6 = 80 * a2;
    uint64_t v7 = v4 + 16;
    do
    {
      *(void *)(v7 - 8) = 0;
      *(_DWORD *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 4) = 0;
      *(_DWORD *)(v7 - 16) = 0;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2241F8F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *turi::variant_converter<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v6 = &v5;
  has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v6, a1 + 1);
  if (!has_fallback_type)
  {
    uint64_t v6 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(a2, *has_fallback_type, has_fallback_type[1], 0xCCCCCCCCCCCCCCCDLL * ((has_fallback_type[1] - *has_fallback_type) >> 4));
}

void sub_2241F902C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void sub_2241F9050(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = 0;
  if (a2 >= 7)
  {
    switch(a2)
    {
      case 7u:
        uint64_t result = *a4;
        break;
      case 8u:
        return result;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
}

void sub_2241F9198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void sub_2241F9228(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_14_2(uint64_t a1@<X8>, uint64_t a2)
{
  long long v3 = *(const std::string::value_type **)a1;
  std::string::size_type v4 = *(void *)(a1 + 8);
  std::string::__init_copy_ctor_external((std::string *)&a2, v3, v4);
}

turi::sgraph *turi::sgraph::sgraph(turi::sgraph *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 1;
  *((unsigned char *)this + 56) = 0;
  if (!a2) {
    turi::sgraph::sgraph(unsigned long)::$_0::operator()();
  }
  turi::sgraph::init(this, a2);
  return this;
}

void sub_2241F92F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(v11, *(char **)(v10 + 96));
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sgraph::sgraph(unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_partitions", 14);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 50, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sgraph::sgraph(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241F94B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

_OWORD *turi::sgraph::init(turi::sgraph *this, uint64_t a2)
{
  *(void *)&long long v35 = *MEMORY[0x263EF8340];
  turi::sgraph::clear(this);
  if ((a2 & (a2 - 1)) != 0) {
    turi::sgraph::init(unsigned long)::$_0::operator()();
  }
  *((void *)this + 3) = a2;
  *((void *)this + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)turi::sgraph::DEFAULT_GROUP_NAME);
  unint64_t v4 = *((void *)this + 2);
  unint64_t v5 = *((void *)this + 1);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)this) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)this) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 16);
    if (v10) {
      uint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)this + 16, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    long long v12 = v11 + v7;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    long long v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v32;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    std::string::size_type v32 = 0;
    __p[0] = 0;
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this, &__v);
    uint64_t v14 = *((void *)this + 1);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v15 = SHIBYTE(v32);
    *((void *)this + 1) = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v32;
    *(_OWORD *)unint64_t v5 = v6;
    *((void *)this + 1) = v5 + 24;
  }
  std::vector<turi::sframe>::vector(&__v, *((void *)this + 3));
  std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100]((uint64_t *)this + 8, (uint64_t)&__v);
  __p[0] = &__v;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v16 = **((void **)this + 8);
  if (v16 != *(void *)(*((void *)this + 8) + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, turi::sgraph::VID_COLUMN_NAME[0]);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    __p[0] = &v28;
    LOBYTE(__p[1]) = 0;
    uint64_t v28 = (std::string *)operator new(0x18uLL);
    uint64_t v29 = v28;
    uint64_t v30 = v28 + 1;
    uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (long long *)&__v, (long long *)&__v.__end_cap_, v28);
    char v17 = *((unsigned char *)this + 56);
    atomic_ullong *volatile v18 = operator new(1uLL);
    v27[0] = v18;
    *atomic_ullong *volatile v18 = v17;
    v27[1] = v18 + 1;
    v27[2] = v18 + 1;
    turi::sgraph::init_empty_sframe(v16, &v28, v27);
  }
  std::vector<turi::sframe>::vector(__p, *((void *)this + 3) * *((void *)this + 3));
  memset(&__v, 0, sizeof(__v));
  std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(&__v.__end_, (uint64_t)__p[0], (uint64_t)__p[1], 0x14C1BACF914C1BADLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>((uint64_t **)this + 11, (unint64_t *)&__v, (uint64_t)&__v);
  p_end = (void **)&__v.__end_;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_end);
  p_end = __p;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_end);
  __v.__first_ = 0;
  __v.__begin_ = 0;
  __p[0] = &__v;
  uint64_t result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)this + 11, (unint64_t *)&__v, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  uint64_t v20 = *((void *)result + 6);
  if (v20 != *((void *)result + 7))
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, turi::sgraph::SRC_COLUMN_NAME[0]);
    std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, turi::sgraph::DST_COLUMN_NAME);
    uint64_t v24 = 0;
    atomic_ullong *volatile v25 = 0;
    uint64_t v26 = 0;
    __p[0] = &v24;
    LOBYTE(__p[1]) = 0;
    uint64_t v24 = (std::string *)operator new(0x30uLL);
    atomic_ullong *volatile v25 = v24;
    uint64_t v26 = v24 + 2;
    atomic_ullong *volatile v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, (long long *)&__v, &v35, v24);
    __int16 v21 = *((unsigned __int8 *)this + 56);
    unsigned int v22 = operator new(2uLL);
    v23[0] = v22;
    *unsigned int v22 = v21 | (v21 << 8);
    v23[1] = v22 + 1;
    v23[2] = v22 + 1;
    turi::sgraph::init_empty_sframe(v20, &v24, v23);
  }
  return result;
}

void sub_2241F9A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__pa,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a29 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::clear(turi::sgraph *this)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
  uint64_t v2 = (void **)*((void *)this + 8);
  long long v3 = (void **)*((void *)this + 9);
  while (v3 != v2)
  {
    v3 -= 3;
    unint64_t v7 = v3;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  unint64_t v5 = (char *)*((void *)this + 12);
  unint64_t v4 = (void *)((char *)this + 96);
  *(v4 - 3) = v2;
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  void *v4 = 0;
  v4[1] = 0;
  *(_OWORD *)(v4 - 9) = 0u;
  *(_OWORD *)(v4 - 7) = 0u;
  *((unsigned char *)v4 - 40) = 7;
  return 1;
}

void turi::sgraph::init(unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_power_of_2(num_partitions)", 29);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 56, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::init(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241F9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<turi::sframe>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer(v16);
  }
  else
  {
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)char v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2241F9EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::init_empty_sframe(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)v6, a2, a3, &__p, 1, 1);
}

void sub_2241F9FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::bootstrap_vertex_id_type(uint64_t result, char a2)
{
  *(void *)&long long v26 = *MEMORY[0x263EF8340];
  if ((a2 & 0xFD) != 0) {
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_0::operator()();
  }
  uint64_t v2 = result;
  v24[0] = *(void **)(result + 48);
  if (v24[0])
  {
    unsigned int v22 = (std::string **)v24;
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator()();
  }
  v24[0] = *(void **)(result + 40);
  if (v24[0])
  {
    unsigned int v22 = (std::string **)v24;
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator()();
  }
  *(unsigned char *)(result + 56) = a2;
  long long v3 = *(uint64_t **)(result + 64);
  for (uint64_t i = *(uint64_t **)(result + 72); v3 != i; v3 += 3)
  {
    uint64_t v5 = *v3;
    if (*v3 != v3[1])
    {
      std::string::basic_string[abi:ne180100]<0>(v24, turi::sgraph::VID_COLUMN_NAME[0]);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      __int16 v21 = 0;
      unsigned int v22 = &v19;
      char v23 = 0;
      uint64_t v19 = (std::string *)operator new(0x18uLL);
      uint64_t v20 = v19;
      __int16 v21 = v19 + 1;
      uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (long long *)v24, &v25, v19);
      char v6 = *(unsigned char *)(v2 + 56);
      uint64_t v7 = operator new(1uLL);
      __p[0] = v7;
      *uint64_t v7 = v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      turi::sgraph::init_empty_sframe(v5, &v19, __p);
    }
  }
  unint64_t v8 = *(void **)(result + 88);
  if (v8 != (void *)(result + 96))
  {
    do
    {
      uint64_t v9 = v8[6];
      if (v9 != v8[7])
      {
        std::string::basic_string[abi:ne180100]<0>(v24, turi::sgraph::SRC_COLUMN_NAME[0]);
        std::string::basic_string[abi:ne180100]<0>(&v25, turi::sgraph::DST_COLUMN_NAME);
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        char v17 = 0;
        unsigned int v22 = &v15;
        char v23 = 0;
        uint64_t v15 = (std::string *)operator new(0x30uLL);
        uint64_t v16 = v15;
        char v17 = v15 + 2;
        uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)v24, &v26, v15);
        unint64_t v10 = operator new(2uLL);
        v14[0] = v10;
        _WORD *v10 = 0;
        v14[1] = v10 + 1;
        v14[2] = v10 + 1;
        turi::sgraph::init_empty_sframe(v9, &v15, v14);
      }
      unint64_t v11 = (void *)v8[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v8[2];
          BOOL v13 = *v12 == (void)v8;
          unint64_t v8 = v12;
        }
        while (!v13);
      }
      unint64_t v8 = v12;
    }
    while (v12 != (void *)(result + 96));
  }
  return result;
}

void sub_2241FA2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v37 = 0;
  while (1)
  {
    if (*(&a36 + v37) < 0) {
      operator delete(*(void **)((char *)&a31 + v37));
    }
    v37 -= 24;
    if (v37 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_edges()", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FA560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_vertices()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FA7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::increase_number_of_groups(turi::sgraph *this, std::string **a2)
{
  *(void *)&long long v35 = *MEMORY[0x263EF8340];
  char v23 = a2;
  long long v31 = (std::string ***)*((void *)this + 4);
  char v15 = v31;
  if (v31 >= (std::string ***)a2)
  {
    *(void *)&long long v32 = &v23;
    *((void *)&v32 + 1) = &v31;
    turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator()();
  }
  uint64_t v2 = this;
  uint64_t v14 = (uint64_t *)((char *)this + 64);
  long long v3 = (uint64_t **)((char *)this + 88);
  do
  {
    std::vector<turi::sframe>::vector(&v32, *((void *)v2 + 3));
    std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100](v14, (uint64_t)&v32);
    char v23 = (std::string **)&v32;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    unint64_t v4 = (uint64_t *)(*v14 + 24 * (void)v15);
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, turi::sgraph::VID_COLUMN_NAME[0]);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v23 = &v28;
      LOBYTE(v24) = 0;
      uint64_t v28 = (std::string *)operator new(0x18uLL);
      uint64_t v29 = v28;
      uint64_t v30 = v28 + 1;
      uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, &v32, &v34, v28);
      char v6 = *((unsigned char *)v2 + 56);
      long long v26 = 0;
      unsigned int v27 = 0;
      std::string __p = 0;
      uint64_t v7 = operator new(1uLL);
      std::string __p = v7;
      *uint64_t v7 = v6;
      long long v26 = v7 + 1;
      unsigned int v27 = v7 + 1;
      turi::sgraph::init_empty_sframe(v5, &v28, &__p);
    }
    atomic_ullong *volatile v18 = 0;
    do
    {
      unint64_t v8 = 0;
      do
      {
        unint64_t v9 = *((void *)v2 + 4);
        if ((unint64_t)v18 >= v9 || (unint64_t)v8 >= v9)
        {
          std::vector<turi::sframe>::vector(&v23, *((void *)this + 3) * *((void *)this + 3));
          *(void *)&long long v32 = v18;
          *((void *)&v32 + 1) = v8;
          long long v34 = 0uLL;
          uint64_t v33 = 0;
          std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(&v33, (uint64_t)v23, v24, 0x14C1BACF914C1BADLL * ((v24 - (uint64_t)v23) >> 3));
          std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>(v3, (unint64_t *)&v32, (uint64_t)&v32);
          long long v31 = (std::string ***)&v33;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
          long long v31 = &v23;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
          *(void *)&long long v32 = v18;
          *((void *)&v32 + 1) = v8;
          char v23 = (std::string **)&v32;
          unint64_t v11 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v3, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23);
          uint64_t v12 = *((void *)v11 + 6);
          if (v12 != *((void *)v11 + 7))
          {
            std::string::basic_string[abi:ne180100]<0>(&v32, turi::sgraph::SRC_COLUMN_NAME[0]);
            std::string::basic_string[abi:ne180100]<0>(&v34, turi::sgraph::DST_COLUMN_NAME);
            uint64_t v20 = 0;
            __int16 v21 = 0;
            unsigned int v22 = 0;
            char v23 = &v20;
            LOBYTE(v24) = 0;
            uint64_t v20 = (std::string *)operator new(0x30uLL);
            __int16 v21 = v20;
            unsigned int v22 = v20 + 2;
            __int16 v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v32, &v35, v20);
            BOOL v13 = operator new(2uLL);
            v19[0] = v13;
            *BOOL v13 = 0;
            v19[1] = v13 + 1;
            v19[2] = v13 + 1;
            turi::sgraph::init_empty_sframe(v12, &v20, v19);
          }
        }
        unint64_t v8 = (std::string **)((char *)v8 + 1);
        uint64_t v2 = this;
      }
      while (v8 != a2);
      atomic_ullong *volatile v18 = (std::string **)((char *)v18 + 1);
    }
    while (v18 != a2);
    char v15 = (std::string ***)((char *)v15 + 1);
  }
  while (v15 != (std::string ***)a2);
  *((void *)this + 4) = a2;
}

void sub_2241FACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  a23 = v30 - 144;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_groups", 10);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FAF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::sgraph::get_vertex_fields@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((void *)this + 4) <= a2) {
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = *(void *)(*((void *)this + 8) + 24 * a2);
  if (0x14C1BACF914C1BADLL * ((*(void *)(*((void *)this + 8) + 24 * a2 + 8) - v3) >> 3) != *((void *)this + 3)) {
    turi::sgraph::get_vertex_fields(unsigned long)const::$_0::operator()();
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unint64_t v4 = *(long long **)(v3 + 40);
  uint64_t v5 = *(long long **)(v3 + 48);
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, v4, v5, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3));
}

void turi::sgraph::get_vertex_fields(unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vgroup.size()", 13);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::sgraph::get_vertex_fields(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FB2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::sgraph::get_vertex_field_types@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((void *)this + 4) <= a2) {
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)this + 8) + 24 * a2;
  uint64_t v5 = *(size_t **)v4;
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3) != *((void *)this + 3)) {
    turi::sgraph::get_vertex_field_types(unsigned long)const::$_0::operator()();
  }
  uint64_t result = std::vector<turi::flex_type_enum>::vector(a3, v5[3]);
  if (v5[3])
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)turi::sframe::column_type((turi::sframe *)v5, v7);
      *(unsigned char *)(*a3 + v7++) = (_BYTE)result;
    }
    while (v7 < v5[3]);
  }
  return result;
}

void sub_2241FB4C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::get_vertex_field_types(unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vgroup.size()", 13);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::sgraph::get_vertex_field_types(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FB66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::sgraph::get_edge_fields@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v5 = *((void *)this + 4);
  unint64_t v13 = v5;
  unint64_t v14 = a2;
  if (v5 <= a2)
  {
    unint64_t v11 = &v14;
    uint64_t v12 = &v13;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v13 = v5;
  unint64_t v14 = (unint64_t)a3;
  if (v5 <= (unint64_t)a3)
  {
    unint64_t v11 = &v14;
    uint64_t v12 = &v13;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  unint64_t v11 = (void *)a2;
  uint64_t v12 = a3;
  unint64_t v7 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v11);
  uint64_t v8 = *v7;
  uint64_t v9 = 0x14C1BACF914C1BADLL * ((v7[1] - *v7) >> 3);
  unint64_t v13 = *((void *)this + 3) * *((void *)this + 3);
  unint64_t v14 = v9;
  if (v9 != v13)
  {
    unint64_t v11 = &v14;
    uint64_t v12 = &v13;
    turi::sgraph::get_edge_fields(unsigned long,unsigned long)const::$_0::operator()();
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a4, *(long long **)(v8 + 40), *(long long **)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3));
}

void turi::sgraph::get_edge_fields(unsigned long,unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"egroup.size()", 13);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions*m_num_partitions", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 139, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::sgraph::get_edge_fields(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FB9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::get_edge_field_types(turi::sgraph *this@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = *((void *)this + 4);
  unint64_t v28 = v5;
  uint64_t v29 = a2;
  if (v5 <= (unint64_t)a2)
  {
    char v23 = &v29;
    uint64_t v24 = &v28;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v28 = v5;
  uint64_t v29 = a3;
  if (v5 <= (unint64_t)a3)
  {
    char v23 = &v29;
    uint64_t v24 = &v28;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  char v23 = a2;
  uint64_t v24 = a3;
  uint64_t v7 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v23);
  uint64_t v8 = *(size_t **)v7;
  uint64_t v9 = 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  unint64_t v28 = *((void *)this + 3) * *((void *)this + 3);
  uint64_t v29 = (void **)v9;
  if (v9 != v28)
  {
    char v23 = &v29;
    uint64_t v24 = &v28;
    turi::sgraph::get_edge_field_types(unsigned long,unsigned long)const::$_0::operator()();
  }
  unint64_t v10 = (uint64_t *)v7;
  std::vector<turi::flex_type_enum>::vector(a4, v8[3]);
  if (v8[3])
  {
    unint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*a4 + v11) = turi::sframe::column_type((turi::sframe *)v8, v11);
      ++v11;
    }
    while (v11 < v8[3]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME[0]);
  unint64_t vertex_field_id = turi::sgraph::get_vertex_field_id((uint64_t)this, (unsigned __int8 **)__p, 0);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  turi::sgraph::get_vertex_field_types(this, 0, &v23);
  char v13 = *((unsigned char *)v23 + vertex_field_id);
  uint64_t v24 = v23;
  operator delete(v23);
  uint64_t v14 = *v10;
  std::string::basic_string[abi:ne180100]<0>(&v23, turi::sgraph::SRC_COLUMN_NAME[0]);
  uint64_t v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(v14 + 40), *(void *)(v14 + 48), (unsigned __int8 **)&v23);
  if (v15 == *(void *)(v14 + 48))
  {
    uint64_t v29 = &v23;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v14 + 40);
  if (v25 < 0) {
    operator delete(v23);
  }
  uint64_t v18 = *v10;
  std::string::basic_string[abi:ne180100]<0>(&v23, turi::sgraph::DST_COLUMN_NAME);
  uint64_t v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(v18 + 40), *(void *)(v18 + 48), (unsigned __int8 **)&v23);
  if (v19 == *(void *)(v18 + 48))
  {
    uint64_t v29 = &v23;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v18 + 40);
  if (v25 < 0) {
    operator delete(v23);
  }
  uint64_t v22 = *a4;
  *(unsigned char *)(v22 - 0x5555555555555555 * ((v20 - v21) >> 3)) = v13;
  *(unsigned char *)(v22 - 0x5555555555555555 * ((v16 - v17) >> 3)) = v13;
}

void sub_2241FBD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::get_edge_field_types(unsigned long,unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"egroup.size()", 13);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions*m_num_partitions", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 146, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sgraph::get_edge_field_types(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FBF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::sgraph::get_vertex_field_id(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  if (*(void *)(a1 + 32) <= a3) {
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 24 * a3);
  uint64_t v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(v3 + 40), *(void *)(v3 + 48), a2);
  if (v4 == *(void *)(v3 + 48)) {
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)(v3 + 40)) >> 3);
}

void turi::sgraph::get_vertices(turi::sgraph *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, turi::sframe *a5@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  turi::sframe::sframe(a5);
  atomic_ullong *volatile v64 = (void *)a4;
  v59.__r_.__value_.__r.__words[0] = *((void *)a1 + 4);
  if (v59.__r_.__value_.__r.__words[0] <= a4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v59;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = (uint64_t *)(*((void *)a1 + 8) + 24 * a4);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12) {
    goto LABEL_44;
  }
  uint64_t v13 = 0;
  do
  {
    if (*(unsigned char *)(v11 + 288)) {
      uint64_t v14 = *(void *)(v11 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    v13 += v14;
    v11 += 296;
  }
  while (v11 != v12);
  if (!v13)
  {
LABEL_44:
    turi::sgraph::get_vertex_fields(a1, 0, &__p);
    turi::sgraph::get_vertex_field_types(a1, 0, &v64);
    std::string::basic_string[abi:ne180100]<0>(&v59, "");
    turi::sframe::open_for_write((uint64_t)a5, &__p, &v64, &v59, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  }
  turi::sgraph::get_vertex_fields(a1, a4, &v63);
  v59.__r_.__value_.__r.__words[0] = a4;
  v67[0] = *((void *)a1 + 4);
  if (v67[0] <= a4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  char v56 = a2;
  uint64_t v57 = a5;
  uint64_t v53 = *((void *)a1 + 8);
  unint64_t v54 = a4;
  char v15 = (size_t **)(v53 + 24 * a4);
  int64x2_t v61 = 0uLL;
  long long v62 = 0;
  unint64_t v55 = a3;
  uint64_t v18 = (void *)*a3;
  uint64_t v17 = a3 + 1;
  uint64_t v16 = v18;
  if (v18 != v17)
  {
    do
    {
      uint64_t v19 = *v15;
      uint64_t v20 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((*v15)[5], (*v15)[6], (unsigned __int8 **)v16 + 4);
      if (v20 == v19[6])
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 4);
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      atomic_ullong *volatile v64 = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v19[5]) >> 3));
      memset(v65, 0, 13);
      if (v65 != v16 + 7)
      {
        *(atomic_ullong **)((char *)v65 + 5) = *(atomic_ullong **)((char *)v16 + 61);
        v65[0] = *((atomic_ullong **)v16 + 7);
        BYTE4(v65[1]) = *((unsigned char *)v16 + 68);
        if (BYTE4(v65[1]) <= 9u && ((1 << SBYTE4(v65[1])) & 0x33C) != 0) {
          atomic_fetch_add(v65[0], 1uLL);
        }
      }
      uint64_t v21 = v61.i64[1];
      if (v61.i64[1] >= (unint64_t)v62)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 3) + 1;
        if (v24 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        atomic_ullong *volatile v70 = &v62;
        long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v62, v25);
        std::string::size_type v27 = (std::string::size_type)&v26[8 * ((v61.i64[1] - v61.i64[0]) >> 3)];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        __p.__r_.__value_.__l.__size_ = v27;
        p_p = (std::string *)&v26[24 * v28];
        *(void *)std::string::size_type v27 = v64;
        *(void *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 16) = 0;
        *(unsigned char *)(v27 + 20) = 0;
        uint64_t v29 = v65[0];
        *(atomic_ullong **)(v27 + 13) = *(atomic_ullong **)((char *)v65 + 5);
        *(void *)(v27 + 8) = v29;
        *(unsigned char *)(v27 + 20) = BYTE4(v65[1]);
        BYTE4(v65[1]) = 0;
        std::string::size_type v23 = v27 + 24;
        __p.__r_.__value_.__r.__words[2] = v27 + 24;
        int64x2_t v30 = v61;
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        if (v61.i64[1] == v61.i64[0])
        {
          int64x2_t v35 = vdupq_n_s64(v61.u64[1]);
        }
        else
        {
          uint64_t v32 = 0;
          do
          {
            std::string::size_type v33 = size + v32;
            *(void *)(v33 - 24) = *(void *)(v30.i64[1] + v32 - 24);
            *(void *)(v33 - 16) = 0;
            *(_DWORD *)(v33 - 8) = 0;
            *(unsigned char *)(v33 - 4) = 0;
            uint64_t v34 = *(void *)(v30.i64[1] + v32 - 16);
            *(void *)(v33 - 11) = *(void *)(v30.i64[1] + v32 - 11);
            *(void *)(v33 - 16) = v34;
            *(unsigned char *)(v33 - 4) = *(unsigned char *)(v30.i64[1] + v32 - 4);
            *(unsigned char *)(v30.i64[1] + v32 - 4) = 0;
            v32 -= 24;
          }
          while (v30.i64[1] + v32 != v30.i64[0]);
          int64x2_t v35 = v61;
          std::string::size_type v23 = __p.__r_.__value_.__r.__words[2];
          size += v32;
        }
        v61.i64[0] = size;
        v61.i64[1] = v23;
        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v35;
        atomic_ullong *volatile v36 = v62;
        long long v62 = p_p;
        p_p = v36;
        __p.__r_.__value_.__r.__words[0] = v35.i64[0];
        std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *(void *)v61.i64[1] = v64;
        *(void *)(v21 + 8) = 0;
        *(_DWORD *)(v21 + 16) = 0;
        *(unsigned char *)(v21 + 20) = 0;
        uint64_t v22 = v65[0];
        *(atomic_ullong **)(v21 + 13) = *(atomic_ullong **)((char *)v65 + 5);
        *(void *)(v21 + 8) = v22;
        *(unsigned char *)(v21 + 20) = BYTE4(v65[1]);
        BYTE4(v65[1]) = 0;
        std::string::size_type v23 = v21 + 24;
      }
      v61.i64[1] = v23;
      std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v64);
      uint64_t v37 = (void *)v16[1];
      if (v37)
      {
        do
        {
          uint64_t v38 = v37;
          uint64_t v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          uint64_t v38 = (void *)v16[2];
          BOOL v39 = *v38 == (void)v16;
          uint64_t v16 = v38;
        }
        while (!v39);
      }
      uint64_t v16 = v38;
    }
    while (v38 != v17);
  }
  unint64_t v60 = 0;
  atomic_ullong *volatile v40 = *v15;
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME[0]);
  uint64_t v41 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v40[5], v40[6], (unsigned __int8 **)&__p);
  if (v41 == v40[6])
  {
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v40[5]) >> 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v60 = v42;
  std::unordered_set<turi::flexible_type>::unordered_set<std::__wrap_iter<turi::flexible_type const*>>((uint64_t)&v59, *v56, v56[1]);
  uint64_t v43 = *v56;
  unsigned int v44 = v56[1];
  uint64_t v45 = v55[2];
  if (*v56 != v44 || v45)
  {
    v67[3] = 0;
    v66[0] = &unk_26D771558;
    v66[1] = &v61;
    v66[3] = v66;
    if (v43 == v44)
    {
      std::function<BOOL ()(std::vector<turi::flexible_type> const&)>::operator=(v67, (uint64_t)v66);
    }
    else
    {
      if (v45)
      {
        uint64_t v48 = (std::string *)operator new(0x20uLL);
        v48->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D771668;
        v48->__r_.__value_.__l.__size_ = (std::string::size_type)&v59;
        v48->__r_.__value_.__r.__words[2] = (std::string::size_type)&v60;
        v48[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        p_p = v48;
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7715E8;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v59;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v60;
        p_p = &__p;
      }
      std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](&__p, v67);
      std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&__p);
    }
    BOOL v49 = *v15;
    if (*v15 != *(size_t **)(v53 + 24 * v54 + 8))
    {
      turi::sframe::sframe((turi::sframe *)&__p);
      std::vector<turi::flex_type_enum>::vector(&v64, v49[3]);
      if (v49[3])
      {
        unint64_t v50 = 0;
        do
        {
          char v51 = turi::sframe::column_type((turi::sframe *)v49, v50);
          *((unsigned char *)v64 + v50++) = v51;
        }
        while (v50 < v49[3]);
      }
      std::string::basic_string[abi:ne180100]<0>(&v58, "");
      uint64_t v52 = (*(uint64_t (**)(size_t *))(*v49 + 24))(v49);
      turi::sframe::open_for_write((uint64_t)&__p, v49 + 5, &v64, &v58, v52, 1);
    }
    std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v66);
    std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v67);
  }
  else
  {
    unint64_t v46 = (const turi::sframe *)*v15;
    atomic_ullong *volatile v47 = *(const turi::sframe **)(v53 + 24 * v54 + 8);
    if (*v15 != (size_t *)v47)
    {
      do
      {
        turi::sframe::append(v57, v46, (turi::sframe *)&__p);
        turi::sframe::operator=((uint64_t)v57, (uint64_t)&__p);
        turi::sframe::~sframe((turi::sframe *)&__p);
        unint64_t v46 = (const turi::sframe *)((char *)v46 + 296);
      }
      while (v46 != v47);
    }
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v59);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2241FC8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, turi::sframe *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33)
{
  a33 = &a27;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  turi::sframe::~sframe(a14);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(std::vector<turi::flexible_type> const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_if", 141, 1);
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        uint64_t v12 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*((unsigned char *)a1 + 288)) {
    BOOL v13 = *((unsigned char *)a1 + 289) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()();
  }
  if (a2[288])
  {
    if (a2[289])
    {
      (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
      turi::sframe::get_reader(a1);
    }
  }
  turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()();
}

void sub_2241FCDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void turi::sgraph::get_edges(unint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, unint64_t *a6@<X5>, turi::sframe *a7@<X8>)
{
  uint64_t v11 = a7;
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v92 = a6;
  std::string::size_type v93 = a5;
  turi::sframe::sframe(a7);
  v104[0] = a5;
  std::string::size_type v12 = a1[4];
  v107.__r_.__value_.__r.__words[0] = v12;
  if (v12 <= a5)
  {
    *(void *)std::string __p = v104;
    *(void *)&__p[8] = &v107;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v104[0] = (uint64_t)a6;
  v107.__r_.__value_.__r.__words[0] = v12;
  if (v12 <= (unint64_t)a6)
  {
    *(void *)std::string __p = v104;
    *(void *)&__p[8] = &v107;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  *(void *)std::string __p = a5;
  *(void *)&__p[8] = a6;
  BOOL v13 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)(a1 + 11), (unint64_t *)__p);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 == v15) {
    goto LABEL_54;
  }
  uint64_t v16 = 0;
  do
  {
    if (*(unsigned char *)(v14 + 288)) {
      uint64_t v17 = *(void *)(v14 + 32);
    }
    else {
      uint64_t v17 = 0;
    }
    v16 += v17;
    v14 += 296;
  }
  while (v14 != v15);
  if (!v16)
  {
LABEL_54:
    turi::sgraph::get_edge_fields((turi::sgraph *)a1, 0, 0, (std::string *)__p);
    turi::sgraph::get_edge_field_types((turi::sgraph *)a1, 0, 0, v104);
    std::string::basic_string[abi:ne180100]<0>(&v107, "");
    turi::sframe::open_for_write((uint64_t)v11, __p, v104, &v107, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  }
  turi::sgraph::get_edge_fields((turi::sgraph *)a1, v93, v92, &v91);
  v107.__r_.__value_.__r.__words[0] = v93;
  unint64_t v18 = a1[4];
  v106[0] = v18;
  if (v18 <= v93)
  {
    *(void *)std::string __p = &v107;
    *(void *)&__p[8] = v106;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
  v106[0] = v18;
  if (v18 <= (unint64_t)v92)
  {
    *(void *)std::string __p = &v107;
    *(void *)&__p[8] = v106;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  *(void *)std::string __p = v93;
  *(void *)&__p[8] = v92;
  uint64_t v19 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)(a1 + 11), (unint64_t *)__p);
  uint64_t v80 = v11;
  int64x2_t v89 = 0uLL;
  v90[0] = 0;
  uint64_t v22 = (void *)*a4;
  uint64_t v21 = a4 + 1;
  uint64_t v20 = v22;
  if (v22 != v21)
  {
    do
    {
      uint64_t v23 = *(void *)v19;
      uint64_t v24 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(*(void *)v19 + 40), *(void *)(*(void *)v19 + 48), (unsigned __int8 **)v20 + 4);
      if (v24 == *(void *)(v23 + 48))
      {
        *(void *)std::string __p = v20 + 4;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v104[0] = 0xAAAAAAAAAAAAAAABLL * ((v24 - *(void *)(v23 + 40)) >> 3);
      v104[1] = 0;
      LODWORD(v104[2]) = 0;
      BYTE4(v104[2]) = 0;
      if (&v104[1] != v20 + 7)
      {
        *(uint64_t *)((char *)&v104[1] + 5) = *(void *)((char *)v20 + 61);
        v104[1] = v20[7];
        BYTE4(v104[2]) = *((unsigned char *)v20 + 68);
        if (BYTE4(v104[2]) <= 9u && ((1 << SBYTE4(v104[2])) & 0x33C) != 0) {
          atomic_fetch_add((atomic_ullong *volatile)v104[1], 1uLL);
        }
      }
      uint64_t v25 = v89.i64[1];
      if (v89.i64[1] >= v90[0])
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v89.i64[1] - v89.i64[0]) >> 3) + 1;
        if (v28 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v90[0] - v89.i64[0]) >> 3) > v28) {
          unint64_t v28 = 0x5555555555555556 * ((v90[0] - v89.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v90[0] - v89.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v28;
        }
        atomic_ullong *volatile v95 = v90;
        int64x2_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)v90, v29);
        long long v31 = &v30[8 * ((v89.i64[1] - v89.i64[0]) >> 3)];
        *(void *)std::string __p = v30;
        *(void *)&__p[8] = v31;
        *(void *)&__p[24] = &v30[24 * v32];
        *(void *)long long v31 = v104[0];
        *((void *)v31 + 1) = 0;
        *((_DWORD *)v31 + 4) = 0;
        v31[20] = 0;
        uint64_t v33 = v104[1];
        *(void *)(v31 + 13) = *(uint64_t *)((char *)&v104[1] + 5);
        *((void *)v31 + 1) = v33;
        v31[20] = BYTE4(v104[2]);
        BYTE4(v104[2]) = 0;
        std::string::size_type v27 = v31 + 24;
        *(void *)&__p[16] = v31 + 24;
        int64x2_t v34 = v89;
        uint64_t v35 = *(void *)&__p[8];
        if (v89.i64[1] == v89.i64[0])
        {
          int64x2_t v39 = vdupq_n_s64(v89.u64[1]);
        }
        else
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = v35 + v36;
            *(void *)(v37 - 24) = *(void *)(v34.i64[1] + v36 - 24);
            *(void *)(v37 - 16) = 0;
            *(_DWORD *)(v37 - 8) = 0;
            *(unsigned char *)(v37 - 4) = 0;
            uint64_t v38 = *(void *)(v34.i64[1] + v36 - 16);
            *(void *)(v37 - 11) = *(void *)(v34.i64[1] + v36 - 11);
            *(void *)(v37 - 16) = v38;
            *(unsigned char *)(v37 - 4) = *(unsigned char *)(v34.i64[1] + v36 - 4);
            *(unsigned char *)(v34.i64[1] + v36 - 4) = 0;
            v36 -= 24;
          }
          while (v34.i64[1] + v36 != v34.i64[0]);
          int64x2_t v39 = v89;
          std::string::size_type v27 = *(char **)&__p[16];
          v35 += v36;
        }
        v89.i64[0] = v35;
        v89.i64[1] = (uint64_t)v27;
        *(int64x2_t *)&__p[8] = v39;
        uint64_t v40 = v90[0];
        v90[0] = *(void *)&__p[24];
        *(void *)&__p[24] = v40;
        *(void *)std::string __p = v39.i64[0];
        std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(void *)v89.i64[1] = v104[0];
        *(void *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 16) = 0;
        *(unsigned char *)(v25 + 20) = 0;
        uint64_t v26 = v104[1];
        *(void *)(v25 + 13) = *(uint64_t *)((char *)&v104[1] + 5);
        *(void *)(v25 + 8) = v26;
        *(unsigned char *)(v25 + 20) = BYTE4(v104[2]);
        BYTE4(v104[2]) = 0;
        std::string::size_type v27 = (char *)(v25 + 24);
      }
      v89.i64[1] = (uint64_t)v27;
      std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)v104);
      uint64_t v41 = (void *)v20[1];
      if (v41)
      {
        do
        {
          unint64_t v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          unint64_t v42 = (void *)v20[2];
          BOOL v43 = *v42 == (void)v20;
          uint64_t v20 = v42;
        }
        while (!v43);
      }
      uint64_t v20 = v42;
    }
    while (v42 != v21);
  }
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D771708;
  v107.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
  atomic_ullong *volatile v108 = &v107;
  unint64_t v88 = 0;
  uint64_t v44 = *(void *)v19;
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME[0]);
  uint64_t v45 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(v44 + 40), *(void *)(v44 + 48), (unsigned __int8 **)__p);
  if (v45 == *(void *)(v44 + 48))
  {
    v106[0] = __p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *(void *)(v44 + 40)) >> 3);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v87 = 0;
  unint64_t v88 = v46;
  uint64_t v47 = *(void *)v19;
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::DST_COLUMN_NAME);
  uint64_t v48 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(v47 + 40), *(void *)(v47 + 48), (unsigned __int8 **)__p);
  if (v48 == *(void *)(v47 + 48))
  {
    v106[0] = __p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v48 - *(void *)(v47 + 40)) >> 3);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v87 = v49;
  v106[0] = &unk_26D771788;
  v106[1] = &v88;
  v106[2] = &v87;
  v106[3] = v106;
  memset(v104, 0, sizeof(v104));
  int v105 = 1065353216;
  unint64_t v50 = operator new(0x28uLL);
  *unint64_t v50 = &unk_26D771818;
  v50[1] = &v93;
  v50[2] = &v92;
  v50[3] = v104;
  v50[4] = a1;
  v103[3] = v50;
  uint64_t v51 = *a2;
  uint64_t v52 = a2[1] - *a2;
  if (v52)
  {
    unint64_t v53 = v52 >> 4;
    if (v53 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v53;
    }
    if (*(unsigned char *)(v51 + 12) == 7)
    {
      unint64_t v55 = (unsigned __int8 *)(*a3 + 12);
      char v56 = (unsigned __int8 *)(v51 + 28);
      unint64_t v57 = 1;
      BOOL v58 = 1;
      do
      {
        int v59 = *v55;
        v55 += 16;
        if (v59 != 7) {
          break;
        }
        BOOL v58 = v57 < v53;
        if (v54 == v57) {
          break;
        }
        int v60 = *v56;
        v56 += 16;
        ++v57;
      }
      while (v60 == 7);
    }
    else
    {
      BOOL v58 = 1;
    }
  }
  else
  {
    BOOL v58 = 0;
  }
  std::vector<turi::sframe>::vector(v86, a1[3] * a1[3]);
  if (v58)
  {
    std::vector<std::unordered_set<turi::flexible_type>>::vector(v85, a1[3]);
    std::vector<std::unordered_set<turi::flexible_type>>::vector(v84, a1[3]);
    memset(__p, 0, sizeof(__p));
    LODWORD(v95) = 1065353216;
    if (a1[3])
    {
      int64x2_t v61 = 0;
      do
      {
        long long v62 = 0;
        do
        {
          v99[0] = v61;
          v99[1] = v62;
          v83[0] = v99;
          std::string v63 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t)__p, v99, (uint64_t)&std::piecewise_construct, v83);
          std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__assign_unique<std::pair<turi::flexible_type,turi::flexible_type> const*>(v63 + 4, 0, 0);
          long long v62 = (_OWORD *)((char *)v62 + 1);
          unint64_t v64 = a1[3];
        }
        while ((unint64_t)v62 < v64);
        int64x2_t v61 = (_OWORD *)((char *)v61 + 1);
      }
      while ((unint64_t)v61 < v64);
    }
    else
    {
      unint64_t v64 = 0;
    }
    uint64_t v67 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v68 = 0;
      unint64_t v69 = 0;
      while (1)
      {
        atomic_ullong *volatile v70 = (unsigned __int8 *)(v67 + v68);
        uint64_t v71 = *a3;
        unint64_t v72 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v67 + v68));
        unint64_t v73 = a1[3];
        unint64_t v74 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v71 + v68))
            % v73;
        if (*(unsigned char *)(v67 + v68 + 12) == 7)
        {
          atomic_ullong *volatile v70 = (unsigned __int8 *)(v71 + 16 * v69);
          uint64_t v75 = v84[0] + 40 * v74;
        }
        else
        {
          if (*(unsigned char *)(v71 + v68 + 12) != 7)
          {
            v83[0] = (_OWORD *)(v72 % v73);
            v83[1] = (_OWORD *)v74;
            v99[0] = v83;
            unsigned int v76 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t)__p, v83, (uint64_t)&std::piecewise_construct, v99)+ 4;
            std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v99, (uint64_t *)(v67 + v68), v71 + v68);
            std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t)v76, (unsigned __int8 *)v99, (uint64_t)v99);
            std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v99);
            goto LABEL_74;
          }
          uint64_t v75 = v85[0] + 40 * (v72 % v73);
        }
        std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v75, v70, (uint64_t)v70);
LABEL_74:
        ++v69;
        uint64_t v67 = *a2;
        v68 += 16;
        if (v69 >= (a2[1] - *a2) >> 4)
        {
          unint64_t v64 = a1[3];
          uint64_t v11 = v80;
          break;
        }
      }
    }
    std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)v103);
    atomic_ullong *volatile v97 = 0;
    std::string v77 = operator new(0x68uLL);
    *std::string v77 = &unk_26D771978;
    v77[1] = v104;
    v77[2] = &v93;
    v77[3] = &v92;
    v77[4] = a1;
    v77[5] = &v88;
    v77[6] = &v87;
    v77[7] = v85;
    v77[8] = v84;
    v77[9] = __p;
    v77[10] = &v107;
    v77[11] = v106;
    v77[12] = v86;
    atomic_ullong *volatile v97 = v77;
    turi::sgraph_compute::hilbert_blocked_parallel_for (v64, (uint64_t)v98, (uint64_t)v96, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
    std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](v96);
    std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](v98);
    std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table((uint64_t)__p);
    *(void *)std::string __p = v84;
    std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    *(void *)std::string __p = v85;
    std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    unint64_t v65 = a1[3];
    std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)v103);
    long long v101 = 0;
    atomic_ullong *volatile v66 = operator new(0x50uLL);
    *atomic_ullong *volatile v66 = &unk_26D7718C8;
    v66[1] = v104;
    v66[2] = &v93;
    v66[3] = &v92;
    void v66[4] = a1;
    v66[5] = &v88;
    v66[6] = &v87;
    v66[7] = &v107;
    v66[8] = v106;
    v66[9] = v86;
    long long v101 = v66;
    turi::sgraph_compute::hilbert_blocked_parallel_for (v65, (uint64_t)v102, (uint64_t)v100, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
    std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](v100);
    std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](v102);
  }
  int v79 = (const turi::sframe *)v86[0];
  uint64_t v78 = (const turi::sframe *)v86[1];
  while (v79 != v78)
  {
    turi::sframe::append(v11, v79, (turi::sframe *)__p);
    turi::sframe::operator=((uint64_t)v11, (uint64_t)__p);
    turi::sframe::~sframe((turi::sframe *)__p);
    int v79 = (const turi::sframe *)((char *)v79 + 296);
  }
  *(void *)std::string __p = v86;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](v103);
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table((uint64_t)v104);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v106);
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&v107);
  *(void *)std::string __p = &v89;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)std::string __p = &v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2241FD8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, turi::sframe *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](&STACK[0x200]);
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](&STACK[0x220]);
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table((uint64_t)&__p);
  std::string __p = &a14;
  std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a17;
  std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a20;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100]((void *)(v35 - 240));
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table(v35 - 208);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)(v35 - 168));
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)(v35 - 136));
  *(void *)(v35 - 208) = &a25;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 208));
  *(void *)(v35 - 208) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 208));
  turi::sframe::~sframe(a9);
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::hilbert_blocked_parallel_for (unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1 * a1;
  if (a1 * a1)
  {
    unint64_t v6 = 0;
    unint64_t v24 = a1 * a1;
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      std::string __p = 0;
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      unint64_t v9 = v6 + a4;
      if (v4 >= v6 + a4) {
        unint64_t v4 = v6 + a4;
      }
      if (v6 < v4)
      {
        do
        {
          unint64_t v10 = turi::hilbert_index_to_coordinate(v6, a1);
          unint64_t v12 = v10;
          uint64_t v13 = v11;
          uint64_t v14 = v32;
          if ((unint64_t)v32 >= v33)
          {
            uint64_t v15 = (char *)__p;
            int64_t v16 = (v32 - (unsigned char *)__p) >> 4;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = v33 - (void)__p;
            if ((uint64_t)(v33 - (void)__p) >> 3 > v17) {
              unint64_t v17 = v18 >> 3;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v33, v19);
              uint64_t v15 = (char *)__p;
              uint64_t v14 = v32;
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v21 = (uint64_t *)&v20[16 * v16];
            uint64_t *v21 = v12;
            v21[1] = v13;
            uint64_t v22 = v21;
            if (v14 != v15)
            {
              do
              {
                *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
                v22 -= 2;
                v14 -= 16;
              }
              while (v14 != v15);
              uint64_t v15 = (char *)__p;
            }
            uint64_t v7 = v21 + 2;
            std::string __p = v22;
            uint64_t v32 = (char *)(v21 + 2);
            unint64_t v33 = (unint64_t)&v20[16 * v19];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            *(void *)uint64_t v32 = v10;
            *((void *)v14 + 1) = v11;
            uint64_t v7 = (uint64_t *)(v14 + 16);
          }
          uint64_t v32 = (char *)v7;
          ++v6;
        }
        while (v6 < v4);
        uint64_t v8 = (long long *)__p;
      }
      unint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v28, v8, (long long *)v7, ((char *)v7 - (char *)v8) >> 4);
      unint64_t v4 = v24;
      uint64_t v23 = *(void *)(a2 + 24);
      if (!v23) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v23 + 48))(v23, &v28);
      if (v28)
      {
        unint64_t v29 = v28;
        operator delete(v28);
      }
      turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>((turi::thread_pool *)__p, (uint64_t *)v32, a3);
      if (__p)
      {
        uint64_t v32 = (char *)__p;
        operator delete(__p);
      }
      unint64_t v6 = v9;
    }
    while (v9 < v24);
  }
}

void sub_2241FDC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sgraph::add_vertices(turi::sgraph *this, uint64_t a2, unsigned __int8 **a3, unint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 288) && *(void *)(a2 + 32) && *(void *)(a2 + 24))
  {
    if (*((void *)this + 4) <= a4) {
      turi::sgraph::increase_number_of_groups(this, (std::string **)(a4 + 1));
    }
    v13[0] = 0;
    uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a2 + 40), *(void *)(a2 + 48), a3);
    if (v8 != *(void *)(a2 + 48))
    {
      v13[0] = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)(a2 + 40)) >> 3);
      unint64_t v9 = v13[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME[0]);
      turi::sframe::set_column_name(a2, v9, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      turi::sgraph::fast_validate_add_vertices(this, (const turi::sframe *)a2, a4);
      turi::sframe::sframe((turi::sframe *)v15, (const turi::sframe *)a2);
      unint64_t v10 = (void *)*((void *)this + 3);
      v14[0] = &unk_26D771A78;
      v14[1] = this;
      v14[2] = v13;
      v14[3] = v14;
      v13[9] = 0;
      turi::shuffle((uint64_t)v15, v10, (uint64_t *)&__p);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  return 1;
}

void sub_2241FE080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,void **p_p,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  p_p = &__p;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_vertices(turi::sgraph *this, const turi::sframe *a2, unint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME[0]);
  uint64_t v6 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)a2 + 5), *((void *)a2 + 6), (unsigned __int8 **)__p);
  if (v6 == *((void *)a2 + 6))
  {
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *((void *)a2 + 5)) >> 3);
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  int v8 = turi::sframe::column_type(a2, v7);
  if (v8 == 7) {
    turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator()();
  }
  int v9 = *((unsigned __int8 *)this + 56);
  if (v9 == 7)
  {
    turi::sgraph::bootstrap_vertex_id_type((uint64_t)this, v8);
  }
  else if (v9 != v8)
  {
    __p[0] = this;
    turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_1::operator()((uint64_t *)__p);
  }
  turi::sgraph::get_vertex_fields(this, a3, &v26);
  turi::sgraph::get_vertex_field_types(this, a3, v25);
  *(_OWORD *)std::string __p = 0u;
  long long v23 = 0u;
  int v24 = 1065353216;
  if (*((void *)a2 + 3))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      char v12 = turi::sframe::column_type(a2, v11);
      uint64_t v13 = *((void *)a2 + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a2 + 6) - v13) >> 3) <= v11) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      char v14 = v12;
      uint64_t v15 = (long long *)(v13 + v10);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v16 = *v15;
        v21.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
      }
      unint64_t v28 = &v21;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v21, (uint64_t)&std::piecewise_construct, (long long **)&v28)+ 40) = v14;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      ++v11;
      v10 += 24;
    }
    while (v11 < *((void *)a2 + 3));
  }
  std::string::size_type v17 = v26.__r_.__value_.__r.__words[0];
  if (v26.__r_.__value_.__l.__size_ != v26.__r_.__value_.__r.__words[0])
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      unsigned __int8 v27 = *((unsigned char *)v25[0] + v19);
      if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__p, (unsigned __int8 *)(v17 + v18)))
      {
        v21.__r_.__value_.__r.__words[0] = v17 + v18;
        uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v17 + v18), (uint64_t)&std::piecewise_construct, (long long **)&v21);
        if (v20[40] != v27)
        {
          v21.__r_.__value_.__r.__words[0] = v17 + v18;
          v21.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
          turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_2::operator()();
        }
      }
      ++v19;
      std::string::size_type v17 = v26.__r_.__value_.__r.__words[0];
      v18 += 24;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void turi::sgraph::commit_vertex_buffer(unint64_t *a1, unint64_t a2, const turi::sframe **a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v51 = a2;
  turi::sgraph::get_vertex_fields((turi::sgraph *)a1, a2, &v50);
  turi::sgraph::get_vertex_field_types((turi::sgraph *)a1, a2, &__p);
  memset(v45, 0, sizeof(v45));
  int v46 = 1065353216;
  std::string::size_type v6 = v50.__r_.__value_.__r.__words[0];
  if (v50.__r_.__value_.__l.__size_ != v50.__r_.__value_.__r.__words[0])
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unsigned __int8 v9 = *((unsigned char *)__p + v8);
      v57.__r_.__value_.__r.__words[0] = v6 + v7;
      std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v45, (unsigned __int8 *)(v6 + v7), (uint64_t)&std::piecewise_construct, (long long **)&v57)[40] = v9;
      ++v8;
      std::string::size_type v6 = v50.__r_.__value_.__r.__words[0];
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3));
  }
  uint64_t v41 = (long long *)a3;
  turi::sframe::sframe((turi::sframe *)v53, *a3);
  if (v54)
  {
    for (unint64_t i = 0; i < v54; ++i)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3) <= i) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      unint64_t v11 = (long long *)(v55 + 24 * i);
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v12 = *v11;
        v57.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
      }
      unsigned __int8 v13 = turi::sframe::column_type((turi::sframe *)v53, i);
      if (!std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v45, (unsigned __int8 *)&v57))
      {
        v42[0] = (long long *)&v57;
        std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v45, (unsigned __int8 *)&v57, (uint64_t)&std::piecewise_construct, v42)[40] = v13;
        std::string::size_type size = (_OWORD *)v50.__r_.__value_.__l.__size_;
        if (v50.__r_.__value_.__l.__size_ >= v50.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v50, (long long *)&v57);
        }
        else
        {
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v50.__r_.__value_.__l.__size_, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v15 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
            *(void *)(v50.__r_.__value_.__l.__size_ + 16) = *((void *)&v57.__r_.__value_.__l + 2);
            *std::string::size_type size = v15;
          }
          std::string::size_type v16 = (std::string::size_type)size + 24;
        }
        v50.__r_.__value_.__l.__size_ = v16;
        std::string::size_type v17 = v48;
        if (v48 >= v49)
        {
          unint64_t v19 = (unint64_t)__p;
          uint64_t v20 = v48 - (unsigned char *)__p;
          uint64_t v21 = v48 - (unsigned char *)__p + 1;
          if (v21 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v22 = v49 - (unsigned char *)__p;
          if (2 * (v49 - (unsigned char *)__p) > (unint64_t)v21) {
            uint64_t v21 = 2 * v22;
          }
          if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v23 = v21;
          }
          if (v23) {
            int v24 = (char *)operator new(v23);
          }
          else {
            int v24 = 0;
          }
          uint64_t v25 = &v24[v20];
          std::string v26 = (unsigned __int8 *)&v24[v20];
          *std::string v26 = v13;
          uint64_t v18 = (char *)(v26 + 1);
          if (v17 != (char *)v19)
          {
            unsigned __int8 v27 = &v17[~v19];
            do
            {
              char v28 = *--v17;
              (v27--)[(void)v24] = v28;
            }
            while (v17 != (char *)v19);
            uint64_t v25 = v24;
          }
          std::string __p = v25;
          uint64_t v48 = v18;
          unint64_t v49 = &v24[v23];
          if (v19) {
            operator delete((void *)v19);
          }
        }
        else
        {
          *uint64_t v48 = v13;
          uint64_t v18 = v17 + 1;
        }
        uint64_t v48 = v18;
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
  }
  unint64_t v29 = (turi::thread_pool *)std::vector<unsigned long>::vector(&v43, a1[3]);
  unint64_t v30 = a1[3];
  v42[0] = (long long *)a1;
  v42[1] = (long long *)&v51;
  v42[2] = v41;
  v42[3] = (long long *)&v50;
  v42[4] = (long long *)&__p;
  v42[5] = (long long *)&v43;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v29);
  uint64_t v32 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v32);
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v32 > 1)
  {
    int64x2_t v34 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v57, v34);
    double v35 = (double)v30 / (double)(unint64_t)v32;
    v52[2] = (unint64_t)(v35 * (double)0 + 0.0);
    v52[3] = (unint64_t)(v35 * (double)1uLL + 0.0);
    v52[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1}>(turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0)::stored_vtable
           + 1;
    v52[1] = (uint64_t)v42;
    turi::parallel_task_queue::launch((uint64_t)&v57, v52);
  }
  if (v30) {
    turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()((uint64_t *)v42, 0);
  }
  uint64_t v36 = v43;
  uint64_t v37 = v44;
  if (v43 != v44)
  {
    unint64_t v38 = a1[5];
    int64x2_t v39 = v43;
    do
    {
      uint64_t v40 = *v39++;
      v38 += v40;
      a1[5] = v38;
    }
    while (v39 != v37);
  }
  if (v36)
  {
    uint64_t v44 = v36;
    operator delete(v36);
  }
  turi::sframe::~sframe((turi::sframe *)v53);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v45);
  if (__p)
  {
    uint64_t v48 = (char *)__p;
    operator delete(__p);
  }
  v53[0] = (void **)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v53);
}

void sub_2241FE898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&a36);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  a36 = (uint64_t)&a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

void turi::sgraph::merge_vertex_partition(turi::sgraph *this, turi::sframe *a2, turi::sframe *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME[0]);
  if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)a2 + 5), *((void *)a2 + 6), (unsigned __int8 **)&__p) != *((void *)a2 + 6))
  {
    if (v5 < 0) {
      operator delete(__p);
    }
    turi::sframe::get_reader(a2);
  }
  turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
}

void sub_2241FF1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, turi::sframe *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  a30 = &a17;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = &a20;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void sub_2241FF4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,atomic_ullong *a27,int a28,char a29)
{
  switch(a29)
  {
    case 2:
      turi::gl_sarray::clip(&a27);
      break;
    case 3:
      turi::gl_sarray::clip(&a27);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a27);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a27);
      break;
    case 8:
      turi::gl_sarray::clip(&a27);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a27);
      break;
    default:
      break;
  }
  JUMPOUT(0x2241FF2CCLL);
}

uint64_t turi::sgraph::add_edges(turi::sgraph *this, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4, void **a5, unint64_t *a6)
{
  v26[37] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 288) && *(void *)(a2 + 32) && *(void *)(a2 + 24))
  {
    unint64_t v12 = *((void *)this + 4);
    if (v12 <= (unint64_t)a5 || v12 <= (unint64_t)a6)
    {
      if (a5 <= (void **)a6) {
        char v14 = (char *)a6;
      }
      else {
        char v14 = (char *)a5;
      }
      turi::sgraph::increase_number_of_groups(this, (std::string **)(v14 + 1));
      unint64_t v12 = *((void *)this + 4);
    }
    unint64_t v24 = v12;
    uint64_t v25 = a5;
    if (v12 > (unint64_t)a5)
    {
      unint64_t v24 = v12;
      uint64_t v25 = a6;
      if (v12 > (unint64_t)a6)
      {
        uint64_t v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a2 + 40), *(void *)(a2 + 48), a3);
        uint64_t v16 = *(void *)(a2 + 48);
        if (v15 != v16)
        {
          uint64_t v17 = v15;
          uint64_t v18 = *(void *)(a2 + 40);
          uint64_t v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v18, v16, a4);
          if (v19 != *(void *)(a2 + 48))
          {
            uint64_t v20 = v19;
            uint64_t v21 = *(void *)(a2 + 40);
            std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME[0]);
            turi::sframe::set_column_name(a2, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
            turi::sframe::set_column_name(a2, 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3), &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            turi::sgraph::fast_validate_add_edges(this, (const turi::sframe *)a2, a5, a6);
            turi::sframe::sframe((turi::sframe *)v26, (const turi::sframe *)a2);
            turi::sgraph::commit_edge_buffer((uint64_t)this, (unint64_t)a5, (unint64_t)a6, v26);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v24;
      turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator()();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v24;
    turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
  }
  return 1;
}

void sub_2241FFC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
}

void turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned __int8 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 574, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned __int8 v13 = v16;
  turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241FFE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned __int8 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 575, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned __int8 v13 = v16;
  turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2242000C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_edges(turi::sgraph *this, const turi::sframe *a2, void **a3, unint64_t *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME[0]);
  uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)a2 + 5), *((void *)a2 + 6), (unsigned __int8 **)__p);
  if (v8 == *((void *)a2 + 6))
  {
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)a2 + 5);
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::DST_COLUMN_NAME);
  uint64_t v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)a2 + 5), *((void *)a2 + 6), (unsigned __int8 **)__p);
  if (v11 == *((void *)a2 + 6))
  {
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *((void *)a2 + 5)) >> 3);
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  int v14 = turi::sframe::column_type(a2, v12);
  if (v14 != turi::sframe::column_type(a2, v13)) {
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()();
  }
  if (v14 == 7) {
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator()();
  }
  uint64_t v16 = (char *)this + 56;
  int v15 = *((unsigned __int8 *)this + 56);
  if (v15 == 7)
  {
    turi::sgraph::bootstrap_vertex_id_type((uint64_t)this, v14);
  }
  else if (v15 != v14)
  {
    __p[0] = this;
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_2::operator()((uint64_t *)__p);
  }
  turi::sgraph::get_edge_fields(this, (unint64_t)a3, a4, &v44);
  turi::sgraph::get_edge_field_types(this, a3, (void **)a4, (uint64_t *)v43);
  *(_OWORD *)std::string __p = 0u;
  long long v41 = 0u;
  int v42 = 1065353216;
  if (*((void *)a2 + 3))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      char v19 = turi::sframe::column_type(a2, v18);
      uint64_t v20 = *((void *)a2 + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a2 + 6) - v20) >> 3) <= v18) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      char v21 = v19;
      unint64_t v22 = (long long *)(v20 + v17);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v23 = *v22;
        v39.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
      }
      int v46 = &v39;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v39, (uint64_t)&std::piecewise_construct, (long long **)&v46)+ 40) = v21;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      ++v18;
      v17 += 24;
    }
    while (v18 < *((void *)a2 + 3));
  }
  std::string::size_type v24 = v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__l.__size_ != v44.__r_.__value_.__r.__words[0])
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      std::string::size_type v27 = v24 + v25;
      unsigned __int8 v45 = 0;
      size_t v28 = strlen(turi::sgraph::SRC_COLUMN_NAME[0]);
      size_t v29 = v28;
      size_t v30 = *(unsigned __int8 *)(v24 + v25 + 23);
      if (*(char *)(v24 + v25 + 23) < 0)
      {
        if (v28 != *(void *)(v27 + 8))
        {
          int64x2_t v34 = turi::sgraph::DST_COLUMN_NAME;
          size_t v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
          size_t v30 = *(void *)(v27 + 8);
          goto LABEL_37;
        }
        if (v28 == -1) {
LABEL_51:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        long long v31 = *(const void **)v27;
      }
      else
      {
        if (v28 != v30)
        {
          int64x2_t v34 = turi::sgraph::DST_COLUMN_NAME;
          size_t v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_34:
          uint64_t v36 = (const void *)(v24 + v25);
          if (v35 == v30) {
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        long long v31 = (const void *)(v24 + v25);
        if (v29 == -1) {
          goto LABEL_51;
        }
      }
      int v32 = memcmp(v31, turi::sgraph::SRC_COLUMN_NAME[0], v29);
      unint64_t v33 = (unsigned __int8 *)v16;
      if (!v32) {
        goto LABEL_42;
      }
      int64x2_t v34 = turi::sgraph::DST_COLUMN_NAME;
      size_t v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
      if ((v30 & 0x80) == 0) {
        goto LABEL_34;
      }
      size_t v30 = *(void *)(v24 + v25 + 8);
LABEL_37:
      if (v35 == v30)
      {
        if (v30 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v36 = *(const void **)v27;
LABEL_40:
        int v37 = memcmp(v36, v34, v30);
        unint64_t v33 = (unsigned __int8 *)v16;
        if (!v37) {
          goto LABEL_42;
        }
      }
LABEL_41:
      unint64_t v33 = (unsigned __int8 *)v43[0] + v26;
LABEL_42:
      unsigned __int8 v45 = *v33;
      if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__p, (unsigned __int8 *)(v24 + v25)))
      {
        v39.__r_.__value_.__r.__words[0] = v24 + v25;
        unint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v24 + v25), (uint64_t)&std::piecewise_construct, (long long **)&v39);
        if (v38[40] != v45)
        {
          v39.__r_.__value_.__r.__words[0] = v24 + v25;
          v39.__r_.__value_.__l.__size_ = (std::string::size_type)&v45;
          turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_3::operator()();
        }
      }
      ++v26;
      std::string::size_type v24 = v44.__r_.__value_.__r.__words[0];
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v44.__r_.__value_.__l.__size_ - v44.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void turi::sgraph::commit_edge_buffer(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  unint64_t v63 = a3;
  unint64_t v64 = a2;
  gettimeofday(&v62, 0);
  gettimeofday(&v61, 0);
  v60[1] = 0;
  v60[2] = 0;
  gettimeofday(&v61, 0);
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 609, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"In commit edge buffer (", 23);
    }
    uint64_t v10 = file_logger::operator<<<unsigned long>((uint64_t)started);
    uint64_t v11 = pthread_getspecific(*(void *)(v10 + 592));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)",", 1);
    }
    uint64_t v12 = file_logger::operator<<<unsigned long>(v10);
    unint64_t v13 = pthread_getspecific(*(void *)(v12 + 592));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)")", 1);
    }
    int v14 = pthread_getspecific(*(void *)(v12 + 592));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        int v15 = std::locale::use_facet(&v69, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  gettimeofday(&v62, 0);
  uint64_t v58 = 0;
  int v59 = 0;
  v60[0] = 0;
  unint64_t v16 = *(void *)(a1 + 24) << (v64 != v63);
  if (v16)
  {
    uint64_t v48 = a4;
    uint64_t v17 = *(void *)(a1 + 24) << (v64 != v63);
    do
    {
      unint64_t v18 = operator new(0x140uLL);
      v18[1] = 0;
      uint64_t v18[2] = 0;
      *unint64_t v18 = &unk_26D771B28;
      char v19 = v18 + 3;
      v69.__locale_ = (std::locale::__imp *)&unk_26D771B78;
      unint64_t v72 = &v69;
      turi::sarray_sorted_buffer<turi::flexible_type>::sarray_sorted_buffer(v18 + 3, turi::SGRAPH_INGRESS_VID_BUFFER_SIZE, &v69, 1);
      std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](&v69);
      uint64_t v20 = v59;
      if ((unint64_t)v59 >= v60[0])
      {
        uint64_t v22 = ((uint64_t)v59 - v58) >> 4;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v60[0] - v58;
        if ((v60[0] - v58) >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        unint64_t v73 = v60;
        unint64_t v26 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v60, v25);
        std::string::size_type v27 = (void *)((char *)v26 + 16 * v22);
        v69.__locale_ = v26;
        atomic_ullong *volatile v70 = v27;
        unint64_t v72 = (std::locale *)((char *)v26 + 16 * v28);
        *std::string::size_type v27 = v19;
        v27[1] = v18;
        uint64_t v71 = v27 + 2;
        std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::__swap_out_circular_buffer(&v58, &v69);
        char v21 = v59;
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v69.__locale_);
      }
      else
      {
        *int v59 = v19;
        v20[1] = v18;
        char v21 = v20 + 2;
      }
      int v59 = v21;
      --v17;
    }
    while (v17);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    if (v64 == v63)
    {
      uint64_t v29 = 0;
      a4 = v48;
      do
      {
        std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::push_back[abi:ne180100](&v55, (long long *)(v58 + v29));
        std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::push_back[abi:ne180100](&v52, (long long *)(v58 + v29));
        v29 += 16;
        --v16;
      }
      while (v16);
    }
    else
    {
      a4 = v48;
      if (v16 >= 2)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        unint64_t v32 = v16 >> 1;
        do
        {
          std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::push_back[abi:ne180100](&v55, (long long *)(v58 + v30));
          std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::push_back[abi:ne180100](&v52, (long long *)(v58 + 16 * (v31 + *(void *)(a1 + 24))));
          ++v31;
          v30 += 16;
        }
        while (v32 != v31);
      }
    }
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
  }
  unint64_t v51 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v69, turi::sgraph::SRC_COLUMN_NAME[0]);
  uint64_t v33 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)&v69);
  if (v33 != a4[6])
  {
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - a4[5]) >> 3);
    if (SHIBYTE(v71) < 0) {
      operator delete(v69.__locale_);
    }
    unint64_t v50 = 0;
    unint64_t v51 = v34;
    std::string::basic_string[abi:ne180100]<0>(&v69, turi::sgraph::DST_COLUMN_NAME);
    uint64_t v35 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)&v69);
    if (v35 != a4[6])
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v35 - a4[5]) >> 3);
      if (SHIBYTE(v71) < 0) {
        operator delete(v69.__locale_);
      }
      unint64_t v50 = v36;
      int v37 = (int *)global_logger();
      if (v37[169] <= 3)
      {
        if (cppipc::must_cancel((cppipc *)v37)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        unint64_t v38 = (file_logger *)global_logger();
        std::string v39 = file_logger::start_stream(v38, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 680, 1);
        uint64_t v40 = pthread_getspecific(*((void *)v39 + 74));
        if (v40 && *((unsigned char *)v40 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Shuffling edges ...", 19);
        }
        long long v41 = pthread_getspecific(*((void *)v39 + 74));
        if (v41 && *((unsigned char *)v41 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(v41[2] - 24) + 16));
          int v42 = std::locale::use_facet(&v69, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
          std::locale::~locale(&v69);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v39);
          if (*((_DWORD *)v39 + 150) == 7)
          {
            __print_back_trace();
            uint64_t v47 = __cxa_allocate_exception(8uLL);
            *uint64_t v47 = "LOG_FATAL encountered";
            __cxa_throw(v47, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      turi::sframe::sframe((turi::sframe *)v68, (const turi::sframe *)a4);
      uint64_t v43 = *(void *)(a1 + 24);
      uint64_t v67 = 0;
      std::string v44 = operator new(0x20uLL);
      *std::string v44 = &unk_26D771C08;
      v44[1] = a1;
      v44[2] = &v51;
      v44[3] = &v50;
      uint64_t v67 = v44;
      atomic_ullong *volatile v66 = 0;
      unsigned __int8 v45 = operator new(0x30uLL);
      *unsigned __int8 v45 = &unk_26D771C88;
      v45[1] = &v51;
      _OWORD v45[2] = &v50;
      v45[3] = a1;
      v45[4] = &v55;
      v45[5] = &v52;
      atomic_ullong *volatile v66 = v45;
      turi::shuffle((uint64_t)v68, (void *)(v43 * v43), v49);
    }
    v65.tv_sec = (__darwin_time_t)&v69;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v65.tv_sec = (__darwin_time_t)&v69;
  turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
}

void sub_224201D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (__p) {
    operator delete(__p);
  }
  a61 = (uint64_t)&a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  a61 = (uint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a24;
  std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a27;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a32;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a35;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void sub_224201FE8()
{
}

void sub_224201FF0()
{
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](&STACK[0x350]);
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x224201FD0);
}

void **std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224202114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::copy_vertex_field(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, unint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v13 = a4;
  unint64_t v14 = *(void *)(a1 + 32);
  if (v14 <= a4)
  {
    *(void *)&v15[0] = &v13;
    *((void *)&v15[0] + 1) = &v14;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = (uint64_t *)(v7 + 24 * a4);
  if (!turi::sframe::contains_column(*v8, a2)) {
    turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator()();
  }
  BOOL v9 = turi::sframe::contains_column(*v8, a3);
  uint64_t v10 = *v8;
  uint64_t v11 = *(void *)(v7 + 24 * a4 + 8);
  if (v9)
  {
    if (v10 != v11)
    {
      turi::sframe::select_column(v10, a2, v15);
      turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v15[0], 0, (uint64_t *)&v13);
    }
  }
  else if (v10 != v11)
  {
    turi::sframe::select_column(v10, a2, v15);
    turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v15[0], 0, (uint64_t *)&v13);
  }
  return 1;
}

void sub_224202330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vdata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 904, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::copy_edge_field(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, unint64_t a4, unint64_t a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v13 = a4;
  unint64_t v5 = *(void *)(a1 + 32);
  unint64_t v14 = v5;
  if (v5 <= a4)
  {
    *(void *)&v15[0] = &v13;
    *((void *)&v15[0] + 1) = &v14;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v13 = a5;
  unint64_t v14 = v5;
  if (v5 <= a5)
  {
    *(void *)&v15[0] = &v13;
    *((void *)&v15[0] + 1) = &v14;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  *(void *)&v15[0] = a4;
  *((void *)&v15[0] + 1) = a5;
  uint64_t v8 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)v15);
  if (!turi::sframe::contains_column(*v8, a2)) {
    turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
  }
  BOOL v9 = turi::sframe::contains_column(*v8, a3);
  uint64_t v10 = *v8;
  uint64_t v11 = v8[1];
  if (v9)
  {
    if (v10 != v11)
    {
      turi::sframe::select_column(v10, a2, v15);
      turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v15[0], 0, (uint64_t *)&v13);
    }
  }
  else if (v10 != v11)
  {
    turi::sframe::select_column(v10, a2, v15);
    turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v15[0], 0, (uint64_t *)&v13);
  }
  return 1;
}

void sub_2242027D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"edata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 926, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::remove_vertex_field(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  v13[37] = *MEMORY[0x263EF8340];
  unint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = a3;
  if (v11 <= (unint64_t)a3)
  {
    v13[0] = &v12;
    v13[1] = &v11;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = *(void *)(a1 + 64);
  unint64_t v6 = (uint64_t *)(v5 + 24 * (void)a3);
  if (!turi::sframe::contains_column(*v6, a2)) {
    turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator()();
  }
  char v7 = (uint64_t *)*v6;
  for (unint64_t i = *(uint64_t **)(v5 + 24 * (void)a3 + 8); v7 != i; v7 += 37)
  {
    uint64_t v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v7[5], v7[6], a2);
    if (v9 == v7[6])
    {
      uint64_t v12 = a2;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    turi::sframe::remove_column((turi::sframe *)v7, 0xAAAAAAAAAAAAAAABLL * ((v9 - v7[5]) >> 3), (uint64_t)v13);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)v13);
    turi::sframe::~sframe((turi::sframe *)v13);
  }
  return 1;
}

void sub_224202B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vdata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 945, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224202C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::remove_edge_field(uint64_t a1, unsigned __int8 **a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v11 = v4;
  unint64_t v12 = a3;
  if (v4 <= a3)
  {
    unint64_t v13 = &v12;
    unint64_t v14 = &v11;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v11 = v4;
  unint64_t v12 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    unint64_t v13 = &v12;
    unint64_t v14 = &v11;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  unint64_t v13 = (void *)a3;
  unint64_t v14 = a4;
  unint64_t v6 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v13);
  if (!turi::sframe::contains_column(*v6, a2)) {
    turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator()();
  }
  char v7 = (uint64_t *)*v6;
  for (unint64_t i = (uint64_t *)v6[1]; v7 != i; v7 += 37)
  {
    uint64_t v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v7[5], v7[6], a2);
    if (v9 == v7[6])
    {
      unint64_t v12 = (unint64_t)a2;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    turi::sframe::remove_column((turi::sframe *)v7, 0xAAAAAAAAAAAAAAABLL * ((v9 - v7[5]) >> 3), (uint64_t)&v13);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)&v13);
    turi::sframe::~sframe((turi::sframe *)&v13);
  }
  return 1;
}

void sub_224202EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"edata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 956, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224203008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::select_vertex_fields(uint64_t a1, const void ***a2, unint64_t a3)
{
  v10[37] = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = a3;
  if (v8 <= a3)
  {
    v10[0] = &v9;
    v10[1] = &v8;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = *(void *)(a1 + 64) + 24 * a3;
  unint64_t v4 = *(uint64_t **)v3;
  uint64_t v5 = *(uint64_t **)(v3 + 8);
  if (*(uint64_t **)v3 != v5)
  {
    do
    {
      turi::sframe::select_columns(v4, a2, (uint64_t)v10);
      turi::sframe::operator=((uint64_t)v4, (uint64_t)v10);
      turi::sframe::~sframe((turi::sframe *)v10);
      v4 += 37;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_2242031DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::select_edge_fields(uint64_t a1, const void ***a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v10 = v4;
  unint64_t v11 = a3;
  if (v4 <= a3)
  {
    unint64_t v12 = &v11;
    unint64_t v13 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = v4;
  unint64_t v11 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    unint64_t v12 = &v11;
    unint64_t v13 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  unint64_t v12 = (void *)a3;
  unint64_t v13 = a4;
  uint64_t v6 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v12);
  char v7 = *(uint64_t **)v6;
  unint64_t v8 = *(uint64_t **)(v6 + 8);
  while (v7 != v8)
  {
    turi::sframe::select_columns(v7, a2, (uint64_t)&v12);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)&v12);
    turi::sframe::~sframe((turi::sframe *)&v12);
    v7 += 37;
  }
  return 1;
}

void sub_2242032EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

uint64_t *turi::segment_sarray@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  v23[24] = *(void **)MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = v4 + 8;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (v7) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v6 == v5;
      }
      v6 += 8;
    }
    while (!v8);
    if (v4 != v5)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v22);
      unint64_t v10 = (_OWORD *)a3[1];
      unint64_t v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v11 = ((uint64_t)v10 - *a3) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - *a3;
        if (v13 >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        v23[4] = a3 + 2;
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a3 + 2), v14);
        uint64_t v16 = &v15[16 * v11];
        v23[0] = v15;
        v23[1] = v16;
        v23[3] = &v15[16 * v17];
        *(_OWORD *)uint64_t v16 = v22;
        long long v22 = 0uLL;
        v23[2] = v16 + 16;
        std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(a3, v23);
        uint64_t v18 = a3[1];
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v23);
        char v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
        a3[1] = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      else
      {
        _OWORD *v10 = v22;
        a3[1] = (uint64_t)(v10 + 1);
      }
      turi::sarray<turi::flexible_type>::open_for_write(*(void *)*a3);
    }
    if (v7) {
      turi::sarray<turi::flexible_type>::get_reader(*result);
    }
  }
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  while (v20 != v21)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)v20 + 40))();
    v20 += 16;
  }
  return result;
}

void sub_224203640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va1);
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_vertex_field(turi::sgraph *a1, uint64_t *a2, uint64_t a3)
{
  std::string __p = 0;
  std::string::size_type v27 = 0;
  uint64_t v30 = 0;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v28 = 0;
  uint64_t v29 = v3;
  if (!v3)
  {
    v25[0] = (uint64_t)&v30;
    v25[1] = (uint64_t)&v29;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 != v9)
  {
    uint64_t v10 = 0;
    do
    {
      if (*(unsigned char *)(v8 + 288)) {
        uint64_t v11 = *(void *)(v8 + 32);
      }
      else {
        uint64_t v11 = 0;
      }
      if (v10 >= v28)
      {
        uint64_t v13 = (char *)__p;
        uint64_t v14 = (v10 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v28 - (unsigned char *)__p;
        if ((v28 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v28, v17);
          uint64_t v13 = (char *)__p;
          uint64_t v10 = v27;
        }
        else
        {
          uint64_t v18 = 0;
        }
        char v19 = &v18[8 * v14];
        *(void *)char v19 = v11;
        unint64_t v12 = v19 + 8;
        while (v10 != v13)
        {
          uint64_t v20 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        std::string __p = v19;
        std::string::size_type v27 = v12;
        uint64_t v28 = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v10 = v11;
        unint64_t v12 = v10 + 8;
      }
      std::string::size_type v27 = v12;
      v8 += 296;
      uint64_t v10 = v12;
    }
    while (v8 != v9);
  }
  uint64_t v21 = *a2;
  long long v22 = (std::__shared_weak_count *)a2[1];
  v24[0] = v21;
  v24[1] = (uint64_t)v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::segment_sarray(v24, (uint64_t *)&__p, v25);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v23 = *(std::string *)a3;
  }
  turi::sgraph::add_vertex_field(a1, v25, (unsigned __int8 **)&v23, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = (void **)v25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (__p)
  {
    std::string::size_type v27 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2242038F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  *(void *)(v23 - 88) = &a18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::add_vertex_field(turi::sgraph *a1, void *a2, unsigned __int8 **a3, unint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  turi::sgraph::get_vertex_fields(a1, 0, &v31);
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>((uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, a3))
  {
    uint64_t v8 = (int *)global_logger();
    if (v8[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v8)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v9 = (file_logger *)global_logger();
      started = file_logger::start_stream(v9, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_vertex_field", 1170, 1);
      uint64_t v11 = pthread_getspecific(*((void *)started + 74));
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Vertex field already exists.", 28);
      }
      unint64_t v12 = pthread_getspecific(*((void *)started + 74));
      if (v12)
      {
        if (*((unsigned char *)v12 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
          uint64_t v13 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
          std::locale::~locale(&v34);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
LABEL_29:
    uint64_t v21 = 0;
    goto LABEL_30;
  }
  unint64_t v32 = *((void *)a1 + 4);
  unint64_t v33 = a4;
  if (v32 <= a4)
  {
    v34.__locale_ = (std::locale::__imp *)&v33;
    uint64_t v35 = &v32;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v15 = (uint64_t *)(*((void *)a1 + 8) + 24 * a4);
  uint64_t v16 = v15[1];
  uint64_t v17 = *v15;
  if (0x14C1BACF914C1BADLL * ((v16 - *v15) >> 3) != (uint64_t)(a2[1] - *a2) >> 4)
  {
    long long v22 = (int *)global_logger();
    if (v22[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v22)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v23 = (file_logger *)global_logger();
      uint64_t v24 = file_logger::start_stream(v23, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_vertex_field", 1175, 1);
      unint64_t v25 = pthread_getspecific(*((void *)v24 + 74));
      if (v25 && *((unsigned char *)v25 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Partition Size Mismatch.", 24);
      }
      unint64_t v26 = pthread_getspecific(*((void *)v24 + 74));
      if (v26)
      {
        if (*((unsigned char *)v26 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v26[2] - 24) + 16));
          std::string::size_type v27 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(&v34);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v24);
          if (*((_DWORD *)v24 + 150) == 7)
          {
            __print_back_trace();
            uint64_t v29 = __cxa_allocate_exception(8uLL);
            void *v29 = "LOG_FATAL encountered";
            __cxa_throw(v29, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    goto LABEL_29;
  }
  if (v16 != v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      long long v20 = *(_OWORD *)(*a2 + 16 * v19);
      long long v30 = v20;
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::sframe::add_column(v17 + v18, &v30, (uint64_t)a3, (uint64_t)&v34);
      turi::sframe::operator=(*v15 + v18, (uint64_t)&v34);
      turi::sframe::~sframe((turi::sframe *)&v34);
      if (*((void *)&v30 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
      }
      ++v19;
      uint64_t v17 = *v15;
      v18 += 296;
    }
    while (v19 < 0x14C1BACF914C1BADLL * ((v15[1] - *v15) >> 3));
  }
  uint64_t v21 = 1;
LABEL_30:
  v34.__locale_ = (std::locale::__imp *)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  return v21;
}

void sub_224203DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, std::locale a17)
{
  a16 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_edge_field(turi::sgraph *a1, uint64_t *a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v28 = 0;
  std::string v31 = 0;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v29 = 0;
  uint64_t v30 = v3;
  if (!v3)
  {
    unint64_t v25 = (void ***)&v31;
    unint64_t v26 = &v30;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v7 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)a1 + 88, (unint64_t *)&v25);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 != v9)
  {
    do
    {
      if (*(unsigned char *)(v8 + 288)) {
        uint64_t v10 = *(void *)(v8 + 32);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v28;
      if (v28 >= v29)
      {
        uint64_t v13 = (char *)__p;
        uint64_t v14 = (v28 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v29 - (unsigned char *)__p;
        if ((v29 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v17);
          uint64_t v13 = (char *)__p;
          uint64_t v11 = v28;
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v10;
        unint64_t v12 = v19 + 8;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        std::string __p = v19;
        uint64_t v28 = v12;
        uint64_t v29 = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v28 = v10;
        unint64_t v12 = v11 + 8;
      }
      uint64_t v28 = v12;
      v8 += 296;
    }
    while (v8 != v9);
  }
  uint64_t v21 = *a2;
  long long v22 = (std::__shared_weak_count *)a2[1];
  v24[0] = v21;
  v24[1] = (uint64_t)v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::segment_sarray(v24, (uint64_t *)&__p, (uint64_t *)&v25);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v23 = *(std::string *)a3;
  }
  turi::sgraph::add_edge_field(a1, &v25, (unsigned __int8 **)&v23, 0, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string v31 = &v25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_224204020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  *(void *)(v23 - 88) = &a18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::add_edge_field(turi::sgraph *a1, void *a2, unsigned __int8 **a3, std::locale::__imp *a4, unint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  turi::sgraph::get_edge_fields(a1, 0, 0, &v34);
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>((uint64_t)v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_, a3))
  {
    uint64_t v10 = (int *)global_logger();
    if (v10[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v10)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_edge_field", 1190, 1);
      uint64_t v13 = pthread_getspecific(*((void *)started + 74));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Edge field already exists.", 26);
      }
      uint64_t v14 = pthread_getspecific(*((void *)started + 74));
      if (v14)
      {
        if (*((unsigned char *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
          unint64_t v15 = std::locale::use_facet(&v37, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(&v37);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
LABEL_30:
    uint64_t v24 = 0;
    goto LABEL_31;
  }
  unint64_t v17 = *((void *)a1 + 4);
  unint64_t v35 = v17;
  v36[0] = a4;
  if (v17 <= (unint64_t)a4)
  {
    v37.__locale_ = (std::locale::__imp *)v36;
    unint64_t v38 = &v35;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v35 = v17;
  v36[0] = a5;
  if (v17 <= (unint64_t)a5)
  {
    v37.__locale_ = (std::locale::__imp *)v36;
    unint64_t v38 = &v35;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v37.__locale_ = a4;
  unint64_t v38 = a5;
  uint64_t v18 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)a1 + 88, (unint64_t *)&v37);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (0x14C1BACF914C1BADLL * ((v20 - *v18) >> 3) != (uint64_t)(a2[1] - *a2) >> 4)
  {
    unint64_t v25 = (int *)global_logger();
    if (v25[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v25)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v26 = (file_logger *)global_logger();
      std::string::size_type v27 = file_logger::start_stream(v26, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_edge_field", 1195, 1);
      uint64_t v28 = pthread_getspecific(*((void *)v27 + 74));
      if (v28 && *((unsigned char *)v28 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Partition Size Mismatch.", 24);
      }
      uint64_t v29 = pthread_getspecific(*((void *)v27 + 74));
      if (v29)
      {
        if (*((unsigned char *)v29 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(v29[2] - 24) + 16));
          uint64_t v30 = std::locale::use_facet(&v37, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
          std::locale::~locale(&v37);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v27);
          if (*((_DWORD *)v27 + 150) == 7)
          {
            __print_back_trace();
            unint64_t v32 = __cxa_allocate_exception(8uLL);
            void *v32 = "LOG_FATAL encountered";
            __cxa_throw(v32, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    goto LABEL_30;
  }
  if (v20 != v19)
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      long long v23 = *(_OWORD *)(*a2 + 16 * v22);
      long long v33 = v23;
      if (*((void *)&v23 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::sframe::add_column(v19 + v21, &v33, (uint64_t)a3, (uint64_t)&v37);
      turi::sframe::operator=(*v18 + v21, (uint64_t)&v37);
      turi::sframe::~sframe((turi::sframe *)&v37);
      if (*((void *)&v33 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
      }
      ++v22;
      uint64_t v19 = *v18;
      v21 += 296;
    }
    while (v22 < 0x14C1BACF914C1BADLL * ((v18[1] - *v18) >> 3));
  }
  uint64_t v24 = 1;
LABEL_31:
  v37.__locale_ = (std::locale::__imp *)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  return v24;
}

void sub_2242044F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, std::locale a17)
{
  a16 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::swap_vertex_fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[37] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  std::string::size_type vertex_field_id = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&v11, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::string::size_type v6 = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = 0;
  if (!v12)
  {
    v14[0] = &v13;
    v14[1] = &v12;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(turi::sframe ***)(a1 + 64);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  while (v8 != v9)
  {
    turi::sframe::swap_columns(v8, vertex_field_id, v6, (uint64_t)v14);
    turi::sframe::operator=((uint64_t)v8, (uint64_t)v14);
    turi::sframe::~sframe((turi::sframe *)v14);
    uint64_t v8 = (turi::sframe *)((char *)v8 + 296);
  }
}

void sub_2242046C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::swap_edge_fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  std::string::size_type edge_field_id = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&v11, 0, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::string::size_type v6 = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = 0;
  if (!v12)
  {
    uint64_t v14 = &v13;
    unint64_t v15 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v7 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v14);
  uint64_t v8 = *(turi::sframe **)v7;
  uint64_t v9 = *(turi::sframe **)(v7 + 8);
  while (v8 != v9)
  {
    turi::sframe::swap_columns(v8, edge_field_id, v6, (uint64_t)&v14);
    turi::sframe::operator=((uint64_t)v8, (uint64_t)&v14);
    turi::sframe::~sframe((turi::sframe *)&v14);
    uint64_t v8 = (turi::sframe *)((char *)v8 + 296);
  }
}

void sub_224204884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::sgraph::get_edge_field_id(uint64_t a1, unsigned __int8 **a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v12 = v4;
  unint64_t v13 = a3;
  if (v4 <= a3)
  {
    uint64_t v10 = &v13;
    std::string v11 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v12 = v4;
  unint64_t v13 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    uint64_t v10 = &v13;
    std::string v11 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  uint64_t v10 = (void *)a3;
  std::string v11 = a4;
  uint64_t v6 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v10);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(*(void *)v6 + 40), *(void *)(*(void *)v6 + 48), a2);
  if (v8 == *(void *)(v7 + 48))
  {
    uint64_t v10 = a2;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)(v7 + 40)) >> 3);
}

void turi::sgraph::rename_vertex_fields(uint64_t a1, long long **a2, void *a3)
{
  std::string __p = 0;
  std::string v31 = 0;
  v32[0] = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        v29.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
      }
      unint64_t vertex_field_id = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&v29, 0);
      unint64_t v10 = vertex_field_id;
      std::string v11 = v31;
      if ((unint64_t)v31 >= v32[0])
      {
        unint64_t v13 = (char *)__p;
        uint64_t v14 = (v31 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v32[0] - (void)__p;
        if ((uint64_t)(v32[0] - (void)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v32, v17);
          unint64_t v13 = (char *)__p;
          std::string v11 = v31;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (unint64_t *)&v18[8 * v14];
        unint64_t *v19 = v10;
        unint64_t v12 = (char *)(v19 + 1);
        while (v11 != v13)
        {
          unint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *--uint64_t v19 = v20;
        }
        std::string __p = v19;
        std::string v31 = v12;
        v32[0] = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)std::string v31 = vertex_field_id;
        unint64_t v12 = v11 + 8;
      }
      std::string v31 = v12;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = 0;
  if (!v33)
  {
    v32[1] = &v34;
    void v32[2] = &v33;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v21 = *(uint64_t **)(a1 + 64);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (*v21 != v23)
  {
    unint64_t v25 = *a2;
    uint64_t v24 = a2[1];
    do
    {
      BOOL v26 = v24 == v25;
      uint64_t v24 = v25;
      if (!v26)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          turi::sframe::set_column_name(v22, *((void *)__p + v28++), (std::string *)(*a3 + v27));
          unint64_t v25 = *a2;
          uint64_t v24 = a2[1];
          v27 += 24;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)*a2) >> 3));
      }
      v22 += 296;
    }
    while (v22 != v23);
  }
  if (__p)
  {
    std::string v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_224204BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::rename_edge_fields(uint64_t a1, long long **a2, void *a3)
{
  std::string __p = 0;
  std::string v31 = 0;
  unint64_t v32 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        v29.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
      }
      unint64_t edge_field_id = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&v29, 0, 0);
      unint64_t v10 = edge_field_id;
      std::string v11 = v31;
      if (v31 >= v32)
      {
        unint64_t v13 = (char *)__p;
        uint64_t v14 = (v31 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v32 - (unsigned char *)__p;
        if ((v32 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v17);
          unint64_t v13 = (char *)__p;
          std::string v11 = v31;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (unint64_t *)&v18[8 * v14];
        unint64_t *v19 = v10;
        unint64_t v12 = (char *)(v19 + 1);
        while (v11 != v13)
        {
          unint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *--uint64_t v19 = v20;
        }
        std::string __p = v19;
        std::string v31 = v12;
        unint64_t v32 = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)std::string v31 = edge_field_id;
        unint64_t v12 = v11 + 8;
      }
      std::string v31 = v12;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  uint64_t v35 = *(void *)(a1 + 32);
  uint64_t v36 = 0;
  if (!v35)
  {
    uint64_t v33 = &v36;
    uint64_t v34 = &v35;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v21 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v33);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (*v21 != v23)
  {
    unint64_t v25 = *a2;
    uint64_t v24 = a2[1];
    do
    {
      BOOL v26 = v24 == v25;
      uint64_t v24 = v25;
      if (!v26)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          turi::sframe::set_column_name(v22, *((void *)__p + v28++), (std::string *)(*a3 + v27));
          unint64_t v25 = *a2;
          uint64_t v24 = a2[1];
          v27 += 24;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)*a2) >> 3));
      }
      v22 += 296;
    }
    while (v22 != v23);
  }
  if (__p)
  {
    std::string v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_224204E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<turi::flexible_type>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_224204F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::parallel_save_sframes(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v25 = a3;
  memset(&v24, 0, sizeof(v24));
  uint64_t v4 = a1[1];
  if (v4 == *a1)
  {
    unint64_t v17 = 0x14C1BACF914C1BADLL * ((v4 - *a1) >> 3);
    uint64_t v16 = a1[1];
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      a1 = (uint64_t *)turi::dir_archive::get_next_write_prefix(*(turi::dir_archive **)(a2 + 8), (unsigned __int8 *)__p);
      std::vector<std::string>::pointer end = v24.__end_;
      if (v24.__end_ >= v24.__end_cap_.__value_)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24.__end_ - (char *)v24.__begin_) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v24.__end_cap_;
        if (v11) {
          unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v24.__end_cap_, v11);
        }
        else {
          unint64_t v12 = 0;
        }
        unint64_t v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        long long v14 = *(_OWORD *)__p;
        v13->__r_.__value_.__r.__words[2] = v27;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        __p[1] = 0;
        unint64_t v27 = 0;
        __p[0] = 0;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v24, &__v);
        uint64_t v15 = v24.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v24.__end_ = v15;
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        v24.__end_->__r_.__value_.__r.__words[2] = v27;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v24.__end_ = end + 1;
      }
      ++v6;
      uint64_t v16 = *v3;
      uint64_t v4 = v3[1];
      unint64_t v17 = 0x14C1BACF914C1BADLL * ((v4 - *v3) >> 3);
    }
    while (v6 < v17);
  }
  v23[0] = &v24;
  v23[1] = &v25;
  v23[2] = v3;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)a1);
  uint64_t v19 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v19);
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v19 > 1)
  {
    uint64_t v21 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__v, v21);
    double v22 = (double)v17 / (double)(unint64_t)v19;
    unint64_t v27 = (unint64_t)(v22 * (double)0 + 0.0);
    unint64_t v28 = (unint64_t)(v22 * (double)1uLL + 0.0);
    __p[0] = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1}>(turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0)::stored_vtable
           + 1;
    __p[1] = v23;
    turi::parallel_task_queue::launch((uint64_t)&__v, (uint64_t *)__p);
  }
  if (v4 != v16) {
    turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()((uint64_t)v23, 0);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_22420528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__split_buffer<std::string> *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__pa,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::sgraph::save(turi::sgraph *this, turi::oarchive *a2)
{
  uint64_t v4 = (void *)((char *)this + 24);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v5)
    {
      size_t v35 = 2 * v5 + 16;
      *((void *)a2 + 5) = v35;
      uint64_t v36 = (char **)*((void *)a2 + 2);
      if (v36)
      {
        unint64_t v6 = *v36;
        size_t v37 = v36[1] - *v36;
        BOOL v38 = v35 >= v37;
        std::vector<char>::size_type v39 = v35 - v37;
        if (v39 != 0 && v38)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v39);
          unint64_t v6 = (char *)**((void **)a2 + 2);
        }
        else if (!v38)
        {
          v36[1] = &v6[v35];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v35, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      unint64_t v6 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v6[*((void *)a2 + 4)] = *v4;
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v7)
    {
      size_t v40 = 2 * v7 + 16;
      *((void *)a2 + 5) = v40;
      long long v41 = (char **)*((void *)a2 + 2);
      if (v41)
      {
        long long v8 = *v41;
        size_t v42 = v41[1] - *v41;
        BOOL v43 = v40 >= v42;
        std::vector<char>::size_type v44 = v40 - v42;
        if (v44 != 0 && v43)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v44);
          long long v8 = (char *)**((void **)a2 + 2);
        }
        else if (!v43)
        {
          v41[1] = &v8[v40];
        }
      }
      else
      {
        long long v8 = (char *)malloc_type_realloc(*((void **)a2 + 3), v40, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v8;
    }
    else
    {
      long long v8 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v8[*((void *)a2 + 4)] = *((void *)this + 4);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v9 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v9)
    {
      size_t v45 = 2 * v9 + 16;
      *((void *)a2 + 5) = v45;
      int v46 = (char **)*((void *)a2 + 2);
      if (v46)
      {
        unint64_t v10 = *v46;
        size_t v47 = v46[1] - *v46;
        BOOL v48 = v45 >= v47;
        std::vector<char>::size_type v49 = v45 - v47;
        if (v49 != 0 && v48)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v49);
          unint64_t v10 = (char *)**((void **)a2 + 2);
        }
        else if (!v48)
        {
          v46[1] = &v10[v45];
        }
      }
      else
      {
        unint64_t v10 = (char *)malloc_type_realloc(*((void **)a2 + 3), v45, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v10;
    }
    else
    {
      unint64_t v10 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v10[*((void *)a2 + 4)] = *((void *)this + 5);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v11 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v11)
    {
      size_t v50 = 2 * v11 + 16;
      *((void *)a2 + 5) = v50;
      unint64_t v51 = (char **)*((void *)a2 + 2);
      if (v51)
      {
        unint64_t v12 = *v51;
        size_t v52 = v51[1] - *v51;
        BOOL v53 = v50 >= v52;
        std::vector<char>::size_type v54 = v50 - v52;
        if (v54 != 0 && v53)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v54);
          unint64_t v12 = (char *)**((void **)a2 + 2);
        }
        else if (!v53)
        {
          v51[1] = &v12[v50];
        }
      }
      else
      {
        unint64_t v12 = (char *)malloc_type_realloc(*((void **)a2 + 3), v50, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v12;
    }
    else
    {
      unint64_t v12 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v12[*((void *)a2 + 4)] = *((void *)this + 6);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v13 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v13)
    {
      size_t v55 = 2 * v13 + 2;
      *((void *)a2 + 5) = v55;
      uint64_t v56 = (void *)*((void *)a2 + 2);
      if (v56)
      {
        long long v14 = (unsigned char *)*v56;
        size_t v57 = v56[1] - *v56;
        BOOL v58 = v55 >= v57;
        std::vector<char>::size_type v59 = v55 - v57;
        if (v59 != 0 && v58)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v59);
          long long v14 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v58)
        {
          v56[1] = &v14[v55];
        }
      }
      else
      {
        long long v14 = malloc_type_realloc(*((void **)a2 + 3), v55, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v14;
    }
    else
    {
      long long v14 = (unsigned char *)*((void *)a2 + 3);
    }
    v14[(*((void *)a2 + 4))++] = *((unsigned char *)this + 56);
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this);
  uint64_t v15 = (uint64_t *)*((void *)this + 8);
  for (unint64_t i = (uint64_t *)*((void *)this + 9); v15 != i; v15 += 3)
  {
    uint64_t v60 = 0x14C1BACF914C1BADLL * ((v15[1] - *v15) >> 3);
    if (*(void *)a2)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v17 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + 8 > v17)
      {
        size_t v19 = 2 * v17 + 16;
        *((void *)a2 + 5) = v19;
        unint64_t v20 = (char **)*((void *)a2 + 2);
        if (v20)
        {
          uint64_t v18 = *v20;
          size_t v21 = v20[1] - *v20;
          BOOL v22 = v19 >= v21;
          std::vector<char>::size_type v23 = v19 - v21;
          if (v23 != 0 && v22)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v23);
            uint64_t v18 = (char *)**((void **)a2 + 2);
          }
          else if (!v22)
          {
            v20[1] = &v18[v19];
          }
        }
        else
        {
          uint64_t v18 = (char *)malloc_type_realloc(*((void **)a2 + 3), v19, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v18;
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 3);
      }
      *(void *)&v18[*((void *)a2 + 4)] = v60;
      *((void *)a2 + 4) += 8;
    }
    turi::parallel_save_sframes(v15, (uint64_t)a2, 0);
  }
  std::vector<std::string> v24 = (turi::sgraph *)*((void *)this + 11);
  if (v24 != (turi::sgraph *)((char *)this + 96))
  {
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)a2, (void *)v24 + 4);
      uint64_t v61 = 0x14C1BACF914C1BADLL * ((uint64_t)(*((void *)v24 + 7) - *((void *)v24 + 6)) >> 3);
      if (*(void *)a2)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v25 = *((void *)a2 + 5);
        if (*((void *)a2 + 4) + 8 > v25)
        {
          size_t v30 = 2 * v25 + 16;
          *((void *)a2 + 5) = v30;
          std::string v31 = (char **)*((void *)a2 + 2);
          if (v31)
          {
            BOOL v26 = *v31;
            size_t v32 = v31[1] - *v31;
            BOOL v33 = v30 >= v32;
            std::vector<char>::size_type v34 = v30 - v32;
            if (v34 != 0 && v33)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v34);
              BOOL v26 = (char *)**((void **)a2 + 2);
            }
            else if (!v33)
            {
              v31[1] = &v26[v30];
            }
          }
          else
          {
            BOOL v26 = (char *)malloc_type_realloc(*((void **)a2 + 3), v30, 0xF6EA6B1uLL);
          }
          *((void *)a2 + 3) = v26;
        }
        else
        {
          BOOL v26 = (char *)*((void *)a2 + 3);
        }
        *(void *)&v26[*((void *)a2 + 4)] = v61;
        *((void *)a2 + 4) += 8;
      }
      turi::parallel_save_sframes((uint64_t *)v24 + 6, (uint64_t)a2, 0);
      unint64_t v27 = (turi::sgraph *)*((void *)v24 + 1);
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          unint64_t v27 = *(turi::sgraph **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v28 = (turi::sgraph *)*((void *)v24 + 2);
          BOOL v29 = *(void *)v28 == (void)v24;
          std::vector<std::string> v24 = v28;
        }
        while (!v29);
      }
      std::vector<std::string> v24 = v28;
    }
    while (v28 != (turi::sgraph *)((char *)this + 96));
  }
}

void turi::sgraph::load(turi::sgraph *this, turi::iarchive *a2)
{
  turi::sgraph::clear(this);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    *((void *)this + 3) = *(void *)(v4 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  unint64_t v5 = (unint64_t *)((char *)this + 32);
  uint64_t v6 = *((void *)a2 + 2);
  if (v6)
  {
    unint64_t *v5 = *(void *)(v6 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *((void *)a2 + 2);
  if (v7)
  {
    *((void *)this + 5) = *(void *)(v7 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v8 = *((void *)a2 + 2);
  if (v8)
  {
    *((void *)this + 6) = *(void *)(v8 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v9 = *((void *)a2 + 2);
  if (v9) {
    *((unsigned char *)this + 56) = *(unsigned char *)(v9 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this);
  if (*((void *)this + 4))
  {
    unint64_t v10 = 0;
    do
    {
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(a2, (uint64_t *)&v16);
      std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100]((uint64_t *)this + 8, (uint64_t)&v16);
      v15[0] = (void **)&v16;
      std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](v15);
      ++v10;
    }
    while (v10 < *v5);
    if (*v5)
    {
      unint64_t v11 = 0;
      unint64_t v12 = (uint64_t **)((char *)this + 88);
      do
      {
        unint64_t v13 = 0;
        do
        {
          v15[0] = 0;
          v15[1] = 0;
          long long v16 = 0uLL;
          uint64_t v17 = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)a2, v15);
          turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(a2, (uint64_t *)&v16);
          uint64_t v18 = v15;
          long long v14 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v12, (unint64_t *)v15, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
          std::vector<turi::sframe>::__vdeallocate((void *)v14 + 6);
          v14[3] = v16;
          *((void *)v14 + 8) = v17;
          uint64_t v17 = 0;
          long long v16 = 0uLL;
          size_t v19 = (void **)&v16;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v19);
          ++v13;
        }
        while (v13 < *v5);
        ++v11;
      }
      while (v11 < *v5);
    }
  }
}

void sub_224205B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::sgraph::fetch_vid_hash_map(turi::sgraph *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_224205E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  uint64_t v30 = *(void *)(v28 - 104);
  *(void *)(v28 - 104) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  std::string v31 = *(std::__shared_weak_count **)(v28 - 88);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  size_t v32 = *(std::__shared_weak_count **)(v27 + 8);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sgraph::reorder_and_add_new_columns(uint64_t a1, const void ***a2, void *a3)
{
  v23[37] = *(void ***)MEMORY[0x263EF8340];
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v20, *a2, a2[1]);
  uint64_t v6 = *(const void ***)(a1 + 40);
  uint64_t v7 = *(const void ***)(a1 + 48);
  while (v6 != v7)
  {
    if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v20, v6))
    {
      uint64_t v14 = 0;
      goto LABEL_19;
    }
    v6 += 3;
  }
  memset(v19, 0, sizeof(v19));
  uint64_t v8 = *a2;
  if (a2[1] == *a2)
  {
LABEL_16:
    turi::sframe::select_columns((uint64_t *)a1, a2, (uint64_t)v23);
    turi::sframe::operator=(a1, (uint64_t)v23);
    turi::sframe::~sframe((turi::sframe *)v23);
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      char v18 = 0;
      char v18 = *(unsigned char *)(*a3 + v10);
      if (!turi::sframe::contains_column(a1, (unsigned __int8 **)&v8[v9]))
      {
        if (*(unsigned char *)(a1 + 288)) {
          unint64_t v13 = *(void ***)(a1 + 32);
        }
        else {
          unint64_t v13 = 0;
        }
        v23[0] = v13;
        int v16 = 1;
        std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,void>((uint64_t)&v22, (uint64_t)&turi::FLEX_UNDEFINED, (uint64_t *)v23, &v16);
      }
      uint64_t v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), (unsigned __int8 **)&v8[v9]);
      if (v11 == *(void *)(a1 + 48))
      {
        uint64_t v17 = &v8[v9];
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      char v12 = turi::sframe::column_type((turi::sframe *)a1, 0xAAAAAAAAAAAAAAABLL * ((v11 - *(void *)(a1 + 40)) >> 3));
      if (v18 != v12) {
        break;
      }
      ++v10;
      uint64_t v8 = *a2;
      v9 += 3;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2)) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = 0;
  }
  v23[0] = (void **)v19;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v23);
LABEL_19:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v20, v21);
  return v14;
}

void sub_224206188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a15;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::union_columns(turi::sgraph *this, const void ***a2, turi::sframe *a3)
{
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v67, *((const void ***)this + 5), *((const void ***)this + 6));
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v65, a2[5], a2[6]);
  unint64_t v5 = v67;
  if (v67 == v68)
  {
LABEL_19:
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, *((long long **)this + 5), *((long long **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
    std::vector<turi::flex_type_enum>::vector(&v60, *((void *)this + 3));
    if (*((void *)this + 3))
    {
      unint64_t v15 = 0;
      do
      {
        char v16 = turi::sframe::column_type(this, v15);
        *((unsigned char *)v60 + v15++) = v16;
      }
      while (v15 < *((void *)this + 3));
    }
    if (a2[3])
    {
      unint64_t v17 = 0;
      do
      {
        char v18 = a2[5];
        if (0xAAAAAAAAAAAAAAABLL * (a2[6] - v18) <= v17) {
          turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
        }
        size_t v19 = &v18[3 * v17];
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v19, (std::string::size_type)v19[1]);
        }
        else
        {
          long long v20 = *(_OWORD *)v19;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v19[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        }
        char v21 = turi::sframe::column_type((turi::sframe *)a2, v17);
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v67, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          std::string::size_type size = (_OWORD *)v63.__r_.__value_.__l.__size_;
          if (v63.__r_.__value_.__l.__size_ >= v63.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v63, (long long *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v63.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v63.__r_.__value_.__l.__size_ + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *std::string::size_type size = v23;
            }
            std::string::size_type v24 = (std::string::size_type)size + 24;
          }
          v63.__r_.__value_.__l.__size_ = v24;
          unint64_t v25 = v61;
          if (v61 >= v62)
          {
            unint64_t v27 = (unint64_t)v60;
            uint64_t v28 = v61 - (unsigned char *)v60;
            uint64_t v29 = v61 - (unsigned char *)v60 + 1;
            if (v29 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = v62 - (unsigned char *)v60;
            if (2 * (v62 - (unsigned char *)v60) > (unint64_t)v29) {
              uint64_t v29 = 2 * v30;
            }
            if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v31 = v29;
            }
            if (v31) {
              size_t v32 = (char *)operator new(v31);
            }
            else {
              size_t v32 = 0;
            }
            BOOL v33 = &v32[v28];
            std::vector<char>::size_type v34 = &v32[v28];
            *std::vector<char>::size_type v34 = v21;
            BOOL v26 = v34 + 1;
            if (v25 != (char *)v27)
            {
              size_t v35 = &v25[~v27];
              do
              {
                char v36 = *--v25;
                (v35--)[(void)v32] = v36;
              }
              while (v25 != (char *)v27);
              BOOL v33 = v32;
            }
            uint64_t v60 = v33;
            uint64_t v61 = v26;
            timeval v62 = &v32[v31];
            if (v27) {
              operator delete((void *)v27);
            }
          }
          else
          {
            *uint64_t v61 = v21;
            BOOL v26 = v25 + 1;
          }
          uint64_t v61 = v26;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v17;
      }
      while (v17 < (unint64_t)a2[3]);
    }
    if (turi::sgraph::reorder_and_add_new_columns((uint64_t)this, (const void ***)&v63, &v60)) {
      uint64_t v37 = turi::sgraph::reorder_and_add_new_columns((uint64_t)a2, (const void ***)&v63, &v60);
    }
    else {
      uint64_t v37 = 0;
    }
    if (v60)
    {
      uint64_t v61 = (char *)v60;
      operator delete(v60);
    }
    uint64_t v60 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  }
  else
  {
    while (1)
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v65, (const void **)v5 + 4))
      {
        uint64_t v6 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)this + 5), *((void *)this + 6), (unsigned __int8 **)v5 + 4);
        if (v6 == *((void *)this + 6))
        {
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        unsigned int v7 = turi::sframe::column_type(this, 0xAAAAAAAAAAAAAAABLL * ((v6 - *((void *)this + 5)) >> 3));
        uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)a2[5], (uint64_t)a2[6], (unsigned __int8 **)v5 + 4);
        if ((const void **)v8 == a2[6])
        {
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        unsigned int v9 = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)a2[5]) >> 3));
        unsigned int v10 = v9;
        BOOL v11 = v7 == 7 || v9 == 7;
        if (!v11 && v7 != v9) {
          break;
        }
      }
      unint64_t v13 = v5[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (char **)v13;
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (char **)v5[2];
          BOOL v11 = *v14 == (char *)v5;
          unint64_t v5 = v14;
        }
        while (!v11);
      }
      unint64_t v5 = v14;
      if (v14 == v68) {
        goto LABEL_19;
      }
    }
    BOOL v38 = (int *)global_logger();
    if (v38[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v38)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      std::vector<char>::size_type v39 = (file_logger *)global_logger();
      started = file_logger::start_stream(v39, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "union_columns", 1426, 1);
      long long v41 = pthread_getspecific(*((void *)started + 74));
      if (v41 && *((unsigned char *)v41 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Column type does not match for field : ", 39);
      }
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v64, v5[4], (std::string::size_type)v5[5]);
      }
      else {
        std::string v64 = *(std::string *)(v5 + 4);
      }
      uint64_t v42 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v64);
      BOOL v43 = pthread_getspecific(*(void *)(v42 + 592));
      if (v43 && *((unsigned char *)v43 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)" ", 1);
      }
      if (v7 > 9) {
        std::vector<char>::size_type v44 = "undefined";
      }
      else {
        std::vector<char>::size_type v44 = off_2646D7020[v7];
      }
      size_t v45 = (char *)pthread_getspecific(*(void *)(v42 + 592));
      if (v45)
      {
        if (v45[280])
        {
          int v46 = v45 + 16;
          size_t v47 = strlen(v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v44, v47);
          size_t v48 = strlen(v44);
          if (v48)
          {
            if (v44[v48 - 1] == 10) {
              file_logger::stream_flush((file_logger *)v42);
            }
          }
        }
      }
      std::vector<char>::size_type v49 = pthread_getspecific(*(void *)(v42 + 592));
      if (v49 && *((unsigned char *)v49 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)"!=", 2);
      }
      if (v10 > 9) {
        size_t v50 = "undefined";
      }
      else {
        size_t v50 = off_2646D7020[v10];
      }
      unint64_t v51 = (char *)pthread_getspecific(*(void *)(v42 + 592));
      if (v51)
      {
        if (v51[280])
        {
          size_t v52 = v51 + 16;
          size_t v53 = strlen(v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v50, v53);
          size_t v54 = strlen(v50);
          if (v54)
          {
            if (v50[v54 - 1] == 10) {
              file_logger::stream_flush((file_logger *)v42);
            }
          }
        }
      }
      size_t v55 = pthread_getspecific(*(void *)(v42 + 592));
      if (v55)
      {
        if (*((unsigned char *)v55 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(v55[2] - 24) + 16));
          uint64_t v56 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v42);
          if (*(_DWORD *)(v42 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v37 = 0;
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v65, v66);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v67, v68[0]);
  return v37;
}

void sub_2242068C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,char *a30)
{
  std::locale::~locale(&a19);
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a29, a30);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v30 - 120, *(char **)(v30 - 112));
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vid_type != flex_type_enum::UNDEFINED", 37);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 1454, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224206A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"src_vid_type != flex_type_enum::UNDEFINED", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 1492, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224206C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupid", 7);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unsigned int v10 = (void *)std::ostream::operator<<();
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 284, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224206F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 8);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = *(void **)(a1 + 8);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          char v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          char v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v10 = *(void **)(a1 + 8);
        if (v10)
        {
          BOOL v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  return a1;
}

unint64_t turi::hilbert_index_to_coordinate(unint64_t this, unint64_t a2)
{
  if (!this && a2 == 1) {
    return 0;
  }
  if (a2 <= 1) {
    turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  if ((a2 & (a2 - 1)) != 0) {
    turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  char v3 = 2 * __clz(__rbit64(a2));
  unsigned int v4 = (1431655765 << v3) | this;
  unint64_t v5 = (this >> 1) & 0x55555555;
  unint64_t v6 = ((v4 & 0x55555555) + v5) ^ 0x55555555 ^ ((((v4 & 0x55555555) + v5) ^ 0x55555555) >> 2);
  unint64_t v7 = v6 ^ (v6 >> 4) ^ ((v6 ^ (v6 >> 4)) >> 8);
  int v8 = v4 & 0x55555555 & ((v7 >> 16) ^ v7) ^ (((v7 >> 16) ^ v7) >> 1) & 0x55555555;
  uint64_t v9 = (v4 ^ v8 ^ (v5 | (2 * v8))) & ~(-1 << v3);
  uint64_t v10 = ((v9 ^ (v9 >> 1)) & 0x22222222 | (2
                                                                    * ((v9 ^ (v9 >> 1)) & 0x22222222))) ^ v9;
  uint64_t v11 = ((v10 ^ (v10 >> 2)) & 0xC0C0C0C | (4
                                                                     * ((v10 ^ (v10 >> 2)) & 0xC0C0C0C))) ^ v10;
  uint64_t v12 = ((v11 ^ (v11 >> 4)) & 0xF000F0 | (16
                                                                      * ((v11 ^ (v11 >> 4)) & 0xF000F0))) ^ v11;
  uint64_t v13 = (unsigned __int16)(v12 ^ (v12 >> 8)) & 0xFF00;
  return ((v13 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)BYTE1(v13) << 16)) ^ v12) >> 16;
}

turi::thread_pool *turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(turi::thread_pool *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t *)a1;
  uint64_t v14 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v12 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v13, v12);
    operator new();
  }
  while (v5 != a2)
  {
    uint64_t v10 = *v5;
    uint64_t v11 = v5[1];
    v5 += 2;
    uint64_t result = (turi::thread_pool *)std::function<void ()(std::pair<unsigned long,unsigned long>)>::operator()(a3, v10, v11);
  }
  return result;
}

void sub_2242074D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", "operator()", 34, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224207690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_power_of_2(n)", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", "operator()", 35, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224207890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)> const&,std::random_access_iterator_tag)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  unsigned int v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2) {
        uint64_t result = MEMORY[0x22A614FA0](result, 0x1060C40F6749743);
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246DE3E8 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246DE3E8 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)> const&,std::random_access_iterator_tag)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(void *)(*(void *)result + 8);
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v2 != v3)
  {
    uint64_t v4 = **(void **)(v1 + 24);
    unint64_t v5 = (uint64_t *)(v4 + 16 * v3);
    unint64_t v6 = (uint64_t *)(v4 + 16 * v2);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      v6 += 2;
      uint64_t result = std::function<void ()(std::pair<unsigned long,unsigned long>)>::operator()(*(void *)v1, v7, v8);
    }
    while (v6 != v5);
  }
  return result;
}

void turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition", 9);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 332, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224207CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sframe>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<turi::sframe>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    long long v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    void v6[3] = v8;
    *((void *)v6 + 8) = *(void *)(a3 + 32);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::pair<unsigned long,turi::flexible_type>::~pair(v4 - 24);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::pair<unsigned long,turi::flexible_type>::~pair(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::unordered_set<turi::flexible_type>::unordered_set<std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a1, v5, (uint64_t)v5);
      v5 += 16;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_224208270(_Unwind_Exception *a1)
{
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D771558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D771558;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 1;
  }
LABEL_2:
  if (*(unsigned char *)(v3 + 20) == 7) {
    goto LABEL_3;
  }
  uint64_t v6 = (unsigned __int8 *)(*a2 + 16 * *(void *)v3);
  switch(*(unsigned char *)(v3 + 20))
  {
    case 0:
      switch(v6[12])
      {
        case 0u:
          if (*(void *)v6 != *(void *)(v3 + 8)) {
            return 0;
          }
          goto LABEL_3;
        case 1u:
          double v7 = *(double *)v6;
          uint64_t v8 = *(void *)(v3 + 8);
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)(v3 + 8) != (uint64_t)(*(void *)v6 << 8) >> 8 || *((_DWORD *)v6 + 2)) {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(v6[12])
      {
        case 0u:
          double v7 = *(double *)(v3 + 8);
          uint64_t v8 = *(void *)v6;
LABEL_65:
          double v60 = (double)v8;
          goto LABEL_66;
        case 1u:
          double v7 = *(double *)v6;
          double v60 = *(double *)(v3 + 8);
LABEL_66:
          if (v7 != v60) {
            return 0;
          }
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v61 = vabdd_f64((double)*((int *)v6 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v6 << 8) >> 8), *(double *)(v3 + 8));
          goto LABEL_74;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v9 = v6[12];
      if (v9 != 2)
      {
        if (v9 > 9 || v9 == 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      double v10 = *(double *)v6;
      int v11 = *(char *)(*(void *)v6 + 31);
      size_t v12 = *(unsigned __int8 *)(*(void *)v6 + 31);
      if (v11 < 0) {
        size_t v13 = *(void *)(*(void *)&v10 + 16);
      }
      else {
        size_t v13 = v12;
      }
      uint64_t v62 = *(void *)(v3 + 8);
      if (*(char *)(v62 + 31) < 0) {
        uint64_t v63 = *(void *)(v62 + 16);
      }
      else {
        uint64_t v63 = *(unsigned __int8 *)(v62 + 31);
      }
      if (v13 != v63) {
        return 0;
      }
      std::string v64 = (unsigned __int8 *)(*(void *)&v10 + 8);
      if ((v12 & 0x80) != 0) {
        std::string v64 = *(unsigned __int8 **)v64;
      }
      timeval v65 = (unsigned __int8 *)(v62 + 8);
      if ((*(unsigned char *)(v62 + 31) & 0x80) != 0)
      {
        timeval v65 = *(unsigned __int8 **)v65;
        if ((v12 & 0x80) == 0) {
          goto LABEL_88;
        }
      }
      else if ((v12 & 0x80) == 0)
      {
LABEL_88:
        if (!v13) {
          goto LABEL_3;
        }
        while (*v64 == *v65)
        {
          ++v64;
          ++v65;
          if (!--v13) {
            goto LABEL_3;
          }
        }
        return 0;
      }
      if (!memcmp(v64, v65, v13)) {
        goto LABEL_3;
      }
      return 0;
    case 3:
      unsigned int v14 = v6[12];
      if (v14 == 3)
      {
        uint64_t v17 = *(void *)v6 + 8;
        char v15 = *(double **)v17;
        char v16 = *(double **)(v17 + 8);
        unint64_t v18 = ((uint64_t)v16 - *(void *)v17) >> 3;
        size_t v19 = *(double **)(*(void *)(v3 + 8) + 8);
        if (v18 == (uint64_t)(*(void *)(*(void *)(v3 + 8) + 16) - (void)v19) >> 3)
        {
          if (v16 == v15) {
            goto LABEL_3;
          }
          if (v18 <= 1) {
            unint64_t v18 = 1;
          }
          while (*v15 == *v19)
          {
            ++v19;
            ++v15;
            if (!--v18) {
              goto LABEL_3;
            }
          }
        }
      }
      else if (v14 > 9 || v14 == 3)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 4:
      unsigned int v20 = v6[12];
      if (v20 == 4)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(void *)v6 + 8), (void *)(*(void *)(v3 + 8) + 8)))goto LABEL_3; {
      }
        }
      else if (v20 > 9 || v20 == 4)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 5:
      unsigned int v21 = v6[12];
      if (v21 == 5)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(void *)v6 + 8), (uint64_t **)(*(void *)(v3 + 8) + 8)))
        {
          goto LABEL_3;
        }
      }
      else if (v21 > 9 || v21 == 5)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 6:
      switch(v6[12])
      {
        case 0u:
          if (*(void *)v6 != (uint64_t)(*(void *)(v3 + 8) << 8) >> 8 || *(_DWORD *)(v3 + 16)) {
            return 0;
          }
          goto LABEL_3;
        case 1u:
          double v61 = vabdd_f64(*(double *)v6, (double)*(int *)(v3 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(v3 + 8) << 8) >> 8));
LABEL_74:
          if (v61 >= 0.0000005) {
            return 0;
          }
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)(v3 + 8) ^ *(void *)v6) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)v6 + 2) != *(_DWORD *)(v3 + 16))
          {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 8:
      unsigned int v22 = v6[12];
      if (v22 != 8)
      {
        if (v22 > 9 || v22 == 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      uint64_t result = turi::image_type::operator==(*(void *)v6 + 8, *(void *)(v3 + 8) + 8);
      if (result) {
        goto LABEL_3;
      }
      return result;
    case 9:
      unsigned int v24 = v6[12];
      if (v24 != 9)
      {
        if (v24 >= 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      uint64_t v25 = *(void *)(v3 + 8);
      BOOL v26 = *(void **)v6;
      if (v25 == *(void *)v6) {
        goto LABEL_3;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), v25 + 8)) {
        return 0;
      }
      uint64_t v28 = (char *)v26[3];
      unint64_t v27 = (char *)v26[4];
      uint64_t v29 = v27 - v28;
      if (v27 == v28) {
        goto LABEL_3;
      }
      if (!v26[1]) {
        goto LABEL_3;
      }
      uint64_t v30 = 1;
      do
      {
        uint64_t v31 = *(void *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30) {
        goto LABEL_3;
      }
      uint64_t v72 = 0;
      std::vector<unsigned long>::vector(&v73, v29 >> 3, &v72);
      uint64_t result = v73;
      uint64_t v32 = v74;
      uint64_t v33 = **(void **)(v25 + 8);
      uint64_t v34 = v74 - v73;
      unint64_t v35 = (v74 - v73) >> 3;
      unint64_t v36 = v35 - 1;
      if (v35 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = (v74 - v73) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v32 == result)
    {
      uint64_t v45 = 0;
      double v46 = *(double *)(*(void *)v26[1] + 8 * v26[9]);
    }
    else
    {
      uint64_t v38 = 0;
      std::vector<char>::size_type v39 = (uint64_t *)v26[6];
      size_t v40 = (uint64_t *)result;
      uint64_t v41 = v37;
      do
      {
        uint64_t v43 = *v40++;
        uint64_t v42 = v43;
        uint64_t v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      uint64_t v45 = 0;
      double v46 = *(double *)(*(void *)v26[1] + 8 * (v26[9] + v38));
      size_t v47 = *(uint64_t **)(v25 + 48);
      size_t v48 = (uint64_t *)result;
      uint64_t v49 = v37;
      do
      {
        uint64_t v51 = *v48++;
        uint64_t v50 = v51;
        uint64_t v52 = *v47++;
        v45 += v52 * v50;
        --v49;
      }
      while (v49);
    }
    if (v46 != *(double *)(v33 + 8 * (*(void *)(v25 + 72) + v45))) {
      break;
    }
    uint64_t v53 = v35;
    uint64_t v54 = v35 - 1;
    if (v34 >= 1)
    {
      uint64_t v55 = v26[3];
      unint64_t v56 = *(void *)(result + 8 * v36) + 1;
      *(void *)(result + 8 * v36) = v56;
      unint64_t v57 = (v34 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v54 = v35 - 1;
      if (v56 >= *(void *)(v55 + 8 * v36))
      {
        do
        {
          *(void *)(result + v57 + 8) = 0;
          if (v54 <= 0) {
            goto LABEL_63;
          }
          --v54;
          unint64_t v58 = *(void *)(result + v57) + 1;
          *(void *)(result + v57) = v58;
          unint64_t v59 = *(void *)(v55 + v57);
          v57 -= 8;
        }
        while (v58 >= v59);
        uint64_t v53 = 1;
      }
      else
      {
        uint64_t v53 = 1;
        uint64_t v54 = v35 - 1;
      }
    }
    if (!v53 || v54 < 0)
    {
      if (result)
      {
LABEL_63:
        uint64_t v74 = result;
        operator delete((void *)result);
      }
LABEL_3:
      v3 += 24;
      if (v3 == v4) {
        return 1;
      }
      goto LABEL_2;
    }
  }
  if (result)
  {
    uint64_t v74 = result;
    operator delete((void *)result);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_224208CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D7715E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7715E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(*(void **)(a1 + 8), (unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 16))) != 0;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D771668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(*(void **)(a1 + 8), (unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 16)));
  if (result)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return (unsigned __int8 *)v5();
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224209078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224209278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    double v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    uint64_t v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1}>(turi::sframe const&)::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2242094D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(char *__src@<X4>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    do
    {
      BOOL v9 = std::vector<unsigned long>::insert(a4, __src, v6 + 32);
      double v10 = (char *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          double v11 = v10;
          double v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          double v11 = (char *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      __src = v9 + 8;
      uint64_t v6 = v11;
    }
    while (v11 != a3);
    uint64_t v6 = a3;
  }
  *a5 = v6;
  a5[1] = (char *)a4;
  a5[2] = __src;
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v29[4] = *MEMORY[0x263EF8340];
  if (**(void **)a1 != -1)
  {
    source = (turi::random::generator *)turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(void **)a1 + a2);
  }
  unint64_t v5 = *(void *)(**(void **)(a1 + 8) + 8 * a2);
  if (v5 < (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 16))(**(void **)(a1 + 16)))
  {
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 16) + 32))(&v16);
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 16) + 40))(&v13);
    (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 24) + 32))(v27);
    turi::sframe_iterator::sframe_iterator((turi::sframe_iterator *)&v10, (const turi::sframe_iterator *)&v16);
    turi::sframe_iterator::sframe_iterator((turi::sframe_iterator *)&v7, (const turi::sframe_iterator *)&v13);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v27);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v28);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v29);
    std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v20, *(void *)(a1 + 32));
    std::copy_if[abi:ne180100]<turi::sframe_iterator,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>>(&v10, &v7, (uint64_t)v21, (uint64_t)v20, (uint64_t)v24);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v26);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v25);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v20);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v23);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v21);
    size_t v19 = (void **)&v9;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    size_t v19 = (void **)&v8;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v19);
    size_t v19 = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    size_t v19 = (void **)&v11;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v19);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v29);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v28);
    uint64_t v6 = (void ***)std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v27);
    v27[0] = (void **)&v15;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v6);
    v27[0] = (void **)&v14;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v27);
    v27[0] = (void **)&v18;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v27);
    v27[0] = (void **)&v17;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v27);
  }
}

void sub_22420985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a50);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a54);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a9);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a19);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v54 - 168));
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a29);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a39);
  _Unwind_Resume(a1);
}

void sub_2242098D0()
{
}

void sub_2242098D8()
{
}

void sub_2242098E0()
{
}

void sub_2242098E8()
{
}

void sub_2242098F0()
{
}

uint64_t std::copy_if[abi:ne180100]<turi::sframe_iterator,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>>@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  while (*a1 != *a2 || a1[4] != a2[4] || a1[5] != a2[5])
  {
    uint64_t v10 = turi::sframe_iterator::operator*(a1);
    uint64_t v11 = *(void *)(a4 + 24);
    if (!v11) {
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v10))
    {
      uint64_t v12 = turi::sframe_iterator::operator*(a1);
      uint64_t v13 = *(void *)(a3 + 24);
      if (!v13) {
LABEL_12:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v12);
    }
    turi::sframe_iterator::operator++(a1);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a5, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a5 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a5 + 64, a3 + 64);
}

turi::sframe_iterator *turi::sframe_iterator::sframe_iterator(turi::sframe_iterator *this, const turi::sframe_iterator *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__init_with_size[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>((void *)this + 1, *((void *)a2 + 1), *((void *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 4));
  long long v4 = *((_OWORD *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + 6) = v5;
  *((_OWORD *)this + 2) = v4;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((void *)this + 7, *((uint64_t **)a2 + 7), *((uint64_t **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 4);
  return this;
}

void sub_224209AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<turi::sarray_iterator<turi::flexible_type>>::__init_with_size[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224209B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = a2 + v5;
      uint64_t v7 = a4 + v5;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v5);
      *(void *)(a4 + v5 + 16) = 0;
      uint64_t v8 = (atomic_ullong *volatile *)(a4 + v5 + 16);
      *(_DWORD *)(v7 + 24) = 0;
      *(unsigned char *)(v7 + 28) = 0;
      if (a4 != a2)
      {
        uint64_t v9 = *(atomic_ullong **)(v6 + 16);
        *(void *)(a4 + v5 + 21) = *(void *)(v6 + 21);
        *uint64_t v8 = v9;
        LODWORD(v9) = *(unsigned __int8 *)(v6 + 28);
        *(unsigned char *)(v7 + 28) = (_BYTE)v9;
        BOOL v10 = v9 > 9;
        int v11 = (1 << (char)v9) & 0x33C;
        if (!v10 && v11 != 0) {
          atomic_fetch_add(*v8, 1uLL);
        }
      }
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
      v5 += 48;
    }
    while (v6 + 48 != a3);
    return a4 + v5;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246DE9F7 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246DE9F7 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

uint64_t std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D771708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D771708;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 1;
  }
LABEL_2:
  if (*(unsigned char *)(v3 + 20) == 7) {
    goto LABEL_3;
  }
  uint64_t v6 = (unsigned __int8 *)(*a2 + 16 * *(void *)v3);
  switch(*(unsigned char *)(v3 + 20))
  {
    case 0:
      switch(v6[12])
      {
        case 0u:
          if (*(void *)v6 != *(void *)(v3 + 8)) {
            return 0;
          }
          goto LABEL_3;
        case 1u:
          double v7 = *(double *)v6;
          uint64_t v8 = *(void *)(v3 + 8);
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)(v3 + 8) != (uint64_t)(*(void *)v6 << 8) >> 8 || *((_DWORD *)v6 + 2)) {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(v6[12])
      {
        case 0u:
          double v7 = *(double *)(v3 + 8);
          uint64_t v8 = *(void *)v6;
LABEL_65:
          double v60 = (double)v8;
          goto LABEL_66;
        case 1u:
          double v7 = *(double *)v6;
          double v60 = *(double *)(v3 + 8);
LABEL_66:
          if (v7 != v60) {
            return 0;
          }
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v61 = vabdd_f64((double)*((int *)v6 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v6 << 8) >> 8), *(double *)(v3 + 8));
          goto LABEL_74;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v9 = v6[12];
      if (v9 != 2)
      {
        if (v9 > 9 || v9 == 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      double v10 = *(double *)v6;
      int v11 = *(char *)(*(void *)v6 + 31);
      size_t v12 = *(unsigned __int8 *)(*(void *)v6 + 31);
      if (v11 < 0) {
        size_t v13 = *(void *)(*(void *)&v10 + 16);
      }
      else {
        size_t v13 = v12;
      }
      uint64_t v62 = *(void *)(v3 + 8);
      if (*(char *)(v62 + 31) < 0) {
        uint64_t v63 = *(void *)(v62 + 16);
      }
      else {
        uint64_t v63 = *(unsigned __int8 *)(v62 + 31);
      }
      if (v13 != v63) {
        return 0;
      }
      std::string v64 = (unsigned __int8 *)(*(void *)&v10 + 8);
      if ((v12 & 0x80) != 0) {
        std::string v64 = *(unsigned __int8 **)v64;
      }
      timeval v65 = (unsigned __int8 *)(v62 + 8);
      if ((*(unsigned char *)(v62 + 31) & 0x80) != 0)
      {
        timeval v65 = *(unsigned __int8 **)v65;
        if ((v12 & 0x80) == 0) {
          goto LABEL_88;
        }
      }
      else if ((v12 & 0x80) == 0)
      {
LABEL_88:
        if (!v13) {
          goto LABEL_3;
        }
        while (*v64 == *v65)
        {
          ++v64;
          ++v65;
          if (!--v13) {
            goto LABEL_3;
          }
        }
        return 0;
      }
      if (!memcmp(v64, v65, v13)) {
        goto LABEL_3;
      }
      return 0;
    case 3:
      unsigned int v14 = v6[12];
      if (v14 == 3)
      {
        uint64_t v17 = *(void *)v6 + 8;
        uint64_t v15 = *(double **)v17;
        uint64_t v16 = *(double **)(v17 + 8);
        unint64_t v18 = ((uint64_t)v16 - *(void *)v17) >> 3;
        size_t v19 = *(double **)(*(void *)(v3 + 8) + 8);
        if (v18 == (uint64_t)(*(void *)(*(void *)(v3 + 8) + 16) - (void)v19) >> 3)
        {
          if (v16 == v15) {
            goto LABEL_3;
          }
          if (v18 <= 1) {
            unint64_t v18 = 1;
          }
          while (*v15 == *v19)
          {
            ++v19;
            ++v15;
            if (!--v18) {
              goto LABEL_3;
            }
          }
        }
      }
      else if (v14 > 9 || v14 == 3)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 4:
      unsigned int v20 = v6[12];
      if (v20 == 4)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(void *)v6 + 8), (void *)(*(void *)(v3 + 8) + 8)))goto LABEL_3; {
      }
        }
      else if (v20 > 9 || v20 == 4)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 5:
      unsigned int v21 = v6[12];
      if (v21 == 5)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(void *)v6 + 8), (uint64_t **)(*(void *)(v3 + 8) + 8)))
        {
          goto LABEL_3;
        }
      }
      else if (v21 > 9 || v21 == 5)
      {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return 0;
    case 6:
      switch(v6[12])
      {
        case 0u:
          if (*(void *)v6 != (uint64_t)(*(void *)(v3 + 8) << 8) >> 8 || *(_DWORD *)(v3 + 16)) {
            return 0;
          }
          goto LABEL_3;
        case 1u:
          double v61 = vabdd_f64(*(double *)v6, (double)*(int *)(v3 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(v3 + 8) << 8) >> 8));
LABEL_74:
          if (v61 >= 0.0000005) {
            return 0;
          }
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)(v3 + 8) ^ *(void *)v6) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)v6 + 2) != *(_DWORD *)(v3 + 16))
          {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 8:
      unsigned int v22 = v6[12];
      if (v22 != 8)
      {
        if (v22 > 9 || v22 == 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      uint64_t result = turi::image_type::operator==(*(void *)v6 + 8, *(void *)(v3 + 8) + 8);
      if (result) {
        goto LABEL_3;
      }
      return result;
    case 9:
      unsigned int v24 = v6[12];
      if (v24 != 9)
      {
        if (v24 >= 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      uint64_t v25 = *(void *)(v3 + 8);
      BOOL v26 = *(void **)v6;
      if (v25 == *(void *)v6) {
        goto LABEL_3;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), v25 + 8)) {
        return 0;
      }
      uint64_t v28 = (char *)v26[3];
      unint64_t v27 = (char *)v26[4];
      uint64_t v29 = v27 - v28;
      if (v27 == v28) {
        goto LABEL_3;
      }
      if (!v26[1]) {
        goto LABEL_3;
      }
      uint64_t v30 = 1;
      do
      {
        uint64_t v31 = *(void *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30) {
        goto LABEL_3;
      }
      uint64_t v72 = 0;
      std::vector<unsigned long>::vector(&v73, v29 >> 3, &v72);
      uint64_t result = v73;
      uint64_t v32 = v74;
      uint64_t v33 = **(void **)(v25 + 8);
      uint64_t v34 = v74 - v73;
      unint64_t v35 = (v74 - v73) >> 3;
      unint64_t v36 = v35 - 1;
      if (v35 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = (v74 - v73) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v32 == result)
    {
      uint64_t v45 = 0;
      double v46 = *(double *)(*(void *)v26[1] + 8 * v26[9]);
    }
    else
    {
      uint64_t v38 = 0;
      std::vector<char>::size_type v39 = (uint64_t *)v26[6];
      size_t v40 = (uint64_t *)result;
      uint64_t v41 = v37;
      do
      {
        uint64_t v43 = *v40++;
        uint64_t v42 = v43;
        uint64_t v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      uint64_t v45 = 0;
      double v46 = *(double *)(*(void *)v26[1] + 8 * (v26[9] + v38));
      size_t v47 = *(uint64_t **)(v25 + 48);
      size_t v48 = (uint64_t *)result;
      uint64_t v49 = v37;
      do
      {
        uint64_t v51 = *v48++;
        uint64_t v50 = v51;
        uint64_t v52 = *v47++;
        v45 += v52 * v50;
        --v49;
      }
      while (v49);
    }
    if (v46 != *(double *)(v33 + 8 * (*(void *)(v25 + 72) + v45))) {
      break;
    }
    uint64_t v53 = v35;
    uint64_t v54 = v35 - 1;
    if (v34 >= 1)
    {
      uint64_t v55 = v26[3];
      unint64_t v56 = *(void *)(result + 8 * v36) + 1;
      *(void *)(result + 8 * v36) = v56;
      unint64_t v57 = (v34 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v54 = v35 - 1;
      if (v56 >= *(void *)(v55 + 8 * v36))
      {
        do
        {
          *(void *)(result + v57 + 8) = 0;
          if (v54 <= 0) {
            goto LABEL_63;
          }
          --v54;
          unint64_t v58 = *(void *)(result + v57) + 1;
          *(void *)(result + v57) = v58;
          unint64_t v59 = *(void *)(v55 + v57);
          v57 -= 8;
        }
        while (v58 >= v59);
        uint64_t v53 = 1;
      }
      else
      {
        uint64_t v53 = 1;
        uint64_t v54 = v35 - 1;
      }
    }
    if (!v53 || v54 < 0)
    {
      if (result)
      {
LABEL_63:
        uint64_t v74 = result;
        operator delete((void *)result);
      }
LABEL_3:
      v3 += 24;
      if (v3 == v4) {
        return 1;
      }
      goto LABEL_2;
    }
  }
  if (result)
  {
    uint64_t v74 = result;
    operator delete((void *)result);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D771788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v10 = (uint64_t)&(*a2)[2 * **(void **)(a1 + 8)];
  uint64_t v11 = 0;
  switch(*(unsigned char *)(v10 + 12))
  {
    case 0:
      uint64_t v11 = *(void *)v10;
      goto LABEL_25;
    case 1:
      uint64_t v11 = (uint64_t)*(double *)v10;
      goto LABEL_25;
    case 2:
      uint64_t v13 = *(void *)v10;
      unsigned int v14 = (char **)(*(void *)v10 + 8);
      size_t __idx = 0;
      uint64_t v15 = (char *)v14;
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v15 = *v14;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      uint64_t v11 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v75[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v16 = *(void *)(v13 + 16);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(v13 + 31);
      }
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::locale v69 = std::string::append(&v78, " cannot be interpreted as an integer");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v75[0] = (void *)v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v12 = *(void *)v10;
      __p[1] = 0;
      v75[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v17 = *(void *)v10;
      __p[1] = 0;
      v75[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      goto LABEL_24;
    case 5:
      uint64_t v18 = *(void *)v10;
      __p[1] = 0;
      v75[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      goto LABEL_24;
    case 6:
      uint64_t v11 = (uint64_t)(*(void *)v10 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v19 = *(void *)v10;
      unsigned int v20 = *(atomic_uint **)(v19 + 16);
      __p[0] = *(void **)(v19 + 8);
      __p[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit(v20 + 2, 1u, memory_order_relaxed);
      }
      long long v21 = *(_OWORD *)(v19 + 24);
      long long v22 = *(_OWORD *)(v19 + 56);
      long long v76 = *(_OWORD *)(v19 + 40);
      long long v77 = v22;
      *(_OWORD *)uint64_t v75 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v10 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v76 + 1))
      {
        *(void *)&long long v77 = *((void *)&v76 + 1);
        operator delete(*((void **)&v76 + 1));
      }
      if (v75[0])
      {
        v75[1] = v75[0];
        operator delete(v75[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v11 = 0;
LABEL_25:
      uint64_t v23 = (uint64_t)&(*a2)[2 * **(void **)(a1 + 16)];
      uint64_t v24 = 0;
      switch(*(unsigned char *)(v23 + 12))
      {
        case 0:
          uint64_t v24 = *(void *)v23;
          goto LABEL_49;
        case 1:
          uint64_t v24 = (uint64_t)*(double *)v23;
          goto LABEL_49;
        case 2:
          uint64_t v26 = *(void *)v23;
          unint64_t v27 = (char **)(*(void *)v23 + 8);
          size_t __idx = 0;
          uint64_t v28 = (char *)v27;
          if (*(char *)(v26 + 31) < 0) {
            uint64_t v28 = *v27;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v28);
          uint64_t v24 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v75[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v26 + 31) < 0) {
            uint64_t v29 = *(void *)(v26 + 16);
          }
          else {
            uint64_t v29 = *(unsigned __int8 *)(v26 + 31);
          }
          if (__idx != v29)
          {
            char v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v72 = std::string::append(&v78, " cannot be interpreted as an integer");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v75[0] = (void *)v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v71, (const std::string *)__p);
            __cxa_throw(v71, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_49;
        case 3:
          uint64_t v25 = *(void *)v23;
          __p[1] = 0;
          v75[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(void *)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_48;
        case 4:
          uint64_t v30 = *(void *)v23;
          __p[1] = 0;
          v75[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
          goto LABEL_48;
        case 5:
          uint64_t v31 = *(void *)v23;
          __p[1] = 0;
          v75[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
          goto LABEL_48;
        case 6:
          uint64_t v24 = (uint64_t)(*(void *)v23 << 8) >> 8;
          goto LABEL_49;
        case 7:
          goto LABEL_49;
        case 8:
          uint64_t v32 = *(void *)v23;
          uint64_t v33 = *(atomic_uint **)(v32 + 16);
          __p[0] = *(void **)(v32 + 8);
          __p[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit(v33 + 2, 1u, memory_order_relaxed);
          }
          long long v34 = *(_OWORD *)(v32 + 24);
          long long v35 = *(_OWORD *)(v32 + 56);
          long long v76 = *(_OWORD *)(v32 + 40);
          long long v77 = v35;
          *(_OWORD *)uint64_t v75 = v34;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          goto LABEL_48;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v23 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v76 + 1))
          {
            *(void *)&long long v77 = *((void *)&v76 + 1);
            operator delete(*((void **)&v76 + 1));
          }
          if (v75[0])
          {
            v75[1] = v75[0];
            operator delete(v75[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_48:
          uint64_t v24 = 0;
LABEL_49:
          uint64_t v36 = *a3 + 16 * v11;
          uint64_t v37 = *a5 + 16 * **(void **)(a1 + 8);
          if (v36 != v37)
          {
            switch(*(unsigned char *)(v37 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v37;
                  if (!*(void *)v37) {
                    goto LABEL_82;
                  }
                  if (*((char *)v38 + 31) < 0) {
                    operator delete((void *)v38[1]);
                  }
                  atomic_ullong *volatile v39 = v38;
                  uint64_t v40 = 0x1012C404EF22A49;
                  goto LABEL_81;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v37;
                  if (!*(void *)v37) {
                    goto LABEL_82;
                  }
                  size_t v48 = (void *)v47[1];
                  if (v48)
                  {
                    v47[2] = (atomic_ullong)v48;
                    operator delete(v48);
                  }
                  atomic_ullong *volatile v39 = v47;
                  uint64_t v40 = 0x1080C409938AC02;
                  goto LABEL_81;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v37;
                  if (!*(void *)v37) {
                    goto LABEL_82;
                  }
                  __p[0] = v41 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_76;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v37;
                  if (!*(void *)v37) {
                    goto LABEL_82;
                  }
                  __p[0] = v41 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_76:
                  atomic_ullong *volatile v39 = v41;
                  uint64_t v40 = 0x1020C405E66F15BLL;
                  goto LABEL_81;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v49 = *(atomic_ullong *volatile *)v37;
                  if (!*(void *)v37) {
                    goto LABEL_82;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v49 + 2);
                  atomic_ullong *volatile v39 = v49;
                  unsigned int v46 = -235920773;
                  goto LABEL_80;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)v37;
                  if (*(void *)v37)
                  {
                    uint64_t v43 = (void *)v42[6];
                    if (v43)
                    {
                      v42[7] = (atomic_ullong)v43;
                      operator delete(v43);
                    }
                    uint64_t v44 = (void *)v42[3];
                    if (v44)
                    {
                      v42[4] = (atomic_ullong)v44;
                      operator delete(v44);
                    }
                    uint64_t v45 = (std::__shared_weak_count *)v42[2];
                    if (v45) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                    }
                    atomic_ullong *volatile v39 = v42;
                    unsigned int v46 = 2071181815;
LABEL_80:
                    uint64_t v40 = v46 | 0x1030C4000000000;
LABEL_81:
                    MEMORY[0x22A614FA0](v39, v40);
                  }
LABEL_82:
                  *(void *)uint64_t v37 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v50 = *(void *)v36;
            *(void *)(v37 + 5) = *(void *)(v36 + 5);
            *(void *)uint64_t v37 = v50;
            unsigned int v51 = *(unsigned __int8 *)(v36 + 12);
            *(unsigned char *)(v37 + 12) = v51;
            if (v51 <= 9 && ((1 << v51) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v37, 1uLL);
            }
          }
          uint64_t v52 = *a4 + 16 * v24;
          uint64_t v53 = *a5 + 16 * **(void **)(a1 + 16);
          if (v52 != v53)
          {
            switch(*(unsigned char *)(v53 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v53;
                  if (!*(void *)v53) {
                    goto LABEL_119;
                  }
                  if (*((char *)v54 + 31) < 0) {
                    operator delete((void *)v54[1]);
                  }
                  atomic_ullong *volatile v55 = v54;
                  uint64_t v56 = 0x1012C404EF22A49;
                  goto LABEL_118;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v63 = *(atomic_ullong *volatile *)v53;
                  if (!*(void *)v53) {
                    goto LABEL_119;
                  }
                  std::string v64 = (void *)v63[1];
                  if (v64)
                  {
                    v63[2] = (atomic_ullong)v64;
                    operator delete(v64);
                  }
                  atomic_ullong *volatile v55 = v63;
                  uint64_t v56 = 0x1080C409938AC02;
                  goto LABEL_118;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
                  if (!*(void *)v53) {
                    goto LABEL_119;
                  }
                  __p[0] = v57 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_113;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
                  if (!*(void *)v53) {
                    goto LABEL_119;
                  }
                  __p[0] = v57 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_113:
                  atomic_ullong *volatile v55 = v57;
                  uint64_t v56 = 0x1020C405E66F15BLL;
                  goto LABEL_118;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v53;
                  if (!*(void *)v53) {
                    goto LABEL_119;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v65 + 2);
                  atomic_ullong *volatile v55 = v65;
                  unsigned int v62 = -235920773;
                  goto LABEL_117;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v53;
                  if (*(void *)v53)
                  {
                    unint64_t v59 = (void *)v58[6];
                    if (v59)
                    {
                      v58[7] = (atomic_ullong)v59;
                      operator delete(v59);
                    }
                    double v60 = (void *)v58[3];
                    if (v60)
                    {
                      v58[4] = (atomic_ullong)v60;
                      operator delete(v60);
                    }
                    double v61 = (std::__shared_weak_count *)v58[2];
                    if (v61) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                    }
                    atomic_ullong *volatile v55 = v58;
                    unsigned int v62 = 2071181815;
LABEL_117:
                    uint64_t v56 = v62 | 0x1030C4000000000;
LABEL_118:
                    MEMORY[0x22A614FA0](v55, v56);
                  }
LABEL_119:
                  *(void *)uint64_t v53 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v66 = *(void *)v52;
            *(void *)(v53 + 5) = *(void *)(v52 + 5);
            *(void *)uint64_t v53 = v66;
            unsigned int v67 = *(unsigned __int8 *)(v52 + 12);
            *(unsigned char *)(v53 + 12) = v67;
            if (v67 <= 9 && ((1 << v67) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v53, 1uLL);
            }
          }
          break;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_132;
      }
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_132:
      __break(1u);
      break;
  }
}

void sub_22420AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::target_type()
{
}

void *std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 32);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D771818;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  long long v5 = (turi::sgraph *)a1[4];
  v38[0] = 0;
  v38[1] = 0;
  v36[1] = 0;
  uint64_t v37 = (uint64_t *)v38;
  long long v35 = (uint64_t *)v36;
  v36[0] = 0;
  if (v3 != v4)
  {
    uint64_t v6 = v3;
    do
    {
      double v7 = (void *)a1[1];
      *(void *)&long long v42 = *v6;
      *((void *)&v42 + 1) = *v7;
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v37, (unint64_t *)&v42, &v42);
      uint64_t v8 = (void *)a1[2];
      *(void *)&long long v42 = v6[1];
      *((void *)&v42 + 1) = *v8;
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v37, (unint64_t *)&v42, &v42);
      v6 += 2;
    }
    while (v6 != v4);
  }
  for (unint64_t i = *(void **)(a1[3] + 16); i; unint64_t i = (void *)*i)
  {
    if (std::__tree<std::pair<unsigned long,unsigned long>>::__count_unique<std::pair<unsigned long,unsigned long>>((uint64_t)&v37, i + 2))
    {
      uint64_t v10 = std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>((uint64_t)&v37, i + 2);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(&v37, v10);
      operator delete(v10);
    }
    else
    {
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v35, i + 2, (_OWORD *)i + 1);
    }
  }
  uint64_t v11 = v35;
  if (v35 != (uint64_t *)v36)
  {
    do
    {
      uint64_t v12 = (void *)a1[3];
      uint64_t v13 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v12, v11 + 4);
      std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::erase(v12, v13);
      unsigned int v14 = (uint64_t *)v11[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unsigned int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v11[2];
          BOOL v16 = *v15 == (void)v11;
          uint64_t v11 = v15;
        }
        while (!v16);
      }
      uint64_t v11 = v15;
    }
    while (v15 != (uint64_t *)v36);
  }
  uint64_t v17 = v37;
  if (v37 == (uint64_t *)v38)
  {
    long long v22 = (uint64_t *)v38;
  }
  else
  {
    do
    {
      uint64_t v18 = a1[3];
      *(void *)&long long v42 = v17 + 4;
      uint64_t v19 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v18, v17 + 4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v42);
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>((uint64_t)(v19 + 4), 0, 0, 0);
      unsigned int v20 = (uint64_t *)v17[1];
      if (v20)
      {
        do
        {
          long long v21 = v20;
          unsigned int v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          long long v21 = (uint64_t *)v17[2];
          BOOL v16 = *v21 == (void)v17;
          uint64_t v17 = v21;
        }
        while (!v16);
      }
      uint64_t v17 = v21;
    }
    while (v21 != (uint64_t *)v38);
    long long v22 = v37;
  }
  uint64_t v23 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&__p, v22, v38);
  uint64_t v25 = __p;
  uint64_t v24 = v34;
  uint64_t v26 = a1[3];
  v32[0] = &__p;
  v32[1] = v26;
  void v32[2] = v5;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v23);
  int v28 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v28);
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v28 > 1)
  {
    uint64_t v30 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v42, v30);
    double v31 = (double)(unint64_t)((v24 - v25) >> 4) / (double)(unint64_t)v28;
    unint64_t v40 = (unint64_t)(v31 * (double)0 + 0.0);
    unint64_t v41 = (unint64_t)(v31 * (double)1uLL + 0.0);
    *(void *)&long long v39 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1})::stored_vtable
                    + 1;
    *((void *)&v39 + 1) = v32;
    turi::parallel_task_queue::launch((uint64_t)&v42, (uint64_t *)&v39);
  }
  if (v24 != v25)
  {
    long long v39 = *(_OWORD *)__p;
    turi::sgraph::get_vertex_ids(v5, v39, *((unint64_t *)&v39 + 1), (uint64_t *)&v42);
  }
  if (__p)
  {
    long long v34 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v35, v36[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v37, v38[0]);
  if (v3) {
    operator delete(v3);
  }
}

void sub_22420B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a29);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a15, a16);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a18, a19);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

uint64_t *std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__tree<std::pair<unsigned long,unsigned long>>::__count_unique<std::pair<unsigned long,unsigned long>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    uint64_t result = 1;
    while (1)
    {
      unint64_t v6 = v2[4];
      if (v3 >= v6)
      {
        if (v6 < v3) {
          goto LABEL_7;
        }
        unint64_t v7 = v2[5];
        if (v4 >= v7) {
          break;
        }
      }
LABEL_8:
      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return 0;
      }
    }
    if (v7 >= v4) {
      return result;
    }
LABEL_7:
    ++v2;
    goto LABEL_8;
  }
  return 0;
}

void *std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (v3[5] < v5) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }
      else
      {
        unint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    unint64_t v3 = (void *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v9 = v7[4];
  if (v6 < v9 || v9 >= v6 && v5 < v7[5]) {
    return v2;
  }
  return v7;
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = __p + 4;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v4 = v3 ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3 ^ *a2;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a2[1];
  unint64_t v8 = v7 ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7 ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v7) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  unint64_t i = operator new(0x38uLL);
  *unint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }
  *unint64_t i = *v15;
  *uint64_t v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22420BD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_22420BE64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22420BE6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint8x8_t v5 = a2;
    do
    {
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint8x8_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint8x8_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

void *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_22420BF50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(_OWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *uint64_t v3 = *((_OWORD *)a2 + 2);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          uint8x8_t v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint8x8_t v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void turi::sgraph::get_vertex_ids(turi::sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v17 = a2;
  unint64_t v16 = *((void *)this + 3);
  if (v16 > a2)
  {
    unint64_t v17 = a3;
    unint64_t v16 = *((void *)this + 4);
    if (v16 > a3)
    {
      uint64_t v6 = *(void *)(*((void *)this + 8) + 24 * a3);
      std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME[0]);
      turi::sframe::select_column(v6 + 296 * a2, (unsigned __int8 **)&__p, &v15);
      if (v14 < 0) {
        operator delete(__p);
      }
      if (*(unsigned char *)(v15 + 248) && (uint64_t v7 = *(uint64_t **)(v15 + 80), (v8 = *(void *)(v15 + 88) - (void)v7) != 0))
      {
        unint64_t v9 = 0;
        unint64_t v10 = v8 >> 3;
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        do
        {
          uint64_t v11 = *v7++;
          v9 += v11;
          --v10;
        }
        while (v10);
      }
      else
      {
        unint64_t v9 = 0;
      }
      std::vector<turi::flexible_type>::reserve(a4, v9);
      turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(v15);
    }
    std::string __p = &v17;
    uint64_t v13 = &v16;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  std::string __p = &v17;
  uint64_t v13 = &v16;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
}

void sub_22420C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_partition(unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition", 9);
  uint8x8_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 343, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420C2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZZNKS_6sgraph9get_edgesERKNSt3__16vectorINS_13flexible_typ"
                                        "eENS2_9allocatorIS4_EEEES9_RKNS2_3mapINS2_12basic_stringIcNS2_11char_traitsIcEEN"
                                        "S5_IcEEEES4_NS2_4lessISF_EENS5_INS2_4pairIKSF_S4_EEEEEEmmENK3$_2clENS3_INSI_ImmE"
                                        "ENS5_ISQ_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZZNKS_6sgraph9get_edgesERKNSt3__16vectorINS_13flexible_typeENS2_9allocatorIS4_EEEES9_RKNS2_3mapINS2_12basic_stringIcNS2_11char_traitsIcEENS5_IcEEEES4_NS2_4lessISF_EENS5_INS2_4pairIKSF_S4_EEEEEEmmENK3$_2clENS3_INSI_ImmEENS5_ISQ_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = (void ***)result;
    uint64_t v3 = *(turi::sgraph **)(*result + 16);
    long long v5 = *(_OWORD *)(***v2 + 16 * v1);
    turi::sgraph::get_vertex_ids(v3, v5, *((unint64_t *)&v5 + 1), (uint64_t *)&v4);
  }
  return result;
}

void sub_22420C564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26D7718C8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7718C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  long long v5 = *(turi::sgraph **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  unint64_t v19 = *a2;
  uint64_t v20 = *v7;
  if (!std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v6, &v19))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  uint64_t v8 = *(void **)(a1 + 8);
  }
  unint64_t v9 = *(uint64_t **)(a1 + 24);
  unint64_t v19 = v4;
  uint64_t v20 = *v9;
  if (!std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v8, &v19))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  unint64_t v10 = (const turi::sframe *)turi::sgraph::edge_partition(v5, v3, v4, **(void **)(a1 + 16), **(unint64_t ***)(a1 + 24));
  }
  turi::sframe::sframe((turi::sframe *)&v19, v10);
  std::vector<turi::flex_type_enum>::vector(&v16, v21);
  if (v21)
  {
    for (unint64_t i = 0; i < v21; ++i)
    {
      char v12 = turi::sframe::column_type((turi::sframe *)&v19, i);
      *((unsigned char *)v16 + i) = v12;
    }
  }
  uint64_t v13 = v16;
  *((unsigned char *)v16 + **(void **)(a1 + 40)) = *((unsigned char *)v5 + 56);
  v13[**(void **)(a1 + 48)] = *((unsigned char *)v5 + 56);
  turi::sframe::sframe((turi::sframe *)v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  assert_msg(v23, "Invalid SFrame");
  if (v24)
  {
    char v14 = (uint64_t (**)(void))(*(void *)v22[21] + 120);
  }
  else
  {
    if (!v21)
    {
      uint64_t v15 = 0;
LABEL_11:
      turi::sframe::open_for_write((uint64_t)v18, v22, &v16, __p, v15, 1);
    }
    char v14 = (uint64_t (**)(void))(**(void **)v22[18] + 24);
  }
  uint64_t v15 = (*v14)();
  goto LABEL_11;
}

void sub_22420CA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a10, (void *)a11);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a20);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a16);
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a26);
  turi::sframe::~sframe((turi::sframe *)&a30);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&a67);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

unint64_t turi::sgraph::edge_partition(turi::sgraph *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5 = *((void *)this + 3);
  unint64_t v10 = v5;
  unint64_t v11 = a2;
  if (v5 <= a2)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = v5;
  unint64_t v11 = a3;
  if (v5 <= a3)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  unint64_t v6 = *((void *)this + 4);
  unint64_t v10 = v6;
  unint64_t v11 = a4;
  if (v6 <= a4)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = v6;
  unint64_t v11 = (unint64_t)a5;
  if (v6 <= (unint64_t)a5)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  uint64_t v8 = (void *)a4;
  unint64_t v9 = a5;
  return *(void *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v8)+ 296 * (a3 + *((void *)this + 3) * a2);
}

{
  unint64_t v5;
  unint64_t v6;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  unint64_t v5 = *((void *)this + 3);
  unint64_t v10 = v5;
  unint64_t v11 = a2;
  if (v5 <= a2)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = v5;
  unint64_t v11 = a3;
  if (v5 <= a3)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  unint64_t v6 = *((void *)this + 4);
  unint64_t v10 = v6;
  unint64_t v11 = a4;
  if (v6 <= a4)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = v6;
  unint64_t v11 = (unint64_t)a5;
  if (v6 <= (unint64_t)a5)
  {
    uint64_t v8 = &v11;
    unint64_t v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  uint64_t v8 = (void *)a4;
  unint64_t v9 = a5;
  return *(void *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v8)+ 296 * (a3 + *((void *)this + 3) * a2);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::locale::__imp *a6)
{
  v16[10].__locale_ = a6;
  uint64_t v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_transform_if", 216, 1);
    unint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    char v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        uint64_t v13 = std::locale::use_facet(v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*((unsigned char *)a1 + 288)) {
    BOOL v14 = *((unsigned char *)a1 + 289) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()();
  }
  if (a2[288])
  {
    if (a2[289])
    {
      (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
      turi::sframe::get_reader(a1);
    }
  }
  turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()();
}

void sub_22420CF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void *boost::bind<std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v8, a1);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a4, (uint64_t)v8);
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = a3;
  return std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v8);
}

void sub_22420D05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition1", 10);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 399, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420D208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition2", 10);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 400, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 217, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420D69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 218, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22420D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    uint64_t v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>(turi::sframe &)::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_22420DAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v27[4] = *MEMORY[0x263EF8340];
  if (**(void **)a1 != -1)
  {
    source = (turi::random::generator *)turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(void **)a1 + a2);
  }
  unint64_t v5 = *(void *)(**(void **)(a1 + 8) + 8 * a2);
  if (v5 < (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 16))(**(void **)(a1 + 16)))
  {
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 16) + 32))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 16) + 40))(&v15);
    (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 24) + 32))(v24);
    while (v18 != v15 || v19[3] != v16[3] || v20 != v16[4])
    {
      uint64_t v6 = *(void *)(a1 + 32);
      char v7 = turi::sframe_iterator::operator*(&v18);
      uint64_t v8 = *(void *)(v6 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v7))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        BOOL v23 = (void **)turi::sframe_iterator::operator*(&v18);
        boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>::operator()<std::vector<turi::flexible_type>,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::rrlist1<std::vector<turi::flexible_type> const&>>(v9 + 32, v9);
        if (!v26) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 48))(v26, v14);
        BOOL v23 = (void **)v14;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
      }
      uint64_t v10 = v19[0];
      uint64_t v11 = v19[1];
      while (v10 != v11)
      {
        turi::sarray_iterator<turi::flexible_type>::operator++(v10);
        v10 += 48;
      }
      if (v20 + 1 < v21) {
        unint64_t v12 = v20 + 1;
      }
      else {
        unint64_t v12 = v21;
      }
      unint64_t v20 = v12;
    }
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v27);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v25);
    uint64_t v13 = (void ***)std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v24);
    v24[0] = (void **)&v17;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
    v24[0] = (void **)v16;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v24);
    v24[0] = (void **)&v22;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v24);
    v24[0] = (void **)v19;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v24);
  }
}

void sub_22420DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)va);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>::operator()<std::vector<turi::flexible_type>,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::rrlist1<std::vector<turi::flexible_type> const&>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
  return v3();
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246DF2F2 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246DF2F2 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

uint64_t std::__function::__value_func<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<std::unordered_set<turi::flexible_type>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_22420E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a2[1];
  unint64_t v8 = v7 ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7 ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *BOOL v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_22420E540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__assign_unique<std::pair<turi::flexible_type,turi::flexible_type> const*>(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint8x8_t v10 = v8;
    }
    else
    {
      do
      {
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)(v8 + 2), v4);
        uint8x8_t v10 = (void *)*v8;
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique(a1, (uint64_t)v8);
        v4 += 4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, (unsigned __int8 *)v4, v4);
    v4 += 4;
  }
}

void sub_22420E680(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_22420E698(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = a2 + 16;
  unint64_t v5 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), (unsigned __int8 *)(a2 + 16));
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

uint64_t std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2 + 16);
  uint64_t v5 = 5
     * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v3) | ((0x87C37B91114253D5 * v3) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
  return (5
        * (v5
         + __ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v4) | ((0x4CF5AD432745937FLL * v4) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v5;
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint8x8_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, a3))return i; {
        }
          }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    void *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(unsigned __int8 *a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 == *(void *)a2) {
            goto LABEL_94;
          }
          return 0;
        case 1u:
          double v34 = *(double *)a1;
          uint64_t v51 = *(void *)a2;
          goto LABEL_88;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && !*((_DWORD *)a1 + 2)) {
            goto LABEL_94;
          }
          return 0;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          double v34 = *(double *)a2;
          uint64_t v51 = *(void *)a1;
LABEL_88:
          double v41 = (double)v51;
          goto LABEL_89;
        case 1u:
          double v34 = *(double *)a1;
          double v41 = *(double *)a2;
          goto LABEL_89;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v62 = vabdd_f64((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8), *(double *)a2);
          goto LABEL_93;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v5 = a1[12];
      BOOL v6 = v5 - 3 >= 7 && v5 >= 2;
      if (!v6) {
        return 0;
      }
      if (v5 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v7 = *(double *)a2;
      double v8 = *(double *)a1;
      char v9 = *(unsigned char *)(*(void *)a1 + 31);
      size_t v10 = v9 < 0 ? *(void *)(*(void *)&v8 + 16) : *(unsigned __int8 *)(*(void *)a1 + 31);
      uint64_t v112 = *(char *)(*(void *)&v7 + 31) < 0
           ? *(void *)(*(void *)&v7 + 16)
           : *(unsigned __int8 *)(*(void *)&v7 + 31);
      if (v10 != v112) {
        return 0;
      }
      atomic_ullong *volatile v113 = (unsigned __int8 *)(*(void *)&v8 + 8);
      if (v9 < 0) {
        atomic_ullong *volatile v113 = *(unsigned __int8 **)v113;
      }
      uint64_t v114 = (unsigned __int8 *)(*(void *)&v7 + 8);
      if ((*(unsigned char *)(*(void *)&v7 + 31) & 0x80) != 0) {
        uint64_t v114 = *(unsigned __int8 **)v114;
      }
      if (v9 < 0)
      {
        if (memcmp(v113, v114, v10)) {
          return 0;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_94;
        }
        do
        {
          if (*v113 != *v114) {
            return 0;
          }
          ++v113;
          ++v114;
          --v10;
        }
        while (v10);
      }
      goto LABEL_94;
    case 3:
      unsigned int v52 = a1[12];
      if (v52 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v52 != 3) {
        return 0;
      }
      uint64_t v53 = *(double **)(*(void *)a1 + 8);
      atomic_ullong *volatile v54 = *(double **)(*(void *)a1 + 16);
      unint64_t v55 = v54 - v53;
      uint64_t v56 = *(double **)(*(void *)a2 + 8);
      if (v55 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v56) >> 3) {
        return 0;
      }
      if (v54 == v53) {
        goto LABEL_94;
      }
      if (v55 <= 1) {
        unint64_t v55 = 1;
      }
      while (*v53 == *v56)
      {
        ++v56;
        ++v53;
        if (!--v55) {
          goto LABEL_94;
        }
      }
      return 0;
    case 4:
      unsigned int v4 = a1[12];
      if (v4 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v126, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8)) & 1) != 0)
      {
        goto LABEL_94;
      }
      return 0;
    case 5:
      unsigned int v58 = a1[12];
      if (v58 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v58 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v126, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)a2 + 8)))
      {
        goto LABEL_94;
      }
      return 0;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8)) {
            goto LABEL_94;
          }
          return 0;
        case 1u:
          double v62 = vabdd_f64(*(double *)a1, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
LABEL_93:
          if (v62 < 0.0000005) {
            goto LABEL_94;
          }
          return 0;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8)) {
            goto LABEL_94;
          }
          return 0;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v57 = a1[12];
      if (v57 < 7 || v57 - 8 < 2) {
        return 0;
      }
      if (v57 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_94;
    case 8:
      unsigned int v59 = a1[12];
      if (v59 < 8) {
        return 0;
      }
      if (v59 != 8)
      {
        if (v59 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      }
      if (!turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8)) {
        return 0;
      }
      goto LABEL_94;
    case 9:
      unsigned int v11 = a1[12];
      if (v11 < 9) {
        return 0;
      }
      if (v11 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v12 = *(double *)a2;
      float v13 = *(void **)a1;
      if (*(void *)a2 == *(void *)a1) {
        goto LABEL_94;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v13 + 1), *(void *)&v12 + 8)) {
        return 0;
      }
      BOOL v15 = (char *)v13[3];
      float v14 = (char *)v13[4];
      uint64_t v16 = v14 - v15;
      if (v14 == v15) {
        goto LABEL_94;
      }
      if (!v13[1]) {
        goto LABEL_94;
      }
      uint64_t v17 = 1;
      do
      {
        uint64_t v18 = *(void *)v15;
        v15 += 8;
        v17 *= v18;
      }
      while (v15 != v14);
      if (!v17) {
        goto LABEL_94;
      }
      uint64_t v127 = 0;
      std::vector<unsigned long>::vector(&__p, v16 >> 3, &v127);
      BOOL v19 = (uint64_t *)__p;
      unint64_t v20 = v129;
      uint64_t v21 = **(void **)(*(void *)&v12 + 8);
      uint64_t v22 = (char *)v129 - (unsigned char *)__p;
      unint64_t v23 = ((char *)v129 - (unsigned char *)__p) >> 3;
      unint64_t v24 = v23 - 1;
      if (v23 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = ((char *)v129 - (unsigned char *)__p) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v20 == v19)
    {
      uint64_t v33 = 0;
      double v34 = *(double *)(*(void *)v13[1] + 8 * v13[9]);
    }
    else
    {
      uint64_t v26 = 0;
      char v27 = (uint64_t *)v13[6];
      int v28 = v19;
      uint64_t v29 = v25;
      do
      {
        uint64_t v31 = *v28++;
        uint64_t v30 = v31;
        uint64_t v32 = *v27++;
        v26 += v32 * v30;
        --v29;
      }
      while (v29);
      uint64_t v33 = 0;
      double v34 = *(double *)(*(void *)v13[1] + 8 * (v13[9] + v26));
      long long v35 = *(uint64_t **)(*(void *)&v12 + 48);
      uint64_t v36 = v19;
      uint64_t v37 = v25;
      do
      {
        uint64_t v39 = *v36++;
        uint64_t v38 = v39;
        uint64_t v40 = *v35++;
        v33 += v40 * v38;
        --v37;
      }
      while (v37);
    }
    double v41 = *(double *)(v21 + 8 * (*(void *)(*(void *)&v12 + 72) + v33));
    if (v34 != v41) {
      break;
    }
    uint64_t v42 = v23;
    uint64_t v43 = v23 - 1;
    if (v22 >= 1)
    {
      uint64_t v44 = v13[3];
      unint64_t v45 = v19[v24] + 1;
      v19[v24] = v45;
      unint64_t v46 = (v22 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v43 = v23 - 1;
      if (v45 >= *(void *)(v44 + 8 * v24))
      {
        while (1)
        {
          *(uint64_t *)((char *)v19 + v46 + 8) = 0;
          if (v43 <= 0) {
            break;
          }
          --v43;
          unint64_t v47 = *(uint64_t *)((char *)v19 + v46) + 1;
          *(uint64_t *)((char *)v19 + v46) = v47;
          unint64_t v48 = *(void *)(v44 + v46);
          v46 -= 8;
          if (v47 < v48)
          {
            uint64_t v42 = 1;
            goto LABEL_44;
          }
        }
        atomic_ullong *volatile v129 = v19;
        operator delete(v19);
        goto LABEL_94;
      }
      uint64_t v42 = 1;
      uint64_t v43 = v23 - 1;
    }
LABEL_44:
    ;
  }
  while ((v43 & 0x8000000000000000) == 0 && v42);
  if (v19)
  {
    atomic_ullong *volatile v129 = v19;
    double v49 = v34;
    double v50 = v41;
    operator delete(v19);
    if (v49 != v50) {
      return 0;
    }
  }
  else
  {
LABEL_89:
    if (v34 != v41) {
      return 0;
    }
  }
LABEL_94:
  switch(*(unsigned char *)(a2 + 28))
  {
    case 0:
      BOOL v60 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((void *)a1 + 2) == *(void *)(a2 + 16);
        case 1u:
          double v64 = *((double *)a1 + 2);
          uint64_t v65 = *(void *)(a2 + 16);
          return v64 == (double)v65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          return *(void *)(a2 + 16) == (uint64_t)(*((void *)a1 + 2) << 8) >> 8 && *((_DWORD *)a1 + 6) == 0;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v60 = 0;
      switch(a1[28])
      {
        case 0u:
          double v64 = *(double *)(a2 + 16);
          uint64_t v65 = *((void *)a1 + 2);
          return v64 == (double)v65;
        case 1u:
          return *((double *)a1 + 2) == *(double *)(a2 + 16);
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          double v115 = *(double *)(a2 + 16);
          double v116 = (double)*((int *)a1 + 6) / 1000000.0 + (double)((uint64_t)(*((void *)a1 + 2) << 8) >> 8);
          return vabdd_f64(v116, v115) < 0.0000005;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v66 = a1[28];
      if (v66 - 3 < 7 || v66 < 2) {
        return 0;
      }
      if (v66 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v68 = *(void *)(a2 + 16);
      uint64_t v69 = *((void *)a1 + 2);
      size_t v70 = *(char *)(v69 + 31) < 0 ? *(void *)(v69 + 16) : *(unsigned __int8 *)(v69 + 31);
      uint64_t v117 = *(char *)(v68 + 31) < 0 ? *(void *)(v68 + 16) : *(unsigned __int8 *)(v68 + 31);
      if (v70 != v117) {
        return 0;
      }
      atomic_ullong *volatile v118 = (void *)(v69 + 8);
      if ((*(unsigned char *)(v69 + 31) & 0x80) != 0) {
        atomic_ullong *volatile v118 = (void *)*v118;
      }
      uint64_t v119 = (void *)(v68 + 8);
      if ((*(unsigned char *)(v68 + 31) & 0x80) != 0) {
        uint64_t v119 = (void *)*v119;
      }
      if ((*(unsigned char *)(v69 + 31) & 0x80) != 0)
      {
        return memcmp(v118, v119, v70) == 0;
      }
      else if (v70)
      {
        size_t v120 = v70 - 1;
        do
        {
          int v122 = *(unsigned __int8 *)v118;
          atomic_ullong *volatile v118 = (void *)((char *)v118 + 1);
          int v121 = v122;
          int v124 = *(unsigned __int8 *)v119;
          uint64_t v119 = (void *)((char *)v119 + 1);
          int v123 = v124;
          BOOL v6 = v120-- != 0;
          char v125 = v6;
          BOOL v60 = v121 == v123;
        }
        while (v121 == v123 && (v125 & 1) != 0);
      }
      else
      {
        return 1;
      }
      return v60;
    case 3:
      unsigned int v71 = a1[28];
      if (v71 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v71 != 3) {
        return 0;
      }
      uint64_t v72 = *(double **)(*((void *)a1 + 2) + 8);
      long long v73 = *(double **)(*((void *)a1 + 2) + 16);
      unint64_t v74 = v73 - v72;
      uint64_t v75 = *(double **)(*(void *)(a2 + 16) + 8);
      if (v74 != (uint64_t)(*(void *)(*(void *)(a2 + 16) + 16) - (void)v75) >> 3) {
        return 0;
      }
      if (v73 == v72) {
        return 1;
      }
      if (v74 <= 1) {
        uint64_t v76 = 1;
      }
      else {
        uint64_t v76 = v73 - v72;
      }
      if (*v72 != *v75) {
        return 0;
      }
      uint64_t v77 = 1;
      do
      {
        unint64_t v78 = v77;
        if (v76 == v77) {
          break;
        }
        double v79 = v72[v77];
        double v80 = v75[v77++];
      }
      while (v79 == v80);
      return v78 >= v74;
    case 4:
      unsigned int v81 = a1[28];
      if (v81 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v81 != 4) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__p, (uint64_t *)(*((void *)a1 + 2) + 8), (void *)(*(void *)(a2 + 16) + 8));
    case 5:
      unsigned int v109 = a1[28];
      if (v109 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v109 != 5) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__p, (uint64_t **)(*((void *)a1 + 2) + 8), (uint64_t **)(*(void *)(a2 + 16) + 8));
    case 6:
      BOOL v60 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((void *)a1 + 2) == (uint64_t)(*(void *)(a2 + 16) << 8) >> 8 && *(_DWORD *)(a2 + 24) == 0;
        case 1u:
          double v116 = *((double *)a1 + 2);
          double v115 = (double)*(int *)(a2 + 24) / 1000000.0 + (double)((uint64_t)(*(void *)(a2 + 16) << 8) >> 8);
          return vabdd_f64(v116, v115) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          return ((*(void *)(a2 + 16) ^ *((void *)a1 + 2)) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 24);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v83 = a1[28];
      if (v83 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return v83 == 7;
    case 8:
      unsigned int v110 = a1[28];
      if (v110 < 8 || v110 == 9) {
        return 0;
      }
      if (v110 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return turi::image_type::operator==(*((void *)a1 + 2) + 8, *(void *)(a2 + 16) + 8);
    case 9:
      unsigned int v84 = a1[28];
      if (v84 < 9) {
        return 0;
      }
      if (v84 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v85 = *(void *)(a2 + 16);
      atomic_ullong *volatile v86 = (void *)*((void *)a1 + 2);
      if ((void *)v85 == v86) {
        return 1;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v86 + 1), v85 + 8)) {
        return 0;
      }
      unint64_t v88 = (char *)v86[3];
      unint64_t v87 = (char *)v86[4];
      uint64_t v89 = v87 - v88;
      if (v87 == v88) {
        return 1;
      }
      if (!v86[1]) {
        return 1;
      }
      uint64_t v90 = 1;
      do
      {
        uint64_t v91 = *(void *)v88;
        v88 += 8;
        v90 *= v91;
      }
      while (v88 != v87);
      if (!v90) {
        return 1;
      }
      uint64_t v127 = 0;
      std::vector<unsigned long>::vector(&__p, v89 >> 3, &v127);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    uint64_t v92 = (uint64_t *)__p;
    if (v129 == __p)
    {
      uint64_t v101 = 0;
      double v102 = *(double *)(*(void *)v86[1] + 8 * v86[9]);
    }
    else
    {
      uint64_t v93 = 0;
      unint64_t v94 = ((char *)v129 - (unsigned char *)__p) >> 3;
      atomic_ullong *volatile v95 = (uint64_t *)v86[6];
      if (v94 <= 1) {
        unint64_t v94 = 1;
      }
      uint64_t v96 = (uint64_t *)__p;
      unint64_t v97 = v94;
      do
      {
        uint64_t v99 = *v96++;
        uint64_t v98 = v99;
        uint64_t v100 = *v95++;
        v93 += v100 * v98;
        --v97;
      }
      while (v97);
      uint64_t v101 = 0;
      double v102 = *(double *)(*(void *)v86[1] + 8 * (v86[9] + v93));
      uint64_t v103 = *(uint64_t **)(v85 + 48);
      atomic_ullong *volatile v104 = (uint64_t *)__p;
      do
      {
        uint64_t v106 = *v104++;
        uint64_t v105 = v106;
        uint64_t v107 = *v103++;
        v101 += v107 * v105;
        --v94;
      }
      while (v94);
    }
    double v108 = *(double *)(**(void **)(v85 + 8) + 8 * (*(void *)(v85 + 72) + v101));
    BOOL v60 = v102 == v108;
    if (v102 != v108) {
      break;
    }
    if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v86 + 1), (uint64_t *)&__p))
    {
      uint64_t v92 = (uint64_t *)__p;
      break;
    }
  }
  if (v92)
  {
    atomic_ullong *volatile v129 = v92;
    operator delete(v92);
  }
  return v60;
}

void sub_22420F514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2))return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x30uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v9;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v16 + 2), a3);
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_22420F8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2))return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x30uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v9;
  *(void *)((char *)v16 + 21) = *(void *)(a3 + 5);
  void v16[2] = *(void *)a3;
  *((unsigned char *)v16 + 28) = *(unsigned char *)(a3 + 12);
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)((char *)v16 + 37) = *(void *)(a3 + 21);
  v16[4] = *(void *)(a3 + 16);
  *((unsigned char *)v16 + 44) = *(unsigned char *)(a3 + 28);
  *(unsigned char *)(a3 + 28) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_22420FBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x68uLL);
  *(void *)int8x8_t v2 = &unk_26D771978;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771978;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v4 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  long long v5 = *(turi::sgraph **)(a1 + 32);
  void v16[3] = v3;
  v16[4] = v4;
  BOOL v6 = *(void **)(a1 + 8);
  double v7 = *(uint64_t **)(a1 + 16);
  BOOL v19 = v4;
  uint64_t v20 = *v7;
  if (!std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v6, &v19))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  unint64_t v8 = *(void **)(a1 + 8);
  }
  unint64_t v9 = *(uint64_t **)(a1 + 24);
  BOOL v19 = v3;
  uint64_t v20 = *v9;
  if (!std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v8, &v19))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  unint64_t v10 = (const turi::sframe *)turi::sgraph::edge_partition(v5, (unint64_t)v4, (unint64_t)v3, **(void **)(a1 + 16), **(unint64_t ***)(a1 + 24));
  }
  turi::sframe::sframe((turi::sframe *)&v19, v10);
  std::vector<turi::flex_type_enum>::vector(v16, v21);
  if (v21)
  {
    for (unint64_t i = 0; i < v21; ++i)
    {
      char v12 = turi::sframe::column_type((turi::sframe *)&v19, i);
      *((unsigned char *)v16[0] + i) = v12;
    }
  }
  float v13 = v16[0];
  *((unsigned char *)v16[0] + **(void **)(a1 + 40)) = *((unsigned char *)v5 + 56);
  v13[**(void **)(a1 + 48)] = *((unsigned char *)v5 + 56);
  turi::sframe::sframe((turi::sframe *)v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  assert_msg(v23, "Invalid SFrame");
  if (v24)
  {
    float v14 = (uint64_t (**)(void))(*(void *)v22[21] + 120);
  }
  else
  {
    if (!v21)
    {
      uint64_t v15 = 0;
LABEL_11:
      turi::sframe::open_for_write((uint64_t)v18, v22, v16, __p, v15, 1);
    }
    float v14 = (uint64_t (**)(void))(**(void **)v22[18] + 24);
  }
  uint64_t v15 = (*v14)();
  goto LABEL_11;
}

void sub_224210060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x58uLL);
  *(void *)long long v2 = &unk_26D7719E8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7719E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2 + 16 * **(void **)(a1 + 8);
  uint64_t v5 = 0;
  switch(*(unsigned char *)(v2 + 12))
  {
    case 0:
      uint64_t v5 = *(void *)v2;
      goto LABEL_25;
    case 1:
      uint64_t v5 = (uint64_t)*(double *)v2;
      goto LABEL_25;
    case 2:
      uint64_t v7 = *(void *)v2;
      unint64_t v8 = (char **)(*(void *)v2 + 8);
      size_t __idx = 0;
      unint64_t v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0) {
        unint64_t v9 = *v8;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      uint64_t v5 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v10 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v10 = *(unsigned __int8 *)(v7 + 31);
      }
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v38 = std::string::append(&v43, " cannot be interpreted as an integer");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v46[0] = (void *)v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v6 = *(void *)v2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v11 = *(void *)v2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      goto LABEL_24;
    case 5:
      uint64_t v12 = *(void *)v2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      goto LABEL_24;
    case 6:
      uint64_t v5 = (uint64_t)(*(void *)v2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v13 = *(void *)v2;
      float v14 = *(atomic_uint **)(v13 + 16);
      __p[0] = *(void **)(v13 + 8);
      __p[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(v13 + 24);
      long long v16 = *(_OWORD *)(v13 + 56);
      long long v47 = *(_OWORD *)(v13 + 40);
      long long v48 = v16;
      *(_OWORD *)unint64_t v46 = v15;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v47 + 1))
      {
        *(void *)&long long v48 = *((void *)&v47 + 1);
        operator delete(*((void **)&v47 + 1));
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v5 = 0;
LABEL_25:
      uint64_t v17 = *a2 + 16 * **(void **)(a1 + 16);
      uint64_t v18 = 0;
      switch(*(unsigned char *)(v17 + 12))
      {
        case 0:
          uint64_t v18 = *(void *)v17;
          goto LABEL_49;
        case 1:
          uint64_t v18 = (uint64_t)*(double *)v17;
          goto LABEL_49;
        case 2:
          uint64_t v20 = *(void *)v17;
          size_t v21 = (char **)(*(void *)v17 + 8);
          size_t __idx = 0;
          size_t v22 = (char *)v21;
          if (*(char *)(v20 + 31) < 0) {
            size_t v22 = *v21;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v22);
          uint64_t v18 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v46[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v20 + 31) < 0) {
            uint64_t v23 = *(void *)(v20 + 16);
          }
          else {
            uint64_t v23 = *(unsigned __int8 *)(v20 + 31);
          }
          if (__idx != v23)
          {
            uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            double v41 = std::string::append(&v43, " cannot be interpreted as an integer");
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            v46[0] = (void *)v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v40, (const std::string *)__p);
            __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_49;
        case 3:
          uint64_t v19 = *(void *)v17;
          __p[1] = 0;
          v46[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v19 + 8), *(void *)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_48;
        case 4:
          uint64_t v24 = *(void *)v17;
          __p[1] = 0;
          v46[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
          goto LABEL_48;
        case 5:
          uint64_t v25 = *(void *)v17;
          __p[1] = 0;
          v46[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
          goto LABEL_48;
        case 6:
          uint64_t v18 = (uint64_t)(*(void *)v17 << 8) >> 8;
          goto LABEL_49;
        case 7:
          goto LABEL_49;
        case 8:
          uint64_t v26 = *(void *)v17;
          char v27 = *(atomic_uint **)(v26 + 16);
          __p[0] = *(void **)(v26 + 8);
          __p[1] = v27;
          if (v27) {
            atomic_fetch_add_explicit(v27 + 2, 1u, memory_order_relaxed);
          }
          long long v28 = *(_OWORD *)(v26 + 24);
          long long v29 = *(_OWORD *)(v26 + 56);
          long long v47 = *(_OWORD *)(v26 + 40);
          long long v48 = v29;
          *(_OWORD *)unint64_t v46 = v28;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          goto LABEL_48;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v17 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v47 + 1))
          {
            *(void *)&long long v48 = *((void *)&v47 + 1);
            operator delete(*((void **)&v47 + 1));
          }
          if (v46[0])
          {
            v46[1] = v46[0];
            operator delete(v46[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_48:
          uint64_t v18 = 0;
LABEL_49:
          uint64_t v30 = (uint64_t *)(**(void **)(a1 + 24) + 16 * v5);
          uint64_t v31 = (unsigned __int8 *)(**(void **)(a1 + 32) + 16 * v18);
          uint64_t v32 = *(std::string::size_type **)(a1 + 48);
          v43.__r_.__value_.__r.__words[0] = **(void **)(a1 + 40);
          v43.__r_.__value_.__l.__size_ = *v32;
          std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)__p, v30, (uint64_t)v31);
          if (std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>((void *)(**(void **)(a1 + 56) + 40 * **(void **)(a1 + 40)), (unsigned __int8 *)v30)|| std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>((void *)(**(void **)(a1 + 64) + 40 * **(void **)(a1 + 48)), v31))
          {
            goto LABEL_53;
          }
          uint64_t v33 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(*(void **)(a1 + 72), &v43);
          if (!v33) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(v33 + 4, (unsigned __int8 *)__p))
          {
LABEL_53:
            uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 24);
            if (!v34) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t v35 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v34 + 48))(v34, a2);
          }
          else
          {
            uint64_t v35 = 0;
          }
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
          return v35;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2242108CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (unint64_t i = *v10; i; unint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2))return i; {
    }
      }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D771A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  return turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 16)))
       % *(void *)(v2 + 24);
}

uint64_t std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void *std::__function::__value_func<unsigned long ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_224211040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[40] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_2242110F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()(uint64_t *a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  unint64_t v3 = *(void *)a1[1];
  unint64_t v8 = *(void *)(*a1 + 24);
  unint64_t v9 = a2;
  if (v8 > a2)
  {
    unint64_t v8 = *(void *)(v2 + 32);
    unint64_t v9 = v3;
    if (v8 > v3)
    {
      int8x8_t v5 = (turi::sframe *)(*(void *)(*(void *)(v2 + 64) + 24 * v3) + 296 * a2);
      unint64_t v6 = (turi::sframe *)(*(void *)a1[2] + 296 * a2);
      turi::sgraph::reorder_and_add_new_columns((uint64_t)v5, (const void ***)a1[3], (void *)a1[4]);
      uint64_t v7 = (turi::sgraph *)turi::sgraph::reorder_and_add_new_columns((uint64_t)v6, (const void ***)a1[3], (void *)a1[4]);
      turi::sgraph::merge_vertex_partition(v7, v5, v6);
    }
    unint64_t v10 = (uint64_t *)&v9;
    long long v11 = &v8;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  unint64_t v10 = (uint64_t *)&v9;
  long long v11 = &v8;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
}

void sub_2242112A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph20commit_vertex_bufferEmRNSt3__16vectorINS_6sfr"
                                        "ameENS2_9allocatorIS4_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph20commit_vertex_bufferEmRNSt3__16vectorINS_6sframeENS2_9allocatorIS4_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16)) {
    turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()(*(uint64_t **)result, v1);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2242118B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D771B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D771B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::__on_zero_shared(uint64_t a1)
{
  return turi::sarray_sorted_buffer<turi::flexible_type>::~sarray_sorted_buffer(a1 + 24);
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D771B78;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D771B78;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(__n128 a1, uint64_t a2, int *a3, uint64_t a4)
{
  switch(*(unsigned char *)(a4 + 12))
  {
    case 0:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
          BOOL v4 = *(void *)a3 < *(void *)a4;
          goto LABEL_27;
        case 1:
          double v17 = *(double *)a3;
          double v18 = (double)*(uint64_t *)a4;
          goto LABEL_37;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          BOOL v16 = *(void *)a4 <= (uint64_t)(*(void *)a3 << 8) >> 8;
          return !v16;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
          BOOL v16 = *(double *)a4 <= (double)*(uint64_t *)a3;
          return !v16;
        case 1:
          double v17 = *(double *)a3;
          double v18 = *(double *)a4;
LABEL_37:
          BOOL v19 = v17 < v18;
          goto LABEL_39;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          BOOL v19 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8) < *(double *)a4;
LABEL_39:
          uint64_t result = v19;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 2:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 2:
          double v5 = *(double *)a3;
          char v6 = *(unsigned char *)(*(void *)a4 + 31);
          if (*(char *)(*(void *)a3 + 31) < 0)
          {
            atomic_ullong *volatile v7 = *(const void **)(*(void *)&v5 + 8);
            size_t v8 = *(void *)(*(void *)&v5 + 16);
          }
          else
          {
            atomic_ullong *volatile v7 = (const void *)(*(void *)&v5 + 8);
            size_t v8 = *(unsigned __int8 *)(*(void *)a3 + 31);
          }
          if (v6 >= 0) {
            size_t v21 = *(unsigned __int8 *)(*(void *)a4 + 31);
          }
          else {
            size_t v21 = *(void *)(*(void *)a4 + 16);
          }
          if (v6 >= 0) {
            size_t v22 = (const void *)(*(void *)a4 + 8);
          }
          else {
            size_t v22 = *(const void **)(*(void *)a4 + 8);
          }
          if (v21 >= v8) {
            size_t v23 = v8;
          }
          else {
            size_t v23 = v21;
          }
          int v24 = memcmp(v7, v22, v23);
          if (v24) {
            return v24 < 0;
          }
          else {
            return v8 < v21;
          }
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 3:
          unint64_t v9 = *(double **)(*(void *)a3 + 8);
          unint64_t v10 = *(double **)(*(void *)a4 + 8);
          unint64_t v11 = (uint64_t)(*(void *)(*(void *)a4 + 16) - (void)v10) >> 3;
          unint64_t v12 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v9) >> 3;
          if (*(double **)(*(void *)a3 + 16) == v9) {
            return v12 < v11;
          }
          if (v12 <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v9) >> 3;
          }
          uint64_t v14 = (uint64_t)(*(void *)(*(void *)a4 + 16) - (void)v10) >> 3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 4:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 4:
          return turi::flexible_type_impl::lt_operator::operator()(a1, (uint64_t)&v25, (uint64_t *)(*(void *)a3 + 8), (void *)(*(void *)a4 + 8));
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 6:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
          BOOL v4 = *(void *)a3 < (uint64_t)(*(void *)a4 << 8) >> 8;
          goto LABEL_27;
        case 1:
          BOOL v16 = (double)*(int *)(a4 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a4 << 8) >> 8) <= *(double *)a3;
          return !v16;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          uint64_t v20 = (uint64_t)(*(void *)a3 << 8) >> 8;
          if (v20 < (uint64_t)(*(void *)a4 << 8) >> 8) {
            return 1;
          }
          if (v20 != (uint64_t)(*(void *)a4 << 8) >> 8) {
            return 0;
          }
          BOOL v4 = a3[2] < *(_DWORD *)(a4 + 8);
LABEL_27:
          uint64_t result = v4;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return result;
    case 7:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 8:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_31;
    case 9:
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_31:
      turi::flexible_type_fail(0);
      return 0;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (!v14 || *v9 > *v10) {
      return 0;
    }
    if (*v9 < *v10) {
      break;
    }
    ++v10;
    ++v9;
    --v14;
    if (!--v13) {
      return v12 < v11;
    }
  }
  return 1;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::~sarray_sorted_buffer(uint64_t a1)
{
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 256));
  double v5 = (void **)(a1 + 232);
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](&v5);
  double v5 = (void **)(a1 + 200);
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v5);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 136));
  atomic_ullong *volatile v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(a1 + 80));
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  atomic_ullong *volatile v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_sorted_buffer<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  atomic_ullong *volatile v2 = (char *)operator new(0x20uLL);
  *(void *)atomic_ullong *volatile v2 = &unk_26D771C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  atomic_ullong *volatile v3 = (unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 24));
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 16)));
  unint64_t v5 = *(void *)(v2 + 24);
  return turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v3) % v5 + v4 % v5 * v5;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D771C88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771C88;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a2 + 16 * **(void **)(a1 + 8);
  if (*(unsigned char *)(v3 + 12) == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "source vid column cannot contain missing value. ");
    unint64_t v11 = std::string::append(&v13, "Please use dropna() to drop the missing value from the input and try again");
    turi::sgraph::merge_vertex_partition(&v14, (__n128 *)v11);
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1::operator() const(std::vector<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()((const std::string **)&v13);
  }
  unint64_t v5 = (unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 16));
  if (v5[12] == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "target vid column cannot contain missing value. ");
    unint64_t v12 = std::string::append(&v13, "Please use dropna() to drop the missing value from the input and try again");
    turi::sgraph::merge_vertex_partition(&v14, (__n128 *)v12);
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1::operator() const(std::vector<turi::flexible_type> const&,unsigned long)::{lambda(void)#2}::operator()((const std::string **)&v13);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(void **)(a1 + 8)))
     % *(void *)(v7 + 24);
  unint64_t v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v5) % *(void *)(v7 + 24);
  turi::sarray_sorted_buffer<turi::flexible_type>::add(*(void **)(**(void **)(a1 + 32) + 16 * v8), v3, v6);
  uint64_t v10 = *(void **)(**(void **)(a1 + 40) + 16 * v9);
  turi::sarray_sorted_buffer<turi::flexible_type>::add(v10, (uint64_t)v5, v6);
}

void sub_2242125A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::target_type()
{
}

void *std::vector<turi::sarray<turi::flexible_type>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sarray<turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    std::vector<turi::sarray<turi::flexible_type>>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_224212684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::sarray<turi::flexible_type>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray<turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::vector<turi::sarray<turi::flexible_type>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 280 * a2;
    uint64_t v5 = 280 * a2;
    do
    {
      *(void *)(v3 + 272) = 0;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      __n128 result = turi::sarray<turi::flexible_type>::sarray(v3);
      v3 += 280;
      v5 -= 280;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_224212778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray<turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(280 * a2);
}

void std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 35;
      uint64_t v7 = v4 - 35;
      do
      {
        (**v7)(v7);
        v6 -= 35;
        BOOL v8 = v7 == v2;
        v7 -= 35;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3::operator()(void **a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  turi::sarray_sorted_buffer<turi::flexible_type>::close(*(void *)(**a1 + 16 * a2));
  turi::sarray<turi::flexible_type>::open_for_write(*a1[1] + 280 * a2);
}

void sub_224212A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(uint64_t *a1)
{
}

void sub_224214400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  switch(*(unsigned char *)(v34 - 148))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v36 = *(void *)(v34 - 160);
      if (!v36) {
        goto LABEL_27;
      }
      if (*(char *)(v36 + 31) < 0) {
        operator delete(*(void **)(v36 + 8));
      }
      uint64_t v37 = (void *)v36;
      uint64_t v38 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      long long v39 = *(void **)(v34 - 160);
      if (!v39) {
        goto LABEL_27;
      }
      uint64_t v40 = (void *)v39[1];
      if (v40)
      {
        v39[2] = v40;
        operator delete(v40);
      }
      uint64_t v37 = v39;
      uint64_t v38 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      double v41 = *(void **)(v34 - 160);
      if (!v41) {
        goto LABEL_27;
      }
      *(void *)(v34 - 168) = v41 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 168));
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      double v41 = *(void **)(v34 - 160);
      if (!v41) {
        goto LABEL_27;
      }
      *(void *)(v34 - 168) = v41 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 168));
LABEL_18:
      uint64_t v37 = v41;
      uint64_t v38 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v42 = *(void *)(v34 - 160);
        if (v42)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v42 + 16));
          MEMORY[0x22A614FA0](v42, 0x1030C40F1F0227BLL);
        }
        *(void *)(v34 - 160) = 0;
      }
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v34 - 160), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::string v43 = *(void **)(v34 - 160);
      if (!v43) {
        goto LABEL_27;
      }
      uint64_t v37 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
      uint64_t v38 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_27;
  }
  MEMORY[0x22A614FA0](v37, v38);
LABEL_27:
  switch(v33)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      if (*(char *)(v32 + 31) < 0) {
        operator delete(*(void **)(v32 + 8));
      }
      unint64_t v45 = (void *)v32;
      uint64_t v46 = 0x1012C404EF22A49;
      goto LABEL_64;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      uint64_t v51 = *(void **)(v32 + 8);
      if (v51)
      {
        *(void *)(v32 + 16) = v51;
        operator delete(v51);
      }
      unint64_t v45 = (void *)v32;
      uint64_t v46 = 0x1080C409938AC02;
      goto LABEL_64;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      *(void *)(v34 - 160) = v32 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
      goto LABEL_57;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      *(void *)(v34 - 160) = v32 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
LABEL_57:
      unint64_t v45 = (void *)v32;
      uint64_t v46 = 0x1020C405E66F15BLL;
      goto LABEL_64;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v32 + 16));
      unint64_t v45 = (void *)v32;
      unsigned int v49 = -235920773;
      goto LABEL_63;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v32, 0xFFFFFFFFFFFFFFFFLL) != 1 || v32 == 0) {
        goto LABEL_65;
      }
      unint64_t v45 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v32);
      unsigned int v49 = 2071181815;
LABEL_63:
      uint64_t v46 = v49 | 0x1030C4000000000;
LABEL_64:
      MEMORY[0x22A614FA0](v45, v46);
LABEL_65:
      *(void *)(v34 - 160) = &a14;
      std::vector<std::pair<turi::flexible_type,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a19);
      a19 = (void **)&a31;
      std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a19);
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_65;
  }
}

uint64_t std::pop_heap[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,unsigned long> *>,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1}>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = a3;
  if (a2 - result >= 25)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    *(void *)&v10[5] = *(void *)(result + 5);
    *(void *)uint64_t v10 = v5;
    v10[12] = *(unsigned char *)(result + 12);
    *(unsigned char *)(result + 12) = 0;
    uint64_t v11 = *(void *)(result + 16);
    uint64_t v6 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(result, (uint64_t)&v9, (a2 - result) / 0x18uLL);
    uint64_t v7 = v6;
    uint64_t v8 = (uint64_t *)(a2 - 24);
    if (v8 == v6)
    {
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v6, (uint64_t *)v10);
    }
    else
    {
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v6, v8);
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v8, (uint64_t *)v10);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(v4, (uint64_t)(v7 + 3), (uint64_t)&v9, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v4 + 24) >> 3));
    }
    return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v10);
  }
  return result;
}

void sub_224214CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_sorted_buffer.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"remaining_chunks.size() <= 1", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_sorted_buffer.hpp", "operator()", 188, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224214E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__push_back_slow_path<turi::sarray_reader_buffer<turi::flexible_type>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[96 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[96 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v12 = *(_OWORD *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 88);
  long long v14 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v14;
  *((void *)v11 + 11) = v13;
  *(_OWORD *)(v11 + 72) = v12;
  std::locale v17[2] = v11 + 96;
  std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer(v17);
  return v15;
}

void sub_224215034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v5 = a4;
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - result) >> 3))) {
    return result;
  }
  uint64_t v10 = (0x5555555555555556 * ((a4 - result) >> 3)) | 1;
  uint64_t v11 = (uint64_t *)(result + 24 * v10);
  uint64_t v12 = 0x5555555555555556 * ((a4 - result) >> 3) + 2;
  if (v12 < a3)
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 280);
    if (!v13) {
      goto LABEL_23;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, v6 + 24 * v10, v11 + 3))
    {
      v11 += 3;
      uint64_t v10 = v12;
    }
  }
  uint64_t v14 = *(void *)(*(void *)a2 + 280);
  if (!v14) {
LABEL_23:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v14 + 48))(v14, v11, v5);
  if (result)
  {
    uint64_t v15 = *(void *)v5;
    *(void *)&v20[5] = *(void *)(v5 + 5);
    *(void *)uint64_t v20 = v15;
    v20[12] = *(unsigned char *)(v5 + 12);
    *(unsigned char *)(v5 + 12) = 0;
    uint64_t v21 = *(void *)(v5 + 16);
    do
    {
      uint64_t v16 = v5;
      uint64_t v5 = (uint64_t)v11;
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v16, v11);
      if (v7 < v10) {
        break;
      }
      uint64_t v17 = (2 * v10) | 1;
      uint64_t v11 = (uint64_t *)(v6 + 24 * v17);
      uint64_t v10 = 2 * v10 + 2;
      if (v10 >= a3)
      {
        uint64_t v10 = v17;
      }
      else
      {
        uint64_t v18 = *(void *)(*(void *)a2 + 280);
        if (!v18) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, v6 + 24 * v17, v11 + 3))
        {
          uint64_t v10 = v17;
        }
        else
        {
          v11 += 3;
        }
      }
      uint64_t v19 = *(void *)(*(void *)a2 + 280);
      if (!v19) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v19 + 48))(v19, v11, v20) & 1) != 0);
    std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v5, (uint64_t *)v20);
    return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v20);
  }
  return result;
}

void sub_2242152A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    unint64_t v9 = (uint64_t *)(a1 + 24 * v6 + 24);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *(void *)(*(void *)a2 + 280);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a1 + 24 * v6 + 24, a1 + 24 * v6 + 48))
      {
        v9 += 3;
        uint64_t v10 = v11;
      }
    }
    std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(*(void *)a3 + 280);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v9 = v4 >> 1;
    uint64_t v10 = (uint64_t *)(v6 + 24 * (v4 >> 1));
    uint64_t v11 = (uint64_t *)(a2 - 24);
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 48))(v7, v10, a2 - 24);
    if ((result & 1) == 0)
    {
      uint64_t v12 = *v11;
      *(void *)&v15[5] = *(uint64_t *)((char *)v11 + 5);
      *(void *)uint64_t v15 = v12;
      v15[12] = *(unsigned char *)(a2 - 12);
      *(unsigned char *)(a2 - 12) = 0;
      uint64_t v16 = *(void *)(a2 - 8);
      do
      {
        uint64_t v13 = (uint64_t)v10;
        std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v11, v10);
        if (!v9) {
          break;
        }
        uint64_t v14 = *(void *)(*(void *)a3 + 280);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (uint64_t *)(v6 + 24 * v9);
        uint64_t v11 = (uint64_t *)v13;
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v14 + 48))(v14, v10, v15));
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v13, (uint64_t *)v15);
      return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v15);
    }
  }
  return result;
}

void sub_224215520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16)) {
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3::operator()(*(void ***)result, v1);
  }
  return result;
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(turi::sgraph **)a1;
  gettimeofday(&v15, 0);
  memset(&v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  unint64_t v5 = *((void *)v4 + 3);
  unint64_t v6 = a2 - v5;
  if (a2 >= v5)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    unint64_t v8 = **(void **)(a1 + 32);
    if (&v14 != (std::vector<std::string> *)v10) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)v10, *(long long **)(v10 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3));
    }
    uint64_t v11 = *(char ***)(a1 + 48);
    if (v13 != (void **)v11) {
      std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(v13, *v11, v11[1], v11[1] - *v11);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    unint64_t v8 = **(void **)(a1 + 8);
    if (&v14 != (std::vector<std::string> *)v7) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)v7, *(long long **)(v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3));
    }
    unint64_t v9 = *(char ***)(a1 + 24);
    if (v13 != (void **)v9) {
      std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(v13, *v9, v9[1], v9[1] - *v9);
    }
    unint64_t v6 = a2;
  }
  turi::sgraph::get_vertex_ids(v4, v6, v8, &v12);
}

void sub_224215F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  std::locale::~locale((std::locale *)&STACK[0x200]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a12, (void *)a13);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)&STACK[0x328]);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(v21 - 208);
  STACK[0x328] = (unint64_t)&a15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x328] = (unint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  _Unwind_Resume(a1);
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator() const(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"union_columns(old_vertices, new_vertices)", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 770, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator() const(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2242161F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(a1 + 32);
  return a1;
}

uint64_t _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hash_set<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  char v7 = (void *)_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(a1, a4);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(v7, a2, a3);
  return a1;
}

void sub_2242163A4(_Unwind_Exception *a1)
{
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(uint64_t a1, unint64_t a2)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = 0;
  if (a2) {
    unint64_t v3 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a2, 0);
  }
  else {
    unint64_t v3 = 32;
  }
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable((uint64_t *)(a1 + 56), v3);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_22421645C(_Unwind_Exception *a1)
{
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(v1);
  _Unwind_Resume(a1);
}

unint64_t _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v3 = *(float *)(a1 + 16);
  for (unint64_t result = 4; result < a3 || (unint64_t)(float)(v3 * (float)result) <= a2; result *= 2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::length_error::length_error[abi:ne180100](exception, "resize overflow");
      __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
    }
  }
  return result;
}

void sub_2242164F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2) {
    unint64_t v3 = (a2 - 1) / 0x30uLL + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(a1, v3, v5);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)v5);
  return a1;
}

void sub_224216578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(uint64_t *a1, unint64_t a2, char **a3)
{
  unint64_t v3 = (a1[1] - *a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t *)(*a1 + 16 * a2));
    }
  }
  else
  {
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__append(a1, a2 - v3, a3);
  }
}

uint64_t *std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__append(uint64_t *result, unint64_t a2, char **a3)
{
  unint64_t v5 = result;
  uint64_t v6 = result[2];
  uint64_t v7 = result[1];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      uint64_t v15 = v7 + 16 * a2;
      do
      {
        unint64_t result = (uint64_t *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v7, a3);
        v7 += 16;
        v14 -= 16;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    v5[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *result;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v6 - *result;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v9;
    }
    uint64_t v22 = result + 2;
    if (v12) {
      uint64_t v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v16 = (uint64_t)&v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    uint64_t v20 = v16;
    uint64_t v21 = &v13[16 * v12];
    uint64_t v17 = 16 * a2;
    unint64_t v18 = v16 + 16 * a2;
    do
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v16, a3);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    uint64_t v20 = v18;
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__swap_out_circular_buffer(v5, v19);
    return (uint64_t *)std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_224216704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (char **)a1[1], *a1, (char **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(uint64_t a1, char **a2)
{
  *(void *)a1 = 0;
  int v4 = *((unsigned __int16 *)a2 + 4);
  *(_WORD *)(a1 + 8) = v4;
  if (v4)
  {
    group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, *((unsigned __int16 *)a2 + 4));
    *(void *)a1 = group;
    if (*((_WORD *)a2 + 4))
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a2;
      uint64_t v8 = 16 * *((unsigned __int16 *)a2 + 4);
      do
      {
        unint64_t v9 = &group[v6];
        *(void *)unint64_t v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        v9[12] = 0;
        if (v7 != group)
        {
          uint64_t v10 = *(void *)&v7[v6];
          *(void *)(v9 + 5) = *(void *)&v7[v6 + 5];
          *(void *)unint64_t v9 = v10;
          unsigned int v11 = v7[v6 + 12];
          v9[12] = v11;
          BOOL v12 = v11 > 9;
          int v13 = (1 << v11) & 0x33C;
          if (!v12 && v13 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
          }
        }
        v6 += 16;
      }
      while (v8 != v6);
    }
  }
  int v15 = *(_DWORD *)((char *)a2 + 10);
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 7);
  *(_DWORD *)(a1 + 10) = v15;
  return a1;
}

void *_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(uint64_t a1, unsigned int a2)
{
  uint64_t result = malloc_type_malloc(16 * a2, 0x1022040F5B21F82uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "sparsehash FATAL ERROR: failed to allocate %lu groups\n", a2);
    exit(1);
  }
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, char **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 2;
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v7 - 16, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 16;
      *((void *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22421698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t *std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(uint64_t **)(a2 + 32); result != *(uint64_t **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(result);
    uint64_t result = (uint64_t *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 16;
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)(v4 - 16));
  }
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  for (unint64_t i = *(uint64_t **)(a1 + 8);
        i != a2;
        _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(i))
  {
    i -= 2;
  }
  *(void *)(a1 + 8) = a2;
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    if (*((_WORD *)a1 + 4))
    {
      uint64_t v3 = 16 * *((unsigned __int16 *)a1 + 4);
      do
      {
        switch(*(unsigned char *)(v1 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                if (*((char *)v4 + 31) < 0) {
                  operator delete((void *)v4[1]);
                }
                atomic_ullong *volatile v5 = v4;
                uint64_t v6 = 0x1012C404EF22A49;
                goto LABEL_35;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                uint64_t v8 = (void *)v7[1];
                if (v8)
                {
                  v7[2] = (atomic_ullong)v8;
                  operator delete(v8);
                }
                atomic_ullong *volatile v5 = v7;
                uint64_t v6 = 0x1080C409938AC02;
                goto LABEL_35;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                uint64_t v16 = (void **)(v9 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
                goto LABEL_21;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                uint64_t v16 = (void **)(v9 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_21:
                atomic_ullong *volatile v5 = v9;
                uint64_t v6 = 0x1020C405E66F15BLL;
                goto LABEL_35;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
                atomic_ullong *volatile v5 = v10;
                unsigned int v11 = -235920773;
                goto LABEL_34;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v1, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v1;
              if (*(void *)v1)
              {
                uint64_t v13 = (void *)v12[6];
                if (v13)
                {
                  v12[7] = (atomic_ullong)v13;
                  operator delete(v13);
                }
                long long v14 = (void *)v12[3];
                if (v14)
                {
                  v12[4] = (atomic_ullong)v14;
                  operator delete(v14);
                }
                uint64_t v15 = (std::__shared_weak_count *)v12[2];
                if (v15) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
                }
                atomic_ullong *volatile v5 = v12;
                unsigned int v11 = 2071181815;
LABEL_34:
                uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_35:
                MEMORY[0x22A614FA0](v5, v6);
              }
            }
            break;
          default:
            break;
        }
        *(void *)uint64_t v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
        *(unsigned char *)(v1 + 12) = 0;
        v1 += 16;
        v3 -= 16;
      }
      while (v3);
      uint64_t v1 = *a1;
    }
    free((void *)v1);
    *a1 = 0;
  }
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    free(v3);
  }
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unsigned int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3 - a2;
  if (a3 - a2 == -16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert-range overflow");
    __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
  }
  atomic_ullong *volatile v5 = a2;
  uint64_t v7 = v3 >> 4;
  uint64_t result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize_delta((uint64_t)a1, v3 >> 4);
  if (a3 != v5)
  {
    do
    {
      uint64_t result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_noresize(a1, v5, (uint64_t)&v10);
      v5 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_2242170C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize_delta(uint64_t a1, uint64_t a2)
{
  v18[5] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v4 = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::maybe_shrink(a1);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *(void *)(a1 + 88);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
  }
  unint64_t v6 = v5 + a2;
  if (*(void *)(a1 + 80) < 4uLL || v6 > *(void *)a1)
  {
    unint64_t v7 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, v6, 0);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v7 > v8)
    {
      unint64_t v9 = v7;
      unint64_t v10 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, *(void *)(a1 + 88) + a2 - *(void *)(a1 + 48), v8);
      unint64_t v11 = v10;
      BOOL v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(void *)(a1 + 88) + a2 - *(void *)(a1 + 48) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        unint64_t v11 = 2 * v10;
      }
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable((uint64_t)v16, 0, a1, v11);
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(a1, (uint64_t)v16);
      uint64_t v15 = (void **)v18;
      std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v15);
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)&v17);
      return 1;
    }
  }
  return v4;
}

void sub_224217270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_noresize@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t position = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position((uint64_t)a1, a2);
  if (position == -1)
  {
    uint64_t result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_at(a1, (uint64_t *)a2, v7, (uint64_t)v17);
    long long v14 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v14;
    *(void *)(a3 + 64) = v19;
    long long v15 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v15;
    char v11 = 1;
  }
  else
  {
    _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter(a1 + 7, position, v16);
    uint64_t v8 = a1[7];
    uint64_t v9 = a1[8];
    *(void *)uint64_t v17 = a1;
    *(_OWORD *)&v17[8] = v16[0];
    *(_OWORD *)&v17[24] = v16[1];
    *(void *)&v17[40] = v8;
    *(void *)&long long v18 = v9;
    *((void *)&v18 + 1) = v9;
    uint64_t v19 = 0;
    uint64_t result = _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)v17);
    char v11 = 0;
    long long v12 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v12;
    *(void *)(a3 + 64) = v19;
    long long v13 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v13;
  }
  *(unsigned char *)(a3 + 72) = v11;
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::maybe_shrink(uint64_t a1)
{
  v11[5] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 88) - *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 80), v5 < 0x21))
  {
    uint64_t result = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable((uint64_t)v9, 0, a1, v5);
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(a1, (uint64_t)v9);
    uint64_t v8 = (void **)v11;
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)&v10);
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_224217468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64x2_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = a2 + 32;
  *(void *)&v15[5] = *(void *)(a1 + 37);
  *(void *)long long v15 = *(void *)(a1 + 32);
  v15[12] = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a1 + 44) = 0;
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(a1 + 32, (uint64_t *)(a2 + 32));
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(v7, (uint64_t *)v15);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)v15);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v12;
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v13;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 80))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = (atomic_ullong *volatile *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  if (a3 != a1)
  {
    uint64_t v10 = *(atomic_ullong **)(a3 + 32);
    *(void *)(a1 + 37) = *(void *)(a3 + 37);
    atomic_ullong *volatile *v9 = v10;
    unsigned int v11 = *(unsigned __int8 *)(a3 + 44);
    *(unsigned char *)(a1 + 44) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *(void *)(a1 + 48) = 0;
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable((uint64_t *)(a1 + 56), 0);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::move_from(a1, a2, (void *)a3, a4);
  return a1;
}

void sub_2242176C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::move_from(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::clear(a1);
  if (a2 == 1) {
    unint64_t v8 = a3[10];
  }
  else {
    unint64_t v8 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a3[11] - a3[6], a4);
  }
  if (v8 > *(void *)(a1 + 80))
  {
    _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize((uint64_t *)(a1 + 56), v8);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::destructive_begin((uint64_t)a3, (uint64_t)v29);
  while (1)
  {
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v20 = a3;
    uint64_t v21 = v9;
    uint64_t v22 = v10;
    uint64_t v23 = v10;
    int v24 = 0;
    uint64_t v25 = v9;
    uint64_t v26 = v10;
    uint64_t v27 = v10;
    uint64_t v28 = 0;
    uint64x2_t result = (unsigned __int8 *)_tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)&v20);
    if (v30 != v21 || v31 != v22 || v32 != v23)
    {
      uint64x2_t result = (unsigned __int8 *)v33;
      goto LABEL_11;
    }
    if (v32 == v31) {
      break;
    }
    uint64x2_t result = (unsigned __int8 *)v33;
    if (v33 == v24) {
      break;
    }
LABEL_11:
    unint64_t v12 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(result);
    uint64_t v13 = *(void *)(a1 + 80) - 1;
    for (uint64_t i = 1; ; ++i)
    {
      unint64_t v15 = v12 & v13;
      unint64_t v16 = (v12 & v13) / 0x30;
      unint64_t v17 = (v12 & v13) % 0x30;
      uint64_t v18 = *(void *)(a1 + 56) + 16 * v16;
      if (((*(unsigned __int8 *)(v18 + (v17 >> 3) + 10) >> (v17 & 7)) & 1) == 0) {
        break;
      }
      unint64_t v12 = i + v15;
    }
    uint64_t v19 = *(unsigned __int16 *)(v18 + 8);
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(v18, (unsigned __int16)v17, v33);
    *(void *)(a1 + 88) = *(void *)(a1 + 88) - v19 + *(unsigned __int16 *)(*(void *)(a1 + 56) + 16 * v16 + 8);
    v33 += 2;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(&v30);
    _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)v29);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64x2_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 48) | *(void *)(a1 + 88))
  {
    unint64_t v3 = *(uint64_t **)(a1 + 56);
    uint64_t v2 = *(uint64_t **)(a1 + 64);
    while (v3 != v2)
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(v3);
      v3[1] = 0;
      uint64_t v2 = *(uint64_t **)(a1 + 64);
      v3 += 2;
    }
    *(void *)(a1 + 88) = 0;
  }
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

void _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v10[0] = 0;
  v10[1] = 0;
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(a1, v4, v10);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)v10);
  if (a1[3] > a2)
  {
    int v5 = a2 % 0x30;
    if (a2 % 0x30)
    {
      uint64_t v6 = a1[1] - 16;
      do
        _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase(v6, (unsigned __int16)v5++);
      while ((unsigned __int16)v5 != 48);
    }
    a1[4] = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    if (*a1 != v8)
    {
      uint64_t v9 = 0;
      do
      {
        v9 += *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
      }
      while (v7 != v8);
      a1[4] = v9;
    }
  }
  a1[3] = a2;
}

void sub_224217A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::destructive_begin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void **)(a1 + 56);
  int v5 = *(void **)(a1 + 64);
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  long long v10 = (unint64_t)v4;
  if (v4 == v5)
  {
    uint64_t v6 = v4;
  }
  else
  {
    *((void *)&v10 + 1) = *v4;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(&v9);
    unint64_t v4 = *(void **)(a1 + 56);
    uint64_t v6 = *(void **)(a1 + 64);
  }
  *(void *)a2 = a1;
  long long v7 = v10;
  *(_OWORD *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = 0;
  return _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(a2);
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + (a2 >> 3);
  int v4 = *(unsigned __int8 *)(v2 + 10);
  unint64_t v3 = (unsigned char *)(v2 + 10);
  int v5 = 1 << (a2 & 7);
  if ((v5 & v4) != 0)
  {
    unsigned int v7 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
    if (*(_WORD *)(a1 + 8) == 1)
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)a1);
      *(void *)a1 = 0;
    }
    else
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase_aux(a1, v7);
    }
    --*(_WORD *)(a1 + 8);
    *v3 &= ~(_BYTE)v5;
  }
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v2 = 0;
  if (a2 >= 9)
  {
    uint64_t v3 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
    int v4 = a1;
    do
    {
      int v5 = *v4++;
      v2 += _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::bits_in_char(unsigned char)::bits_in[v5];
      LOWORD(a2) = a2 - 8;
    }
    while ((unsigned __int16)a2 > 8u);
    a1 += v3;
  }
  return (unsigned __int16)(v2
                          + _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::bits_in_char(unsigned char)::bits_in[~(-1 << a2) & (unint64_t)*a1]);
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase_aux(uint64_t a1, unsigned int a2)
{
  group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) - 1));
  int v5 = group;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = 16 * a2;
  if (a2)
  {
    uint64_t v8 = 0;
    do
    {
      long long v9 = &group[v8];
      *(void *)long long v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      v9[12] = 0;
      if ((char *)v6 != group)
      {
        uint64_t v10 = *(void *)(v6 + v8);
        *(void *)(v9 + 5) = *(void *)(v6 + v8 + 5);
        *(void *)long long v9 = v10;
        unsigned int v11 = *(unsigned __int8 *)(v6 + v8 + 12);
        v9[12] = v11;
        BOOL v12 = v11 > 9;
        int v13 = (1 << v11) & 0x33C;
        if (!v12 && v13 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
        }
      }
      v8 += 16;
    }
    while (v7 != v8);
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v15 = *(unsigned __int16 *)(a1 + 8);
  if (v6 + 16 * a2 + 16 != v6 + 16 * v15)
  {
    uint64_t v16 = 16 * v15 - 16;
    unint64_t v17 = group;
    do
    {
      uint64_t v18 = &v17[v7];
      *(void *)uint64_t v18 = 0;
      uint64_t v19 = (char *)(v6 + v7 + 16);
      *((_DWORD *)v18 + 2) = 0;
      v18[12] = 0;
      if (v19 != &v17[v7])
      {
        uint64_t v20 = *(void *)v19;
        *(void *)(v18 + 5) = *(void *)(v6 + v7 + 21);
        *(void *)uint64_t v18 = v20;
        unsigned int v21 = *(unsigned __int8 *)(v6 + v7 + 28);
        v18[12] = v21;
        BOOL v12 = v21 > 9;
        int v22 = (1 << v21) & 0x33C;
        if (!v12 && v22 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v18, 1uLL);
        }
      }
      v17 += 16;
      v16 -= 16;
      v6 += 16;
    }
    while (v7 != v16);
  }
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)a1);
  *(void *)a1 = v5;
}

uint64_t *_tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(void *a1)
{
  uint64_t v3 = a1 + 2;
  uint64x2_t result = (uint64_t *)a1[2];
  int v4 = result + 1;
  if (v3[1] == *result + 16 * *((unsigned __int16 *)result + 4))
  {
    do
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(result);
      void *v4 = 0;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64x2_t result = (uint64_t *)(v6 + 16);
      a1[2] = v6 + 16;
      if (v6 + 16 == v5) {
        break;
      }
      int v7 = *(unsigned __int16 *)(v6 + 24);
      int v4 = (void *)(v6 + 24);
      a1[3] = *(v4 - 1);
    }
    while (!v7);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  for (uint64_t i = (void *)(result + 8);
        ;
        uint64x2_t result = (uint64_t)_tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(i))
  {
    if (v1[1] == v1[5])
    {
      uint64_t v3 = v1[2];
      if (v3 == v1[6])
      {
        uint64_t v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8])) {
          break;
        }
      }
    }
    if (!*(void *)(*v1 + 48)) {
      break;
    }
    uint64x2_t result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!result) {
      break;
    }
    v1[4] += 16;
  }
  return result;
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 10;
  unsigned int v7 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
  unsigned int v8 = v7;
  long long v9 = (unsigned char *)(v6 + (a2 >> 3));
  int v10 = 1 << (a2 & 7);
  if ((v10 & *v9) != 0)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)a1 + 16 * v7;
    switch(*(unsigned char *)(v12 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            if (*((char *)v13 + 31) < 0) {
              operator delete((void *)v13[1]);
            }
            atomic_ullong *volatile v14 = v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_34;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            unint64_t v17 = (void *)v16[1];
            if (v17)
            {
              _OWORD v16[2] = (atomic_ullong)v17;
              operator delete(v17);
            }
            atomic_ullong *volatile v14 = v16;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_34;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            long long v29 = (void **)(v18 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
            goto LABEL_20;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            long long v29 = (void **)(v18 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v29);
LABEL_20:
            atomic_ullong *volatile v14 = v18;
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_34;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
            atomic_ullong *volatile v14 = v19;
            unsigned int v20 = -235920773;
            goto LABEL_33;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v12;
          if (*(void *)v12)
          {
            int v22 = (void *)v21[6];
            if (v22)
            {
              v21[7] = (atomic_ullong)v22;
              operator delete(v22);
            }
            uint64_t v23 = (void *)v21[3];
            if (v23)
            {
              void v21[4] = (atomic_ullong)v23;
              operator delete(v23);
            }
            int v24 = (std::__shared_weak_count *)v21[2];
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            atomic_ullong *volatile v14 = v21;
            unsigned int v20 = 2071181815;
LABEL_33:
            uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_34:
            MEMORY[0x22A614FA0](v14, v15);
          }
        }
        break;
      default:
        break;
    }
    *(void *)uint64_t v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 12) = 0;
  }
  else
  {
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set_aux(a1, v7);
    ++*(_WORD *)(a1 + 8);
    *v9 |= v10;
    uint64_t v11 = v8;
  }
  uint64_t v25 = *(void *)a1 + 16 * v11;
  *(void *)uint64_t v25 = 0;
  *(_DWORD *)(v25 + 8) = 0;
  *(unsigned char *)(v25 + 12) = 0;
  if ((uint64_t *)v25 != a3)
  {
    uint64_t v26 = *a3;
    *(void *)(v25 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(void *)uint64_t v25 = v26;
    unsigned int v27 = *((unsigned __int8 *)a3 + 12);
    *(unsigned char *)(v25 + 12) = v27;
    if (v27 <= 9 && ((1 << v27) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v25, 1uLL);
    }
  }
  return *(void *)a1 + 16 * v11;
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set_aux(uint64_t a1, unsigned int a2)
{
  group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) + 1));
  uint64_t v5 = group;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = 16 * a2;
  if (a2)
  {
    uint64_t v8 = 0;
    do
    {
      long long v9 = &group[v8];
      *(void *)long long v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      v9[12] = 0;
      if ((char *)v6 != group)
      {
        uint64_t v10 = *(void *)(v6 + v8);
        *(void *)(v9 + 5) = *(void *)(v6 + v8 + 5);
        *(void *)long long v9 = v10;
        unsigned int v11 = *(unsigned __int8 *)(v6 + v8 + 12);
        v9[12] = v11;
        BOOL v12 = v11 > 9;
        int v13 = (1 << v11) & 0x33C;
        if (!v12 && v13 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
        }
      }
      v8 += 16;
    }
    while (v7 != v8);
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v15 = *(unsigned __int16 *)(a1 + 8);
  if (v15 != a2)
  {
    uint64_t v16 = 16 * v15;
    unint64_t v17 = group;
    do
    {
      atomic_ullong *volatile v18 = &v17[v7];
      *(void *)&v17[v7 + 16] = 0;
      atomic_ullong *volatile v19 = (atomic_ullong *volatile *)&v17[v7 + 16];
      uint64_t v20 = v6 + v7;
      *((_DWORD *)v18 + 6) = 0;
      v18[28] = 0;
      if ((atomic_ullong *volatile *)(v6 + v7) != v19)
      {
        atomic_ullong *volatile v21 = *(atomic_ullong **)v20;
        *(void *)&v17[v7 + 21] = *(void *)(v20 + 5);
        atomic_ullong *volatile *v19 = v21;
        unsigned int v22 = *(unsigned __int8 *)(v20 + 12);
        v18[28] = v22;
        if (v22 <= 9 && ((1 << v22) & 0x33C) != 0) {
          atomic_fetch_add(*v19, 1uLL);
        }
      }
      v17 += 16;
      v16 -= 16;
      v6 += 16;
    }
    while (v7 != v16);
  }
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t *)a1);
  *(void *)a1 = v5;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            int v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            atomic_ullong *volatile v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  return a1;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 80) - 1;
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  uint64_t v5 = 0;
  uint64_t v6 = -1;
  while (1)
  {
    unint64_t v7 = v4 & v3;
    unint64_t v8 = (v4 & v3) / 0x30;
    unint64_t v9 = (v4 & v3) % 0x30;
    if (((*(unsigned __int8 *)(*(void *)(a1 + 56) + 16 * v8 + (v9 >> 3) + 10) >> (v9 & 7)) & 1) == 0) {
      break;
    }
    if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted(a1, v7))
    {
      if (v6 == -1) {
        uint64_t v6 = v7;
      }
    }
    else
    {
      unsigned int v10 = (unsigned __int16)v9;
      uint64_t v11 = *(void *)(a1 + 56) + 16 * v8;
      uint64_t v12 = *(void *)v11;
      unsigned int v13 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v11 + 10), v10);
      if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, a2, v12 + 16 * v13)) {
        return v7;
      }
    }
    unint64_t v4 = ++v5 + v7;
  }
  return -1;
}

uint64_t _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v6 = *a1 + 16 * (a2 / 0x30);
  uint64_t v7 = *(void *)v6;
  uint64_t result = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v6 + 10), a2 % 0x30);
  uint64_t v9 = v7 + 16 * result;
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v9;
  if (*(void *)v6 + 16 * *(unsigned __int16 *)(v6 + 8) == v9)
  {
    unint64_t v10 = v6 + 16;
    while (v10 != v4)
    {
      a3[3] = *(void *)v10;
      int v11 = *(unsigned __int16 *)(v10 + 8);
      v10 += 16;
      if (v11)
      {
        unint64_t v4 = v10 - 16;
        break;
      }
    }
    a3[2] = v4;
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_at@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[11] - a1[6] >= 0xFFFFFFFFFFFFFFFuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
  }
  if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted((uint64_t)a1, a3))--a1[6]; {
  uint64_t v8 = a1[7] + 16 * (a3 / 0x30);
  }
  uint64_t v9 = *(unsigned __int16 *)(v8 + 8);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(v8, a3 % 0x30, a2);
  a1[11] = a1[11] - v9 + *(unsigned __int16 *)(a1[7] + 16 * (a3 / 0x30) + 8);
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter(a1 + 7, a3, v15);
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  *(void *)a4 = a1;
  long long v12 = v15[1];
  *(_OWORD *)(a4 + 8) = v15[0];
  *(_OWORD *)(a4 + 24) = v12;
  *(void *)(a4 + 40) = v10;
  *(void *)(a4 + 48) = v11;
  *(void *)(a4 + 56) = v11;
  *(void *)(a4 + 64) = 0;
  return _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(a4);
}

void sub_224218790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted(uint64_t a1, unint64_t a2)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 56) + 16 * (a2 / 0x30);
  if (((*(unsigned __int8 *)(v3 + ((a2 % 0x30) >> 3) + 10) >> ((a2 % 0x30) & 7)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = v4
     + 16
     * _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v3 + 10), a2 % 0x30);
  return std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)(a1 + 32), v5);
}

uint64_t _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(uint64_t result)
{
  uint64_t v1 = (void *)result;
  while (1)
  {
    if (v1[1] == v1[5])
    {
      uint64_t v2 = v1[2];
      if (v2 == v1[6])
      {
        uint64_t v3 = v1[3];
        if (v3 == v1[7] && (v3 == v2 || v1[4] == v1[8])) {
          return result;
        }
      }
    }
    if (!*(void *)(*v1 + 48)) {
      return result;
    }
    uint64_t result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!result) {
      return result;
    }
    uint64_t v4 = v1[3];
    uint64_t v5 = v1[4] + 16;
    v1[4] = v5;
    if (v5 == *(void *)v4 + 16 * *(unsigned __int16 *)(v4 + 8))
    {
      uint64_t v6 = v1[2];
      uint64_t v7 = v4 + 16;
      while (v7 != v6)
      {
        v1[4] = *(void *)v7;
        int v8 = *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
        if (v8)
        {
          uint64_t v6 = v7 - 16;
          break;
        }
      }
      v1[3] = v6;
    }
  }
}

void _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  _ZZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE_clEvENKUlvE_clEv();
}

void sub_224218A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE0_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  _ZZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE0_clEvENKUlvE_clEv();
}

void sub_224218C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlmE_clEm(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (**(void **)a1 != -1)
  {
    source = (turi::random::generator *)turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(void **)a1 + a2);
  }
  unint64_t v5 = *(void *)(**(void **)(a1 + 8) + 8 * a2);
  unint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 16))(**(void **)(a1 + 16));
  if (v5 < result)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 16) + 32))(&v28);
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 16) + 40))(&v25);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 24) + 32))(v22);
    long long v16 = v28;
    *(void *)&v17[5] = *(void *)&v29[5];
    *(void *)unint64_t v17 = *(void *)v29;
    v17[12] = v29[12];
    if (v29[12] <= 9u && ((1 << v29[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v17, 1uLL);
    }
    long long v18 = v30;
    long long v13 = v25;
    *(void *)&v14[5] = *(void *)&v26[5];
    *(void *)atomic_ullong *volatile v14 = *(void *)v26;
    v14[12] = v26[12];
    if (v26[12] <= 9u && ((1 << v26[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v14, 1uLL);
    }
    long long v15 = v27;
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v22);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v23);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v24);
    uint64_t v7 = **(void **)(a1 + 32);
    while (v16 != v13 || (void)v18 != (void)v15)
    {
      if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position(v7, v17) == -1)
      {
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 48))(v10, v17);
      }
      turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v16);
    }
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v9);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v11);
    int v8 = (void *)std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)&v21, (uint64_t)v12);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v8);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v20);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v9);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v13);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v16);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v23);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v22);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v25);
    return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v28);
  }
  return result;
}

void sub_224219090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v46);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&a9);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a21);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a27);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a46);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v47 - 168);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v47 - 120);
  _Unwind_Resume(a1);
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_7copy_ifIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__4clEmEUlRKS7_E_vvEEvOT_OT0_T1_NSt3__13setImNSL_4lessImEENSL_9allocatorImEEEEmEUlmE_EEvmmRKSG_EUlvE_E6manageERKNS1_15function_bufferERSX_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(void *)a2 = &_ZTIZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__13setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgr"
                                        "aph18commit_edge_bufferEmmNS_6sframeEENK3$_4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__1"
                                        "3setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__13setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_7copy_ifIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__4clEmEUlRKS7_E_vvEEvOT_OT0_T1_NSt3__13setImNSL_4lessImEENSL_9allocatorImEEEEmEUlmE_EEvmmRKSG_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    do
      unint64_t result = _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlmE_clEm(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2]) {
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator()(*result, v1);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D771D78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(void *a1, uint64_t a2)
{
  v66[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  long long v5 = (turi::sgraph *)a1[4];
  long long v57 = 0u;
  long long v58 = 0u;
  int v59 = 1065353216;
  if (v3 != v4)
  {
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v63 = *v6;
      *((void *)&v63 + 1) = *v7;
      std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v57, &v63, &v63);
      int v8 = (void *)a1[2];
      *(void *)&long long v63 = v6[1];
      *((void *)&v63 + 1) = *v8;
      std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v57, &v63, &v63);
      v6 += 2;
    }
    while (v6 != v4);
  }
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  uint64_t v9 = *(void **)(a1[3] + 16);
  if (v9)
  {
    do
    {
      if (std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v57, v9 + 2))
      {
        uint64_t v10 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(&v57, v9 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(&v57, v10);
      }
      else
      {
        std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v54, v9 + 2, (_OWORD *)v9 + 1);
      }
      uint64_t v9 = (void *)*v9;
    }
    while (v9);
    for (uint64_t i = (void *)v55; i; uint64_t i = (void *)*i)
    {
      long long v12 = (void *)a1[3];
      long long v13 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v12, i + 2);
      std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::erase(v12, v13);
    }
  }
  atomic_ullong *volatile v14 = (void *)v58;
  if ((void)v58)
  {
    do
    {
      uint64_t v15 = a1[3];
      *(void *)&long long v63 = v14 + 2;
      long long v16 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v15, v14 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v63);
      unint64_t v17 = (std::__shared_weak_count *)v16[5];
      v16[4] = 0;
      v16[5] = 0;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      atomic_ullong *volatile v14 = (void *)*v14;
    }
    while (v14);
    long long v18 = (uint64_t *)v58;
    uint64_t v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = 0;
    unint64_t v19 = 0;
    if ((void)v58)
    {
      uint64_t v20 = (void *)v58;
      do
      {
        ++v19;
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
    }
  }
  else
  {
    long long v18 = 0;
    unint64_t v19 = 0;
    uint64_t v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = 0;
  }
  uint64_t v21 = std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>,std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>>((char *)&v51, v18, 0, v19);
  uint64_t v23 = v51;
  unsigned int v22 = v52;
  int v24 = (std::locale::__imp *)a1[3];
  v49[0].__locale_ = (std::locale::__imp *)&v51;
  v49[1].__locale_ = v24;
  double v50 = v5;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v21);
  uint64_t v26 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v26);
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v26 > 1)
  {
    long long v28 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v63, v28);
    double v29 = (double)(unint64_t)((v22 - v23) >> 4) / (double)(unint64_t)v26;
    unint64_t v61 = (unint64_t)(v29 * (double)0 + 0.0);
    unint64_t v62 = (unint64_t)(v29 * (double)1uLL + 0.0);
    __p[0] = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    __p[1] = v49;
    turi::parallel_task_queue::launch((uint64_t)&v63, (uint64_t *)__p);
  }
  if (v22 != v23)
  {
    long long v63 = *(_OWORD *)*(void *)v49[0].__locale_;
    turi::sgraph::fetch_vid_hash_map(v50);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Processing edge partitions: ", 28);
  if (v3 != v4)
  {
    long long v30 = v3;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"(", 1);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" , ", 3);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") ", 2);
      v30 += 2;
    }
    while (v30 != v4);
  }
  char v33 = (int *)global_logger();
  if (v33[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v33)) {
      goto LABEL_50;
    }
    uint64_t v34 = (file_logger *)global_logger();
    started = file_logger::start_stream(v34, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 829, 1);
    std::stringbuf::str();
    uint64_t v36 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)__p);
    uint64_t v37 = pthread_getspecific(*(void *)(v36 + 592));
    if (v37)
    {
      if (*((unsigned char *)v37 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(v37[2] - 24) + 16));
        uint64_t v38 = std::locale::use_facet(v49, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(v49);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v36);
        if (*(_DWORD *)(v36 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }
  long long v39 = (int *)global_logger();
  if (v39[169] > 2) {
    goto LABEL_43;
  }
  if (cppipc::must_cancel((cppipc *)v39)) {
LABEL_50:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  uint64_t v40 = (file_logger *)global_logger();
  double v41 = file_logger::start_stream(v40, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 830, 1);
  uint64_t v42 = pthread_getspecific(*((void *)v41 + 74));
  if (v42 && *((unsigned char *)v42 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)"Number of vid maps in cache: ", 29);
  }
  uint64_t v43 = file_logger::operator<<<unsigned long>((uint64_t)v41);
  uint64_t v44 = pthread_getspecific(*(void *)(v43 + 592));
  if (v44)
  {
    if (*((unsigned char *)v44 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(v44[2] - 24) + 16));
      unint64_t v45 = std::locale::use_facet(v49, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(v49);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v43);
      if (*(_DWORD *)(v43 + 600) == 7)
      {
        __print_back_trace();
        long long v48 = __cxa_allocate_exception(8uLL);
        *long long v48 = "LOG_FATAL encountered";
        __cxa_throw(v48, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
LABEL_43:
  *(void *)&long long v63 = *MEMORY[0x263F8C2B8];
  uint64_t v46 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v64[-2] + *(void *)(v63 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v64[0] = v46;
  v64[1] = MEMORY[0x263F8C318] + 16;
  if (v65 < 0) {
    operator delete((void *)v64[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](v66);
  if (v51)
  {
    unsigned int v52 = v51;
    operator delete(v51);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v54);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v57);
  if (v3) {
    operator delete(v3);
  }
}

void sub_224219BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::locale::~locale((std::locale *)&a9);
  a36 = *MEMORY[0x263F8C2B8];
  uint64_t v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a36 + *(void *)(a36 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a38 = v57;
  a39 = MEMORY[0x263F8C318] + 16;
  if (a52 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&a55);
  if (a12)
  {
    a13 = (uint64_t)a12;
    operator delete(a12);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a21);
  if (v55) {
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

void *std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 ^ *a2;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_42:
    void *v21 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22421A018(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v4 = v3 ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3 ^ *a2;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  __n128 result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v4 == v9)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a2[1];
  unint64_t v8 = v7 ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7 ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v7) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  float v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }
  *uint64_t i = *v15;
  *float v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22421A3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>,std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *((_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_22421A444(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_5clENS"
                                        "t3__16vectorINS4_4pairImmEENS4_9allocatorIS7_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_5clENSt3__16vectorINS4_4pairImmEENS4_9allocatorIS7_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = (void ***)result;
    uint64_t v3 = *(turi::sgraph **)(*result + 16);
    long long v4 = *(_OWORD *)(***v2 + 16 * v1);
    turi::sgraph::fetch_vid_hash_map(v3);
  }
  return result;
}

void sub_22421A5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D771E18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D771E18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  long long v4 = *(void **)a2;
  long long v3 = *(char **)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  unint64_t v8 = *(uint64_t **)(a1 + 24);
  std::string __p = *(void **)a2;
  uint64_t v41 = *v8;
  p_p = &__p;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v5, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  uint64_t v10 = v9[5];
  uint64_t v37 = v9[4];
  uint64_t v38 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(uint64_t **)(a1 + 32);
  std::string __p = v3;
  uint64_t v41 = *v12;
  p_p = &__p;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v11, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  uint64_t v14 = v13[5];
  uint64_t v35 = v13[4];
  uint64_t v36 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = **(void **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME[0]);
  float v16 = &v3[v7 * (void)v4];
  uint64_t v17 = v15 + 296 * (void)v16;
  uint64_t v19 = *(void *)(v17 + 48);
  BOOL v18 = (uint64_t *)(v17 + 48);
  unint64_t v20 = v18 - 1;
  uint64_t v21 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(v18 - 1), v19, (unsigned __int8 **)&__p);
  if (v21 != *v18)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *v20;
    if (v42 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
    uint64_t v24 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*v20, *v18, (unsigned __int8 **)&__p);
    if (v24 != *v18)
    {
      uint64_t v25 = v24;
      uint64_t v26 = (v22 - v23) >> 3;
      uint64_t v27 = v15 + 296 * (void)v16;
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * v26;
      uint64_t v29 = *v20;
      if (v42 < 0) {
        operator delete(__p);
      }
      turi::sframe::select_column(v27, v28, &v34);
      turi::sframe::select_column(v27, 0xAAAAAAAAAAAAAAABLL * ((v25 - v29) >> 3), &v33);
      _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v32);
      _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v31);
      uint64_t v30 = v32;
      (*(void (**)(void))(*(void *)v34 + 24))(v34);
      turi::sarray<turi::flexible_type>::open_for_write(v30);
    }
    p_p = &__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  p_p = &__p;
  turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
}

void sub_22421B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a29);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a31);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a33);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"union_columns(old_edges, normalized_edges)", 42);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 883, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421BC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421BE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(**(void **)a1 + 8 * a2);
  unint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 32))(&v40);
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 40))(&v37);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 32))(v34);
    long long v28 = v40;
    *(void *)&void v29[5] = *(void *)&v41[5];
    *(void *)uint64_t v29 = *(void *)v41;
    v29[12] = v41[12];
    if (v41[12] <= 9u && ((1 << v41[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v29, 1uLL);
    }
    long long v30 = v42;
    long long v25 = v37;
    *(void *)&v26[5] = *(void *)&v38[5];
    *(void *)uint64_t v26 = *(void *)v38;
    v26[12] = v38[12];
    if (v38[12] <= 9u && ((1 << v38[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v26, 1uLL);
    }
    long long v27 = v39;
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v34);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v35);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v36);
    uint64_t v5 = **(void ****)(a1 + 24);
    while ((void)v28 != (void)v25 || *((void *)&v28 + 1) != *((void *)&v25 + 1) || (void)v30 != (void)v27)
    {
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find(*v5, v29, v20);
      uint64_t v6 = (atomic_ullong *)v20[4][2];
      char v45 = 0;
      int v44 = 0;
      uint64_t v43 = v6;
      if (!v23) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v23 + 48))(v23, &v43);
      switch(v45)
      {
        case 2:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            char v7 = v43;
            if (v43)
            {
              if (*((char *)v43 + 31) < 0) {
                operator delete((void *)v43[1]);
              }
              unint64_t v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            float v16 = v43;
            if (v43)
            {
              uint64_t v17 = (void *)v43[1];
              if (v17)
              {
                v43[2] = (atomic_ullong)v17;
                operator delete(v17);
              }
              unint64_t v8 = v16;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_44;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v10 = v43;
            if (v43)
            {
              v20[0] = (void **)(v43 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v10 = v43;
            if (v43)
            {
              v20[0] = (void **)(v43 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_39:
              unint64_t v8 = v10;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            BOOL v18 = v43;
            if (v43)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v43 + 2);
              unint64_t v8 = v18;
              unsigned int v15 = -235920773;
              goto LABEL_43;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v11 = v43;
            if (v43)
            {
              unint64_t v12 = (void *)v43[6];
              if (v12)
              {
                v43[7] = (atomic_ullong)v12;
                operator delete(v12);
              }
              unint64_t v13 = (void *)v11[3];
              if (v13)
              {
                void v11[4] = (atomic_ullong)v13;
                operator delete(v13);
              }
              uint64_t v14 = (std::__shared_weak_count *)v11[2];
              if (v14) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v14);
              }
              unint64_t v8 = v11;
              unsigned int v15 = 2071181815;
LABEL_43:
              uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_44:
              MEMORY[0x22A614FA0](v8, v9);
            }
          }
          break;
        default:
          break;
      }
      turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v28);
    }
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v21);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)v22);
    uint64_t v19 = (void *)std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)&v33, (uint64_t)v24);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v32);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v31);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v21);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v25);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v28);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v36);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v35);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v34);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v37);
    return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v40);
  }
  return result;
}

void sub_22421C46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v56);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&a19);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a31);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a37);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a56);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 200);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 152);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  if (a1[11] == a1[6]
    || (unint64_t position = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position((uint64_t)a1, a2), position == -1))
  {
    uint64_t v10 = a1[7];
    uint64_t v11 = a1[8];
    *a3 = a1;
    a3[1] = v10;
    a3[2] = v11;
    a3[3] = v11;
    a3[4] = 0;
    a3[5] = v10;
    a3[6] = v11;
    a3[7] = v11;
    a3[8] = 0;
    return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)a3);
  }
  else
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, position, v12);
    uint64_t v6 = a1[7];
    uint64_t v7 = a1[8];
    *a3 = a1;
    long long v8 = v12[1];
    *(_OWORD *)(a3 + 1) = v12[0];
    *(_OWORD *)(a3 + 3) = v8;
    a3[5] = v6;
    a3[6] = v7;
    a3[7] = v7;
    a3[8] = 0;
    return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)a3);
  }
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 80) - 1;
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  uint64_t v5 = 0;
  uint64_t v6 = -1;
  while (1)
  {
    unint64_t v7 = v4 & v3;
    unint64_t v8 = (v4 & v3) / 0x30;
    unint64_t v9 = (v4 & v3) % 0x30;
    if (((*(unsigned __int8 *)(*(void *)(a1 + 56) + 16 * v8 + (v9 >> 3) + 10) >> (v9 & 7)) & 1) == 0) {
      break;
    }
    if (_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted(a1, v7))
    {
      if (v6 == -1) {
        uint64_t v6 = v7;
      }
    }
    else
    {
      unsigned int v10 = (unsigned __int16)v9;
      uint64_t v11 = *(void *)(a1 + 56) + 16 * v8;
      uint64_t v12 = *(void *)v11;
      unsigned int v13 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v11 + 10), v10);
      if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, a2, v12 + 24 * v13)) {
        return v7;
      }
    }
    unint64_t v4 = ++v5 + v7;
  }
  return -1;
}

uint64_t _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v6 = *a1 + 16 * (a2 / 0x30);
  uint64_t v7 = *(void *)v6;
  uint64_t result = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v6 + 10), a2 % 0x30);
  uint64_t v9 = v7 + 24 * result;
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v9;
  if (*(void *)v6 + 24 * *(unsigned __int16 *)(v6 + 8) == v9)
  {
    unint64_t v10 = v6 + 16;
    while (v10 != v4)
    {
      a3[3] = *(void *)v10;
      int v11 = *(unsigned __int16 *)(v10 + 8);
      v10 += 16;
      if (v11)
      {
        unint64_t v4 = v10 - 16;
        break;
      }
    }
    a3[2] = v4;
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted(uint64_t a1, unint64_t a2)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 56) + 16 * (a2 / 0x30);
  if (((*(unsigned __int8 *)(v3 + ((a2 % 0x30) >> 3) + 10) >> ((a2 % 0x30) & 7)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = v4
     + 24
     * _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v3 + 10), a2 % 0x30);
  return std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)(a1 + 32), v5);
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v2 = 0;
  if (a2 >= 9)
  {
    uint64_t v3 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4++;
      v2 += _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::bits_in_char(unsigned char)::bits_in[v5];
      LOWORD(a2) = a2 - 8;
    }
    while ((unsigned __int16)a2 > 8u);
    a1 += v3;
  }
  return (unsigned __int16)(v2
                          + _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::bits_in_char(unsigned char)::bits_in[~(-1 << a2) & (unint64_t)*a1]);
}

uint64_t _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(uint64_t result)
{
  unint64_t v1 = (uint64_t *)result;
  for (uint64_t i = (void *)(result + 8);
        ;
        uint64_t result = (uint64_t)_tc_google::two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::operator++(i))
  {
    if (v1[1] == v1[5])
    {
      uint64_t v3 = v1[2];
      if (v3 == v1[6])
      {
        uint64_t v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8])) {
          break;
        }
      }
    }
    if (!*(void *)(*v1 + 48)) {
      break;
    }
    uint64_t result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!result) {
      break;
    }
  }
  return result;
}

void *_tc_google::two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::operator++(void *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = result[3] + 24;
  result[3] = v2;
  if (v2 == *(void *)v1 + 24 * *(unsigned __int16 *)(v1 + 8))
  {
    uint64_t v3 = result[1];
    uint64_t v4 = v1 + 16;
    while (v4 != v3)
    {
      result[3] = *(void *)v4;
      int v5 = *(unsigned __int16 *)(v4 + 8);
      v4 += 16;
      if (v5)
      {
        uint64_t v3 = v4 - 16;
        break;
      }
    }
    result[2] = v3;
  }
  return result;
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_E6manageERKNS1_15function_bufferERSZ_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(void *)a2 = &_ZTIZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS3_E_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6s"
                                        "graph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E_vvEE"
                                        "vOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    do
      uint64_t result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421CCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(**(void **)a1 + 8 * a2);
  unint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 32))(&v40);
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 40))(&v37);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 32))(v34);
    long long v28 = v40;
    *(void *)&void v29[5] = *(void *)&v41[5];
    *(void *)uint64_t v29 = *(void *)v41;
    v29[12] = v41[12];
    if (v41[12] <= 9u && ((1 << v41[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v29, 1uLL);
    }
    long long v30 = v42;
    long long v25 = v37;
    *(void *)&v26[5] = *(void *)&v38[5];
    *(void *)uint64_t v26 = *(void *)v38;
    v26[12] = v38[12];
    if (v38[12] <= 9u && ((1 << v38[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v26, 1uLL);
    }
    long long v27 = v39;
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v34);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v35);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v36);
    long long v5 = **(void ****)(a1 + 24);
    while ((void)v28 != (void)v25 || *((void *)&v28 + 1) != *((void *)&v25 + 1) || (void)v30 != (void)v27)
    {
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find(*v5, v29, v20);
      unint64_t v6 = (atomic_ullong *)v20[4][2];
      char v45 = 0;
      int v44 = 0;
      uint64_t v43 = v6;
      if (!v23) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v23 + 48))(v23, &v43);
      switch(v45)
      {
        case 2:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            char v7 = v43;
            if (v43)
            {
              if (*((char *)v43 + 31) < 0) {
                operator delete((void *)v43[1]);
              }
              unint64_t v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            float v16 = v43;
            if (v43)
            {
              uint64_t v17 = (void *)v43[1];
              if (v17)
              {
                v43[2] = (atomic_ullong)v17;
                operator delete(v17);
              }
              unint64_t v8 = v16;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_44;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v10 = v43;
            if (v43)
            {
              v20[0] = (void **)(v43 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v10 = v43;
            if (v43)
            {
              v20[0] = (void **)(v43 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_39:
              unint64_t v8 = v10;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            BOOL v18 = v43;
            if (v43)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v43 + 2);
              unint64_t v8 = v18;
              unsigned int v15 = -235920773;
              goto LABEL_43;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v43, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v11 = v43;
            if (v43)
            {
              uint64_t v12 = (void *)v43[6];
              if (v12)
              {
                v43[7] = (atomic_ullong)v12;
                operator delete(v12);
              }
              unsigned int v13 = (void *)v11[3];
              if (v13)
              {
                void v11[4] = (atomic_ullong)v13;
                operator delete(v13);
              }
              uint64_t v14 = (std::__shared_weak_count *)v11[2];
              if (v14) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v14);
              }
              unint64_t v8 = v11;
              unsigned int v15 = 2071181815;
LABEL_43:
              uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_44:
              MEMORY[0x22A614FA0](v8, v9);
            }
          }
          break;
        default:
          break;
      }
      turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v28);
    }
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v21);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)v22);
    uint64_t v19 = (void *)std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)&v33, (uint64_t)v24);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v32);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v31);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v21);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v25);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v28);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v36);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v35);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v34);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v37);
    return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v40);
  }
  return result;
}

void sub_22421D4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v56);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&a19);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a31);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a37);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a56);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 200);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 152);
  _Unwind_Resume(a1);
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E0_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_E6manageERKNS1_15function_bufferERSZ_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(void *)a2 = &_ZTIZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS3_E0_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6s"
                                        "graph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E0_vvE"
                                        "EvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E0_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E0_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    do
      unint64_t result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition1", 10);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 385, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned int v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition2", 10);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 386, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned int v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421DBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::sarray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[6] = a4;
  v7[7] = a3;
  *(void *)a1 = &unk_26D759AF8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  int v6 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v6 == 0, "Mutex create error %d", v6);
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  v7[0] = a4;
  if (a4) {
    turi::sarray<turi::flexible_type>::open_for_write(a1);
  }
  v7[5] = v7;
  turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator()();
}

void sub_22421DE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v12 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  turi::mutex::~mutex(v13);
  if (*(char *)(v12 + 175) < 0) {
    operator delete(*v14);
  }
  turi::index_file_information::~index_file_information(v11);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_segments", 12);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(size_t)0", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 211, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned int v13 = v16;
  turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22421E034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    uint64_t v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      unint64_t result = (turi::thread_pool *)turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_22421E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 32))(v9);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v5 = v4 * a2;
  if (**(void **)(a1 + 16) - 1 == a2) {
    unint64_t v6 = **(void **)(a1 + 24);
  }
  else {
    unint64_t v6 = v4 + v5;
  }
  unint64_t v7 = v6 - v5;
  if (v6 > v5)
  {
    do
    {
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void))(*(void *)v10 + 48))(v10, *(void *)(a1 + 32));
      --v7;
    }
    while (v7);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v9);
}

void sub_22421E3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246E0581 & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246E0581 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      unint64_t result = turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void *turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(**(void **)a1 + 16 * a2) + 32))(v7);
  (*(void (**)(void *__return_ptr))(***(void ***)(a1 + 8) + 32))(v5);
  (*(void (**)(void *__return_ptr))(***(void ***)(a1 + 8) + 40))(v4);
  while (v5[0] != v4[0] || v5[1] != v4[1] || v6[2] != v4[4])
  {
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v6);
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v5);
  }
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v4);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v5);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v9);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v7);
}

void sub_22421E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1>(unsigned long,unsigned long,turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14segment_sarrayENSt3__110shared_ptrINS_6sarrayINS_13f"
                                        "lexible_typeEEEEERKNS1_6vectorImNS1_9allocatorImEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14segment_sarrayENSt3__110shared_ptrINS_6sarrayINS_13flexible_typeEEEEERKNS1_6vectorImNS1_9allocatorImEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1>(unsigned long,unsigned long,turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      unint64_t result = turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    char v6 = *((unsigned char *)a3 + 23);
    if (v6 >= 0) {
      unint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      unint64_t v7 = a3[1];
    }
    if (v6 >= 0) {
      uint64_t v8 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v10 = *(unsigned __int8 **)(v4 + 8);
      }
      if (v10 != v7) {
        goto LABEL_20;
      }
      if ((v9 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v4, v8, *(void *)(v4 + 8))) {
        goto LABEL_19;
      }
LABEL_20:
      v4 += 24;
      if (v4 == a2) {
        return v5;
      }
    }
    if (*(unsigned char *)(v4 + 23))
    {
      uint64_t v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
      {
        if (v9 == ++v11) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    ++v5;
    goto LABEL_20;
  }
  return 0;
}

void turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)a1 + 24 * a2;
  if (*(char *)(v4 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    size_t v5 = *(void *)(v4 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(v4 + 23) >= 0) {
      unint64_t v7 = (const void *)v4;
    }
    else {
      unint64_t v7 = *(const void **)v4;
    }
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, ".frame_idx");
  uint64_t v8 = (turi *)(**(void **)(a1 + 16) + 296 * a2);
  if (**(unsigned char **)(a1 + 8))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __p;
    }
    turi::sframe_save_weak_reference(v8, &__str);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  turi::sframe::save(v8, (uint64_t)&v9);
}

void sub_22421E9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_21parallel_save_sframesERKNSt3__16vectorINS_6sframeENS"
                                        "1_9allocatorIS3_EEEERNS_8oarchiveEbE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_21parallel_save_sframesERKNSt3__16vectorINS_6sframeENS1_9allocatorIS3_EEEERNS_8oarchiveEbE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2]) {
    turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()(*result, v1);
  }
  return result;
}

uint64_t *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v12 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v12 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    uint64_t v8 = v6 - 296;
    std::string v9 = (void (***)(void))(v6 - 296);
    do
    {
      (**v9)(v9);
      v8 -= 296;
      BOOL v10 = v9 == (void (***)(void))v7;
      v9 -= 37;
    }
    while (!v10);
  }
  a2[1] = v7;
  unint64_t result = std::vector<turi::sframe>::resize(a2, v12);
  if (v12) {
    turi::sframe::load((turi::sframe *)*a2, a1);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable(uint64_t a1, unint64_t a2)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = 0;
  if (a2) {
    unint64_t v3 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a2, 0);
  }
  else {
    unint64_t v3 = 32;
  }
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable((uint64_t *)(a1 + 56), v3);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_22421ECC4(_Unwind_Exception *a1)
{
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2) {
    unint64_t v3 = (a2 - 1) / 0x30uLL + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(a1, v3, (uint64_t)v5);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)v5);
  return a1;
}

void sub_22421ED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = (a1[1] - *a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 16 * a2);
    }
  }
  else
  {
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__append(a1, a2 - v3, a3);
  }
}

uint64_t *std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__append(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result[2];
  uint64_t v7 = result[1];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      uint64_t v15 = v7 + 16 * a2;
      do
      {
        unint64_t result = (uint64_t *)_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v7, a3);
        v7 += 16;
        v14 -= 16;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    v5[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *result;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v6 - *result;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v9;
    }
    uint64_t v22 = result + 2;
    if (v12) {
      uint64_t v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v16 = (uint64_t)&v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    uint64_t v20 = v16;
    uint64_t v21 = &v13[16 * v12];
    uint64_t v17 = 16 * a2;
    unint64_t v18 = v16 + 16 * a2;
    do
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v16, a3);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    uint64_t v20 = v18;
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__swap_out_circular_buffer(v5, v19);
    return (uint64_t *)std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_22421EED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  int v4 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 8) = v4;
  if (v4)
  {
    group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, *(unsigned __int16 *)(a2 + 8));
    *(void *)a1 = group;
    std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(void *)a2, *(void *)a2 + 24 * *(unsigned __int16 *)(a2 + 8), (uint64_t)group);
  }
  int v6 = *(_DWORD *)(a2 + 10);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v6;
  return a1;
}

void *_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(uint64_t a1, unsigned int a2)
{
  uint64_t result = malloc_type_malloc(24 * a2, 0x10220405EB27603uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "sparsehash FATAL ERROR: failed to allocate %lu groups\n", a2);
    exit(1);
  }
  return result;
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = a3 + v3;
      *(void *)uint64_t v4 = 0;
      uint64_t v5 = (uint64_t *)(a1 + v3);
      *(_DWORD *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 12) = 0;
      if (a1 != a3)
      {
        uint64_t v6 = *v5;
        *(void *)(v4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(void *)uint64_t v4 = v6;
        LODWORD(v6) = *((unsigned __int8 *)v5 + 12);
        *(unsigned char *)(v4 + 12) = v6;
        BOOL v7 = v6 > 9;
        int v8 = (1 << v6) & 0x33C;
        if (!v7 && v8 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v4, 1uLL);
        }
      }
      *(void *)(v4 + 16) = v5[2];
      v3 += 24;
    }
    while (a1 + v3 != a2);
    a3 += v3;
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 16;
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v7 - 16, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 16;
      *((void *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22421F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(result);
    uint64_t result = *(void *)(a2 + 32) + 16;
  }
  return result;
}

uint64_t std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 16;
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(v4 - 16);
  }
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8);
        i != a2;
        _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(i))
  {
    i -= 16;
  }
  *(void *)(a1 + 8) = a2;
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    if (*(_WORD *)(a1 + 8))
    {
      uint64_t v3 = 24 * *(unsigned __int16 *)(a1 + 8);
      do
      {
        uint64_t v2 = (void *)(std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)v2) + 24);
        v3 -= 24;
      }
      while (v3);
      uint64_t v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
  }
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    free(v3);
  }
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::shared_ptr[abi:ne180100]<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22421F6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>> *,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::__shared_ptr_default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::allocator<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>> *,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::__shared_ptr_default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::allocator<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(a2 + 32);
    return MEMORY[0x22A614FA0](a2, 0x1022C400BF3CCBBLL);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable(uint64_t a1)
{
  atomic_ullong *volatile v3 = (void **)(a1 + 56);
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(a1 + 32);
  return a1;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize_delta(uint64_t a1, uint64_t a2)
{
  v18[5] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v4 = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::maybe_shrink(a1);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *(void *)(a1 + 88);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
  }
  unint64_t v6 = v5 + a2;
  if (*(void *)(a1 + 80) < 4uLL || v6 > *(void *)a1)
  {
    unint64_t v7 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, v6, 0);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v7 > v8)
    {
      unint64_t v9 = v7;
      unint64_t v10 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, *(void *)(a1 + 88) + a2 - *(void *)(a1 + 48), v8);
      unint64_t v11 = v10;
      BOOL v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(void *)(a1 + 88) + a2 - *(void *)(a1 + 48) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        unint64_t v11 = 2 * v10;
      }
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable((uint64_t)v16, 0, a1, v11);
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(a1, (uint64_t)v16);
      uint64_t v15 = (void **)v18;
      std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v15);
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)&v17);
      return 1;
    }
  }
  return v4;
}

void sub_22421F944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_noresize@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t position = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position((uint64_t)a1, a2);
  if (position == -1)
  {
    uint64_t result = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_at(a1, (uint64_t *)a2, v7, (uint64_t)v17);
    long long v14 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v14;
    *(void *)(a3 + 64) = v19;
    long long v15 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v15;
    char v11 = 1;
  }
  else
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, position, v16);
    uint64_t v8 = a1[7];
    uint64_t v9 = a1[8];
    *(void *)uint64_t v17 = a1;
    *(_OWORD *)&v17[8] = v16[0];
    *(_OWORD *)&v17[24] = v16[1];
    *(void *)&v17[40] = v8;
    *(void *)&long long v18 = v9;
    *((void *)&v18 + 1) = v9;
    uint64_t v19 = 0;
    uint64_t result = _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)v17);
    char v11 = 0;
    long long v12 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v12;
    *(void *)(a3 + 64) = v19;
    long long v13 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v13;
  }
  *(unsigned char *)(a3 + 72) = v11;
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::maybe_shrink(uint64_t a1)
{
  v11[5] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 88) - *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 80), v5 < 0x21))
  {
    uint64_t result = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable((uint64_t)v9, 0, a1, v5);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(a1, (uint64_t)v9);
    uint64_t v8 = (void **)v11;
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)&v10);
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_22421FB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64x2_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = a2 + 32;
  *(void *)&v15[5] = *(void *)(a1 + 37);
  *(void *)long long v15 = *(void *)(a1 + 32);
  v15[12] = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a1 + 44) = 0;
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(a1 + 32, (uint64_t *)(a2 + 32));
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(v7, (uint64_t *)v15);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)v15);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v12;
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v13;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 80))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = (atomic_ullong *volatile *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  if (a3 != a1)
  {
    uint64_t v10 = *(atomic_ullong **)(a3 + 32);
    *(void *)(a1 + 37) = *(void *)(a3 + 37);
    atomic_ullong *volatile *v9 = v10;
    unsigned int v11 = *(unsigned __int8 *)(a3 + 44);
    *(unsigned char *)(a1 + 44) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *(void *)(a1 + 48) = 0;
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable((uint64_t *)(a1 + 56), 0);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(unsigned char *)(a1 + 24) = 0;
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::move_from(a1, a2, (void *)a3, a4);
  return a1;
}

void sub_22421FD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::move_from(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::clear(a1);
  if (a2 == 1) {
    unint64_t v8 = a3[10];
  }
  else {
    unint64_t v8 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a3[11] - a3[6], a4);
  }
  if (v8 > *(void *)(a1 + 80))
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize((uint64_t *)(a1 + 56), v8);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::destructive_begin((uint64_t)a3, (uint64_t)v29);
  while (1)
  {
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v20 = a3;
    uint64_t v21 = v9;
    uint64_t v22 = v10;
    uint64_t v23 = v10;
    uint64_t v24 = 0;
    uint64_t v25 = v9;
    uint64_t v26 = v10;
    uint64_t v27 = v10;
    uint64_t v28 = 0;
    uint64x2_t result = (unsigned __int8 *)_tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)&v20);
    if (v30 != v21 || v31 != v22 || v32 != v23)
    {
      uint64x2_t result = (unsigned __int8 *)v33;
      goto LABEL_11;
    }
    if (v32 == v31) {
      break;
    }
    uint64x2_t result = (unsigned __int8 *)v33;
    if (v33 == v24) {
      break;
    }
LABEL_11:
    unint64_t v12 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(result);
    uint64_t v13 = *(void *)(a1 + 80) - 1;
    for (uint64_t i = 1; ; ++i)
    {
      unint64_t v15 = v12 & v13;
      unint64_t v16 = (v12 & v13) / 0x30;
      unint64_t v17 = (v12 & v13) % 0x30;
      uint64_t v18 = *(void *)(a1 + 56) + 16 * v16;
      if (((*(unsigned __int8 *)(v18 + (v17 >> 3) + 10) >> (v17 & 7)) & 1) == 0) {
        break;
      }
      unint64_t v12 = i + v15;
    }
    uint64_t v19 = *(unsigned __int16 *)(v18 + 8);
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(v18, (unsigned __int16)v17, v33);
    *(void *)(a1 + 88) = *(void *)(a1 + 88) - v19 + *(unsigned __int16 *)(*(void *)(a1 + 56) + 16 * v16 + 8);
    v33 += 3;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(&v30);
    _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)v29);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64x2_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 48) | *(void *)(a1 + 88))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v2 = *(void *)(a1 + 64);
    while (v3 != v2)
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(v3);
      *(void *)(v3 + 8) = 0;
      uint64_t v2 = *(void *)(a1 + 64);
      v3 += 16;
    }
    *(void *)(a1 + 88) = 0;
  }
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

void _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v10[0] = 0;
  v10[1] = 0;
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(a1, v4, (uint64_t)v10);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)v10);
  if (a1[3] > a2)
  {
    int v5 = a2 % 0x30;
    if (a2 % 0x30)
    {
      uint64_t v6 = a1[1] - 16;
      do
        _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase(v6, (unsigned __int16)v5++);
      while ((unsigned __int16)v5 != 48);
    }
    a1[4] = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    if (*a1 != v8)
    {
      uint64_t v9 = 0;
      do
      {
        v9 += *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
      }
      while (v7 != v8);
      a1[4] = v9;
    }
  }
  a1[3] = a2;
}

void sub_224220100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::destructive_begin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void **)(a1 + 56);
  int v5 = *(void **)(a1 + 64);
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  long long v10 = (unint64_t)v4;
  if (v4 == v5)
  {
    uint64_t v6 = v4;
  }
  else
  {
    *((void *)&v10 + 1) = *v4;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(&v9);
    unint64_t v4 = *(void **)(a1 + 56);
    uint64_t v6 = *(void **)(a1 + 64);
  }
  *(void *)a2 = a1;
  long long v7 = v10;
  *(_OWORD *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = 0;
  return _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(a2);
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + (a2 >> 3);
  int v4 = *(unsigned __int8 *)(v2 + 10);
  uint64_t v3 = (unsigned char *)(v2 + 10);
  int v5 = 1 << (a2 & 7);
  if ((v5 & v4) != 0)
  {
    unsigned int v7 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
    if (*(_WORD *)(a1 + 8) == 1)
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
      *(void *)a1 = 0;
    }
    else
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase_aux(a1, v7);
    }
    --*(_WORD *)(a1 + 8);
    *v3 &= ~(_BYTE)v5;
  }
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase_aux(uint64_t a1, unsigned int a2)
{
  group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) - 1));
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(void *)a1, *(void *)a1 + 24 * a2, (uint64_t)group);
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(void *)a1 + 24 * a2 + 24, *(void *)a1 + 24 * *(unsigned __int16 *)(a1 + 8), (uint64_t)group + 24 * a2);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
  *(void *)a1 = group;
}

uint64_t _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(void *a1)
{
  uint64_t v3 = a1 + 2;
  uint64_t result = a1[2];
  int v4 = (void *)(result + 8);
  if (v3[1] == *(void *)result + 24 * *(unsigned __int16 *)(result + 8))
  {
    do
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(result);
      void *v4 = 0;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t result = v6 + 16;
      a1[2] = v6 + 16;
      if (v6 + 16 == v5) {
        break;
      }
      int v7 = *(unsigned __int16 *)(v6 + 24);
      int v4 = (void *)(v6 + 24);
      a1[3] = *(v4 - 1);
    }
    while (!v7);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  for (uint64_t i = (void *)(result + 8);
        ;
        uint64_t result = _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(i))
  {
    if (v1[1] == v1[5])
    {
      uint64_t v3 = v1[2];
      if (v3 == v1[6])
      {
        uint64_t v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8])) {
          break;
        }
      }
    }
    if (!*(void *)(*v1 + 48)) {
      break;
    }
    uint64_t result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!result) {
      break;
    }
    v1[4] += 24;
  }
  return result;
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 10;
  unsigned int v7 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
  unsigned int v8 = v7;
  long long v9 = (unsigned char *)(v6 + (a2 >> 3));
  int v10 = 1 << (a2 & 7);
  if ((v10 & *v9) != 0)
  {
    uint64_t v11 = v7;
    std::pair<turi::flexible_type const,unsigned long>::~pair(*(void *)a1 + 24 * v7);
  }
  else
  {
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set_aux(a1, v7);
    ++*(_WORD *)(a1 + 8);
    *v9 |= v10;
    uint64_t v11 = v8;
  }
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)a1 + 24 * v11;
  *(void *)uint64_t v13 = 0;
  *(_DWORD *)(v13 + 8) = 0;
  *(unsigned char *)(v13 + 12) = 0;
  if ((uint64_t *)v13 != a3)
  {
    uint64_t v14 = *a3;
    *(void *)(v13 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(void *)uint64_t v13 = v14;
    unsigned int v15 = *((unsigned __int8 *)a3 + 12);
    *(unsigned char *)(v13 + 12) = v15;
    if (v15 <= 9 && ((1 << v15) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v13, 1uLL);
    }
  }
  *(void *)(v12 + 24 * v11 + 16) = a3[2];
  return *(void *)a1 + 24 * v11;
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set_aux(uint64_t a1, unsigned int a2)
{
  group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) + 1));
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(void *)a1, *(void *)a1 + 24 * a2, (uint64_t)group);
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(void *)a1 + 24 * a2, *(void *)a1 + 24 * *(unsigned __int16 *)(a1 + 8), (uint64_t)group + 24 * a2 + 24);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
  *(void *)a1 = group;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unsigned int v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            uint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              void v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            unsigned int v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  return a1;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_at@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[11] - a1[6] >= 0xAAAAAAAAAAAAAAAuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
  }
  if (_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted((uint64_t)a1, a3))--a1[6]; {
  uint64_t v8 = a1[7] + 16 * (a3 / 0x30);
  }
  uint64_t v9 = *(unsigned __int16 *)(v8 + 8);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(v8, a3 % 0x30, a2);
  a1[11] = a1[11] - v9 + *(unsigned __int16 *)(a1[7] + 16 * (a3 / 0x30) + 8);
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, a3, v15);
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  *(void *)a4 = a1;
  long long v12 = v15[1];
  *(_OWORD *)(a4 + 8) = v15[0];
  *(_OWORD *)(a4 + 24) = v12;
  *(void *)(a4 + 40) = v10;
  *(void *)(a4 + 48) = v11;
  *(void *)(a4 + 56) = v11;
  *(void *)(a4 + 64) = 0;
  return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(a4);
}

void sub_2242208D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,void>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  atomic_ullong *volatile v7 = operator new(0x130uLL);
  std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,std::allocator<turi::sarray<turi::flexible_type>>,0>(v7, a2, a3, a4);
}

void sub_22422094C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,std::allocator<turi::sarray<turi::flexible_type>>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D759AA8;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2, *a3, *a4);
}

void sub_2242209B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 40) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *unint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_224220C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

__n128 OUTLINED_FUNCTION_5_4(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_9_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t std::map<std::string,turi::flexible_type>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

turi::supervised_2::linear_regression *turi::supervised_2::linear_regression::linear_regression(turi::supervised_2::linear_regression *this)
{
  uint64_t v2 = turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(this);
  *(void *)uint64_t v2 = &unk_26D771FB0;
  *((void *)v2 + 103) = 0;
  *((void *)v2 + 105) = 0;
  *((void *)v2 + 104) = 0;
  unint64_t v3 = turi::thread::cpu_count(v2);
  std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::vector((void *)this + 106, v3);
  *((void *)this + 109) = 0;
  *((unsigned char *)this + 880) = 1;
  return this;
}

void sub_224220D34(_Unwind_Exception *a1)
{
  free(v1[103]);
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base((turi::supervised_2::supervised_learning_model_base *)v1);
  _Unwind_Resume(a1);
}

turi::supervised_2::supervised_learning_model_base *turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(turi::supervised_2::supervised_learning_model_base *this)
{
  *((void *)this + 5) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 8) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = (char *)this + 280;
  *((void *)this + 35) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *(void *)this = &unk_26D77FF20;
  *((unsigned char *)this + 320) = 1;
  *((void *)this + 41) = 0;
  *((unsigned char *)this + 336) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((unsigned char *)this + 360) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  turi::ml_data::ml_data((turi::supervised_2::supervised_learning_model_base *)((char *)this + 384));
  turi::ml_data::ml_data((turi::supervised_2::supervised_learning_model_base *)((char *)this + 576));
  *((void *)this + 102) = 0;
  *((void *)this + 101) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((void *)this + 100) = (char *)this + 808;
  return this;
}

void sub_224220E60(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;
  turi::ml_data::~ml_data(v3);
  free(*(void **)(v1 + 368));
  free(*(void **)(v1 + 344));
  turi::ml_model_base::~ml_model_base((char **)v1);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(turi::supervised_2::supervised_learning_model_base *this)
{
  *(void *)this = &unk_26D77FF20;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v11 = (void **)((char *)this + 728);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v11 = (void **)((char *)this + 680);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  atomic_ullong *volatile v5 = (void *)*((void *)this + 80);
  if (v5)
  {
    *((void *)this + 81) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  atomic_ullong *volatile v7 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v11 = (void **)((char *)this + 536);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v11 = (void **)((char *)this + 488);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unint64_t v9 = (void *)*((void *)this + 56);
  if (v9)
  {
    *((void *)this + 57) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  free(*((void **)this + 46));
  free(*((void **)this + 43));
  *(void *)this = &unk_26D753F98;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  uint64_t v11 = (void **)((char *)this + 248);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 224, *((char **)this + 29));
  turi::model_base::~model_base(this);
}

void turi::supervised_2::linear_regression::~linear_regression(turi::supervised_2::linear_regression *this)
{
  *(void *)this = &unk_26D771FB0;
  uint64_t v2 = *((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 848);
  std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  free(*((void **)this + 103));
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  uint64_t vars8;

  turi::supervised_2::linear_regression::~linear_regression(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised_2::linear_regression::internal_init_options(turi::supervised_2::linear_regression *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v41, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  uint64_t v2 = (turi::supervised_2::linear_regression *)((char *)this + 224);
  int v50 = 0;
  char v51 = 1;
  uint64_t v49 = 0x3F1A36E2EB1C432DLL;
  turi::option_manager::create_real_option(v2, &v41, &__p, (uint64_t)&v49, 0, 1.0e-10, 1.0e20);
  switch(v51)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v3 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      if (*(char *)(v49 + 31) < 0) {
        operator delete(*(void **)(v49 + 8));
      }
      unint64_t v4 = (void *)v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v6 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v7 = *(void **)(v49 + 8);
      if (v7)
      {
        *(void *)(v49 + 16) = v7;
        operator delete(v7);
      }
      unint64_t v4 = (void *)v6;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      v39[0] = (void *)(v49 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      v39[0] = (void *)(v49 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_18:
      unint64_t v4 = (void *)v8;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v49 + 16));
      unint64_t v4 = (void *)v9;
      unsigned int v10 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v49;
      if (!v49) {
        goto LABEL_33;
      }
      uint8x8_t v12 = *(void **)(v49 + 48);
      if (v12)
      {
        *(void *)(v49 + 56) = v12;
        operator delete(v12);
      }
      unint64_t v13 = (void *)v11[3];
      if (v13)
      {
        void v11[4] = v13;
        operator delete(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)v11[2];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      unint64_t v4 = v11;
      unsigned int v10 = 2071181815;
LABEL_31:
      uint64_t v5 = v10 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_33:
      uint64_t v49 = 0;
      int v50 = 0;
      char v51 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v41, "step_size");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver.");
      int v47 = 0;
      char v48 = 1;
      uint64_t v46 = 0x3FF0000000000000;
      turi::option_manager::create_real_option(v2, &v41, &__p, (uint64_t)&v46, 0, 1.0e-10, 1.0e20);
      switch(v48)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v15 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          if (*(char *)(v46 + 31) < 0) {
            operator delete(*(void **)(v46 + 8));
          }
          unint64_t v16 = (void *)v15;
          uint64_t v17 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v18 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          long long v19 = *(void **)(v46 + 8);
          if (v19)
          {
            *(void *)(v46 + 16) = v19;
            operator delete(v19);
          }
          unint64_t v16 = (void *)v18;
          uint64_t v17 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          v39[0] = (void *)(v46 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
          goto LABEL_54;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          v39[0] = (void *)(v46 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_54:
          unint64_t v16 = (void *)v20;
          uint64_t v17 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v21 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v46 + 16));
          unint64_t v16 = (void *)v21;
          unsigned int v22 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          unint64_t v23 = (void *)v46;
          if (!v46) {
            goto LABEL_69;
          }
          unint64_t v24 = *(void **)(v46 + 48);
          if (v24)
          {
            *(void *)(v46 + 56) = v24;
            operator delete(v24);
          }
          size_t v25 = (void *)v23[3];
          if (v25)
          {
            void v23[4] = v25;
            operator delete(v25);
          }
          uint64_t v26 = (std::__shared_weak_count *)v23[2];
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          unint64_t v16 = v23;
          unsigned int v22 = 2071181815;
LABEL_67:
          uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v16, v17);
LABEL_69:
          uint64_t v46 = 0;
          int v47 = 0;
          char v48 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v41, "lbfgs_memory_level");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
          char v45 = 0;
          int v44 = 0;
          uint64_t v43 = 11;
          turi::option_manager::create_integer_option(v2, &v41, &__p, (uint64_t)&v43, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
          switch(v45)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v27 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              if (*(char *)(v43 + 31) < 0) {
                operator delete(*(void **)(v43 + 8));
              }
              unint64_t v28 = (void *)v27;
              uint64_t v29 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v30 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              uint64_t v31 = *(void **)(v43 + 8);
              if (v31)
              {
                *(void *)(v43 + 16) = v31;
                operator delete(v31);
              }
              unint64_t v28 = (void *)v30;
              uint64_t v29 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              v39[0] = (void *)(v43 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
              goto LABEL_90;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              v39[0] = (void *)(v43 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_90:
              unint64_t v28 = (void *)v32;
              uint64_t v29 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v33 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v43 + 16));
              unint64_t v28 = (void *)v33;
              unsigned int v34 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v35 = (void *)v43;
              if (!v43) {
                goto LABEL_105;
              }
              uint64_t v36 = *(void **)(v43 + 48);
              if (v36)
              {
                *(void *)(v43 + 56) = v36;
                operator delete(v36);
              }
              long long v37 = (void *)v35[3];
              if (v37)
              {
                void v35[4] = v37;
                operator delete(v37);
              }
              uint64_t v38 = (std::__shared_weak_count *)v35[2];
              if (v38) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
              }
              unint64_t v28 = v35;
              unsigned int v34 = 2071181815;
LABEL_103:
              uint64_t v29 = v34 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v28, v29);
LABEL_105:
              uint64_t v43 = 0;
              int v44 = 0;
              char v45 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v41.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
              std::string::basic_string[abi:ne180100]<0>(v39, "Solver used for training the logistic regression model.");
              turi::flexible_type::flexible_type((turi::flexible_type *)&v42, "auto");
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_224222138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,int a30,char a31,void *a32,int a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  switch(a28)
  {
    case 2:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 3:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    case 8:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    default:
      break;
  }
  a26 = 0;
  a27 = 0;
  a28 = 0;
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::supervised_2::linear_regression::internal_setup_iterative_training(turi::supervised_2::linear_regression *this, int a2)
{
  *((void *)this + 105) = *((void *)this + 41) + 1;
  unint64_t v4 = (uint64_t **)((char *)this + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  uint64_t v21 = __p;
  uint64_t v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v5 + 14, (void *)this + 105);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "internal_setup_iterative_training", 109, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Beginning model training on processed features. ", 48);
    }
    unsigned int v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a2)
  {
    if (*((void *)this + 104) != *((void *)this + 105)) {
      turi::supervised_2::linear_regression::internal_setup_iterative_training(BOOL)::$_0::operator()();
    }
  }
  else
  {
    uint64_t v12 = *((void *)this + 105);
    if (*((void *)this + 104) != v12)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)this + 103, *((void *)this + 105), 1);
      uint64_t v12 = *((void *)this + 104);
    }
    unint64_t v13 = (char *)*((void *)this + 103);
    if (v12 >= 0) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = v12 + 1;
    }
    int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 >= 2)
    {
      unint64_t v16 = 2;
      if (v15 > 2) {
        unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v13, ((8 * v16 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v15 < v12) {
      bzero(&v13[16 * (v14 >> 1)], 8 * v12 - 16 * (v14 >> 1));
    }
  }
  return turi::supervised_2::linear_regression::setup_solver(this);
}

void sub_224222CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t turi::supervised_2::linear_regression::setup_solver(turi::supervised_2::linear_regression *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v33, "solver");
  uint64_t v2 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v33.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      *(void *)std::string __str = *MEMORY[0x263F8C2B8];
      uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)&__str[*(void *)(*(void *)__str - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
      *(void *)&__str[16] = v5;
      *(void *)&__str[24] = MEMORY[0x263F8C318] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v32);
      break;
    case 2:
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 + 8);
        v25.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v4;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(void *)v2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v2, &v25);
      break;
    case 7:
      memset(&v25, 0, sizeof(v25));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (void *)(*(void *)v2 + 8));
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_54:
      __break(1u);
      return result;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "l2_penalty");
  uint64_t v6 = (unsigned char *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v23);
  switch(v6[12])
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_41;
    case 2:
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = (char **)(*(void *)v6 + 8);
      size_t __idx = 0;
      unsigned int v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0) {
        unsigned int v10 = *v9;
      }
      std::string::basic_string[abi:ne180100]<0>(__str, v10);
      std::stod((const std::string *)__str, &__idx);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (*(char *)(v8 + 31) < 0) {
        uint64_t v11 = *(void *)(v8 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v21 = std::string::append(&v33, " cannot be interpreted as a float");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(void *)&__str[16] = *((void *)&v21->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __str = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__str);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_41;
    case 3:
      uint64_t v7 = *(void *)v6;
      memset(__str, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(void *)__str)
      {
        *(void *)&__str[8] = *(void *)__str;
        operator delete(*(void **)__str);
      }
      goto LABEL_41;
    case 4:
      uint64_t v12 = *(void *)v6;
      memset(__str, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_41;
    case 5:
      uint64_t v13 = *(void *)v6;
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_41;
    case 8:
      uint64_t v14 = *(void *)v6;
      uint64_t v15 = *(void *)(*(void *)v6 + 16);
      *(void *)std::string __str = *(void *)(*(void *)v6 + 8);
      *(void *)&__str[8] = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 56);
      long long v28 = *(_OWORD *)(v14 + 40);
      long long v29 = v17;
      *(_OWORD *)&__str[16] = v16;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
      goto LABEL_41;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)v6 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v28 + 1))
      {
        *(void *)&long long v29 = *((void *)&v28 + 1);
        operator delete(*((void **)&v28 + 1));
      }
      if (*(void *)&__str[16])
      {
        *(void *)&__str[24] = *(void *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      if (*(void *)&__str[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
      }
LABEL_41:
      if (v24 < 0) {
        operator delete(v23);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v25.__r_.__value_.__l.__size_ != 4) {
          goto LABEL_50;
        }
        uint64_t v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) != 4) {
          goto LABEL_50;
        }
        uint64_t v18 = &v25;
      }
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 1869903201) {
        MEMORY[0x22A614700](&v25, "lbfgs");
      }
LABEL_50:
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(__str, "solver");
    default:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_54;
  }
}

void sub_22422368C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 89) < 0)
  {
    operator delete(*(void **)(v36 - 112));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a19 < 0) {
        operator delete(a14);
      }
      if (a25 < 0) {
        operator delete(a20);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

double turi::supervised_2::linear_regression::internal_next_training_iteration@<D0>(turi::supervised_2::linear_regression *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(**((void **)this + 109) + 24))(*((void *)this + 109));
  uint64_t v4 = *((void *)this + 109);
  if ((*(_DWORD *)(v4 + 120) - 6) <= 2) {
    turi::supervised_2::linear_regression::internal_next_training_iteration(void)::$_0::operator()();
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "residual");
  long long v28 = __p;
  uint64_t v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v5 + 14, (void *)(v4 + 80));
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "training_loss");
  long long v28 = __p;
  uint64_t v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v6 + 14, (void *)(v4 + 88));
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_function_evaluations");
  long long v28 = __p;
  uint64_t v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v7 + 14, (void *)(v4 + 96));
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "step_size");
  long long v28 = __p;
  uint64_t v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v8 + 14, (void *)(v4 + 112));
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v10 = (void *)((char *)this + 824);
  uint64_t v12 = *(long long **)(v4 + 24);
  uint64_t v11 = *(void *)(v4 + 32);
  if (*((void *)this + 104) != v11)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)this + 103, v11, 1);
    uint64_t v11 = *((void *)this + 104);
  }
  uint64_t v13 = (_OWORD *)*v10;
  if (v11 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v11 + 1;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    int64_t v16 = 0;
    long long v17 = (_OWORD *)*v10;
    uint64_t v18 = v12;
    do
    {
      long long v19 = *v18++;
      double result = *(double *)&v19;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  BOOL v20 = __OFSUB__(v11, v15);
  uint64_t v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    uint64_t v22 = v14 >> 1;
    unint64_t v23 = (double *)&v12[v14 >> 1];
    char v24 = (double *)&v13[v22];
    do
    {
      double v25 = *v23++;
      double result = v25;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  return result;
}

void sub_224223B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::internal_predict(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  thread_compute_buffer = turi::supervised_2::linear_regression::get_thread_compute_buffer((turi::supervised_2::linear_regression *)a1);
  if (*(unsigned char *)(a1 + 880))
  {
    uint64_t v8 = *((void *)thread_compute_buffer + 7);
    uint64_t v7 = *((void *)thread_compute_buffer + 8);
    uint64_t v9 = (uint64_t *)(thread_compute_buffer + 56);
    if (v7 >= 0) {
      uint64_t v10 = *((void *)thread_compute_buffer + 8);
    }
    else {
      uint64_t v10 = v7 + 1;
    }
    int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      unint64_t v12 = 2;
      if (v11 > 2) {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(*((void **)thread_compute_buffer + 7), ((8 * v12 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v11 < v7) {
      bzero((void *)(v8 + 16 * (v10 >> 1)), 8 * v7 - 16 * (v10 >> 1));
    }
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v13 = *a2;
      uint64_t v14 = *(void *)(*a2 + 56);
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(v13 + 96) + 8 * a2[2] + 8 * (*(unsigned char *)(v13 + 18) == 0);
        uint64_t v17 = *(void *)(v13 + 72);
        uint64_t v18 = *v9;
        do
        {
          uint64_t v19 = *(void *)(v17 + 16 * v15);
          unint64_t v20 = *(void *)(v19 + 64);
          uint64_t v21 = *(void *)(v19 + 104);
          switch(*(_DWORD *)(v19 + 24))
          {
            case 0:
              double v22 = *(double *)v16;
              v16 += 8;
              double v23 = v22;
              if (v20)
              {
                if (*(unsigned char *)(a1 + 360)) {
                  double v23 = v23 * *(double *)(*(void *)(a1 + 368) + 8 * v21);
                }
                goto LABEL_55;
              }
              break;
            case 1:
              double v25 = *(double *)v16;
              v16 += 8;
              double v24 = v25;
              if (*(void *)&v25 < v20)
              {
                v21 += *(void *)&v24;
                if (*(unsigned char *)(a1 + 360)) {
                  double v23 = *(double *)(*(void *)(a1 + 368) + 8 * v21);
                }
                else {
                  double v23 = 1.0;
                }
LABEL_55:
                *(double *)(v18 + 8 * v21) = v23;
              }
              break;
            case 2:
              uint64_t v26 = *(void *)(v19 + 72);
              if (v26)
              {
                uint64_t v27 = 0;
                unint64_t v28 = 0;
                uint64_t v29 = 8 * v21;
                uint64_t v30 = *v9 + 8 * v21;
                do
                {
                  if (v28 < v20)
                  {
                    double v31 = *(double *)(v16 + 8 * v28);
                    if (*(unsigned char *)(a1 + 360)) {
                      double v31 = v31 * *(double *)(*(void *)(a1 + 368) + v29 + 8 * v28);
                    }
                    *(double *)(v30 + 8 * v28) = v31;
                  }
                  ++v28;
                  v27 -= 8;
                }
                while (v26 != v28);
                goto LABEL_53;
              }
              break;
            case 3:
              double v33 = *(double *)v16;
              v16 += 8;
              double v32 = v33;
              if (v33 != 0.0)
              {
                uint64_t v34 = *v9;
                do
                {
                  if (*(void *)v16 < v20)
                  {
                    uint64_t v35 = *(void *)v16 + v21;
                    if (*(unsigned char *)(a1 + 360)) {
                      double v36 = *(double *)(*(void *)(a1 + 368) + 8 * v35);
                    }
                    else {
                      double v36 = 1.0;
                    }
                    *(double *)(v34 + 8 * v35) = v36;
                  }
                  v16 += 8;
                  --*(void *)&v32;
                }
                while (v32 != 0.0);
              }
              break;
            case 4:
              double v38 = *(double *)v16;
              v16 += 8;
              double v37 = v38;
              if (v38 != 0.0)
              {
                uint64_t v39 = *v9;
                do
                {
                  if (*(void *)v16 < v20)
                  {
                    double v40 = *(double *)(v16 + 8);
                    uint64_t v41 = *(void *)v16 + v21;
                    if (*(unsigned char *)(a1 + 360)) {
                      double v40 = v40 * *(double *)(*(void *)(a1 + 368) + 8 * v41);
                    }
                    *(double *)(v39 + 8 * v41) = v40;
                  }
                  v16 += 16;
                  --*(void *)&v37;
                }
                while (v37 != 0.0);
              }
              break;
            case 7:
              uint64_t v42 = *(void *)(v19 + 72);
              if (v42)
              {
                uint64_t v27 = 0;
                unint64_t v43 = 0;
                uint64_t v44 = 8 * v21;
                uint64_t v45 = *v9 + 8 * v21;
                do
                {
                  if (v43 < v20)
                  {
                    double v46 = *(double *)(v16 + 8 * v43);
                    if (*(unsigned char *)(a1 + 360)) {
                      double v46 = v46 * *(double *)(*(void *)(a1 + 368) + v44 + 8 * v43);
                    }
                    *(double *)(v45 + 8 * v43) = v46;
                  }
                  ++v43;
                  v27 -= 8;
                }
                while (v42 != v43);
LABEL_53:
                v16 -= v27;
              }
              break;
            default:
              break;
          }
          ++v15;
        }
        while (v15 != v14);
      }
    }
    uint64_t v47 = *v9;
    *(void *)(*v9 + 8 * *(void *)(a1 + 328)) = 0x3FF0000000000000;
    v94[0] = v9;
    v94[1] = a1 + 824;
    if (*(void *)(a1 + 832))
    {
      uint64_t v48 = *(void *)(a1 + 824);
      v95[1] = v47;
      void v95[3] = v48;
      v95[5] = v94;
      double v49 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v95);
    }
    else
    {
      double v49 = 0.0;
    }
  }
  else
  {
    uint64_t v90 = thread_compute_buffer;
    uint64_t v91 = a3;
    int v50 = (uint64_t *)(thread_compute_buffer + 80);
    *((void *)thread_compute_buffer + 12) = 0;
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v51 = *a2;
      uint64_t v52 = *(void *)(*a2 + 56);
      if (v52)
      {
        uint64_t v53 = 0;
        uint64_t v54 = *(void *)(v51 + 96) + 8 * a2[2] + 8 * (*(unsigned char *)(v51 + 18) == 0);
        uint64_t v92 = v52;
        uint64_t v93 = v51;
        do
        {
          uint64_t v55 = *(void *)(*(void *)(v51 + 72) + 16 * v53);
          unint64_t v56 = *(void *)(v55 + 64);
          uint64_t v57 = *(void *)(v55 + 104);
          switch(*(_DWORD *)(v55 + 24))
          {
            case 0:
              double v58 = *(double *)v54;
              v54 += 8;
              double v59 = v58;
              if (v56)
              {
                if (*(unsigned char *)(a1 + 360)) {
                  double v59 = v59 * *(double *)(*(void *)(a1 + 368) + 8 * v57);
                }
                uint64_t v60 = (int)v57;
                goto LABEL_70;
              }
              break;
            case 1:
              double v62 = *(double *)v54;
              v54 += 8;
              double v61 = v62;
              if (*(void *)&v62 < v56)
              {
                uint64_t v63 = *(void *)&v61 + v57;
                if (*(unsigned char *)(a1 + 360))
                {
                  double v59 = *(double *)(*(void *)(a1 + 368) + 8 * v63);
                  uint64_t v60 = (int)v63;
LABEL_70:
                  v95[0] = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v60, v95) = v59;
                }
                else
                {
                  v95[0] = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v63, v95) = 0x3FF0000000000000;
                }
              }
              break;
            case 2:
              uint64_t v64 = *(void *)(v55 + 72);
              if (v64)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v67 = v57 << 32;
                uint64_t v68 = 8 * v57;
                do
                {
                  if (v66 < v56)
                  {
                    double v69 = *(double *)(v54 + 8 * v66);
                    if (*(unsigned char *)(a1 + 360)) {
                      double v69 = v69 * *(double *)(*(void *)(a1 + 368) + v68 + 8 * v66);
                    }
                    v95[0] = 0;
                    *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v67 >> 32, v95) = v69;
                  }
                  ++v66;
                  v67 += 0x100000000;
                  v65 -= 8;
                }
                while (v64 != v66);
                goto LABEL_100;
              }
              break;
            case 3:
              double v71 = *(double *)v54;
              v54 += 8;
              for (double i = v71; i != 0.0; --*(void *)&i)
              {
                if (*(void *)v54 < v56)
                {
                  uint64_t v72 = *(void *)v54 + v57;
                  if (*(unsigned char *)(a1 + 360))
                  {
                    uint64_t v73 = *(void *)(*(void *)(a1 + 368) + 8 * v72);
                    v95[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v72, v95) = v73;
                  }
                  else
                  {
                    v95[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v72, v95) = 0x3FF0000000000000;
                  }
                }
                v54 += 8;
              }
              break;
            case 4:
              double v75 = *(double *)v54;
              v54 += 8;
              for (double j = v75; j != 0.0; --*(void *)&j)
              {
                if (*(void *)v54 < v56)
                {
                  double v76 = *(double *)(v54 + 8);
                  uint64_t v77 = *(void *)v54 + v57;
                  if (*(unsigned char *)(a1 + 360)) {
                    double v76 = v76 * *(double *)(*(void *)(a1 + 368) + 8 * v77);
                  }
                  v95[0] = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v77, v95) = v76;
                }
                v54 += 16;
              }
              break;
            case 7:
              uint64_t v78 = *(void *)(v55 + 72);
              if (v78)
              {
                uint64_t v65 = 0;
                unint64_t v79 = 0;
                uint64_t v80 = v57 << 32;
                uint64_t v81 = 8 * v57;
                do
                {
                  if (v79 < v56)
                  {
                    double v82 = *(double *)(v54 + 8 * v79);
                    if (*(unsigned char *)(a1 + 360)) {
                      double v82 = v82 * *(double *)(*(void *)(a1 + 368) + v81 + 8 * v79);
                    }
                    v95[0] = 0;
                    *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v80 >> 32, v95) = v82;
                  }
                  ++v79;
                  v80 += 0x100000000;
                  v65 -= 8;
                }
                while (v78 != v79);
LABEL_100:
                v54 -= v65;
                uint64_t v52 = v92;
                uint64_t v51 = v93;
              }
              break;
            default:
              break;
          }
          ++v53;
        }
        while (v53 != v52);
      }
    }
    uint64_t v83 = *(int *)(a1 + 328);
    v95[0] = 0;
    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v83, v95) = 0x3FF0000000000000;
    uint64_t v84 = v90[12];
    if (v84 < 1)
    {
      double v49 = 0.0;
      a3 = v91;
    }
    else
    {
      uint64_t v85 = (double *)v90[10];
      atomic_ullong *volatile v86 = (int *)v90[11];
      double v49 = 0.0;
      a3 = v91;
      do
      {
        double v87 = *v85++;
        double v88 = v87;
        uint64_t v89 = *v86++;
        double v49 = v49 + v88 * *(double *)(*(void *)(a1 + 824) + 8 * v89);
        --v84;
      }
      while (v84);
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v49;
}

unsigned char *turi::supervised_2::linear_regression::get_thread_compute_buffer(turi::supervised_2::linear_regression *this)
{
  uint64_t v2 = *(void *)turi::thread::get_tls_data(this);
  uint64_t v3 = *((void *)this + 106);
  uint64_t v4 = (unsigned char *)(v3 + 120 * v2);
  if (!*v4)
  {
    if (*((unsigned char *)this + 880))
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(v3 + 120 * v2 + 56), *((void *)this + 41) + 1);
    }
    else
    {
      uint64_t v6 = v3 + 120 * v2;
      *(void *)(v6 + 112) = *((void *)this + 41) + 1;
      *(void *)(v6 + 96) = 0;
    }
    unsigned char *v4 = 1;
  }
  return v4;
}

void *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (result[1] != a2)
  {
    free((void *)*result);
    if (a2)
    {
      if (a2 >> 61 || (double result = malloc_type_malloc(8 * a2, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v5 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v5, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      double result = 0;
    }
    *uint64_t v3 = result;
  }
  v3[1] = a2;
  return result;
}

void std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(&v2, a2);
}

void turi::supervised_2::linear_regression::setup_solver(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised_2::linear_regression::setup_solver(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224224470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::lr_optimization_interface::~lr_optimization_interface(turi::supervised_2::linear_regression::lr_optimization_interface *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised_2::linear_regression::lr_optimization_interface::compute_first_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 880)) {
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(v4, a2, a4, a3, 0);
  }
  else {
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(v4, a2, a4, a3, 0);
  }
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, uint64_t a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  BOOL v98 = a5 != 0;
  gettimeofday(&v97, 0);
  gettimeofday(&v99, 0);
  uint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 326, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    }
    uint64_t v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        uint64_t v15 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = &unk_26D772A58;
  v16[1] = a1;
  _OWORD v16[2] = &v98;
  void v16[3] = a2;
  uint64_t v100 = v16;
  turi::in_parallel((turi::thread_pool *)&v99);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v99);
  uint64_t v17 = *(double **)(a1 + 848);
  *a3 = v17[6];
  uint64_t v19 = (float64x2_t *)*((void *)v17 + 1);
  uint64_t v18 = *((void *)v17 + 2);
  if (a4[1] != (float64x2_t *)v18)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v18, 1);
    uint64_t v18 = (uint64_t)a4[1];
  }
  unint64_t v20 = *a4;
  if (v18 >= 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v18 + 1;
  }
  int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (v18 >= 2)
  {
    int64_t v23 = 0;
    double v24 = *a4;
    double v25 = v19;
    do
    {
      float64x2_t v26 = *v25++;
      *v24++ = v26;
      v23 += 2;
    }
    while (v23 < v22);
  }
  BOOL v27 = __OFSUB__(v18, v22);
  uint64_t v28 = v18 - v22;
  if (!((v28 < 0) ^ v27 | (v28 == 0)))
  {
    uint64_t v29 = v21 >> 1;
    uint64_t v30 = (uint64_t *)&v19[v21 >> 1];
    f64 = (void *)v20[v29].f64;
    do
    {
      uint64_t v32 = *v30++;
      *f64++ = v32;
      --v28;
    }
    while (v28);
  }
  if (a5)
  {
    double v33 = *(void **)(a1 + 848);
    uint64_t v35 = (float64x2_t *)v33[3];
    uint64_t v34 = v33[4];
    uint64_t v36 = v33[5];
    if (a5[1] != (float64x2_t *)v34 || a5[2] != (float64x2_t *)v36)
    {
      if (v34) {
        BOOL v38 = v36 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v36 < v34)
      {
        atomic_ullong *volatile v95 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v96 = std::bad_alloc::bad_alloc(v95);
        __cxa_throw(v96, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v36 * v34, v34, v36);
      uint64_t v34 = (uint64_t)a5[1];
      uint64_t v36 = (uint64_t)a5[2];
    }
    uint64_t v39 = *a5;
    uint64_t v40 = v34 * v36;
    if (v34 * v36 >= 0) {
      uint64_t v41 = v34 * v36;
    }
    else {
      uint64_t v41 = v40 + 1;
    }
    int64_t v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
    if (v40 >= 2)
    {
      int64_t v43 = 0;
      uint64_t v44 = *a5;
      uint64_t v45 = v35;
      do
      {
        float64x2_t v46 = *v45++;
        *v44++ = v46;
        v43 += 2;
      }
      while (v43 < v42);
    }
    BOOL v47 = v40 <= v42;
    uint64_t v48 = v40 - v42;
    if (!v47)
    {
      uint64_t v49 = v41 >> 1;
      int v50 = (uint64_t *)&v35[v41 >> 1];
      uint64_t v51 = (void *)v39[v49].f64;
      do
      {
        uint64_t v52 = *v50++;
        *v51++ = v52;
        --v48;
      }
      while (v48);
    }
  }
  uint64_t v53 = *(void *)(a1 + 848);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 856) - v53) >> 3) >= 2)
  {
    unint64_t v54 = 1;
    do
    {
      uint64_t v55 = v53 + 120 * v54;
      *a3 = *(double *)(v55 + 48) + *a3;
      unint64_t v56 = *(float64x2_t **)(v55 + 8);
      uint64_t v57 = *a4;
      uint64_t v58 = (uint64_t)a4[1];
      if (v58 >= 0) {
        uint64_t v59 = (uint64_t)a4[1];
      }
      else {
        uint64_t v59 = v58 + 1;
      }
      int64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
      if (v58 >= 2)
      {
        int64_t v61 = 0;
        double v62 = *a4;
        uint64_t v63 = v56;
        do
        {
          float64x2_t v64 = *v63++;
          *double v62 = vaddq_f64(v64, *v62);
          ++v62;
          v61 += 2;
        }
        while (v61 < v60);
      }
      BOOL v47 = v58 <= v60;
      uint64_t v65 = v58 - v60;
      if (!v47)
      {
        uint64_t v66 = v59 >> 1;
        uint64_t v67 = v56[v66].f64;
        uint64_t v68 = v57[v66].f64;
        do
        {
          double v69 = *v67++;
          *uint64_t v68 = v69 + *v68;
          ++v68;
          --v65;
        }
        while (v65);
      }
      if (a5)
      {
        uint64_t v70 = *(void *)(*(void *)(a1 + 848) + 120 * v54 + 24);
        double v71 = *a5;
        uint64_t v72 = a5[1];
        uint64_t v73 = (void)a5[2] * (void)v72;
        if (v73 >= 0) {
          uint64_t v74 = (void)a5[2] * (void)v72;
        }
        else {
          uint64_t v74 = v73 + 1;
        }
        int64_t v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
        if (v73 >= 2)
        {
          int64_t v76 = 0;
          uint64_t v77 = *a5;
          uint64_t v78 = *(float64x2_t **)(*(void *)(a1 + 848) + 120 * v54 + 24);
          do
          {
            float64x2_t v79 = *v78++;
            *uint64_t v77 = vaddq_f64(v79, *v77);
            ++v77;
            v76 += 2;
          }
          while (v76 < v75);
        }
        BOOL v47 = v73 <= v75;
        uint64_t v80 = v73 - v75;
        if (!v47)
        {
          uint64_t v81 = v74 >> 1;
          double v82 = (double *)(v70 + 16 * v81);
          uint64_t v83 = v71[v81].f64;
          do
          {
            double v84 = *v82++;
            *uint64_t v83 = v84 + *v83;
            ++v83;
            --v80;
          }
          while (v80);
        }
      }
      ++v54;
      uint64_t v53 = *(void *)(a1 + 848);
    }
    while (v54 < 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 856) - v53) >> 3));
  }
  uint64_t v85 = (int *)global_logger();
  if (v85[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v85)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v86 = (file_logger *)global_logger();
    double v87 = file_logger::start_stream(v86, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 388, 1);
    double v88 = pthread_getspecific(*((void *)v87 + 74));
    if (v88 && *((unsigned char *)v88 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88 + 2, (uint64_t)"Computation done at ", 20);
    }
    gettimeofday(&v99, 0);
    uint64_t v89 = file_logger::operator<<<double>((uint64_t)v87);
    uint64_t v90 = pthread_getspecific(*(void *)(v89 + 592));
    if (v90 && *((unsigned char *)v90 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"s", 1);
    }
    uint64_t v91 = pthread_getspecific(*(void *)(v89 + 592));
    if (v91 && *((unsigned char *)v91 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(v91[2] - 24) + 16));
      uint64_t v92 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
      std::locale::~locale((std::locale *)&v99);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v89);
      if (*(_DWORD *)(v89 + 600) == 7)
      {
        __print_back_trace();
        unint64_t v94 = __cxa_allocate_exception(8uLL);
        void *v94 = "LOG_FATAL encountered";
        __cxa_throw(v94, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
}

void sub_224224CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(uint64_t a1, uint64_t a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  BOOL v98 = a5 != 0;
  gettimeofday(&v97, 0);
  gettimeofday(&v99, 0);
  uint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 326, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    }
    uint64_t v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        uint64_t v15 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = &unk_26D772AD8;
  v16[1] = a1;
  _OWORD v16[2] = &v98;
  void v16[3] = a2;
  uint64_t v100 = v16;
  turi::in_parallel((turi::thread_pool *)&v99);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v99);
  uint64_t v17 = *(double **)(a1 + 848);
  *a3 = v17[6];
  uint64_t v19 = (float64x2_t *)*((void *)v17 + 1);
  uint64_t v18 = *((void *)v17 + 2);
  if (a4[1] != (float64x2_t *)v18)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v18, 1);
    uint64_t v18 = (uint64_t)a4[1];
  }
  unint64_t v20 = *a4;
  if (v18 >= 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v18 + 1;
  }
  int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (v18 >= 2)
  {
    int64_t v23 = 0;
    double v24 = *a4;
    double v25 = v19;
    do
    {
      float64x2_t v26 = *v25++;
      *v24++ = v26;
      v23 += 2;
    }
    while (v23 < v22);
  }
  BOOL v27 = __OFSUB__(v18, v22);
  uint64_t v28 = v18 - v22;
  if (!((v28 < 0) ^ v27 | (v28 == 0)))
  {
    uint64_t v29 = v21 >> 1;
    uint64_t v30 = (uint64_t *)&v19[v21 >> 1];
    f64 = (void *)v20[v29].f64;
    do
    {
      uint64_t v32 = *v30++;
      *f64++ = v32;
      --v28;
    }
    while (v28);
  }
  if (a5)
  {
    double v33 = *(void **)(a1 + 848);
    uint64_t v35 = (float64x2_t *)v33[3];
    uint64_t v34 = v33[4];
    uint64_t v36 = v33[5];
    if (a5[1] != (float64x2_t *)v34 || a5[2] != (float64x2_t *)v36)
    {
      if (v34) {
        BOOL v38 = v36 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v36 < v34)
      {
        atomic_ullong *volatile v95 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v96 = std::bad_alloc::bad_alloc(v95);
        __cxa_throw(v96, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v36 * v34, v34, v36);
      uint64_t v34 = (uint64_t)a5[1];
      uint64_t v36 = (uint64_t)a5[2];
    }
    uint64_t v39 = *a5;
    uint64_t v40 = v34 * v36;
    if (v34 * v36 >= 0) {
      uint64_t v41 = v34 * v36;
    }
    else {
      uint64_t v41 = v40 + 1;
    }
    int64_t v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
    if (v40 >= 2)
    {
      int64_t v43 = 0;
      uint64_t v44 = *a5;
      uint64_t v45 = v35;
      do
      {
        float64x2_t v46 = *v45++;
        *v44++ = v46;
        v43 += 2;
      }
      while (v43 < v42);
    }
    BOOL v47 = v40 <= v42;
    uint64_t v48 = v40 - v42;
    if (!v47)
    {
      uint64_t v49 = v41 >> 1;
      int v50 = (uint64_t *)&v35[v41 >> 1];
      uint64_t v51 = (void *)v39[v49].f64;
      do
      {
        uint64_t v52 = *v50++;
        *v51++ = v52;
        --v48;
      }
      while (v48);
    }
  }
  uint64_t v53 = *(void *)(a1 + 848);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 856) - v53) >> 3) >= 2)
  {
    unint64_t v54 = 1;
    do
    {
      uint64_t v55 = v53 + 120 * v54;
      *a3 = *(double *)(v55 + 48) + *a3;
      unint64_t v56 = *(float64x2_t **)(v55 + 8);
      uint64_t v57 = *a4;
      uint64_t v58 = (uint64_t)a4[1];
      if (v58 >= 0) {
        uint64_t v59 = (uint64_t)a4[1];
      }
      else {
        uint64_t v59 = v58 + 1;
      }
      int64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
      if (v58 >= 2)
      {
        int64_t v61 = 0;
        double v62 = *a4;
        uint64_t v63 = v56;
        do
        {
          float64x2_t v64 = *v63++;
          *double v62 = vaddq_f64(v64, *v62);
          ++v62;
          v61 += 2;
        }
        while (v61 < v60);
      }
      BOOL v47 = v58 <= v60;
      uint64_t v65 = v58 - v60;
      if (!v47)
      {
        uint64_t v66 = v59 >> 1;
        uint64_t v67 = v56[v66].f64;
        uint64_t v68 = v57[v66].f64;
        do
        {
          double v69 = *v67++;
          *uint64_t v68 = v69 + *v68;
          ++v68;
          --v65;
        }
        while (v65);
      }
      if (a5)
      {
        uint64_t v70 = *(void *)(*(void *)(a1 + 848) + 120 * v54 + 24);
        double v71 = *a5;
        uint64_t v72 = a5[1];
        uint64_t v73 = (void)a5[2] * (void)v72;
        if (v73 >= 0) {
          uint64_t v74 = (void)a5[2] * (void)v72;
        }
        else {
          uint64_t v74 = v73 + 1;
        }
        int64_t v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
        if (v73 >= 2)
        {
          int64_t v76 = 0;
          uint64_t v77 = *a5;
          uint64_t v78 = *(float64x2_t **)(*(void *)(a1 + 848) + 120 * v54 + 24);
          do
          {
            float64x2_t v79 = *v78++;
            *uint64_t v77 = vaddq_f64(v79, *v77);
            ++v77;
            v76 += 2;
          }
          while (v76 < v75);
        }
        BOOL v47 = v73 <= v75;
        uint64_t v80 = v73 - v75;
        if (!v47)
        {
          uint64_t v81 = v74 >> 1;
          double v82 = (double *)(v70 + 16 * v81);
          uint64_t v83 = v71[v81].f64;
          do
          {
            double v84 = *v82++;
            *uint64_t v83 = v84 + *v83;
            ++v83;
            --v80;
          }
          while (v80);
        }
      }
      ++v54;
      uint64_t v53 = *(void *)(a1 + 848);
    }
    while (v54 < 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 856) - v53) >> 3));
  }
  uint64_t v85 = (int *)global_logger();
  if (v85[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v85)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v86 = (file_logger *)global_logger();
    double v87 = file_logger::start_stream(v86, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 388, 1);
    double v88 = pthread_getspecific(*((void *)v87 + 74));
    if (v88 && *((unsigned char *)v88 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88 + 2, (uint64_t)"Computation done at ", 20);
    }
    gettimeofday(&v99, 0);
    uint64_t v89 = file_logger::operator<<<double>((uint64_t)v87);
    uint64_t v90 = pthread_getspecific(*(void *)(v89 + 592));
    if (v90 && *((unsigned char *)v90 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"s", 1);
    }
    uint64_t v91 = pthread_getspecific(*(void *)(v89 + 592));
    if (v91 && *((unsigned char *)v91 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(v91[2] - 24) + 16));
      uint64_t v92 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
      std::locale::~locale((std::locale *)&v99);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v89);
      if (*(_DWORD *)(v89 + 600) == 7)
      {
        __print_back_trace();
        unint64_t v94 = __cxa_allocate_exception(8uLL);
        void *v94 = "LOG_FATAL encountered";
        __cxa_throw(v94, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
}

void sub_224225394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

void turi::supervised_2::linear_regression::lr_optimization_interface::compute_second_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 880)) {
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(v5, a2, a5, a4, a3);
  }
  else {
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(v5, a2, a5, a4, a3);
  }
}

void turi::supervised_2::linear_regression::save_impl(turi::supervised_2::linear_regression *this, turi::oarchive *a2)
{
}

void turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  {
    turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,turi::oarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v3)
    {
      size_t v5 = 2 * v3 + 16;
      *(void *)(a2 + 40) = v5;
      uint64_t v6 = *(char ***)(a2 + 16);
      if (v6)
      {
        uint64_t v4 = *v6;
        size_t v7 = v6[1] - *v6;
        BOOL v8 = v5 >= v7;
        std::vector<char>::size_type v9 = v5 - v7;
        if (v9 != 0 && v8)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v9);
          uint64_t v4 = **(char ***)(a2 + 16);
        }
        else if (!v8)
        {
          v6[1] = &v4[v5];
        }
      }
      else
      {
        uint64_t v4 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v5, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v4;
    }
    else
    {
      uint64_t v4 = *(char **)(a2 + 24);
    }
    *(void *)&v4[*(void *)(a2 + 32)] = turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,turi::oarchive &)::type_check_hash;
    *(void *)(a2 + 32) += 8;
  }
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
}

void sub_2242255C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::load_version(turi::supervised_2::linear_regression *this, turi::iarchive *a2)
{
  uint64_t v4 = (char *)this + 296;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::option_manager::load((turi::supervised_2::linear_regression *)((char *)this + 224), a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 96);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 103);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  size_t v5 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((void *)this + 105) = turi::variant_converter<unsigned long,void>::get((uint64_t)v14, v5);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense_coefficient_mode");
  uint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((unsigned char *)this + 880) = turi::variant_converter<int,void>::get((uint64_t)v14, v6) != 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  *((void *)this + 41) = *(void *)(*((void *)this + 96) + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "current_training_iteration");
  size_t v7 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((void *)this + 99) = turi::variant_converter<unsigned long,void>::get((uint64_t)v14, v7);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "current_training_status");
  BOOL v8 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)v14);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(v8, (uint64_t *)&__p);
  std::vector<char>::size_type v9 = (char *)this + 808;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  uint64_t v10 = (char *)v17;
  *((void *)this + 100) = __p;
  *((void *)this + 101) = v10;
  uint64_t v11 = v18;
  *((void *)this + 102) = v18;
  if (v11)
  {
    *((void *)v10 + 2) = v9;
    std::string __p = &v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    *((void *)this + 100) = v9;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v10);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  unint64_t v12 = (void *)*((void *)this + 105);
  uint64_t v13 = (void *)*((void *)this + 104);
  v14[0] = v12;
  if (v12 != v13)
  {
    std::string __p = v14;
    uint64_t v17 = &v13;
    turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
}

void turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, turi::iarchive *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  {
    turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &,turi::iarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  uint64_t v18 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = *(void *)(v4 + v5);
    uint64_t v18 = v6;
    *((void *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    uint64_t v6 = v18;
  }
  uint64_t v7 = turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &,turi::iarchive &)::type_check_hash;
  std::string::basic_string[abi:ne180100]<0>(&v16, "Deserialization of type ");
  BOOL v8 = std::string::append(&v16, (const std::string::value_type *)(0x80000002246FCA58 & 0x7FFFFFFFFFFFFFFFLL));
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v17, " failed, likely due to corruption earlier in the stream. ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v20 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = __p;
  if (v20 < 0) {
    unint64_t v12 = (void **)__p[0];
  }
  assert_msg(v7 == v6, "%s", (const char *)v12);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  __p[1] = 0;
  LODWORD(v20) = 0;
  BYTE4(v20) = 0;
  LODWORD(__p[0]) = 0;
  turi::variant_deep_load((unsigned int *)__p, a2);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get((uint64_t *)__p, (uint64_t *)&v17);
  uint64_t v13 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  *(void *)a1 = v17.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 8) = size;
  std::string::size_type v15 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  if (v15)
  {
    *(void *)(size + 16) = v13;
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17.__r_.__value_.__l.__size_;
    *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)a1 = v13;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v17, (char *)size);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
}

void sub_224225A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_num_coefficients", 18);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224225C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::export_to_coreml(uint64_t a1)
{
  v2[15] = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v2, "class", &v1);
}

void sub_224225ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20)
{
  int64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised_2::linear_regression::name(turi::supervised_2::linear_regression *this)
{
  return "regression_linear_regression_v2";
}

void *turi::supervised_2::linear_regression::uid(turi::supervised_2::linear_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised_2::linear_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised_2::linear_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised_2::linear_regression::uid(void)::_uid;
}

void sub_224226008(_Unwind_Exception *a1)
{
}

turi::supervised_2::supervised_learning_model_base *turi::supervised_2::linear_regression::perform_registration(turi::supervised_2::supervised_learning_model_base *this)
{
  if (!*((unsigned char *)this + 24)) {
    turi::supervised_2::supervised_learning_model_base::perform_registration(this);
  }
  return this;
}

uint64_t turi::supervised_2::linear_regression::lr_optimization_interface::num_variables(turi::supervised_2::linear_regression::lr_optimization_interface *this)
{
  return *(void *)(*((void *)this + 1) + 840);
}

void turi::ml_data::~ml_data(turi::ml_data *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v6 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v6 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22422615C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_224226180(_Unwind_Exception *a1)
{
}

void *turi::optimization::l2_norm::l2_norm(void *a1, long long **a2)
{
  *a1 = &unk_26D772100;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (uint64_t)a2[1];
  if (v4)
  {
    uint64_t v5 = *a2;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 1, v4, 1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    if (v7 >= 0) {
      uint64_t v8 = a1[2];
    }
    else {
      uint64_t v8 = v7 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      int64_t v10 = 0;
      long long v11 = (_OWORD *)a1[1];
      unint64_t v12 = v5;
      do
      {
        long long v13 = *v12++;
        *v11++ = v13;
        v10 += 2;
      }
      while (v10 < v9);
    }
    BOOL v14 = v7 <= v9;
    uint64_t v15 = v7 - v9;
    if (!v14)
    {
      uint64_t v16 = v8 >> 1;
      std::string v17 = (uint64_t *)&v5[v8 >> 1];
      uint64_t v18 = (void *)(v6 + 16 * v16);
      do
      {
        uint64_t v19 = *v17++;
        *v18++ = v19;
        --v15;
      }
      while (v15);
    }
  }
  a1[3] = a2[1];
  return a1;
}

void sub_22422626C(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void turi::optimization::l2_norm::~l2_norm(void **this)
{
  *this = &unk_26D772100;
  free(this[1]);
}

{
  uint64_t vars8;

  *this = &unk_26D772100;
  free(this[1]);
  JUMPOUT(0x22A614FA0);
}

double turi::optimization::l2_norm::compute_function_value(uint64_t a1, uint64_t *a2)
{
  v4[0] = a1 + 8;
  v4[1] = a2;
  if (!a2[1]) {
    return 0.0;
  }
  uint64_t v2 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  return Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v5);
}

float64_t turi::optimization::l2_norm::compute_gradient(uint64_t a1, float64x2_t **a2, float64x2_t **a3)
{
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  uint64_t v6 = *a2;
  uint64_t v5 = (uint64_t)a2[1];
  if (a3[1] != (float64x2_t *)v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v5, 1);
    uint64_t v5 = (uint64_t)a3[1];
  }
  uint64_t v8 = *a3;
  if (v5 >= 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = v5 + 1;
  }
  int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    int64_t v11 = 0;
    unint64_t v12 = *a3;
    long long v13 = v4;
    BOOL v14 = v6;
    do
    {
      float64x2_t v15 = *v13++;
      float64x2_t v16 = v15;
      float64x2_t v17 = *v14++;
      float64x2_t v18 = vmulq_f64(v16, v17);
      float64x2_t v7 = vaddq_f64(v18, v18);
      *v12++ = v7;
      v11 += 2;
    }
    while (v11 < v10);
  }
  BOOL v19 = __OFSUB__(v5, v10);
  uint64_t v20 = v5 - v10;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    uint64_t v21 = v9 >> 1;
    f64 = v6[v9 >> 1].f64;
    int64_t v23 = v4[v21].f64;
    double v24 = (void *)v8[v21].f64;
    do
    {
      double v25 = *v23++;
      double v26 = v25;
      double v27 = *f64++;
      v7.f64[0] = v26 * v27 + v26 * v27;
      *v24++ = *(void *)&v7.f64[0];
      --v20;
    }
    while (v20);
  }
  return v7.f64[0];
}

uint64_t turi::optimization::l2_norm::apply_proximal_operator(uint64_t result, double **a2, double *a3)
{
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *(double **)(result + 8);
    do
    {
      double v6 = *v5++;
      double *v4 = *v4 / ((*a3 + *a3) * v6 + 1.0);
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float64x2_t **turi::optimization::l2_norm::compute_hessian(uint64_t a1, uint64_t a2, float64x2_t **a3)
{
  v4[7] = *MEMORY[0x263EF8340];
  v4[2] = *(void *)(a1 + 16);
  void v4[4] = 0x4000000000000000;
  void v4[5] = a1 + 8;
  return Eigen::DiagonalMatrix<double,-1,-1>::operator=<Eigen::DiagonalWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>(a3, (uint64_t)v4);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * (**(double **)(a1 + 32) * **(double **)(a1 + 32));
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v7 = *(float64x2_t **)(a1 + 32);
  float64x2_t v8 = vmulq_f64(*v4, vmulq_f64(*v7, *v7));
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], vmulq_f64(v7[1], v7[1]));
    if ((unint64_t)v1 >= 8)
    {
      int64_t v11 = v7 + 3;
      unint64_t v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], vmulq_f64(v11[-1], v11[-1])));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, vmulq_f64(v16, v16)));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), vmulq_f64(*(float64x2_t *)((char *)v7 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9))));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v7[v19].f64;
    do
    {
      double v22 = *v21++;
      double v23 = v22 * v22;
      double v24 = *f64++;
      double result = result + v24 * v23;
      --v18;
    }
    while (v18);
  }
  return result;
}

void *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
  {
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float64x2_t v7 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v7, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v5 = a3 * a2;
  if (result[1] != a3 * a2)
  {
    free((void *)*result);
    if (v5)
    {
      if (v5 >> 61) {
        goto LABEL_8;
      }
      double result = malloc_type_malloc(8 * v5, 0x1E76AA36uLL);
      if (!result) {
        goto LABEL_8;
      }
    }
    else
    {
      double result = 0;
    }
    void *v4 = result;
  }
  v4[1] = a2;
  return result;
}

float64x2_t **Eigen::DiagonalMatrix<double,-1,-1>::operator=<Eigen::DiagonalWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>(float64x2_t **a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 32);
  uint64_t v4 = *(float64x2_t ***)(a2 + 40);
  int64_t v6 = *v4;
  uint64_t v5 = (uint64_t)v4[1];
  if (a1[1] != (float64x2_t *)v5)
  {
    double v21 = v3;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    double v3 = v21;
    uint64_t v5 = (uint64_t)a1[1];
  }
  float64x2_t v7 = *a1;
  if (v5 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v5 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    int64_t v10 = 0;
    int64_t v11 = *a1;
    unint64_t v12 = v6;
    do
    {
      float64x2_t v13 = *v12++;
      *v11++ = vmulq_n_f64(v13, v3);
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v14 = __OFSUB__(v5, v9);
  uint64_t v15 = v5 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    uint64_t v16 = v8 >> 1;
    f64 = v6[v8 >> 1].f64;
    uint64_t v18 = v7[v16].f64;
    do
    {
      double v19 = *f64++;
      *v18++ = v3 * v19;
      --v15;
    }
    while (v15);
  }
  return a1;
}

uint64_t turi::optimization::lbfgs_solver::lbfgs_solver(uint64_t a1, void *a2)
{
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(int64x2_t *)(a1 + 80) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)a1 = &unk_26D77AA30;
  gettimeofday((timeval *)(a1 + 128), 0);
  uint64_t v4 = a2[1];
  *(void *)(a1 + 144) = *a2;
  *(void *)(a1 + 152) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = xmmword_2246E0990;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  return a1;
}

void turi::supervised_2::supervised_learning_model_base::perform_registration(turi::supervised_2::supervised_learning_model_base *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  turi::ml_model_base::perform_registration(this);
}

void sub_2242276E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a54, (char *)a55);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)&STACK[0x250]);
  if (a50 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v55 - 145) < 0) {
    operator delete(*(void **)(v55 - 168));
  }
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  std::string::basic_string[abi:ne180100]<0>(v23, a4);
  std::string::basic_string[abi:ne180100]<0>(v24, a5);
  std::string::basic_string[abi:ne180100]<0>(v25, a6);
  uint64_t v16 = 0;
  BOOL v17 = 0;
  uint64_t v18 = 0;
  double v19 = &v16;
  char v20 = 0;
  uint64_t v16 = (std::string *)operator new(0x60uLL);
  BOOL v17 = v16;
  uint64_t v18 = v16 + 4;
  BOOL v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v22, v26, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v16, (uint64_t)v26);
  double v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v25[i + 2]) < 0) {
      operator delete((void *)v25[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v26);
  *(void *)(a7 + 24) = 0;
  BOOL v14 = operator new(0x28uLL);
  *BOOL v14 = &unk_26D772210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v21);
  *(void *)(a7 + 24) = v14;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v21);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v26);
}

void sub_224227FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 104));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v18, __s);
  std::string::basic_string[abi:ne180100]<0>(v19, a4);
  unint64_t v12 = 0;
  float64x2_t v13 = 0;
  BOOL v14 = 0;
  uint64_t v15 = &v12;
  char v16 = 0;
  unint64_t v12 = (std::string *)operator new(0x30uLL);
  float64x2_t v13 = v12;
  BOOL v14 = v12 + 2;
  float64x2_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v18, v20, v12);
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(a2, a3, (uint64_t)&v12, (uint64_t)v20);
  uint64_t v15 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0) {
      operator delete((void *)v19[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  *(void *)(a5 + 24) = 0;
  int64_t v10 = operator new(0x28uLL);
  void *v10 = &unk_26D772310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v17);
  *(void *)(a5 + 24) = v10;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v20);
}

void sub_2242281D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v20, __s);
  std::string::basic_string[abi:ne180100]<0>(v21, a4);
  std::string::basic_string[abi:ne180100]<0>(v22, a5);
  BOOL v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  BOOL v17 = &v14;
  char v18 = 0;
  BOOL v14 = (std::string *)operator new(0x48uLL);
  uint64_t v15 = v14;
  char v16 = v14 + 3;
  uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, &v20, v23, v14);
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(a2, a3, (uint64_t)&v14, (uint64_t)v23);
  BOOL v17 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v23);
  *(void *)(a6 + 24) = 0;
  unint64_t v12 = operator new(0x28uLL);
  void *v12 = &unk_26D772410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v12 + 1), (uint64_t)v19);
  *(void *)(a6 + 24) = v12;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v19);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v23);
}

void sub_224228400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v7 - 104));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  std::string::basic_string[abi:ne180100]<0>(v23, a4);
  std::string::basic_string[abi:ne180100]<0>(v24, a5);
  std::string::basic_string[abi:ne180100]<0>(v25, a6);
  char v16 = 0;
  BOOL v17 = 0;
  char v18 = 0;
  double v19 = &v16;
  char v20 = 0;
  char v16 = (std::string *)operator new(0x60uLL);
  BOOL v17 = v16;
  char v18 = v16 + 4;
  BOOL v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v22, v26, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(a2, a3, (uint64_t)&v16, (uint64_t)v26);
  double v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v25[i + 2]) < 0) {
      operator delete((void *)v25[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v26);
  *(void *)(a7 + 24) = 0;
  BOOL v14 = operator new(0x28uLL);
  *BOOL v14 = &unk_26D772510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v21);
  *(void *)(a7 + 24) = v14;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v21);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v26);
}

void sub_22422864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 104));
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  void *v4 = &unk_26D772610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_2242287BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v18, __s);
  std::string::basic_string[abi:ne180100]<0>(v19, a4);
  unint64_t v12 = 0;
  float64x2_t v13 = 0;
  BOOL v14 = 0;
  uint64_t v15 = &v12;
  char v16 = 0;
  unint64_t v12 = (std::string *)operator new(0x30uLL);
  float64x2_t v13 = v12;
  BOOL v14 = v12 + 2;
  float64x2_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v18, v20, v12);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(a2, a3, (uint64_t)&v12, (uint64_t)v20);
  uint64_t v15 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0) {
      operator delete((void *)v19[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  *(void *)(a5 + 24) = 0;
  int64_t v10 = operator new(0x28uLL);
  void *v10 = &unk_26D772710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v17);
  *(void *)(a5 + 24) = v10;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v20);
}

void sub_224228964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  std::string::basic_string[abi:ne180100]<0>(v23, a4);
  std::string::basic_string[abi:ne180100]<0>(v24, a5);
  std::string::basic_string[abi:ne180100]<0>(v25, a6);
  char v16 = 0;
  BOOL v17 = 0;
  long long v18 = 0;
  double v19 = &v16;
  char v20 = 0;
  char v16 = (std::string *)operator new(0x60uLL);
  BOOL v17 = v16;
  long long v18 = v16 + 4;
  BOOL v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v22, v26, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v16, (uint64_t)v26);
  double v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v25[i + 2]) < 0) {
      operator delete((void *)v25[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v26);
  *(void *)(a7 + 24) = 0;
  BOOL v14 = operator new(0x28uLL);
  *BOOL v14 = &unk_26D772810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v21);
  *(void *)(a7 + 24) = v14;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v21);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v26);
}

void sub_224228BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 104));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  int64_t v9 = 0;
  int64_t v10 = 0;
  int64_t v11 = 0;
  unint64_t v12 = &v9;
  char v13 = 0;
  int64_t v9 = (std::string *)operator new(0x18uLL);
  int64_t v10 = v9;
  int64_t v11 = v9 + 1;
  int64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  unint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_26D772910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_224228D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

uint64_t turi::supervised_2::supervised_learning_model_base::export_to_coreml(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D772180;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_224228FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772180;
  double v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772180;
  double v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D772180;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_224229174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772180;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((long long *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422930C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  char v16 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v23 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v24);
  uint64_t v29 = 0;
  int v30 = 0;
  char v31 = 0;
  v33[0] = 0;
  v33[1] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  unsigned int v28 = 0;
  uint64_t v32 = v33;
  __p[0] = 0;
  uint64_t v23 = a2;
  memset(&v14, 0, sizeof(v14));
  uint64_t v15 = a3;
  if (&v14 == (std::vector<std::string> *)(a1 + 1))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((std::string **)a1 + 2), *((long long **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  char v13 = &v23;
  std::string::size_type v10 = &v23;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)v22, &v10);
  *(void *)&long long v34 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  long long v34 = *a1;
  std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&>((uint64_t)&v34, &v23, (turi::gl_sframe *)v24, (uint64_t)__p, (uint64_t)&v28, (uint64_t)&v32);
  *(void *)&long long v34 = 0;
  DWORD2(v34) = 0;
  BYTE12(v34) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v34, &turi::FLEX_UNDEFINED);
  *(void *)(a4 + 13) = *(void *)((char *)&v34 + 5);
  *(void *)(a4 + 8) = v34;
  *(unsigned char *)(a4 + 20) = BYTE12(v34);
  *(_DWORD *)a4 = 0;
  *(void *)&long long v34 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v32, v33[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v28);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  v24[0] = &unk_26D759E10;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
}

void sub_224229584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,char a29)
{
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_26D759E10;
  long long v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, void *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<4>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sframe,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sframe::operator=(*a1 + 8, (uint64_t)v4);
    v4[0] = &unk_26D759E10;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(void *a1)
{
  v8[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      uint64_t v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (int *)(v3 + 56);
    uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 56);
    uint64_t v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 56), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_224229870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<4>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 5)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 96));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 144;
    uint64_t v5 = (uint64_t *)(*a1 + 136);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    uint64_t v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      std::vector<std::string>::const_iterator v9 = 0;
      uint64_t v10 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&>(uint64_t a1, void *a2, turi::gl_sframe *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void *, void *, uint64_t, uint64_t, uint64_t))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string v11 = (void *)(*a2 + (v9 >> 1));
  if (v9) {
    uint64_t v10 = *(void (**)(void *, void *, uint64_t, uint64_t, uint64_t))(*v11 + v10);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v12, a3);
  v10(v11, v12, a4, a5, a6);
  v12[0] = &unk_26D759E10;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_224229A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_224229C08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772210;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(char ***)a3;
  uint64_t v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    void *v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_224229DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v11[9] = *MEMORY[0x263EF8340];
  if (lpsrc) {
  else
  }
    uint64_t v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a2, (uint64_t)v7);
  uint64_t v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v10, v10 ^ (v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ (v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_224229F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[8],std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>(void *a1, char *a2)
{
}

void sub_22422A058(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D772290;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422A2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772290;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772290;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D772290;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422A454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772290;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v23 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v28;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v18);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string __p = 0;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  memset(&v15, 0, sizeof(v15));
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v15.__begin_;
    std::vector<std::string>::pointer end = (long long *)v15.__end_;
  }
  std::vector<std::string> v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v11);
  v29[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v10);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v10, (long long *)a1, &v17);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v29, (const turi::gl_sarray *)v10);
  turi::variant_converter<turi::gl_sarray,void>::set((const turi::gl_sarray *)v29, a4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v29);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  v29[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  uint64_t v18 = &unk_26D759E10;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
}

void sub_22422A7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string>::~vector((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 168));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, void *a3)
{
  long long v5 = *a2;
  std::__mem_fn<turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&>((uint64_t)&v5, a3, (turi::gl_sframe *)(a3 + 1), (uint64_t)(a3 + 4));
  turi::gl_sarray::operator=(a1, (uint64_t)v4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
}

void sub_22422A8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string>::~vector(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_26D759E10;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__mem_fn<turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&>(uint64_t a1, void *a2, turi::gl_sframe *a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(void *, void *, uint64_t))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v6 = *(void (**)(void *, void *, uint64_t))(*v7 + v6);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8, a3);
  v6(v7, v8, a4);
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_22422A9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D772310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422AB14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772310;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D772390;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422ADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772390;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772390;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D772390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422AF50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772390;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422B0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v22 = 1;
  std::string __p = 0;
  uint64_t v24 = 0;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v25 = 0;
  uint64_t v26 = v27;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v19);
  uint64_t v21 = 0;
  uint64_t v17 = a3;
  uint64_t v18 = a2;
  memset(&v16, 0, sizeof(v16));
  if (&v16 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v16.__begin_;
    std::vector<std::string>::pointer end = (long long *)v16.__end_;
  }
  uint64_t v15 = &v18;
  uint64_t v12 = &v18;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v14 = v17;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v12);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(&v12);
  v28[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v10);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v10, (long long *)a1, &v18);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v28, (const turi::gl_sframe *)v10);
  turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v28, a4);
  v28[0] = (void **)&unk_26D759E10;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  v10[0] = &unk_26D759E10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  v28[0] = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  uint64_t v19 = &unk_26D759E10;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v26, v27[0]);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
}

void sub_22422B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,char a28)
{
  a24 = &unk_26D759E10;
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a28);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, void *a3)
{
  long long v6 = *a2;
  std::__mem_fn<turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,unsigned long &>((uint64_t)&v6, a3, (turi::gl_sframe *)(a3 + 1), a3 + 4);
  turi::gl_sframe::operator=(a1, (uint64_t)&v4);
  uint64_t v4 = &unk_26D759E10;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22422B45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__mem_fn<turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,unsigned long &>(uint64_t a1, void *a2, turi::gl_sframe *a3, void *a4)
{
  long long v6 = *(void (**)(void *, void *, void))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v6 = *(void (**)(void *, void *, void))(*v7 + v6);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8, a3);
  v6(v7, v8, *a4);
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_22422B55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422B68C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772410;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  char v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  std::string v13 = (char *)operator new(0x30uLL);
  *(void *)std::string v13 = &unk_26D772490;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422B93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772490;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772490;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D772490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422BAC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772490;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a3 + 1;
  uint64_t v5 = a3[1];
  long long v6 = (uint64_t *)*a3;
  uint64_t v7 = v5;
  if (a3[2])
  {
    *(void *)(v5 + 16) = &v7;
    *a3 = v4;
    void *v4 = 0;
    a3[2] = 0;
  }
  else
  {
    long long v6 = &v7;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v3, (uint64_t)&v6);
}

void sub_22422BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v17 = 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = v22;
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::vector_data((uint64_t)&v16);
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  std::string v13 = &v16;
  std::string::size_type v10 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>>((uint64_t)&v23, &v10);
  uint64_t v8 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (std::string *)v9;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v8, (long long *)a1, (uint64_t)&v16);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
}

void sub_22422BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::~vector((uint64_t)&a22);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v22 - 112));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v10 = *a2;
  std::__invoke[abi:ne180100]<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,turi::gl_sarray&,BOOL &,void>((uint64_t)&v10, (void *)a3, (turi::gl_sframe *)(a3 + 8), a3 + 32, (const turi::gl_sarray *)(a3 + 56), (unsigned __int8 *)(a3 + 96));
  uint64_t v4 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  uint64_t v5 = v8;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = v9;
  *(void *)(a1 + 16) = v9;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    uint64_t v7 = &v8;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, (char *)v5);
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::~vector(uint64_t a1)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_26D759E10;
  long long v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::vector_data(uint64_t a1)
{
  *(void *)a1 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a1 + 8));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 56));
  *(unsigned char *)(a1 + 96) = 0;
  return a1;
}

void sub_22422BFFC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::vector_data(v2, v1);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>>(uint64_t a1, void *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<3>(a2);
  return turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<4>((BOOL)a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<3>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 56, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

BOOL turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<4>(BOOL result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(result + 16) - v1) >> 3) >= 5)
  {
    long long v2 = (void *)result;
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*(void *)(result + 32), (const void **)(v1 + 96));
    if (v2[4] + 8 == v3) {
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    double result = turi::variant_converter<BOOL,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(unsigned char *)(*v2 + 96) = result;
  }
  return result;
}

BOOL turi::variant_converter<BOOL,void>::get(uint64_t a1, int *a2)
{
  void v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    char v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  BOOL v20 = 0;
  turi::flexible_type_internals::ft_converter<3>::get<BOOL>(&v20, (turi::flexible_type_internals *)v22, v3);
  BOOL v6 = v20;
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v22[0];
        if (v22[0])
        {
          char v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v11 = v22[0];
        if (v22[0])
        {
          uint64_t v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          std::string v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          std::vector<std::string> v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_22422C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      uint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        long long v26[2] = v27;
        operator delete(v27);
      }
      uint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      char v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      char v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      uint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      uint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

BOOL *turi::flexible_type_internals::ft_converter<3>::get<BOOL>(BOOL *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12))
  {
    if (*((unsigned char *)this + 12) != 1) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    }
    BOOL v3 = *(double *)this != 0.0;
    double v4 = 0.0;
    if (*(double *)this != 0.0) {
      double v4 = 1.0;
    }
    if (*(double *)this != v4) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
    }
  }
  else
  {
    BOOL v3 = *(void *)this != 0;
  }
  *double result = v3;
  return result;
}

void sub_22422C7A8()
{
}

void std::__invoke[abi:ne180100]<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,turi::gl_sarray&,BOOL &,void>(uint64_t a1, void *a2, turi::gl_sframe *a3, uint64_t a4, const turi::gl_sarray *a5, unsigned __int8 *a6)
{
  long long v10 = *(void (**)(void *, void *, uint64_t, unsigned char *, void))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string v11 = (void *)(*a2 + (v9 >> 1));
  if (v9) {
    long long v10 = *(void (**)(void *, void *, uint64_t, unsigned char *, void))(*v11 + v10);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v13, a3);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v12, a5);
  v10(v11, v13, a4, v12, *a6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  v13[0] = &unk_26D759E10;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_22422C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  a14 = &unk_26D759E10;
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D772510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422C9F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772510;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray,0>(uint64_t a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a1, a2);
  turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>(a3, &v6);
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

void sub_22422CB18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  std::string v13 = (char *)operator new(0x30uLL);
  *(void *)std::string v13 = &unk_26D772590;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D772590;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D772590;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D772590;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422CE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772590;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422D030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v23[2] = *(void ***)MEMORY[0x263EF8340];
  char v17 = 1;
  std::string __p = 0;
  uint64_t v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = v22;
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  std::string v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  v23[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  uint64_t v8 = *(void (**)(void *))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v16 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *))(*v10 + v8);
  }
  v8(v10);
  memset(v23, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v23, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v23 + 5);
  *(void ***)(a4 + 8) = v23[0];
  *(unsigned char *)(a4 + 20) = BYTE4(v23[1]);
  *(_DWORD *)a4 = 0;
  v23[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_22422D210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED1Ev(void *a1)
{
  *a1 = &unk_26D772610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED0Ev(void *a1)
{
  *a1 = &unk_26D772610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422D334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772610;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D772690;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422D5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772690;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772690;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D772690;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422D770(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772690;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((long long *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422D908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v16 = 1;
  std::string __p = 0;
  uint64_t v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v22 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v23);
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 0;
  unsigned int v25 = 0;
  uint64_t v22 = a2;
  memset(&v14, 0, sizeof(v14));
  uint64_t v15 = a3;
  if (&v14 == (std::vector<std::string> *)(a1 + 1))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((std::string **)a1 + 2), *((long long **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  uint64_t v13 = &v22;
  std::string::size_type v10 = &v22;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator()<2>(&v10);
  *(void *)&long long v29 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  long long v29 = *a1;
  std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>((uint64_t)&v29, &v22, (turi::gl_sframe *)v23, (uint64_t)&v25);
  *(void *)&long long v29 = 0;
  DWORD2(v29) = 0;
  BYTE12(v29) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v29, &turi::FLEX_UNDEFINED);
  *(void *)(a4 + 13) = *(void *)((char *)&v29 + 5);
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 20) = BYTE12(v29);
  *(_DWORD *)a4 = 0;
  *(void *)&long long v29 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v25);
  v23[0] = &unk_26D759E10;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_22422DB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,char a27)
{
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~vector(uint64_t a1)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 32));
  *(void *)(a1 + 8) = &unk_26D759E10;
  long long v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator()<2>(void *a1)
{
  v8[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      uint64_t v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (int *)(v3 + 56);
    uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 56);
    uint64_t v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 32), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_22422DCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>(uint64_t a1, void *a2, turi::gl_sframe *a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(void *, void *, uint64_t))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v6 = *(void (**)(void *, void *, uint64_t))(*v7 + v6);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8, a3);
  v6(v7, v8, a4);
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_22422DDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422DEE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772710;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D772790;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772790;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772790;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D772790;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422E31C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772790;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((long long *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422E4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  char v16 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v23 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v24);
  uint64_t v29 = 0;
  int v30 = 0;
  char v31 = 0;
  v33[0] = 0;
  v33[1] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v32 = v33;
  __p[0] = 0;
  uint64_t v23 = a2;
  memset(&v14, 0, sizeof(v14));
  uint64_t v15 = a3;
  if (&v14 == (std::vector<std::string> *)(a1 + 1))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((std::string **)a1 + 2), *((long long **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  uint64_t v13 = &v23;
  std::string::size_type v10 = &v23;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)v22, &v10);
  *(void *)&long long v34 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  long long v34 = *a1;
  std::__invoke[abi:ne180100]<void (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v34, &v23, (turi::gl_sframe *)v24, (uint64_t)__p, &v28, (uint64_t)&v32);
  *(void *)&long long v34 = 0;
  DWORD2(v34) = 0;
  BYTE12(v34) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v34, &turi::FLEX_UNDEFINED);
  *(void *)(a4 + 13) = *(void *)((char *)&v34 + 5);
  *(void *)(a4 + 8) = v34;
  *(unsigned char *)(a4 + 20) = BYTE12(v34);
  *(_DWORD *)a4 = 0;
  *(void *)&long long v34 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v32, v33[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v28);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  v24[0] = &unk_26D759E10;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
}

void sub_22422E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,char a29)
{
}

void std::__invoke[abi:ne180100]<void (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, void *a2, turi::gl_sframe *a3, uint64_t a4, int *a5, uint64_t a6)
{
  v16[9] = *MEMORY[0x263EF8340];
  std::string::size_type v10 = *(void (**)(void *, void *, uint64_t, int *, uint64_t))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string v11 = (void *)(*a2 + (v9 >> 1));
  if (v9) {
    std::string::size_type v10 = *(void (**)(void *, void *, uint64_t, int *, uint64_t))(*v11 + v10);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v12, a3);
  std::vector<std::string> v14 = (std::string *)v16;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*a5, *a5 ^ (*a5 >> 31), &v14, (uint64_t)(a5 + 2));
  int v15 = *a5 ^ (*a5 >> 31);
  v10(v11, v12, a4, &v15, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v15);
  v12[0] = &unk_26D759E10;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_22422E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422EA00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772810;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D772890;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_22422ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D772890;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D772890;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D772890;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_22422EE3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772890;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_22422EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v23 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v28;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = a2;
  std::string __p = 0;
  memset(&v17, 0, sizeof(v17));
  uint64_t v18 = a3;
  if (&v17 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v17.__begin_;
    std::vector<std::string>::pointer end = (long long *)v17.__end_;
  }
  uint64_t v16 = &v19;
  uint64_t v13 = &v19;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v15 = v18;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v13);
  uint64_t v11 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v11, (long long *)a1, &v19);
  p_data = (void **)&v11->__r_.__value_.__l.__data_;
  std::vector<std::string>::const_iterator v9 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v10 = v12;
    *(void *)(a4 + 8) = p_data;
    *(void *)(a4 + 16) = v9;
    *(_DWORD *)a4 = 3;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = 0;
    *(_DWORD *)a4 = 3;
  }
  uint64_t v11 = (std::string *)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
}

void sub_22422F174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a28 < 0) {
    operator delete(__p);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v28 - 104));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, void *a3)
{
  long long v6 = *a2;
  std::__mem_fn<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,std::string&>((uint64_t)&v6, a3, (uint64_t)(a3 + 1));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__mem_fn<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,std::string&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void *, std::string *))a1;
  uint64_t v3 = *(void *)(a1 + 8);
  long long v5 = (void *)(*a2 + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(void (**)(void *, std::string *))(*v5 + v4);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  v4(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22422F2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D772910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D772910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22422F410(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D772910;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void *std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 120 * ((120 * a2 - 120) / 0x78) + 120;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22422F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a2);
}

uint64_t *Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    MEMORY[0x22A614F80](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    MEMORY[0x22A614F80](v3, 0x1000C8052888210);
  }
  return a1;
}

void std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)(a2 + 80));
  free(*(void **)(a2 + 56));
  free(*(void **)(a2 + 24));
  uint64_t v3 = *(void **)(a2 + 8);
  free(v3);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(unsigned int *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    int v6 = 0;
    char v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_22422F810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(unsigned int *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  size_t v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::flexible_type::flexible_type<double>((uint64_t)v7, a2);
    *(void *)&v6[5] = *(void *)&v7[5];
    *(void *)int v6 = *(void *)v7;
    v6[12] = v7[12];
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_22422F96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * **(double **)(a1 + 24);
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  char v7 = *(float64x2_t **)(a1 + 24);
  float64x2_t v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v11 = v7 + 3;
      uint64_t v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v7[v19].f64;
    do
    {
      double v22 = *f64++;
      double v23 = v22;
      double v24 = *v21++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,int>::atWithInsertion(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = a2;
  uint64_t v6 = a1[2];
  if (v6 < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1[2];
    do
    {
      uint64_t v9 = (v8 + v7) >> 1;
      if (*(int *)(a1[1] + 4 * v9) < a2) {
        uint64_t v7 = v9 + 1;
      }
      else {
        uint64_t v8 = (v8 + v7) >> 1;
      }
    }
    while (v8 > v7);
  }
  if (v7 >= v6)
  {
    float64x2_t v10 = a1 + 3;
    if (a1[3] > v6)
    {
LABEL_16:
      ++a1[2];
      uint64_t v12 = *a1;
      *(_DWORD *)(a1[1] + 4 * v7) = v4;
      *(void *)(v12 + 8 * v7) = *a3;
      return *a1 + 8 * v7;
    }
LABEL_15:
    void *v10 = 2 * v6 + 2;
    operator new[]();
  }
  if (*(_DWORD *)(a1[1] + 4 * v7) != a2)
  {
    float64x2_t v10 = a1 + 3;
    if (a1[3] > v6)
    {
      memmove((void *)(*a1 + 8 * v7 + 8), (const void *)(*a1 + 8 * v7), *a1 + 8 * v6 - (*a1 + 8 * v7));
      uint64_t v11 = a1[2];
      if (v11 != v7) {
        memmove((void *)(a1[1] + 4 * v7 + 4), (const void *)(a1[1] + 4 * v7), 4 * v11 - 4 * v7);
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  return *a1 + 8 * v7;
}

void sub_22422FD34(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(void *a1, char *a2)
{
}

void sub_22422FD94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::string>()
{
}

void sub_22422FEE0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x1012C404EF22A49);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1 && add == 1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22422FFB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::optimization::l2_norm *,std::shared_ptr<turi::optimization::smooth_regularizer_interface>::__shared_ptr_default_delete<turi::optimization::smooth_regularizer_interface,turi::optimization::l2_norm>,std::allocator<turi::optimization::l2_norm>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::optimization::l2_norm *,std::shared_ptr<turi::optimization::smooth_regularizer_interface>::__shared_ptr_default_delete<turi::optimization::smooth_regularizer_interface,turi::optimization::l2_norm>,std::allocator<turi::optimization::l2_norm>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D772A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D772A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D772A58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772A58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
}

uint64_t std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(unsigned char **a1, uint64_t a2, unint64_t a3)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v7 = *((void *)*a1 + 41);
  char v125 = 0;
  uint64_t v126 = 0;
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >> 61 || (uint64_t v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v108 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v108, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    char v125 = v9;
  }
  uint64_t v126 = v8;
  uint64_t v10 = v6[106] + 120 * a2;
  uint64_t v12 = *(char **)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v13 = (void *)(v10 + 8);
  uint64_t v14 = v6[105];
  if (v11 != v14)
  {
    free(v12);
    if (v14)
    {
      if ((unint64_t)v14 >> 61 || (uint64_t v12 = (char *)malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
      {
LABEL_137:
        uint64_t v105 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v106 = std::bad_alloc::bad_alloc(v105);
        __cxa_throw(v106, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    *uint64_t v13 = v12;
  }
  v13[1] = v14;
  if (v14 >= 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v14 >= 2)
  {
    unint64_t v17 = 2;
    if (v16 > 2) {
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v12, ((8 * v17 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  uint64_t v111 = (double *)(v13 + 5);
  if (v16 < v14) {
    bzero(&v12[16 * (v15 >> 1)], 8 * v14 - 16 * (v15 >> 1));
  }
  *uint64_t v111 = 0.0;
  unsigned int v109 = (float64x2_t **)(v13 + 2);
  if (*a1[1])
  {
    uint64_t v18 = v6[105];
    if (v18 && 0x7FFFFFFFFFFFFFFFLL / v18 < v18) {
      goto LABEL_137;
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v13 + 2, v18 * v18, v18, v6[105]);
    uint64_t v20 = v13[3];
    uint64_t v19 = v13[4];
    uint64_t v21 = (char *)v13[2];
    uint64_t v22 = v19 * v20;
    if (v19 * v20 >= 0) {
      uint64_t v23 = v19 * v20;
    }
    else {
      uint64_t v23 = v22 + 1;
    }
    int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (v22 >= 2)
    {
      unint64_t v25 = 2;
      if (v24 > 2) {
        unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v21, ((8 * v25 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v24 < v22) {
      bzero(&v21[16 * (v23 >> 1)], 8 * v22 - 16 * (v23 >> 1));
    }
  }
  unsigned int v110 = a1;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 48), a2, a3, (uint64_t)v112);
  if (v118 != v117)
  {
    do
    {
      uint64_t v27 = v120;
      uint64_t v26 = v121;
      if (v121) {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = v122;
      int v29 = v124;
      char v31 = (char *)v125;
      int64_t v30 = v126;
      if (v126 >= 0) {
        uint64_t v32 = v126;
      }
      else {
        uint64_t v32 = v126 + 1;
      }
      int64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      if (v126 >= 2)
      {
        unint64_t v34 = 2;
        if (v33 > 2) {
          unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFFELL;
        }
        bzero(v125, ((8 * v34 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v33 < v30) {
        bzero(&v31[16 * (v32 >> 1)], 8 * v30 - 16 * (v32 >> 1));
      }
      if (v29)
      {
        uint64_t v35 = *(void *)(v27 + 56);
        if (v35)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(void *)(v27 + 96) + 8 * v28 + 8 * (*(unsigned char *)(v27 + 18) == 0);
          uint64_t v38 = *(void *)(v27 + 72);
          uint64_t v39 = (double *)v125;
          do
          {
            uint64_t v40 = *(void *)(v38 + 16 * v36);
            unint64_t v41 = *(void *)(v40 + 64);
            uint64_t v42 = *(void *)(v40 + 104);
            switch(*(_DWORD *)(v40 + 24))
            {
              case 0:
                double v43 = *(double *)v37;
                v37 += 8;
                double v44 = v43;
                if (v41)
                {
                  if (*((unsigned char *)v6 + 360)) {
                    double v44 = v44 * *(double *)(v6[46] + 8 * v42);
                  }
                  goto LABEL_89;
                }
                break;
              case 1:
                double v57 = *(double *)v37;
                v37 += 8;
                double v56 = v57;
                if (*(void *)&v57 < v41)
                {
                  v42 += *(void *)&v56;
                  if (*((unsigned char *)v6 + 360)) {
                    double v44 = *(double *)(v6[46] + 8 * v42);
                  }
                  else {
                    double v44 = 1.0;
                  }
LABEL_89:
                  v39[v42] = v44;
                }
                break;
              case 2:
                uint64_t v45 = *(void *)(v40 + 72);
                if (v45)
                {
                  uint64_t v46 = 0;
                  unint64_t v47 = 0;
                  uint64_t v48 = 8 * v42;
                  uint64_t v49 = (char *)v125 + 8 * v42;
                  do
                  {
                    if (v47 < v41)
                    {
                      double v50 = *(double *)(v37 + 8 * v47);
                      if (*((unsigned char *)v6 + 360)) {
                        double v50 = v50 * *(double *)(v6[46] + v48 + 8 * v47);
                      }
                      *(double *)&v49[8 * v47] = v50;
                    }
                    ++v47;
                    v46 -= 8;
                  }
                  while (v45 != v47);
                  goto LABEL_67;
                }
                break;
              case 3:
                double v59 = *(double *)v37;
                v37 += 8;
                double v58 = v59;
                if (v59 != 0.0)
                {
                  int64_t v60 = (double *)v125;
                  do
                  {
                    if (*(void *)v37 < v41)
                    {
                      uint64_t v61 = *(void *)v37 + v42;
                      if (*((unsigned char *)v6 + 360)) {
                        double v62 = *(double *)(v6[46] + 8 * v61);
                      }
                      else {
                        double v62 = 1.0;
                      }
                      v60[v61] = v62;
                    }
                    v37 += 8;
                    --*(void *)&v58;
                  }
                  while (v58 != 0.0);
                }
                break;
              case 4:
                double v64 = *(double *)v37;
                v37 += 8;
                double v63 = v64;
                if (v64 != 0.0)
                {
                  uint64_t v65 = (double *)v125;
                  do
                  {
                    if (*(void *)v37 < v41)
                    {
                      double v66 = *(double *)(v37 + 8);
                      uint64_t v67 = *(void *)v37 + v42;
                      if (*((unsigned char *)v6 + 360)) {
                        double v66 = v66 * *(double *)(v6[46] + 8 * v67);
                      }
                      v65[v67] = v66;
                    }
                    v37 += 16;
                    --*(void *)&v63;
                  }
                  while (v63 != 0.0);
                }
                break;
              case 7:
                uint64_t v51 = *(void *)(v40 + 72);
                if (v51)
                {
                  uint64_t v46 = 0;
                  unint64_t v52 = 0;
                  uint64_t v53 = 8 * v42;
                  unint64_t v54 = (char *)v125 + 8 * v42;
                  do
                  {
                    if (v52 < v41)
                    {
                      double v55 = *(double *)(v37 + 8 * v52);
                      if (*((unsigned char *)v6 + 360)) {
                        double v55 = v55 * *(double *)(v6[46] + v53 + 8 * v52);
                      }
                      *(double *)&v54[8 * v52] = v55;
                    }
                    ++v52;
                    v46 -= 8;
                  }
                  while (v51 != v52);
LABEL_67:
                  v37 -= v46;
                }
                break;
              default:
                break;
            }
            ++v36;
          }
          while (v36 != v35);
        }
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      uint64_t v68 = v125;
      *((void *)v125 + v6[41]) = 0x3FF0000000000000;
      double v69 = 1.0;
      if (*(unsigned char *)(v120 + 16)) {
        BOOL v70 = *(unsigned char *)(v120 + 17) == 0;
      }
      else {
        BOOL v70 = 0;
      }
      if (v70)
      {
        double v71 = (void *)(v120 + 24);
        if (!*(unsigned char *)(v120 + 18)) {
          double v71 = (void *)(*(void *)(v120 + 96) + 8 * v122);
        }
        double v69 = *(double *)(*(void *)(v120 + 96) + 8 * v122 + 8 * *v71 - 8);
      }
      uint64_t v72 = (uint64_t *)v110[2];
      v127[0] = &v125;
      v127[1] = v72;
      if (v72[1])
      {
        *(void *)&v128.f64[1] = v68;
        uint64_t v129 = *v72;
        v130 = v127;
        double v73 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v128);
      }
      else
      {
        double v73 = 0.0;
      }
      double v74 = v73 - v69;
      double v75 = v74 + v74;
      int64_t v76 = (char *)v125;
      uint64_t v77 = (float64x2_t *)*v13;
      uint64_t v78 = v13[1];
      if (v78 >= 0) {
        uint64_t v79 = v13[1];
      }
      else {
        uint64_t v79 = v78 + 1;
      }
      int64_t v80 = v79 & 0xFFFFFFFFFFFFFFFELL;
      if (v78 >= 2)
      {
        int64_t v81 = 0;
        double v82 = (float64x2_t *)*v13;
        uint64_t v83 = (float64x2_t *)v125;
        do
        {
          float64x2_t v84 = *v83++;
          float64x2_t *v82 = vaddq_f64(*v82, vmulq_n_f64(v84, v75));
          ++v82;
          v81 += 2;
        }
        while (v81 < v80);
      }
      BOOL v85 = v78 <= v80;
      uint64_t v86 = v78 - v80;
      if (!v85)
      {
        uint64_t v87 = v79 >> 1;
        double v88 = (double *)&v76[16 * v87];
        f64 = v77[v87].f64;
        do
        {
          double v90 = *v88++;
          double *f64 = v75 * v90 + *f64;
          ++f64;
          --v86;
        }
        while (v86);
      }
      *uint64_t v111 = *v111 + v74 * v74;
      if (*v110[1])
      {
        v127[3] = v126;
        v127[4] = 0x4000000000000000;
        v127[5] = &v125;
        v127[7] = &v125;
        if (v126)
        {
          uint64_t v129 = 0x4000000000000000;
          v131 = v125;
          uint64_t v132 = v125;
          unsigned int v133 = v127;
          v91.f64[0] = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>> const> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v128);
        }
        else
        {
          v91.f64[0] = 0.0;
        }
        v128.f64[0] = v91.f64[0];
        uint64_t v92 = *v109;
        uint64_t v93 = v13[4] * v13[3];
        if (v93 >= 0) {
          uint64_t v94 = v13[4] * v13[3];
        }
        else {
          uint64_t v94 = v93 + 1;
        }
        int64_t v95 = v94 & 0xFFFFFFFFFFFFFFFELL;
        if (v93 >= 2)
        {
          int64_t v96 = 0;
          float64x2_t v91 = v128;
          timeval v97 = *v109;
          do
          {
            *timeval v97 = vaddq_f64(v91, *v97);
            ++v97;
            v96 += 2;
          }
          while (v96 < v95);
        }
        BOOL v85 = v93 <= v95;
        uint64_t v98 = v93 - v95;
        if (!v85)
        {
          timeval v99 = v92[v94 >> 1].f64;
          do
          {
            double *v99 = v91.f64[0] + *v99;
            ++v99;
            --v98;
          }
          while (v98);
        }
      }
      if (v124 | v114)
      {
        uint64_t v100 = (uint64_t *)(*(void *)(v120 + 96) + 8 * v122);
        if (v115) {
          uint64_t v100 = &v116;
        }
        v122 += *v100;
      }
      uint64_t v101 = v118 + 1;
      uint64_t v102 = v117;
      uint64_t v103 = ++v118 - v113 * v119;
      uint64_t v123 = v103;
      if (v103 == v113 && v101 != v117)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v112);
        uint64_t v102 = v117;
        uint64_t v101 = v118;
      }
    }
    while (v101 != v102);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v112);
  free(v125);
}

void sub_22423096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
}

void *Eigen::DenseStorage<double,-1,-1,-1,0>::resize(void *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  if (result[2] * result[1] != a2)
  {
    free((void *)*result);
    if (a2)
    {
      if (a2 >> 61 || (__n128 result = malloc_type_malloc(8 * a2, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v9 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v9, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      __n128 result = 0;
    }
    void *v6 = result;
  }
  v6[1] = a3;
  v6[2] = a4;
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>> const> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 80) + 56) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 80) + 56) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 80) + 56) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  if ((unint64_t)(v1 + 1) < 3) {
    return *(double *)(a1 + 24) * **(double **)(a1 + 48) * **(double **)(a1 + 64);
  }
  int64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
  double v6 = *(double *)(a1 + 24);
  uint64_t v7 = *(float64x2_t **)(a1 + 48);
  unint64_t v8 = *(float64x2_t **)(a1 + 64);
  float64x2_t v9 = vmulq_f64(vmulq_n_f64(*v7, v6), *v8);
  if (v1 >= 4)
  {
    int64_t v10 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v11 = vmulq_f64(vmulq_n_f64(v7[1], v6), v8[1]);
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v12 = v8 + 3;
      uint64_t v13 = v7 + 3;
      uint64_t v14 = 4;
      do
      {
        float64x2_t v9 = vaddq_f64(v9, vmulq_f64(vmulq_n_f64(v13[-1], v6), v12[-1]));
        float64x2_t v15 = *v13;
        v13 += 2;
        float64x2_t v16 = vmulq_n_f64(v15, v6);
        float64x2_t v17 = *v12;
        v12 += 2;
        float64x2_t v11 = vaddq_f64(v11, vmulq_f64(v16, v17));
        v14 += 4;
      }
      while (v14 < v10);
    }
    float64x2_t v9 = vaddq_f64(v11, v9);
    if (v5 > v10) {
      float64x2_t v9 = vaddq_f64(v9, vmulq_f64(vmulq_n_f64(*(float64x2_t *)((char *)v7 + 8 * v10), v6), *(float64x2_t *)((char *)v8 + 8 * v10)));
    }
  }
  double result = vaddvq_f64(v9);
  BOOL v18 = v1 <= v5;
  uint64_t v19 = v1 - v5;
  if (!v18)
  {
    uint64_t v20 = v3 >> 1;
    f64 = v7[v3 >> 1].f64;
    uint64_t v22 = v8[v20].f64;
    do
    {
      double v23 = *f64++;
      double v24 = v6 * v23;
      double v25 = *v22++;
      double result = result + v24 * v25;
      --v19;
    }
    while (v19);
  }
  return result;
}

void turi::ml_data_iterator::~ml_data_iterator(turi::ml_data_iterator *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v8 = (void **)((char *)this + 248);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v8 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v8 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  double v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D772AD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772AD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t *turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 328) + 1;
  LOBYTE(v113) = 0;
  long long v114 = 0u;
  long long v115 = 0u;
  uint64_t v116 = v6;
  uint64_t v7 = *(void *)(v5 + 848) + 120 * a2;
  int64_t v10 = *(char **)(v7 + 8);
  uint64_t v8 = *(void *)(v7 + 16);
  float64x2_t v9 = (void *)(v7 + 8);
  uint64_t v11 = *(void *)(v5 + 840);
  BOOL v85 = v9;
  if (v8 != v11)
  {
    free(v10);
    if (v11)
    {
      if ((unint64_t)v11 >> 61 || (int64_t v10 = (char *)malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
      {
LABEL_108:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        float64x2_t v84 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v84, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      int64_t v10 = 0;
    }
    float64x2_t v9 = v85;
    *BOOL v85 = v10;
  }
  v9[1] = v11;
  if (v11 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    unint64_t v14 = 2;
    if (v13 > 2) {
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v10, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    float64x2_t v9 = v85;
  }
  uint64_t v87 = (double *)(v9 + 5);
  if (v13 < v11)
  {
    bzero(&v10[16 * (v12 >> 1)], 8 * v11 - 16 * (v12 >> 1));
    float64x2_t v9 = v85;
  }
  float64x2_t v15 = (void **)(v9 + 2);
  *uint64_t v87 = 0.0;
  if (*(unsigned char *)a1[1])
  {
    uint64_t v16 = *(void *)(v5 + 840);
    if (v16 && 0x7FFFFFFFFFFFFFFFLL / v16 < v16) {
      goto LABEL_108;
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v9 + 2, v16 * v16, v16, *(void *)(v5 + 840));
    BOOL v18 = (char *)v15[1];
    float64x2_t v17 = (char *)v15[2];
    uint64_t v19 = (char *)*v15;
    uint64_t v20 = (void)v17 * (void)v18;
    if ((uint64_t)((void)v17 * (void)v18) >= 0) {
      uint64_t v21 = (void)v17 * (void)v18;
    }
    else {
      uint64_t v21 = v20 + 1;
    }
    int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    if (v20 >= 2)
    {
      unint64_t v23 = 2;
      if (v22 > 2) {
        unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(*v15, ((8 * v23 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v22 < v20) {
      bzero(&v19[16 * (v21 >> 1)], 8 * v20 - 16 * (v21 >> 1));
    }
  }
  turi::ml_data::get_iterator((turi::ml_data *)(v5 + 384), a2, a3, (uint64_t)v100);
  if (v106 != v105)
  {
    uint64_t v86 = (uint64_t *)v15;
    do
    {
      uint64_t v25 = v108;
      double v24 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v90 = v24;
      *(void *)&long long v115 = 0;
      if (v112)
      {
        uint64_t v26 = *(void *)(v25 + 56);
        if (v26)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *(void *)(v25 + 96) + 8 * v110 + 8 * (*(unsigned char *)(v25 + 18) == 0);
          uint64_t v91 = v25;
          uint64_t v92 = *(void *)(v25 + 56);
          do
          {
            uint64_t v29 = *(void *)(*(void *)(v25 + 72) + 16 * v27);
            unint64_t v30 = *(void *)(v29 + 64);
            uint64_t v31 = *(void *)(v29 + 104);
            switch(*(_DWORD *)(v29 + 24))
            {
              case 0:
                double v32 = *(double *)v28;
                v28 += 8;
                double v33 = v32;
                if (v30)
                {
                  if (!*(unsigned char *)(v5 + 360))
                  {
                    uint64_t v93 = 0;
                    uint64_t v53 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v31, &v93);
                    goto LABEL_75;
                  }
                  double v34 = *(double *)(*(void *)(v5 + 368) + 8 * v31);
                  uint64_t v93 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v31, &v93) = v33 * v34;
                }
                break;
              case 1:
                double v51 = *(double *)v28;
                v28 += 8;
                double v50 = v51;
                if (*(void *)&v51 < v30)
                {
                  uint64_t v52 = *(void *)&v50 + v31;
                  if (*(unsigned char *)(v5 + 360))
                  {
                    double v33 = *(double *)(*(void *)(v5 + 368) + 8 * v52);
                    uint64_t v93 = 0;
                    uint64_t v53 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v52, &v93);
LABEL_75:
                    double *v53 = v33;
                  }
                  else
                  {
                    uint64_t v93 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v52, &v93) = 0x3FF0000000000000;
                  }
                }
                break;
              case 2:
                uint64_t v35 = *(void *)(v29 + 72);
                if (!v35) {
                  goto LABEL_56;
                }
                uint64_t v36 = 0;
                unint64_t v37 = 0;
                uint64_t v38 = v31 << 32;
                uint64_t v39 = 8 * v31;
                do
                {
                  if (v37 < v30)
                  {
                    double v40 = *(double *)(v28 + 8 * v37);
                    uint64_t v41 = v38 >> 32;
                    if (*(unsigned char *)(v5 + 360))
                    {
                      double v42 = *(double *)(*(void *)(v5 + 368) + v39 + 8 * v37);
                      uint64_t v93 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, v41, &v93) = v40 * v42;
                    }
                    else
                    {
                      uint64_t v93 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, v41, &v93) = v40;
                    }
                  }
                  ++v37;
                  v38 += 0x100000000;
                  v36 -= 8;
                }
                while (v35 != v37);
                goto LABEL_55;
              case 3:
                double v55 = *(double *)v28;
                v28 += 8;
                for (double i = v55; i != 0.0; --*(void *)&i)
                {
                  if (*(void *)v28 < v30)
                  {
                    uint64_t v56 = *(void *)v28 + v31;
                    if (*(unsigned char *)(v5 + 360))
                    {
                      uint64_t v57 = *(void *)(*(void *)(v5 + 368) + 8 * v56);
                      uint64_t v93 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v56, &v93) = v57;
                    }
                    else
                    {
                      uint64_t v93 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v56, &v93) = 0x3FF0000000000000;
                    }
                  }
                  v28 += 8;
                }
                break;
              case 4:
                double v59 = *(double *)v28;
                v28 += 8;
                for (double j = v59; j != 0.0; --*(void *)&j)
                {
                  if (*(void *)v28 < v30)
                  {
                    double v60 = *(double *)(v28 + 8);
                    uint64_t v61 = *(void *)v28 + v31;
                    if (*(unsigned char *)(v5 + 360))
                    {
                      double v62 = *(double *)(*(void *)(v5 + 368) + 8 * v61);
                      uint64_t v93 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v61, &v93) = v60 * v62;
                    }
                    else
                    {
                      uint64_t v93 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, (int)v61, &v93) = v60;
                    }
                  }
                  v28 += 16;
                }
                break;
              case 7:
                uint64_t v43 = *(void *)(v29 + 72);
                if (v43)
                {
                  uint64_t v36 = 0;
                  unint64_t v44 = 0;
                  uint64_t v45 = v31 << 32;
                  uint64_t v46 = 8 * v31;
                  do
                  {
                    if (v44 < v30)
                    {
                      double v47 = *(double *)(v28 + 8 * v44);
                      uint64_t v48 = v45 >> 32;
                      if (*(unsigned char *)(v5 + 360))
                      {
                        double v49 = *(double *)(*(void *)(v5 + 368) + v46 + 8 * v44);
                        uint64_t v93 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, v48, &v93) = v47 * v49;
                      }
                      else
                      {
                        uint64_t v93 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, v48, &v93) = v47;
                      }
                    }
                    ++v44;
                    v45 += 0x100000000;
                    v36 -= 8;
                  }
                  while (v43 != v44);
LABEL_55:
                  v28 -= v36;
                  uint64_t v25 = v91;
                }
LABEL_56:
                uint64_t v26 = v92;
                break;
              default:
                break;
            }
            ++v27;
          }
          while (v27 != v26);
        }
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }
      uint64_t v63 = *(int *)(v5 + 328);
      uint64_t v93 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v114, v63, &v93) = 0x3FF0000000000000;
      double v64 = 1.0;
      if (*(unsigned char *)(v108 + 16)) {
        BOOL v65 = *(unsigned char *)(v108 + 17) == 0;
      }
      else {
        BOOL v65 = 0;
      }
      if (v65)
      {
        double v66 = (void *)(v108 + 24);
        if (!*(unsigned char *)(v108 + 18)) {
          double v66 = (void *)(*(void *)(v108 + 96) + 8 * v110);
        }
        double v64 = *(double *)(*(void *)(v108 + 96) + 8 * v110 + 8 * *v66 - 8);
      }
      uint64_t v67 = v115;
      if ((uint64_t)v115 <= 0)
      {
        double v72 = 0.0 - v64;
      }
      else
      {
        uint64_t v68 = 0;
        BOOL v70 = (int *)*((void *)&v114 + 1);
        double v69 = (double *)v114;
        double v71 = 0.0;
        do
        {
          double v71 = v71
              + *(double *)(v114 + 8 * v68)
              * *(double *)(*(void *)a1[2] + 8 * *(int *)(*((void *)&v114 + 1) + 4 * v68));
          ++v68;
        }
        while ((void)v115 != v68);
        double v72 = v71 - v64;
        uint64_t v73 = *v85;
        do
        {
          uint64_t v75 = *v70++;
          uint64_t v74 = v75;
          double v76 = *v69++;
          *(double *)(v73 + 8 * v74) = (v72 + v72) * v76 + *(double *)(v73 + 8 * v74);
          --v67;
        }
        while (v67);
      }
      *uint64_t v87 = *v87 + v72 * v72;
      if (*(unsigned char *)a1[1])
      {
        LOBYTE(v93) = 0;
        v94[0] = 0;
        uint64_t v95 = v116;
        uint64_t v96 = 0x4000000000000000;
        v88 &= 0xFFFFFFFFFFFFFF00;
        uint64_t v97 = v88;
        uint64_t v98 = &v113;
        timeval v99 = &v113;
        Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,Eigen::SparseVector<double,0,int>,Eigen::SparseShape,Eigen::SparseShape,6>::addTo<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>>(v86, (uint64_t)v94, &v113);
      }
      if (v112 | v102)
      {
        uint64_t v77 = (uint64_t *)(*(void *)(v108 + 96) + 8 * v110);
        if (v103) {
          uint64_t v77 = &v104;
        }
        v110 += *v77;
      }
      uint64_t v78 = v106 + 1;
      uint64_t v79 = v105;
      uint64_t v80 = ++v106 - v101 * v107;
      uint64_t v111 = v80;
      if (v80 == v101 && v78 != v105)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v100);
        uint64_t v79 = v105;
        uint64_t v78 = v106;
      }
    }
    while (v78 != v79);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v100);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v114);
}

void sub_224231474(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,Eigen::SparseVector<double,0,int>,Eigen::SparseShape,Eigen::SparseShape,6>::addTo<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>>(uint64_t *a1, uint64_t a2, void *a3)
{
  LOBYTE(v7) = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v10 = 0;
  uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 40);
  LOBYTE(v11) = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = v5;
  Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,1>::run(&v11, a2);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  long long v8 = v12;
  long long v12 = 0u;
  long long v9 = v13;
  long long v13 = 0u;
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v12);
  Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,1,long>,Eigen::SparseVector<double,0,int>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,0>::run(&v7, a3, a1);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v8);
}

void sub_2242315AC(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,1,long>,Eigen::SparseVector<double,0,int>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,0>::run(void *a1, void *a2, uint64_t *a3)
{
  v25[0] = 0;
  long long v26 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  memset(v28, 0, sizeof(v28));
  Eigen::SparseMatrix<double,0,long>::operator=<Eigen::SparseVector<double,1,long>>((uint64_t)v25, a1);
  uint64_t v5 = a2[3];
  uint64_t v6 = v27[0];
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    long long v10 = v28[0];
    double v11 = v27[1];
    uint64_t v12 = *a3;
    do
    {
      uint64_t v13 = *(int *)(v9 + 4 * v7);
      uint64_t v14 = v6[v13];
      if (v11) {
        uint64_t v15 = v11[v13] + v14;
      }
      else {
        uint64_t v15 = v6[v13 + 1];
      }
      BOOL v16 = v15 <= v14;
      uint64_t v17 = v15 - v14;
      if (!v16)
      {
        double v18 = *(double *)(v8 + 8 * v7);
        uint64_t v19 = (double *)(v10 + 8 * v14);
        uint64_t v20 = (uint64_t *)(*((void *)&v10 + 1) + 8 * v14);
        do
        {
          uint64_t v22 = *v20++;
          uint64_t v21 = v22;
          double v23 = *v19++;
          *(double *)(v12 + 8 * v21) = *(double *)(v12 + 8 * v21) + v23 * v18;
          --v17;
        }
        while (v17);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  free(v6);
  free(v27[1]);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)v28);
}

void sub_2242316BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)va);
  _Unwind_Resume(a1);
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,1>::run(double *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 40);
  uint64_t v3 = v2[3];
  if (v3 >= 1)
  {
    int v4 = result;
    double v5 = *(double *)(a2 + 24);
    uint64_t v6 = (double *)v2[1];
    uint64_t v7 = (int *)v2[2];
    do
    {
      double v8 = *v6++;
      double v9 = v5 * v8;
      uint64_t v10 = *v7++;
      __n128 result = (double *)Eigen::SparseVector<double,1,long>::insert(v4, v10);
      *__n128 result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *Eigen::SparseVector<double,1,long>::insert(void *a1, uint64_t a2)
{
  int v4 = a1 + 1;
  uint64_t v5 = a1[3];
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)(a1 + 1), v5 + 1, 1.0);
  uint64_t v6 = a1[2];
  if (v5 >= 1)
  {
    uint64_t v7 = 8 * v5 - 8;
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + v7);
      if (v8 <= a2) {
        break;
      }
      --v5;
      *(void *)(v6 + v7 + 8) = v8;
      *(void *)(*v4 + v7 + 8) = *(void *)(*v4 + v7);
      v7 -= 8;
      if ((unint64_t)(v5 + 1) <= 1)
      {
        uint64_t v5 = 0;
        break;
      }
    }
  }
  *(void *)(v6 + 8 * v5) = a2;
  __n128 result = (void *)(*v4 + 8 * v5);
  *__n128 result = 0;
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,long>::resize(uint64_t result, uint64_t a2, double a3)
{
  if (*(void *)(result + 24) < a2)
  {
    if (((uint64_t)((double)a2 * a3) & 0x8000000000000000) == 0) {
      operator new[]();
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  *(void *)(result + 16) = a2;
  return result;
}

void sub_224231938(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    MEMORY[0x22A614F80](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    MEMORY[0x22A614F80](v3, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t Eigen::SparseMatrix<double,0,long>::~SparseMatrix(uint64_t a1)
{
  return a1;
}

uint64_t Eigen::SparseMatrix<double,0,long>::operator=<Eigen::SparseVector<double,1,long>>(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  v31[0] = 0;
  long long v32 = 0u;
  *(_OWORD *)double v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  Eigen::SparseMatrix<double,0,long>::resize((uint64_t)v31, 1, v4);
  uint64_t v5 = v33[0];
  if ((uint64_t)v32 >= 1) {
    bzero(v33[0], 8 * v32);
  }
  uint64_t v6 = a2[3];
  if (v6 >= 1)
  {
    uint64_t v7 = (uint64_t *)a2[2];
    do
    {
      uint64_t v8 = *v7++;
      ++v5[v8];
      --v6;
    }
    while (v6);
  }
  if ((void)v32)
  {
    if ((unint64_t)v32 >> 61 || (v9 = malloc_type_malloc(8 * v32, 0x1E76AA36uLL), (uint64_t v10 = v9) == 0))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v30 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v30, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v11 = v32;
    uint64_t v12 = v33[0];
    if ((uint64_t)v32 < 1)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12[v13];
        v12[v13] = v14;
        v9[v13] = v14;
        v14 += v15;
        ++v13;
        uint64_t v11 = v32;
      }
      while (v13 < (uint64_t)v32);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v33[0];
  }
  v12[v11] = v14;
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v34, v14, 0.0);
  uint64_t v16 = *((void *)&v34 + 1);
  uint64_t v17 = v34;
  uint64_t v18 = a2[3];
  if (v18 >= 1)
  {
    uint64_t v19 = (uint64_t *)a2[1];
    uint64_t v20 = (uint64_t *)a2[2];
    do
    {
      uint64_t v21 = *v20++;
      uint64_t v22 = v10[v21];
      v10[v21] = v22 + 1;
      *(void *)(v16 + 8 * v22) = 0;
      uint64_t v23 = *v19++;
      *(void *)(v17 + 8 * v22) = v23;
      --v18;
    }
    while (v18);
    uint64_t v17 = v34;
  }
  long long v24 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v32;
  long long v25 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  long long v32 = v24;
  *(_OWORD *)double v33 = v25;
  long long v26 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = v17;
  *(void *)(a1 + 48) = v16;
  long long v27 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v35;
  long long v34 = v26;
  long long v35 = v27;
  free(v10);
  free(v33[0]);
  free(v33[1]);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v34);
  return a1;
}

void sub_224231BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  free(v10);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Eigen::SparseMatrix<double,0,long>::resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 != a3 || v5 == 0)
  {
    free(*(void **)(a1 + 24));
    uint64_t v7 = malloc_type_malloc(8 * v3 + 8, 0x100004000313F17uLL);
    *(void *)(a1 + 24) = v7;
    if (!v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    *(void *)(a1 + 8) = v3;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 32) = 0;
    uint64_t v3 = *(void *)(a1 + 8);
  }
  double v9 = *(void **)(a1 + 24);
  bzero(v9, 8 * v3 + 8);
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(uint64_t a1, turi::ml_metadata **a2)
{
  if (*a2)
  {
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 1 > v5)
      {
        size_t v8 = 2 * v5 + 2;
        *(void *)(a1 + 40) = v8;
        double v9 = *(void **)(a1 + 16);
        if (v9)
        {
          uint64_t v6 = (unsigned char *)*v9;
          size_t v10 = v9[1] - *v9;
          BOOL v11 = v8 >= v10;
          std::vector<char>::size_type v12 = v8 - v10;
          if (v12 != 0 && v11)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
            uint64_t v6 = **(unsigned char ***)(a1 + 16);
          }
          else if (!v11)
          {
            v9[1] = &v6[v8];
          }
        }
        else
        {
          uint64_t v6 = malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v6;
      }
      else
      {
        uint64_t v6 = *(unsigned char **)(a1 + 24);
      }
      v6[(*(void *)(a1 + 32))++] = 1;
    }
    turi::ml_metadata::save(*a2, (turi::oarchive *)a1);
  }
  if (*(void *)a1) {
    return (unsigned char *)std::ostream::write();
  }
  unint64_t v7 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + 1 > v7)
  {
    size_t v13 = 2 * v7 + 2;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = *(void **)(a1 + 16);
    if (v14)
    {
      __n128 result = (unsigned char *)*v14;
      size_t v15 = v14[1] - *v14;
      BOOL v16 = v13 >= v15;
      std::vector<char>::size_type v17 = v13 - v15;
      if (v17 != 0 && v16)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v17);
        __n128 result = **(unsigned char ***)(a1 + 16);
      }
      else if (!v16)
      {
        v14[1] = &result[v13];
      }
    }
    else
    {
      __n128 result = malloc_type_realloc(*(void **)(a1 + 24), v13, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = result;
  }
  else
  {
    __n128 result = *(unsigned char **)(a1 + 24);
  }
  result[(*(void *)(a1 + 32))++] = 0;
  return result;
}

void *turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v29 = v4;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v14 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v14;
      size_t v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        uint64_t v6 = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v6[v14];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      uint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v7)
    {
      size_t v19 = 2 * v7 + 16;
      *(void *)(a1 + 40) = v19;
      uint64_t v20 = *(char ***)(a1 + 16);
      if (v20)
      {
        size_t v8 = *v20;
        size_t v21 = v20[1] - *v20;
        BOOL v22 = v19 >= v21;
        std::vector<char>::size_type v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v23);
          size_t v8 = **(char ***)(a1 + 16);
        }
        else if (!v22)
        {
          v20[1] = &v8[v19];
        }
      }
      else
      {
        size_t v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v19, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v8;
    }
    else
    {
      size_t v8 = *(char **)(a1 + 24);
    }
    *(void *)&v8[*(void *)(a1 + 32)] = 1;
    *(void *)(a1 + 32) += 8;
  }
  double v9 = *(const void **)a2;
  size_t v10 = 8 * v29;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v12 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v10 > v12)
  {
    size_t v24 = 2 * (v12 + v10);
    *(void *)(a1 + 40) = v24;
    long long v25 = *(char ***)(a1 + 16);
    if (v25)
    {
      size_t v13 = *v25;
      size_t v26 = v25[1] - *v25;
      BOOL v27 = v24 >= v26;
      std::vector<char>::size_type v28 = v24 - v26;
      if (v28 != 0 && v27)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v28);
        size_t v13 = **(char ***)(a1 + 16);
      }
      else if (!v27)
      {
        v25[1] = &v13[v24];
      }
    }
    else
    {
      size_t v13 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v24, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v13;
  }
  else
  {
    size_t v13 = *(char **)(a1 + 24);
  }
  __n128 result = memcpy(&v13[*(void *)(a1 + 32)], v9, v10);
  *(void *)(a1 + 32) += v10;
  return result;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(unsigned __int8 *)(v3 + v4);
    *(void *)(a1 + 24) = v4 + 1;
    if (v5) {
      operator new();
    }
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::shared_ptr<turi::ml_metadata>::reset[abi:ne180100]<turi::ml_metadata,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_metadata>::shared_ptr[abi:ne180100]<turi::ml_metadata,void>(&v2, a2);
}

void std::shared_ptr<turi::ml_metadata>::shared_ptr[abi:ne180100]<turi::ml_metadata,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224232270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<turi::ml_metadata>::reset[abi:ne180100]((turi::ml_metadata **)va, 0);
  _Unwind_Resume(a1);
}

turi::ml_metadata *std::__shared_ptr_pointer<turi::ml_metadata *,std::shared_ptr<turi::ml_metadata>::__shared_ptr_default_delete<turi::ml_metadata,turi::ml_metadata>,std::allocator<turi::ml_metadata>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(turi::ml_metadata **)(a1 + 24);
  if (result)
  {
    turi::ml_metadata::~ml_metadata(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::ml_metadata *,std::shared_ptr<turi::ml_metadata>::__shared_ptr_default_delete<turi::ml_metadata,turi::ml_metadata>,std::allocator<turi::ml_metadata>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::ml_metadata::~ml_metadata(turi::ml_metadata *this)
{
  int v5 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  int v5 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  int v5 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (void **)this;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

turi::ml_metadata *std::unique_ptr<turi::ml_metadata>::reset[abi:ne180100](turi::ml_metadata **a1, turi::ml_metadata *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::ml_metadata::~ml_metadata(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void *turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>(uint64_t a1, void **a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
LABEL_4:
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(v4 + v6);
    uint64_t v10 = v7;
    *(void *)(a1 + 24) = v6 + 8;
    goto LABEL_5;
  }
  std::istream::read();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    goto LABEL_4;
  }
  std::istream::read();
  uint64_t v7 = 0;
LABEL_5:
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v11, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return (void *)std::istream::read();
  }
  __n128 result = memcpy(*a2, (const void *)(v8 + *(void *)(a1 + 24)), 8 * v11 * v10);
  *(void *)(a1 + 24) += 8 * v11 * v10;
  return result;
}

BOOL turi::$_1::__invoke(turi::$_1 *this)
{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

BOOL turi::$_2::__invoke(turi::$_2 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_3::__invoke(uint64_t this)
{
  return this >= 1 && (this & (this - 1)) == 0;
}

BOOL turi::$_4::__invoke(turi::$_4 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_5::__invoke(turi::$_5 *this)
{
  return (uint64_t)this > 0;
}

void turi::save_sgraph_to_json(uint64_t a1, uint64_t a2)
{
  v3[48] = *(void **)MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  turi::general_ofstream::general_ofstream(v3, (uint64_t)&v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__r_.__value_.__l.__data_);
  }
  if (turi::general_ofstream::good((turi::general_ofstream *)v3)) {
    internalJSONNode::newInternal((internalJSONNode *)4);
  }
  turi::save_sgraph_to_json(turi::sgraph const&,std::string)::$_0::operator()();
}

void sub_224232C3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __cxa_call_unexpected(a1);
  }
  _Unwind_Resume(a1);
}

void turi::save_sgraph_to_csv(turi::sgraph *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  turi::fileio::get_file_status(a2, (uint64_t)&v20);
  switch(v20)
  {
    case 0:
      if ((turi::fileio::create_directory(a2) & 1) == 0)
      {
        v23[0] = (unsigned __int8 *)&v20;
        turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_0::operator()();
      }
      return;
    case 1:
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_1::operator()();
    case 2:
      break;
    case 3:
      v23[0] = (unsigned __int8 *)&v20;
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_2::operator()();
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
      size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Error: Unknown. ", 16);
      size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_io.cpp", 104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" at ", 4);
      std::ostream::operator<<();
      size_t v21 = v23;
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_3::operator()();
  }
  v23[1] = 0;
  v23[0] = 0;
  v24[0] = 0;
  v22[1] = 0;
  v22[0] = 0;
  size_t v21 = (unsigned __int8 **)v22;
  turi::sgraph::get_vertices(a1, v23, &v21, 0, (turi::sframe *)v25);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
  size_t v21 = v23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v4 + 13);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/vertices.csv");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = v19;
  }
  turi::general_ofstream::general_ofstream(v23, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (turi::general_ofstream::good((turi::general_ofstream *)v23))
  {
    memset(&v17, 0, sizeof(v17));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
    std::string::size_type v7 = v17.__r_.__value_.__r.__words[0];
    if (v17.__r_.__value_.__l.__size_ != v17.__r_.__value_.__r.__words[0])
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = v7 + v8;
        int v11 = *(char *)(v10 + 23);
        if (v11 >= 0) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = *(void *)v10;
        }
        if (v11 >= 0) {
          uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          uint64_t v13 = *(void *)(v10 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v12, v13);
        if (v9 == v26 - 1) {
          size_t v14 = "\n";
        }
        else {
          size_t v14 = ",";
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v14, 1);
        ++v9;
        std::string::size_type v7 = v17.__r_.__value_.__r.__words[0];
        v8 += 24;
      }
      while (v9 < 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
    }
    turi::sframe::get_reader((turi::sframe *)v25);
  }
  turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_4::operator()();
}

void sub_2242338E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a14);
  turi::general_ofstream::~general_ofstream((turi::general_ofstream *)&STACK[0x208]);
  if (a58 < 0) {
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x388]);
  STACK[0x208] = (unint64_t)&a59;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  uint64_t v74 = a62;
  a62 = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  STACK[0x208] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  turi::general_ofstream::~general_ofstream((turi::general_ofstream *)&STACK[0x4B0]);
  if (a72 < 0) {
    operator delete(a70);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x630]);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return turi::error::io_error::io_error(v9, &a9);
}

uint64_t OUTLINED_FUNCTION_3_5(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return file_logger::operator<<<std::string>(v3, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return std::stringbuf::str();
}

void turi::sgraph_compute::triple_apply(turi::sgraph *a1, uint64_t a2, const void ***a3, const void ***a4, char a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  std::vector<turi::mutex>::vector(v14, turi::SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE);
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME[0]);
  unint64_t edge_field_id = turi::sgraph::get_edge_field_id((uint64_t)a1, (unsigned __int8 **)__p, 0, 0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, turi::sgraph::DST_COLUMN_NAME);
  unint64_t v8 = turi::sgraph::get_edge_field_id((uint64_t)a1, (unsigned __int8 **)v10, 0, 0);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::__value_func[abi:ne180100]((uint64_t)v31, a2);
  v32[0] = (void **)&unk_26D772BD0;
  turi::sframe::sframe((turi::sframe *)v33);
  v34[3] = 0;
  v35[3] = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)v31);
  v39[4] = v14;
  v39[5] = edge_field_id;
  v39[6] = v8;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](v31);
  v42[0] = &unk_26D772C30;
  v42[1] = &v15;
  uint64_t v43 = v42;
  unint64_t v9 = *(void *)(v15 + 24);
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v42);
  v40[0] = &unk_26D772D10;
  v40[1] = &v15;
  v40[2] = v23;
  v40[3] = v40;
  turi::sgraph_compute::hilbert_blocked_parallel_for (v9, (uint64_t)v41, (uint64_t)v40, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
  std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](v40);
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](v41);
  int v20 = 0;
  size_t v21 = 0;
  uint64_t v22 = 0;
  if (!v43) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, void **))(*v43 + 48))(v43, &v20);
  if (v20)
  {
    size_t v21 = v20;
    operator delete(v20);
  }
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100](v42);
  v23[0] = &unk_26D772BD0;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](v30);
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v26);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v25);
  turi::sframe::~sframe((turi::sframe *)&v24);
  v32[0] = (void **)&unk_26D772BD0;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](v39);
  if (*((void *)&v37 + 1))
  {
    *(void *)&long long v38 = *((void *)&v37 + 1);
    operator delete(*((void **)&v37 + 1));
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v36);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v35);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v34);
  turi::sframe::~sframe((turi::sframe *)v33);
  v32[0] = (void **)v14;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](v32);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v17, v17[1]);
  v32[0] = (void **)&v16;
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](v32);
}

void sub_224233EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__function::__value_func<void ()(std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100]((void *)(v36 - 152));
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100]((void *)(v36 - 120));
  std::__function::__value_func<void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__value_func[abi:ne180100]((void *)(v36 - 88));
  STACK[0x308] = (unint64_t)&a16;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::anonymous namespace'::triple_apply_impl::triple_apply_impl(uint64_t a1, turi::sgraph *this, const void ***a3, const void ***a4, char a5)
{
  *(void *)(a1 + 8) = 0;
  long long v32 = (uint64_t *)(a1 + 8);
  *(void *)a1 = this;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::size_type v7 = (uint64_t *)(a1 + 56);
  unint64_t v8 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = a5;
  turi::sgraph::get_vertex_fields(this, 0, &v46);
  turi::sgraph::get_edge_fields(*(turi::sgraph **)a1, 0, 0, &v45);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v43, (const void **)v46.__r_.__value_.__l.__data_, (const void **)v46.__r_.__value_.__l.__size_);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v41, (const void **)v45.__r_.__value_.__l.__data_, (const void **)v45.__r_.__value_.__l.__size_);
  uint64_t v10 = *a3;
  unint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v43, v10);
      std::operator+<char>();
      if (v36.__r_.__value_.__s.__data_[15] >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      assert_msg(v11 != 0, "%s", p_p);
      if (v36.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(__p);
      }
      v10 += 3;
    }
    while (v10 != v9);
  }
  size_t v14 = *a4;
  char v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      uint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v41, v14);
      std::operator+<char>();
      if (v36.__r_.__value_.__s.__data_[15] >= 0) {
        uint64_t v16 = (const char *)&__p;
      }
      else {
        uint64_t v16 = (const char *)__p;
      }
      assert_msg(v15 != 0, "%s", v16);
      if (v36.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(__p);
      }
      v14 += 3;
    }
    while (v14 != v13);
  }
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::resize(v32, *(void *)(*(void *)a1 + 24));
  turi::sgraph::get_vertex_field_types(*(turi::sgraph **)a1, 0, v40);
  turi::sgraph::get_edge_field_types(*(turi::sgraph **)a1, 0, 0, (uint64_t *)v39);
  std::string v17 = *a3;
  std::string v18 = a3[1];
  if (*a3 != v18)
  {
    do
    {
      std::string v19 = *(turi::sgraph **)a1;
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)*v17, (std::string::size_type)v17[1]);
      }
      else
      {
        long long v20 = *(_OWORD *)v17;
        v38.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
      }
      unint64_t vertex_field_id = (void *)turi::sgraph::get_vertex_field_id((uint64_t)v19, (unsigned __int8 **)&v38, 0);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      char v22 = *((unsigned char *)v40[0] + (unint64_t)vertex_field_id);
      std::string __p = vertex_field_id;
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v17, (std::string::size_type)v17[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v17;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
      }
      char v37 = v22;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      v17 += 3;
    }
    while (v17 != v18);
  }
  uint64_t v24 = *a4;
  long long v25 = a4[1];
  if (*a4 != v25)
  {
    do
    {
      uint64_t v26 = *(turi::sgraph **)a1;
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)*v24, (std::string::size_type)v24[1]);
      }
      else
      {
        long long v27 = *(_OWORD *)v24;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)v24[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
      }
      unint64_t edge_field_id = (void *)turi::sgraph::get_edge_field_id((uint64_t)v26, (unsigned __int8 **)&v34, 0, 0);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      char v29 = *((unsigned char *)v39[0] + (unint64_t)edge_field_id);
      std::string __p = edge_field_id;
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v24, (std::string::size_type)v24[1]);
      }
      else
      {
        long long v30 = *(_OWORD *)v24;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v24[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v30;
      }
      char v37 = v29;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      v24 += 3;
    }
    while (v24 != v25);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v41, v42);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v43, v44);
  std::string __p = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_2242343E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44,char *a45)
{
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a44, a45);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v47 - 160, *(char **)(v47 - 152));
  a21 = v47 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = v47 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a11, *a12);
  a21 = a13;
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor::single_edge_triple_apply_visitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D772BD0;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  turi::sframe::sframe((turi::sframe *)(a1 + 40), (const turi::sframe *)(a2 + 40));
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a1 + 336, a2 + 336);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a1 + 368, a2 + 368);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a1 + 400, a2 + 400);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 432), *(const void **)(a2 + 432), *(void *)(a2 + 440), (uint64_t)(*(void *)(a2 + 440) - *(void *)(a2 + 432)) >> 3);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::__value_func[abi:ne180100](a1 + 472, a2 + 472);
  long long v5 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = v5;
  return a1;
}

void sub_22423461C(_Unwind_Exception *a1)
{
  unint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 440) = v8;
    operator delete(v8);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v2);
  turi::sframe::~sframe(v1);
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor::~single_edge_triple_apply_visitor(turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *this)
{
  *(void *)this = &unk_26D772BD0;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100]((void *)this + 59);
  std::string v2 = (void *)*((void *)this + 54);
  if (v2)
  {
    *((void *)this + 55) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)this + 50);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((void *)this + 46);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)this + 42);
  turi::sframe::~sframe((turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 40));
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D772BD0;
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100]((void *)this + 59);
  std::string v2 = (void *)*((void *)this + 54);
  if (v2)
  {
    *((void *)this + 55) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)this + 50);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((void *)this + 46);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)this + 42);
  turi::sframe::~sframe((turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 40));
  JUMPOUT(0x22A614FA0);
}

void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::~triple_apply_impl(turi::sgraph_compute::_anonymous_namespace_::triple_apply_impl *this)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::string v2 = (void **)((char *)this + 8);
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *std::vector<turi::sgraph_compute::anonymous namespace'::field_info>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + (a2 << 6);
      while (v3 != v6)
      {
        v3 -= 64;
        std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__append(a1, v5);
  }
}

void std::vector<turi::sgraph_compute::anonymous namespace'::field_info>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(40 * v11);
    char v13 = &v12[40 * v8];
    *(void *)char v13 = *(void *)a2;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)(a2 + 8);
    *((void *)v13 + 3) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    v13[32] = *(unsigned char *)(a2 + 32);
    size_t v14 = (char *)*a1;
    uint64_t v15 = (void **)a1[1];
    if (v15 == *a1)
    {
      std::string::size_type v7 = v13 + 40;
      *a1 = v13;
      a1[1] = v13 + 40;
      a1[2] = &v12[40 * v11];
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        std::string v17 = &v13[v16 * 8];
        std::string v18 = (char *)&v15[v16];
        *((void *)v17 - 5) = v15[v16 - 5];
        long long v19 = *(_OWORD *)&v15[v16 - 4];
        *((void *)v17 - 2) = v15[v16 - 2];
        *((_OWORD *)v17 - 2) = v19;
        *((void *)v18 - 3) = 0;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 4) = 0;
        *(v17 - 8) = (char)v15[v16 - 1];
        v16 -= 5;
      }
      while (&v15[v16] != (void **)v14);
      uint64_t v15 = (void **)*a1;
      long long v20 = (void **)a1[1];
      std::string::size_type v7 = v13 + 40;
      *a1 = &v13[v16 * 8];
      a1[1] = v13 + 40;
      a1[2] = &v12[40 * v11];
      while (v20 != v15)
      {
        if (*((char *)v20 - 9) < 0) {
          operator delete(*(v20 - 4));
        }
        v20 -= 5;
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(void *)unint64_t v4 = *(void *)a2;
    long long v6 = *(_OWORD *)(a2 + 8);
    *((void *)v4 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    v4[32] = *(unsigned char *)(a2 + 32);
    std::string::size_type v7 = v4 + 40;
  }
  a1[1] = v7;
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    size_t v14 = v13;
    uint64_t v15 = &v13[64 * v10];
    std::string v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    uint64_t v16 = &v15[64 * a2];
    std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer(&v14);
  }
}

void sub_224234AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      long long v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)(v7 - 48) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_WORD *)(v7 - 40) = *(_WORD *)(a3 + 24);
      long long v9 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 16) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v10 = *(void *)(a3 + 56);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(v7 - 8) = v10;
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  uint64_t v4 = (void **)a2;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](v4, i - 64);
  }
}

void std::vector<turi::sgraph_compute::anonymous namespace'::field_info>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor::load_partition(uint64_t a1, turi::sgraph *this, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, unint64_t a7, unint64_t a8)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 456) = a7;
  *(void *)(a1 + 464) = a8;
  unint64_t result = turi::sgraph::edge_partition(this, a7, a8, 0, 0);
  *(void *)(a1 + 24) = result;
  uint64_t v11 = *a6;
  uint64_t v12 = a6[1];
  BOOL v13 = *a6 == v12;
  *(unsigned char *)(a1 + 32) = *a6 != v12;
  if (!v13)
  {
    uint64_t v45 = 0;
    std::string v46 = 0;
    unint64_t v47 = 0;
    char v14 = (void **)(a1 + 432);
    double v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    while (1)
    {
      long long v15 = (long long *)(v11 + 8);
      long long v16 = v46;
      if ((unint64_t)v46 >= v47)
      {
        uint64_t v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v45, v15);
      }
      else
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
        }
        else
        {
          long long v17 = *v15;
          v46->__r_.__value_.__r.__words[2] = *(void *)(v11 + 24);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        }
        uint64_t v18 = v16 + 1;
      }
      std::string v46 = v18;
      long long v19 = v43;
      if (v43 >= v44)
      {
        unint64_t v21 = (unint64_t)v42;
        uint64_t v22 = v43 - (unsigned char *)v42;
        uint64_t v23 = v43 - (unsigned char *)v42 + 1;
        if (v23 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = v44 - (unsigned char *)v42;
        if (2 * (v44 - (unsigned char *)v42) > (unint64_t)v23) {
          uint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          uint64_t v26 = (char *)operator new(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        long long v27 = &v26[v22];
        std::vector<char>::size_type v28 = &v26[v22];
        *std::vector<char>::size_type v28 = *(unsigned char *)(v11 + 32);
        long long v20 = v28 + 1;
        if (v19 != (char *)v21)
        {
          char v29 = &v19[~v21];
          do
          {
            char v30 = *--v19;
            (v29--)[(void)v26] = v30;
          }
          while (v19 != (char *)v21);
          long long v27 = v26;
        }
        double v42 = v27;
        uint64_t v43 = v20;
        uint64_t v44 = &v26[v25];
        if (v21) {
          operator delete((void *)v21);
        }
      }
      else
      {
        *uint64_t v43 = *(unsigned char *)(v11 + 32);
        long long v20 = v19 + 1;
      }
      uint64_t v43 = v20;
      long long v32 = *(char **)(a1 + 440);
      unint64_t v31 = *(void *)(a1 + 448);
      if ((unint64_t)v32 >= v31)
      {
        std::string v34 = (char *)*v14;
        uint64_t v35 = (v32 - (unsigned char *)*v14) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v31 - (void)v34;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 448, v38);
          std::string v34 = *(char **)(a1 + 432);
          long long v32 = *(char **)(a1 + 440);
        }
        else
        {
          uint64_t v39 = 0;
        }
        double v40 = &v39[8 * v35];
        *(void *)double v40 = *(void *)v11;
        double v33 = v40 + 8;
        while (v32 != v34)
        {
          uint64_t v41 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v40 - 1) = v41;
          v40 -= 8;
        }
        *(void *)(a1 + 432) = v40;
        *(void *)(a1 + 440) = v33;
        *(void *)(a1 + 448) = &v39[8 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)long long v32 = *(void *)v11;
        double v33 = v32 + 8;
      }
      *(void *)(a1 + 440) = v33;
      v11 += 40;
      if (v11 == v12)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        turi::sframe::open_for_write(a1 + 40, &v45, &v42, __p, 1, 1);
      }
    }
  }
  return result;
}

void sub_2242351E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor::visit_edges(uint64_t a1, uint64_t a2)
{
  memset(v80, 0, sizeof(v80));
  uint64_t v2 = *(void **)a2;
  uint64_t v79 = *(void **)(a2 + 8);
  if (*(void **)a2 == v79)
  {
LABEL_118:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    uint64_t v77 = *(void *)(a1 + 432);
    uint64_t v78 = *(void *)(a1 + 440);
    if ((unint64_t)((v78 - v77) >> 3) <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = (v78 - v77) >> 3;
    }
    while (2)
    {
      uint64_t v5 = *v2 + 16 * *(void *)(a1 + 512);
      uint64_t v6 = 0;
      switch(*(unsigned char *)(v5 + 12))
      {
        case 0:
          uint64_t v6 = *(void *)v5;
          goto LABEL_29;
        case 1:
          uint64_t v6 = (uint64_t)*(double *)v5;
          goto LABEL_29;
        case 2:
          uint64_t v8 = *(void *)v5;
          long long v9 = (char **)(*(void *)v5 + 8);
          __idx[0] = 0;
          uint64_t v10 = (char *)v9;
          if (*(char *)(v8 + 31) < 0) {
            uint64_t v10 = *v9;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v10);
          uint64_t v6 = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v8 + 31) < 0) {
            uint64_t v11 = *(void *)(v8 + 16);
          }
          else {
            uint64_t v11 = *(unsigned __int8 *)(v8 + 31);
          }
          if (__idx[0] != v11)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v75 = std::string::append(&v91, " cannot be interpreted as an integer");
            long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_29;
        case 3:
          uint64_t v7 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_28;
        case 4:
          uint64_t v12 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
          goto LABEL_28;
        case 5:
          uint64_t v13 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
          goto LABEL_28;
        case 6:
          uint64_t v6 = (uint64_t)(*(void *)v5 << 8) >> 8;
          goto LABEL_29;
        case 7:
          goto LABEL_29;
        case 8:
          uint64_t v14 = *(void *)v5;
          long long v15 = *(atomic_uint **)(v14 + 16);
          int64_t v81 = *(void ***)(v14 + 8);
          double v82 = v15;
          if (v15) {
            atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
          }
          long long v16 = *(_OWORD *)(v14 + 24);
          long long v17 = *(_OWORD *)(v14 + 56);
          long long v84 = *(_OWORD *)(v14 + 40);
          long long v85 = v17;
          long long v83 = v16;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v82);
          goto LABEL_28;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v5 + 8);
          turi::flexible_type_fail(0);
          if (v89)
          {
            double v90 = v89;
            operator delete(v89);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v87 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
LABEL_28:
          uint64_t v6 = 0;
LABEL_29:
          uint64_t v18 = *v2 + 16 * *(void *)(a1 + 520);
          uint64_t v19 = 0;
          switch(*(unsigned char *)(v18 + 12))
          {
            case 0:
              uint64_t v19 = *(void *)v18;
              goto LABEL_53;
            case 1:
              uint64_t v19 = (uint64_t)*(double *)v18;
              goto LABEL_53;
            case 2:
              uint64_t v21 = *(void *)v18;
              uint64_t v22 = (char **)(*(void *)v18 + 8);
              __idx[0] = 0;
              uint64_t v23 = (char *)v22;
              if (*(char *)(v21 + 31) < 0) {
                uint64_t v23 = *v22;
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, v23);
              uint64_t v19 = std::stoll(&__p, __idx, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v21 + 31) < 0) {
                uint64_t v24 = *(void *)(v21 + 16);
              }
              else {
                uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
              }
              if (__idx[0] != v24)
              {
                double v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                double v72 = std::string::append(&v91, " cannot be interpreted as an integer");
                long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v73;
                v72->__r_.__value_.__l.__size_ = 0;
                v72->__r_.__value_.__r.__words[2] = 0;
                v72->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v71, &__p);
                __cxa_throw(v71, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_53;
            case 3:
              uint64_t v20 = *(void *)v18;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_52;
            case 4:
              uint64_t v25 = *(void *)v18;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
              goto LABEL_52;
            case 5:
              uint64_t v26 = *(void *)v18;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
              goto LABEL_52;
            case 6:
              uint64_t v19 = (uint64_t)(*(void *)v18 << 8) >> 8;
              goto LABEL_53;
            case 7:
              goto LABEL_53;
            case 8:
              uint64_t v27 = *(void *)v18;
              std::vector<char>::size_type v28 = *(atomic_uint **)(v27 + 16);
              int64_t v81 = *(void ***)(v27 + 8);
              double v82 = v28;
              if (v28) {
                atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
              }
              long long v29 = *(_OWORD *)(v27 + 24);
              long long v30 = *(_OWORD *)(v27 + 56);
              long long v84 = *(_OWORD *)(v27 + 40);
              long long v85 = v30;
              long long v83 = v29;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v82);
              goto LABEL_52;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v18 + 8);
              turi::flexible_type_fail(0);
              if (v89)
              {
                double v90 = v89;
                operator delete(v89);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v87 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              if (__p.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
LABEL_52:
              uint64_t v19 = 0;
LABEL_53:
              unint64_t v31 = (0xC6A4A7935BD1E995 * (*(void *)(a1 + 456) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                              * (*(void *)(a1 + 456) ^ 0xC3A5C85C97CB3127)) >> 47);
              unint64_t v32 = (0xC6A4A7935BD1E995 * (v6 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                           * (v6 ^ 0xC3A5C85C97CB3127)) >> 47);
              uint64_t v33 = 5
                  * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v31) | ((0x309B56691CCA7F9 * v31) >> 31))) ^ 0x73A3916AE45D01E5, 27);
              uint64_t v34 = __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v32) | ((0x60004CFCBE6C6FEBLL * v32) >> 33))) ^ 0x73A3916AE45D01E5, 31);
              uint64_t v35 = **(void **)(a1 + 504);
              unint64_t v36 = (*(void *)(*(void *)(a1 + 504) + 8) - v35) >> 6;
              unint64_t v37 = ((5 * (v33 + 0x4231D716C8ADF0A2 + v34) + 944331445) ^ (unint64_t)(v33 + 0x4231D716C8ADF0A2))
                  % v36;
              unint64_t v38 = (0xC6A4A7935BD1E995 * (*(void *)(a1 + 464) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                              * (*(void *)(a1 + 464) ^ 0xC3A5C85C97CB3127)) >> 47);
              unint64_t v39 = (0xC6A4A7935BD1E995 * (v19 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                            * (v19 ^ 0xC3A5C85C97CB3127)) >> 47);
              uint64_t v40 = 5
                  * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v38) | ((0x309B56691CCA7F9 * v38) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
              unint64_t v41 = ((5
                    * (v40
                     + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v39) | ((0x60004CFCBE6C6FEBLL * v39) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ (unint64_t)v40)% v36;
              std::string::size_type v42 = v35 + (v41 << 6);
              std::string::size_type v43 = v35 + (v37 << 6);
              if (v37 < v41) {
                std::string::size_type v44 = v43;
              }
              else {
                std::string::size_type v44 = v42;
              }
              if (v37 >= v41) {
                std::string::size_type v42 = v43;
              }
              BOOL v45 = v37 == v41;
              if (v37 == v41) {
                std::string::size_type v46 = v43;
              }
              else {
                std::string::size_type v46 = v44;
              }
              if (v45) {
                std::string::size_type v47 = v43;
              }
              else {
                std::string::size_type v47 = v42;
              }
              std::string::size_type v48 = **(void **)(a1 + 16) + 24 * v19;
              __p.__r_.__value_.__r.__words[0] = **(void **)(a1 + 8) + 24 * v6;
              __p.__r_.__value_.__l.__size_ = v48;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v2;
              std::string::size_type v87 = v46;
              std::string::size_type v88 = v47;
              uint64_t v49 = *(void *)(a1 + 496);
              if (!v49) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)v49 + 48))(v49, &__p);
              if (*(unsigned char *)(a1 + 32))
              {
                std::vector<turi::flexible_type>::resize(v80, (v78 - v77) >> 3);
                if (v78 != v77)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = 0;
                  do
                  {
                    uint64_t v52 = *v2 + 16 * *(void *)(*(void *)(a1 + 432) + 8 * v51);
                    uint64_t v53 = v80[0] + v50;
                    if (v80[0] + v50 != v52)
                    {
                      switch(*(unsigned char *)(v53 + 12))
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v53;
                            if (!*(void *)v53) {
                              goto LABEL_101;
                            }
                            if (*((char *)v54 + 31) < 0) {
                              operator delete((void *)v54[1]);
                            }
                            atomic_ullong *volatile v55 = v54;
                            uint64_t v56 = 0x1012C404EF22A49;
                            goto LABEL_100;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v63 = *(atomic_ullong *volatile *)v53;
                            if (!*(void *)v53) {
                              goto LABEL_101;
                            }
                            double v64 = (void *)v63[1];
                            if (v64)
                            {
                              v63[2] = (atomic_ullong)v64;
                              operator delete(v64);
                            }
                            atomic_ullong *volatile v55 = v63;
                            uint64_t v56 = 0x1080C409938AC02;
                            goto LABEL_100;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
                            if (!*(void *)v53) {
                              goto LABEL_101;
                            }
                            int64_t v81 = (void **)(v57 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v81);
                            goto LABEL_95;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
                            if (!*(void *)v53) {
                              goto LABEL_101;
                            }
                            int64_t v81 = (void **)(v57 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v81);
LABEL_95:
                            atomic_ullong *volatile v55 = v57;
                            uint64_t v56 = 0x1020C405E66F15BLL;
                            goto LABEL_100;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v53;
                            if (!*(void *)v53) {
                              goto LABEL_101;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v65 + 2);
                            atomic_ullong *volatile v55 = v65;
                            unsigned int v62 = -235920773;
                            goto LABEL_99;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v53;
                            if (*(void *)v53)
                            {
                              double v59 = (void *)v58[6];
                              if (v59)
                              {
                                v58[7] = (atomic_ullong)v59;
                                operator delete(v59);
                              }
                              double v60 = (void *)v58[3];
                              if (v60)
                              {
                                v58[4] = (atomic_ullong)v60;
                                operator delete(v60);
                              }
                              uint64_t v61 = (std::__shared_weak_count *)v58[2];
                              if (v61) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                              }
                              atomic_ullong *volatile v55 = v58;
                              unsigned int v62 = 2071181815;
LABEL_99:
                              uint64_t v56 = v62 | 0x1030C4000000000;
LABEL_100:
                              MEMORY[0x22A614FA0](v55, v56);
                            }
LABEL_101:
                            *(void *)uint64_t v53 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      uint64_t v66 = *(void *)v52;
                      *(void *)(v53 + 5) = *(void *)(v52 + 5);
                      *(void *)uint64_t v53 = v66;
                      LODWORD(v66) = *(unsigned __int8 *)(v52 + 12);
                      *(unsigned char *)(v53 + 12) = v66;
                      BOOL v67 = v66 > 9;
                      int v68 = (1 << v66) & 0x33C;
                      if (!v67 && v68 != 0) {
                        atomic_fetch_add(*(atomic_ullong *volatile *)v53, 1uLL);
                      }
                    }
                    ++v51;
                    v50 += 16;
                  }
                  while (v4 != v51);
                }
                uint64_t v70 = *(void *)(a1 + 392);
                if (!v70) {
                  std::__throw_bad_function_call[abi:ne180100]();
                }
                (*(void (**)(uint64_t, uint64_t *))(*(void *)v70 + 48))(v70, v80);
              }
              v2 += 3;
              if (v2 == v79) {
                goto LABEL_118;
              }
              continue;
            default:
              goto LABEL_121;
          }
        default:
LABEL_121:
          turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      break;
    }
  }
}

void sub_224235CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 97) < 0)
  {
    operator delete(*(void **)(v34 - 120));
    if ((v33 & 1) == 0)
    {
LABEL_8:
      *(void *)(v34 - 120) = &a16;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

uint64_t turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor::finalize(uint64_t this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 32)) {
    turi::sframe::close((turi::sframe *)(this + 40));
  }
  return this;
}

void sub_224235FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
}

void *std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26D772C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D772C30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(uint64_t **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v33[0] = 0;
  v33[1] = 0;
  v31[1] = 0;
  unint64_t v32 = (uint64_t *)v33;
  long long v30 = (uint64_t *)v31;
  v31[0] = 0;
  if (v2 != v3)
  {
    uint64_t v5 = v2;
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      *(void *)&long long v26 = 0;
      *((void *)&v26 + 1) = v6;
      std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v32, (unint64_t *)&v26, &v26);
      *(void *)&long long v26 = 0;
      *((void *)&v26 + 1) = v7;
      std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v32, (unint64_t *)&v26, &v26);
      v5 += 2;
    }
    while (v5 != v3);
  }
  uint64_t v8 = *(void **)(v4 + 32);
  if (v8 != (void *)(v4 + 40))
  {
    do
    {
      if (v33 == std::__tree<turi::sgraph::vertex_partition_address>::find<turi::sgraph::vertex_partition_address>((uint64_t)&v32, v8 + 4))std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v30, v8 + 4, (_OWORD *)v8 + 2); {
      long long v9 = (void *)v8[1];
      }
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != (void *)(v4 + 40));
  }
  if ((uint64_t **)(v4 + 32) != &v32) {
    std::__tree<turi::sgraph::vertex_partition_address>::__assign_multi<std::__tree_const_iterator<turi::sgraph::vertex_partition_address,std::__tree_node<turi::sgraph::vertex_partition_address,void *> *,long>>((uint64_t **)(v4 + 32), v32, v33);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Vertex partitions in memory: ", 29);
  uint64_t v12 = v32;
  if (v32 != (uint64_t *)v33)
  {
    do
    {
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
      uint64_t v14 = (uint64_t *)v12[1];
      if (v14)
      {
        do
        {
          long long v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (uint64_t *)v12[2];
          BOOL v11 = *v15 == (void)v12;
          uint64_t v12 = v15;
        }
        while (!v11);
      }
      uint64_t v12 = v15;
    }
    while (v15 != (uint64_t *)v33);
  }
  long long v16 = (int *)global_logger();
  if (v16[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v16)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v17 = (file_logger *)global_logger();
    started = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "operator()", 178, 1);
    std::stringbuf::str();
    uint64_t v19 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    uint64_t v20 = pthread_getspecific(*(void *)(v19 + 592));
    if (v20)
    {
      if (*((unsigned char *)v20 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(v20[2] - 24) + 16));
        uint64_t v21 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v19);
        if (*(_DWORD *)(v19 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v25 < 0) {
      operator delete(__p);
    }
  }
  *(void *)&long long v26 = *MEMORY[0x263F8C2B8];
  uint64_t v22 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v27[-2] + *(void *)(v26 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&v29);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v32, v33[0]);
  if (v2) {
    operator delete(v2);
  }
}

void sub_224236618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::locale::~locale((std::locale *)(v36 - 72));
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = *MEMORY[0x263F8C2B8];
  uint64_t v38 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a18 = v38;
  a19 = MEMORY[0x263F8C318] + 16;
  if (a32 < 0) {
    operator delete(a27);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&a35);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v36 - 120, *(void **)(v36 - 112));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v36 - 96, *(void **)(v36 - 88));
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(uint64_t *a1, uint64_t a2)
{
  v67[24] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v3 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&v61, *(void **)a2, (void *)(a2 + 8));
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 != v5)
  {
    uint64_t v58 = 0;
    double v59 = 0;
    unint64_t v60 = 0;
    atomic_ullong *volatile v55 = 0;
    uint64_t v56 = 0;
    atomic_ullong *volatile v57 = 0;
    std::string __p = 0;
    uint64_t v53 = 0;
    atomic_ullong *volatile v54 = 0;
    do
    {
      uint64_t v6 = v53;
      if (v53 >= v54)
      {
        uint64_t v8 = (char *)__p;
        uint64_t v9 = (v53 - (unsigned char *)__p) >> 3;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v54 - (unsigned char *)__p;
        if ((v54 - (unsigned char *)__p) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v54, v12);
          uint64_t v8 = (char *)__p;
          uint64_t v6 = v53;
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = *(void *)v4;
        uint64_t v7 = v14 + 8;
        while (v6 != v8)
        {
          uint64_t v15 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        std::string __p = v14;
        uint64_t v53 = v7;
        atomic_ullong *volatile v54 = &v13[8 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)uint64_t v53 = *(void *)v4;
        uint64_t v7 = v6 + 8;
      }
      uint64_t v53 = v7;
      long long v16 = (long long *)(v4 + 8);
      long long v17 = v59;
      if ((unint64_t)v59 >= v60)
      {
        uint64_t v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v58, v16);
      }
      else
      {
        if (*(char *)(v4 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
        }
        else
        {
          long long v18 = *v16;
          v59->__r_.__value_.__r.__words[2] = *(void *)(v4 + 24);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        }
        uint64_t v19 = v17 + 1;
      }
      double v59 = v19;
      uint64_t v20 = v56;
      if (v56 >= v57)
      {
        unint64_t v22 = (unint64_t)v55;
        uint64_t v23 = v56 - (unsigned char *)v55;
        uint64_t v24 = v56 - (unsigned char *)v55 + 1;
        if (v24 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = v57 - (unsigned char *)v55;
        if (2 * (v57 - (unsigned char *)v55) > (unint64_t)v24) {
          uint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v26 = v24;
        }
        if (v26) {
          uint64_t v19 = (std::string *)operator new(v26);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v27 = (std::string *)((char *)v19 + v23);
        char v28 = (char *)v19 + v23;
        *char v28 = *(unsigned char *)(v4 + 32);
        uint64_t v21 = v28 + 1;
        if (v20 != (char *)v22)
        {
          uint64_t v29 = &v20[~v22];
          do
          {
            std::string::value_type v30 = *--v20;
            (v29--)[(void)v19] = v30;
          }
          while (v20 != (char *)v22);
          uint64_t v27 = v19;
        }
        atomic_ullong *volatile v55 = v27;
        uint64_t v56 = v21;
        atomic_ullong *volatile v57 = (char *)v19 + v26;
        if (v22) {
          operator delete((void *)v22);
        }
      }
      else
      {
        char *v56 = *(unsigned char *)(v4 + 32);
        uint64_t v21 = v20 + 1;
      }
      uint64_t v56 = v21;
      v4 += 40;
    }
    while (v4 != v5);
    unint64_t v32 = v61;
    unint64_t v31 = v62;
    std::string::size_type v47 = &v61;
    std::string::size_type v48 = a1;
    uint64_t v49 = &v58;
    uint64_t v50 = &v55;
    p_p = &__p;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v19);
    std::locale v34 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v34);
    if (!*((unsigned char *)tls_data + 8) && (unint64_t)v34 > 1)
    {
      uint64_t v36 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v67, v36);
      double v37 = (double)(unint64_t)((v31 - v32) >> 4) / (double)(unint64_t)v34;
      unint64_t v65 = (unint64_t)(v37 * (double)0 + 0.0);
      unint64_t v66 = (unint64_t)(v37 * (double)1uLL + 0.0);
                      + 1);
      double v64 = (void **)&v47;
      turi::parallel_task_queue::launch((uint64_t)v67, (uint64_t *)&v63);
    }
    if (v31 != v32) {
    if (__p)
    }
    {
      uint64_t v53 = (char *)__p;
      operator delete(__p);
    }
    if (v55)
    {
      uint64_t v56 = (char *)v55;
      operator delete(v55);
    }
    v67[0] = (void **)&v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v67);
  }
  unint64_t v39 = v61;
  uint64_t v38 = v62;
  atomic_ullong *volatile v63 = a1;
  double v64 = &v61;
  uint64_t v40 = (turi::thread_pool *)turi::thread_pool::get_instance(v3);
  unint64_t v41 = (turi::thread *)turi::thread_pool::size(v40);
  std::string::size_type v42 = (turi::thread_pool *)turi::thread::get_tls_data(v41);
  uint64_t v43 = (v38 - v39) >> 4;
  if (!*((unsigned char *)v42 + 8) && (unint64_t)v41 > 1)
  {
    std::string::size_type v44 = (turi::thread_pool *)turi::thread_pool::get_instance(v42);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v67, v44);
    double v45 = (double)(unint64_t)v43 / (double)(unint64_t)v41;
    uint64_t v49 = (uint64_t *)(v45 * (double)0 + 0.0);
    uint64_t v50 = (void **)(v45 * (double)1uLL + 0.0);
                  + 1);
    std::string::size_type v48 = (uint64_t *)&v63;
    turi::parallel_task_queue::launch((uint64_t)v67, (uint64_t *)&v47);
  }
  if (v38 != v39)
  {
    uint64_t v46 = 8;
    do
    {
      turi::sgraph_compute::vertex_block<turi::sframe>::unload(a1[1] + (*(void *)((char *)v61 + v46) << 6));
      v46 += 16;
      --v43;
    }
    while (v43);
  }
  if (v61)
  {
    unsigned int v62 = v61;
    operator delete(v61);
  }
}

void sub_224236CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  a10 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&__p, *(void **)a2, (void *)(a2 + 8));
  uint64_t v5 = __p;
  uint64_t v4 = v15;
  v13[0] = &__p;
  v13[1] = a1;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v3);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  uint64_t v9 = (v4 - v5) >> 4;
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v7 > 1)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    double v11 = (double)(unint64_t)v9 / (double)(unint64_t)v7;
    _OWORD v16[2] = (unint64_t)(v11 * (double)0 + 0.0);
    void v16[3] = (unint64_t)(v11 * (double)1uLL + 0.0);
           + 1;
    v16[1] = (uint64_t)v13;
    turi::parallel_task_queue::launch((uint64_t)v17, v16);
  }
  if (v4 != v5)
  {
    uint64_t v12 = 0;
    do
    while (v9 != v12);
  }
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_224236EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<turi::sgraph::vertex_partition_address>::__find_equal<turi::sgraph::vertex_partition_address>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<turi::sgraph::vertex_partition_address>::__find_equal<turi::sgraph::vertex_partition_address>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = v4[4];
        if (v6 >= v9) {
          break;
        }
LABEL_6:
        uint64_t v4 = (void *)*v8;
        unint64_t result = v8;
        if (!*v8) {
          goto LABEL_14;
        }
      }
      if (v6 == v9)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_6;
        }
        if (v10 >= v7) {
          goto LABEL_14;
        }
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      unint64_t result = v8 + 1;
      uint64_t v4 = (void *)v8[1];
      if (!v4) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

void *std::__tree<turi::sgraph::vertex_partition_address>::find<turi::sgraph::vertex_partition_address>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (v3[5] < v5) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }
      else
      {
        unint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v9 = v7[4];
  if (v6 < v9 || v6 == v9 && v5 < v7[5]) {
    return v2;
  }
  return v7;
}

void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::string::size_type *)(**(void **)a1 + 16 * a2);
  std::string::size_type v3 = *v2;
  std::string::size_type v4 = v2[1];
  uint64_t v5 = **(void **)(a1 + 8);
  __p[0].__r_.__value_.__r.__words[0] = v4;
  v9.__r_.__value_.__r.__words[0] = *(void *)(v5 + 24);
  if (v9.__r_.__value_.__r.__words[0] > v4)
  {
    __p[0].__r_.__value_.__r.__words[0] = v3;
    v9.__r_.__value_.__r.__words[0] = *(void *)(v5 + 32);
    if (v9.__r_.__value_.__r.__words[0] > v3)
    {
      turi::sframe::sframe((turi::sframe *)&v11);
      unint64_t v7 = *(void **)(a1 + 16);
      unint64_t v8 = *(void **)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      turi::sframe::open_for_write((uint64_t)&v11, v7, v8, __p, 1, 1);
    }
    double v11 = __p;
    uint64_t v12 = &v9;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  double v11 = __p;
  uint64_t v12 = &v9;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
}

void sub_2242372E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void *turi::sgraph_compute::vertex_block<turi::sframe>::flush(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void v36[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)a2 + 32))(v33, a2, 0);
  uint64_t v29 = a2;
  std::vector<turi::flexible_type>::vector(v31, (a3[1] - *a3) >> 3);
  unint64_t v6 = *(void **)a1;
  std::string::value_type v30 = *(void **)(a1 + 8);
  if (*(void **)a1 != v30)
  {
    do
    {
      uint64_t v7 = *a3;
      if (a3[1] != *a3)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = *v6 + 16 * *(void *)(v7 + 8 * v9);
          uint64_t v11 = v31[0] + v8;
          if (v31[0] + v8 != v10)
          {
            switch(*(unsigned char *)(v11 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v11;
                  if (!*(void *)v11) {
                    goto LABEL_37;
                  }
                  if (*((char *)v12 + 31) < 0) {
                    operator delete((void *)v12[1]);
                  }
                  atomic_ullong *volatile v13 = v12;
                  uint64_t v14 = 0x1012C404EF22A49;
                  goto LABEL_36;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v11;
                  if (!*(void *)v11) {
                    goto LABEL_37;
                  }
                  unint64_t v22 = (void *)v21[1];
                  if (v22)
                  {
                    v21[2] = (atomic_ullong)v22;
                    operator delete(v22);
                  }
                  atomic_ullong *volatile v13 = v21;
                  uint64_t v14 = 0x1080C409938AC02;
                  goto LABEL_36;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v11;
                  if (!*(void *)v11) {
                    goto LABEL_37;
                  }
                  unint64_t v32 = (void **)(v15 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
                  goto LABEL_31;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v11;
                  if (!*(void *)v11) {
                    goto LABEL_37;
                  }
                  unint64_t v32 = (void **)(v15 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_31:
                  atomic_ullong *volatile v13 = v15;
                  uint64_t v14 = 0x1020C405E66F15BLL;
                  goto LABEL_36;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v11;
                  if (!*(void *)v11) {
                    goto LABEL_37;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v23 + 2);
                  atomic_ullong *volatile v13 = v23;
                  unsigned int v20 = -235920773;
                  goto LABEL_35;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v11;
                  if (*(void *)v11)
                  {
                    long long v17 = (void *)v16[6];
                    if (v17)
                    {
                      v16[7] = (atomic_ullong)v17;
                      operator delete(v17);
                    }
                    uint64_t v18 = (void *)v16[3];
                    if (v18)
                    {
                      uint64_t v16[4] = (atomic_ullong)v18;
                      operator delete(v18);
                    }
                    uint64_t v19 = (std::__shared_weak_count *)v16[2];
                    if (v19) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                    }
                    atomic_ullong *volatile v13 = v16;
                    unsigned int v20 = 2071181815;
LABEL_35:
                    uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_36:
                    MEMORY[0x22A614FA0](v13, v14);
                  }
LABEL_37:
                  *(void *)uint64_t v11 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v24 = *(void *)v10;
            *(void *)(v11 + 5) = *(void *)(v10 + 5);
            *(void *)uint64_t v11 = v24;
            LODWORD(v24) = *(unsigned __int8 *)(v10 + 12);
            *(unsigned char *)(v11 + 12) = v24;
            BOOL v25 = v24 > 9;
            int v26 = (1 << v24) & 0x33C;
            if (!v25 && v26 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v11, 1uLL);
            }
          }
          ++v9;
          uint64_t v7 = *a3;
          v8 += 16;
        }
        while (v9 < (a3[1] - *a3) >> 3);
      }
      if (!v34) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v34 + 48))(v34, v31);
      v6 += 3;
    }
    while (v6 != v30);
  }
  (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
  unint64_t v32 = (void **)v31;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v36);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v35);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v33);
}

void sub_224237700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  va_copy((va_list)v8, va);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unl"
                                        "oad_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4"
                                        "lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unload_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2]) {
  return result;
  }
}

void **turi::sgraph_compute::vertex_block<turi::sframe>::unload(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v2 = *(void ***)a1;
  std::string::size_type v3 = *(void ***)(a1 + 8);
  while (v3 != v2)
  {
    v3 -= 3;
    long long v5 = v3;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  *(void *)(a1 + 8) = v2;
  unint64_t result = std::vector<std::vector<turi::flexible_type>>::shrink_to_fit((void **)a1);
  if (*(unsigned char *)(a1 + 25))
  {
    unint64_t result = *(void ***)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (result) {
      unint64_t result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    }
  }
  *(unsigned char *)(a1 + 25) = 0;
  return result;
}

void **std::vector<std::vector<turi::flexible_type>>::shrink_to_fit(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v4);
    }
    uint64_t v10 = v8;
    uint64_t v11 = &v8[24 * v5];
    atomic_ullong *volatile v12 = v11;
    atomic_ullong *volatile v13 = &v8[24 * v9];
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(&v10);
  }
  return result;
}

void sub_224237998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unl"
                                        "oad_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4"
                                        "lessIS7_EENS4_9allocatorIS7_EEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unload_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1 const&)::{lambda(void)#1},void>::invoke(void **result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    int64x2_t v2 = result;
    uint64_t v3 = (16 * v1) | 8;
    do
    {
      unint64_t result = turi::sgraph_compute::vertex_block<turi::sframe>::unload(*(void *)(*(void *)*v2 + 8) + (*(void *)(**((void **)*v2 + 1) + v3) << 6));
      ++v1;
      v3 += 16;
    }
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int64x2_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (void ***)(**(void **)a1 + 16 * a2);
  uint64_t v4 = v3[1];
  if (!*(unsigned char *)(v2[1] + ((void)v4 << 6) + 24))
  {
    long long v5 = *v3;
    uint64_t v6 = *v2;
    unint64_t v14 = *(void *)(*v2 + 24);
    p_p = v4;
    if (v14 <= (unint64_t)v4)
    {
      std::string __p = &p_p;
      long long v17 = &v14;
      turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
    }
    unint64_t v14 = *(void *)(v6 + 32);
    p_p = v5;
    if (v14 <= (unint64_t)v5)
    {
      std::string __p = &p_p;
      long long v17 = &v14;
      turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
    }
    turi::sframe::sframe((turi::sframe *)v19, (const turi::sframe *)(*(void *)(*(void *)(v6 + 64) + 24 * (void)v5) + 296 * (void)v4));
    if (*((unsigned char *)v2 + 104))
    {
      uint64_t v7 = v2[1] + ((void)v4 << 6);
      turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(v7, (uint64_t)v19);
      *(unsigned char *)(v7 + 24) = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME[0]);
      uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v20, v21, (unsigned __int8 **)&__p);
      if (v8 == v21)
      {
        p_p = &__p;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v20) >> 3);
      if (v18 < 0) {
        operator delete(__p);
      }
      turi::sframe::remove_column((turi::sframe *)v19, v9, (uint64_t)&__p);
      turi::sframe::operator=((uint64_t)v19, (uint64_t)&__p);
      turi::sframe::~sframe((turi::sframe *)&__p);
      uint64_t v10 = v2[1] + ((void)v4 << 6);
      turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(v10, (uint64_t)v19);
      *(unsigned char *)(v10 + 24) = 1;
      uint64_t v11 = (uint64_t **)(v2[1] + ((void)v4 << 6));
      atomic_ullong *volatile v12 = *v11;
      atomic_ullong *volatile v13 = v11[1];
      if (*v11 != v13)
      {
        do
        {
          std::vector<turi::flexible_type>::insert(v12, *v12 + 16 * v9, (unint64_t)&turi::FLEX_UNDEFINED);
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
    turi::sframe::~sframe((turi::sframe *)v19);
  }
}

void sub_224237CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 288)) {
    turi::sframe::get_index_file(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = (std::string *)(a1 + 32);
  long long v5 = (const std::string *)(a2 + 136);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 159);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 144);
  }
  if (v7 != v8) {
    goto LABEL_20;
  }
  if (v9 >= 0) {
    uint64_t v10 = (unsigned __int8 *)(a2 + 136);
  }
  else {
    uint64_t v10 = (unsigned __int8 *)v5->__r_.__value_.__r.__words[0];
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(v4->__r_.__value_.__l.__data_, v10, *(void *)(a1 + 40))) {
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    uint64_t v11 = (unsigned __int8 *)(a1 + 32);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v6) {
        goto LABEL_18;
      }
    }
LABEL_20:
    std::string::operator=(v4, v5);
    turi::sframe::get_reader((turi::sframe *)a2);
  }
LABEL_18:
  if (!*(void *)(a1 + 56)) {
    goto LABEL_20;
  }
  std::vector<std::vector<turi::flexible_type>>::reserve((uint64_t *)a1, *(void *)(a2 + 32));
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), 0, *(void *)(*(void *)(a1 + 56) + 40), a1);
}

void turi::sframe::get_index_file(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int64x2_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "operator()", 309, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sframe::get_index_file(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224237FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl24loa"
                                        "d_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4le"
                                        "ssIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl24load_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
}

uint64_t **std::__tree<turi::sgraph::vertex_partition_address>::__assign_multi<std::__tree_const_iterator<turi::sgraph::vertex_partition_address,std::__tree_node<turi::sgraph::vertex_partition_address,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    char v7 = result[1];
    *unint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    atomic_ullong *volatile v15 = result;
    atomic_ullong *volatile v16 = v8;
    long long v17 = v8;
    if (v8)
    {
      atomic_ullong *volatile v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          leaf_high = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high((uint64_t)v5, &v18, (unint64_t *)v8 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, v8);
          long long v17 = v16;
          if (v16) {
            atomic_ullong *volatile v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    unint64_t result = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      unint64_t result = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__emplace_multi<turi::sgraph::vertex_partition_address const&>(v5, (_OWORD *)a2 + 2);
      atomic_ullong *volatile v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          atomic_ullong *volatile v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_224238324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v3 = v4;
        unint64_t v7 = v4[4];
        if (v6 >= v7 && (v6 != v7 || a3[1] >= v4[5])) {
          break;
        }
        uint64_t v4 = (void *)*v4;
        uint64_t v8 = v3;
        if (!*v3) {
          goto LABEL_11;
        }
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4);
    uint64_t v8 = v3 + 1;
  }
  else
  {
    uint64_t v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t std::__tree<turi::sgraph::vertex_partition_address>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  int64x2_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int64x2_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void *std::__tree<turi::sgraph::vertex_partition_address>::__emplace_multi<turi::sgraph::vertex_partition_address const&>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  leaf_high = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high((uint64_t)a1, &v7, (unint64_t *)v4 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, leaf_high, (uint64_t *)v4);
  return v4;
}

void sub_22423845C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
}

__n128 std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  int64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)int64x2_t v2 = &unk_26D772D10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D772D10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  v39[17] = *(std::locale *)MEMORY[0x263EF8340];
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (turi::sframe *)turi::sgraph::edge_partition(*(turi::sgraph **)v5, *a2, v3, 0, 0);
  gettimeofday(&v36, 0);
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = (int *)global_logger();
  if (v8[169] > 2) {
    goto LABEL_25;
  }
  if (cppipc::must_cancel((cppipc *)v8)) {
    goto LABEL_39;
  }
  int v9 = (file_logger *)global_logger();
  started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 316, 1);
  uint64_t v11 = pthread_getspecific(*((void *)started + 74));
  if (v11 && *((unsigned char *)v11 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Do work on partition ", 21);
  }
  uint64_t v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
  atomic_ullong *volatile v13 = pthread_getspecific(*(void *)(v12 + 592));
  if (v13 && *((unsigned char *)v13 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)", ", 2);
  }
  uint64_t v14 = file_logger::operator<<<unsigned long>(v12);
  atomic_ullong *volatile v15 = pthread_getspecific(*(void *)(v14 + 592));
  if (v15 && *((unsigned char *)v15 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"\nNumber of vertices: ", 21);
  }
  atomic_ullong *volatile v16 = *(turi::sgraph **)v5;
  unint64_t v35 = v4;
  v37.tv_sec = *((void *)v16 + 3);
  if (v37.tv_sec > v4)
  {
    unint64_t v35 = 0;
    v37.tv_sec = *((void *)v16 + 4);
    if (!v37.tv_sec) {
      goto LABEL_38;
    }
    uint64_t v17 = file_logger::operator<<<unsigned long>(v14);
    uint64_t v18 = pthread_getspecific(*(void *)(v17 + 592));
    if (v18 && *((unsigned char *)v18 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)", ", 2);
    }
    uint64_t v19 = *(turi::sgraph **)v5;
    unint64_t v35 = v3;
    v37.tv_sec = *((void *)v19 + 3);
    if (v37.tv_sec > v3)
    {
      unint64_t v35 = 0;
      v37.tv_sec = *((void *)v19 + 4);
      if (v37.tv_sec)
      {
        uint64_t v20 = file_logger::operator<<<unsigned long>(v17);
        uint64_t v21 = pthread_getspecific(*(void *)(v20 + 592));
        if (v21 && *((unsigned char *)v21 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"\nNumber of edges: ", 18);
        }
        uint64_t v22 = file_logger::operator<<<unsigned long>(v20);
        atomic_ullong *volatile v23 = pthread_getspecific(*(void *)(v22 + 592));
        if (v23)
        {
          if (*((unsigned char *)v23 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(v23[2] - 24) + 16));
            uint64_t v24 = std::locale::use_facet(v39, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
            std::locale::~locale(v39);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v22);
            if (*(_DWORD *)(v22 + 600) == 7) {
              goto LABEL_40;
            }
          }
        }
LABEL_25:
        gettimeofday(&v36, 0);
        int v26 = (int *)global_logger();
        if (v26[169] > 2) {
          goto LABEL_36;
        }
        if (!cppipc::must_cancel((cppipc *)v26))
        {
          uint64_t v27 = (file_logger *)global_logger();
          char v28 = file_logger::start_stream(v27, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 329, 1);
          uint64_t v29 = pthread_getspecific(*((void *)v28 + 74));
          if (v29 && *((unsigned char *)v29 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"Setup visitor in ", 17);
          }
          gettimeofday((timeval *)v39, 0);
          uint64_t v30 = file_logger::operator<<<double>((uint64_t)v28);
          unint64_t v31 = pthread_getspecific(*(void *)(v30 + 592));
          if (v31 && *((unsigned char *)v31 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)" secs", 5);
          }
          int v26 = (int *)pthread_getspecific(*(void *)(v30 + 592));
          if (!v26
            || !*((unsigned char *)v26 + 280)
            || (std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*((void *)v26 + 2) - 24)
                                                                          + 16)),
                unint64_t v32 = std::locale::use_facet(v39, MEMORY[0x263F8C108]),
                ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10),
                std::locale::~locale(v39),
                std::ostream::put(),
                std::ostream::flush(),
                file_logger::stream_flush((file_logger *)v30),
                *(_DWORD *)(v30 + 600) != 7))
          {
LABEL_36:
            uint64_t v33 = turi::thread::cpu_count((turi::thread *)v26);
            turi::cancellable_barrier::cancellable_barrier((turi::cancellable_barrier *)v39, v33);
            gettimeofday(&v36, 0);
            turi::sframe::get_reader(v6);
          }
LABEL_40:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
LABEL_39:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
LABEL_38:
      v39[0].__locale_ = (std::locale::__imp *)&v35;
      v39[1].__locale_ = (std::locale::__imp *)&v37;
      turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
    }
  }
  v39[0].__locale_ = (std::locale::__imp *)&v35;
  v39[1].__locale_ = (std::locale::__imp *)&v37;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
}

void sub_224238FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)(v69 - 224));
  std::__function::__value_func<void ()(turi::sgraph_compute::edge_scope &)>::~__value_func[abi:ne180100](&STACK[0x228]);
  double v71 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v71;
    operator delete(v71);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](&a69);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](&a65);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&a61);
  turi::sframe::~sframe((turi::sframe *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

turi::cancellable_barrier *turi::cancellable_barrier::cancellable_barrier(turi::cancellable_barrier *this, uint64_t a2)
{
  int v4 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 64));
  *((void *)this + 14) = a2;
  *((void *)this + 15) = 0;
  *((_WORD *)this + 64) = 256;
  *((unsigned char *)this + 130) = 1;
  return this;
}

void sub_2242391B0(_Unwind_Exception *a1)
{
  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::lock_error>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::error_info_injector<boost::lock_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_224239234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  a15 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v17 + 64));
  boost::system::system_error::~system_error(&a9);
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(a1);
}

std::runtime_error *boost::lock_error::lock_error(boost::lock_error *this, unsigned int a2, const char *a3)
{
  unint64_t v6 = boost::system::detail::generic_category_ncx(this);
  __n128 result = std::runtime_error::runtime_error((std::runtime_error *)this, a3);
  *((void *)this + 2) = a2;
  *((void *)this + 3) = v6;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_26D772F20;
  return result;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 56) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 56) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26D772F20;
  *(void *)(a1 + 56) = &unk_26D754388;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(void *)a1 = &unk_26D772E38;
  *(void *)(a1 + 56) = &unk_26D772E70;
  *(void *)(a1 + 96) = &unk_26D772EA8;
  uint64_t v13 = 0;
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 40))(&v12);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v13, v12);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v12);
    uint64_t v10 = v13;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 64), v10);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v13);
  return a1;
}

{
  std::runtime_error *v4;
  std::string *v5;
  long long v6;
  uint64_t v7;
  long long v8;

  *(void *)(a1 + 96) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a1 = &unk_26D772F20;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26D754388;
  *(void *)(a1 + 64) = v7;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(void *)a1 = &unk_26D772E38;
  *(void *)(a1 + 56) = &unk_26D772E70;
  *(void *)(a1 + 96) = &unk_26D772EA8;
  return a1;
}

void sub_224239550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::runtime_error::~runtime_error(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone()
{
}

void sub_22423966C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C403E1ED767);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2242396D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 7);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::system::system_error::~system_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 7) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 8);
  boost::system::system_error::~system_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 56) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(uint64_t a1)
{
}

void sub_2242399F4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::lock_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_26D772ED8;
  *(void *)(a1 + 56) = &unk_26D772F00;
  return a1;
}

void sub_224239AE0(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::string>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    int v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

void *std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void boost::throw_exception<std::runtime_error>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  std::runtime_error::runtime_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_26D773060;
  int v4 = &unk_26D773088;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_224239CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::runtime_error::~runtime_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = &unk_26D754388;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D772FC0;
  *(void *)(a1 + 16) = &unk_26D772FF8;
  *(void *)(a1 + 56) = &unk_26D773030;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D772FC0;
  *(void *)(a1 + 16) = &unk_26D772FF8;
  *(void *)(a1 + 56) = &unk_26D773030;
  return a1;
}

void sub_224239EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void sub_224239F54(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_224239FC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(void *a1)
{
}

void sub_22423A110(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    std::runtime_error v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22423A384(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t file_logger::operator<<<char *>(uint64_t a1, const char *a2)
{
  uint64_t v4 = (char *)pthread_getspecific(*(void *)(a1 + 592));
  if (v4 && v4[280])
  {
    long long v5 = v4 + 16;
    size_t v6 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  }
  return a1;
}

void turi::TuriException::~TuriException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26D7730A8;
  if (SHIBYTE(this[7].__vftable) < 0) {
    operator delete(this[5].__vftable);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  turi::TuriException::~TuriException(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::TuriException::TuriException(uint64_t a1, int a2, long long *a3)
{
  *(void *)a1 = &unk_26D7730A8;
  *(_DWORD *)(a1 + 8) = a2;
  long long v4 = *a3;
  *(void *)(a1 + 32) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v4;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v5 = (std::string *)(a1 + 40);
  turi::ErrorCodeToString(*(_DWORD *)(a1 + 8), (void *)(a1 + 40));
  uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v6)
  {
    std::operator+<char>();
    if ((v11 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v11 & 0x80u) == 0) {
      std::string::size_type v8 = v11;
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(v5, (const std::string::value_type *)v7, v8);
    if ((char)v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22423A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  std::exception::~exception((std::exception *)v15);
  _Unwind_Resume(a1);
}

uint64_t turi::TuriException::TuriException(uint64_t a1, int a2)
{
  long long __p = 0uLL;
  uint64_t v5 = 0;
  turi::TuriException::TuriException(a1, a2, &__p);
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_22423A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::TuriException::what(turi::TuriException *this)
{
  uint64_t result = (uint64_t)this + 40;
  if (*((char *)this + 63) < 0) {
    return *(void *)result;
  }
  return result;
}

void CoreML::validate<(MLModelType)2001>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    std::runtime_error v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    std::runtime_error v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 2001)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "Model not a word tagger.");
    CoreML::Result::Result(a2, 13);
LABEL_91:
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v53 = (void *)v110.__r_.__value_.__r.__words[0];
    goto LABEL_93;
  }
  long long v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[4];
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  BOOL v7 = v6 != 0;
  uint64_t v8 = v4[3];
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if (v6) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  if (!v9) {
    int v10 = v7;
  }
  uint64_t v11 = v4[5];
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  }
  if (v12) {
    ++v10;
  }
  uint64_t v13 = v4[6];
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  }
  if (v14) {
    ++v10;
  }
  if (*((_DWORD *)v3 + 12) != v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "More model output features than the output features of the word tagger model.");
    CoreML::Result::Result(a2, 9);
    goto LABEL_91;
  }
  if (v10)
  {
    uint64_t v15 = 0;
    uint64_t v104 = (uint64_t)(v3 + 2);
    uint64_t v105 = a2;
    uint64_t v103 = (uint64_t)(v3 + 5);
    int v16 = -1;
    int v108 = -1;
    int v109 = -1;
    int v17 = -1;
    uint64_t v106 = v3;
    do
    {
      uint64_t v18 = *(long long **)(*(void *)(v3[7] + 8 * v15 + 8) + 16);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v110.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = (const void **)v4[3];
      char v21 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      uint64_t v22 = (void *)v110.__r_.__value_.__r.__words[0];
      int v107 = v17;
      if (*((char *)v20 + 23) < 0)
      {
        uint64_t v20 = (const void **)*v20;
        size_t v23 = *(void *)(v4[3] + 8);
      }
      else
      {
        size_t v23 = *((unsigned __int8 *)v20 + 23);
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v110.__r_.__value_.__l.__size_;
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v25 = &v110;
      }
      else {
        int v25 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if (size >= v23) {
        size_t v26 = v23;
      }
      else {
        size_t v26 = size;
      }
      BOOL v27 = memcmp(v20, v25, v26) == 0 && size == v23;
      if (v27) {
        int v16 = v15;
      }
      char v28 = v4;
      uint64_t v29 = (const void **)v4[4];
      int v30 = v16;
      if (*((char *)v29 + 23) < 0)
      {
        unint64_t v32 = v29;
        uint64_t v29 = (const void **)*v29;
        size_t v31 = (size_t)v32[1];
      }
      else
      {
        size_t v31 = *((unsigned __int8 *)v29 + 23);
      }
      if (size >= v31) {
        size_t v33 = v31;
      }
      else {
        size_t v33 = size;
      }
      BOOL v34 = memcmp(v29, v25, v33) == 0 && size == v31;
      int v35 = v109;
      if (v34) {
        int v35 = v15;
      }
      int v109 = v35;
      timeval v36 = (const void **)v28[5];
      if (*((char *)v36 + 23) < 0)
      {
        timeval v36 = (const void **)*v36;
        size_t v37 = *(void *)(v28[5] + 8);
      }
      else
      {
        size_t v37 = *((unsigned __int8 *)v36 + 23);
      }
      if (size >= v37) {
        size_t v38 = v37;
      }
      else {
        size_t v38 = size;
      }
      BOOL v39 = memcmp(v36, v25, v38) == 0 && size == v37;
      int v40 = v108;
      if (v39) {
        int v40 = v15;
      }
      int v108 = v40;
      unint64_t v41 = (const void **)v28[6];
      if (*((char *)v41 + 23) < 0)
      {
        unint64_t v41 = (const void **)*v41;
        size_t v42 = *(void *)(v28[6] + 8);
      }
      else
      {
        size_t v42 = *((unsigned __int8 *)v41 + 23);
      }
      if (size >= v42) {
        size_t v43 = v42;
      }
      else {
        size_t v43 = size;
      }
      BOOL v45 = memcmp(v41, v25, v43) == 0 && size == v42;
      BOOL v44 = !v45;
      BOOL v46 = v45 || v39 || v34 || v27;
      int v17 = v107;
      if (!v44) {
        int v17 = v15;
      }
      if (!v46)
      {
        std::operator+<char>();
        uint64_t v56 = std::string::append(&v114, "' was not required by the output features of the word tagger model.");
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(v105, 9);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        goto LABEL_91;
      }
      if (v21 < 0) {
        operator delete(v22);
      }
      ++v15;
      std::runtime_error v3 = v106;
      int v16 = v30;
      long long v4 = v28;
    }
    while (v15 < *((int *)v106 + 12));
    a2 = v105;
    if (v109 == -1) {
      goto LABEL_95;
    }
    CoreML::Result::Result((CoreML::Result *)&v112);
    std::string::size_type v47 = operator new(4uLL);
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    *std::string::size_type v47 = 3;
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)(v47 + 1);
    v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v47 + 1);
    CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v104, 1, (int **)&v114, (uint64_t)&v110);
    v112.__r_.__value_.__r.__words[0] = v110.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v113) < 0) {
      operator delete((void *)v112.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
    uint64_t v113 = v111;
    HIBYTE(v111) = 0;
    v110.__r_.__value_.__s.__data_[8] = 0;
    if (v114.__r_.__value_.__r.__words[0])
    {
      v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v112))
    {
      *(std::string *)uint64_t v105 = v112;
      *((void *)v105 + 3) = v113;
LABEL_190:
      *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v113 = 0;
LABEL_191:
      if ((SHIBYTE(v113) & 0x80000000) == 0) {
        return;
      }
      uint64_t v53 = (void *)v112.__r_.__value_.__l.__size_;
      goto LABEL_93;
    }
    int v48 = *((_DWORD *)v106 + 12);
    uint64_t v49 = operator new(4uLL);
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    *uint64_t v49 = 7;
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)(v49 + 1);
    v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v49 + 1);
    CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v103, v48, (int **)&v114, (uint64_t)&v110);
    v112.__r_.__value_.__r.__words[0] = v110.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v113) < 0) {
      operator delete((void *)v112.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
    uint64_t v113 = v111;
    HIBYTE(v111) = 0;
    v110.__r_.__value_.__s.__data_[8] = 0;
    if (v114.__r_.__value_.__r.__words[0])
    {
      v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    uint64_t v50 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v112);
    if ((v50 & 1) == 0)
    {
LABEL_189:
      *(std::string *)uint64_t v105 = v112;
      *((void *)v105 + 3) = v113;
      goto LABEL_190;
    }
    uint64_t v51 = *(uint64_t **)(*(void *)(v106[7] + 8 * v109 + 8) + 32);
    if (!v51) {
      uint64_t v51 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v51 + 9) == 7)
    {
      uint64_t v52 = (uint64_t *)v51[3];
    }
    else
    {
      uint64_t v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
      uint64_t v52 = v50;
    }
    if (*((_DWORD *)v52 + 9) == 3)
    {
      if (v16 == -1) {
        goto LABEL_133;
      }
      uint64_t v58 = *(uint64_t **)(*(void *)(v106[7] + 8 * v16 + 8) + 32);
      if (!v58) {
        uint64_t v58 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v58 + 9) == 7)
      {
        double v59 = (uint64_t *)v58[3];
      }
      else
      {
        uint64_t v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
        double v59 = v50;
      }
      if (*((_DWORD *)v59 + 9) == 3)
      {
LABEL_133:
        if (v108 == -1) {
          goto LABEL_152;
        }
        uint64_t v70 = *(uint64_t **)(*(void *)(v106[7] + 8 * v108 + 8) + 32);
        if (!v70) {
          uint64_t v70 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v70 + 9) == 7)
        {
          double v71 = (uint64_t *)v70[3];
        }
        else
        {
          uint64_t v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
          double v71 = v50;
        }
        if (*((_DWORD *)v71 + 9) == 1)
        {
LABEL_152:
          if (v17 == -1) {
            goto LABEL_196;
          }
          uint64_t v75 = *(uint64_t **)(*(void *)(v106[7] + 8 * v17 + 8) + 32);
          if (!v75) {
            uint64_t v75 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          long long v76 = *((_DWORD *)v75 + 9) == 7
              ? (uint64_t *)v75[3]
              : CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
          if (*((_DWORD *)v76 + 9) == 1)
          {
LABEL_196:
            if (*((_DWORD *)v28 + 16))
            {
              if (*((_DWORD *)v28 + 21) == 200 && *(int *)(v28[9] + 24) > 0)
              {
                uint64_t v86 = v28[7];
                if (*(char *)(v86 + 23) < 0) {
                  uint64_t v87 = *(void *)(v86 + 8);
                }
                else {
                  uint64_t v87 = *(unsigned __int8 *)(v86 + 23);
                }
                if (v87) {
                  goto LABEL_189;
                }
                std::string::basic_string[abi:ne180100]<0>(&v110, "Model parameter data not set");
                CoreML::Result::Result(v105, 13);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v110, "Model output tags not set. Must have at least one tag");
                CoreML::Result::Result(v105, 13);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v110, "Model revision number not set. Must be >= 1");
              CoreML::Result::Result(v105, 13);
            }
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v110.__r_.__value_.__l.__data_);
            }
            goto LABEL_191;
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
          std::string::size_type v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
          uint64_t v89 = *((int *)v76 + 9);
          if (v89 > 7) {
            double v90 = "INVALID";
          }
          else {
            double v90 = off_2646D7070[v89];
          }
          size_t v97 = strlen(v90);
          uint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v90, v97);
          timeval v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\" for feature \"", 15);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[6], (void **)&v114.__r_.__value_.__l.__data_);
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v100 = &v114;
          }
          else {
            uint64_t v100 = (std::string *)v114.__r_.__value_.__r.__words[0];
          }
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v101 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v101 = v114.__r_.__value_.__l.__size_;
          }
          unsigned __int8 v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"MLFeatureTypeType_int64Type", 27);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str();
          CoreML::Result::Result(v105, 2);
LABEL_184:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v110);
          goto LABEL_191;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
        uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
        uint64_t v78 = *((int *)v71 + 9);
        if (v78 > 7) {
          uint64_t v79 = "INVALID";
        }
        else {
          uint64_t v79 = off_2646D7070[v78];
        }
        size_t v91 = strlen(v79);
        uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v79, v91);
        uint64_t v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\" for feature \"", 15);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[5], (void **)&v114.__r_.__value_.__l.__data_);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v94 = &v114;
        }
        else {
          uint64_t v94 = (std::string *)v114.__r_.__value_.__r.__words[0];
        }
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v114.__r_.__value_.__l.__size_;
        }
        uint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
        uint64_t v69 = v105;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"MLFeatureTypeType_int64Type", 27);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
        double v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
        uint64_t v73 = *((int *)v59 + 9);
        if (v73 > 7) {
          uint64_t v74 = "INVALID";
        }
        else {
          uint64_t v74 = off_2646D7070[v73];
        }
        size_t v80 = strlen(v74);
        int64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v74, v80);
        double v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" for feature \"", 15);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[3], (void **)&v114.__r_.__value_.__l.__data_);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v83 = &v114;
        }
        else {
          long long v83 = (std::string *)v114.__r_.__value_.__r.__words[0];
        }
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v84 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v84 = v114.__r_.__value_.__l.__size_;
        }
        long long v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
        uint64_t v69 = v105;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"MLFeatureTypeType_stringType", 28);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
      unint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
      uint64_t v61 = *((int *)v52 + 9);
      if (v61 > 7) {
        unsigned int v62 = "INVALID";
      }
      else {
        unsigned int v62 = off_2646D7070[v61];
      }
      size_t v63 = strlen(v62);
      double v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v62, v63);
      unint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\" for feature \"", 15);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[4], (void **)&v114.__r_.__value_.__l.__data_);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v66 = &v114;
      }
      else {
        unint64_t v66 = (std::string *)v114.__r_.__value_.__r.__words[0];
      }
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v67 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v67 = v114.__r_.__value_.__l.__size_;
      }
      int v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      uint64_t v69 = v105;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"MLFeatureTypeType_stringType", 28);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
    }
    std::stringbuf::str();
    CoreML::Result::Result(v69, 2);
    goto LABEL_184;
  }
LABEL_95:
  std::operator+<char>();
  atomic_ullong *volatile v54 = std::string::append(&v112, "' (defined by tokenTagsOutputFeatureName) to the model is not present in the model description.");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(a2, 10);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v53 = (void *)v112.__r_.__value_.__r.__words[0];
LABEL_93:
    operator delete(v53);
  }
}

void sub_22423B190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 113) < 0) {
    operator delete(*(void **)(v20 - 136));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  int v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

void cppipc::ipc_object_base::~ipc_object_base(cppipc::ipc_object_base *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL cppipc::must_cancel(cppipc *this)
{
  atomic_store(1u, cppipc::get_cancel_bit_checked(void)::cancel_bit_checked);
  unint64_t v1 = atomic_load(&cppipc::get_srv_running_command(void)::srv_running_command);
  return v1 == -1;
}

CoreML::Recommender::_ItemSimilarityRecommenderData *CoreML::Recommender::_ItemSimilarityRecommenderData::_ItemSimilarityRecommenderData(CoreML::Recommender::_ItemSimilarityRecommenderData *this, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  uint64_t v2 = a2;
  std::runtime_error v3 = this;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v77 = (std::string *)((char *)this + 56);
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v78 = (std::string *)((char *)this + 104);
  uint64_t v79 = (std::string *)((char *)this + 80);
  size_t v80 = (std::string *)((char *)this + 128);
  int64_t v81 = (uint64_t **)((char *)this + 24);
  *(_OWORD *)((char *)this + 152) = 0u;
  long long v76 = (std::string *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v74 = (void **)((char *)this + 200);
  uint64_t v75 = (std::string *)((char *)this + 176);
  uint64_t v73 = (std::vector<std::string> *)((char *)this + 224);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  uint64_t v83 = *((unsigned int *)a2 + 6);
  if ((int)v83 < 1)
  {
    unint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v85 = v4;
      uint64_t v6 = *(void *)(*((void *)v2 + 4) + 8 * v4 + 8);
      v91.__r_.__value_.__r.__words[0] = *(void *)(v6 + 40);
      std::string::size_type v7 = v91.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      uint64_t v8 = std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v3, (unint64_t *)&v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v90);
      uint64_t v9 = v8;
      if (v5 <= v7) {
        unint64_t v5 = v7;
      }
      int v10 = (unint64_t **)(v8 + 5);
      uint64_t v11 = *(unsigned int *)(v6 + 24);
      if ((int)v11 <= 0)
      {
        uint64_t v14 = (unint64_t *)v8[6];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = v8 + 7;
        uint64_t v14 = (unint64_t *)v8[6];
        do
        {
          uint64_t v15 = *(void *)(*(void *)(v6 + 32) + 8 * v12 + 8);
          unint64_t v16 = *(void *)(v15 + 16);
          unint64_t v17 = *(void *)(v15 + 24);
          if ((unint64_t)v14 >= *v13)
          {
            uint64_t v18 = *v10;
            uint64_t v19 = ((char *)v14 - (char *)*v10) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = *v13 - (void)v18;
            if (v21 >> 3 > v20) {
              unint64_t v20 = v21 >> 3;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              size_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v9 + 7), v22);
              uint64_t v18 = (unint64_t *)v9[5];
              uint64_t v14 = (unint64_t *)v9[6];
            }
            else
            {
              size_t v23 = 0;
            }
            uint64_t v24 = (unint64_t *)&v23[16 * v19];
            *uint64_t v24 = v16;
            v24[1] = v17;
            int v25 = v24;
            if (v14 != v18)
            {
              do
              {
                *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
                v25 -= 2;
                v14 -= 2;
              }
              while (v14 != v18);
              uint64_t v18 = *v10;
            }
            uint64_t v14 = v24 + 2;
            void v9[5] = (uint64_t)v25;
            v9[6] = (uint64_t)(v24 + 2);
            v9[7] = (uint64_t)&v23[16 * v22];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *uint64_t v14 = v16;
            v14[1] = v17;
            v14 += 2;
          }
          v9[6] = (uint64_t)v14;
          if (v5 <= v16) {
            unint64_t v5 = v16;
          }
          ++v12;
        }
        while (v12 != v11);
      }
      unint64_t v26 = 126 - 2 * __clz(((char *)v14 - (char *)*v10) >> 4);
      if (v14 == *v10) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(*v10, (double *)v14, (uint64_t)&v90, v27, 1);
      double v28 = *(double *)(v6 + 48);
      std::runtime_error v3 = this;
      uint64_t v2 = a2;
      if (v28 != 0.0)
      {
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
        *((double *)std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v81, (unint64_t *)&v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v90)+ 5) = v28;
      }
      uint64_t v4 = v85 + 1;
    }
    while (v85 + 1 != v83);
  }
  *((void *)v3 + 6) = 0;
  if (v2 == (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_) {
    goto LABEL_58;
  }
  uint64_t v29 = *((void *)v2 + 12);
  if (v29)
  {
    unint64_t v30 = *(int *)(v29 + 16);
    if (v30)
    {
      uint64_t v31 = *((void *)v2 + 11);
      if (v31 && *(_DWORD *)(v31 + 24))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Only integer item ids or string item ids can be specified in the same model.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
      }
      *((void *)v3 + 6) = v30;
      if (v5 >= v30)
      {
        uint64_t v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v87, v5);
        uint64_t v50 = std::string::insert(&v87, 0, "List of integer item ids specified must be large enough to index all item ids specified.  The largest item index is ");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = std::string::append(&v88, ", whereas there are  only ");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v86, *((void *)this + 6));
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          atomic_ullong *volatile v54 = &v86;
        }
        else {
          atomic_ullong *volatile v54 = (std::string *)v86.__r_.__value_.__r.__words[0];
        }
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v86.__r_.__value_.__l.__size_;
        }
        uint64_t v56 = std::string::append(&v89, (const std::string::value_type *)v54, size);
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        uint64_t v58 = std::string::append(&v90, " item ids given.");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v49, &v91);
        v49->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v49, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
      }
      std::vector<unsigned long>::reserve(v74, v30);
      uint64_t v32 = *(void *)(v29 + 24);
      if (v32) {
        size_t v33 = (void *)(v32 + 8);
      }
      else {
        size_t v33 = 0;
      }
      if (v32) {
        BOOL v34 = (void *)(v32 + 8 + 8 * *(int *)(v29 + 16));
      }
      else {
        BOOL v34 = 0;
      }
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,long long const*,long long const*,std::back_insert_iterator<std::vector<long long>>,0>(v33, v34, (uint64_t)v74);
      uint64_t v45 = std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long *>>((uint64_t)&v91, *((uint64_t **)v3 + 25), *((uint64_t **)v3 + 26));
      uint64_t v46 = *((void *)v3 + 6);
      std::string::size_type v47 = v91.__r_.__value_.__r.__words[2];
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v45, (void *)v91.__r_.__value_.__l.__size_);
      if (v47 != v46)
      {
        unint64_t v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v60, "List of integer item ids specified must be unique; list contains duplicates.");
        v60->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v60, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
      }
      goto LABEL_61;
    }
  }
  uint64_t v35 = *((void *)v2 + 11);
  if (!v35 || (std::vector<std::string>::size_type v36 = *(int *)(v35 + 24), !v36))
  {
LABEL_58:
    *((void *)v3 + 6) = v5 + 1;
    goto LABEL_61;
  }
  *((void *)v3 + 6) = v36;
  if (v5 > v36)
  {
    unsigned int v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v87, v5);
    size_t v63 = std::string::insert(&v87, 0, "List of string item ids specified must be large enough to index all item ids specified.  The largest item index is ");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    unint64_t v65 = std::string::append(&v88, ", whereas there are  only ");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, *((void *)this + 6));
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v67 = &v86;
    }
    else {
      std::string::size_type v67 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v86.__r_.__value_.__l.__size_;
    }
    uint64_t v69 = std::string::append(&v89, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    double v71 = std::string::append(&v90, " item ids given.");
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v62, &v91);
    v62->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v62, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  std::vector<std::string>::reserve(v73, v36);
  uint64_t v37 = *(void *)(v35 + 32);
  if (v37) {
    size_t v38 = (long long **)(v37 + 8);
  }
  else {
    size_t v38 = 0;
  }
  uint64_t v39 = *(int *)(v35 + 24);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  if (v39)
  {
    uint64_t v40 = 8 * v39;
    do
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&v90, *v38++);
      v40 -= 8;
    }
    while (v40);
  }
  uint64_t v41 = std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v91, *((const void ***)v3 + 28), *((const void ***)v3 + 29));
  uint64_t v42 = *((void *)v3 + 6);
  std::string::size_type v43 = v91.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v41, (char *)v91.__r_.__value_.__l.__size_);
  if (v43 != v42)
  {
    BOOL v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "List of string item ids specified must be unique; list contains duplicates.");
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v44, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
LABEL_61:
  std::string::operator=(v80, *((const std::string **)v2 + 5));
  std::string::operator=(v79, *((const std::string **)v2 + 6));
  std::string::operator=(v78, *((const std::string **)v2 + 8));
  std::string::operator=(v77, *((const std::string **)v2 + 7));
  std::string::operator=(v76, *((const std::string **)v2 + 9));
  std::string::operator=(v75, *((const std::string **)v2 + 10));
  return v3;
}

void sub_22423BBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v49 - 105) < 0) {
    operator delete(*(void **)(v49 - 128));
  }
  if (*(char *)(v49 - 137) < 0) {
    operator delete(*(void **)(v49 - 160));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    uint64_t v51 = a21;
    if ((v47 & 1) == 0)
    {
LABEL_16:
      *(void *)(v49 - 128) = a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 128));
      uint64_t v52 = *a11;
      if (*a11)
      {
        *(void *)(v51 + 208) = v52;
        operator delete(v52);
      }
      if (*(char *)(v51 + 199) < 0) {
        operator delete(*a12);
      }
      if (*(char *)(v51 + 175) < 0) {
        operator delete(*a13);
      }
      if (*(char *)(v51 + 151) < 0) {
        operator delete(*a17);
      }
      if (*(char *)(v51 + 127) < 0) {
        operator delete(*a15);
      }
      if (*(char *)(v51 + 103) < 0) {
        operator delete(*a16);
      }
      if (*(char *)(v51 + 79) < 0) {
        operator delete(*a14);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a18, *(void **)(v51 + 32));
      std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(v51, *(void **)(v51 + 8));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v51 = a21;
    if (!v47) {
      goto LABEL_16;
    }
  }
  __cxa_free_exception(v48);
  goto LABEL_16;
}

void CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec(CoreML::Recommender *this@<X0>, void *a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*((void *)this + 2)) {
    unint64_t v5 = (uint64_t *)*((void *)this + 2);
  }
  else {
    unint64_t v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateModelDescription((CoreML *)v5, (const CoreML::Specification::ModelDescription *)*((unsigned int *)this + 6), (CoreML::Result *)&v36);
  if (!CoreML::Result::good((CoreML::Result *)&v36) || *((_DWORD *)this + 11) != 501)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v24 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(exception, v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)v35, *((const CoreML::Specification::ItemSimilarityRecommender **)this + 4));
  std::allocate_shared[abi:ne180100]<CoreML::Recommender::_ItemSimilarityRecommenderData,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,CoreML::Specification::ItemSimilarityRecommender &,void>((const CoreML::Specification::ItemSimilarityRecommender *)v35, a2);
  uint64_t v6 = *a2;
  if (*(char *)(*a2 + 151) < 0)
  {
    if (*(void *)(v6 + 136)) {
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(*a2 + 151))
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v5 + 6) != 1)
  {
    uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Name of column for item input data not specified.");
    goto LABEL_76;
  }
  std::string::operator=((std::string *)(v6 + 128), *(const std::string **)(*(void *)(v5[4] + 8) + 16));
LABEL_12:
  std::string::size_type v7 = operator new(0xCuLL);
  *(void *)&long long v30 = v7 + 3;
  *((void *)&v30 + 1) = v7 + 3;
  *(void *)std::string::size_type v7 = 0x700000006;
  v7[2] = 5;
  uint64_t v29 = v7;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)(*a2 + 128), (int **)&v29, (CoreML::Result *)&v39);
  std::vector<std::string>::size_type v36 = (void *)v39.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
  std::string::size_type v38 = v40.__r_.__value_.__r.__words[0];
  if (!CoreML::Result::good((CoreML::Result *)&v36))
  {
    int v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v26 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v25, v26);
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v25, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  if (v29)
  {
    *(void *)&long long v30 = v29;
    operator delete(v29);
  }
  uint64_t v8 = *a2;
  if ((*(char *)(*a2 + 103) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(*a2 + 103)) {
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if (*(void *)(v8 + 88))
  {
LABEL_21:
    uint64_t v9 = operator new(4uLL);
    uint64_t v29 = v9;
    _DWORD *v9 = 1;
    *(void *)&long long v30 = v9 + 1;
    *((void *)&v30 + 1) = v9 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)(v8 + 80), (int **)&v29, (CoreML::Result *)&v39);
    std::vector<std::string>::size_type v36 = (void *)v39.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
    std::string::size_type v38 = v40.__r_.__value_.__r.__words[0];
    v40.__r_.__value_.__s.__data_[7] = 0;
    v39.__r_.__value_.__s.__data_[8] = 0;
    if (v29)
    {
      *(void *)&long long v30 = v29;
      operator delete(v29);
    }
    if (CoreML::Result::good((CoreML::Result *)&v36)) {
      goto LABEL_26;
    }
    uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    double v28 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v27, v28);
LABEL_76:
    v27->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v27, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
LABEL_26:
  int v10 = operator new(8uLL);
  uint64_t v32 = v10;
  void *v10 = 0x500000007;
  size_t v33 = v10 + 1;
  BOOL v34 = v10 + 1;
  uint64_t v11 = *a2;
  if (*(char *)(*a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v11 + 104), *(void *)(v11 + 112));
    uint64_t v11 = *a2;
  }
  else
  {
    std::string v39 = *(std::string *)(v11 + 104);
  }
  if (*(char *)(v11 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v11 + 56), *(void *)(v11 + 64));
  }
  else {
    std::string v40 = *(std::string *)(v11 + 56);
  }
  for (uint64_t i = 0; i != 6; i += 3)
  {
    uint64_t v13 = (char *)&v39 + i * 8;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[i + 2]) < 0)
    {
      if (!*((void *)v13 + 1)) {
        continue;
      }
    }
    else if (!v39.__r_.__value_.__s.__data_[i * 8 + 23])
    {
      continue;
    }
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)v13, (int **)&v32, (CoreML::Result *)&v29);
    std::vector<std::string>::size_type v36 = v29;
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v30;
    std::string::size_type v38 = v31;
    if (!CoreML::Result::good((CoreML::Result *)&v36))
    {
      uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v22 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
      std::logic_error::logic_error(v21, v22);
      v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v21, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
    }
  }
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v40.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v39 + j * 8 + 24));
    }
  }
  if (v32)
  {
    size_t v33 = v32;
    operator delete(v32);
  }
  uint64_t v15 = *a2;
  if (*(char *)(*a2 + 199) < 0)
  {
    uint64_t v16 = *(void *)(v15 + 184);
    if (!v16) {
      goto LABEL_57;
    }
LABEL_51:
    unint64_t v17 = operator new(4uLL);
    uint64_t v29 = v17;
    *unint64_t v17 = 6;
    *(void *)&long long v30 = v17 + 1;
    *((void *)&v30 + 1) = v17 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 5), (const void **)(v15 + 176), (int **)&v29, (CoreML::Result *)&v39);
    std::vector<std::string>::size_type v36 = (void *)v39.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
    std::string::size_type v38 = v40.__r_.__value_.__r.__words[0];
    v40.__r_.__value_.__s.__data_[7] = 0;
    v39.__r_.__value_.__s.__data_[8] = 0;
    if (v29)
    {
      *(void *)&long long v30 = v29;
      operator delete(v29);
    }
    if (CoreML::Result::good((CoreML::Result *)&v36))
    {
      uint64_t v15 = *a2;
      goto LABEL_57;
    }
    goto LABEL_64;
  }
  uint64_t v16 = *(unsigned __int8 *)(*a2 + 199);
  if (*(unsigned char *)(*a2 + 199)) {
    goto LABEL_51;
  }
LABEL_57:
  if ((*(char *)(v15 + 175) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v15 + 175)) {
      goto LABEL_59;
    }
LABEL_66:
    if (v16) {
      goto LABEL_67;
    }
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "No output columns specified.");
LABEL_78:
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v19, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  if (!*(void *)(v15 + 160)) {
    goto LABEL_66;
  }
LABEL_59:
  uint64_t v18 = operator new(4uLL);
  uint64_t v29 = v18;
  *uint64_t v18 = 7;
  *(void *)&long long v30 = v18 + 1;
  *((void *)&v30 + 1) = v18 + 1;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 5), (const void **)(v15 + 152), (int **)&v29, (CoreML::Result *)&v39);
  std::vector<std::string>::size_type v36 = (void *)v39.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
  std::string::size_type v38 = v40.__r_.__value_.__r.__words[0];
  v40.__r_.__value_.__s.__data_[7] = 0;
  v39.__r_.__value_.__s.__data_[8] = 0;
  if (v29)
  {
    *(void *)&long long v30 = v29;
    operator delete(v29);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v36))
  {
LABEL_64:
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v20 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v19, v20);
    goto LABEL_78;
  }
LABEL_67:
  CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)v35);
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22423C510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_free_exception(v38);
  std::string v40 = *(std::__shared_weak_count **)(v37 + 8);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)&a17);
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  std::string::size_type v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        std::string::size_type v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        std::string::size_type v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    void v11[6] = 0;
    v11[7] = 0;
    void v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(unint64_t *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t *result, uint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = (unint64_t *)v4;
    uint64_t v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      double v8 = *((double *)v5 + 3);
      double v9 = *((double *)v5 + 1);
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      double v8 = *((double *)v5 + 3);
      double v9 = *((double *)v5 + 1);
    }
    void v5[2] = v7;
    *((double *)v4 + 1) = v9;
    unint64_t v10 = (double *)result;
    if (v5 == (unint64_t *)result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      unint64_t v12 = *(uint64_t *)((char *)result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      double v13 = *(double *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 2;
      uint64_t v14 = (uint64_t)result + v11;
      *(void *)uint64_t v14 = v12;
      *(double *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        unint64_t v10 = (double *)result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      unint64_t v10 = (double *)((char *)result + v11);
      double v13 = *(double *)((char *)result + v11 - 8);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    unint64_t v10 = (double *)v5;
LABEL_18:
    *(void *)unint64_t v10 = v6;
    v10[1] = v8;
LABEL_19:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (uint64_t i = (double *)(result + 1); ; i += 2)
      {
        uint64_t v4 = (unint64_t *)result;
        uint64_t result = v2;
        unint64_t v5 = v4[2];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          double v7 = *((double *)v4 + 3);
          if (v7 < *((double *)v4 + 1)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      double v7 = *((double *)v4 + 3);
LABEL_6:
      for (uint64_t j = i; ; j -= 2)
      {
        *((void *)j + 1) = v6;
        j[2] = *j;
        unint64_t v6 = *((void *)j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }
      *((void *)j - 1) = v5;
      *uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || *((double *)a2 + 1) >= *((double *)a1 + 1)))
  {
    unint64_t v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      double v11 = *((double *)a3 + 1);
      double v10 = *((double *)a2 + 1);
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      double v10 = *((double *)a2 + 1);
      double v11 = *((double *)a3 + 1);
    }
    *a2 = v9;
    *a3 = v3;
    *((double *)a2 + 1) = v11;
    *((double *)a3 + 1) = v10;
    unint64_t v12 = *a2;
    unint64_t v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12) {
        return 1;
      }
      double v15 = *((double *)a2 + 1);
      double v14 = *((double *)a1 + 1);
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      double v14 = *((double *)a1 + 1);
      double v15 = *((double *)a2 + 1);
    }
    *a1 = v12;
    *a2 = v13;
    *((double *)a1 + 1) = v15;
    uint64_t result = 2;
    *((double *)a2 + 1) = v14;
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3)
    {
      double v6 = *((double *)a3 + 1);
LABEL_6:
      *a1 = v5;
      *a3 = v4;
      unint64_t v7 = a1[1];
      *((double *)a1 + 1) = v6;
      a3[1] = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      double v6 = *((double *)a3 + 1);
      double v16 = *((double *)a2 + 1);
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      double v16 = *((double *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    double v17 = *((double *)a1 + 1);
    *((double *)a1 + 1) = v16;
    *((double *)a2 + 1) = v17;
    unint64_t v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      double v19 = *((double *)a3 + 1);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      double v19 = *((double *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((double *)a2 + 1) = v19;
    uint64_t result = 2;
    *((double *)a3 + 1) = v17;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(unint64_t *a1, double *a2)
{
  unint64_t v2 = *a1;
  double v3 = *((double *)a1 + 1);
  unint64_t v4 = *((void *)a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < (unint64_t *)a2 && v2 >= *i && (*i < v2 || v3 >= *((double *)i + 1)); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((double *)i + 1)));
  }
  if (i < (unint64_t *)a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *((void *)a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < (unint64_t *)a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *(void *)a2;
    do
    {
      *uint64_t i = v10;
      *(void *)a2 = v9;
      unint64_t v11 = i[2];
      i += 2;
      unint64_t v9 = v11;
      uint64_t v12 = *(i - 1);
      *(i - 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((double *)i + 1)))
      {
        unint64_t v13 = i[2];
        i += 2;
        unint64_t v9 = v13;
      }
      do
      {
        do
        {
          unint64_t v14 = *((void *)a2 - 2);
          a2 -= 2;
          unint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < (unint64_t *)a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *((double *)i - 1) = v3;
  return i;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(double *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  while (1)
  {
    unint64_t v5 = *(void *)&a1[v2 + 2];
    if (v5 >= *(void *)&v3 && (*(void *)&v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(void *)(a2 - 16);
      a2 -= 16;
      unint64_t v7 = v8;
    }
    while (v8 >= *(void *)&v3 && (*(void *)&v3 < v7 || *(double *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        unint64_t v10 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v9 = v10;
        if (v10 < *(void *)&v3) {
          break;
        }
        if (*(void *)&v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(double *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = (double *)v6;
  }
  else
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v13 = (double *)v6;
    unint64_t v14 = (double *)a2;
    do
    {
      *(void *)unint64_t v13 = v12;
      *(void *)unint64_t v14 = v5;
      uint64_t v15 = *((void *)v13 + 1);
      v13[1] = v14[1];
      *((void *)v14 + 1) = v15;
      do
      {
        do
        {
          unint64_t v16 = *((void *)v13 + 2);
          v13 += 2;
          unint64_t v5 = v16;
        }
        while (v16 < *(void *)&v3);
      }
      while (*(void *)&v3 >= v5 && v13[1] < v4);
      do
      {
        unint64_t v17 = *((void *)v14 - 2);
        v14 -= 2;
        unint64_t v12 = v17;
      }
      while (v17 >= *(void *)&v3 && (*(void *)&v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 16);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        double v8 = *(double *)(a1 + 8);
        double v9 = *(double *)(a2 - 8);
LABEL_30:
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        double v9 = *(double *)(a2 - 8);
        double v8 = *(double *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unint64_t v14 = *(void *)v11;
  unint64_t v15 = *(void *)v10;
  if (*(void *)v11 >= *(void *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
  }
  *(void *)uint64_t v11 = v15;
  *(double *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unint64_t v21 = *(void *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      double v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(void *)uint64_t v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      double v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(void *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a4;
  unint64_t v10 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    double v12 = *(double *)(a4 + 8);
    double v11 = *(double *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    double v11 = *(double *)(a3 + 8);
    double v12 = *(double *)(a4 + 8);
  }
  *(void *)a3 = v9;
  *(void *)a4 = v10;
  *(double *)(a3 + 8) = v12;
  *(double *)(a4 + 8) = v11;
  unint64_t v13 = *(void *)a3;
  unint64_t v14 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    double v16 = *(double *)(a3 + 8);
    double v15 = *(double *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    double v15 = *(double *)(a2 + 8);
    double v16 = *(double *)(a3 + 8);
  }
  *(void *)a2 = v13;
  *(void *)a3 = v14;
  *(double *)(a2 + 8) = v16;
  *(double *)(a3 + 8) = v15;
  unint64_t v17 = *(void *)a2;
  unint64_t v18 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double v19 = *(double *)(a1 + 8);
    double v20 = *(double *)(a2 + 8);
LABEL_15:
    *(void *)a1 = v17;
    *(void *)a2 = v18;
    *(double *)(a1 + 8) = v20;
    *(double *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    double v20 = *(double *)(a2 + 8);
    double v19 = *(double *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *(void *)a4;
  if (*a5 >= *(void *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    double v13 = *((double *)a5 + 1);
    double result = *(double *)(a4 + 8);
    if (v13 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a4 + 8);
    double v13 = *((double *)a5 + 1);
  }
  *(void *)a4 = v11;
  *a5 = v12;
  *(double *)(a4 + 8) = v13;
  *((double *)a5 + 1) = result;
  unint64_t v14 = *(void *)a4;
  unint64_t v15 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v15 < v14) {
      return result;
    }
    double v16 = *(double *)(a4 + 8);
    double result = *(double *)(a3 + 8);
    if (v16 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a3 + 8);
    double v16 = *(double *)(a4 + 8);
  }
  *(void *)a3 = v14;
  *(void *)a4 = v15;
  *(double *)(a3 + 8) = v16;
  *(double *)(a4 + 8) = result;
  unint64_t v17 = *(void *)a3;
  unint64_t v18 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v18 < v17) {
      return result;
    }
    double v19 = *(double *)(a3 + 8);
    double result = *(double *)(a2 + 8);
    if (v19 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a2 + 8);
    double v19 = *(double *)(a3 + 8);
  }
  *(void *)a2 = v17;
  *(void *)a3 = v18;
  *(double *)(a2 + 8) = v19;
  *(double *)(a3 + 8) = result;
  unint64_t v20 = *(void *)a2;
  unint64_t v21 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double result = *(double *)(a1 + 8);
    double v22 = *(double *)(a2 + 8);
LABEL_9:
    *(void *)a1 = v20;
    *(void *)a2 = v21;
    *(double *)(a1 + 8) = v22;
    *(double *)(a2 + 8) = result;
    return result;
  }
  if (v21 >= v20)
  {
    double v22 = *(double *)(a2 + 8);
    double result = *(double *)(a1 + 8);
    if (v22 < result) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = (unint64_t *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        unint64_t v15 = *(void *)v14;
        unint64_t v16 = *(void *)a1;
        if (*(void *)v14 >= *(void *)a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          double v17 = *(double *)(v14 + 8);
          double v18 = *(double *)(a1 + 8);
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          double v17 = *(double *)(v14 + 8);
          double v18 = *(double *)(a1 + 8);
        }
        *(void *)uint64_t v14 = v16;
        *(void *)a1 = v15;
        *(double *)(v14 + 8) = v18;
        *(double *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v9, (unint64_t *)a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      unint64_t v20 = (unint64_t *)(a2 - 16);
      do
      {
        unint64_t v21 = *(void *)a1;
        unint64_t v22 = *(void *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *BOOL v23 = v21;
          v23[1] = v22;
        }
        else
        {
          *BOOL v23 = *v20;
          v23[1] = v20[1];
          *unint64_t v20 = v21;
          v20[1] = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 16) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < *((double *)v8 + 3))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v14 = *((double *)v8 + 1);
          double v13 = *((double *)a4 + 1);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          double v13 = *((double *)a4 + 1);
          double v14 = *((double *)v8 + 1);
        }
        *a4 = v11;
        *((double *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v15 = (unint64_t *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              unint64_t v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(double *)(result + 16 * v7 + 8) < *((double *)v15 + 3))
              {
                v15 += 2;
                uint64_t v7 = v17;
              }
            }
            unint64_t v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            double v20 = *((double *)v15 + 1);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *uint64_t v8 = v19;
            *((double *)v8 + 1) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v15 = v8;
LABEL_14:
        *unint64_t v15 = v12;
        *((double *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = *(void *)(a1 + 16);
      if (*(void *)a1 < v10 || v10 >= *(void *)a1 && *(double *)(v6 + 16 * v7 + 8) < *(double *)(a1 + 24))
      {
        a1 += 16;
        uint64_t v3 = v9;
      }
    }
    *(void *)uint64_t v6 = *(void *)a1;
    double result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *v6;
    unint64_t v8 = *(void *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      double v10 = *(double *)(result + 16 * v5 + 8);
      double v9 = *(double *)(a2 - 8);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      double v9 = *(double *)(a2 - 8);
      double v10 = *((double *)v6 + 1);
    }
    *(void *)(a2 - 16) = v7;
    *(double *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v11 = (unint64_t *)(result + 16 * v5);
        unint64_t v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          double v14 = *(double *)(result + 16 * v5 + 8);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          double v14 = *((double *)v11 + 1);
        }
        unint64_t *v6 = v13;
        *((double *)v6 + 1) = v14;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v11 = v6;
LABEL_13:
    *unint64_t v11 = v8;
    *((double *)v11 + 1) = v9;
  }
  return result;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,long long const*,long long const*,std::back_insert_iterator<std::vector<long long>>,0>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v12);
      unint64_t v8 = *(void **)v4;
      unint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    double v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)double v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<CoreML::Recommender::_ItemSimilarityRecommenderData,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,CoreML::Specification::ItemSimilarityRecommender &,void>@<X0>(const CoreML::Specification::ItemSimilarityRecommender *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x110uLL);
  double result = std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::ItemSimilarityRecommender &,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22423DAEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::ItemSimilarityRecommender &,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,0>(void *a1, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D773120;
  CoreML::Recommender::_ItemSimilarityRecommenderData::_ItemSimilarityRecommenderData((CoreML::Recommender::_ItemSimilarityRecommenderData *)(a1 + 3), a2);
  return a1;
}

void sub_22423DB48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D773120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D773120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__on_zero_shared(uint64_t a1)
{
}

__n128 CoreML::validate<(MLModelType)607>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(CoreML **)(a1 + 16);
  }
  else {
    uint64_t v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v13);
  uint64_t v16 = v13;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = v14;
  uint64_t v18 = v15;
  if (!CoreML::Result::good((CoreML::Result *)&v16)) {
    goto LABEL_25;
  }
  unint64_t v5 = operator new(4uLL);
  unint64_t v10 = v5;
  _DWORD *v5 = 5;
  uint64_t v11 = v5 + 1;
  unint64_t v12 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, 1, (int **)&v10, (uint64_t)&v13);
  uint64_t v16 = v13;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = v14;
  uint64_t v18 = v15;
  HIBYTE(v15) = 0;
  v14.n128_u8[0] = 0;
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v16)) {
    goto LABEL_25;
  }
  uint64_t v6 = operator new(4uLL);
  unint64_t v10 = v6;
  _DWORD *v6 = 5;
  uint64_t v11 = v6 + 1;
  unint64_t v12 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 40, 1, (int **)&v10, (uint64_t)&v13);
  uint64_t v16 = v13;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = v14;
  uint64_t v18 = v15;
  HIBYTE(v15) = 0;
  v14.n128_u8[0] = 0;
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v7
    && (*(_DWORD *)(a1 + 44) != 607
      ? (unint64_t v8 = CoreML::Specification::Normalizer::default_instance((CoreML::Specification::Normalizer *)v7))
      : (unint64_t v8 = *(uint64_t **)(a1 + 32)),
        *((_DWORD *)v8 + 4) >= 3u))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "NormalizerValidator normLx invalid");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (v14.n128_i8[15] < 0) {
      operator delete(v13);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  else
  {
LABEL_25:
    *(void *)a2 = v16;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v18;
  }
  return result;
}

void sub_22423DE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_lock<turi::mutex>::lock(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)a1;
  if (!v2)
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 8))
  {
LABEL_5:
    std::__throw_system_error(11, "unique_lock::lock: already locked");
    JUMPOUT(0x22423DEC4);
  }
  uint64_t result = pthread_mutex_lock(v2);
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

void sub_22423DF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::config::init_cocoa_multithreaded_runtime(turi::config *this)
{
  if ((turi::config::_cocoa_initialized & 1) == 0)
  {
    unint64_t v1 = (void *)MEMORY[0x22A615770](this);

    turi::config::_cocoa_initialized = 1;
  }
}

void turi::config::get_apple_system_temporary_directory(turi::config *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x22A615770](this);
  NSTemporaryDirectory();
  id v4 = objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);
}

void sub_22423DFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t total_mem()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  size_t v1 = 8;
  uint64_t v2 = 0;
  *(void *)uint64_t v3 = 0x1800000006;
  if (sysctl(v3, 2u, &v2, &v1, 0, 0)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t turi::process::read_from_child(turi::process *this, uint64_t a2)
{
  uint64_t v2 = (turi::process *)MEMORY[0x270FA5388](this, a2);
  uint64_t v26 = *MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  while (1)
  {
    ssize_t v3 = turi::process::read_from_child(v2, v25, 0x1000uLL);
    ssize_t v4 = v3;
    if (v3 < 1) {
      break;
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v25, &v25[v3], v3);
    if ((v20 & 0x80u) == 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v6 = v20;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v5, v6);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  if (v4 == -1)
  {
    BOOL v7 = (int *)global_logger();
    if (v7[169] <= 5)
    {
      if (cppipc::must_cancel((cppipc *)v7)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process.cpp", "read_from_child", 22, 1);
      unint64_t v10 = pthread_getspecific(*((void *)started + 74));
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Error reading from child, message may be partial ", 49);
      }
      uint64_t v11 = pthread_getspecific(*((void *)started + 74));
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"(", 1);
      }
      uint64_t v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
      unint64_t v13 = pthread_getspecific(*(void *)(v12 + 592));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" bytes received).", 17);
      }
      __n128 v14 = pthread_getspecific(*(void *)(v12 + 592));
      if (v14)
      {
        if (*((unsigned char *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
          uint64_t v15 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v12);
          if (*(_DWORD *)(v12 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
  }
  v21[0] = *MEMORY[0x263F8C2B8];
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v22[0] = v16;
  v22[1] = MEMORY[0x263F8C318] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v24);
}

void sub_22423E468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::locale::~locale(&a10);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::process::popen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!pipe(v23)) {
    goto LABEL_8;
  }
  BOOL v7 = (int *)global_logger();
  if (v7[169] > 6) {
    goto LABEL_8;
  }
  if (cppipc::must_cancel((cppipc *)v7)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  unint64_t v8 = (file_logger *)global_logger();
  started = file_logger::start_stream(v8, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 119, 1);
  unint64_t v10 = pthread_getspecific(*((void *)started + 74));
  if (v10 && *((unsigned char *)v10 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Error building pipe for process launch: ", 40);
  }
  uint64_t v11 = __error();
  get_last_err_str(*v11, v20);
  file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)v20);
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if (!a5) {
      goto LABEL_18;
    }
  }
  else
  {
LABEL_8:
    if (!a5) {
      goto LABEL_18;
    }
  }
  if (pipe(v22))
  {
    uint64_t v12 = (int *)global_logger();
    if (v12[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v12)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v13 = (file_logger *)global_logger();
      __n128 v14 = file_logger::start_stream(v13, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 125, 1);
      uint64_t v15 = pthread_getspecific(*((void *)v14 + 74));
      if (v15 && *((unsigned char *)v15 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Error building pipe for process launch: ", 40);
      }
      uint64_t v16 = __error();
      get_last_err_str(*v16, __p);
      file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)__p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_18:
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  turi::convert_args();
}

void sub_22423EAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::convert_args()
{
}

uint64_t turi::process::set_nonblocking(turi::process *this, int a2)
{
  unsigned int v4 = fcntl(*(_DWORD *)this, 3) & 0xFFFFFFFB;
  if (a2) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  return fcntl(*(_DWORD *)this, 4, v4 | v5);
}

ssize_t turi::process::read_from_child(turi::process *this, void *a2, size_t a3)
{
  if (!*((unsigned char *)this + 12)) {
    turi::process::read_from_child(void *,unsigned long)::$_0::operator()();
  }
  if (!*((unsigned char *)this + 13)) {
    turi::process::read_from_child(void *,unsigned long)::$_1::operator()();
  }
  int v3 = *(_DWORD *)this;
  if (v3 == -1) {
    turi::process::read_from_child(void *,unsigned long)::$_2::operator()();
  }
  return read(v3, a2, a3);
}

BOOL turi::process::write_to_child(turi::process *this, char *__buf, size_t __nbyte)
{
  if (!*((unsigned char *)this + 12)) {
    turi::process::write_to_child(void const*,unsigned long)::$_0::operator()();
  }
  if (!*((unsigned char *)this + 13)) {
    turi::process::write_to_child(void const*,unsigned long)::$_1::operator()();
  }
  if (*((_DWORD *)this + 1) == -1) {
    turi::process::write_to_child(void const*,unsigned long)::$_2::operator()();
  }
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(*((_DWORD *)this + 1), __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while (v6 != -1);
  return v5 == 0;
}

uint64_t turi::process::exists(turi::process *this)
{
  if (!*((unsigned char *)this + 12)) {
    turi::process::exists(void)::$_0::operator()();
  }
  int v16 = 0;
  uint64_t v1 = 1;
  pid_t v2 = waitpid(*((_DWORD *)this + 2), &v16, 1);
  if (v2)
  {
    if (v2 == -1)
    {
      int v3 = (int *)global_logger();
      if (v3[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v3)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        unsigned int v4 = (file_logger *)global_logger();
        started = file_logger::start_stream(v4, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "exists", 288, 1);
        ssize_t v6 = pthread_getspecific(*((void *)started + 74));
        if (v6 && *((unsigned char *)v6 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Failed while checking for existence of process ", 47);
        }
        uint64_t v7 = file_logger::operator<<<int>((uint64_t)started);
        unint64_t v8 = pthread_getspecific(*(void *)(v7 + 592));
        if (v8 && *((unsigned char *)v8 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)": ", 2);
        }
        uint64_t v9 = __error();
        unint64_t v10 = strerror(*v9);
        uint64_t v11 = file_logger::operator<<<char *>(v7, v10);
        uint64_t v12 = pthread_getspecific(*(void *)(v11 + 592));
        if (v12)
        {
          if (*((unsigned char *)v12 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
            unint64_t v13 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
            std::locale::~locale(&v17);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v11);
            if (*(_DWORD *)(v11 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
    }
    return 0;
  }
  return v1;
}

void sub_22423EF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::process::~process(turi::process *this)
{
  int v2 = *(_DWORD *)this;
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  int v3 = *((_DWORD *)this + 1);
  if ((v3 & 0x80000000) == 0) {
    close(v3);
  }
}

uint64_t turi::process::autoreap(uint64_t this)
{
  if (*(_DWORD *)(this + 8))
  {
    uint64_t v1 = this;
    pthread_mutex_lock(&sigchld_handler_lock);
    v4.__sigaction_u.__sa_handler = 0;
    *(void *)&v4.sa_mask = 0;
    sigaction(20, &v4, 0);
    if (atomic_load_explicit(&__proc_ids_to_reap_initialized, memory_order_acquire) != -1)
    {
      v4.__sigaction_u.__sa_handler = (void (__cdecl *)(int))&v2;
      int v3 = &v4;
      std::__call_once((std::once_flag::_State_type *)&__proc_ids_to_reap_initialized, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_proc_ids_to_reap(void)::$_0 &&>>);
    }
    v4.__sigaction_u.__sa_handler = (void (__cdecl *)(int))*(int *)(v1 + 8);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)__proc_ids_to_reap, (unint64_t *)&v4, (uint64_t *)&v4);
    v4.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sigchld_handler;
    *(void *)&v4.sa_mask = 0;
    sigaction(20, &v4, 0);
    return pthread_mutex_unlock(&sigchld_handler_lock);
  }
  return this;
}

void sub_22423F048(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_proc_ids_to_reap(void)::$_0 &&>>()
{
}

void sigchld_handler()
{
  uint64_t v0 = *(uint64_t **)__proc_ids_to_reap;
  if (*(void *)__proc_ids_to_reap != __proc_ids_to_reap + 8)
  {
    do
    {
      if (waitpid(*((_DWORD *)v0 + 8), 0, 1) < 1)
      {
        char v2 = (uint64_t *)v0[1];
        if (v2)
        {
          do
          {
            uint64_t v1 = v2;
            char v2 = (uint64_t *)*v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            uint64_t v1 = (uint64_t *)v0[2];
            BOOL v3 = *v1 == (void)v0;
            uint64_t v0 = v1;
          }
          while (!v3);
        }
      }
      else
      {
        uint64_t v1 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)__proc_ids_to_reap, v0);
        operator delete(v0);
      }
      uint64_t v0 = v1;
    }
    while (v1 != (uint64_t *)(__proc_ids_to_reap + 8));
  }
}

CoreML::Specification::ItemSimilarityRecommender_SimilarItems *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>(uint64_t a1)
{
  char v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    char v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *char v2 = v4 + 1;
  ssize_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_22423F260(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407C6D6C37);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, long long *a2)
{
  int v4 = *(int **)(a1 + 16);
  if (!v4)
  {
    int v6 = *(_DWORD *)(a1 + 12);
LABEL_8:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v6 + 1);
    int v4 = *(int **)(a1 + 16);
    int v6 = *v4;
    goto LABEL_9;
  }
  uint64_t v5 = *(int *)(a1 + 8);
  int v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(a1 + 8) = v5 + 1;
    uint64_t v7 = *(void *)&v4[2 * v5 + 2];
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    return;
  }
  if (v6 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_8;
  }
LABEL_9:
  int *v4 = v6 + 1;
  uint64_t v9 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  uint64_t v11 = *((void *)a2 + 2);
  *(_OWORD *)Aligned = *a2;
  Aligned[2] = v11;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v13 + 1;
  *(void *)(v12 + 8 * v13 + 8) = Aligned;
}

CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>::TypeHandler>(uint64_t a1)
{
  char v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    char v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *char v2 = v4 + 1;
  int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_22423F500(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>);
  }
  return result;
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(const CoreML::Specification::FeatureDescription *a1, std::string *a2)
{
  return CoreML::Specification::FeatureDescription::MergeFrom(a2, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL turi::is_process_running(turi *this)
{
  return kill((pid_t)this, 0) == 0;
}

char *turi::getenv_str@<X0>(turi *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = getenv((const char *)this);
  if (result)
  {
    uint64_t result = (char *)std::string::basic_string[abi:ne180100]<0>(&v5, result);
    *(_OWORD *)(a2 + 8) = v5;
    *(void *)(a2 + 24) = v6;
    *(unsigned char *)a2 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/TextClassifier.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_ = (uint64_t)&unk_26D773170;
  *(void *)algn_26808CE38 = 0;
  qword_26808CE40 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808CE48 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_26808CE50 = 0;
  qword_26808CE60 = 0;
  byte_26808CE68 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_22423F71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(void *)this = &unk_26D773170;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void sub_22423F7A0(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(void *)this = &unk_26D773170;
  CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::CoreMLModels::TextClassifier::default_instance(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return &CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_;
}

void CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22423F8B8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::Clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(void *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  long long v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *(unsigned __int8 **)a2;
      unint64_t v8 = *((void *)a2 + 1);
      if (*(void *)a2 >= v8)
      {
        uint64_t v10 = 0;
LABEL_45:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_9;
      }
      uint64_t v9 = v7 + 1;
      uint64_t v10 = *v7;
      if ((char)*v7 >= 1) {
        break;
      }
      if ((unint64_t)v9 >= v8) {
        goto LABEL_45;
      }
      int v12 = *v9;
      if ((v10 & ~v12) < 0x80) {
        goto LABEL_45;
      }
      *(void *)a2 = v7 + 2;
      unint64_t v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      unsigned int v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34) {
            goto LABEL_46;
          }
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5)) {
            return 0;
          }
        }
        else
        {
          if (v13 != 200 || v11 != 66) {
            goto LABEL_46;
          }
          if (*((_DWORD *)this + 13) != 200)
          {
            *((_DWORD *)this + 13) = 200;
            operator new();
          }
          std::locale v17 = (CoreML::Specification::StringVector *)*((void *)this + 5);
          unsigned __int8 v20 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v20;
            *(void *)a2 = v20 + 1;
          }
          unint64_t v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v22 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v24 = v22;
          BOOL result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v17, (char **)a2, v23);
          if (!result) {
            return result;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24)) {
            return 0;
          }
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8) {
          goto LABEL_46;
        }
        uint64_t v18 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v19 = 0;
          goto LABEL_53;
        }
        int v19 = *v18;
        if (*v18 < 0)
        {
LABEL_53:
          uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
        }
        else
        {
          *((_DWORD *)this + 8) = v19;
          *(void *)a2 = v18 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82) {
          goto LABEL_46;
        }
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
        if (!result) {
          return result;
        }
        uint64_t v15 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v15, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language"))return 0; {
      }
        }
    }
    *(void *)a2 = v9;
    unint64_t v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_46:
    if (!v11 || (v11 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_22423FC88(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6) {
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    unint64_t v8 = *(const char **)(result + 8);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t result = *(void *)result;
    goto LABEL_8;
  }
  unint64_t v8 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((void *)this + 2), a2);
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v9 + 23)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (*(void *)(v9 + 8)) {
LABEL_11:
  }
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = *((void *)this + 5);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  int v9 = *((_DWORD *)this + 8);
  if (v9) {
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

std::string *CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::TextClassifier *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  data = (uint64_t *)v3[1].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v7)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 8);
  if (v9) {
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v9;
  }
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (HIDWORD(v3[2].__r_.__value_.__r.__words[0]) != 200)
    {
      HIDWORD(v3[2].__r_.__value_.__r.__words[0]) = 200;
      operator new();
    }
    uint64_t v10 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 5);
    unint64_t v11 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v11, v10);
  }
  return this;
}

void sub_22424003C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::IsInitialized(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::TextClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.TextClassifier");
}

void CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

float turi::timer::approx_time_seconds(turi::timer *this)
{
  return (float)(unint64_t)qword_2680861F0 / 10.0;
}

void turi::get_hms_timer(turi *this)
{
  {
      turi::hundredms_timer::hundredms_timer((turi::hundredms_timer *)&turi::get_hms_timer(void)::hmstimer);
  }
}

void sub_224240168(_Unwind_Exception *a1)
{
}

uint64_t turi::hundredms_timer::stop_timer(uint64_t this)
{
  if (!*(unsigned char *)(this + 168))
  {
    uint64_t v1 = this;
    uint64_t v2 = (pthread_mutex_t *)(this + 56);
    pthread_mutex_lock((pthread_mutex_t *)(this + 56));
    *(unsigned char *)(v1 + 168) = 1;
    int v3 = pthread_cond_signal((pthread_cond_t *)(v1 + 120));
    assert_msg(v3 == 0, "Condition variable signal error %d", v3);
    pthread_mutex_unlock(v2);
    return turi::thread::join(v1, v4);
  }
  return this;
}

uint64_t turi::timer::sleep_ms(unint64_t this)
{
  v2.tv_sec = this / 0x3E8;
  v2.tv_nsec = 1000000 * (this % 0x3E8);
  do
    uint64_t result = nanosleep(&v2, &v2);
  while (result == -1);
  return result;
}

uint64_t turi::estimate_ticks_per_second(turi *this)
{
  uint64_t result = turi::rtdsc_ticks_per_sec;
  if (!turi::rtdsc_ticks_per_sec)
  {
    pthread_mutex_lock(&turi::rtdsc_ticks_per_sec_mutex);
    if (!turi::rtdsc_ticks_per_sec)
    {
      v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      long long v3 = xmmword_2246E73D0;
      while (nanosleep((const timespec *)&v3, (timespec *)&v3) == -1)
        ;
      turi::rtdsc_ticks_per_sec = 1000 * (std::chrono::system_clock::now().__d_.__rep_ - v2.__d_.__rep_);
    }
    pthread_mutex_unlock(&turi::rtdsc_ticks_per_sec_mutex);
    return turi::rtdsc_ticks_per_sec;
  }
  return result;
}

void turi::hundredms_timer::hundredms_timer(turi::hundredms_timer *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *(void *)this = 0x800000;
  std::chrono::system_clock::time_point v2 = (timeval *)((char *)this + 40);
  gettimeofday((timeval *)((char *)this + 40), 0);
  int v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 56), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 120));
  *((unsigned char *)this + 168) = 0;
  gettimeofday(v2, 0);
  uint64_t v6 = 0;
  uint64_t v7 = this;
  uint64_t v4 = (char *)boost::function0<void>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>>(boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>)::stored_vtable
     + 1;
  uint64_t v5 = turi::hundredms_timer::alarm_thread;
  turi::thread::launch(this);
}

void sub_2242403E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::function0<void>::~function0((uint64_t *)va);
  turi::conditional::~conditional(v4);
  turi::mutex::~mutex(v3);
  _Unwind_Resume(a1);
}

uint64_t turi::hundredms_timer::alarm_thread(turi::hundredms_timer *this)
{
  std::chrono::system_clock::time_point v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  for (;
        !*((unsigned char *)this + 168);
        *((void *)this + 4) = (unint64_t)(((double)(LODWORD(v5.tv_nsec) - *((_DWORD *)this + 12)) / 1000000.0
                                                  + (double)(v5.tv_sec - *((void *)this + 5)))
                                                 * 10.0))
  {
    gettimeofday(&v4, 0);
    v5.tv_sec = v4.tv_sec;
    v5.tv_nsec = 1000 * v4.tv_usec + 50000000;
    if (v4.tv_usec >= 950001)
    {
      v5.tv_sec = v4.tv_sec + 1;
      v5.tv_nsec = 1000 * v4.tv_usec - 950000000;
    }
    pthread_cond_timedwait((pthread_cond_t *)((char *)this + 120), v2, &v5);
    gettimeofday((timeval *)&v5, 0);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246E73E0 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246E73E0 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>,void>::invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::chrono::system_clock::time_point v2 = *(uint64_t (**)(void *))a1;
  int v3 = (void *)(*(void *)(a1 + 16) + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void turi::hundredms_timer::~hundredms_timer(turi::hundredms_timer *this)
{
}

double CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_SVM_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/SVM.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_LinearKernel_default_instance_ = (uint64_t)&unk_26D773240;
  qword_26808CE80 = 0;
  dword_26808CE88 = 0;
  byte_26808CE90 = 1;
  qword_26808CEA0 = 0;
  qword_26808CEA8 = 0;
  CoreML::Specification::_RBFKernel_default_instance_ = (uint64_t)&unk_26D7732D8;
  dword_26808CEB0 = 0;
  byte_26808CEB8 = 1;
  CoreML::Specification::_PolyKernel_default_instance_ = (uint64_t)&unk_26D773370;
  double result = 0.0;
  unk_26808CEC8 = 0u;
  unk_26808CED8 = 0u;
  byte_26808CEE8 = 1;
  CoreML::Specification::_SigmoidKernel_default_instance_ = (uint64_t)&unk_26D773408;
  *(void *)algn_26808CEF8 = 0;
  qword_26808CF00 = 0;
  unk_26808CF08 = 0;
  dword_26808CF10 = 0;
  byte_26808CF18 = 1;
  CoreML::Specification::_Kernel_default_instance_ = (uint64_t)&unk_26D7734A0;
  unk_26808CF28 = 0;
  qword_26808CF38 = 0;
  byte_26808CF40 = 1;
  CoreML::Specification::_SparseNode_default_instance_ = (uint64_t)&unk_26D773538;
  unk_26808CF70 = 0;
  qword_26808CF78 = 0;
  unk_26808CF80 = 0;
  byte_26808CF88 = 1;
  CoreML::Specification::_SparseVector_default_instance_ = (uint64_t)&unk_26D7735D0;
  unk_26808CF98 = 0u;
  unk_26808CFA8 = 0u;
  dword_26808CFB8 = 0;
  byte_26808CFC0 = 1;
  CoreML::Specification::_SparseSupportVectors_default_instance_ = (uint64_t)&unk_26D773668;
  unk_26808CFD0 = 0u;
  unk_26808CFE0 = 0u;
  dword_26808CFF0 = 0;
  byte_26808CFF8 = 1;
  CoreML::Specification::_DenseVector_default_instance_ = (uint64_t)&unk_26D773700;
  *(void *)algn_26808D008 = 0;
  qword_26808D010 = 0;
  unk_26808D018 = 0;
  dword_26808D024 = 0;
  byte_26808D028 = 1;
  CoreML::Specification::_DenseSupportVectors_default_instance_ = (uint64_t)&unk_26D773798;
  dword_26808D058 = 0;
  unk_26808D048 = 0u;
  unk_26808D038 = 0u;
  byte_26808D060 = 1;
  CoreML::Specification::_Coefficients_default_instance_ = (uint64_t)&unk_26D773830;
  unk_26808D070 = 0;
  qword_26808D078 = 0;
  unk_26808D080 = 0;
  dword_26808D08C = 0;
  byte_26808D090 = 1;
  CoreML::Specification::_SupportVectorRegressor_default_instance_ = (uint64_t)&unk_26D7738C8;
  qword_26808D0C8 = 0;
  xmmword_26808D0B0 = 0u;
  unk_26808D0A0 = 0u;
  byte_26808D0D0 = 1;
  qword_26808D140 = 0;
  unk_26808D148 = 0;
  qword_26808D158 = 0;
  unk_26808D160 = 0;
  CoreML::Specification::_SupportVectorClassifier_default_instance_ = (uint64_t)&unk_26D773960;
  unk_26808D0F0 = 0;
  qword_26808D0F8 = 0;
  unk_26808D100 = 0;
  qword_26808D130 = 0;
  unk_26808D120 = 0u;
  unk_26808D110 = 0u;
  dword_26808D190 = 0;
  qword_26808D188 = 0;
  byte_26808D198 = 1;
  qword_26808D0A8 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  *(void *)&xmmword_26808D0B0 = &CoreML::Specification::_Coefficients_default_instance_;
  qword_26808D170 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(CoreML::Specification::protobuf_SVM_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224240990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(void *)this = &unk_26D773240;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::LinearKernel *)&CoreML::Specification::_LinearKernel_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_224240A04(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinearKernel::~LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(void *)this = &unk_26D773240;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D773240;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224240B14(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>);
  }
  return result;
}

uint64_t CoreML::Specification::LinearKernel::MergePartialFromCodedStream(CoreML::Specification::LinearKernel *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::LinearKernel::ByteSizeLong(CoreML::Specification::LinearKernel *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::LinearKernel::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::LinearKernel::IsInitialized(CoreML::Specification::LinearKernel *this)
{
  return 1;
}

void *CoreML::Specification::LinearKernel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinearKernel");
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(void *)this = &unk_26D7732D8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::RBFKernel *)&CoreML::Specification::_RBFKernel_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_224240C78(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::RBFKernel::~RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(void *)this = &unk_26D7732D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7732D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::RBFKernel::default_instance(CoreML::Specification::RBFKernel *this)
{
  return &CoreML::Specification::_RBFKernel_default_instance_;
}

void CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224240DA8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::RBFKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>);
  }
  return result;
}

uint64_t CoreML::Specification::RBFKernel::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::RBFKernel::MergePartialFromCodedStream(CoreML::Specification::RBFKernel *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      long long v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0) {
        goto LABEL_7;
      }
LABEL_11:
      if (v7) {
        BOOL v10 = (v7 & 7) == 4;
      }
      else {
        BOOL v10 = 1;
      }
      uint64_t v11 = v10;
      if (v10
        || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      {
        return v11;
      }
    }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    if (v7 != 9 || (v7 & 0xFFFFFFF8) != 8) {
      goto LABEL_11;
    }
    unint64_t v15 = 0;
    int v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      unint64_t v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_22;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v15)) {
      return 0;
    }
    unint64_t v13 = v15;
LABEL_22:
    *((void *)this + 2) = v13;
  }
}

uint64_t CoreML::Specification::RBFKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  double v3 = *(double *)(this + 16);
  if (v3 != 0.0) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v3, a3);
  }
  return this;
}

uint64_t CoreML::Specification::RBFKernel::ByteSizeLong(CoreML::Specification::RBFKernel *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::RBFKernel::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  double v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  double v5 = *((double *)a2 + 2);
  if (v5 != 0.0) {
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  }
  return this;
}

uint64_t CoreML::Specification::RBFKernel::IsInitialized(CoreML::Specification::RBFKernel *this)
{
  return 1;
}

void *CoreML::Specification::RBFKernel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RBFKernel");
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(void *)this = &unk_26D773370;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_224240FF0(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PolyKernel::~PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(void *)this = &unk_26D773370;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D773370;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224241100(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PolyKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>);
  }
  return result;
}

uint64_t CoreML::Specification::PolyKernel::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

BOOL CoreML::Specification::PolyKernel::MergePartialFromCodedStream(CoreML::Specification::PolyKernel *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          double v5 = *a2;
          if (*a2 >= a2[1])
          {
            uint64_t v6 = 0;
LABEL_6:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
            unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0) {
              goto LABEL_25;
            }
            goto LABEL_7;
          }
          uint64_t v6 = *v5;
          if (*v5 < 1) {
            goto LABEL_6;
          }
          *a2 = v5 + 1;
          unint64_t v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_25;
          }
LABEL_7:
          unsigned int v9 = v7 >> 3;
          if (v7 >> 3 != 3) {
            break;
          }
          if (v7 != 25) {
            goto LABEL_25;
          }
          unint64_t v20 = 0;
          unint64_t v13 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
            if (!result) {
              return result;
            }
            unint64_t v14 = v20;
          }
          else
          {
            unint64_t v14 = *v13;
            *a2 = (char *)(v13 + 1);
          }
          *((void *)this + 3) = v14;
        }
        if (v9 != 2) {
          break;
        }
        if (v7 != 17) {
          goto LABEL_25;
        }
        unint64_t v20 = 0;
        unint64_t v15 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
          if (!result) {
            return result;
          }
          unint64_t v16 = v20;
        }
        else
        {
          unint64_t v16 = *v15;
          *a2 = (char *)(v15 + 1);
        }
        *((void *)this + 2) = v16;
      }
      if (v9 != 1 || v7 != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_33;
        }
      }
      uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_33:
      *((_DWORD *)this + 8) = v12;
    }
LABEL_25:
    if (v7) {
      BOOL v17 = (v7 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::PolyKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 32);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  }
  double v7 = *(double *)(v5 + 16);
  if (v7 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  double v8 = *(double *)(v5 + 24);
  if (v8 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v8, a3);
  }
  return this;
}

uint64_t CoreML::Specification::PolyKernel::ByteSizeLong(CoreML::Specification::PolyKernel *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((double *)this + 3) != 0.0) {
    v1 += 9;
  }
  int v2 = *((_DWORD *)this + 8);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0) {
    uint64_t v3 = v4;
  }
  uint64_t v5 = v3 + v1;
  if (v2) {
    uint64_t v1 = v5;
  }
  *((_DWORD *)this + 9) = v1;
  return v1;
}

std::string *CoreML::Specification::PolyKernel::MergeFrom(std::string *this, const CoreML::Specification::PolyKernel *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  double v5 = *((double *)a2 + 2);
  if (v5 != 0.0) {
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  }
  double v6 = *((double *)a2 + 3);
  if (v6 != 0.0) {
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)a2 + 8);
  if (v7) {
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
  }
  return this;
}

uint64_t CoreML::Specification::PolyKernel::IsInitialized(CoreML::Specification::PolyKernel *this)
{
  return 1;
}

void *CoreML::Specification::PolyKernel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PolyKernel");
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(void *)this = &unk_26D773408;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2242414B8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SigmoidKernel::~SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(void *)this = &unk_26D773408;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D773408;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242415C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SigmoidKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>);
  }
  return result;
}

uint64_t CoreML::Specification::SigmoidKernel::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(CoreML::Specification::SigmoidKernel *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        double v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 2) {
        break;
      }
      if (v7 >> 3 != 1 || v7 != 9) {
        goto LABEL_20;
      }
      unint64_t v17 = 0;
      BOOL v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
          return 0;
        }
        unint64_t v11 = v17;
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((void *)this + 2) = v11;
    }
    if (v7 != 17) {
      goto LABEL_20;
    }
    unint64_t v17 = 0;
    int v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      unint64_t v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
      return 0;
    }
    unint64_t v13 = v17;
LABEL_19:
    *((void *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::SigmoidKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  double v5 = *(double *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  double v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::ByteSizeLong(CoreML::Specification::SigmoidKernel *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((double *)this + 3) != 0.0) {
    v1 += 9;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

std::string *CoreML::Specification::SigmoidKernel::MergeFrom(std::string *this, const CoreML::Specification::SigmoidKernel *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  double v5 = *((double *)a2 + 2);
  if (v5 != 0.0) {
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  }
  double v6 = *((double *)a2 + 3);
  if (v6 != 0.0) {
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::IsInitialized(CoreML::Specification::SigmoidKernel *this)
{
  return 1;
}

void *CoreML::Specification::SigmoidKernel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SigmoidKernel");
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::Kernel(CoreML::Specification::Kernel *this)
{
  *(void *)this = &unk_26D7734A0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_2242418D4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Kernel::~Kernel(CoreML::Specification::Kernel *this)
{
  *(void *)this = &unk_26D7734A0;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Kernel::~Kernel(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::Kernel::clear_kernel(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224241A64(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Kernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>);
  }
  return result;
}

uint64_t CoreML::Specification::Kernel::MergePartialFromCodedStream(CoreML::Specification::Kernel *this, char **a2, unsigned int a3)
{
  while (2)
  {
    while (1)
    {
      double v5 = *a2;
      if (*a2 >= a2[1]) {
        break;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0) {
        goto LABEL_7;
      }
LABEL_23:
      if (v7) {
        BOOL v14 = (v7 & 7) == 4;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14) {
        return 1;
      }
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)goto LABEL_58; {
    }
      }
    uint64_t v6 = 0;
LABEL_6:
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
    unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_23;
    }
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          operator new();
        }
        unsigned int v9 = *a2;
        if (*a2 >= a2[1] || *v9 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v9;
          *a2 = v9 + 1;
        }
        unint64_t v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v21 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        int v23 = v21;
        uint64_t result = CoreML::Specification::LinearKernel::MergePartialFromCodedStream((CoreML::Specification::LinearKernel *)v21, a2, v22);
        if (!result) {
          return result;
        }
        unint64_t v25 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        int v26 = v23;
        goto LABEL_57;
      case 2u:
        if (v7 != 18) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 2)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          operator new();
        }
        unint64_t v11 = (CoreML::Specification::RBFKernel *)*((void *)this + 2);
        uint64_t v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          int v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v16 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v16 = *v15;
          *a2 = v15 + 1;
        }
        unint64_t v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        int v29 = v27;
        uint64_t result = CoreML::Specification::RBFKernel::MergePartialFromCodedStream(v11, a2, v28);
        if (!result) {
          return result;
        }
        goto LABEL_56;
      case 3u:
        if (v7 != 26) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 3)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          operator new();
        }
        int v12 = (CoreML::Specification::PolyKernel *)*((void *)this + 2);
        unint64_t v17 = *a2;
        if (*a2 >= a2[1] || *v17 < 0)
        {
          int v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v18 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v18 = *v17;
          *a2 = v17 + 1;
        }
        unint64_t v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
        if ((v30 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        int v29 = v30;
        uint64_t result = CoreML::Specification::PolyKernel::MergePartialFromCodedStream(v12, a2, v31);
        if (!result) {
          return result;
        }
        goto LABEL_56;
      case 4u:
        if (v7 != 34) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 4)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          operator new();
        }
        unint64_t v13 = (CoreML::Specification::SigmoidKernel *)*((void *)this + 2);
        int v19 = *a2;
        if (*a2 >= a2[1] || *v19 < 0)
        {
          int v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v20 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v20 = *v19;
          *a2 = v19 + 1;
        }
        unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
        if ((v32 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        int v29 = v32;
        uint64_t result = CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(v13, a2, v33);
        if (!result) {
          return result;
        }
LABEL_56:
        unint64_t v25 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        int v26 = v29;
LABEL_57:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v25, v26)) {
          continue;
        }
LABEL_58:
        uint64_t result = 0;
        break;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_224241E4C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Kernel::ByteSizeLong(CoreML::Specification::Kernel *this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      *(_DWORD *)(*((void *)this + 2) + 16) = 0;
      uint64_t result = 2;
      break;
    case 2:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = 9;
      if (*(double *)(v3 + 16) == 0.0) {
        uint64_t v4 = 0;
      }
      *(_DWORD *)(v3 + 24) = v4;
      uint64_t result = v4 | 2;
      break;
    case 3:
      uint64_t v5 = CoreML::Specification::PolyKernel::ByteSizeLong(*((CoreML::Specification::PolyKernel **)this + 2));
      uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = 9;
      if (*(double *)(v7 + 16) == 0.0) {
        uint64_t v8 = 0;
      }
      if (*(double *)(v7 + 24) != 0.0) {
        v8 += 9;
      }
      *(_DWORD *)(v7 + 32) = v8;
      uint64_t v6 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      uint64_t result = v6 + 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::Kernel::MergeFrom(std::string *this, const CoreML::Specification::Kernel *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) != 1)
      {
        CoreML::Specification::Kernel::clear_kernel(v3);
        *(_DWORD *)(v3 + 28) = 1;
        operator new();
      }
      uint64_t v11 = *(void *)(*((void *)a2 + 2) + 8);
      if (v11)
      {
        int v12 = (unint64_t *)(*(void *)(v3 + 16) + 8);
        this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v12, v11 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
    case 2:
      if (*(_DWORD *)(v3 + 28) != 2)
      {
        CoreML::Specification::Kernel::clear_kernel(v3);
        *(_DWORD *)(v3 + 28) = 2;
        operator new();
      }
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = *((void *)a2 + 2);
      uint64_t v13 = *(void *)(v8 + 8);
      if (v13) {
        this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v5 + 8), v13 & 0xFFFFFFFFFFFFFFFELL);
      }
      double v14 = *(double *)(v8 + 16);
      if (v14 != 0.0) {
        *(double *)(v5 + 16) = v14;
      }
      break;
    case 3:
      if (*(_DWORD *)(v3 + 28) != 3)
      {
        CoreML::Specification::Kernel::clear_kernel(v3);
        *(_DWORD *)(v3 + 28) = 3;
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::PolyKernel *)*((void *)a2 + 2);
      unsigned int v9 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::PolyKernel::MergeFrom(v9, v6);
      break;
    case 4:
      if (*(_DWORD *)(v3 + 28) != 4)
      {
        CoreML::Specification::Kernel::clear_kernel(v3);
        *(_DWORD *)(v3 + 28) = 4;
        operator new();
      }
      uint64_t v7 = (const CoreML::Specification::SigmoidKernel *)*((void *)a2 + 2);
      BOOL v10 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::SigmoidKernel::MergeFrom(v10, v7);
      break;
    default:
      return this;
  }
  return this;
}

void sub_224242320(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::IsInitialized(CoreML::Specification::Kernel *this)
{
  return 1;
}

void *CoreML::Specification::Kernel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Kernel");
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::SparseNode(CoreML::Specification::SparseNode *this)
{
  *(void *)this = &unk_26D773538;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SparseNode *)&CoreML::Specification::_SparseNode_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_224242408(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseNode::~SparseNode(CoreML::Specification::SparseNode *this)
{
  *(void *)this = &unk_26D773538;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D773538;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224242518(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseNode>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>);
  }
  return result;
}

uint64_t CoreML::Specification::SparseNode::Clear(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::SparseNode::MergePartialFromCodedStream(CoreML::Specification::SparseNode *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 17) {
          goto LABEL_20;
        }
        unint64_t v17 = 0;
        int v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17);
          if (!result) {
            return result;
          }
          unint64_t v13 = v17;
        }
        else
        {
          unint64_t v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((void *)this + 2) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      BOOL v10 = *a2;
      if (*a2 >= a2[1])
      {
        int v11 = 0;
      }
      else
      {
        int v11 = *v10;
        if ((*v10 & 0x80000000) == 0)
        {
          *a2 = v10 + 1;
          goto LABEL_28;
        }
      }
      uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
      int v11 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_28:
      *((_DWORD *)this + 6) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SparseNode::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 24);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  }
  double v7 = *(double *)(v5 + 16);
  if (v7 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  return this;
}

uint64_t CoreML::Specification::SparseNode::ByteSizeLong(CoreML::Specification::SparseNode *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  int v2 = *((_DWORD *)this + 6);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0) {
    uint64_t v3 = v4;
  }
  uint64_t v5 = v3 + v1;
  if (v2) {
    uint64_t v1 = v5;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

std::string *CoreML::Specification::SparseNode::MergeFrom(std::string *this, const CoreML::Specification::SparseNode *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  double v5 = *((double *)a2 + 2);
  if (v5 != 0.0) {
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  }
  int v6 = *((_DWORD *)a2 + 6);
  if (v6) {
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v6;
  }
  return this;
}

uint64_t CoreML::Specification::SparseNode::IsInitialized(CoreML::Specification::SparseNode *this)
{
  return 1;
}

void *CoreML::Specification::SparseNode::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseNode");
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::SparseVector(CoreML::Specification::SparseVector *this)
{
  *(void *)this = &unk_26D7735D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseVector *)&CoreML::Specification::_SparseVector_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0;
  return this;
}

void sub_224242858(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseVector::~SparseVector(CoreML::Specification::SparseVector *this)
{
  *(void *)this = &unk_26D7735D0;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SparseVector::~SparseVector(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224242958(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>);
  }
  return result;
}

uint64_t CoreML::Specification::SparseVector::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    int v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(_DWORD *)(v3 + 24) = 0;
      *(void *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

BOOL CoreML::Specification::SparseVector::MergePartialFromCodedStream(CoreML::Specification::SparseVector *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      double v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>((uint64_t)v4);
      int v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        BOOL result = CoreML::Specification::SparseNode::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::SparseVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::ByteSizeLong(CoreML::Specification::SparseVector *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::SparseNode::ByteSizeLong(*(CoreML::Specification::SparseNode **)(*((void *)this + 4)
                                                                                                 + 8 * v3
                                                                                                 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v4;
  return v4;
}

std::string *CoreML::Specification::SparseVector::MergeFrom(std::string *this, const CoreML::Specification::SparseVector *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::SparseNode **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::IsInitialized(CoreML::Specification::SparseVector *this)
{
  return 1;
}

void *CoreML::Specification::SparseVector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseVector");
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(void *)this = &unk_26D773668;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0;
  return this;
}

void sub_224242D10(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(void *)this = &unk_26D773668;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224242E10(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseSupportVectors>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>);
  }
  return result;
}

uint64_t CoreML::Specification::SparseSupportVectors::Clear(CoreML::Specification::SparseSupportVectors *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::SparseSupportVectors *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((uint64_t)v4);
      int v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        BOOL result = CoreML::Specification::SparseVector::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::SparseSupportVectors::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::ByteSizeLong(CoreML::Specification::SparseSupportVectors *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::SparseVector::ByteSizeLong(*(CoreML::Specification::SparseVector **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v4;
  return v4;
}

std::string *CoreML::Specification::SparseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::SparseSupportVectors *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::SparseVector **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::IsInitialized(CoreML::Specification::SparseSupportVectors *this)
{
  return 1;
}

void *CoreML::Specification::SparseSupportVectors::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseSupportVectors");
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::DenseVector(CoreML::Specification::DenseVector *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D773700;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::DenseVector *)&CoreML::Specification::_DenseVector_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_224243198(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DenseVector::~DenseVector(CoreML::Specification::DenseVector *this)
{
  *(void *)this = &unk_26D773700;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::DenseVector::~DenseVector(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242432AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DenseVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>);
  }
  return result;
}

uint64_t CoreML::Specification::DenseVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::DenseVector::MergePartialFromCodedStream(CoreML::Specification::DenseVector *this, char **a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      BOOL v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 3;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v28 = 0;
          int v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result) {
              return result;
            }
            unint64_t v20 = v28;
          }
          else
          {
            unint64_t v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(void *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
      }
    }
    unsigned int *v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    unsigned int *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::DenseVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      unsigned int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = (const double *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DenseVector::ByteSizeLong(CoreML::Specification::DenseVector *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DenseVector::IsInitialized(CoreML::Specification::DenseVector *this)
{
  return 1;
}

void *CoreML::Specification::DenseVector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseVector");
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(void *)this = &unk_26D773798;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0;
  return this;
}

void sub_22424378C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(void *)this = &unk_26D773798;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22424388C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DenseSupportVectors>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>);
  }
  return result;
}

uint64_t CoreML::Specification::DenseSupportVectors::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

BOOL CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::DenseSupportVectors *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      unsigned int v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>((uint64_t)v4);
      int v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        BOOL result = CoreML::Specification::DenseVector::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::DenseSupportVectors::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::ByteSizeLong(CoreML::Specification::DenseSupportVectors *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      uint64_t v6 = v5[4];
      uint64_t v7 = 8 * v6;
      if (v6)
      {
        if ((v7 & 0x80000000) != 0) {
          uint64_t v8 = 11;
        }
        else {
          uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v7;
      unsigned char v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v4;
  return v4;
}

std::string *CoreML::Specification::DenseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::DenseSupportVectors *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(&v3->__r_.__value_.__r.__words[2], (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::IsInitialized(CoreML::Specification::DenseSupportVectors *this)
{
  return 1;
}

void *CoreML::Specification::DenseSupportVectors::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseSupportVectors");
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::Coefficients(CoreML::Specification::Coefficients *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D773830;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::Coefficients *)&CoreML::Specification::_Coefficients_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_224243C54(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Coefficients::~Coefficients(CoreML::Specification::Coefficients *this)
{
  *(void *)this = &unk_26D773830;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Coefficients::~Coefficients(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224243D68(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Coefficients>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>);
  }
  return result;
}

uint64_t CoreML::Specification::Coefficients::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::Coefficients::MergePartialFromCodedStream(CoreML::Specification::Coefficients *this, char **a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 3;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v28 = 0;
          int v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result) {
              return result;
            }
            unint64_t v20 = v28;
          }
          else
          {
            unint64_t v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(void *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
      }
    }
    unsigned int *v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    unsigned int *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Coefficients::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      unsigned int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = (const double *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Coefficients::ByteSizeLong(CoreML::Specification::Coefficients *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::Coefficients::IsInitialized(CoreML::Specification::Coefficients *this)
{
  return 1;
}

void *CoreML::Specification::Coefficients::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Coefficients");
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  *(void *)this = &unk_26D7738C8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void sub_22424423C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  *(void *)this = &unk_26D7738C8;
  CoreML::Specification::SupportVectorRegressor::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SupportVectorRegressor::SharedDtor(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    uint64_t v2 = this[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    this = *(uint64_t **)(v1 + 24);
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 52))
  {
    return (uint64_t *)CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v1);
  }
  return this;
}

uint64_t CoreML::Specification::SupportVectorRegressor::clear_supportVectors(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 52);
  if (v2 == 3 || v2 == 2)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t *CoreML::Specification::SupportVectorRegressor::default_instance(CoreML::Specification::SupportVectorRegressor *this)
{
  return &CoreML::Specification::_SupportVectorRegressor_default_instance_;
}

void CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224244468(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4034009599);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::SupportVectorRegressor::Clear(CoreML::Specification::SupportVectorRegressor *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  return CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(CoreML::Specification::SupportVectorRegressor *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v6 = 0;
LABEL_6:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_30;
      }
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 10) {
            goto LABEL_30;
          }
          uint64_t v9 = (CoreML::Specification::Kernel *)*((void *)this + 2);
          if (!v9) {
            operator new();
          }
          unsigned int v10 = *a2;
          if (*a2 >= a2[1] || *v10 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v10;
            *a2 = v10 + 1;
          }
          unint64_t v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v26 = v24;
          uint64_t result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v9, a2, v25);
          if (!result) {
            return result;
          }
          goto LABEL_59;
        case 2u:
          if (v7 != 18) {
            goto LABEL_30;
          }
          if (*((_DWORD *)this + 13) != 2)
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 2;
            operator new();
          }
          int v12 = (CoreML::Specification::SparseSupportVectors *)*((void *)this + 5);
          unint64_t v20 = *a2;
          if (*a2 >= a2[1] || *v20 < 0)
          {
            int v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v21 < 0) {
              return 0;
            }
          }
          else
          {
            int v21 = *v20;
            *a2 = v20 + 1;
          }
          unint64_t v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
          if ((v30 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v26 = v30;
          uint64_t result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v12, a2, v31);
          if (!result) {
            return result;
          }
          goto LABEL_59;
        case 3u:
          if (v7 != 26) {
            goto LABEL_30;
          }
          if (*((_DWORD *)this + 13) != 3)
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 3;
            operator new();
          }
          uint64_t v13 = (CoreML::Specification::DenseSupportVectors *)*((void *)this + 5);
          uint64_t v22 = *a2;
          if (*a2 >= a2[1] || *v22 < 0)
          {
            int v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v23 < 0) {
              return 0;
            }
          }
          else
          {
            int v23 = *v22;
            *a2 = v22 + 1;
          }
          unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23);
          if ((v32 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v26 = v32;
          uint64_t result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v13, a2, v33);
          if (!result) {
            return result;
          }
LABEL_59:
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26))
          {
            continue;
          }
          return 0;
        case 4u:
          if (v7 != 34) {
            goto LABEL_30;
          }
          unsigned int v14 = (CoreML::Specification::Coefficients *)*((void *)this + 3);
          if (!v14) {
            operator new();
          }
          int v15 = *a2;
          if (*a2 >= a2[1] || *v15 < 0)
          {
            int v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v16 < 0) {
              return 0;
            }
          }
          else
          {
            int v16 = *v15;
            *a2 = v15 + 1;
          }
          unint64_t v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
          if ((v28 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v26 = v28;
          uint64_t result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(v14, a2, v29);
          if (!result) {
            return result;
          }
          goto LABEL_59;
        case 5u:
          if (v7 != 41) {
            goto LABEL_30;
          }
          unint64_t v34 = 0;
          int v17 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v34);
            if (!result) {
              return result;
            }
            unint64_t v18 = v34;
          }
          else
          {
            unint64_t v18 = *v17;
            *a2 = (char *)(v17 + 1);
          }
          *((void *)this + 4) = v18;
          break;
        default:
          goto LABEL_30;
      }
    }
    uint64_t v6 = *v5;
    if (*v5 < 1) {
      goto LABEL_6;
    }
    *a2 = v5 + 1;
    unint64_t v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_7;
    }
LABEL_30:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_224244900(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SupportVectorRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (this != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
  }
  int v7 = *((_DWORD *)v5 + 13);
  if (v7 == 2)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v5[5], a2, a4);
    int v7 = *((_DWORD *)v5 + 13);
  }
  if (v7 == 3) {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  }
  if (v5 != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    uint64_t v8 = v5[3];
    if (v8) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
    }
  }
  double v9 = *((double *)v5 + 4);
  if (v9 != 0.0)
  {
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)5, a2, v9, a3);
  }
  return this;
}

uint64_t CoreML::Specification::SupportVectorRegressor::ByteSizeLong(CoreML::Specification::SupportVectorRegressor *this)
{
  if (this == (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (CoreML::Specification::Kernel *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::Kernel::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (unsigned int *)*((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = v5[4];
      uint64_t v7 = 8 * v6;
      if (v6)
      {
        if ((v7 & 0x80000000) != 0) {
          uint64_t v8 = 11;
        }
        else {
          uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v7;
      unsigned char v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  if (*((double *)this + 4) == 0.0) {
    uint64_t v10 = v4;
  }
  else {
    uint64_t v10 = v4 + 9;
  }
  int v11 = *((_DWORD *)this + 13);
  if (v11 == 3)
  {
    uint64_t v12 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 5));
    goto LABEL_20;
  }
  if (v11 == 2)
  {
    uint64_t v12 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 5));
LABEL_20:
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 12) = v10;
  return v10;
}

std::string *CoreML::Specification::SupportVectorRegressor::MergeFrom(std::string *this, const CoreML::Specification::SupportVectorRegressor *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      uint64_t v5 = *(std::string **)(v3 + 16);
      if (!v5) {
        operator new();
      }
      this = CoreML::Specification::Kernel::MergeFrom(v5, *((const CoreML::Specification::Kernel **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      uint64_t v6 = *(unint64_t **)(v3 + 24);
      if (!v6) {
        operator new();
      }
      this = (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v6, *((const CoreML::Specification::GLMRegressor_DoubleArray **)a2 + 3));
    }
  }
  double v7 = *((double *)a2 + 4);
  if (v7 != 0.0) {
    *(double *)(v3 + 32) = v7;
  }
  int v8 = *((_DWORD *)a2 + 13);
  if (v8 == 3)
  {
    if (*(_DWORD *)(v3 + 52) != 3)
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 52) = 3;
      operator new();
    }
    uint64_t v10 = (const CoreML::Specification::DenseSupportVectors *)*((void *)a2 + 5);
    uint64_t v12 = *(std::string **)(v3 + 40);
    return CoreML::Specification::DenseSupportVectors::MergeFrom(v12, v10);
  }
  else if (v8 == 2)
  {
    if (*(_DWORD *)(v3 + 52) != 2)
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 52) = 2;
      operator new();
    }
    uint64_t v9 = (const CoreML::Specification::SparseSupportVectors *)*((void *)a2 + 5);
    int v11 = *(std::string **)(v3 + 40);
    return CoreML::Specification::SparseSupportVectors::MergeFrom(v11, v9);
  }
  return this;
}

void sub_224244DAC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorRegressor::IsInitialized(CoreML::Specification::SupportVectorRegressor *this)
{
  return 1;
}

void *CoreML::Specification::SupportVectorRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorRegressor");
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0u;
  *(void *)this = &unk_26D773960;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_) {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  }
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 2CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0;
  return this;
}

void sub_224244EA4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 120);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v1);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  CoreML::Specification::LinearQuantizationParams::LinearQuantizationParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  *(void *)this = &unk_26D773960;
  CoreML::Specification::SupportVectorClassifier::SharedDtor((uint64_t *)this);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3 && !*v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4 && !*v4) {
    operator delete(v4);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 5);
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5 && !*v5) {
    operator delete(v5);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SharedDtor(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    this = (uint64_t *)this[17];
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 164)) {
    this = (uint64_t *)CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v1);
  }
  if (*(_DWORD *)(v1 + 168))
  {
    return (uint64_t *)CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v1);
  }
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_supportVectors(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 164);
  if (v2 == 4 || v2 == 3)
  {
    this = *(void *)(this + 144);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 164) = 0;
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 168);
  if (v2 == 101 || v2 == 100)
  {
    this = *(void *)(this + 152);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 168) = 0;
  return this;
}

uint64_t *CoreML::Specification::SupportVectorClassifier::default_instance(CoreML::Specification::SupportVectorClassifier *this)
{
  return &CoreML::Specification::_SupportVectorClassifier_default_instance_;
}

void CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242451A4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4069FFF750);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::SupportVectorClassifier::Clear(CoreML::Specification::SupportVectorClassifier *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v4 = *v3++;
      *(_DWORD *)(v4 + 16) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  uint64_t v5 = *((void *)this + 17);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 17) = 0;
  CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  return CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(CoreML::Specification::SupportVectorClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 112);
  uint64_t v6 = (unsigned int *)((char *)this + 88);
  double v7 = (unsigned int *)((char *)this + 64);
  int v109 = (char *)this + 40;
  int v8 = (signed int *)((char *)this + 16);
  while (2)
  {
    uint64_t v9 = *(unsigned __int8 **)a2;
    unint64_t v10 = *((void *)a2 + 1);
    if (*(void *)a2 >= v10)
    {
      uint64_t v12 = 0;
    }
    else
    {
      int v11 = v9 + 1;
      uint64_t v12 = *v9;
      if ((char)*v9 >= 1)
      {
        *(void *)a2 = v11;
        unint64_t v13 = v12 | 0x100000000;
        if ((v13 & 0x100000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_17;
      }
      if ((unint64_t)v11 < v10)
      {
        int v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(void *)a2 = v9 + 2;
          unint64_t v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
    unint64_t v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v13 & 0x100000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    unsigned int v17 = v13 >> 3;
    switch(v13 >> 3)
    {
      case 1u:
        if (v13 != 10) {
          goto LABEL_9;
        }
        unint64_t v18 = (CoreML::Specification::Kernel *)*((void *)this + 17);
        if (!v18) {
          operator new();
        }
        int v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v19;
          *(void *)a2 = v19 + 1;
        }
        unint64_t v51 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
        if ((v51 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v49 = v51;
        uint64_t result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v18, (char **)a2, v52);
        if (result) {
          goto LABEL_108;
        }
        return result;
      case 2u:
        if (v13 == 16)
        {
          if (_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(_tc_google::protobuf::internal::WireFormatLite::FieldType)5>(1, 0x12u, a2, v8))continue; {
          return 0;
          }
        }
        if (v13 != 18) {
          goto LABEL_9;
        }
        uint64_t v22 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
        {
          int v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v23 < 0) {
            return 0;
          }
        }
        else
        {
          int v23 = *v22;
          *(void *)a2 = v22 + 1;
        }
        int v61 = _tc_google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) < 1)
        {
LABEL_120:
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v61);
          continue;
        }
        while (1)
        {
          unsigned int v62 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1)) {
            break;
          }
          int v63 = *v62;
          if (*v62 < 0) {
            goto LABEL_116;
          }
          *(void *)a2 = v62 + 1;
LABEL_117:
          signed int v65 = *((_DWORD *)this + 4);
          if (v65 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v8, v65 + 1);
            signed int v65 = *v8;
          }
          uint64_t v66 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v65 + 1;
          *(_DWORD *)(v66 + 4 * v65 + 8) = v63;
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) <= 0) {
            goto LABEL_120;
          }
        }
        int v63 = 0;
LABEL_116:
        uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
        int v63 = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
        goto LABEL_117;
      case 3u:
        if (v13 != 26) {
          goto LABEL_9;
        }
        if (*((_DWORD *)this + 41) != 3)
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 3;
          operator new();
        }
        unint64_t v24 = (CoreML::Specification::SparseSupportVectors *)*((void *)this + 18);
        uint64_t v41 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v41 < 0)
        {
          int v42 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v42 < 0) {
            return 0;
          }
        }
        else
        {
          int v42 = *v41;
          *(void *)a2 = v41 + 1;
        }
        unint64_t v55 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v42);
        if ((v55 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v49 = v55;
        uint64_t result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v24, (char **)a2, v56);
        if (!result) {
          return result;
        }
        goto LABEL_108;
      case 4u:
        if (v13 != 34) {
          goto LABEL_9;
        }
        if (*((_DWORD *)this + 41) != 4)
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 4;
          operator new();
        }
        unsigned int v25 = (CoreML::Specification::DenseSupportVectors *)*((void *)this + 18);
        std::string::size_type v43 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v43 < 0)
        {
          int v44 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v44 < 0) {
            return 0;
          }
        }
        else
        {
          int v44 = *v43;
          *(void *)a2 = v43 + 1;
        }
        unint64_t v57 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v44);
        if ((v57 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v49 = v57;
        uint64_t result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v25, (char **)a2, v58);
        if (!result) {
          return result;
        }
        goto LABEL_108;
      case 5u:
        if (v13 != 42) {
          goto LABEL_9;
        }
        int v26 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>((uint64_t)v109);
        uint64_t v27 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
        {
          int v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v28 < 0) {
            return 0;
          }
        }
        else
        {
          int v28 = *v27;
          *(void *)a2 = v27 + 1;
        }
        unint64_t v47 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
        if ((v47 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v49 = v47;
        uint64_t result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(v26, (char **)a2, v48);
        if (!result) {
          return result;
        }
        goto LABEL_108;
      case 6u:
        if (v13 == 49)
        {
          unsigned int v36 = 50;
          uint64_t v37 = (unint64_t **)a2;
          uint64_t v38 = (uint64_t)v7;
          goto LABEL_67;
        }
        if (v13 != 50) {
          goto LABEL_9;
        }
        unint64_t v32 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v32 < 0)
        {
          unsigned int v33 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v33 & 0x80000000) != 0) {
            return 0;
          }
        }
        else
        {
          unsigned int v33 = *v32;
          *(void *)a2 = v32 + 1;
        }
        if ((v33 & 7) != 0) {
          return 0;
        }
        signed int v80 = *v7;
        unsigned int v81 = v33 >> 3;
        int v82 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        int v83 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v83 >= v82) {
          int v84 = v82;
        }
        else {
          int v84 = v83;
        }
        if (v82 == -1) {
          int v84 = v83;
        }
        if (v84 >= (uint64_t)v33)
        {
          signed int v90 = v80 + v81;
          if ((int)*v7 >= (int)(v80 + v81))
          {
            uint64_t v91 = *((void *)this + 9);
          }
          else
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v7, v80 + v81);
            uint64_t v91 = *((void *)this + 9);
            uint64_t v92 = 8 * v90 - 8 * *((int *)this + 16);
            if (v92 >= 1) {
              bzero((void *)(v91 + 8 + 8 * *((int *)this + 16)), 8 * (((unint64_t)v92 >> 3) - ((unint64_t)v92 > 7)) + 8);
            }
          }
          *double v7 = v90;
          uint64_t v107 = v91 + 8;
          if (!v91) {
            uint64_t v107 = 0;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v107 + 8 * v80), v33))
          {
            if ((int)*v7 < 1) {
              return 0;
            }
            uint64_t result = 0;
            *double v7 = v80;
            return result;
          }
        }
        else if (v33 >= 8)
        {
          if (v81 <= 1) {
            int v85 = 1;
          }
          else {
            int v85 = v33 >> 3;
          }
          do
          {
            unint64_t v110 = 0;
            std::string v86 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
            {
              uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
              if (!result) {
                return result;
              }
              unint64_t v87 = v110;
            }
            else
            {
              unint64_t v87 = *v86;
              *(void *)a2 = v86 + 1;
            }
            signed int v88 = *((_DWORD *)this + 16);
            if (v88 == *((_DWORD *)this + 17))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v7, v88 + 1);
              signed int v88 = *v7;
            }
            uint64_t v89 = *((void *)this + 9);
            *((_DWORD *)this + 16) = v88 + 1;
            *(void *)(v89 + 8 * v88 + 8) = v87;
            --v85;
          }
          while (v85);
        }
        continue;
      case 7u:
        if (v13 == 57)
        {
          unsigned int v36 = 58;
          uint64_t v37 = (unint64_t **)a2;
          uint64_t v38 = (uint64_t)v6;
          goto LABEL_67;
        }
        if (v13 != 58) {
          goto LABEL_9;
        }
        unint64_t v34 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v34 < 0)
        {
          unsigned int v35 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v35 & 0x80000000) != 0) {
            return 0;
          }
        }
        else
        {
          unsigned int v35 = *v34;
          *(void *)a2 = v34 + 1;
        }
        if ((v35 & 7) != 0) {
          return 0;
        }
        signed int v93 = *v6;
        unsigned int v94 = v35 >> 3;
        int v95 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        int v96 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v96 >= v95) {
          int v97 = v95;
        }
        else {
          int v97 = v96;
        }
        if (v95 == -1) {
          int v97 = v96;
        }
        if (v97 >= (uint64_t)v35)
        {
          signed int v103 = v93 + v94;
          if ((int)*v6 >= (int)(v93 + v94))
          {
            uint64_t v104 = *((void *)this + 12);
          }
          else
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v93 + v94);
            uint64_t v104 = *((void *)this + 12);
            uint64_t v105 = 8 * v103 - 8 * *((int *)this + 22);
            if (v105 >= 1) {
              bzero((void *)(v104 + 8 + 8 * *((int *)this + 22)), 8 * (((unint64_t)v105 >> 3) - ((unint64_t)v105 > 7)) + 8);
            }
          }
          unsigned int *v6 = v103;
          uint64_t v108 = v104 + 8;
          if (!v104) {
            uint64_t v108 = 0;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v108 + 8 * v93), v35))
          {
            if ((int)*v6 >= 1)
            {
              uint64_t result = 0;
              unsigned int *v6 = v93;
              return result;
            }
            return 0;
          }
        }
        else if (v35 >= 8)
        {
          if (v94 <= 1) {
            int v98 = 1;
          }
          else {
            int v98 = v35 >> 3;
          }
          do
          {
            unint64_t v110 = 0;
            timeval v99 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
            {
              uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
              if (!result) {
                return result;
              }
              unint64_t v100 = v110;
            }
            else
            {
              unint64_t v100 = *v99;
              *(void *)a2 = v99 + 1;
            }
            signed int v101 = *((_DWORD *)this + 22);
            if (v101 == *((_DWORD *)this + 23))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v101 + 1);
              signed int v101 = *v6;
            }
            uint64_t v102 = *((void *)this + 12);
            *((_DWORD *)this + 22) = v101 + 1;
            *(void *)(v102 + 8 * v101 + 8) = v100;
            --v98;
          }
          while (v98);
        }
        continue;
      case 8u:
        if (v13 == 65)
        {
          unsigned int v36 = 66;
          uint64_t v37 = (unint64_t **)a2;
          uint64_t v38 = (uint64_t)v5;
LABEL_67:
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, v36, v37, v38))return 0; {
          continue;
          }
        }
        if (v13 != 66)
        {
LABEL_9:
          if (v13) {
            BOOL v15 = (v13 & 7) == 4;
          }
          else {
            BOOL v15 = 1;
          }
          if (v15) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0; {
          continue;
          }
        }
        unsigned int v29 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
        {
          unsigned int v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v30 & 0x80000000) != 0) {
            return 0;
          }
        }
        else
        {
          unsigned int v30 = *v29;
          *(void *)a2 = v29 + 1;
        }
        if ((v30 & 7) != 0) {
          return 0;
        }
        signed int v67 = *v5;
        unsigned int v68 = v30 >> 3;
        int v69 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        int v70 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v70 >= v69) {
          int v71 = v69;
        }
        else {
          int v71 = v70;
        }
        if (v69 == -1) {
          int v71 = v70;
        }
        if (v71 < (uint64_t)v30)
        {
          if (v30 >= 8)
          {
            if (v68 <= 1) {
              int v72 = 1;
            }
            else {
              int v72 = v30 >> 3;
            }
            do
            {
              unint64_t v110 = 0;
              uint64_t v73 = *(unint64_t **)a2;
              if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
              {
                uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
                if (!result) {
                  return result;
                }
                unint64_t v74 = v110;
              }
              else
              {
                unint64_t v74 = *v73;
                *(void *)a2 = v73 + 1;
              }
              signed int v75 = *((_DWORD *)this + 28);
              if (v75 == *((_DWORD *)this + 29))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v75 + 1);
                signed int v75 = *v5;
              }
              uint64_t v76 = *((void *)this + 15);
              *((_DWORD *)this + 28) = v75 + 1;
              *(void *)(v76 + 8 * v75 + 8) = v74;
              --v72;
            }
            while (v72);
          }
          continue;
        }
        signed int v77 = v67 + v68;
        if ((int)*v5 >= (int)(v67 + v68))
        {
          uint64_t v78 = *((void *)this + 15);
        }
        else
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v67 + v68);
          uint64_t v78 = *((void *)this + 15);
          uint64_t v79 = 8 * v77 - 8 * *((int *)this + 28);
          if (v79 >= 1) {
            bzero((void *)(v78 + 8 + 8 * *((int *)this + 28)), 8 * (((unint64_t)v79 >> 3) - ((unint64_t)v79 > 7)) + 8);
          }
        }
        unsigned int *v5 = v77;
        uint64_t v106 = v78 + 8;
        if (!v78) {
          uint64_t v106 = 0;
        }
        if (_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v106 + 8 * v67), v30)) {
          continue;
        }
        if ((int)*v5 >= 1)
        {
          uint64_t result = 0;
          unsigned int *v5 = v67;
          return result;
        }
        return 0;
      default:
        if (v17 == 100)
        {
          if (v13 != 34) {
            goto LABEL_9;
          }
          if (*((_DWORD *)this + 42) != 100)
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 100;
            operator new();
          }
          unsigned int v31 = (CoreML::Specification::StringVector *)*((void *)this + 19);
          uint64_t v45 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v45 < 0)
          {
            int v46 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v46 < 0) {
              return 0;
            }
          }
          else
          {
            int v46 = *v45;
            *(void *)a2 = v45 + 1;
          }
          unint64_t v59 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v46);
          if ((v59 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v49 = v59;
          uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v31, (char **)a2, v60);
          if (!result) {
            return result;
          }
        }
        else
        {
          if (v17 != 101 || v13 != 42) {
            goto LABEL_9;
          }
          if (*((_DWORD *)this + 42) != 101)
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 101;
            operator new();
          }
          int v21 = (CoreML::Specification::Int64Vector *)*((void *)this + 19);
          std::string v39 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v39 < 0)
          {
            int v40 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v40 < 0) {
              return 0;
            }
          }
          else
          {
            int v40 = *v39;
            *(void *)a2 = v39 + 1;
          }
          unint64_t v53 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v40);
          if ((v53 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v49 = v53;
          uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v21, (char **)a2, v54);
          if (!result) {
            return result;
          }
        }
LABEL_108:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v49)) {
          return 0;
        }
        continue;
    }
  }
}

void sub_224245E08(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    uint64_t v6 = this[17];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
  }
  if (*((int *)v5 + 4) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v7 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v7 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v7;
    }
    unsigned int v8 = *((_DWORD *)v5 + 8);
    if (v7 < 5)
    {
      this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v8);
    }
    else
    {
      uint64_t v9 = *((void *)a2 + 1);
      if (v8 < 0x80)
      {
        unsigned int v11 = *((_DWORD *)v5 + 8);
        unint64_t v10 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v10++ = v8 | 0x80;
          unsigned int v11 = v8 >> 7;
          unsigned int v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      unsigned char *v10 = v11;
      int v13 = v10 - v9 + 1;
      *((void *)a2 + 1) += v13;
      *((_DWORD *)a2 + 4) -= v13;
    }
    uint64_t v14 = *((unsigned int *)v5 + 4);
    if ((int)v14 >= 1)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        unint64_t v16 = *(int *)(v5[3] + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v16);
        }
        else
        {
          uint64_t v17 = *((void *)a2 + 1);
          if (v16 < 0x80)
          {
            LODWORD(v19) = *(_DWORD *)(v5[3] + 4 * i + 8);
            unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v18++ = v16 | 0x80;
              unint64_t v19 = v16 >> 7;
              unint64_t v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *unint64_t v18 = v19;
          int v21 = v18 - v17 + 1;
          *((void *)a2 + 1) += v21;
          *((_DWORD *)a2 + 4) -= v21;
        }
      }
    }
  }
  int v22 = *((_DWORD *)v5 + 41);
  if (v22 == 3)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v5[18], a2, a4);
    int v22 = *((_DWORD *)v5 + 41);
  }
  if (v22 == 4) {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v5[18], a2, a4);
  }
  int v23 = *((_DWORD *)v5 + 12);
  if (v23)
  {
    for (int j = 0; j != v23; ++j)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(void *)(v5[7] + 8 * j + 8), a2, a4);
  }
  if (*((int *)v5 + 16) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x32u);
      int v25 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 50;
      int v25 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v25;
    }
    unsigned int v26 = *((_DWORD *)v5 + 20);
    if (v25 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v26);
    }
    else
    {
      uint64_t v27 = *((void *)a2 + 1);
      if (v26 < 0x80)
      {
        unsigned int v29 = *((_DWORD *)v5 + 20);
        int v28 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        int v28 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v28++ = v26 | 0x80;
          unsigned int v29 = v26 >> 7;
          unsigned int v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
      }
      *int v28 = v29;
      int v31 = v28 - v27 + 1;
      *((void *)a2 + 1) += v31;
      *((_DWORD *)a2 + 4) -= v31;
    }
    uint64_t v32 = v5[9];
    if (v32) {
      unsigned int v33 = (_tc_google::protobuf::internal::WireFormatLite *)(v32 + 8);
    }
    else {
      unsigned int v33 = 0;
    }
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v33, (const double *)*((unsigned int *)v5 + 16), a2, a4);
  }
  if (*((int *)v5 + 22) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x3Au);
      int v34 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 58;
      int v34 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v34;
    }
    unsigned int v35 = *((_DWORD *)v5 + 26);
    if (v34 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v35);
    }
    else
    {
      uint64_t v36 = *((void *)a2 + 1);
      if (v35 < 0x80)
      {
        unsigned int v38 = *((_DWORD *)v5 + 26);
        uint64_t v37 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v37 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v37++ = v35 | 0x80;
          unsigned int v38 = v35 >> 7;
          unsigned int v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
      }
      unsigned char *v37 = v38;
      int v40 = v37 - v36 + 1;
      *((void *)a2 + 1) += v40;
      *((_DWORD *)a2 + 4) -= v40;
    }
    uint64_t v41 = v5[12];
    if (v41) {
      int v42 = (_tc_google::protobuf::internal::WireFormatLite *)(v41 + 8);
    }
    else {
      int v42 = 0;
    }
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v42, (const double *)*((unsigned int *)v5 + 22), a2, a4);
  }
  if (*((int *)v5 + 28) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x42u);
      int v43 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 66;
      int v43 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v43;
    }
    unsigned int v44 = *((_DWORD *)v5 + 32);
    if (v43 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v44);
    }
    else
    {
      uint64_t v45 = *((void *)a2 + 1);
      if (v44 < 0x80)
      {
        unsigned int v47 = *((_DWORD *)v5 + 32);
        int v46 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        int v46 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v46++ = v44 | 0x80;
          unsigned int v47 = v44 >> 7;
          unsigned int v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
      }
      *int v46 = v47;
      int v49 = v46 - v45 + 1;
      *((void *)a2 + 1) += v49;
      *((_DWORD *)a2 + 4) -= v49;
    }
    uint64_t v50 = v5[15];
    if (v50) {
      unint64_t v51 = (_tc_google::protobuf::internal::WireFormatLite *)(v50 + 8);
    }
    else {
      unint64_t v51 = 0;
    }
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v51, (const double *)*((unsigned int *)v5 + 28), a2, a4);
  }
  int v52 = *((_DWORD *)v5 + 42);
  if (v52 == 100)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v5[19], a2, a4);
    int v52 = *((_DWORD *)v5 + 42);
  }
  if (v52 == 101)
  {
    uint64_t v53 = v5[19];
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v53, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::ByteSizeLong(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2 = _tc_google::protobuf::internal::WireFormatLite::Int32Size((unsigned int *)this + 4);
  if (v2)
  {
    uint64_t v3 = 11;
    uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v2 >= 0) {
      uint64_t v3 = v4;
    }
    int v5 = v2;
  }
  else
  {
    int v5 = 0;
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v3 + v2 + v6;
  if (v6)
  {
    int v8 = 0;
    uint64_t v9 = *((void *)this + 7);
    do
    {
      unint64_t v10 = *(unsigned int **)(v9 + 8 * v8 + 8);
      uint64_t v11 = v10[4];
      uint64_t v12 = 8 * v11;
      if (v11)
      {
        if ((v12 & 0x80000000) != 0) {
          uint64_t v13 = 11;
        }
        else {
          uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v13 + v12;
      v10[8] = v12;
      v10[9] = v14;
      v7 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  uint64_t v15 = *((unsigned int *)this + 16);
  uint64_t v16 = 8 * v15;
  if (v15)
  {
    if ((v16 & 0x80000000) != 0) {
      uint64_t v17 = 11;
    }
    else {
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v7 += v17;
  }
  *((_DWORD *)this + 2CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v16;
  uint64_t v18 = v7 + v16;
  uint64_t v19 = *((unsigned int *)this + 22);
  uint64_t v20 = 8 * v19;
  if (v19)
  {
    if ((v20 & 0x80000000) != 0) {
      uint64_t v21 = 11;
    }
    else {
      uint64_t v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v18 += v21;
  }
  *((_DWORD *)this + 26) = v20;
  uint64_t v22 = v18 + v20;
  uint64_t v23 = *((unsigned int *)this + 28);
  uint64_t v24 = 8 * v23;
  if (v23)
  {
    if ((v24 & 0x80000000) != 0) {
      uint64_t v25 = 11;
    }
    else {
      uint64_t v25 = ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v22 += v25;
  }
  *((_DWORD *)this + 32) = v24;
  uint64_t v26 = v22 + v24;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    uint64_t v27 = (CoreML::Specification::Kernel *)*((void *)this + 17);
    if (v27)
    {
      uint64_t v28 = CoreML::Specification::Kernel::ByteSizeLong(v27);
      v26 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  int v29 = *((_DWORD *)this + 41);
  if (v29 == 4)
  {
    uint64_t v30 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 18));
  }
  else
  {
    if (v29 != 3) {
      goto LABEL_37;
    }
    uint64_t v30 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 18));
  }
  v26 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_37:
  int v31 = *((_DWORD *)this + 42);
  if (v31 == 101)
  {
    uint64_t v32 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 19));
    goto LABEL_41;
  }
  if (v31 == 100)
  {
    uint64_t v32 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 19));
LABEL_41:
    v26 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 4CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v26;
  return v26;
}

std::string *CoreML::Specification::SupportVectorClassifier::MergeFrom(std::string *this, const CoreML::Specification::SupportVectorClassifier *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v3 + 16), *(_DWORD *)(v3 + 16) + v5);
    this = (std::string *)memcpy((void *)(*(void *)(v3 + 24) + 4 * *(int *)(v3 + 16) + 8), (const void *)(*((void *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
  }
  unsigned int v6 = *((_DWORD *)a2 + 12);
  if (v6)
  {
    uint64_t v7 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((void *)a2 + 7) + 8);
    int v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), *((_DWORD *)a2 + 12));
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>((unint64_t *)(v3 + 40), (CoreML::Specification::GLMRegressor_DoubleArray **)v8, v7, v6, **(_DWORD **)(v3 + 56) - *(_DWORD *)(v3 + 48));
    signed int v9 = *(_DWORD *)(v3 + 48) + v6;
    *(_DWORD *)(v3 + 48) = v9;
    unint64_t v10 = *(signed int **)(v3 + 56);
    if (*v10 < v9) {
      signed int *v10 = v9;
    }
  }
  int v11 = *((_DWORD *)a2 + 16);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 64), *(_DWORD *)(v3 + 64) + v11);
    this = (std::string *)memcpy((void *)(*(void *)(v3 + 72) + 8 * *(int *)(v3 + 64) + 8), (const void *)(*((void *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
  }
  int v12 = *((_DWORD *)a2 + 22);
  if (v12)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 88), *(_DWORD *)(v3 + 88) + v12);
    this = (std::string *)memcpy((void *)(*(void *)(v3 + 96) + 8 * *(int *)(v3 + 88) + 8), (const void *)(*((void *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    *(_DWORD *)(v3 + 88) += *((_DWORD *)a2 + 22);
  }
  int v13 = *((_DWORD *)a2 + 28);
  if (v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 112), *(_DWORD *)(v3 + 112) + v13);
    this = (std::string *)memcpy((void *)(*(void *)(v3 + 120) + 8 * *(int *)(v3 + 112) + 8), (const void *)(*((void *)a2 + 15) + 8), 8 * *((int *)a2 + 28));
    *(_DWORD *)(v3 + 112) += *((_DWORD *)a2 + 28);
  }
  if (a2 != (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_
    && *((void *)a2 + 17))
  {
    uint64_t v14 = *(std::string **)(v3 + 136);
    if (!v14) {
      operator new();
    }
    this = CoreML::Specification::Kernel::MergeFrom(v14, *((const CoreML::Specification::Kernel **)a2 + 17));
  }
  int v15 = *((_DWORD *)a2 + 41);
  if (v15 == 4)
  {
    if (*(_DWORD *)(v3 + 164) != 4)
    {
      CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 164) = 4;
      operator new();
    }
    this = CoreML::Specification::DenseSupportVectors::MergeFrom(*(std::string **)(v3 + 144), *((const CoreML::Specification::DenseSupportVectors **)a2 + 18));
  }
  else if (v15 == 3)
  {
    if (*(_DWORD *)(v3 + 164) != 3)
    {
      CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v3);
      *(_DWORD *)(v3 + 164) = 3;
      operator new();
    }
    this = CoreML::Specification::SparseSupportVectors::MergeFrom(*(std::string **)(v3 + 144), *((const CoreML::Specification::SparseSupportVectors **)a2 + 18));
  }
  int v16 = *((_DWORD *)a2 + 42);
  if (v16 == 101)
  {
    if (*(_DWORD *)(v3 + 168) != 101)
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 101;
      operator new();
    }
    uint64_t v18 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 19);
    uint64_t v20 = *(unint64_t **)(v3 + 152);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v20, v18);
  }
  else if (v16 == 100)
  {
    if (*(_DWORD *)(v3 + 168) != 100)
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 168) = 100;
      operator new();
    }
    uint64_t v17 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 19);
    uint64_t v19 = *(std::string **)(v3 + 152);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v19, v17);
  }
  return this;
}

void sub_224246A80(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::IsInitialized(CoreML::Specification::SupportVectorClassifier *this)
{
  return 1;
}

void *CoreML::Specification::SupportVectorClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorClassifier");
}

void CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this)
{
}

void CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this)
{
}

void CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this)
{
}

void CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this)
{
}

void CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this)
{
}

void CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this)
{
}

void CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this)
{
}

void CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this)
{
}

void CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this)
{
}

void CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this)
{
}

void CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this)
{
}

void CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this)
{
}

void CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this)
{
}

uint64_t CoreML::Specification::SupportVectorClassifier::GetCachedSize(CoreML::Specification::SupportVectorClassifier *this)
{
  return *((unsigned int *)this + 40);
}

CoreML::Specification::SparseNode *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SparseNode **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unsigned int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::SparseNode::SparseNode(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_224246C60(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::SparseVector *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SparseVector **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unsigned int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::SparseVector::SparseVector(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_224246DAC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::DenseVector *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::DenseVector **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unsigned int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::DenseVector::DenseVector(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_224246EF8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::Coefficients *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::Coefficients **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unsigned int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::Coefficients::Coefficients(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_224247044(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        unsigned int v6 = (uint64_t *)(*(void *)(v4 + 32) + 8);
        do
        {
          uint64_t v7 = *v6++;
          *(_DWORD *)(v7 + 24) = 0;
          *(void *)(v7 + 16) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
    }
    while (v2 != v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::SparseNode **a3, unsigned int a4, unsigned int a5)
{
  signed int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      int v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = (CoreML::Specification::SparseNode **)&a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::SparseNode::SparseNode(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_224247328(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(CoreML::Specification::SparseNode *a1, std::string *this)
{
  return CoreML::Specification::SparseNode::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::SparseVector **a3, unsigned int a4, unsigned int a5)
{
  signed int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      int v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = (CoreML::Specification::SparseVector **)&a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::SparseVector::SparseVector(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_224247494(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(CoreML::Specification::SparseVector *a1, std::string *this)
{
  return CoreML::Specification::SparseVector::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(unint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, unsigned int a4, unsigned int a5)
{
  signed int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      int v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::DenseVector::DenseVector(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_22424762C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>(unint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, unsigned int a4, unsigned int a5)
{
  signed int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      int v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::Coefficients::Coefficients(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2242477E0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void turi::configure_global_environment(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  BOOL v2 = turi::fs_util::upgrade_file_handle_limit((turi::fs_util *)0x1000);
  file_handle_limit = (cppipc *)turi::fs_util::get_file_handle_limit((turi::fs_util *)v2);
  int v4 = (int)file_handle_limit;
  if ((int)file_handle_limit <= 4095)
  {
    file_handle_limit = (cppipc *)global_logger();
    if (*((int *)file_handle_limit + 169) <= 5)
    {
      if (cppipc::must_cancel(file_handle_limit)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v5 = (file_logger *)global_logger();
      started = file_logger::start_stream(v5, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/startup_teardown/startup_teardown.cpp", "configure_global_environment", 115, 1);
      uint64_t v7 = pthread_getspecific(*((void *)started + 74));
      if (v7 && *((unsigned char *)v7 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Unable to raise the file handle limit to 4096. ", 47);
      }
      uint64_t v8 = pthread_getspecific(*((void *)started + 74));
      if (v8 && *((unsigned char *)v8 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Current file handle limit = ", 28);
      }
      uint64_t v9 = file_logger::operator<<<int>((uint64_t)started);
      uint64_t v10 = pthread_getspecific(*(void *)(v9 + 592));
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)". ", 2);
      }
      int v11 = pthread_getspecific(*(void *)(v9 + 592));
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"You may be limited to frames with about ", 40);
      }
      uint64_t v12 = file_logger::operator<<<int>(v9);
      int v13 = pthread_getspecific(*(void *)(v12 + 592));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" columns", 8);
      }
      file_handle_limit = (cppipc *)pthread_getspecific(*(void *)(v12 + 592));
      if (file_handle_limit)
      {
        if (*((unsigned char *)file_handle_limit + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)file_handle_limit
                                                      + *(void *)(*((void *)file_handle_limit + 2) - 24)
                                                      + 16));
          uint64_t v14 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
          std::locale::~locale(&v35);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v12);
          if (*(_DWORD *)(v12 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
  }
  LODWORD(v15) = 3 * (v4 >> 2);
  if (v4 <= 511) {
    uint64_t v15 = 128;
  }
  else {
    uint64_t v15 = v15;
  }
  turi::SFRAME_FILE_HANDLE_POOL_SIZE = v15;
  turi::SFRAME_DEFAULT_NUM_SEGMENTS = turi::thread::cpu_count(file_handle_limit);
  turi::SFRAME_MAX_BLOCKS_IN_CACHE = 16 * turi::thread::cpu_count((turi::thread *)turi::SFRAME_DEFAULT_NUM_SEGMENTS);
  if (turi::SFRAME_SORT_MAX_SEGMENTS <= (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE >> 2) {
    unint64_t v16 = (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE >> 2;
  }
  else {
    unint64_t v16 = turi::SFRAME_SORT_MAX_SEGMENTS;
  }
  turi::SFRAME_SORT_MAX_SEGMENTS = v16;
  unint64_t v17 = total_mem();
  turi::getenv_str((turi *)"DISABLE_MEMORY_AUTOTUNE", (uint64_t)&v35);
  if (!LOBYTE(v35.__locale_)) {
    goto LABEL_35;
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v36;
  }
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) == 1)
    {
      BOOL v18 = v33.__r_.__value_.__s.__data_[0] == 49;
      goto LABEL_40;
    }
LABEL_35:
    BOOL v18 = 0;
    goto LABEL_40;
  }
  BOOL v18 = v33.__r_.__value_.__l.__size_ == 1 && *v33.__r_.__value_.__l.__data_ == 49;
  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_40:
  turi::getenv_str((turi *)"TURI_MEMORY_LIMIT_IN_MB", (uint64_t)&v33);
  boost::optional_detail::optional_base<std::string>::assign((uint64_t)&v35, (uint64_t)&v33);
  unint64_t v19 = v17 >> 1;
  if (v33.__r_.__value_.__s.__data_[0] && v34 < 0) {
    operator delete((void *)v33.__r_.__value_.__l.__size_);
  }
  if (LOBYTE(v35.__locale_))
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v36;
    }
    else {
      uint64_t v20 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    uint64_t v21 = atoll((const char *)v20);
    if (v21)
    {
      unint64_t v19 = v21 << 20;
    }
    else
    {
      uint64_t v22 = (int *)global_logger();
      if (v22[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v22)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v23 = (file_logger *)global_logger();
        uint64_t v24 = file_logger::start_stream(v23, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/startup_teardown/startup_teardown.cpp", "configure_global_environment", 149, 1);
        uint64_t v25 = pthread_getspecific(*((void *)v24 + 74));
        if (v25 && *((unsigned char *)v25 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"TURI_MEMORY_LIMIT_IN_MB environment variable cannot be parsed", 61);
        }
        uint64_t v26 = pthread_getspecific(*((void *)v24 + 74));
        if (v26)
        {
          if (*((unsigned char *)v26 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v26[2] - 24) + 16));
            uint64_t v27 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
            std::locale::~locale((std::locale *)&v33);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v24);
            if (*((_DWORD *)v24 + 150) == 7)
            {
              __print_back_trace();
              int v31 = __cxa_allocate_exception(8uLL);
              void *v31 = "LOG_FATAL encountered";
              __cxa_throw(v31, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
    }
  }
  if (v19) {
    char v28 = v18;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    turi::SFRAME_GROUPBY_BUFFER_NUM_ROWS = v19 / 0x500;
    turi::SFRAME_JOIN_BUFFER_NUM_CELLS = v19 >> 8;
    turi::sframe_config::SFRAME_SORT_BUFFER_SIZE = v19 >> 2;
    turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE = v19 >> 1;
    turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY = v19 >> 1;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  int v29 = turi::globals::initialize_globals_from_environment((turi::globals *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  turi::random::get_source((turi::random *)v29);
  if (LOBYTE(v35.__locale_))
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224247DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (LOBYTE(a21.__locale_))
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *turi::global_startup::perform_startup(unsigned char *this)
{
  if (!*this)
  {
    *this = 1;
    {
      {
        Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2246E7700;
        qword_268067410 = 0x80000;
      }
    }
    operator new();
  }
  return this;
}

void *turi::global_startup::get_instance(turi::global_startup *this)
{
  return &turi::startup_impl::startup_instance;
}

void boost::optional_detail::optional_base<std::string>::assign(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      int v4 = (long long *)(a2 + 8);
      uint64_t v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v5);
      }
      long long v6 = *v4;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v5 = v6;
      *(unsigned char *)(a2 + 31) = 0;
      *(unsigned char *)(a2 + 8) = 0;
    }
    else
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      *(unsigned char *)a1 = 0;
    }
  }
  else if (*(unsigned char *)a2)
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)a1 = 1;
  }
}

__CFString *DevicePolicyToString(uint64_t a1)
{
  if (a1 == 1) {
    return @"cpu";
  }
  else {
    return @"auto";
  }
}

uint64_t DevicePolicyFromString(void *a1)
{
  return [a1 isEqualToString:@"cpu"];
}

void boost::throw_exception<boost::system::system_error>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::error_info_injector<boost::system::system_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_22424808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  a15 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v17 + 64));
  boost::system::system_error::~system_error(&a9);
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 56) = &unk_26D754388;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(void *)a1 = &unk_26D773BA8;
  *(void *)(a1 + 56) = &unk_26D773BE0;
  *(void *)(a1 + 96) = &unk_26D773C18;
  uint64_t v13 = 0;
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 40))(&v12);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v13, v12);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v12);
    uint64_t v10 = v13;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 64), v10);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v13);
  return a1;
}

{
  std::runtime_error *v4;
  std::string *v5;
  long long v6;
  uint64_t v7;
  long long v8;

  *(void *)(a1 + 96) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26D754388;
  *(void *)(a1 + 64) = v7;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(void *)a1 = &unk_26D773BA8;
  *(void *)(a1 + 56) = &unk_26D773BE0;
  *(void *)(a1 + 96) = &unk_26D773C18;
  return a1;
}

void sub_2242482BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::runtime_error::~runtime_error(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone()
{
}

void sub_224248368(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C403E1ED767);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2242483D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::rethrow(void *a1)
{
}

void sub_224248574(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::system::system_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_26D773C48;
  *(void *)(a1 + 56) = &unk_26D773C70;
  return a1;
}

void sub_224248660(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::system::error_category::default_error_condition(boost::system::error_category *this, unsigned int a2)
{
  return a2;
}

BOOL boost::system::error_category::equivalent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return *(void *)(a3 + 8) == v5 && *(_DWORD *)a3 == v4;
}

BOOL boost::system::error_category::equivalent(uint64_t a1, uint64_t a2, int a3)
{
  return *(void *)(a2 + 8) == a1 && *(_DWORD *)a2 == a3;
}

void boost::system::error_category::std_category::~std_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::system::error_category::std_category::name(boost::system::error_category::std_category *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t boost::system::error_category::std_category::default_error_condition(boost::system::error_category::std_category *this)
{
  return (*(unsigned int (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
}

uint64_t boost::system::error_category::std_category::equivalent(boost::system::error_category::std_category *this, uint64_t a2, const std::error_condition *a3)
{
  cat = (boost::system::error_category::std_category *)a3->__cat_;
  if (cat == this)
  {
    int v11 = (uint64_t *)*((void *)this + 1);
    int val = a3->__val_;
    uint64_t v17 = v11;
    return (*(uint64_t (**)(uint64_t *, uint64_t, int *))(*v11 + 40))(v11, a2, &val);
  }
  uint64_t v7 = (boost::system::detail *)std::generic_category();
  if (cat == v7
    || (long long v8 = a3->__cat_,
        uint64_t v7 = (boost::system::detail *)boost::system::detail::generic_category_ncx(v7),
        v8 == (const std::error_category *)((char *)v7 + 8)))
  {
    int val = a3->__val_;
    uint64_t v17 = boost::system::detail::generic_category_ncx(v7);
    goto LABEL_7;
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)v9[1];
    int val = a3->__val_;
    uint64_t v17 = v10;
LABEL_7:
    int v11 = (uint64_t *)*((void *)this + 1);
    return (*(uint64_t (**)(uint64_t *, uint64_t, int *))(*v11 + 40))(v11, a2, &val);
  }
  int v13 = (*(uint64_t (**)(boost::system::error_category::std_category *, uint64_t))(*(void *)this + 24))(this, a2);
  return a3->__cat_ == v14 && a3->__val_ == v13;
}

uint64_t boost::system::error_category::std_category::equivalent(boost::system::error_category::std_category *this, const std::error_code *a2, uint64_t a3)
{
  cat = (boost::system::error_category::std_category *)a2->__cat_;
  if (cat == this)
  {
    int v11 = (uint64_t *)*((void *)this + 1);
    int val = a2->__val_;
    int v16 = v11;
    return (*(uint64_t (**)(uint64_t *, int *, uint64_t))(*v11 + 48))(v11, &val, a3);
  }
  uint64_t v7 = (boost::system::detail *)std::generic_category();
  if (cat == v7
    || (long long v8 = a2->__cat_,
        uint64_t v7 = (boost::system::detail *)boost::system::detail::generic_category_ncx(v7),
        v8 == (const std::error_category *)((char *)v7 + 8)))
  {
    int val = a2->__val_;
    int v16 = boost::system::detail::generic_category_ncx(v7);
    goto LABEL_7;
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)v9[1];
    int val = a2->__val_;
    int v16 = v10;
LABEL_7:
    int v11 = (uint64_t *)*((void *)this + 1);
    return (*(uint64_t (**)(uint64_t *, int *, uint64_t))(*v11 + 48))(v11, &val, a3);
  }
  int v13 = (uint64_t *)*((void *)this + 1);
  if (v13 != boost::system::detail::generic_category_ncx(0)) {
    return 0;
  }
  equivalent_0 = (uint64_t (*)(void))std::generic_category()->equivalent_0;
  return equivalent_0();
}

uint64_t boost::system::error_category::std_category::message(boost::system::error_category::std_category *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

void boost::filesystem::directory_iterator::~directory_iterator(atomic_uint **this)
{
}

boost::system::detail *boost::filesystem::detail::symlink_status@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  uint64_t v4 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t result = (boost::system::detail *)lstat((const char *)a1, &v17);
  if (result)
  {
    if (a2)
    {
      uint64_t v7 = (boost::system::detail *)__error();
      int v8 = *(_DWORD *)v7;
      uint64_t v9 = boost::system::detail::system_category_ncx(v7);
      *(_DWORD *)a2 = v8;
      *(void *)(a2 + 8) = v9;
    }
    uint64_t result = (boost::system::detail *)__error();
    if (*(_DWORD *)result == 2)
    {
      int v10 = 0;
      int v11 = 1;
    }
    else
    {
      uint64_t result = (boost::system::detail *)__error();
      int v11 = *(_DWORD *)result == 20;
      if (*(_DWORD *)result == 20) {
        int v10 = 0;
      }
      else {
        int v10 = 0xFFFF;
      }
      if (*(_DWORD *)result != 20 && !a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(&v16, "boost::filesystem::status");
        int v13 = __error();
        uint64_t v14 = (std::runtime_error_vtbl *)*v13;
        uint64_t v15 = boost::system::detail::system_category_ncx((boost::system::detail *)v13);
        boost::filesystem::filesystem_error::filesystem_error(exception, &v16, v4, v14, (const char *)v15);
      }
    }
  }
  else
  {
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      uint64_t result = (boost::system::detail *)boost::system::detail::system_category_ncx(result);
      *(void *)(a2 + 8) = result;
    }
    int v10 = 0xFFFF;
    int v11 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 7;
        break;
      case 1u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 6;
        break;
      case 3u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 3;
        break;
      case 5u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 5;
        break;
      case 7u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 2;
        break;
      case 9u:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 4;
        break;
      case 0xBu:
        int v10 = v17.st_mode & 0xFFF;
        int v11 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v11;
  a3[1] = v10;
  return result;
}

void sub_224248C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t *anonymous namespace'::error(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  if (result)
  {
    unsigned int v6 = result;
    if (!a4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
      uint64_t v9 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v13, a5);
      int v10 = boost::system::detail::system_category_ncx(v9);
      boost::filesystem::filesystem_error::filesystem_error(exception, &v13, a2, a3, (std::runtime_error_vtbl *)v6, (const char *)v10);
    }
    uint64_t result = boost::system::detail::system_category_ncx((boost::system::detail *)result);
    *(_DWORD *)a4 = v6;
  }
  else
  {
    if (!a4) {
      return result;
    }
    *(_DWORD *)a4 = 0;
    uint64_t result = boost::system::detail::system_category_ncx((boost::system::detail *)result);
  }
  *(void *)(a4 + 8) = result;
  return result;
}

void sub_224248D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::filesystem::detail::create_symlink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  unsigned int v6 = (uint64_t *)symlink((const char *)a1, (const char *)a2);
  if (v6) {
    unsigned int v6 = (uint64_t *)*__error();
  }
}

uint64_t boost::filesystem::detail::create_directories(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4)
  {
    if (!a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
      uint64_t v21 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&__p, "boost::filesystem::create_directories");
      uint64_t v22 = boost::system::detail::generic_category_ncx(v21);
      boost::filesystem::filesystem_error::filesystem_error(exception, &__p, a1, (std::runtime_error_vtbl *)0x16, (const char *)v22);
    }
    unsigned int v6 = boost::system::detail::generic_category_ncx((boost::system::detail *)a1);
    uint64_t v7 = 0;
    *(_DWORD *)a2 = 22;
LABEL_34:
    *(void *)(a2 + 8) = v6;
    return v7;
  }
  boost::filesystem::path::filename((boost::filesystem::path *)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 1)
    {
      int v8 = *__p.__r_.__value_.__l.__data_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v8 == 46) {
        goto LABEL_30;
      }
    }
    else
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 46)
  {
    goto LABEL_30;
  }
  uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  unsigned int v10 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    if (v11 <= 1) {
      goto LABEL_31;
    }
  }
  else
  {
    if (v10 < 2) {
      goto LABEL_31;
    }
    unint64_t v11 = *(unsigned __int8 *)(a1 + 23);
  }
  unint64_t v12 = v11 - 1;
  if ((v10 & 0x80) != 0)
  {
    if (*(unsigned char *)(*(void *)a1 + v12) != 46) {
      goto LABEL_31;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  else
  {
    if (*(unsigned char *)(a1 + v12) != 46) {
      goto LABEL_31;
    }
    uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
  }
  uint64_t v14 = v13 - 2;
  if ((v10 & 0x80) == 0)
  {
    if (*(unsigned char *)(a1 + v14) != 46) {
      goto LABEL_31;
    }
    if (v10 != 2)
    {
      uint64_t v15 = a1;
      goto LABEL_29;
    }
LABEL_30:
    boost::filesystem::path::parent_path((boost::filesystem::path *)a1, &__p);
    uint64_t directory = boost::filesystem::detail::create_directories(&__p, a2);
    goto LABEL_43;
  }
  uint64_t v15 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + v14) != 46) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 == 2) {
    goto LABEL_30;
  }
LABEL_29:
  if (*(unsigned char *)(v9 + v15 - 3) == 47) {
    goto LABEL_30;
  }
LABEL_31:
  LODWORD(v27) = 0;
  *((void *)&v27 + boost::detail::shared_count::~shared_count(this + 1) = boost::system::detail::system_category_ncx(v5);
  stat v17 = (boost::system::detail *)boost::filesystem::detail::status(a1, (uint64_t)&v27, &v26);
  if (v26 == 3)
  {
    if (!a2) {
      return 0;
    }
    *(_DWORD *)a2 = 0;
    unsigned int v6 = boost::system::detail::system_category_ncx(v17);
    uint64_t v7 = 0;
    goto LABEL_34;
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)a1, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    boost::filesystem::detail::status((uint64_t)&__p, (uint64_t)&v27, &v25);
    if (v25 == 1)
    {
      boost::filesystem::detail::create_directories(&__p, &v27);
      if (v27)
      {
        if (!a2)
        {
          uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
          std::string::basic_string[abi:ne180100]<0>(&v24, "boost::filesystem::create_directories");
          boost::filesystem::filesystem_error::filesystem_error(v23, &v24, (uint64_t)&__p, (std::runtime_error_vtbl *)v27, *((const char **)&v27 + 1));
        }
        uint64_t v7 = 0;
        *(_OWORD *)a2 = v27;
        goto LABEL_44;
      }
    }
  }
  uint64_t directory = boost::filesystem::detail::create_directory(a1, a2);
LABEL_43:
  uint64_t v7 = directory;
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_22424913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::detail::create_directory(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t v4 = mkdir((const char *)a1, 0x1FFu);
  int v5 = v4;
  if (v4)
  {
    unsigned int v6 = __error();
    uint64_t v7 = (std::runtime_error_vtbl *)*v6;
    int v14 = 0;
    uint64_t v15 = boost::system::detail::system_category_ncx((boost::system::detail *)v6);
    uint64_t v4 = boost::filesystem::detail::status(v3, (uint64_t)&v14, &v13);
    if (LODWORD(v13.__r_.__value_.__l.__data_) != 3)
    {
      if (!a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
        unint64_t v11 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v13, "boost::filesystem::create_directory");
        unint64_t v12 = boost::system::detail::system_category_ncx(v11);
        boost::filesystem::filesystem_error::filesystem_error(exception, &v13, v3, v7, (const char *)v12);
      }
      int v8 = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
      *(_DWORD *)a2 = v7;
      goto LABEL_9;
    }
  }
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    int v8 = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
LABEL_9:
    *(void *)(a2 + 8) = v8;
  }
  return v5 == 0;
}

void sub_2242492A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL anonymous namespace'::error(boost::system::detail *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unsigned int v5 = a1;
  if (a1)
  {
    if (!a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
      unsigned int v10 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v13, a4);
      unint64_t v11 = boost::system::detail::system_category_ncx(v10);
      boost::filesystem::filesystem_error::filesystem_error(exception, &v13, a2, (std::runtime_error_vtbl *)v5, (const char *)v11);
    }
    unsigned int v6 = boost::system::detail::system_category_ncx(a1);
    *(_DWORD *)a3 = v5;
    goto LABEL_6;
  }
  if (a3)
  {
    *(_DWORD *)a3 = 0;
    unsigned int v6 = boost::system::detail::system_category_ncx(a1);
LABEL_6:
    *(void *)(a3 + 8) = v6;
  }
  return v5 != 0;
}

void sub_22424938C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::detail::remove(boost::system::detail *a1, uint64_t a2)
{
  unsigned int v8 = 0;
  uint64_t v9 = boost::system::detail::system_category_ncx(a1);
  boost::filesystem::detail::symlink_status((uint64_t)a1, (uint64_t)&v8, &v10);
  int v4 = v10;
  if (v10) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = (boost::system::detail *)v8;
  }
  BOOL result = 0;
  if (!v6) {
  return result;
  }
}

BOOL anonymous namespace'::remove_file_or_directory(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a2 == 3)
  {
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    uint64_t v7 = (boost::system::detail *)rmdir((const char *)a1);
    if (v7)
    {
LABEL_12:
      unsigned int v8 = __error();
        uint64_t v7 = 0;
      else {
        uint64_t v7 = (boost::system::detail *)*__error();
      }
    }
  }
  else
  {
    if (a2 == 1)
    {
      if (a3)
      {
        *(_DWORD *)a3 = 0;
        unsigned int v5 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
        BOOL result = 0;
        *(void *)(a3 + 8) = v5;
        return result;
      }
      return 0;
    }
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    uint64_t v7 = (boost::system::detail *)unlink((const char *)a1);
    if (v7) {
      goto LABEL_12;
    }
  }
}

uint64_t boost::filesystem::detail::remove_all(boost::system::detail *a1, uint64_t a2)
{
  unsigned int v8 = 0;
  uint64_t v9 = boost::system::detail::system_category_ncx(a1);
  boost::filesystem::detail::symlink_status((uint64_t)a1, (uint64_t)&v8, (int *)&v10);
  unsigned int v4 = v10;
  if (v10) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = (boost::system::detail *)v8;
  }
  uint64_t result = 0;
  if (v4 >= 2 && !v6) {
  return result;
  }
}

uint64_t anonymous namespace'::remove_all_aux(const boost::filesystem::path *a1, int a2, uint64_t a3)
{
  if (a2 == 3)
  {
    void v4[2] = 0;
    v4[3] = 0;
    if (a3) {
      boost::filesystem::directory_iterator::directory_iterator();
    }
    boost::filesystem::directory_iterator::directory_iterator((boost::filesystem::directory_iterator *)v4, a1);
  }
  return 1;
}

void sub_22424974C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::detail::status@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  BOOL v6 = (boost::system::detail *)stat((const char *)a1, &v18);
  if (v6)
  {
    if (a2)
    {
      uint64_t v7 = (boost::system::detail *)__error();
      int v8 = *(_DWORD *)v7;
      uint64_t v9 = boost::system::detail::system_category_ncx(v7);
      *(_DWORD *)a2 = v8;
      *(void *)(a2 + 8) = v9;
    }
    unsigned int v10 = __error();
    if (result) {
      int v12 = 0;
    }
    else {
      int v12 = 0xFFFF;
    }
    if ((result & 1) == 0 && !a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v17, "boost::filesystem::status");
      int v14 = __error();
      uint64_t v15 = (std::runtime_error_vtbl *)*v14;
      int v16 = boost::system::detail::system_category_ncx((boost::system::detail *)v14);
      boost::filesystem::filesystem_error::filesystem_error(exception, &v17, v4, v15, (const char *)v16);
    }
  }
  else
  {
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = boost::system::detail::system_category_ncx(v6);
    }
    int v12 = 0xFFFF;
    uint64_t result = 10;
    switch(((v18.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 7;
        break;
      case 1u:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 6;
        break;
      case 3u:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 3;
        break;
      case 5u:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 5;
        break;
      case 7u:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 2;
        break;
      case 0xBu:
        int v12 = v18.st_mode & 0xFFF;
        uint64_t result = 8;
        break;
      default:
        break;
    }
  }
  *a3 = result;
  a3[1] = v12;
  return result;
}

void sub_2242498F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL anonymous namespace'::not_found_error(_anonymous_namespace_ *this)
{
  return *__error() == 2 || *__error() == 20;
}

double boost::filesystem::directory_entry::m_get_status@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (a1[6]) {
    BOOL v5 = a1[7] == 0xFFFF;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v6 = a1[8];
    int v7 = a1[9];
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      boost::filesystem::detail::status((uint64_t)a1, a2, &v10);
      *((void *)a1 + 3) = v10;
      goto LABEL_14;
    }
    a1[6] = v6;
    a1[7] = v7;
  }
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  }
LABEL_14:
  double result = *((double *)a1 + 3);
  *a3 = result;
  return result;
}

boost::system::detail *boost::filesystem::directory_entry::m_get_symlink_status@<X0>(boost::system::detail *result@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  uint64_t v4 = result;
  int v6 = *((_DWORD *)result + 8);
  int v7 = *((_DWORD *)result + 9);
  if (v6) {
    BOOL v8 = v7 == 0xFFFF;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    double result = boost::filesystem::detail::symlink_status((uint64_t)result, a2, v9);
    int v6 = v9[0];
    int v7 = v9[1];
    *((_DWORD *)v4 + 8) = v9[0];
    *((_DWORD *)v4 + 9) = v7;
  }
  else if (a2)
  {
    *(_DWORD *)a2 = 0;
    double result = (boost::system::detail *)boost::system::detail::system_category_ncx(result);
    *(void *)(a2 + 8) = result;
    int v6 = *((_DWORD *)v4 + 8);
    int v7 = *((_DWORD *)v4 + 9);
  }
  *a3 = v6;
  a3[1] = v7;
  return result;
}

unint64_t boost::filesystem::detail::dir_itr_close(DIR **this, void **a2, void **a3)
{
  free(*a2);
  *a2 = 0;
  BOOL v5 = *this;
  if (*this)
  {
    *this = 0;
    int v6 = (int *)closedir(v5);
    if (v6)
    {
      int v6 = __error();
      unsigned int v7 = *v6;
    }
    else
    {
      unsigned int v7 = 0;
    }
    boost::system::detail::system_category_ncx((boost::system::detail *)v6);
    unint64_t v8 = 0;
  }
  else
  {
  }
  return v8 | v7;
}

void boost::filesystem::detail::directory_iterator_construct(boost::system::detail *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6) {
    unsigned int v7 = 0;
  }
  else {
    return;
  }
  memset(v24, 0, 7);
  std::string::size_type v8 = *(void *)a1;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v9 = (const char *)a2;
  }
  else {
    uint64_t v9 = *(const char **)a2;
  }
  uint64_t v10 = opendir(v9);
  *(void *)(v8 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v10;
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, ".");
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
    std::string::size_type v11 = v25.__r_.__value_.__r.__words[0];
    v24[0] = v25.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[2] + 3);
    unsigned int v13 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    {
      *(void *)(v8 + 48) = malloc_type_malloc(0x419uLL, 0xB46CB279uLL);
    }
    if (v14) {
      goto LABEL_14;
    }
  }
  else
  {
    int v16 = __error();
    unint64_t v14 = *v16;
    boost::system::detail::system_category_ncx((boost::system::detail *)v16);
    unsigned int v13 = 0;
    std::string::size_type size = 0;
    std::string::size_type v11 = 0;
    if (v14)
    {
LABEL_14:
      long long v15 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = 0;
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v25.__r_.__value_.__l.__size_);
      goto LABEL_15;
    }
  }
  std::string::size_type v17 = *(void *)a1;
  if (!*(void *)(*(void *)a1 + 40))
  {
    std::string::size_type v18 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = 0;
    v25.__r_.__value_.__r.__words[0] = v17;
    v25.__r_.__value_.__l.__size_ = v18;
    boost::detail::shared_count::~shared_count((atomic_uint **)&v25.__r_.__value_.__l.__size_);
    goto LABEL_15;
  }
  if ((v13 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)v11, size);
  }
  else
  {
    v22.__r_.__value_.__r.__words[0] = v11;
    v22.__r_.__value_.__l.__size_ = size;
    LODWORD(v22.__r_.__value_.__r.__words[2]) = v24[0];
    *(_DWORD *)((char *)&v22.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = v13;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v25 = *(std::string *)a2;
  }
  unint64_t v19 = boost::filesystem::path::operator/=(&v25, &v22);
  if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19->__r_.__value_.__l.__data_, v19->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)v17, &__str);
  *(void *)&long long v21 = 0xFFFF00000000;
  *((void *)&v21 + boost::detail::shared_count::~shared_count(this + 1) = 0xFFFF00000000;
  *(_OWORD *)(v17 + 24) = v21;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((v13 & 0x80) != 0)
  {
    if (*(unsigned char *)v11 == 46)
    {
      if (size == 1) {
        goto LABEL_45;
      }
      if (*(unsigned char *)(v11 + 1) == 46)
      {
LABEL_44:
        if (size != 2) {
          goto LABEL_15;
        }
        goto LABEL_45;
      }
    }
LABEL_16:
    operator delete((void *)v11);
    return;
  }
  if (v11 != 46) {
    return;
  }
  if (v13 == 1)
  {
LABEL_45:
    boost::filesystem::detail::directory_iterator_increment(a1, a3);
LABEL_15:
    if ((v13 & 0x80) == 0) {
      return;
    }
    goto LABEL_16;
  }
  if ((v11 & 0xFF00) == 0x2E00)
  {
    std::string::size_type size = v13;
    goto LABEL_44;
  }
}

void sub_224249E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::directory_iterator_increment(boost::system::detail *a1, uint64_t a2)
{
  memset(&__p, 0, sizeof(__p));
  boost::system::detail::system_category_ncx(a1);
  std::string::size_type v4 = *(void *)a1;
  BOOL v5 = *(DIR **)(*(void *)a1 + 40);
  while (1)
  {
    std::string::size_type v8 = *(dirent **)(v4 + 48);
    uint64_t v6 = (void **)(v4 + 48);
    unsigned int v7 = v8;
    v27.__r_.__value_.__r.__words[0] = 0;
    *__error() = 0;
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      v27.__r_.__value_.__r.__words[0] = 0;
      unsigned int v13 = readdir(v5);
      if (v13)
      {
        strcpy(v7->d_name, v13->d_name);
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        if (!v7) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      if (*__error())
      {
LABEL_4:
        uint64_t v10 = (boost::system::detail *)__error();
        int v11 = *(_DWORD *)v10;
        int v12 = (boost::system::detail *)boost::system::detail::system_category_ncx(v10);
        goto LABEL_11;
      }
    }
    else if (readdir_r(v5, v7, (dirent **)&v27))
    {
      goto LABEL_4;
    }
    if (!v27.__r_.__value_.__r.__words[0])
    {
LABEL_7:
      int v12 = (boost::system::detail *)boost::filesystem::detail::dir_itr_close((DIR **)v6 - 1, v6, v9);
      int v11 = (int)v12;
      goto LABEL_11;
    }
LABEL_10:
    int v12 = (boost::system::detail *)MEMORY[0x22A614700](&__p, v7->d_name);
LABEL_11:
    if (v11) {
      break;
    }
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = boost::system::detail::system_category_ncx(v12);
    }
    std::string::size_type v4 = *(void *)a1;
    BOOL v5 = *(DIR **)(*(void *)a1 + 40);
    if (!v5)
    {
      std::string::size_type v20 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = 0;
      v27.__r_.__value_.__r.__words[0] = v4;
      v27.__r_.__value_.__l.__size_ = v20;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v27.__r_.__value_.__l.__size_);
      goto LABEL_34;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v15 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
      if (*__p.__r_.__value_.__l.__data_ != 46) {
        goto LABEL_29;
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ != 1)
      {
        if (*(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 1) != 46) {
          goto LABEL_30;
        }
        goto LABEL_23;
      }
    }
    else
    {
      if (__p.__r_.__value_.__s.__data_[0] != 46) {
        goto LABEL_25;
      }
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
      {
        if (__p.__r_.__value_.__s.__data_[1] != 46) {
          goto LABEL_25;
        }
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_23:
        if (size != 2)
        {
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
LABEL_29:
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            long long v15 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
            std::string::__init_copy_ctor_external(&v27, v15, size);
          }
          else
          {
LABEL_25:
            std::string v27 = __p;
          }
          boost::filesystem::path::remove_filename((boost::filesystem::path *)v4);
          boost::filesystem::path::operator/=((std::string *)v4, &v27);
          *(void *)&long long v21 = 0xFFFF00000000;
          *((void *)&v21 + boost::detail::shared_count::~shared_count(this + 1) = 0xFFFF00000000;
          *(_OWORD *)(v4 + 24) = v21;
          goto LABEL_32;
        }
      }
    }
  }
  boost::filesystem::path::parent_path(*(boost::filesystem::path **)a1, &v27);
  long long v16 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  boost::detail::shared_count::~shared_count((atomic_uint **)&v26.__r_.__value_.__l.__size_);
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v26, "boost::filesystem::directory_iterator::operator++");
    uint64_t v23 = __error();
    std::string v24 = (std::runtime_error_vtbl *)*v23;
    std::string v25 = boost::system::detail::system_category_ncx((boost::system::detail *)v23);
    boost::filesystem::filesystem_error::filesystem_error(exception, &v26, (uint64_t)&v27, v24, (const char *)v25);
  }
  std::string::size_type v17 = (boost::system::detail *)__error();
  int v18 = *(_DWORD *)v17;
  unint64_t v19 = boost::system::detail::system_category_ncx(v17);
  *(_DWORD *)a2 = v18;
  *(void *)(a2 + 8) = v19;
LABEL_32:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22424A108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, const std::string *a2, uint64_t a3, std::runtime_error_vtbl *a4, const char *a5)
{
  a1[1].__vftable = a4;
  a1[1].__imp_.__imp_ = a5;
  a1[2].__imp_.__imp_ = 0;
  a1[3].__vftable = 0;
  a1[2].__vftable = 0;
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D75D1F0;
  a1[3].__imp_.__imp_ = 0;
  a1[4].__vftable = 0;
  operator new();
}

void sub_22424A234(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  __cxa_begin_catch(a1);
  long long v10 = *v9;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)&a9 + boost::detail::shared_count::~shared_count(this + 1) = *((void *)&v10 + 1);
  boost::detail::shared_count::~shared_count((atomic_uint **)&a9 + 1);
  __cxa_end_catch();
  JUMPOUT(0x22424A21CLL);
}

void boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, const std::string *a2, uint64_t a3, uint64_t a4, std::runtime_error_vtbl *a5, const char *a6)
{
  a1[1].__vftable = a5;
  a1[1].__imp_.__imp_ = a6;
  a1[2].__imp_.__imp_ = 0;
  a1[3].__vftable = 0;
  a1[2].__vftable = 0;
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D75D1F0;
  a1[3].__imp_.__imp_ = 0;
  a1[4].__vftable = 0;
  operator new();
}

void sub_22424A330(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  __cxa_begin_catch(a1);
  long long v10 = *v9;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)&a9 + boost::detail::shared_count::~shared_count(this + 1) = *((void *)&v10 + 1);
  boost::detail::shared_count::~shared_count((atomic_uint **)&a9 + 1);
  __cxa_end_catch();
  JUMPOUT(0x22424A314);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  std::string::size_type v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    long long v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    unint64_t v14 = this;
    if ((v6 & 0x80) != 0) {
      unint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_22424A4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::filesystem::path::operator/=(std::string *this, std::string *a2)
{
  std::string::size_type v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  char v4 = v3;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0) {
    std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  if (v6)
  {
    if (this == a2)
    {
      if ((char)v3 < 0) {
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      }
      else {
        std::string __p = *a2;
      }
      unsigned __int8 v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (p_p->__r_.__value_.__s.__data_[0] != 47)
      {
        boost::filesystem::path::m_append_separator_if_needed(a2);
        unsigned __int8 v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80u) == 0) {
        unint64_t v14 = &__p;
      }
      else {
        unint64_t v14 = (std::string *)v12;
      }
      if ((v11 & 0x80u) == 0) {
        std::string::size_type v15 = v11;
      }
      else {
        std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::size_type v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((v3 & 0x80u) == 0) {
        std::string::size_type v9 = a2;
      }
      else {
        std::string::size_type v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (v9->__r_.__value_.__s.__data_[0] != 47)
      {
        boost::filesystem::path::m_append_separator_if_needed(this);
        std::string::size_type v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        std::string::size_type v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
        char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v4 >= 0) {
        long long v10 = a2;
      }
      else {
        long long v10 = v8;
      }
      if (v4 >= 0) {
        std::string::size_type size = v3;
      }
      std::string::append(this, (const std::string::value_type *)v10, size);
    }
  }
  return this;
}

void sub_22424A5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::m_append_separator_if_needed(std::string *this)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return 0;
    }
    BOOL v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    BOOL v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

uint64_t boost::filesystem::path::compare(std::string *this, std::string *a2)
{
  boost::filesystem::path::begin(this, (uint64_t)v12);
  memset(v11, 0, 24);
  void v11[3] = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  void v11[4] = size;
  boost::filesystem::path::begin(a2, (uint64_t)__p);
  memset(v8, 0, 24);
  uint64_t v8[3] = a2;
  BOOL v5 = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)v5 < 0) {
    BOOL v5 = (void *)a2->__r_.__value_.__l.__size_;
  }
  void v8[4] = v5;
  uint64_t v6 = boost::filesystem::detail::lex_compare(v12, (uint64_t)v11, (const void **)__p, (uint64_t)v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete((void *)v12[0]);
  }
  return v6;
}

uint64_t boost::filesystem::detail::lex_compare(const void **a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  std::string::size_type v8 = *(const void **)(a2 + 24);
  std::string::size_type v9 = *(const void **)(a2 + 32);
  if (v6 == v8 && v7 == v9)
  {
LABEL_35:
    std::string::size_type v8 = v6;
    std::string::size_type v9 = v7;
  }
  else
  {
    while (a3[3] != *(const void **)(a4 + 24) || a3[4] != *(const void **)(a4 + 32))
    {
      int v14 = *((char *)a3 + 23);
      int v15 = *((char *)a1 + 23);
      if (v15 >= 0) {
        size_t v16 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v16 = (size_t)a1[1];
      }
      if (v15 >= 0) {
        std::string::size_type v17 = a1;
      }
      else {
        std::string::size_type v17 = *a1;
      }
      if (v14 >= 0) {
        size_t v18 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v18 = (size_t)a3[1];
      }
      if (v14 >= 0) {
        unint64_t v19 = a3;
      }
      else {
        unint64_t v19 = *a3;
      }
      if (v18 >= v16) {
        size_t v20 = v16;
      }
      else {
        size_t v20 = v18;
      }
      int v21 = memcmp(v17, v19, v20);
      BOOL v22 = v16 < v18;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22) {
        return 0xFFFFFFFFLL;
      }
      int v23 = memcmp(v19, v17, v20);
      BOOL v24 = v18 < v16;
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      if (v24) {
        return 1;
      }
      boost::filesystem::path::m_path_iterator_increment((std::string *)a1);
      boost::filesystem::path::m_path_iterator_increment((std::string *)a3);
      uint64_t v6 = a1[3];
      unint64_t v7 = a1[4];
      std::string::size_type v8 = *(const void **)(a2 + 24);
      std::string::size_type v9 = *(const void **)(a2 + 32);
      if (v6 == v8 && v7 == v9) {
        goto LABEL_35;
      }
    }
  }
  if (v6 != v8 || v7 != v9) {
    return 1;
  }
  if (a3[3] != *(const void **)(a4 + 24) || a3[4] != *(const void **)(a4 + 32)) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void boost::filesystem::path::begin(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = __str;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v4 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  *(void *)(a2 + 32) = 0;
  if (!size)
  {
    std::string::size_type v5 = 0;
LABEL_39:
    std::string::size_type v7 = size;
    goto LABEL_41;
  }
  if (size == 1)
  {
    std::string::size_type v5 = 0;
    uint64_t v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      uint64_t v6 = __str;
    }
    if (v6->__r_.__value_.__s.__data_[0] == 47) {
      goto LABEL_8;
    }
    std::string::size_type v7 = 0;
    goto LABEL_32;
  }
  if (v4 < 0)
  {
    std::string::size_type v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (*__str->__r_.__value_.__l.__data_ != 47) {
      goto LABEL_23;
    }
  }
  else
  {
    std::string::size_type v8 = __str;
    if (__str->__r_.__value_.__s.__data_[0] != 47)
    {
LABEL_31:
      std::string::size_type v7 = 0;
      goto LABEL_32;
    }
  }
  if (v8->__r_.__value_.__s.__data_[1] != 47)
  {
    std::string::size_type v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_23;
  }
  if (size != 2)
  {
    std::string::size_type v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type v9 = v4 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v9->__r_.__value_.__s.__data_[2] == 47)
    {
LABEL_23:
      if (v4 >= 0) {
        std::string::size_type v8 = __str;
      }
      if (v8->__r_.__value_.__s.__data_[0] == 47)
      {
        if (v8->__r_.__value_.__s.__data_[1] == 47)
        {
          uint64_t v10 = 2;
          do
          {
            std::string::size_type v5 = v10 - 1;
            *(void *)(a2 + 32) = v10 - 1;
            if (size == v10) {
              break;
            }
            int v11 = v8->__r_.__value_.__s.__data_[v10++];
          }
          while (v11 == 47);
        }
        else
        {
          std::string::size_type v5 = 0;
        }
LABEL_8:
        std::string::size_type v7 = 1;
        goto LABEL_41;
      }
      goto LABEL_31;
    }
  }
  std::string::size_type v7 = 2;
LABEL_32:
  if (v7 < size)
  {
    if (v4 >= 0) {
      std::string::size_type v12 = __str;
    }
    else {
      std::string::size_type v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    while (v12->__r_.__value_.__s.__data_[v7] != 47)
    {
      if (size == ++v7)
      {
        std::string::size_type v5 = 0;
        goto LABEL_39;
      }
    }
  }
  std::string::size_type v5 = 0;
LABEL_41:
  std::string::basic_string(&__p, __str, v5, v7, (std::allocator<char> *)&v16);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v13 = *(char *)(a2 + 23);
  if (v13 < 0)
  {
    if (*(void *)(a2 + 8) != 1) {
      return;
    }
    int v14 = *(unsigned char **)a2;
  }
  else
  {
    int v14 = (unsigned char *)a2;
    if (v13 != 1) {
      return;
    }
  }
  if (*v14 == 47) {
    MEMORY[0x22A614700](a2, "/");
  }
}

void sub_22424AAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

boost::filesystem::path *boost::filesystem::path::remove_filename(boost::filesystem::path *this)
{
  std::string::size_type v2 = boost::filesystem::path::m_parent_path_end(this);
  std::string::erase((std::string *)this, v2, 0xFFFFFFFFFFFFFFFFLL);
  return this;
}

uint64_t boost::filesystem::path::m_parent_path_end(boost::filesystem::path *this)
{
  char v2 = *((unsigned char *)this + 23);
  if (v2 < 0) {
    unint64_t v3 = *((void *)this + 1);
  }
  else {
    unint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  unint64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = this;
    if (v2 < 0) {
      uint64_t v6 = *(boost::filesystem::path **)this;
    }
    BOOL v7 = *((unsigned __int8 *)v6 + v4) != 47;
  }
  else
  {
    BOOL v7 = 1;
  }
  uint64_t v9 = v8 + 1;
  unint64_t v10 = v5 - 1;
  while (v10 != -1)
  {
    if (v8 == v10) {
      goto LABEL_17;
    }
    int v11 = this;
    if (v2 < 0) {
      int v11 = *(boost::filesystem::path **)this;
    }
    int v12 = *((unsigned __int8 *)v11 + v10--);
    if (v12 != 47)
    {
      uint64_t v9 = v10 + 2;
      goto LABEL_17;
    }
  }
  uint64_t v9 = 0;
LABEL_17:
  if (v9 != 1 || v8 != 0 || v7) {
    return v9;
  }
  else {
    return -1;
  }
}

std::string *boost::filesystem::path::root_directory@<X0>(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  char v2 = this;
  if (*((char *)this + 23) < 0)
  {
    if (result == (std::string *)-1)
    {
LABEL_9:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      return result;
    }
    char v2 = *(boost::filesystem::path **)v2;
  }
  else
  {
    if (result == (std::string *)-1) {
      goto LABEL_9;
    }
  }
  return boost::filesystem::path::path<char const*>(a2, (char *)result + (void)v2, &result->__r_.__value_.__s.__data_[(void)v2 + 1]);
}

uint64_t anonymous namespace'::root_directory_start(unsigned __int8 **a1, unint64_t a2)
{
  if (a2 == 2)
  {
    int v2 = *((char *)a1 + 23);
    if (v2 < 0)
    {
      unint64_t v4 = *a1;
      int v3 = **a1;
    }
    else
    {
      int v3 = *(unsigned __int8 *)a1;
      unint64_t v4 = a1;
    }
    if (v3 == 47 && v4[1] == 47) {
      return -1;
    }
    goto LABEL_21;
  }
  if (a2 < 4)
  {
    if (!a2) {
      return -1;
    }
    LOBYTE(v2) = *((unsigned char *)a1 + 23);
LABEL_21:
    if ((v2 & 0x80u) == 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    if (*v8 == 47) {
      return 0;
    }
    return -1;
  }
  int v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    uint64_t v6 = (unsigned __int8 **)*a1;
    if (**a1 != 47 || *((unsigned char *)v6 + 1) != 47 || *((unsigned char *)v6 + 2) == 47) {
      goto LABEL_21;
    }
    unint64_t v5 = (unint64_t)a1[1];
  }
  else
  {
    if (*(unsigned char *)a1 != 47 || *((unsigned char *)a1 + 1) != 47 || *((unsigned char *)a1 + 2) == 47) {
      goto LABEL_21;
    }
    unint64_t v5 = *((unsigned __int8 *)a1 + 23);
    uint64_t v6 = a1;
  }
  if (v5 >= 3)
  {
    unint64_t v10 = (char *)v6 + 2;
    int v11 = (char *)v6 + v5;
    unint64_t v12 = v5 - 2;
    while (*v10 != 47)
    {
      ++v10;
      if (!--v12)
      {
        unint64_t v10 = v11;
        break;
      }
    }
    int v13 = (unsigned char *)(v10 - (unsigned char *)v6);
    if (v10 == v11) {
      unint64_t v7 = -1;
    }
    else {
      unint64_t v7 = (unint64_t)v13;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  if (v7 >= a2) {
    return -1;
  }
  else {
    return v7;
  }
}

unint64_t anonymous namespace'::filename_pos(unsigned __int8 **a1, unint64_t a2)
{
  if (a2 == 2)
  {
    LODWORD(v2) = *((char *)a1 + 23);
    if ((v2 & 0x80000000) != 0)
    {
      uint64_t v6 = *a1;
      int v5 = **a1;
    }
    else
    {
      int v5 = *(unsigned __int8 *)a1;
      uint64_t v6 = a1;
    }
    if (v5 == 47 && v6[1] == 47) {
      return 0;
    }
LABEL_10:
    unint64_t v4 = a2 - 1;
    int v3 = *a1;
    if ((v2 & 0x80u) == 0) {
      unint64_t v7 = a1;
    }
    else {
      unint64_t v7 = (unsigned __int8 **)*a1;
    }
    if (*((unsigned char *)v7 + v4) == 47) {
      return v4;
    }
    goto LABEL_14;
  }
  if (a2)
  {
    LOBYTE(v2) = *((unsigned char *)a1 + 23);
    goto LABEL_10;
  }
  LOBYTE(v2) = *((unsigned char *)a1 + 23);
  int v3 = *a1;
  unint64_t v4 = -1;
LABEL_14:
  if ((v2 & 0x80u) == 0) {
    int v3 = a1;
  }
  unint64_t v2 = v2;
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)a1[1];
  }
  if (v2 <= v4) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = a2;
  }
  while (v4)
  {
    int v8 = v3[--v4];
    if (v8 == 47)
    {
      if (v4 != -1 && (v4 != 1 || *v3 != 47)) {
        return ++v4;
      }
      return 0;
    }
  }
  return v4;
}

std::string *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = (char *)this;
  double result = (std::string *)boost::filesystem::path::m_parent_path_end(this);
  if (result == (std::string *)-1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    if (v2[23] < 0) {
      unint64_t v2 = *(char **)v2;
    }
    return boost::filesystem::path::path<char const*>(a2, v2, (char *)result + (void)v2);
  }
  return result;
}

void boost::filesystem::path::filename(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = this;
  char v4 = *((unsigned char *)this + 23);
  if (v4 < 0) {
    unint64_t v5 = *((void *)this + 1);
  }
  else {
    unint64_t v5 = *((unsigned __int8 *)this + 23);
  }
  unint64_t v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_12;
  }
  uint64_t v9 = v2;
  if (v4 < 0) {
    uint64_t v9 = *(boost::filesystem::path **)v2;
  }
  {
LABEL_12:
    if (v4 < 0) {
      unint64_t v2 = *(boost::filesystem::path **)v2;
    }
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)v2 + v7);
  }
  else
  {
    boost::filesystem::detail::dot_path((boost::filesystem::detail *)is_root_separator);
    if (byte_2680863A7 < 0)
    {
      long long v11 = boost::filesystem::detail::dot_path(void)::dot_pth;
      std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v11, *((std::string::size_type *)&v11 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = boost::filesystem::detail::dot_path(void)::dot_pth;
      a2->__r_.__value_.__r.__words[2] = unk_2680863A0;
    }
  }
}

BOOL anonymous namespace'::is_root_separator(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  int v3 = *(unsigned char **)a1;
  if ((v2 & 0x80u) == 0) {
    char v4 = (unsigned char *)a1;
  }
  else {
    char v4 = *(unsigned char **)a1;
  }
  unint64_t v5 = v4 - 1;
  do
  {
    if (!a2) {
      return 1;
    }
    uint64_t v6 = a2 - 1;
    int v7 = v5[a2--];
  }
  while (v7 == 47);
  if ((unint64_t)(v6 + 1) < 3) {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if (*v3 == 47 && v3[1] == 47)
    {
      unint64_t v2 = *(void *)(a1 + 8);
      goto LABEL_15;
    }
    return 0;
  }
  if ((unsigned __int16)v3 != 12079) {
    return 0;
  }
  int v3 = (unsigned char *)a1;
LABEL_15:
  if (v2 >= 3)
  {
    unint64_t v10 = v3 + 2;
    long long v11 = &v3[v2];
    unint64_t v12 = v2 - 2;
    while (*v10 != 47)
    {
      ++v10;
      if (!--v12)
      {
        unint64_t v10 = v11;
        break;
      }
    }
    uint64_t v9 = v10 - v3;
    if (v10 == v11) {
      uint64_t v9 = -1;
    }
  }
  else
  {
    uint64_t v9 = -1;
  }
  return v9 - 1 == v6;
}

long long *boost::filesystem::detail::dot_path(boost::filesystem::detail *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(&boost::filesystem::detail::dot_path(void)::dot_pth, ".");
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &boost::filesystem::detail::dot_path(void)::dot_pth, &dword_223D44000);
  }
  return &boost::filesystem::detail::dot_path(void)::dot_pth;
}

void sub_22424B16C(_Unwind_Exception *a1)
{
}

void boost::filesystem::path::m_path_iterator_increment(std::string *this)
{
  std::string::size_type v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unsigned int v3 = (char)v2;
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) != 0) {
    std::string::size_type v2 = this->__r_.__value_.__l.__size_;
  }
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  std::string::size_type v5 = this[1].__r_.__value_.__l.__size_;
  std::string::size_type v7 = v5 + v2;
  this[1].__r_.__value_.__l.__size_ = v5 + v2;
  int v8 = data[23];
  std::string::size_type v9 = data[23];
  if (v8 < 0) {
    uint64_t v10 = *((void *)data + 1);
  }
  else {
    uint64_t v10 = data[23];
  }
  if (v7 == v10)
  {
    if ((v3 & 0x80000000) != 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    }
    return;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if (size <= 2
      || (unint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0], *this->__r_.__value_.__l.__data_ != 47)
      || v12->__r_.__value_.__s.__data_[1] != 47)
    {
      BOOL v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v11 = 0;
    if (v3 < 3) {
      goto LABEL_19;
    }
    if (this->__r_.__value_.__s.__data_[0] != 47) {
      goto LABEL_19;
    }
    unint64_t v12 = this;
    if (this->__r_.__value_.__s.__data_[1] != 47) {
      goto LABEL_19;
    }
  }
  BOOL v11 = v12->__r_.__value_.__s.__data_[2] != 47;
LABEL_19:
  std::string::pointer v13 = data;
  if (v8 < 0) {
    std::string::pointer v13 = *(std::string::pointer *)data;
  }
  if (v13[v7] != 47) {
    goto LABEL_38;
  }
  if (v11)
  {
    std::string::operator=(this, 47);
    return;
  }
  for (uint64_t i = v2 + v5 - 1; ; ++i)
  {
    std::string::size_type v15 = v9;
    if ((v9 & 0x80) != 0) {
      std::string::size_type v15 = *((void *)data + 1);
    }
    if (i + 1 == v15) {
      break;
    }
    std::string::pointer v16 = data;
    if ((char)v9 < 0) {
      std::string::pointer v16 = *(std::string::pointer *)data;
    }
    if (v16[i + 1] != 47) {
      break;
    }
    this[1].__r_.__value_.__l.__size_ = i + 2;
    std::string::size_type v9 = data[23];
  }
  std::string::size_type v7 = i + 1;
  std::string::size_type v17 = v9;
  if ((char)v9 < 0) {
    std::string::size_type v17 = *((void *)data + 1);
  }
  {
    this[1].__r_.__value_.__l.__size_ = i;
    boost::filesystem::detail::dot_path((boost::filesystem::detail *)is_root_separator);
    std::string::operator=(this, (const std::string *)&boost::filesystem::detail::dot_path(void)::dot_pth);
  }
  else
  {
LABEL_38:
    std::string::pointer v19 = data;
    std::string::size_type v20 = v9;
    if ((v9 & 0x80) != 0)
    {
      std::string::pointer v19 = *(std::string::pointer *)data;
      std::string::size_type v20 = *((void *)data + 1);
    }
    if (v20 <= v7) {
      goto LABEL_47;
    }
    std::string::size_type v21 = v7;
    while (v19[v21] != 47)
    {
      if (v20 == ++v21) {
        goto LABEL_47;
      }
    }
    if (v20 == v21 || v21 == -1)
    {
LABEL_47:
      std::string::size_type v21 = v9;
      if ((char)v9 < 0) {
        std::string::size_type v21 = *((void *)data + 1);
      }
    }
    std::string::basic_string(&__p, (const std::string *)data, v7, v21 - v7, (std::allocator<char> *)&v23);
    std::string::operator=(this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22424B414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::filesystem::path::path<char const*>(std::string *a1, char *a2, char *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
    unint64_t v4 = v8;
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v5 = (char *)__p;
    }
    else {
      std::string::size_type v5 = (char *)__p[0];
    }
    if ((v8 & 0x80u) != 0) {
      unint64_t v4 = (unint64_t)__p[1];
    }
    std::string::append[abi:ne180100]<char const*,0>(a1, v5, &v5[v4]);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22424B4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised_2::get_toolkit_class_registration(void *a1@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v4, 0, 24);
  v5[0] = 0;
  v5[1] = 0;
  v4[3] = v5;
  turi::supervised_2::logistic_regression::logistic_regression((turi::supervised_2::logistic_regression *)v3);
  MEMORY[0x22A614700](v4, "classifier_logistic_regression_v2");
  void v5[2] = turi::supervised_2::get_toolkit_class_registration(void)::$_0::__invoke;
  std::string::size_type v2 = (void *)turi::model_base::list_functions((turi::model_base *)v3);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v2, (uint64_t)v6);
}

void sub_22424D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  turi::supervised_2::linear_regression::~linear_regression((turi::supervised_2::linear_regression *)&a17);
  turi::toolkit_class_specification::~toolkit_class_specification((turi::toolkit_class_specification *)(v17 - 160));
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void turi::supervised_2::get_toolkit_function_registration(void *a1@<X8>)
{
  __p[17] = *(void **)MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(v2, "test_supervised_learning");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<void (*)(void)>((uint64_t)turi::supervised_2::test_supervised_learning, (uint64_t)v2, (uint64_t)__p);
}

void sub_22424E20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<void (*)(void)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  memset(v5, 0, sizeof(v5));
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(a1, &v6, v5, a3);
}

void sub_22424E2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v19 - 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::supervised_2::get_toolkit_class_registration(void)::$_0::__invoke()
{
}

void sub_22424E350(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B1C40C777C491);
  _Unwind_Resume(a1);
}

void turi::supervised_2::get_toolkit_class_registration(void)::$_1::__invoke()
{
}

void sub_22424E3B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B1C40C71827E1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_22424EBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  void v20[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  uint64_t v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  uint64_t v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  std::string::size_type v7 = operator new(0x28uLL);
  *std::string::size_type v7 = &unk_26D773D60;
  v7[1] = v4;
  *((_OWORD *)v7 + boost::detail::shared_count::~shared_count(this + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_22424F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  std::string::size_type v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  void v6[3] = 0;
  void v7[3] = 0;
  *a2 = &unk_26D773DF0;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  void v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_22424F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation(uint64_t a1)
{
  unsigned int v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D773D60;
  unsigned int v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D773D60;
  unsigned int v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  std::string::size_type v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v3 = *(long long **)(a1 + 16);
  *(void *)std::string::size_type v2 = &unk_26D773D60;
  *((void *)v2 + boost::detail::shared_count::~shared_count(this + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_22424F450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D773D60;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2 + 1;
  uint64_t v4 = a2[1];
  std::string::size_type v5 = (char **)*a2;
  long long v6 = (char *)v4;
  if (a2[2])
  {
    *(void *)(v4 + 16) = &v6;
    *a2 = v3;
    *unsigned int v3 = 0;
    a2[2] = 0;
  }
  else
  {
    std::string::size_type v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_22424F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18[2] = *(void ***)MEMORY[0x263EF8340];
  v12[1] = 1;
  std::string __p = 0;
  uint64_t v14 = 0;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v15 = 0;
  std::string v16 = v17;
  memset(&v10, 0, sizeof(v10));
  uint64_t v11 = a2;
  if (&v9 == (unsigned char **)a1)
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v10.__begin_;
    std::vector<std::string>::pointer end = (long long *)v10.__end_;
  }
  uint64_t v9 = v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v8 = v11;
  v18[0] = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
  (*(void (**)(void))a1)();
  memset(v18, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v18, &turi::FLEX_UNDEFINED);
  *(void ***)(a3 + 13) = *(void ***)((char *)v18 + 5);
  *(void ***)(a3 + 8) = v18[0];
  *(unsigned char *)(a3 + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = BYTE4(v18[1]);
  *(_DWORD *)a3 = 0;
  v18[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v16, v17[0]);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_22424F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D773DF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D773DF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1} &,std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((void (**)(void))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1} &,std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>@<X0>(void (**a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  if (a2[1] != *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  (*a1)();
  memset(v6, 0, 13);
  uint64_t result = turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v6, &turi::FLEX_UNDEFINED);
  *(void *)(a3 + 13) = *(void *)((char *)v6 + 5);
  *(void *)(a3 + 8) = v6[0];
  *(unsigned char *)(a3 + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = BYTE4(v6[1]);
  *(_DWORD *)a3 = 0;
  return result;
}

void sub_22424F940(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v4 = &unk_26D773E80;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D773E80;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D773E80;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26D773E80;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22424FC20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D773E80;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1, a2);
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = (std::string *)((char *)v4 + 32);
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  return a1;
}

void sub_22424FE10(_Unwind_Exception *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  v11[11] = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)(a3 + 48) = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a2);
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "return_value");
  std::vector<std::string> v10 = __p;
  long long v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, v11);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a3 = 1;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v11);
}

void sub_22424FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, long long __str,uint64_t __str_16)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str);
    if (a2 == 4)
    {
      exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
      if (exception_ptr[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)exception_ptr, *((void *)exception_ptr + 1));
      }
      else
      {
        long long v26 = *(_OWORD *)exception_ptr;
        __str_16 = *((void *)exception_ptr + 2);
        std::string __str = v26;
      }
      __cxa_begin_catch(exception_object);
      std::string::operator=(v22, (const std::string *)&__str);
      unsigned char *v21 = 0;
      if (SHIBYTE(__str_16) < 0) {
        operator delete((void *)__str);
      }
      __cxa_end_catch();
    }
    else if (a2 == 3)
    {
      std::string v27 = __cxa_begin_catch(exception_object);
      MEMORY[0x22A614700](v22, v27);
      unsigned char *v21 = 0;
      __cxa_end_catch();
    }
    else
    {
      int v28 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        MEMORY[0x22A614700](v22, v29);
      }
      else
      {
        MEMORY[0x22A614700](v22, "Unknown Exception");
      }
      unsigned char *v21 = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x22424FF24);
  }
  _Unwind_Resume(exception_object);
}

void sub_22425010C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x224250104);
}

void *std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22425037C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2242505E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    std::string v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), v6);
  }
  else {
    std::string v7 = 0;
  }
  std::vector<std::string> v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  uint64_t v13 = &v7[136 * v6];
  std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  std::string v12 = v11 + 136;
  std::vector<turi::toolkit_function_specification>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer(&v10);
  return v8;
}

void sub_2242506EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *((void *)a3 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  unint64_t v6 = a3 + 2;
  uint64_t v7 = *((void *)a3 + 4);
  *(void *)(a2 + 32) = v7;
  uint64_t v8 = a2 + 32;
  uint64_t v9 = *((void *)a3 + 5);
  *(void *)(a2 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a3 + 3) = v6;
    void *v6 = 0;
    *((void *)a3 + 5) = 0;
  }
  else
  {
    *(void *)(a2 + 24) = v8;
  }
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  std::vector<std::string> v10 = (void *)a3 + 7;
  uint64_t v11 = *((void *)a3 + 7);
  *(void *)(a2 + 56) = v11;
  uint64_t v12 = a2 + 56;
  uint64_t v13 = *((void *)a3 + 8);
  *(void *)(a2 + 64) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *((void *)a3 + 6) = v10;
    void *v10 = 0;
    *((void *)a3 + 8) = 0;
  }
  else
  {
    *(void *)(a2 + 48) = v12;
  }
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100](a2 + 72, (uint64_t)a3 + 72);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a2 + 104, (uint64_t)a3 + 104);
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  *unint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  unint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<turi::toolkit_function_specification>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + boost::detail::shared_count::~shared_count(this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v9 = (long long *)((char *)v9 - 136);
      std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::toolkit_function_specification>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v4, i - 136);
  }
}

void boost::throw_exception<std::bad_alloc>()
{
  exception = __cxa_allocate_exception(0x38uLL);
  memset(&v1[2], 0, 24);
  int v2 = -1;
  v1[0] = &unk_26D774028;
  v1[1] = &unk_26D774050;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl((uint64_t)exception, (uint64_t)v1);
}

void sub_224250B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_alloc a9, void *a10)
{
  a10 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v11);
  std::bad_alloc::~bad_alloc(&a9);
  if (v12) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = MEMORY[0x263F8C3B8] + 16;
  *(void *)(a1 + 8) = &unk_26D754388;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = &unk_26D773F88;
  *(void *)(a1 + 8) = &unk_26D773FC0;
  *(void *)(a1 + 48) = &unk_26D773FF8;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 16), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = MEMORY[0x263F8C3B8] + 16;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = &unk_26D754388;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = &unk_26D773F88;
  *(void *)(a1 + 8) = &unk_26D773FC0;
  *(void *)(a1 + 48) = &unk_26D773FF8;
  return a1;
}

void sub_224250DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone()
{
}

void sub_224250ED4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40F6FF0CB6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl((uint64_t)exception, a1);
}

void sub_224250F40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::bad_alloc *)(a1 - 1);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::bad_alloc::~bad_alloc(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + boost::detail::shared_count::~shared_count(this + 1) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::bad_alloc>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::bad_alloc>::~error_info_injector(uint64_t a1)
{
}

void sub_224251208(_Unwind_Exception *a1)
{
  std::bad_alloc::~bad_alloc(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::gzip_header::process(boost::iostreams::detail::gzip_header *this, int a2)
{
  switch(*((_DWORD *)this + 17))
  {
    case 1:
      if (a2 != 31)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 4);
        boost::throw_exception<boost::iostreams::gzip_error>((uint64_t)&v7);
      }
      int v2 = 2;
      goto LABEL_37;
    case 2:
      if (a2 != -117)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 4);
        boost::throw_exception<boost::iostreams::gzip_error>((uint64_t)&v7);
      }
      int v2 = 3;
      goto LABEL_37;
    case 3:
      if (a2 != 8)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 6);
        boost::throw_exception<boost::iostreams::gzip_error>((uint64_t)&v7);
      }
      int v2 = 4;
      goto LABEL_37;
    case 4:
      *((_DWORD *)this + 16) = a2;
      *((_DWORD *)this + 17) = 5;
      return;
    case 5:
      int v3 = *((_DWORD *)this + 18);
      *((void *)this + 7) += a2 << (8 * v3);
      if (v3 != 3) {
        goto LABEL_16;
      }
      uint64_t v4 = 6;
      goto LABEL_15;
    case 6:
      int v2 = 7;
      goto LABEL_37;
    case 7:
      *((_DWORD *)this + 12) = a2;
      int v5 = *((_DWORD *)this + 16);
      if ((v5 & 4) == 0) {
        goto LABEL_29;
      }
      int v2 = 8;
      goto LABEL_37;
    case 8:
      int v3 = *((_DWORD *)this + 18);
      *((_DWORD *)this + 19) += a2 << (8 * v3);
      if (v3 != 1) {
        goto LABEL_16;
      }
      uint64_t v4 = 9;
      goto LABEL_15;
    case 9:
      int v6 = *((_DWORD *)this + 19) - 1;
      *((_DWORD *)this + 19) = v6;
      if (v6) {
        return;
      }
      int v5 = *((_DWORD *)this + 16);
LABEL_29:
      if ((v5 & 8) == 0) {
        goto LABEL_30;
      }
      int v2 = 10;
      goto LABEL_37;
    case 0xA:
      if (a2) {
        goto LABEL_24;
      }
      int v5 = *((_DWORD *)this + 16);
LABEL_30:
      if ((v5 & 0x10) == 0) {
        goto LABEL_34;
      }
      int v2 = 11;
      goto LABEL_37;
    case 0xB:
      if (a2)
      {
        this = (boost::iostreams::detail::gzip_header *)((char *)this + 24);
LABEL_24:
        std::string::push_back((std::string *)this, a2);
      }
      else
      {
        LOBYTE(v5) = *((unsigned char *)this + 64);
LABEL_34:
        if ((v5 & 2) != 0) {
          int v2 = 12;
        }
        else {
          int v2 = 13;
        }
LABEL_37:
        *((_DWORD *)this + 17) = v2;
      }
      return;
    case 0xC:
      int v3 = *((_DWORD *)this + 18);
      if (v3 == 1)
      {
        uint64_t v4 = 13;
LABEL_15:
        *(void *)((char *)this + 68) = v4;
      }
      else
      {
LABEL_16:
        *((_DWORD *)this + 18) = v3 + 1;
      }
      return;
    default:
      return;
  }
}

void sub_224251414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

double boost::iostreams::detail::gzip_header::reset(boost::iostreams::detail::gzip_header *this)
{
  if (*((char *)this + 23) < 0)
  {
    **(unsigned char **)this = 0;
    *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  }
  else
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 23) = 0;
  }
  if (*((char *)this + 47) < 0)
  {
    **((unsigned char **)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    *((unsigned char *)this + 24) = 0;
    *((unsigned char *)this + 47) = 0;
  }
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = 0;
  *(void *)&double result = 0x100000000;
  *((_OWORD *)this + 4) = xmmword_2246E8910;
  return result;
}

_DWORD *boost::iostreams::detail::gzip_footer::process(_DWORD *this, unsigned __int8 a2)
{
  int v2 = this[2];
  if (v2 == 2)
  {
    int v3 = this[3];
    this[1] += a2 << (8 * v3);
    if (v3 == 3)
    {
      uint64_t v4 = 3;
      goto LABEL_7;
    }
  }
  else
  {
    if (v2 != 1) {
      return this;
    }
    int v3 = this[3];
    *this += a2 << (8 * v3);
    if (v3 == 3)
    {
      uint64_t v4 = 2;
LABEL_7:
      *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v4;
      return this;
    }
  }
  this[3] = v3 + 1;
  return this;
}

double boost::iostreams::detail::gzip_footer::reset(boost::iostreams::detail::gzip_footer *this)
{
  double result = 0.0;
  *(_OWORD *)this = xmmword_2246C5F80;
  return result;
}

BOOL turi::fs_util::upgrade_file_handle_limit(turi::fs_util *this)
{
  v2.rlim_cur = (rlim_t)this;
  v2.rlim_max = (rlim_t)this;
  return setrlimit(8, &v2) == 0;
}

uint64_t turi::fs_util::get_file_handle_limit(turi::fs_util *this)
{
  if (getrlimit(8, &v2)) {
    return 0;
  }
  else {
    return LODWORD(v2.rlim_cur);
  }
}

std::ios_base::failure *boost::iostreams::zlib_error::zlib_error(std::ios_base::failure *this, int a2)
{
  *(void *)&v5.__val_ = 1;
  v5.__cat_ = std::iostream_category();
  double result = std::ios_base::failure::failure(this, "zlib error", &v5);
  this->__vftable = (std::ios_base::failure_vtbl *)&unk_26D774070;
  LODWORD(this[1].__vftable) = a2;
  return result;
}

uint64_t boost::iostreams::zlib_error::check(uint64_t this)
{
  if (this >= 2)
  {
    if (this == -4)
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)&v1);
      boost::throw_exception<std::bad_alloc>();
    }
    boost::iostreams::zlib_error::zlib_error(&v1, this);
    boost::throw_exception<boost::iostreams::zlib_error>((uint64_t)&v1);
  }
  return this;
}

void sub_22425167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void boost::throw_exception<boost::iostreams::zlib_error>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(v3, (const std::runtime_error *)a1);
  v3[1] = *(std::runtime_error *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = -1;
  v3[0].__vftable = (std::runtime_error_vtbl *)&unk_26D7741B0;
  std::error_code v5 = &unk_26D7741D8;
  uint64_t v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_224251770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  a13 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v14);
  std::runtime_error::~runtime_error(&a9);
  if (v15) {
    __cxa_free_exception(v13);
  }
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::zlib_base::zlib_base(boost::iostreams::detail::zlib_base *this)
{
}

void boost::iostreams::detail::zlib_base::~zlib_base(boost::iostreams::detail::zlib_base *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    MEMORY[0x22A614FA0](v1, 0x10B0C40E8CA615DLL);
  }
}

uint64_t *boost::iostreams::detail::zlib_base::before(uint64_t *this, const char **a2, const char *a3, char **a4, char *a5)
{
  uint64_t v5 = *this;
  *(void *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + 8) = a3 - *(_DWORD *)a2;
  *(void *)(v5 + 24) = *a4;
  *(_DWORD *)(v5 + 32) = a5 - *(_DWORD *)a4;
  return this;
}

uLong boost::iostreams::detail::zlib_base::after(uLong this, const Bytef **a2, const Bytef **a3, int a4)
{
  uint64_t v6 = (_DWORD *)this;
  uint64_t v7 = *(const char ***)this;
  uint64_t v8 = **(const char ***)this;
  int v9 = *(char **)(*(void *)this + 24);
  if (*(unsigned char *)(this + 8))
  {
    uInt v10 = v8 - *a2;
    if (a4) {
      uint64_t v11 = *a2;
    }
    else {
      uint64_t v11 = *a3;
    }
    if (a4) {
      uInt v12 = v10;
    }
    else {
      uInt v12 = v9 - *a3;
    }
    this = crc32(*(unsigned int *)(this + 16), v11, v12);
    void v6[3] = this;
    void v6[4] = this;
  }
  uint64_t v13 = v7[5];
  v6[5] = v7[2];
  v6[6] = v13;
  *a2 = (const Bytef *)v8;
  *a3 = (const Bytef *)v9;
  return this;
}

uint64_t boost::iostreams::detail::zlib_base::xdeflate(z_streamp *this, int a2)
{
  return deflate(*this, a2);
}

uint64_t boost::iostreams::detail::zlib_base::xinflate(z_streamp *this, int a2)
{
  return inflate(*this, a2);
}

uint64_t boost::iostreams::detail::zlib_base::reset(z_stream **this, int a2, int a3)
{
  int v4 = *this;
  if (a3)
  {
    if (a2) {
      uint64_t result = deflateReset(v4);
    }
    else {
      uint64_t result = inflateReset(v4);
    }
  }
  else if (a2)
  {
    uint64_t result = deflateEnd(v4);
  }
  else
  {
    uint64_t result = inflateEnd(v4);
  }
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t boost::iostreams::detail::zlib_base::do_init(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 21);
  uint64_t v6 = *(z_stream **)a1;
  v6->zalloc = 0;
  v6->zfree = 0;
  v6->opaque = a6;
  if (*(unsigned char *)(a2 + 20)) {
    int v7 = -*(_DWORD *)(a2 + 8);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 8);
  }
  if (a3) {
    uint64_t v8 = deflateInit2_(v6, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), v7, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), "1.2.12", 112);
  }
  else {
    uint64_t v8 = inflateInit2_(v6, v7, "1.2.12", 112);
  }
  return boost::iostreams::zlib_error::check(v8);
}

void boost::iostreams::zlib_error::~zlib_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D774070;
  LODWORD(v4[2].__vftable) = *(_DWORD *)(a2 + 32);
  v4[2].__imp_.__imp_ = (const char *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)a1 = &unk_26D774110;
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D774148;
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D774180;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 48), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D7542E8;
  int v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D774070;
  LODWORD(v4[2].__vftable) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D754388;
  *(void *)(a1 + 48) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)a1 = &unk_26D774110;
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D774148;
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D774180;
  return a1;
}

void sub_224251BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone()
{
}

void sub_224251CF4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4039E95DADLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x58uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_224251D60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(void *a1)
{
}

void boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>::~error_info_injector(uint64_t a1)
{
}

void sub_224251F94(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = &unk_26D754388;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D774270;
  *(void *)(a1 + 16) = &unk_26D7742A8;
  *(void *)(a1 + 56) = &unk_26D7742E0;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D774270;
  *(void *)(a1 + 16) = &unk_26D7742A8;
  *(void *)(a1 + 56) = &unk_26D7742E0;
  return a1;
}

void sub_22425219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone()
{
}

void sub_224252238(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2242522A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::rethrow(void *a1)
{
}

void sub_2242523F4(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::error_string(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (!*(void *)(a1 + 304)) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 296);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 296;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 296 && *(_DWORD *)(v5 + 32) <= a2)
  {
    if (*(char *)(v5 + 63) < 0)
    {
      uint64_t v11 = *(const std::string::value_type **)(v5 + 40);
      std::string::size_type v12 = *(void *)(v5 + 48);
      std::string::__init_copy_ctor_external(a3, v11, v12);
    }
    else
    {
      long long v10 = *(_OWORD *)(v5 + 40);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 56);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
LABEL_12:
    default_error_string = (char *)boost::re_detail_106800::get_default_error_string(a2);
    std::string::basic_string[abi:ne180100]<0>(a3, default_error_string);
  }
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, std::string::value_type *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  switch(*(_DWORD *)(a1 + 360))
  {
    case 0:
    case 3:
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, a2, a3, a3 - a2);
      uint64_t v6 = *((unsigned __int8 *)a4 + 23);
      if ((v6 & 0x80u) == 0) {
        BOOL v7 = a4;
      }
      else {
        BOOL v7 = (uint64_t *)*a4;
      }
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = a4[1];
      }
      (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (uint64_t)v7 + v6);
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 24) + 32))(&v15);
      if (*((char *)a4 + 23) < 0) {
        operator delete((void *)*a4);
      }
      *(_OWORD *)a4 = v15;
      a4[2] = v16;
      break;
    case 1:
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 24) + 32))(&v15);
      if (*((char *)a4 + 23) < 0) {
        operator delete((void *)*a4);
      }
      *(_OWORD *)a4 = v15;
      a4[2] = v16;
      std::string::erase((std::string *)a4, *(char *)(a1 + 364), 0xFFFFFFFFFFFFFFFFLL);
      break;
    case 2:
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 24) + 32))(&v15);
      if (*((char *)a4 + 23) < 0) {
        operator delete((void *)*a4);
      }
      *(_OWORD *)a4 = v15;
      unint64_t v8 = v16;
      a4[2] = v16;
      std::string::size_type v9 = HIBYTE(v8);
      int v10 = (char)v9;
      std::string::size_type v11 = 0;
      if ((v9 & 0x80u) != 0) {
        std::string::size_type v9 = a4[1];
      }
      if (v9)
      {
        if (v10 >= 0) {
          std::string::size_type v12 = a4;
        }
        else {
          std::string::size_type v12 = (uint64_t *)*a4;
        }
        while (*((unsigned __int8 *)v12 + v11) != *(unsigned __int8 *)(a1 + 364))
        {
          if (v9 == ++v11)
          {
            std::string::size_type v11 = v9;
            break;
          }
        }
      }
      std::string::erase((std::string *)a4, v11, 0xFFFFFFFFFFFFFFFFLL);
      break;
    default:
      break;
  }
  uint64_t v13 = a4 + 1;
  while ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    uint64_t v14 = *((unsigned __int8 *)a4 + 23);
    if (!*((unsigned char *)a4 + 23)) {
      goto LABEL_34;
    }
    if (*((unsigned char *)a4 + v14 - 1)) {
      return;
    }
LABEL_32:
    std::string::erase((std::string *)a4, v14 - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v14 = *v13;
  if (*v13)
  {
    if (*(unsigned char *)(*a4 + v14 - 1)) {
      return;
    }
    goto LABEL_32;
  }
  operator delete((void *)*a4);
LABEL_34:
  *a4 = 0;
  *uint64_t v13 = v15;
  *(uint64_t *)((char *)a4 + 15) = *(void *)((char *)&v15 + 7);
  *((unsigned char *)a4 + 23) = 1;
}

void sub_224252864(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x2242527C0);
  }
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a1 + 352))
  {
    unint64_t v9 = a3 - a2;
    goto LABEL_8;
  }
  uint64_t v8 = a1 + 336;
  unint64_t v9 = a3 - a2;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v8, (const void **)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 344 == v10)
  {
LABEL_8:
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, v9);
    boost::re_detail_106800::lookup_default_collate_name((size_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = v17;
    *(_OWORD *)std::string __p = v16;
    char v12 = HIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      unint64_t v13 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint64_t v14 = (char *)__p[0];
LABEL_15:
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((void *)a4, v14, &v14[v13], v13);
        if ((v19 & 0x8000000000000000) == 0) {
          return;
        }
LABEL_22:
        operator delete(__p[0]);
        return;
      }
    }
    else if (HIBYTE(v17))
    {
      unint64_t v13 = HIBYTE(v17);
      uint64_t v14 = (char *)__p;
      goto LABEL_15;
    }
    if (v9 == 1)
    {
      unsigned __int8 v15 = *a2;
      *(unsigned char *)(a4 + 23) = 1;
      *(_WORD *)a4 = v15;
      if ((v12 & 0x80) == 0) {
        return;
      }
    }
    else
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      if ((v12 & 0x80) == 0) {
        return;
      }
    }
    goto LABEL_22;
  }
  if (*(char *)(v10 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)(v10 + 56), *(void *)(v10 + 64));
  }
  else
  {
    long long v11 = *(_OWORD *)(v10 + 56);
    *(void *)(a4 + 16) = *(void *)(v10 + 72);
    *(_OWORD *)a4 = v11;
  }
}

void sub_224252A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::cpp_regex_traits<char>::toi(uint64_t a1, void *a2, unsigned char *a3, int a4)
{
  std::streambuf::basic_streambuf();
  __sb[0] = &unk_26D774358;
  __sb[2] = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  v19[0] = MEMORY[0x263F8C2F0] + 24;
  v19[1] = 0;
  v20.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F0] + 64);
  std::ios_base::init(&v20, __sb);
  uint64_t v21 = 0;
  int v22 = -1;
  BOOL v7 = (void *)*a2;
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(v19[0] - 24)));
  uint64_t v8 = std::locale::use_facet(&v18, MEMORY[0x263F8C150]);
  int v9 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet_0)(v8);
  uint64_t v10 = memchr(v7, v9, a3 - (unsigned char *)v7);
  if (v10) {
    a3 = v10;
  }
  std::locale::~locale(&v18);
  (*(void (**)(void *, void, unsigned char *))(__sb[0] + 24))(__sb, *a2, &a3[-*a2]);
  std::ios_base::clear((std::ios_base *)((char *)v19 + *(void *)(v19[0] - 24)), 0);
  if (a4 >= 0) {
    int v11 = a4;
  }
  else {
    int v11 = -a4;
  }
  if (v11 == 8) {
    int v12 = 64;
  }
  else {
    int v12 = 2;
  }
  if (v11 == 16) {
    int v13 = 8;
  }
  else {
    int v13 = v12;
  }
  *(_DWORD *)((char *)&v19[1] + *(void *)(v19[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(_DWORD *)((unsigned char *)&v19[1] + *(void *)(v19[0] - 24)) & 0xFFFFFFB5 | v13;
  v18.__locale_ = 0;
  uint64_t v14 = (void *)MEMORY[0x22A614900](v19, &v18);
  if ((*((unsigned char *)v14 + *(void *)(*v14 - 24) + 32) & 5) != 0)
  {
    uint64_t locale = -1;
  }
  else
  {
    if (v24 >= v25) {
      uint64_t v16 = (*(uint64_t (**)(void *))(__sb[0] + 56))(__sb);
    }
    else {
      uint64_t v16 = v25 - v24;
    }
    *a2 = &a3[-v16];
    uint64_t locale = (uint64_t)v18.__locale_;
  }
  std::istream::~istream();
  std::streambuf::~streambuf();
  return locale;
}

void sub_224252CE8(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224252E54(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::parser_buf<char,std::char_traits<char>>::~parser_buf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::data::~data(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(uint64_t a1, std::locale *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(a1, a2->__locale_);
    std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(a1, a2[1].__locale_);
    std::locale::~locale(a2 + 4);
    operator delete(a2);
  }
}

void std::__list_imp<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>>::clear(atomic_uint **a1)
{
  if (a1[2])
  {
    rlimit v2 = *a1;
    uint64_t v3 = (atomic_uint **)a1[1];
    uint64_t v4 = *v3;
    *((void *)v4 + boost::detail::shared_count::~shared_count(this + 1) = *((void *)*a1 + 1);
    **((void **)v2 + boost::detail::shared_count::~shared_count(this + 1) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (atomic_uint **)v3[1];
        boost::detail::shared_count::~shared_count(v3 + 3);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t boost::checked_delete<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(result + 336, *(void **)(result + 344));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1 + 312, *(char **)(v1 + 320));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v1 + 288, *(char **)(v1 + 296));
    std::locale::~locale((std::locale *)v1);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::re_detail_106800::cpp_regex_traits_implementation<char>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 336, *(void **)(v1 + 344));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1 + 312, *(char **)(v1 + 320));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v1 + 288, *(char **)(v1 + 296));
    std::locale::~locale((std::locale *)v1);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__erase_unique<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t **a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = (std::locale *)v3;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, v3);
  std::locale::~locale(v4 + 4);
  operator delete(v4);
  return 1;
}

uint64_t boost::checked_delete<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t result)
{
  if (result)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(result + 8));
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t boost::checked_delete<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    rlimit v2 = *(void **)(result + 376);
    if (v2)
    {
      *(void *)(v1 + 384) = v2;
      operator delete(v2);
    }
    operator delete(*(void **)(v1 + 352));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 32));
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::dispose(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    rlimit v2 = *(void **)(v1 + 376);
    if (v2)
    {
      *(void *)(v1 + 384) = v2;
      operator delete(v2);
    }
    operator delete(*(void **)(v1 + 352));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 32));
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void *boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_regex_parser(void *a1)
{
  rlimit v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  return a1;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *a1, int a2, const char *a3)
{
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::error_string(**(void **)(a1->__r_.__value_.__r.__words[0] + 24), a2, &__p);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224253360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 136);
  switch(*(unsigned char *)(**(void **)(a1 + 8) + *v1 + 32))
  {
    case 3:
      *(void *)(a1 + 136) = v1 + 1;
      int v2 = 4;
      goto LABEL_9;
    case 4:
      *(void *)(a1 + 136) = v1 + 1;
      int v2 = 3;
LABEL_9:
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v2, 0x10uLL);
      return 1;
    case 5:
      *(void *)(a1 + 136) = v1 + 1;
      int v4 = *(_DWORD *)(*(void *)a1 + 40);
      if ((v4 & 0x1000) != 0) {
        char v5 = 2;
      }
      else {
        char v5 = 1;
      }
      if ((v4 & 0x2000) != 0) {
        char v6 = 0;
      }
      else {
        char v6 = v5;
      }
      *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v6;
      return 1;
    case 6:
      BOOL v7 = *(_DWORD **)(a1 + 16);
      if (!v7 || *v7 == 3) {
        goto LABEL_29;
      }
      *(void *)(a1 + 136) = v1 + 1;
      uint64_t v8 = 0;
      goto LABEL_25;
    case 7:
      long long v9 = *(_DWORD **)(a1 + 16);
      if (!v9 || *v9 == 3 || (*(unsigned char *)(*(void *)a1 + 41) & 0x10) == 0) {
        goto LABEL_29;
      }
      *(void *)(a1 + 136) = v1 + 1;
      uint64_t v8 = 1;
LABEL_25:
      uint64_t v10 = -1;
      goto LABEL_39;
    case 8:
      int v11 = *(_DWORD **)(a1 + 16);
      if (!v11 || *v11 == 3 || (*(unsigned char *)(*(void *)a1 + 41) & 0x10) == 0) {
        goto LABEL_29;
      }
      *(void *)(a1 + 136) = v1 + 1;
      uint64_t v8 = 0;
      uint64_t v10 = 1;
LABEL_39:
      uint64_t result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(a1, v8, v10);
      break;
    case 9:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(a1);
    case 0xA:
    case 0xB:
      goto LABEL_29;
    case 0xC:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic_escape((std::string *)a1);
    default:
      if (*(unsigned char *)(**(void **)(a1 + 8) + *v1 + 32) == 26 && (*(unsigned char *)(*(void *)a1 + 42) & 2) != 0)
      {
        uint64_t result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt(a1);
      }
      else
      {
LABEL_29:
        uint64_t result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
      }
      break;
  }
  return result;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *a1, int a2, const char *a3, uint64_t a4)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, a2, (uint64_t)a3, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22425367C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(uint64_t a1, int a2)
{
  int v4 = (void *)(a1 + 136);
  uint64_t v3 = *(char **)(a1 + 136);
  if (v3 == *(char **)(a1 + 128))
  {
    BOOL v7 = *(char **)(a1 + 136);
  }
  else
  {
    while (1)
    {
      BOOL v6 = boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *v3, *(_DWORD *)(a1 + 84));
      BOOL v7 = *(char **)(a1 + 128);
      uint64_t v8 = *(char **)(a1 + 136);
      if (!v6) {
        break;
      }
      uint64_t v3 = v8 + 1;
      void *v4 = v3;
      if (v3 == v7) {
        goto LABEL_13;
      }
    }
    if (v8 != v7)
    {
      uint64_t v9 = boost::cpp_regex_traits<char>::toi(*(void *)(a1 + 8), v4, v7, 10);
      if ((v9 & 0x8000000000000000) == 0)
      {
        uint64_t v10 = *(char **)(a1 + 136);
        if (v10 == *(char **)(a1 + 128))
        {
          int v13 = *(char **)(a1 + 136);
        }
        else
        {
          unint64_t v11 = v9;
          while (1)
          {
            BOOL v12 = boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *v10, *(_DWORD *)(a1 + 84));
            int v13 = *(char **)(a1 + 128);
            uint64_t i = *(char **)(a1 + 136);
            if (!v12) {
              break;
            }
            uint64_t v10 = i + 1;
            void *v4 = v10;
            if (v10 == v13) {
              goto LABEL_38;
            }
          }
          if (i != v13)
          {
            unint64_t v21 = v11;
            if (*(unsigned char *)(**(void **)(a1 + 8) + *i + 32) != 27) {
              goto LABEL_35;
            }
            while (1)
            {
              int v22 = *(char **)(a1 + 128);
              BOOL v7 = (char *)(*(void *)(a1 + 136) + 1);
              *(void *)(a1 + 136) = v7;
              if (v7 == v22) {
                break;
              }
              if (!boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *v7, *(_DWORD *)(a1 + 84)))
              {
                BOOL v7 = *(char **)(a1 + 128);
                if (*(char **)(a1 + 136) != v7)
                {
                  unint64_t v23 = boost::cpp_regex_traits<char>::toi(*(void *)(a1 + 8), v4, v7, 10);
                  if (v23 >= 0x7FFFFFFFFFFFFFFFLL) {
                    unint64_t v21 = -1;
                  }
                  else {
                    unint64_t v21 = v23;
                  }
                  int v13 = *(char **)(a1 + 128);
                  for (i = *(char **)(a1 + 136); ; void *v4 = i)
                  {
LABEL_35:
                    if (i == v13) {
                      goto LABEL_57;
                    }
                    BOOL v24 = boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *i, *(_DWORD *)(a1 + 84));
                    int v13 = *(char **)(a1 + 128);
                    unint64_t v25 = *(unsigned __int8 **)(a1 + 136);
                    if (!v24) {
                      break;
                    }
                    uint64_t i = (char *)(v25 + 1);
                  }
                  if (v25 == (unsigned __int8 *)v13)
                  {
LABEL_57:
                    if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) != 0) {
                      goto LABEL_39;
                    }
                    uint64_t v37 = **(void **)(a1 + 8);
                    unsigned int v38 = v13 - 1;
                    do
                    {
                      void *v4 = v38;
                      unsigned int v39 = *v38--;
                    }
                    while (*(unsigned char *)(v37 + v39 + 32) != 15);
                    goto LABEL_20;
                  }
                  std::string v33 = *(uint64_t **)(a1 + 8);
                  uint64_t v34 = *v33;
                  if (a2)
                  {
                    if (*(unsigned char *)(v34 + *v25 + 32) != 12)
                    {
                      uint64_t v45 = (const char *)&v25[-*(void *)(a1 + 120)];
                      std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
                      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v45, (uint64_t)__p);
                      goto LABEL_15;
                    }
                    void *v4 = ++v25;
                    if (v25 == (unsigned __int8 *)v13) {
                      goto LABEL_39;
                    }
                  }
                  if (*(unsigned char *)(v34 + *v25 + 32) != 16)
                  {
                    int v43 = v25 - 1;
                    do
                    {
                      void *v4 = v43;
                      unsigned int v44 = *v43--;
                    }
                    while (*(unsigned char *)(v34 + v44 + 32) != 15);
                    goto LABEL_20;
                  }
                  void *v4 = v25 + 1;
                  if (v11 > v21)
                  {
                    *(void *)(a1 + 136) = v25 - 1;
                    if (boost::cpp_regex_traits<char>::isctype((uint64_t)v33, (char)*(v25 - 1), *(_DWORD *)(a1 + 80)))
                    {
                      do
                      {
                        uint64_t v35 = *(void *)(a1 + 136);
                        *(void *)(a1 + 136) = v35 - 1;
                      }
                      while (boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *(char *)(v35 - 1), *(_DWORD *)(a1 + 80)));
                    }
                    uint64_t v36 = *(void *)(a1 + 136) + 1;
                    *(void *)(a1 + 136) = v36;
                    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 10, (const char *)(v36 - *(void *)(a1 + 120)));
                    return 0;
                  }
                  return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(a1, v11, v21);
                }
                break;
              }
            }
            if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) != 0) {
              goto LABEL_14;
            }
            uint64_t v40 = **(void **)(a1 + 8);
            uint64_t v41 = v7 - 1;
            do
            {
              void *v4 = v41;
              unsigned int v42 = *v41--;
            }
            while (*(unsigned char *)(v40 + v42 + 32) != 15);
            goto LABEL_20;
          }
        }
LABEL_38:
        if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) != 0)
        {
LABEL_39:
          long long v26 = &v13[-*(void *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v26, (uint64_t)__p);
          goto LABEL_15;
        }
        uint64_t v27 = **(void **)(a1 + 8);
        int v28 = v13 - 1;
        do
        {
          void *v4 = v28;
          unsigned int v29 = *v28--;
        }
        while (*(unsigned char *)(v27 + v29 + 32) != 15);
LABEL_20:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
      }
      if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) == 0)
      {
        uint64_t v30 = **(void **)(a1 + 8);
        int v31 = (unsigned __int8 *)(*(void *)(a1 + 136) - 1);
        do
        {
          void *v4 = v31;
          unsigned int v32 = *v31--;
        }
        while (*(unsigned char *)(v30 + v32 + 32) != 15);
        goto LABEL_20;
      }
      std::ios_base v20 = (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120));
      std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v20, (uint64_t)__p);
      goto LABEL_15;
    }
  }
LABEL_13:
  if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) == 0)
  {
    uint64_t v17 = **(void **)(a1 + 8);
    std::locale v18 = v7 - 1;
    do
    {
      void *v4 = v18;
      unsigned int v19 = *v18--;
    }
    while (*(unsigned char *)(v17 + v19 + 32) != 15);
    goto LABEL_20;
  }
LABEL_14:
  unsigned __int8 v15 = &v7[-*(void *)(a1 + 120)];
  std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v15, (uint64_t)__p);
LABEL_15:
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_224253CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_extension(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 136);
  int v2 = *(unsigned __int8 **)(a1 + 136);
  int v4 = v2 + 1;
  *(void *)(a1 + 136) = v2 + 1;
  char v5 = *(unsigned __int8 **)(a1 + 128);
  BOOL v6 = *(uint64_t **)(a1 + 8);
  if (v2 + 1 == v5)
  {
    uint64_t v10 = *v6;
    do
    {
      *uint64_t v3 = v2;
      unsigned int v11 = *v2--;
      --v4;
    }
    while (*(unsigned char *)(v10 + v11 + 32) != 1);
    goto LABEL_8;
  }
  uint64_t v7 = *v6;
  if (*(unsigned char *)(*v6 + *v4 + 32) == 13)
  {
    do
    {
      if (v4 == v5) {
        break;
      }
      *uint64_t v3 = v4 + 1;
      int v8 = *(unsigned __int8 *)(v7 + *v4++ + 32);
    }
    while (v8 != 2);
    return 1;
  }
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
  uint64_t v16 = *(void *)a1;
  unsigned int v17 = *(_DWORD *)(*(void *)a1 + 40);
  *((unsigned char *)appended + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = (v17 & 0x100000) != 0;
  uint64_t v18 = *(void *)(a1 + 168);
  uint64_t v19 = *(void *)(v16 + 352);
  unint64_t v20 = (*(void *)(v16 + 360) - v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v16 + 36CoreML::Specification::SupportVectorClassifier::New(this, 0) = v19 + v20;
  *(void *)(a1 + 168) = v20;
  char v21 = *(unsigned char *)(a1 + 176);
  *(unsigned char *)(a1 + 176) = 0;
  uint64_t v22 = *(void *)(a1 + 148);
  int v23 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 148) = -1;
  *(_DWORD *)(a1 + 152) = v23;
  BOOL v24 = *(uint64_t **)(a1 + 8);
  int v4 = *(unsigned __int8 **)(a1 + 136);
  uint64_t v25 = *v4;
  uint64_t v26 = *v24;
  unsigned int v27 = *(unsigned __int8 *)(*v24 + v25 + 32);
  if (v27 > 0xA)
  {
    if (*(unsigned __int8 *)(*v24 + v25 + 32) <= 0x23u)
    {
      switch(*(unsigned char *)(*v24 + v25 + 32))
      {
        case 0xB:
          *(_DWORD *)(a1 + 148) = v23;
          goto LABEL_28;
        case 0xE:
          *(void *)(a1 + 136) = v4 + 1;
          uint64_t v35 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(unsigned char **)(a1 + 128), 10);
          if (v35 <= 0)
          {
            --*v3;
            goto LABEL_79;
          }
          int v226 = (v17 >> 20) & 1;
          uint64_t v36 = (*(_DWORD *)(a1 + 144) + 1);
          unint64_t v37 = v36 - v35;
          if (v36 > v35) {
            goto LABEL_223;
          }
          uint64_t v38 = **(void **)(a1 + 8);
          uint64_t v30 = *(unsigned __int8 **)(a1 + 136);
          unsigned int v39 = v30 - 1;
          do
          {
            *uint64_t v3 = v39;
            unsigned int v40 = *v39--;
            --v30;
          }
          while (*(unsigned char *)(v38 + v40 + 32) != 1);
          goto LABEL_77;
        case 0x11:
          int v226 = (v17 >> 20) & 1;
          uint64_t v41 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(unsigned char **)(a1 + 128), 10);
          uint64_t v42 = **(void **)(a1 + 8);
          int v43 = *(unsigned __int8 **)(a1 + 136);
          if ((v41 & 0x8000000000000000) == 0)
          {
            unint64_t v37 = v41;
            if (*(unsigned char *)(v42 + *v43 + 32) == 2) {
              goto LABEL_223;
            }
          }
          unsigned int v44 = v43 - 1;
          do
          {
            *uint64_t v3 = v44;
            unsigned int v45 = *v44--;
            --v43;
          }
          while (*(unsigned char *)(v42 + v45 + 32) != 1);
          int v46 = (const char *)&v43[-*(void *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(__p, "The recursive sub-expression refers to an invalid marking group, or is unterminated.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v46, (uint64_t)__p);
          goto LABEL_251;
        case 0x14:
          char v47 = v4 + 1;
          *(void *)(a1 + 136) = v4 + 1;
          if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
          {
            do
            {
              *uint64_t v3 = v4;
              unsigned int v49 = *v4--;
              --v47;
            }
            while (*(unsigned char *)(v26 + v49 + 32) != 1);
            BOOL v12 = (const char *)&v47[-*(void *)(a1 + 120)];
            goto LABEL_9;
          }
          int v48 = *(unsigned __int8 *)(v26 + *v47 + 32);
          if (v48 == 53)
          {
            char v225 = v21;
            int v226 = (v17 >> 20) & 1;
            uint64_t v32 = v18;
            signed int v33 = -2;
            goto LABEL_107;
          }
          if (v48 == 37)
          {
            char v225 = v21;
            int v226 = (v17 >> 20) & 1;
            uint64_t v32 = v18;
            signed int v33 = -1;
LABEL_107:
            appended[4] = v33;
            *(void *)(a1 + 136) = v4 + 2;
            uint64_t v34 = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL)- *(void *)(*(void *)a1 + 352);
            boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 26, 0x18uLL);
            uint64_t v65 = *(void *)a1;
            uint64_t v66 = *(void *)(*(void *)a1 + 352);
            uint64_t v67 = *(void *)(*(void *)a1 + 360);
            goto LABEL_64;
          }
          *uint64_t v3 = v4;
          LODWORD(v25) = 62;
LABEL_109:
          int v226 = (v17 >> 20) & 1;
          if ((v17 & 0x400000) != 0)
          {
            signed int v33 = 0;
          }
          else
          {
            signed int v33 = v23 + 1;
            *(_DWORD *)(a1 + 144) = v23 + 1;
            if ((v17 & 0x800000) != 0)
            {
              __p[0] = &v4[-*(void *)(a1 + 120) - 2];
              __p[1] = 0;
              std::vector<std::pair<unsigned long,unsigned long>>::push_back[abi:ne180100]((void **)(v16 + 376), __p);
              int v4 = *(unsigned __int8 **)(a1 + 136);
            }
          }
          appended[4] = v33;
          int v98 = (char *)(v4 + 1);
          *(void *)(a1 + 136) = v4 + 1;
          timeval v99 = *(char **)(a1 + 128);
          if (v4 + 1 == (unsigned __int8 *)v99)
          {
            uint64_t v104 = **(void **)(a1 + 8);
            do
            {
              *uint64_t v3 = v4;
              unsigned int v105 = *v4--;
              --v98;
            }
            while (*(unsigned char *)(v104 + v105 + 32) != 1);
            BOOL v12 = &v98[-*(void *)(a1 + 120)];
            goto LABEL_9;
          }
          unint64_t v100 = (char *)(v4 + 1);
          do
          {
            if (*v100 == v25)
            {
              char v225 = v21;
              uint64_t v32 = v18;
              boost::re_detail_106800::named_subexpressions::set_name<char>(*(void ***)a1, v98, v100, v33);
              uint64_t v34 = 0;
              ++*(void *)(a1 + 136);
              goto LABEL_224;
            }
            *uint64_t v3 = ++v100;
          }
          while (v100 != v99);
          uint64_t v101 = **(void **)(a1 + 8);
          uint64_t v102 = v99 - 1;
          do
          {
            *uint64_t v3 = v102;
            unsigned int v103 = *v102--;
            --v99;
          }
          while (*(unsigned char *)(v101 + v103 + 32) != 1);
          break;
        case 0x15:
          char v225 = v21;
          int v226 = (v17 >> 20) & 1;
          uint64_t v32 = v18;
          signed int v33 = -3;
          goto LABEL_63;
        case 0x19:
          goto LABEL_109;
        default:
          goto LABEL_68;
      }
LABEL_119:
      BOOL v12 = &v99[-*(void *)(a1 + 120)];
      goto LABEL_9;
    }
    switch(v27)
    {
      case '$':
LABEL_28:
        char v225 = v21;
        int v226 = (v17 >> 20) & 1;
        uint64_t v32 = v18;
        uint64_t v34 = 0;
        signed int v33 = 0;
        appended[4] = 0;
        *uint64_t v3 = v4 + 1;
LABEL_224:
        BOOL v82 = 1;
        goto LABEL_225;
      case '%':
        char v225 = v21;
        int v226 = (v17 >> 20) & 1;
        uint64_t v32 = v18;
        signed int v33 = -1;
LABEL_63:
        appended[4] = v33;
        *(void *)(a1 + 136) = v4 + 1;
        long long v64 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL);
        uint64_t v65 = *(void *)a1;
        uint64_t v66 = *(void *)(*(void *)a1 + 352);
        uint64_t v67 = *(void *)(*(void *)a1 + 360);
        uint64_t v34 = (char *)v64 - v66;
LABEL_64:
        unint64_t v68 = (v67 - v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v65 + 36CoreML::Specification::SupportVectorClassifier::New(this, 0) = v66 + v68;
        *(void *)(a1 + 168) = v68;
        goto LABEL_224;
      case '5':
        char v225 = v21;
        int v226 = (v17 >> 20) & 1;
        uint64_t v32 = v18;
        signed int v33 = -2;
        goto LABEL_63;
    }
    goto LABEL_68;
  }
  if (v27 != 1)
  {
    if (v27 == 2)
    {
      int v69 = v4 - 1;
      do
      {
        *uint64_t v3 = v69;
        unsigned int v70 = *v69--;
        --v4;
      }
      while (*(unsigned char *)(v26 + v70 + 32) != 1);
      goto LABEL_8;
    }
    if (v27 == 7)
    {
      *(void *)(a1 + 136) = v4 + 1;
      int64_t v28 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(unsigned char **)(a1 + 128), 10);
      uint64_t v29 = **(void **)(a1 + 8);
      uint64_t v30 = *(unsigned __int8 **)(a1 + 136);
      if (v28 >= 1 && *(unsigned char *)(v29 + *v30 + 32) == 2)
      {
        uint64_t v31 = *(unsigned int *)(a1 + 144);
        if ((v31 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v28)
        {
          int v226 = (v17 >> 20) & 1;
          unint64_t v37 = v28 + v31;
LABEL_223:
          char v225 = v21;
          uint64_t v32 = v18;
          appended[4] = 0;
          uint64_t v159 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 29, 0x20uLL);
          *((void *)v159 + 2) = v37;
          v159[6] = 0;
          int v160 = *(_DWORD *)(*(void *)a1 + 40);
          uint64_t v34 = 0;
          signed int v33 = 0;
          *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = (v160 & 0x100000) != 0;
          goto LABEL_224;
        }
      }
      else
      {
        int v72 = v30 - 1;
        do
        {
          *uint64_t v3 = v72;
          unsigned int v73 = *v72--;
          --v30;
        }
        while (*(unsigned char *)(v29 + v73 + 32) != 1);
      }
LABEL_77:
      unint64_t v74 = (const char *)&v30[-*(void *)(a1 + 120)];
      std::string::basic_string[abi:ne180100]<0>(__p, "An invalid or unterminated recursive sub-expression.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v74, (uint64_t)__p);
      goto LABEL_251;
    }
LABEL_68:
    switch(v25)
    {
      case '&':
        std::string v86 = v4 + 1;
        unint64_t v87 = *(unsigned __int8 **)(a1 + 128);
        *(void *)(a1 + 136) = v4 + 1;
        int v226 = (v17 >> 20) & 1;
        if (v4 + 1 == v87)
        {
          BOOL v111 = 1;
        }
        else
        {
          int v88 = *(unsigned __int8 *)(v26 + *v86 + 32);
          if (v88 == 2)
          {
            BOOL v89 = 0;
            signed int v90 = (char *)v86;
LABEL_155:
            if (v88 == 2) {
              goto LABEL_202;
            }
            unint64_t v122 = 0;
            do
            {
              uint64_t v123 = (char)*v86++;
              v122 ^= (v122 << 6) + 2654435769u + (v122 >> 2) + v123;
            }
            while (v86 != (unsigned __int8 *)v90);
            goto LABEL_205;
          }
          uint64_t v119 = v87 - v4 - 2;
          uint64_t v120 = v4 + 2;
          while (1)
          {
            *uint64_t v3 = v120;
            if (!v119) {
              break;
            }
            unsigned int v121 = *v120++;
            --v119;
            if (*(unsigned char *)(v26 + v121 + 32) == 2)
            {
              signed int v90 = (char *)(v120 - 1);
              BOOL v89 = v120 - 1 == v87;
              goto LABEL_155;
            }
          }
          BOOL v111 = v120 == v87;
          std::string v86 = v120;
        }
        uint64_t v129 = (char *)(v86 - 1);
        do
        {
          *uint64_t v3 = v129;
          unsigned int v130 = *v129--;
          --v86;
        }
        while (*(unsigned char *)(v26 + v130 + 32) != 1);
        break;
      case 'P':
        uint64_t v50 = v4 + 1;
        *(void *)(a1 + 136) = v4 + 1;
        uint64_t v91 = *(unsigned __int8 **)(a1 + 128);
        if (v4 + 1 == v91)
        {
          do
          {
            *uint64_t v3 = v4;
            unsigned int v94 = *v4--;
            --v50;
          }
          while (*(unsigned char *)(v26 + v94 + 32) != 1);
          goto LABEL_97;
        }
        if (*v50 != 62) {
          goto LABEL_79;
        }
        std::string v86 = v4 + 2;
        *uint64_t v3 = v4 + 2;
        int v226 = (v17 >> 20) & 1;
        if (v4 + 2 == v91)
        {
          BOOL v111 = 1;
        }
        else
        {
          if (*(unsigned char *)(v26 + v4[2] + 32) == 2)
          {
            BOOL v89 = 0;
            uint64_t v92 = 2;
            signed int v93 = (char *)v86;
LABEL_201:
            if (v92 == 2)
            {
LABEL_202:
              unint64_t v37 = 10000;
              goto LABEL_206;
            }
            unint64_t v122 = 0;
            do
            {
              uint64_t v149 = (char)*v86++;
              v122 ^= (v122 << 6) + 2654435769u + (v122 >> 2) + v149;
            }
            while (v86 != (unsigned __int8 *)v93);
LABEL_205:
            unint64_t v37 = v122 % 0x7FFFD8EE + 10000;
LABEL_206:
            if (v89) {
              return 0;
            }
            goto LABEL_223;
          }
          uint64_t v147 = 3;
          while (1)
          {
            v148 = &v4[v147];
            *uint64_t v3 = &v4[v147];
            if (v91 - v4 == v147) {
              break;
            }
            ++v147;
            if (*(unsigned char *)(v26 + *v148 + 32) == 2)
            {
              uint64_t v92 = v147 - 1;
              signed int v93 = (char *)&v4[v92];
              BOOL v89 = &v4[v92] == v91;
              goto LABEL_201;
            }
          }
          BOOL v111 = v148 == v91;
          std::string v86 = &v4[v147];
        }
        v157 = (char *)(v86 - 1);
        do
        {
          *uint64_t v3 = v157;
          unsigned int v158 = *v157--;
          --v86;
        }
        while (*(unsigned char *)(v26 + v158 + 32) != 1);
        break;
      case 'R':
        uint64_t v50 = v4 + 1;
        *uint64_t v3 = v4 + 1;
        if (*(unsigned char *)(v26 + v4[1] + 32) != 2)
        {
          do
          {
            *uint64_t v3 = v4;
            unsigned int v71 = *v4--;
            --v50;
          }
          while (*(unsigned char *)(v26 + v71 + 32) != 1);
          goto LABEL_97;
        }
        int v226 = (v17 >> 20) & 1;
LABEL_222:
        unint64_t v37 = 0;
        goto LABEL_223;
      default:
LABEL_79:
        unsigned int v75 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_options((std::string *)a1);
        int v4 = *(unsigned __int8 **)(a1 + 136);
        if (v4 == *(unsigned __int8 **)(a1 + 128))
        {
          uint64_t v83 = **(void **)(a1 + 8);
          int v84 = v4 - 1;
          do
          {
            *uint64_t v3 = v84;
            unsigned int v85 = *v84--;
            --v4;
          }
          while (*(unsigned char *)(v83 + v85 + 32) != 1);
        }
        else
        {
          char v225 = v21;
          uint64_t v32 = v18;
          unsigned int v76 = v75 & 0x100000;
          uint64_t v77 = *(void *)a1;
          int v78 = *(_DWORD *)(*(void *)a1 + 40) & 0x100000;
          BOOL v79 = (v75 & 0x100000) != v78;
          *(unsigned char *)(a1 + 176) = v79;
          appended[4] = 0;
          uint64_t v80 = **(void **)(a1 + 8);
          int v81 = *(unsigned __int8 *)(v80 + *v4 + 32);
          BOOL v82 = v81 != 2;
          if (v81 == 2)
          {
            *(_DWORD *)(v77 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v75;
            if (((v75 >> 20) & 1) != *(unsigned char *)(a1 + 24)) {
              *(unsigned char *)(a1 + 24) = (v75 & 0x100000) != 0;
            }
            v225 |= v79;
            goto LABEL_104;
          }
          if (v81 == 36)
          {
            *(_DWORD *)(v77 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v75;
            if (((v75 >> 20) & 1) != *(unsigned char *)(a1 + 24)) {
              *(unsigned char *)(a1 + 24) = (v75 & 0x100000) != 0;
            }
            *uint64_t v3 = v4 + 1;
LABEL_104:
            int v226 = (v17 >> 20) & 1;
            uint64_t v34 = 0;
            signed int v33 = 0;
            if (v76 != v78) {
              *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v76 >> 20;
            }
LABEL_225:
            uint64_t v161 = (uint64_t)appended - v19;
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
            if (boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, v161))
            {
              uint64_t v162 = *(void *)(a1 + 136);
              if (v162 == *(void *)(a1 + 128))
              {
                uint64_t v181 = **(void **)(a1 + 8);
                v182 = (unsigned __int8 *)(v162 - 1);
                do
                {
                  *uint64_t v3 = v182;
                  unsigned int v183 = *v182--;
                }
                while (*(unsigned char *)(v181 + v183 + 32) != 1);
                BOOL v12 = (const char *)(v162 - *(void *)(a1 + 120));
                int v13 = (std::string *)a1;
                int v14 = 8;
                goto LABEL_10;
              }
              *uint64_t v3 = v162 + 1;
              if (v82)
              {
                if (*(unsigned char *)(a1 + 176)) {
                  *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v226;
                }
                *(_DWORD *)(*(void *)a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v17;
                if (v226 != *(unsigned __int8 *)(a1 + 24)) {
                  *(unsigned char *)(a1 + 24) = v226;
                }
              }
              if (v34)
              {
                uint64_t v163 = *(void *)(*(void *)a1 + 352);
                unint64_t v164 = (*(void *)(*(void *)a1 + 360) - v163 + 7) & 0xFFFFFFFFFFFFFFF8;
                *(void *)(*(void *)a1 + 36CoreML::Specification::SupportVectorClassifier::New(this, 0) = v163 + v164;
                *(void *)&v34[v163 + 16] = v164 - (void)v34;
                if (*(char **)(a1 + 16) == &v34[v163] && v33 != -2)
                {
                  uint64_t v184 = **(void **)(a1 + 8);
                  uint64_t v185 = *(void *)(a1 + 136);
                  v186 = (unsigned __int8 *)(v185 - 1);
                  do
                  {
                    *uint64_t v3 = v186;
                    unsigned int v187 = *v186--;
                    --v185;
                  }
                  while (*(unsigned char *)(v184 + v187 + 32) != 1);
                  v188 = (const char *)(v185 - *(void *)(a1 + 120));
                  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid or empty zero width assertion.");
                  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v188, (uint64_t)__p);
                  goto LABEL_251;
                }
              }
              if (v33 != -4) {
                goto LABEL_269;
              }
              uint64_t v166 = *(void *)(*(void *)a1 + 352);
              uint64_t v167 = v166 + v20;
              if (*(_DWORD *)(v166 + v20) == 17)
              {
                uint64_t v168 = *(void *)(*(void *)a1 + 360) - v166;
                uint64_t v169 = *(void *)(v167 + 16);
                BOOL v170 = v169 < 1 || v168 <= (uint64_t)(v169 + v20);
                if (!v170 && *(_DWORD *)(v167 + v169) == 17)
                {
                  uint64_t v171 = **(void **)(a1 + 8);
                  uint64_t v172 = *(void *)(a1 + 136);
                  v173 = (unsigned __int8 *)(v172 - 1);
                  do
                  {
                    *uint64_t v3 = v173;
                    unsigned int v174 = *v173--;
                    --v172;
                  }
                  while (*(unsigned char *)(v171 + v174 + 32) != 1);
                  v175 = (const char *)(v172 - *(void *)(a1 + 120));
                  std::string::basic_string[abi:ne180100]<0>(__p, "More than one alternation operator | was encountered inside a conditional expression.");
                  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 2, v175, (uint64_t)__p);
                  goto LABEL_251;
                }
                v191 = (int *)(v167 + *(void *)(v167 + 8));
                int v190 = *v191;
                if (*v191 == 27)
                {
                  if (v191[4] == 9999)
                  {
                    uint64_t v192 = **(void **)(a1 + 8);
                    uint64_t v193 = *(void *)(a1 + 136);
                    v194 = (unsigned __int8 *)(v193 - 1);
                    do
                    {
                      *uint64_t v3 = v194;
                      unsigned int v195 = *v194--;
                      --v193;
                    }
                    while (*(unsigned char *)(v192 + v195 + 32) != 1);
                    v196 = (const char *)(v193 - *(void *)(a1 + 120));
                    std::string::basic_string[abi:ne180100]<0>(__p, "Alternation operators are not allowed inside a DEFINE block.");
                    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 2, v196, (uint64_t)__p);
                    goto LABEL_251;
                  }
LABEL_269:
                  v198 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
                  v198[4] = v33;
                  uint64_t v199 = *(void *)a1;
                  int v200 = *(_DWORD *)(*(void *)a1 + 40);
                  *((unsigned char *)v198 + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = (v200 & 0x100000) != 0;
                  *(void *)(a1 + 16CoreML::Specification::SupportVectorClassifier::New(this, 0) = v161;
                  *(void *)(a1 + 168) = v32;
                  *(unsigned char *)(a1 + 176) = v225;
                  unsigned int v201 = *(_DWORD *)(a1 + 152);
                  if (v201 > *(_DWORD *)(a1 + 144)) {
                    *(_DWORD *)(a1 + 144) = v201;
                  }
                  *(void *)(a1 + 148) = v22;
                  unint64_t v202 = (v33 - 1);
                  if (v33 >= 1)
                  {
                    if ((v200 & 0x800000) != 0)
                    {
                      uint64_t v203 = *(void *)(v199 + 376);
                      if (v202 >= (*(void *)(v199 + 384) - v203) >> 4) {
                        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
                      }
                      *(void *)(v203 + 16 * v202 + 8) = *(void *)(a1 + 136) + ~*(void *)(a1 + 120);
                    }
                    uint64_t result = 1;
                    if (v33 <= 0x1F) {
                      *(_DWORD *)(a1 + 36) |= 1 << (v33 - 1);
                    }
                    return result;
                  }
                  return 1;
                }
              }
              else
              {
                inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((void *)a1, v20, 17, 0x120uLL);
                *((void *)inserted + 2) = *(void *)(*(void *)a1 + 360) - (void)inserted;
                int v190 = *(_DWORD *)(*(void *)(*(void *)a1 + 352)
                                 + v20
                                 + *(void *)(*(void *)(*(void *)a1 + 352) + v20 + 8));
              }
              if (v190) {
                BOOL v197 = v190 == 27;
              }
              else {
                BOOL v197 = 1;
              }
              if (v197) {
                goto LABEL_269;
              }
              uint64_t v204 = **(void **)(a1 + 8);
              uint64_t v205 = *(void *)(a1 + 136);
              v206 = (unsigned __int8 *)(v205 - 1);
              do
              {
                *uint64_t v3 = v206;
                unsigned int v207 = *v206--;
                --v205;
              }
              while (*(unsigned char *)(v204 + v207 + 32) != 1);
              v208 = (const char *)(v205 - *(void *)(a1 + 120));
              std::string::basic_string[abi:ne180100]<0>(__p, "A repetition operator cannot be applied to a zero-width assertion.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v208, (uint64_t)__p);
            }
            else
            {
              uint64_t v176 = **(void **)(a1 + 8);
              uint64_t v177 = *(void *)(a1 + 136);
              v178 = (unsigned __int8 *)(v177 - 1);
              do
              {
                *uint64_t v3 = v178;
                unsigned int v179 = *v178--;
                --v177;
              }
              while (*(unsigned char *)(v176 + v179 + 32) != 1);
              v180 = (const char *)(v177 - *(void *)(a1 + 120));
              std::string::basic_string[abi:ne180100]<0>(__p, "Invalid alternation operators within (?...) block.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v180, (uint64_t)__p);
            }
LABEL_251:
            if (v228 < 0) {
              operator delete(__p[0]);
            }
            return 0;
          }
          int v109 = v4 - 1;
          do
          {
            *uint64_t v3 = v109;
            unsigned int v110 = *v109--;
            --v4;
          }
          while (*(unsigned char *)(v80 + v110 + 32) != 1);
        }
LABEL_8:
        BOOL v12 = (const char *)&v4[-*(void *)(a1 + 120)];
        goto LABEL_9;
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v86[-*(void *)(a1 + 120)]);
    if (v111) {
      return 0;
    }
    goto LABEL_222;
  }
  appended[4] = -4;
  uint64_t v50 = v4 + 1;
  *(void *)(a1 + 136) = v4 + 1;
  unint64_t v51 = *(unsigned __int8 **)(a1 + 128);
  if (v4 + 1 == v51)
  {
    do
    {
      *uint64_t v3 = v4;
      unsigned int v63 = *v4--;
      --v50;
    }
    while (*(unsigned char *)(v26 + v63 + 32) != 1);
    goto LABEL_97;
  }
  int v226 = (v17 >> 20) & 1;
  uint64_t v52 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, v51, 10);
  uint64_t v53 = *(unsigned __int8 **)(a1 + 128);
  int v4 = *(unsigned __int8 **)(a1 + 136);
  if (v4 == v53)
  {
    uint64_t v95 = **(void **)(a1 + 8);
    int v96 = v4 - 1;
    do
    {
      *uint64_t v3 = v96;
      unsigned int v97 = *v96--;
      --v4;
    }
    while (*(unsigned char *)(v95 + v97 + 32) != 1);
    goto LABEL_8;
  }
  int64_t v54 = v52;
  uint64_t v55 = *v4;
  if (*v4 <= 0x43u)
  {
    if (v55 == 39 || v55 == 60)
    {
      unsigned int v56 = (char *)(v4 + 1);
      *uint64_t v3 = v4 + 1;
      if (v4 + 1 == v53)
      {
LABEL_57:
        uint64_t v60 = **(void **)(a1 + 8);
        int v61 = v53 - 1;
        do
        {
          *uint64_t v3 = v61;
          unsigned int v62 = *v61--;
          --v53;
        }
        while (*(unsigned char *)(v60 + v62 + 32) != 1);
LABEL_164:
        BOOL v12 = (const char *)&v53[-*(void *)(a1 + 120)];
        goto LABEL_9;
      }
      uint64_t v57 = 1;
      while (1)
      {
        int v58 = v4[v57];
        if (v58 == 39 || v58 == 62) {
          break;
        }
        uint64_t v59 = v57 + 1;
        *uint64_t v3 = &v4[v57 + 1];
        uint64_t v57 = v59;
        if (v53 - v4 == v59)
        {
          uint64_t v53 = &v4[v59];
          goto LABEL_57;
        }
      }
      uint64_t v124 = v57 - 1;
      if (v57 == 1)
      {
        int v125 = 10000;
      }
      else
      {
        unint64_t v131 = 0;
        do
        {
          uint64_t v132 = *v56++;
          v131 ^= (v131 << 6) + 2654435769u + (v131 >> 2) + v132;
          --v124;
        }
        while (v124);
        int v125 = v131 % 0x7FFFD8EE + 10000;
      }
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = v125;
      unsigned int v133 = *(unsigned __int8 **)(a1 + 136);
      int v134 = *v133;
      if (v134 == 62 || v134 == 39)
      {
        v135 = v133 + 1;
        *(void *)(a1 + 136) = v133 + 1;
        atomic_ullong *volatile v136 = *(unsigned __int8 **)(a1 + 128);
        if (v133 + 1 != v136)
        {
          uint64_t v137 = **(void **)(a1 + 8);
          if (*(unsigned char *)(v137 + *v135 + 32) != 2)
          {
            uint64_t v50 = v133 + 1;
            do
            {
              *uint64_t v3 = v133;
              unsigned int v156 = *v133--;
              --v50;
            }
            while (*(unsigned char *)(v137 + v156 + 32) != 1);
            goto LABEL_97;
          }
          int v4 = v133 + 2;
          *uint64_t v3 = v4;
          if (v4 == v136)
          {
            do
            {
              *uint64_t v3 = v135;
              unsigned int v138 = *v135--;
              --v4;
            }
            while (*(unsigned char *)(v137 + v138 + 32) != 1);
            goto LABEL_8;
          }
          goto LABEL_300;
        }
        ++v133;
      }
      uint64_t v150 = **(void **)(a1 + 8);
      std::string v151 = v133 - 1;
      do
      {
        *uint64_t v3 = v151;
        unsigned int v152 = *v151--;
        --v133;
      }
      while (*(unsigned char *)(v150 + v152 + 32) != 1);
      v153 = (const char *)&v133[-*(void *)(a1 + 120)];
      std::string::basic_string[abi:ne180100]<0>(__p, "Unterminated named capture.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v153, (uint64_t)__p);
      goto LABEL_251;
    }
    goto LABEL_146;
  }
  if (v55 == 82)
  {
    timeval v99 = (char *)(v4 + 1);
    *uint64_t v3 = v4 + 1;
    if (v4 + 1 == v53)
    {
      uint64_t v139 = **(void **)(a1 + 8);
      do
      {
        *uint64_t v3 = v4;
        unsigned int v140 = *v4--;
        --v99;
      }
      while (*(unsigned char *)(v139 + v140 + 32) != 1);
      goto LABEL_119;
    }
    if (*v99 == 38)
    {
      std::string v112 = (char *)(v4 + 2);
      *(void *)(a1 + 136) = v4 + 2;
      uint64_t v113 = **(void **)(a1 + 8);
      if (v4 + 2 == v53)
      {
        BOOL v209 = 1;
      }
      else
      {
        if (*(unsigned char *)(v113 + v4[2] + 32) == 2)
        {
          BOOL v114 = 0;
          uint64_t v115 = 2;
          uint64_t v116 = v112;
LABEL_287:
          if (v115 == 2)
          {
            if (v114) {
              return 0;
            }
            int64_t v54 = -10000;
          }
          else
          {
            unint64_t v214 = 0;
            do
            {
              uint64_t v215 = *v112++;
              v214 ^= (v214 << 6) + 2654435769u + (v214 >> 2) + v215;
            }
            while (v112 != v116);
            if (v114) {
              return 0;
            }
            int64_t v54 = 2147473646 * (v214 / 0x7FFFD8EE) - v214 - 10000;
          }
          goto LABEL_298;
        }
        uint64_t v212 = 3;
        while (1)
        {
          v213 = &v4[v212];
          *uint64_t v3 = &v4[v212];
          if (v53 - v4 == v212) {
            break;
          }
          ++v212;
          if (*(unsigned char *)(v113 + *v213 + 32) == 2)
          {
            uint64_t v115 = v212 - 1;
            uint64_t v116 = (char *)&v4[v115];
            BOOL v114 = &v4[v115] == v53;
            goto LABEL_287;
          }
        }
        BOOL v209 = v213 == v53;
        uint64_t v53 = &v4[v212];
      }
      v216 = v53 - 1;
      do
      {
        *uint64_t v3 = v216;
        unsigned int v217 = *v216--;
        --v53;
      }
      while (*(unsigned char *)(v113 + v217 + 32) != 1);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v53[-*(void *)(a1 + 120)]);
      if (v209) {
        return 0;
      }
    }
    else
    {
      int64_t v54 = -boost::cpp_regex_traits<char>::toi(*(void *)(a1 + 8), v3, v53, 10);
    }
LABEL_298:
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = (v54 >> 63) & (v54 - 1);
    int v4 = *(unsigned __int8 **)(a1 + 136);
    uint64_t v218 = **(void **)(a1 + 8);
    if (*(unsigned char *)(v218 + *v4 + 32) != 2)
    {
      v220 = v4 - 1;
      do
      {
        *uint64_t v3 = v220;
        unsigned int v221 = *v220--;
        --v4;
      }
      while (*(unsigned char *)(v218 + v221 + 32) != 1);
      goto LABEL_8;
    }
    uint64_t v50 = v4 + 1;
    *(void *)(a1 + 136) = v4 + 1;
    if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      do
      {
        *uint64_t v3 = v4;
        unsigned int v219 = *v4--;
        --v50;
      }
      while (*(unsigned char *)(v218 + v219 + 32) != 1);
      goto LABEL_97;
    }
    goto LABEL_300;
  }
  if (v55 != 68)
  {
LABEL_146:
    if (v52 < 1)
    {
      uint64_t v141 = **(void **)(a1 + 8);
      if (*(unsigned char *)(v141 + v55 + 32) != 8)
      {
        v154 = v4 - 1;
        do
        {
          *uint64_t v3 = v154;
          unsigned int v155 = *v154--;
          --v4;
        }
        while (*(unsigned char *)(v141 + v155 + 32) != 1);
        goto LABEL_8;
      }
      uint64_t v50 = v4 + 1;
      *uint64_t v3 = v4 + 1;
      if (v4 + 1 == v53)
      {
        do
        {
          *uint64_t v3 = v4;
          unsigned int v144 = *v4--;
          --v50;
        }
        while (*(unsigned char *)(v141 + v144 + 32) != 1);
        goto LABEL_97;
      }
      char v225 = v21;
      int v142 = *(unsigned __int8 *)(v141 + *v50 + 32);
      if (v142 == 20)
      {
        v222 = v4 + 2;
        *uint64_t v3 = v4 + 2;
        if (v4 + 2 == v53)
        {
          do
          {
            *uint64_t v3 = v50;
            unsigned int v223 = *v50--;
            --v222;
          }
          while (*(unsigned char *)(v141 + v223 + 32) != 1);
          BOOL v12 = (const char *)&v222[-*(void *)(a1 + 120)];
          goto LABEL_9;
        }
        if ((*(unsigned __int8 *)(v141 + *v222 + 32) | 0x10) != 0x35)
        {
          v4 += 2;
          do
          {
            *uint64_t v3 = v50;
            unsigned int v224 = *v50--;
            --v4;
          }
          while (*(unsigned char *)(v141 + v224 + 32) != 1);
          goto LABEL_8;
        }
        uint64_t v32 = v18;
      }
      else
      {
        uint64_t v32 = v18;
        if (v142 != 37 && v142 != 53)
        {
          uint64_t v50 = v4 + 1;
          do
          {
            *uint64_t v3 = v4;
            unsigned int v143 = *v4--;
            --v50;
          }
          while (*(unsigned char *)(v141 + v143 + 32) != 1);
          goto LABEL_97;
        }
      }
      uint64_t v34 = 0;
      *uint64_t v3 = v4 - 1;
LABEL_302:
      signed int v33 = -4;
      goto LABEL_224;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = v52;
    int v4 = *(unsigned __int8 **)(a1 + 136);
    uint64_t v117 = **(void **)(a1 + 8);
    if (*(unsigned char *)(v117 + *v4 + 32) != 2)
    {
      v145 = v4 - 1;
      do
      {
        *uint64_t v3 = v145;
        unsigned int v146 = *v145--;
        --v4;
      }
      while (*(unsigned char *)(v117 + v146 + 32) != 1);
      goto LABEL_8;
    }
    uint64_t v50 = v4 + 1;
    *(void *)(a1 + 136) = v4 + 1;
    if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      do
      {
        *uint64_t v3 = v4;
        unsigned int v118 = *v4--;
        --v50;
      }
      while (*(unsigned char *)(v117 + v118 + 32) != 1);
      goto LABEL_97;
    }
LABEL_300:
    char v225 = v21;
LABEL_301:
    uint64_t v32 = v18;
    uint64_t v34 = 0;
    goto LABEL_302;
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    if (&v4[i] == v53 || v4[i] != v55)
    {
      uint64_t v53 = &v4[i];
LABEL_162:
      uint64_t v126 = **(void **)(a1 + 8);
      uint64_t v127 = v53 - 1;
      do
      {
        *uint64_t v3 = v127;
        unsigned int v128 = *v127--;
        --v53;
      }
      while (*(unsigned char *)(v126 + v128 + 32) != 1);
      goto LABEL_164;
    }
    *uint64_t v3 = &v4[i + 1];
    LODWORD(v55) = aDefine[i + 1];
  }
  if (v4 + 6 == v53) {
    goto LABEL_162;
  }
  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = 9999;
  int v4 = *(unsigned __int8 **)(a1 + 136);
  uint64_t v107 = **(void **)(a1 + 8);
  if (*(unsigned char *)(v107 + *v4 + 32) != 2)
  {
    v210 = v4 - 1;
    do
    {
      *uint64_t v3 = v210;
      unsigned int v211 = *v210--;
      --v4;
    }
    while (*(unsigned char *)(v107 + v211 + 32) != 1);
    goto LABEL_8;
  }
  char v225 = v21;
  uint64_t v50 = v4 + 1;
  *(void *)(a1 + 136) = v4 + 1;
  if (v4 + 1 != *(unsigned __int8 **)(a1 + 128)) {
    goto LABEL_301;
  }
  do
  {
    *uint64_t v3 = v4;
    unsigned int v108 = *v4--;
    --v50;
  }
  while (*(unsigned char *)(v107 + v108 + 32) != 1);
LABEL_97:
  BOOL v12 = &v50[-*(void *)(a1 + 120)];
LABEL_9:
  int v13 = (std::string *)a1;
  int v14 = 20;
LABEL_10:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(v13, v14, v12);
  return 0;
}

void sub_22425538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_verb(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 128);
  int v2 = *(unsigned __int8 **)(a1 + 136);
  int v4 = (char *)(v2 + 1);
  *(void *)(a1 + 136) = v2 + 1;
  if (v2 + 1 == v3)
  {
    uint64_t v12 = **(void **)(a1 + 8);
    do
    {
      *(void *)(a1 + 136) = v2;
      unsigned int v13 = *v2--;
      --v4;
    }
    while (*(unsigned char *)(v12 + v13 + 32) != 1);
    goto LABEL_71;
  }
  int v5 = *v4;
  if (v5 > 79)
  {
    switch(v5)
    {
      case 'P':
        BOOL v6 = v2 + 2;
        *(void *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          uint64_t v40 = **(void **)(a1 + 8);
          do
          {
            *(void *)(a1 + 136) = v4;
            unsigned int v41 = *v4--;
            --v6;
          }
          while (*(unsigned char *)(v40 + v41 + 32) != 1);
          goto LABEL_67;
        }
        int matched = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "RUNE");
        int v4 = *(char **)(a1 + 136);
        if (matched)
        {
          uint64_t v25 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            uint64_t v26 = *v25;
          }
          else
          {
            uint64_t v26 = *v25;
            if (*(unsigned char *)(v26 + *v4 + 32) == 2)
            {
              *(void *)(a1 + 136) = v4 + 1;
              boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL)[4] = 0;
              goto LABEL_40;
            }
          }
          unsigned int v56 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(void *)(a1 + 136) = v56;
            unsigned int v57 = *v56--;
            --v4;
          }
          while (*(unsigned char *)(v26 + v57 + 32) != 1);
          goto LABEL_71;
        }
        break;
      case 'S':
        BOOL v6 = v2 + 2;
        *(void *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          uint64_t v42 = **(void **)(a1 + 8);
          do
          {
            *(void *)(a1 + 136) = v4;
            unsigned int v43 = *v4--;
            --v6;
          }
          while (*(unsigned char *)(v42 + v43 + 32) != 1);
          goto LABEL_67;
        }
        int v28 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "KIP");
        int v4 = *(char **)(a1 + 136);
        if (v28)
        {
          uint64_t v29 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            uint64_t v30 = *v29;
          }
          else
          {
            uint64_t v30 = *v29;
            if (*(unsigned char *)(v30 + *v4 + 32) == 2)
            {
              *(void *)(a1 + 136) = v4 + 1;
              appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL);
              uint64_t result = 1;
              appended[4] = 1;
              uint64_t v27 = *(void *)a1;
              goto LABEL_46;
            }
          }
          int v58 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(void *)(a1 + 136) = v58;
            unsigned int v59 = *v58--;
            --v4;
          }
          while (*(unsigned char *)(v30 + v59 + 32) != 1);
          goto LABEL_71;
        }
        break;
      case 'T':
        BOOL v6 = v2 + 2;
        *(void *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          uint64_t v34 = **(void **)(a1 + 8);
          do
          {
            *(void *)(a1 + 136) = v4;
            unsigned int v35 = *v4--;
            --v6;
          }
          while (*(unsigned char *)(v34 + v35 + 32) != 1);
          goto LABEL_67;
        }
        int v14 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "HEN");
        int v4 = *(char **)(a1 + 136);
        if (v14)
        {
          unsigned __int8 v15 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            uint64_t v16 = *v15;
          }
          else
          {
            uint64_t v16 = *v15;
            if (*(unsigned char *)(v16 + *v4 + 32) == 2)
            {
              *(void *)(a1 + 136) = v4 + 1;
              boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 33, 0x10uLL);
LABEL_40:
              uint64_t v27 = *(void *)a1;
              uint64_t result = 1;
LABEL_46:
              *(unsigned char *)(v27 + 40boost::detail::shared_count::~shared_count(this + 1) = 1;
              return result;
            }
          }
          uint64_t v50 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(void *)(a1 + 136) = v50;
            unsigned int v51 = *v50--;
            --v4;
          }
          while (*(unsigned char *)(v16 + v51 + 32) != 1);
          goto LABEL_71;
        }
        break;
    }
LABEL_69:
    uint64_t v47 = **(void **)(a1 + 8);
    int v48 = (unsigned __int8 *)(v4 - 1);
    do
    {
      *(void *)(a1 + 136) = v48;
      unsigned int v49 = *v48--;
      --v4;
    }
    while (*(unsigned char *)(v47 + v49 + 32) != 1);
LABEL_71:
    int v46 = &v4[-*(void *)(a1 + 120)];
    goto LABEL_72;
  }
  if (v5 == 65)
  {
    BOOL v6 = v2 + 2;
    *(void *)(a1 + 136) = v6;
    if (v6 != v3)
    {
      int v17 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "CCEPT");
      int v4 = *(char **)(a1 + 136);
      if (v17)
      {
        uint64_t v18 = *(uint64_t **)(a1 + 8);
        if (v4 == *(char **)(a1 + 128))
        {
          uint64_t v19 = *v18;
        }
        else
        {
          uint64_t v19 = *v18;
          if (*(unsigned char *)(v19 + *v4 + 32) == 2)
          {
            *(void *)(a1 + 136) = v4 + 1;
            uint64_t v10 = (uint64_t *)a1;
            int v11 = 31;
            goto LABEL_29;
          }
        }
        uint64_t v52 = (unsigned __int8 *)(v4 - 1);
        do
        {
          *(void *)(a1 + 136) = v52;
          unsigned int v53 = *v52--;
          --v4;
        }
        while (*(unsigned char *)(v19 + v53 + 32) != 1);
        goto LABEL_71;
      }
      goto LABEL_69;
    }
    uint64_t v36 = **(void **)(a1 + 8);
    do
    {
      *(void *)(a1 + 136) = v4;
      unsigned int v37 = *v4--;
      --v6;
    }
    while (*(unsigned char *)(v36 + v37 + 32) != 1);
    goto LABEL_67;
  }
  if (v5 == 67)
  {
    BOOL v6 = v2 + 2;
    *(void *)(a1 + 136) = v6;
    if (v6 == v3)
    {
      uint64_t v38 = **(void **)(a1 + 8);
      do
      {
        *(void *)(a1 + 136) = v4;
        unsigned int v39 = *v4--;
        --v6;
      }
      while (*(unsigned char *)(v38 + v39 + 32) != 1);
      goto LABEL_67;
    }
    int v21 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "OMMIT");
    int v4 = *(char **)(a1 + 136);
    if (v21)
    {
      uint64_t v22 = *(uint64_t **)(a1 + 8);
      if (v4 == *(char **)(a1 + 128))
      {
        uint64_t v23 = *v22;
      }
      else
      {
        uint64_t v23 = *v22;
        if (*(unsigned char *)(v23 + *v4 + 32) == 2)
        {
          *(void *)(a1 + 136) = v4 + 1;
          boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL)[4] = 2;
          goto LABEL_40;
        }
      }
      int64_t v54 = (unsigned __int8 *)(v4 - 1);
      do
      {
        *(void *)(a1 + 136) = v54;
        unsigned int v55 = *v54--;
        --v4;
      }
      while (*(unsigned char *)(v23 + v55 + 32) != 1);
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v5 != 70) {
    goto LABEL_69;
  }
  BOOL v6 = v2 + 2;
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  if (v6 != v3)
  {
    uint64_t v8 = *v7;
    if (*(unsigned char *)(*v7 + *v6 + 32) == 2) {
      goto LABEL_10;
    }
    int v9 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "AIL");
    BOOL v6 = *(unsigned __int8 **)(a1 + 136);
    if (v9)
    {
      uint64_t v3 = *(unsigned __int8 **)(a1 + 128);
      uint64_t v8 = **(void **)(a1 + 8);
LABEL_10:
      if (v6 != v3 && *(unsigned char *)(v8 + *v6 + 32) == 2)
      {
        *(void *)(a1 + 136) = v6 + 1;
        uint64_t v10 = (uint64_t *)a1;
        int v11 = 30;
LABEL_29:
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v10, v11, 0x10uLL);
        return 1;
      }
      unsigned int v44 = v6 - 1;
      do
      {
        *(void *)(a1 + 136) = v44;
        unsigned int v45 = *v44--;
        --v6;
      }
      while (*(unsigned char *)(v8 + v45 + 32) != 1);
      goto LABEL_67;
    }
    int v4 = *(char **)(a1 + 136);
    goto LABEL_69;
  }
  uint64_t v32 = *v7;
  do
  {
    *(void *)(a1 + 136) = v4;
    unsigned int v33 = *v4--;
    --v6;
  }
  while (*(unsigned char *)(v32 + v33 + 32) != 1);
LABEL_67:
  int v46 = (const char *)&v6[-*(void *)(a1 + 120)];
LABEL_72:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v46);
  return 0;
}

void std::vector<std::pair<unsigned long,unsigned long>>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    int v14 = &v13[16 * v9];
    unsigned __int8 v15 = &v13[16 * v12];
    *(_OWORD *)int v14 = *a2;
    uint64_t v8 = v14 + 16;
    int v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - boost::detail::shared_count::~shared_count(this + 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

void boost::re_detail_106800::named_subexpressions::set_name<char>(void **a1, char *a2, char *a3, unsigned int a4)
{
  if (a2 == a3)
  {
    unint64_t v8 = 0x271000000000;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *a2++;
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
    }
    while (a2 != a3);
    unint64_t v8 = ((v6 % 0x7FFFD8EE) << 32) + 0x271000000000;
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v11 = (unint64_t *)a1[1];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((char *)v11 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - (void)*a1;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v16);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = (unint64_t *)&v17[8 * v13];
    uint64_t v19 = &v17[8 * v16];
    *uint64_t v18 = v8 | a4;
    unint64_t v12 = v18 + 1;
    int v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        unint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v18 = v22;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *uint64_t v11 = v8 | a4;
    unint64_t v12 = v11 + 1;
  }
  a1[1] = v12;
  uint64_t v23 = *a1;
  BOOL v24 = v12 - 1;
  if (*a1 != v12 && v24 != v23)
  {
    do
    {
      int v26 = v24[1];
      int v27 = *(v24 - 1);
      if (v26 >= v27) {
        break;
      }
      int v28 = v24 - 2;
      int v29 = *(v24 - 2);
      *int v28 = *v24;
      *(v24 - boost::detail::shared_count::~shared_count(this + 1) = v26;
      *BOOL v24 = v29;
      v24[1] = v27;
      v24 -= 2;
    }
    while (v28 != v23);
  }
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_options(std::string *a1)
{
  uint64_t v1 = *(unsigned int *)(a1->__r_.__value_.__r.__words[0] + 40);
  int v2 = (char *)a1[5].__r_.__value_.__r.__words[2];
  while (1)
  {
    uint64_t v3 = (unsigned __int8 *)v2;
    int v4 = *v2;
    if (v4 <= 114)
    {
      if (v4 == 105)
      {
        uint64_t v1 = v1 | 0x100000;
      }
      else
      {
        if (v4 != 109) {
          break;
        }
        uint64_t v1 = v1 & 0xFFFFFBFF;
      }
      goto LABEL_11;
    }
    if (v4 == 120)
    {
      uint64_t v1 = v1 | 0x800;
      goto LABEL_11;
    }
    if (v4 != 115) {
      break;
    }
    uint64_t v1 = v1 & 0xFFFFCFFF | 0x1000;
LABEL_11:
    int v2 = (char *)(v3 + 1);
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v3 + 1);
    if (v3 + 1 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_)
    {
      uint64_t v5 = *(void *)a1->__r_.__value_.__l.__size_;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v3;
        unsigned int v6 = *v3--;
      }
      while (*(unsigned char *)(v5 + v6 + 32) != 1);
      goto LABEL_14;
    }
  }
  if (v4 == 45)
  {
    uint64_t v9 = (char *)(v3 + 1);
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v3 + 1);
    std::string::size_type size = (char *)a1[5].__r_.__value_.__l.__size_;
    if (v3 + 1 == (unsigned __int8 *)size)
    {
      uint64_t v15 = *(void *)a1->__r_.__value_.__l.__size_;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v3;
        unsigned int v16 = *v3--;
      }
      while (*(unsigned char *)(v15 + v16 + 32) != 1);
LABEL_14:
      uint64_t v7 = v3 + 1;
    }
    else
    {
      do
      {
        int v11 = *v9;
        if (v11 > 114)
        {
          if (v11 == 120)
          {
            uint64_t v1 = v1 & 0xFFFFF7FF;
          }
          else
          {
            if (v11 != 115) {
              return v1;
            }
            uint64_t v1 = v1 & 0xFFFFCFFF | 0x2000;
          }
        }
        else if (v11 == 105)
        {
          uint64_t v1 = v1 & 0xFFEFFFFF;
        }
        else
        {
          if (v11 != 109) {
            return v1;
          }
          uint64_t v1 = v1 | 0x400;
        }
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)++v9;
      }
      while (v9 != size);
      uint64_t v12 = *(void *)a1->__r_.__value_.__l.__size_;
      uint64_t v13 = v9 - 1;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
        unsigned int v14 = *v13--;
      }
      while (*(unsigned char *)(v12 + v14 + 32) != 1);
      uint64_t v7 = (unsigned __int8 *)(v13 + 1);
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 8, (const char *)&v7[-a1[5].__r_.__value_.__r.__words[0]]);
    return 0;
  }
  return v1;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(uint64_t a1, unsigned char *a2)
{
  int v2 = *a2;
  if (!*a2) {
    return 1;
  }
  uint64_t v3 = *(unsigned __int8 **)(a1 + 136);
  int v4 = a2 + 1;
  while (1)
  {
    uint64_t v5 = *v3;
    if (v2 != v5) {
      break;
    }
    *(void *)(a1 + 136) = v3 + 1;
    if (v3 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      uint64_t v10 = **(void **)(a1 + 8);
      do
      {
        *(void *)(a1 + 136) = v3;
        unsigned int v11 = *v3--;
      }
      while (*(unsigned char *)(v10 + v11 + 32) != 1);
      goto LABEL_13;
    }
    int v6 = *v4++;
    int v2 = v6;
    ++v3;
    if (!v6) {
      return 1;
    }
  }
  uint64_t v8 = **(void **)(a1 + 8);
  if (*(unsigned char *)(v8 + v5 + 32) == 1) {
    goto LABEL_14;
  }
  --v3;
  do
  {
    *(void *)(a1 + 136) = v3;
    unsigned int v9 = *v3--;
  }
  while (*(unsigned char *)(v8 + v9 + 32) != 1);
LABEL_13:
  ++v3;
LABEL_14:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v3[-*(void *)(a1 + 120)]);
  return 0;
}

uint64_t boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 64, *(void **)(a1 + 72));
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character(std::string *a1)
{
  int v2 = &a1[5].__r_.__value_.__r.__words[2];
  uint64_t v3 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
  std::string::size_type size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
  if (v3 == size)
  {
    uint64_t v13 = (const char *)&v3[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence terminated prematurely.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v13, (uint64_t)&__p);
LABEL_8:
    if (v61 < 0) {
      operator delete(__p);
    }
LABEL_10:
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t *)a1->__r_.__value_.__l.__size_;
    uint64_t v6 = *v5;
    LOBYTE(v7) = 7;
    switch(*(unsigned char *)(*v5 + *v3 + 32))
    {
      case 0x11:
        int v58 = v3;
        if (boost::cpp_regex_traits<char>::toi((uint64_t)v5, &v58, v3 + 1, 8))
        {
          uint64_t v8 = *(void *)a1->__r_.__value_.__l.__size_;
          std::string::size_type v9 = a1[5].__r_.__value_.__r.__words[2];
          uint64_t v10 = (unsigned __int8 *)(v9 - 1);
          do
          {
            *int v2 = (std::string::size_type)v10;
            unsigned int v11 = *v10--;
            --v9;
          }
          while (*(unsigned char *)(v8 + v11 + 32) != 12);
          uint64_t v12 = (const char *)(v9 - a1[5].__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid octal escape sequence.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v12, (uint64_t)&__p);
          goto LABEL_8;
        }
        uint64_t v33 = size - v3;
        if (size - v3 >= 4) {
          uint64_t v33 = 4;
        }
        unint64_t v34 = boost::cpp_regex_traits<char>::toi(a1->__r_.__value_.__l.__size_, v2, (unsigned char *)(a1[5].__r_.__value_.__r.__words[2] + v33), 8);
        if (v34 < 0x80) {
          goto LABEL_57;
        }
        uint64_t v35 = *(void *)a1->__r_.__value_.__l.__size_;
        std::string::size_type v36 = a1[5].__r_.__value_.__r.__words[2];
        unsigned int v37 = (unsigned __int8 *)(v36 - 1);
        do
        {
          *int v2 = (std::string::size_type)v37;
          unsigned int v38 = *v37--;
          --v36;
        }
        while (*(unsigned char *)(v35 + v38 + 32) != 12);
        unsigned int v39 = (const char *)(v36 - a1[5].__r_.__value_.__r.__words[0]);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Octal escape sequence is invalid.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v39, (uint64_t)&__p);
        goto LABEL_8;
      case 0x12:
        LOBYTE(v7) = 8;
        goto LABEL_45;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x24:
      case 0x25:
        goto LABEL_21;
      case 0x1C:
        goto LABEL_45;
      case 0x1D:
        LOBYTE(v7) = 12;
        goto LABEL_45;
      case 0x1E:
        LOBYTE(v7) = 10;
        goto LABEL_45;
      case 0x1F:
        LOBYTE(v7) = 13;
        goto LABEL_45;
      case 0x20:
        LOBYTE(v7) = 9;
        goto LABEL_45;
      case 0x21:
        LOBYTE(v7) = 11;
        goto LABEL_45;
      case 0x22:
        uint64_t v19 = v3 + 1;
        *int v2 = (std::string::size_type)(v3 + 1);
        if (v3 + 1 == size)
        {
          do
          {
            *int v2 = (std::string::size_type)v3;
            unsigned int v25 = *v3--;
            --v19;
          }
          while (*(unsigned char *)(v6 + v25 + 32) != 12);
          int v26 = (const char *)&v19[-a1[5].__r_.__value_.__r.__words[0]];
          std::string::basic_string[abi:ne180100]<0>(&__p, "Hexadecimal escape sequence terminated prematurely.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v26, (uint64_t)&__p);
        }
        else if (*(unsigned char *)(v6 + *v19 + 32) == 15)
        {
          unint64_t v20 = v3 + 2;
          *int v2 = (std::string::size_type)(v3 + 2);
          if (v3 + 2 == size)
          {
            do
            {
              *int v2 = (std::string::size_type)v19;
              unsigned int v27 = *v19--;
              --v20;
            }
            while (*(unsigned char *)(v6 + v27 + 32) != 12);
            int v28 = (const char *)&v20[-a1[5].__r_.__value_.__r.__words[0]];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Missing } in hexadecimal escape sequence.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v28, (uint64_t)&__p);
          }
          else
          {
            unint64_t v21 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, v2, size, 16);
            unint64_t v22 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
            uint64_t v23 = *(void *)a1->__r_.__value_.__l.__size_;
            if (v22 != (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_)
            {
              LOBYTE(v7) = v21;
              if ((v21 & 0x8000000000000000) == 0 && v21 <= 0x7F && *(unsigned char *)(v23 + *v22 + 32) == 16)
              {
                BOOL v24 = v22 + 1;
                goto LABEL_46;
              }
            }
            int v46 = v22 - 1;
            do
            {
              *int v2 = (std::string::size_type)v46;
              unsigned int v47 = *v46--;
              --v22;
            }
            while (*(unsigned char *)(v23 + v47 + 32) != 12);
            int v48 = (const char *)&v22[-a1[5].__r_.__value_.__r.__words[0]];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Hexadecimal escape sequence was invalid.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 10, v48, (uint64_t)&__p);
          }
        }
        else
        {
          uint64_t v40 = size - v19;
          if (size - v19 >= 2) {
            uint64_t v40 = 2;
          }
          unint64_t v34 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, v2, &v19[v40], 16);
          if (v34 < 0x100)
          {
LABEL_57:
            LOBYTE(v7) = v34;
            return (char)v7;
          }
          uint64_t v41 = *(void *)a1->__r_.__value_.__l.__size_;
          std::string::size_type v42 = a1[5].__r_.__value_.__r.__words[2];
          unsigned int v43 = (unsigned __int8 *)(v42 - 1);
          do
          {
            *int v2 = (std::string::size_type)v43;
            unsigned int v44 = *v43--;
            --v42;
          }
          while (*(unsigned char *)(v41 + v44 + 32) != 12);
          unsigned int v45 = (const char *)(v42 - a1[5].__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence did not encode a valid character.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v45, (uint64_t)&__p);
        }
        goto LABEL_8;
      case 0x23:
        int v29 = (char *)(v3 + 1);
        *int v2 = (std::string::size_type)(v3 + 1);
        if (v3 + 1 != size)
        {
          unsigned int v7 = *v29 - ((*v29 + ((*v29 >> 10) & 0x1F)) & 0xFFFFFFE0);
          ++v3;
          goto LABEL_45;
        }
        do
        {
          *int v2 = (std::string::size_type)v3;
          unsigned int v30 = *v3--;
          --v29;
        }
        while (*(unsigned char *)(v6 + v30 + 32) != 12);
        uint64_t v31 = &v29[-a1[5].__r_.__value_.__r.__words[0]];
        std::string::basic_string[abi:ne180100]<0>(&__p, "ASCII escape sequence terminated prematurely.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v31, (uint64_t)&__p);
        goto LABEL_8;
      case 0x26:
        LOBYTE(v7) = 27;
        goto LABEL_45;
      default:
        if (*(unsigned char *)(*v5 + *v3 + 32) == 56)
        {
          unsigned int v14 = (char *)(v3 + 1);
          *int v2 = (std::string::size_type)(v3 + 1);
          if (v3 + 1 == size)
          {
            do
            {
              *int v2 = (std::string::size_type)v3;
              unsigned int v18 = *v3--;
              --v14;
            }
            while (*(unsigned char *)(v6 + v18 + 32) != 12);
            goto LABEL_81;
          }
          if (*(unsigned char *)(v6 + *v14 + 32) != 15)
          {
LABEL_79:
            uint64_t v55 = *v5;
            unsigned int v56 = v14 - 1;
            do
            {
              *int v2 = (std::string::size_type)v56;
              unsigned int v57 = *v56--;
              --v14;
            }
            while (*(unsigned char *)(v55 + v57 + 32) != 12);
LABEL_81:
            int v17 = &v14[-a1[5].__r_.__value_.__r.__words[0]];
LABEL_82:
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v17);
            goto LABEL_10;
          }
          while (*(unsigned char *)(v6 + *v14 + 32) != 16)
          {
            *int v2 = (std::string::size_type)++v14;
            if (v14 == (char *)size)
            {
              uint64_t v15 = size - 1;
              do
              {
                *int v2 = (std::string::size_type)v15;
                unsigned int v16 = *v15--;
                --size;
              }
              while (*(unsigned char *)(v6 + v16 + 32) != 12);
              int v17 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
              goto LABEL_82;
            }
          }
          *int v2 = (std::string::size_type)(v14 + 1);
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(*v5, (char *)v3 + 2, v14, (uint64_t)&__p);
          char v49 = v61;
          if (v61 < 0)
          {
            if (v60)
            {
              if (v60 == 1)
              {
                p_p = __p;
                goto LABEL_71;
              }
              operator delete(__p);
              goto LABEL_78;
            }
          }
          else if (v61)
          {
            if (v61 == 1)
            {
              p_p = &__p;
LABEL_71:
              LOBYTE(v7) = *p_p;
              goto LABEL_75;
            }
LABEL_78:
            uint64_t v5 = (uint64_t *)a1->__r_.__value_.__l.__size_;
            unsigned int v14 = (char *)a1[5].__r_.__value_.__r.__words[2];
            goto LABEL_79;
          }
          uint64_t v51 = *(void *)a1->__r_.__value_.__l.__size_;
          std::string::size_type v52 = a1[5].__r_.__value_.__r.__words[2];
          unsigned int v53 = (unsigned __int8 *)(v52 - 1);
          do
          {
            *int v2 = (std::string::size_type)v53;
            unsigned int v54 = *v53--;
            --v52;
          }
          while (*(unsigned char *)(v51 + v54 + 32) != 12);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 3, (const char *)(v52 - a1[5].__r_.__value_.__r.__words[0]));
          LOBYTE(v7) = 0;
          char v49 = v61;
LABEL_75:
          if (v49 < 0) {
            operator delete(__p);
          }
          return (char)v7;
        }
LABEL_21:
        LOBYTE(v7) = *v3;
LABEL_45:
        BOOL v24 = v3 + 1;
LABEL_46:
        *int v2 = (std::string::size_type)v24;
        break;
    }
  }
  return (char)v7;
}

void sub_2242564F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref(uint64_t a1)
{
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v2 = boost::cpp_regex_traits<char>::toi(*(void *)(a1 + 8), &v11, (unsigned char *)(v11 + 1), 10);
  if (!v2 || (*(_DWORD *)(*(void *)a1 + 40) & 0x103) == 0x100)
  {
    uint64_t v3 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character((std::string *)a1);
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((void *)a1, v3);
    return 1;
  }
  int v5 = v2;
  if (v2 >= 1 && ((*(_DWORD *)(a1 + 36) >> (v2 - 1)) & 1) != 0)
  {
    *(void *)(a1 + 136) = v11;
    appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 13, 0x18uLL);
    appended[4] = v5;
    *((unsigned char *)appended + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
    return 1;
  }
  uint64_t v7 = **(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 136);
  std::string::size_type v9 = (unsigned __int8 *)(v8 - 1);
  do
  {
    *(void *)(a1 + 136) = v9;
    unsigned int v10 = *v9--;
    --v8;
  }
  while (*(unsigned char *)(v7 + v10 + 32) != 12);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 6, (const char *)(v8 - *(void *)(a1 + 120)));
  return 0;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_QE(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  int v4 = (char *)(v2 + 1);
  *(void *)(a1 + 136) = v2 + 1;
  uint64_t v5 = 1;
  while (1)
  {
    if (v2 + v5 == v3) {
      goto LABEL_10;
    }
    uint64_t v6 = **(void **)(a1 + 8);
    uint64_t v7 = v5;
    while (1)
    {
      uint64_t v8 = v2 + v7 + 1;
      int v9 = *(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v2 + v7) + 32);
      uint64_t v5 = v7 + 1;
      *(void *)(a1 + 136) = v8;
      if (v9 == 12) {
        break;
      }
      ++v7;
      if (v2 + v5 == v3) {
        goto LABEL_10;
      }
    }
    if (v8 == v3) {
      break;
    }
    if (*(unsigned char *)(v6 + *(unsigned __int8 *)(v2 + v7 + 1) + 32) == 47)
    {
      *(void *)(a1 + 136) = v2 + v7 + 2;
      uint64_t v5 = v7;
LABEL_10:
      uint64_t v10 = v5 - 1;
      if (v5 != 1)
      {
        do
        {
          unsigned int v11 = *v4++;
          boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((void *)a1, v11);
          --v10;
        }
        while (v10);
      }
      return 1;
    }
  }
  uint64_t v13 = (const char *)(v3 - *(void *)(a1 + 120));
  std::string::basic_string[abi:ne180100]<0>(__p, "Unterminated \\Q...\\E sequence.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v13, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2242567B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::named_subexpressions::get_id(unsigned int **this, signed int a2)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  if (v3 != *this)
  {
    unint64_t v4 = ((char *)v3 - (char *)*this) >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &v2[2 * (v4 >> 1)];
      signed int v7 = v6[1];
      uint64_t v8 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (v7 < a2) {
        uint64_t v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v2 == v3 || v2[1] != a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v2;
  }
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 14, 0x28uLL);
  unint64_t v5 = appended;
  uint64_t v6 = (void *)(a2 + 8);
  signed int v7 = *(void **)a2;
  if (*(void *)a2 == a2 + 8)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    int v9 = *(void **)a2;
    do
    {
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          unsigned int v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          int v9 = v11;
        }
        while (!v12);
      }
      ++v8;
      int v9 = v11;
    }
    while (v11 != v6);
  }
  appended[4] = v8;
  uint64_t v13 = *(std::string::value_type **)(a2 + 24);
  unsigned int v14 = *(std::string::value_type **)(a2 + 32);
  appended[5] = ((unint64_t)(v14 - v13) >> 2) & 0x7FFFFFFF;
  char v15 = *(void **)(a2 + 64);
  unsigned int v16 = (void *)(a2 + 72);
  if (v15 == (void *)(a2 + 72))
  {
    int v17 = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      unsigned int v18 = (void *)v15[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          unsigned int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v15[2];
          BOOL v12 = *v19 == (void)v15;
          char v15 = v19;
        }
        while (!v12);
      }
      ++v17;
      char v15 = v19;
    }
    while (v19 != v16);
  }
  appended[6] = v17;
  int v20 = *(_DWORD *)(a2 + 52);
  appended[7] = v20;
  int v21 = *(_DWORD *)(a2 + 56);
  appended[8] = v21;
  uint64_t v22 = *(void *)a1;
  if ((*(unsigned char *)(*(void *)a1 + 42) & 0x10) != 0)
  {
    int v23 = *(_DWORD *)(a1 + 88);
    if ((v23 & ~v20) == 0 || (*(_DWORD *)(a1 + 92) & ~v20) == 0) {
      appended[7] = *(_DWORD *)(a1 + 96) | v20;
    }
    if ((v23 & ~v21) == 0 || (*(_DWORD *)(a1 + 92) & ~v21) == 0) {
      appended[8] = *(_DWORD *)(a1 + 96) | v21;
    }
  }
  *((unsigned char *)appended + 36) = *(unsigned char *)(a2 + 48);
  *((unsigned char *)appended + 37) = *(unsigned char *)(a2 + 49) ^ 1;
  uint64_t v86 = *(void *)(v22 + 352);
  uint64_t v88 = a2;
  if (v7 != v6)
  {
    do
    {
      if (*((unsigned char *)v7 + 25))
      {
        if (*((unsigned char *)v7 + 26)) {
          unint64_t v24 = 3;
        }
        else {
          unint64_t v24 = 2;
        }
      }
      else
      {
        unint64_t v24 = 1;
      }
      unsigned int v25 = (unsigned char *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(void *)a1 + 344), v24);
      char v26 = *((unsigned char *)v7 + 25);
      if (*(unsigned char *)(a1 + 24)) {
        char v26 = (*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 8) + 8) + 40))(*(void *)(**(void **)(a1 + 8) + 8), v26);
      }
      *unsigned int v25 = v26;
      if (*((unsigned char *)v7 + 25))
      {
        char v27 = *((unsigned char *)v7 + 26);
        if (v27)
        {
          if (*(unsigned char *)(a1 + 24)) {
            char v27 = (*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 8) + 8) + 40))(*(void *)(**(void **)(a1 + 8) + 8), v27);
          }
          v25[1] = v27;
          v25 += 2;
        }
        else
        {
          ++v25;
        }
      }
      *unsigned int v25 = 0;
      int v28 = (void *)v7[1];
      if (v28)
      {
        do
        {
          int v29 = v28;
          int v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int v29 = (void *)v7[2];
          BOOL v12 = *v29 == (void)v7;
          signed int v7 = v29;
        }
        while (!v12);
      }
      signed int v7 = v29;
    }
    while (v29 != v6);
    uint64_t v13 = *(std::string::value_type **)(a2 + 24);
    unsigned int v14 = *(std::string::value_type **)(a2 + 32);
  }
  unint64_t v87 = v5;
  if (v13 == v14)
  {
LABEL_137:
    unint64_t v74 = *(void **)(v88 + 64);
    if (v74 != v16)
    {
      do
      {
        memset(&v94, 0, sizeof(v94));
        unsigned __int8 v75 = *((unsigned char *)v74 + 26);
        unsigned int v76 = (char *)v74 + 25;
        if (v75)
        {
          v95.__r_.__value_.__s.__data_[0] = *v76;
          *(_WORD *)((char *)&v95.__r_.__value_.__l.__data_ + boost::detail::shared_count::~shared_count(this + 1) = v75;
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(void **)(a1 + 8), (std::string::value_type *)&v95, &v95.__r_.__value_.__s.__data_[2], (uint64_t *)&__p);
        }
        else
        {
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(void **)(a1 + 8), v76, (std::string::value_type *)v74 + 26, (uint64_t *)&__p);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
        }
        std::string v94 = __p;
        size_t v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = v94.__r_.__value_.__l.__size_;
          if (!v94.__r_.__value_.__l.__size_) {
            goto LABEL_164;
          }
        }
        else
        {
          if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
            return 0;
          }
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        uint64_t v80 = (unsigned char *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(void *)a1 + 344), size + 1);
        int v81 = v80;
        if (v78 < 0) {
          size_t v77 = v94.__r_.__value_.__l.__size_;
        }
        if (v77)
        {
          if (v78 >= 0) {
            BOOL v82 = &v94;
          }
          else {
            BOOL v82 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          memmove(v80, v82, v77);
        }
        v81[v77] = 0;
        uint64_t v83 = (void *)v74[1];
        if (v83)
        {
          do
          {
            int v84 = v83;
            uint64_t v83 = (void *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            int v84 = (void *)v74[2];
            BOOL v12 = *v84 == (void)v74;
            unint64_t v74 = v84;
          }
          while (!v12);
        }
        if (v78 < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        unint64_t v74 = v84;
      }
      while (v84 != v16);
    }
    uint64_t result = (uint64_t)v87 + *(void *)(*(void *)a1 + 352) - v86;
    *(void *)(a1 + 16) = result;
    return result;
  }
  unsigned int v30 = v13 + 3;
  uint64_t v92 = v14;
  while (1)
  {
    uint64_t v32 = v30 - 3;
    std::string::value_type v31 = *(v30 - 3);
    std::string::value_type v33 = *(v30 - 2);
    if (*(unsigned char *)(a1 + 24)
      && (uint64_t v34 = *(void *)(**(void **)(a1 + 8) + 8),
          std::string::value_type v31 = (*(uint64_t (**)(uint64_t, void))(*(void *)v34 + 40))(v34, v31),
          *(unsigned char *)(a1 + 24)))
    {
      uint64_t v35 = *(void *)(**(void **)(a1 + 8) + 8);
      std::string::value_type v33 = (*(uint64_t (**)(uint64_t, void))(*(void *)v35 + 40))(v35, v33);
      std::string::value_type v36 = *(v30 - 1);
      std::string::value_type v37 = *v30;
      if (*(unsigned char *)(a1 + 24))
      {
        uint64_t v38 = *(void *)(**(void **)(a1 + 8) + 8);
        std::string::value_type v36 = (*(uint64_t (**)(uint64_t, void))(*(void *)v38 + 40))(v38, v36);
        if (*(unsigned char *)(a1 + 24))
        {
          uint64_t v39 = *(void *)(**(void **)(a1 + 8) + 8);
          std::string::value_type v37 = (*(uint64_t (**)(uint64_t, void))(*(void *)v39 + 40))(v39, v37);
        }
      }
    }
    else
    {
      std::string::value_type v36 = *(v30 - 1);
      std::string::value_type v37 = *v30;
    }
    memset(&v94, 0, sizeof(v94));
    memset(&__p, 0, sizeof(__p));
    if ((*(unsigned char *)(*(void *)a1 + 42) & 0x20) == 0)
    {
      if (v33)
      {
        v40.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v94;
        std::string::insert(&v94, v40, v31);
        std::string::size_type v41 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        std::string::size_type v42 = &v94;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type v41 = v94.__r_.__value_.__l.__size_;
          std::string::size_type v42 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        v43.__i_ = (char *)v42 + v41;
        std::string::insert(&v94, v43, v33);
      }
      else
      {
        v91 &= 0xFFFFFFFFFFFF0000;
        v94.__r_.__value_.__r.__words[0] = v91 & 0xFFFFFFFFFFFFFF00 | v31;
        *((unsigned char *)&v94.__r_.__value_.__s + 23) = 1;
      }
      std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
      }
      v46.__i_ = (char *)p_p + v44;
      if (v37)
      {
        std::string::insert(&__p, v46, v36);
        std::string::size_type v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v48 = &__p;
        }
        else {
          int v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
        }
        v49.__i_ = (char *)v48 + v47;
        std::string::insert(&__p, v49, v37);
      }
      else
      {
        std::string::insert(&__p, v46, v36);
      }
      goto LABEL_92;
    }
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(void **)(a1 + 8), &v95);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    std::string v94 = v95;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(void **)(a1 + 8), &v95);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v95;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v94.__r_.__value_.__l.__size_)
      {
        operator delete(v94.__r_.__value_.__l.__data_);
LABEL_85:
        v90 &= 0xFFFFFFFFFFFF0000;
        v94.__r_.__value_.__r.__words[0] = v90;
        v94.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v94.__r_.__value_.__s + 23) = 1;
      }
    }
    else if (!*((unsigned char *)&v94.__r_.__value_.__s + 23))
    {
      goto LABEL_85;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_) {
        goto LABEL_92;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_92;
    }
    v89 &= 0xFFFFFFFFFFFF0000;
    __p.__r_.__value_.__r.__words[0] = v89;
    __p.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
LABEL_92:
    char v50 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    int v51 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v54 = &__p;
    }
    else {
      unsigned int v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v94.__r_.__value_.__l.__size_;
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v56 = &v94;
    }
    else {
      unsigned int v56 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    if (v55 >= v53) {
      size_t v57 = v53;
    }
    else {
      size_t v57 = v55;
    }
    int v58 = memcmp(v54, v56, v57);
    BOOL v59 = v53 < v55;
    if (v58) {
      BOOL v59 = v58 < 0;
    }
    if (v59) {
      break;
    }
    uint64_t v60 = (unsigned char *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(void *)a1 + 344), v55 + v53 + 2);
    char v61 = v60;
    std::string::size_type v62 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    char v63 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    std::string::size_type v64 = v94.__r_.__value_.__l.__size_;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v65 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v65 = v94.__r_.__value_.__l.__size_;
    }
    if (v65)
    {
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v66 = &v94;
      }
      else {
        uint64_t v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      memmove(v60, v66, v65);
      std::string::size_type v62 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      std::string::size_type v64 = v94.__r_.__value_.__l.__size_;
      char v63 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    }
    if (v63 < 0) {
      std::string::size_type v62 = v64;
    }
    v61[v62] = 0;
    std::string::size_type v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v67 = v94.__r_.__value_.__l.__size_;
    }
    unint64_t v68 = &v61[v67 + 1];
    std::string::size_type v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v71 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v72 = __p.__r_.__value_.__l.__size_;
    }
    if (v72)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v73 = &__p;
      }
      else {
        unsigned int v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v68, v73, v72);
      std::string::size_type v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v71 = __p.__r_.__value_.__l.__size_;
      char v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v70 < 0) {
      std::string::size_type v69 = v71;
    }
    v68[v69] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    v30 += 4;
    if (v32 + 4 == v92) {
      goto LABEL_137;
    }
  }
  if (v51 < 0)
  {
    operator delete(v52);
    if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_164:
    }
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  else if (v50 < 0)
  {
    goto LABEL_164;
  }
  return 0;
}

void sub_224257178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(std::string *a1, uint64_t a2)
{
  std::string::size_type size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
  std::string::size_type v4 = a1[5].__r_.__value_.__r.__words[2];
  a1[5].__r_.__value_.__r.__words[2] = v4 + 1;
  if (size == (unsigned __int8 *)(v4 + 1))
  {
    int v9 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, v9, (uint64_t)&__p);
    goto LABEL_6;
  }
  uint64_t v6 = (uint64_t *)a1->__r_.__value_.__l.__size_;
  uint64_t v7 = *v6;
  int v8 = *(unsigned __int8 *)(*v6 + *(unsigned __int8 *)(v4 + 1) + 32);
  if (v8 == 37)
  {
    unsigned int v11 = (char *)(v4 + 2);
    a1[5].__r_.__value_.__r.__words[2] = v4 + 2;
    if (size == (unsigned __int8 *)(v4 + 2)) {
      goto LABEL_25;
    }
    a1[5].__r_.__value_.__r.__words[2] = v4 + 3;
    if (size == (unsigned __int8 *)(v4 + 3)) {
      goto LABEL_25;
    }
    BOOL v12 = (char *)&__p + 1;
    uint64_t v13 = (unsigned __int8 *)(v4 + 4);
    std::string::size_type v14 = -4 - v4;
    while (1)
    {
      int v15 = *(unsigned __int8 *)(v7 + *(v13 - 1) + 32);
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
      if (v15 == 37) {
        break;
      }
      --v14;
      BOOL v28 = v13++ == size;
      if (v28) {
        goto LABEL_25;
      }
    }
    if (v13 == size || *(unsigned char *)(v7 + *v13 + 32) != 10)
    {
      std::string::size_type v22 = -(uint64_t)(a1[5].__r_.__value_.__r.__words[0] + v14);
      std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, (const char *)v22, (uint64_t)&__p);
      goto LABEL_6;
    }
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(*v6, v11, (char *)v13 - 1, (uint64_t)&__p);
    if ((char)v39 < 0)
    {
      if (v38 - 3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        char v36 = 0;
        char v35 = *(unsigned char *)__p;
        if (v38 <= 1)
        {
LABEL_59:
          char v36 = 0;
          goto LABEL_60;
        }
        BOOL v12 = (char *)__p + 1;
LABEL_58:
        char v36 = *v12;
LABEL_60:
        boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_equivalent(a2, &v35);
        char v27 = 0;
        ++a1[5].__r_.__value_.__r.__words[2];
LABEL_61:
        if ((char)v39 < 0) {
          operator delete(__p);
        }
        return (v27 & 1) == 0;
      }
    }
    else if (v39 - 3 > 0xFFFFFFFD)
    {
      char v36 = 0;
      char v35 = (char)__p;
      if (v39 <= 1u) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 3, &v11[-a1[5].__r_.__value_.__r.__words[0]]);
    char v27 = 1;
    goto LABEL_61;
  }
  if (v8 == 36 && (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x103) != 0x101)
  {
    unsigned int v16 = (char *)(v4 + 2);
    a1[5].__r_.__value_.__r.__words[2] = v4 + 2;
    if (size != (unsigned __int8 *)(v4 + 2))
    {
      int v17 = (char *)(v4 + 3);
      a1[5].__r_.__value_.__r.__words[2] = v4 + 3;
      if (size != (unsigned __int8 *)(v4 + 3))
      {
        std::string::size_type v18 = -4 - v4;
        uint64_t v19 = (unsigned __int8 *)(v4 + 4);
        while (1)
        {
          int v20 = *(unsigned __int8 *)(v7 + *(v19 - 1) + 32);
          a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
          if (v20 == 36) {
            break;
          }
          --v18;
          BOOL v28 = v19++ == size;
          if (v28) {
            goto LABEL_25;
          }
        }
        if (v19 != size && *(unsigned char *)(v7 + *v19 + 32) == 10)
        {
          int v23 = *(unsigned __int8 *)(v7 + *v16 + 32);
          if (v23 == 4) {
            unint64_t v24 = v17;
          }
          else {
            unint64_t v24 = v16;
          }
          int v25 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v7, v24, (char *)v19 - 1);
          if (v25)
          {
            if (v23 == 4) {
              *(_DWORD *)(a2 + 56) |= v25;
            }
            else {
              *(_DWORD *)(a2 + 52) |= v25;
            }
            *(unsigned char *)(a2 + 6CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
            ++a1[5].__r_.__value_.__r.__words[2];
            return 1;
          }
          BOOL v28 = &v24[v18] != (char *)-2 || *(unsigned char *)(a2 + 60) == 0;
          if (!v28)
          {
            std::string::size_type v30 = a1[5].__r_.__value_.__l.__size_;
            std::string::size_type v29 = a1[5].__r_.__value_.__r.__words[2];
            a1[5].__r_.__value_.__r.__words[2] = v29 + 1;
            if (v29 + 1 != v30)
            {
              uint64_t v31 = *(void *)a1->__r_.__value_.__l.__size_;
              if (*(unsigned char *)(v31 + *(unsigned __int8 *)(v29 + 1) + 32) == 10)
              {
                int v32 = *(unsigned __int8 *)(v31 + *v24 + 32);
                if (v32 == 21)
                {
                  a1[5].__r_.__value_.__r.__words[2] = v29 + 2;
                  std::string::value_type v33 = (uint64_t *)a1;
                  int v34 = 10;
                  goto LABEL_69;
                }
                if (v32 == 20)
                {
                  a1[5].__r_.__value_.__r.__words[2] = v29 + 2;
                  std::string::value_type v33 = (uint64_t *)a1;
                  int v34 = 9;
LABEL_69:
                  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v33, v34, 0x10uLL);
                  return 0;
                }
              }
            }
          }
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 4, &v24[-a1[5].__r_.__value_.__r.__words[0]]);
          return 0;
        }
        std::string::size_type v26 = -(uint64_t)(a1[5].__r_.__value_.__r.__words[0] + v18);
        std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, (const char *)v26, (uint64_t)&__p);
LABEL_6:
        if ((char)v39 < 0) {
          operator delete(__p);
        }
        return 0;
      }
    }
LABEL_25:
    int v21 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, v21, (uint64_t)&__p);
    goto LABEL_6;
  }
  a1[5].__r_.__value_.__r.__words[2] = v4;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal((uint64_t)a1, a2);
  return 1;
}

void sub_224257740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_equivalent(uint64_t a1, char *a2)
{
  uint64_t result = std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)(a1 + 64), a2, a2);
  if (a2[1])
  {
    *(unsigned char *)(a1 + 49) = 1;
    uint64_t result = std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a2, a2);
    if (a2[1]) {
      *(unsigned char *)(a1 + 49) = 1;
    }
  }
  *(unsigned char *)(a1 + 6CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic_escape(std::string *a1)
{
  std::string::size_type size = a1[5].__r_.__value_.__l.__size_;
  std::string::size_type v2 = a1[5].__r_.__value_.__r.__words[2];
  std::string::size_type v4 = (unsigned __int8 *)(v2 + 1);
  a1[5].__r_.__value_.__r.__words[2] = v2 + 1;
  if (v2 + 1 != size)
  {
    uint64_t v5 = *v4;
    BOOL v6 = 0;
    switch(*(unsigned char *)(*(void *)a1->__r_.__value_.__l.__size_ + v5 + 32))
    {
      case 1:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren((uint64_t)a1);
      case 2:
        return v6;
      case 7:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 4) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        uint64_t v9 = 1;
        uint64_t v10 = -1;
        goto LABEL_16;
      case 8:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 4) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        uint64_t v9 = 0;
        uint64_t v10 = 1;
LABEL_16:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v9, v10);
      case 0xB:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 8) == 0) {
          goto LABEL_43;
        }
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt((uint64_t)a1);
      case 0xF:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) != 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range((uint64_t)a1, 1);
      case 0x10:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) != 0) {
          goto LABEL_43;
        }
        unsigned int v11 = (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]];
        std::string::basic_string[abi:ne180100]<0>(&__p, "Found a closing repetition operator } with no corresponding {.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 9, v11, (uint64_t)&__p);
LABEL_48:
        if (SHIBYTE(v19) < 0) {
          operator delete(__p);
        }
        return 0;
      case 0x11:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref((uint64_t)a1);
      case 0x12:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 7;
        goto LABEL_40;
      case 0x13:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 8;
        goto LABEL_40;
      case 0x14:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 9;
        goto LABEL_40;
      case 0x15:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 10;
        goto LABEL_40;
      case 0x18:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 11;
        goto LABEL_40;
      case 0x19:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0) {
          goto LABEL_43;
        }
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        int v8 = 12;
LABEL_40:
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v8, 0x10uLL);
        return 1;
      default:
        if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) != 0)
        {
          HIDWORD(v12) = (char)v5 - 67;
          LODWORD(v12) = HIDWORD(v12);
          int v13 = 1;
          switch((v12 >> 2))
          {
            case 0u:
            case 8u:
              std::string::size_type v14 = (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]];
              std::string::basic_string[abi:ne180100]<0>(&__p, "The \\c and \\C escape sequences are not supported by POSIX basic regular expressions: try the Perl syntax instead.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v14, (uint64_t)&__p);
              goto LABEL_48;
            case 4u:
              goto LABEL_55;
            case 5u:
              std::string __p = &v18;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              char v27 = &v28;
              int v25 = 0;
              __int16 v23 = 1;
              goto LABEL_52;
            case 0xCu:
              int v13 = 0;
LABEL_55:
              return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code((uint64_t)a1, v13);
            case 0xDu:
              std::string __p = &v18;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              char v27 = &v28;
              __int16 v23 = 0;
              int v25 = 0;
LABEL_52:
              int v24 = a1[3].__r_.__value_.__r.__words[1];
              char v26 = 0;
              appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set((uint64_t)a1, (uint64_t)&__p);
              BOOL v6 = appended != 0;
              std::string::size_type v16 = a1[5].__r_.__value_.__r.__words[2];
              if (appended) {
                a1[5].__r_.__value_.__r.__words[2] = v16 + 1;
              }
              else {
                boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 4, (const char *)(v16 - a1[5].__r_.__value_.__r.__words[0]));
              }
              boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)&__p);
              return v6;
            default:
              break;
          }
        }
LABEL_43:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
    }
  }
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 8, (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]]);
  return 0;
}

void sub_224257C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code(uint64_t a1, int a2)
{
  std::string::size_type v4 = *(unsigned __int8 **)(a1 + 128);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 136);
  uint64_t v5 = v3 + 1;
  *(void *)(a1 + 136) = v3 + 1;
  if (v3 + 1 == v4)
  {
    uint64_t v7 = **(void **)(a1 + 8);
    do
    {
      *(void *)(a1 + 136) = v3;
      unsigned int v8 = *v3--;
      --v5;
    }
    while (*(unsigned char *)(v7 + v8 + 32) != 12);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, &v5[-*(void *)(a1 + 120)]);
    return 0;
  }
  int v15 = (uint64_t *)v16;
  v16[0] = 0;
  v16[1] = 0;
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v25[0] = 0;
  v25[1] = 0;
  int v24 = v25;
  __int16 v20 = 0;
  int v21 = 0;
  int v22 = 0;
  char v23 = 1;
  if (a2) {
    LOBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
  }
  int v6 = (char)*v5;
  if (v6 <= 59)
  {
    switch(*v5)
    {
      case ' ':
        goto LABEL_18;
      case '""':
        __int16 v14 = 34;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 39;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 96;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '\'':
        __int16 v14 = 39;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 44;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 35;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '(':
        __int16 v14 = 40;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 91;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 123;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case ')':
        __int16 v14 = 41;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 93;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14)) {
          HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
        }
        char v23 = 0;
        __int16 v14 = 125;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '.':
        int v11 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(void **)(a1 + 8), boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code(BOOL)::s_punct, "N5boost11regex_errorE");
        int v10 = v21 | v11;
        goto LABEL_56;
      default:
        goto LABEL_65;
    }
  }
  if (v6 <= 94)
  {
    if (v6 == 60)
    {
      __int16 v14 = 59;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    }
    else
    {
      if (v6 != 62) {
        goto LABEL_65;
      }
      __int16 v14 = 10;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
      if (HIBYTE(v14)) {
        HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
      }
      char v23 = 0;
      __int16 v14 = 12;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    }
  }
  else
  {
    if (v6 != 95)
    {
      if (v6 == 119)
      {
        int v10 = *(_DWORD *)(a1 + 80);
        goto LABEL_56;
      }
      if (v6 == 115)
      {
LABEL_18:
        int v10 = *(_DWORD *)(a1 + 84);
LABEL_56:
        int v21 = v10;
        goto LABEL_60;
      }
LABEL_65:
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, &v5[-*(void *)(a1 + 120)]);
      uint64_t v9 = 0;
      goto LABEL_66;
    }
    __int16 v14 = 36;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 38;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 42;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 43;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 45;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 95;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 60;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14)) {
      HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
    }
    char v23 = 0;
    __int16 v14 = 62;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
  }
LABEL_58:
  if (HIBYTE(v14)) {
    HIBYTE(v2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
  }
LABEL_60:
  char v23 = 0;
  if (HIBYTE(v20)) {
    uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&v15);
  }
  else {
    uint64_t appended = (uint64_t)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&v15);
  }
  uint64_t v5 = *(unsigned char **)(a1 + 136);
  if (!appended) {
    goto LABEL_65;
  }
  *(void *)(a1 + 136) = v5 + 1;
  uint64_t v9 = 1;
LABEL_66:
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v24, v25[0]);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v15, v16[0]);
  return v9;
}

void sub_224258260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *result, int a2, uint64_t a3, std::string *this, const char *a5)
{
  unsigned int v8 = result;
  std::string::size_type v9 = result->__r_.__value_.__r.__words[0];
  if (!*(_DWORD *)(result->__r_.__value_.__r.__words[0] + 44)) {
    *(_DWORD *)(v9 + 44) = a2;
  }
  std::string::pointer data = result[5].__r_.__value_.__l.__data_;
  std::string::size_type size = result[5].__r_.__value_.__l.__size_;
  result[5].__r_.__value_.__r.__words[2] = size;
  uint64_t v12 = 10;
  if (a3 > 10) {
    uint64_t v12 = a3;
  }
  uint64_t v13 = v12 - 10;
  if (a5 == (const char *)a3) {
    __int16 v14 = (const char *)v13;
  }
  else {
    __int16 v14 = a5;
  }
  uint64_t v15 = size - (void)data;
  if (v15 >= a3 + 10) {
    std::string::size_type v16 = (const char *)(a3 + 10);
  }
  else {
    std::string::size_type v16 = (const char *)v15;
  }
  if (a2 != 17)
  {
    if (v15 <= a3 + 10 && v14 == 0) {
      uint64_t v18 = "  The error occurred while parsing the regular expression: '";
    }
    else {
      uint64_t v18 = "  The error occurred while parsing the regular expression fragment: '";
    }
    std::string::append(this, v18);
    if (v14 != v16)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)&v14[v8[5].__r_.__value_.__r.__words[0]], (char *)(v8[5].__r_.__value_.__r.__words[0] + a3), a3 - (void)v14);
      if ((v24 & 0x80u) == 0) {
        p_p = (std::runtime_error_vtbl *)&__p;
      }
      else {
        p_p = __p.__vftable;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type imp = v24;
      }
      else {
        std::string::size_type imp = (std::string::size_type)__p.__imp_.__imp_;
      }
      std::string::append(this, (const std::string::value_type *)p_p, imp);
      if ((char)v24 < 0) {
        operator delete(__p.__vftable);
      }
      std::string::append(this, ">>>HERE>>>");
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)(v8[5].__r_.__value_.__r.__words[0] + a3), (char *)&v16[v8[5].__r_.__value_.__r.__words[0]], (unint64_t)&v16[-a3]);
      if ((v24 & 0x80u) == 0) {
        int v21 = (std::runtime_error_vtbl *)&__p;
      }
      else {
        int v21 = __p.__vftable;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v22 = v24;
      }
      else {
        std::string::size_type v22 = (std::string::size_type)__p.__imp_.__imp_;
      }
      std::string::append(this, (const std::string::value_type *)v21, v22);
      if ((char)v24 < 0) {
        operator delete(__p.__vftable);
      }
    }
    uint64_t result = std::string::append(this, "'.");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
  }
  if ((*(unsigned char *)(v9 + 42) & 4) == 0)
  {
    boost::regex_error::regex_error(&__p, this, a2, (const char *)a3);
    boost::regex_error::raise((boost::regex_error *)&__p);
  }
  return result;
}

void sub_2242584AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_recursions(uint64_t result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = (unsigned int ***)result;
    std::string::size_type v4 = a2;
    do
    {
      if (*v4 == 29)
      {
        uint64_t v7 = *((void *)v4 + 2);
        if (v7 >= 10001)
        {
          uint64_t result = boost::re_detail_106800::named_subexpressions::get_id(*v3, v7);
          uint64_t v7 = (int)result;
        }
        if ((v7 & 0x8000000000000000) == 0)
        {
          unsigned int v8 = a2;
          while (*v8 || v7 != v8[4])
          {
            unsigned int v8 = (int *)*((void *)v8 + 1);
            if (!v8) {
              goto LABEL_18;
            }
          }
          *((void *)v4 + 2) = v8;
          while (1)
          {
            unsigned int v8 = (int *)*((void *)v8 + 1);
            if (!v8) {
              goto LABEL_33;
            }
            int v10 = *v8;
            if ((*v8 - 22) >= 4)
            {
              if (v10 == 1)
              {
                if (v7 == v8[4]) {
                  goto LABEL_33;
                }
                continue;
              }
              if (v10 != 18) {
                continue;
              }
            }
            int v11 = v8[76];
            if (v11)
            {
              if (v11 >= 1) {
                void v4[6] = v11 - 1;
              }
              goto LABEL_33;
            }
          }
        }
LABEL_18:
        std::string::size_type v9 = *v3;
        if (!*((_DWORD *)*v3 + 11)) {
          *((_DWORD *)v9 + 1boost::detail::shared_count::~shared_count(this + 1) = 2;
        }
        v9[6] = 0;
        v9[7] = 0;
        if ((*((unsigned char *)v9 + 42) & 4) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered a forward reference to a recursive sub-expression that does not exist.");
          boost::regex_error::regex_error(&v12, &__p, 2, 0);
          boost::regex_error::raise((boost::regex_error *)&v12);
        }
      }
      else if (*v4 == 27)
      {
        int v5 = v4[4];
        if (v5 <= -10001)
        {
          uint64_t result = boost::re_detail_106800::named_subexpressions::get_id(*v3, ~v5);
          if ((int)result <= 0)
          {
            int v6 = *v3;
            if (!*((_DWORD *)*v3 + 11)) {
              *((_DWORD *)v6 + 1boost::detail::shared_count::~shared_count(this + 1) = 2;
            }
            v6[6] = 0;
            void v6[7] = 0;
            if ((*((unsigned char *)v6 + 42) & 4) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered a forward reference to a marked sub-expression that does not exist.");
              boost::regex_error::regex_error(&v12, &__p, 2, 0);
              boost::regex_error::raise((boost::regex_error *)&v12);
            }
          }
        }
      }
LABEL_33:
      std::string::size_type v4 = (int *)*((void *)v4 + 1);
    }
    while (v4);
  }
  return result;
}

void sub_2242586F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    unint64_t v12 = a1[1] - result;
    if (v12 >= a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = a1[1] - result;
    }
    for (; v13; --v13)
      *result++ = *a3;
    BOOL v14 = a2 >= v12;
    unint64_t v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      std::string::size_type v16 = a1[1];
      int v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      unint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = 2 * v6;
    if (2 * v6 <= v4) {
      uint64_t v8 = v4;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    uint64_t result = std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, v9);
    int v10 = a1[1];
    int v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v4 = 0;
    while (2)
    {
      switch(*(_DWORD *)v2)
      {
        case 0:
          unsigned int v5 = *(_DWORD *)(v2 + 16);
          if (v5 < 0xFFFFFFFE)
          {
            if (v5 != -3) {
              goto LABEL_22;
            }
            uint64_t v6 = *(void *)(v2 + 8);
          }
          else
          {
            uint64_t v6 = *(void *)(*(void *)(v2 + 8) + 16);
          }
          uint64_t v7 = (uint64_t *)(v6 + 8);
          goto LABEL_15;
        case 1:
          if (*(_DWORD *)(v2 + 16) > 0xFFFFFFFD) {
            return v4;
          }
          goto LABEL_22;
        case 2:
          uint64_t v4 = (*(_DWORD *)(v2 + 16) + v4);
          goto LABEL_22;
        case 5:
        case 0xF:
          goto LABEL_21;
        case 0xD:
        case 0x12:
        case 0x13:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
          int repeat_type = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(a1, (unsigned int *)v2);
          *(_DWORD *)uint64_t v2 = repeat_type;
          if ((repeat_type - 22) >= 3 && (repeat_type != 25 || !*(unsigned char *)(*(void *)(v2 + 8) + 37))) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v9 = *(void *)(v2 + 296);
          if (v9 != *(void *)(v2 + 288)) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v4 = (v4 + v9);
          goto LABEL_14;
        case 0xE:
          if (!*(unsigned char *)(v2 + 37)) {
            return 0xFFFFFFFFLL;
          }
LABEL_21:
          uint64_t v4 = (v4 + 1);
          goto LABEL_22;
        case 0x10:
LABEL_14:
          uint64_t v7 = (uint64_t *)(v2 + 16);
          goto LABEL_15;
        case 0x11:
          int v11 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *(void *)(v2 + 8));
          if (v11 != boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *(void *)(v2 + 16))|| v11 <= -1)
          {
            return 0xFFFFFFFFLL;
          }
          else
          {
            return (v11 + v4);
          }
        default:
LABEL_22:
          uint64_t v7 = (uint64_t *)(v2 + 8);
LABEL_15:
          uint64_t v2 = *v7;
          if (!*v7) {
            return 0xFFFFFFFFLL;
          }
          continue;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

std::string::value_type *boost::re_detail_106800::re_is_set_member<char *,char,boost::regex_traits<char,boost::cpp_regex_traits<char>>,unsigned int>(std::string::value_type *a1, std::string::value_type *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5 = a1;
  if (a1 == a2) {
    return v5;
  }
  uint64_t v9 = (const std::string::value_type *)(a3 + 40);
  int v10 = *(uint64_t **)(a4 + 24);
  if (*(_DWORD *)(a3 + 16))
  {
    unsigned int v12 = 0;
    do
    {
      LOBYTE(v13) = *v9;
      if (*v9)
      {
        uint64_t v14 = 0;
        do
        {
          std::string::value_type v15 = v5[v14];
          if (a5)
          {
            std::string::value_type v15 = (*(uint64_t (**)(void, void))(**(void **)(*v10 + 8) + 40))(*(void *)(*v10 + 8), v15);
            LOBYTE(v13) = v9[v14];
          }
          if (v15 != v13) {
            break;
          }
          std::string::size_type v16 = &v9[v14++];
          int v13 = *((unsigned __int8 *)v16 + 1);
        }
        while (v13 && &v5[v14] != a2);
        uint64_t v18 = &v5[v14];
        v9 += v14;
        if (!(_BYTE)v13)
        {
          if (v18 == v5) {
            uint64_t v18 = v5 + 1;
          }
          if (!*(unsigned char *)(a3 + 36)) {
            return v18;
          }
          return v5;
        }
        while (*(unsigned __int8 *)v9++)
          ;
      }
      else
      {
        std::string::value_type v20 = *v5;
        if (a5) {
          std::string::value_type v20 = (*(uint64_t (**)(void, void))(**(void **)(*v10 + 8) + 40))(*(void *)(*v10 + 8), v20);
        }
        if (!v20) {
          goto LABEL_94;
        }
        ++v9;
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)(a3 + 16));
  }
  std::string::value_type v21 = *v5;
  if (a5) {
    std::string::value_type v21 = (*(uint64_t (**)(void, void))(**(void **)(*v10 + 8) + 40))(*(void *)(*v10 + 8), v21);
  }
  if (!*(_DWORD *)(a3 + 20))
  {
    if (!*(_DWORD *)(a3 + 24)) {
      goto LABEL_90;
    }
    memset(&v40, 0, sizeof(v40));
    goto LABEL_64;
  }
  memset(&v40, 0, sizeof(v40));
  if ((*(unsigned char *)(a4 + 42) & 0x20) != 0)
  {
    std::string::value_type v38 = v21;
    std::string::value_type v39 = 0;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(*v10, &v37);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    std::string v40 = v37;
  }
  else
  {
    std::string::assign(&v40, 1uLL, v21);
  }
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_64:
    if (!*(_DWORD *)(a3 + 24)) {
      goto LABEL_83;
    }
    std::string::value_type v38 = v21;
    std::string::value_type v39 = 0;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(*v10, &v38, &v39, (uint64_t *)&v37);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    std::string v40 = v37;
    if (!*(_DWORD *)(a3 + 24))
    {
LABEL_83:
      char v34 = 1;
      goto LABEL_86;
    }
    int v30 = 0;
    while (1)
    {
      if (!*v9)
      {
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          int v31 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
          if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 1)
          {
            int v32 = &v40;
            goto LABEL_77;
          }
          goto LABEL_78;
        }
        if (v40.__r_.__value_.__l.__size_ == 1)
        {
          int v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
LABEL_77:
          int v31 = v32->__r_.__value_.__s.__data_[0];
LABEL_78:
          if (!v31) {
            goto LABEL_84;
          }
          goto LABEL_79;
        }
        if (!v40.__r_.__value_.__l.__size_) {
          goto LABEL_84;
        }
      }
LABEL_79:
      if (!std::string::compare(&v40, v9)) {
        goto LABEL_84;
      }
      ++v9;
      while (*(unsigned __int8 *)v9++)
        ;
      if (++v30 >= *(_DWORD *)(a3 + 24)) {
        goto LABEL_83;
      }
    }
  }
  int v22 = 0;
  while (1)
  {
    if (!*v9)
    {
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v40.__r_.__value_.__l.__size_) {
          goto LABEL_36;
        }
        if (v40.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_35;
        }
        char v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
        goto LABEL_52;
      }
      if (!*((unsigned char *)&v40.__r_.__value_.__s + 23)) {
        goto LABEL_36;
      }
      if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 1)
      {
        char v27 = &v40;
LABEL_52:
        if (!v27->__r_.__value_.__s.__data_[0]) {
          goto LABEL_36;
        }
      }
    }
LABEL_35:
    if (std::string::compare(&v40, v9) < 0)
    {
      char v23 = v9 + 1;
      while (*(unsigned __int8 *)v23++)
        ;
      goto LABEL_61;
    }
LABEL_36:
    char v23 = v9 + 1;
    while (*(unsigned __int8 *)v23++)
      ;
    if (*v23) {
      goto LABEL_60;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v40.__r_.__value_.__l.__size_ != 1)
      {
        if (!v40.__r_.__value_.__l.__size_) {
          break;
        }
        goto LABEL_60;
      }
      char v26 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    else
    {
      int v25 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v40.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_59;
      }
      char v26 = &v40;
    }
    int v25 = v26->__r_.__value_.__s.__data_[0];
LABEL_59:
    if (!v25) {
      break;
    }
LABEL_60:
    if (std::string::compare(&v40, v23) <= 0) {
      break;
    }
LABEL_61:
    uint64_t v9 = v23 + 1;
    while (*(unsigned __int8 *)v9++)
      ;
    if (++v22 >= *(_DWORD *)(a3 + 20)) {
      goto LABEL_64;
    }
  }
LABEL_84:
  char v34 = 0;
  if (!*(unsigned char *)(a3 + 36)) {
    ++v5;
  }
LABEL_86:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (v34) {
      goto LABEL_90;
    }
  }
  else
  {
    if ((v34 & 1) == 0) {
      return v5;
    }
LABEL_90:
    if (!boost::cpp_regex_traits<char>::isctype((uint64_t)v10, v21, *(_DWORD *)(a3 + 28)))
    {
      int v35 = *(_DWORD *)(a3 + 32);
      if (!v35 || boost::cpp_regex_traits<char>::isctype((uint64_t)v10, v21, v35))
      {
        v5 += *(unsigned __int8 *)(a3 + 36);
        return v5;
      }
    }
LABEL_94:
    if (!*(unsigned char *)(a3 + 36)) {
      ++v5;
    }
  }
  return v5;
}

void sub_224258ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *boost::regex_error::regex_error(std::runtime_error *a1, const std::string *a2, int a3, const char *a4)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_26D774510;
  LODWORD(result[1].__vftable) = a3;
  result[1].__imp_.__imp_ = a4;
  return result;
}

void boost::regex_error::~regex_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

void boost::regex_error::raise(boost::regex_error *this)
{
}

void boost::throw_exception<boost::regex_error>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x50uLL);
  std::runtime_error::runtime_error(&v3, (const std::runtime_error *)a1);
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_26D774668;
  unsigned int v5 = &unk_26D774690;
  uint64_t v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_224259054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *a13)
{
  a13 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v14);
  std::runtime_error::~runtime_error(&a10);
  if (v15) {
    __cxa_free_exception(v13);
  }
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::raise_runtime_error(const std::runtime_error *this, const std::runtime_error *a2)
{
}

void boost::re_detail_106800::mem_block_cache::~mem_block_cache(boost::re_detail_106800::mem_block_cache *this)
{
  for (uint64_t i = 0; i != 128; i += 8)
  {
    if (atomic_load((unint64_t *)((char *)this + i)))
    {
      long long v4 = (void *)atomic_load((unint64_t *)((char *)this + i));
      operator delete(v4);
    }
  }
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = &unk_26D7542E8;
  long long v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D774510;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v5;
  *(void *)(a1 + 32) = &unk_26D754388;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26D7745C8;
  *(void *)(a1 + 32) = &unk_26D774600;
  *(void *)(a1 + 72) = &unk_26D774638;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 40), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 72) = &unk_26D7542E8;
  long long v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D774510;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_26D754388;
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26D7745C8;
  *(void *)(a1 + 32) = &unk_26D774600;
  *(void *)(a1 + 72) = &unk_26D774638;
  return a1;
}

void sub_224259300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone()
{
}

void sub_22425940C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4036D0BA4ELL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_224259478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 4) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::regex_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::regex_error>::~error_info_injector(uint64_t a1)
{
}

void sub_22425974C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t TCMLComputeWrapData(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x263F10660];
  id v2 = a1;
  uint64_t v3 = [v2 bytes];
  uint64_t v4 = [v2 length];

  return [v1 dataWithImmutableBytesNoCopy:v3 length:v4];
}

uint64_t TCMLComputeWrapBuffer(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x263F10660];
  id v2 = a1;
  uint64_t v3 = [v2 mutableBytes];
  uint64_t v4 = [v2 length];

  return [v1 dataWithBytesNoCopy:v3 length:v4];
}

const char *boost::re_detail_106800::get_default_error_string(int a1)
{
  if (a1 <= 21) {
    return boost::re_detail_106800::get_default_error_string(boost::regex_constants::error_type)::s_default_error_messages[a1];
  }
  else {
    return "Unknown error.";
  }
}

size_t boost::re_detail_106800::lookup_default_collate_name@<X0>(size_t result@<X0>, uint64_t a2@<X8>)
{
  size_t v2 = result;
  uint64_t v4 = boost::re_detail_106800::def_coll_names[0];
  if (*boost::re_detail_106800::def_coll_names[0])
  {
    int v5 = 0;
    uint64_t v6 = *(unsigned __int8 *)(result + 23);
    size_t v8 = *(void *)result;
    uint64_t v7 = *(void *)(result + 8);
    do
    {
      uint64_t result = strlen(v4);
      size_t v9 = result;
      if ((v6 & 0x80) != 0)
      {
        if (result == v7)
        {
          uint64_t result = v8;
          if (v7 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
LABEL_8:
          uint64_t result = memcmp((const void *)result, v4, v9);
          if (!result)
          {
            *(unsigned char *)(a2 + 23) = 1;
            *(unsigned char *)a2 = v5;
            *(unsigned char *)(a2 + boost::detail::shared_count::~shared_count(this + 1) = 0;
            return result;
          }
        }
      }
      else
      {
        uint64_t result = v2;
        if (v9 == v6) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = boost::re_detail_106800::def_coll_names[++v5];
    }
    while (*v4);
  }
  uint64_t v10 = boost::re_detail_106800::def_multi_coll[0];
  if (!*boost::re_detail_106800::def_multi_coll[0])
  {
LABEL_19:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return result;
  }
  uint64_t v11 = *(unsigned __int8 *)(v2 + 23);
  int v12 = 1;
  size_t v14 = *(void *)v2;
  uint64_t v13 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t result = strlen(v10);
    size_t v15 = result;
    if ((v11 & 0x80) == 0) {
      break;
    }
    if (result == v13)
    {
      uint64_t result = v14;
      if (v13 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v10 = boost::re_detail_106800::def_multi_coll[v12++];
    if (!*v10) {
      goto LABEL_19;
    }
  }
  uint64_t result = v2;
  if (v15 != v11) {
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = memcmp((const void *)result, v10, v15);
  if (result) {
    goto LABEL_18;
  }
  return (size_t)std::string::basic_string[abi:ne180100]<0>((void *)a2, v10);
}

void CoreML::validate<(MLModelType)2005>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 2005)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "Model not a word embedding.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      return;
    }
    size_t v9 = v17;
    goto LABEL_27;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  int v5 = operator new(4uLL);
  uint64_t v11 = v5;
  _DWORD *v5 = 3;
  int v12 = v5 + 1;
  uint64_t v13 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v11, (uint64_t)&v14);
  int v17 = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v17)) {
    goto LABEL_24;
  }
  uint64_t v6 = operator new(4uLL);
  uint64_t v11 = v6;
  _DWORD *v6 = 5;
  int v12 = v6 + 1;
  uint64_t v13 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v11, (uint64_t)&v14);
  int v17 = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v7) {
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 44) == 2005) {
    size_t v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    size_t v8 = CoreML::Specification::CoreMLModels::WordEmbedding::default_instance((CoreML::Specification::CoreMLModels::WordEmbedding *)v7);
  }
  if (*((_DWORD *)v8 + 8) <= 1u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "Model revision number missing or invalid. Must be >= 2");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_31;
  }
  uint64_t v10 = v8[3];
  if (*(char *)(v10 + 23) < 0)
  {
    if (*(void *)(v10 + 8)) {
      goto LABEL_24;
    }
LABEL_30:
    std::string::basic_string[abi:ne180100]<0>(&v14, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_31:
    if (SHIBYTE(v15) < 0) {
      operator delete(v14);
    }
    goto LABEL_25;
  }
  if (!*(unsigned char *)(v10 + 23)) {
    goto LABEL_30;
  }
LABEL_24:
  *(void *)a2 = v17;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v19;
  long long __p = 0uLL;
  uint64_t v19 = 0;
LABEL_25:
  if ((SHIBYTE(v19) & 0x80000000) == 0) {
    return;
  }
  size_t v9 = (void *)__p;
LABEL_27:
  operator delete(v9);
}

void sub_224259C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void boost::system::detail::generic_error_category::message(int __errnum@<W1>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(boost::system::detail::generic_error_category::message(int)const::unknown_err, "Unknown error");
    __cxa_atexit(MEMORY[0x263F8C0B8], boost::system::detail::generic_error_category::message(int)const::unknown_err, &dword_223D44000);
  }
  p_strerrbuf = &__strerrbuf;
  size_t v6 = 64;
  while (1)
  {
    int v7 = strerror_r(__errnum, p_strerrbuf, v6);
    if (v7 != 34) {
      break;
    }
    if (v6 >= 0x41) {
      free(p_strerrbuf);
    }
    v6 *= 2;
    p_strerrbuf = (char *)malloc_type_malloc(v6, 0x37110C92uLL);
    if (!p_strerrbuf)
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "ENOMEM");
      return;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v7 == 22) {
    size_t v8 = "Unknown error";
  }
  else {
    size_t v8 = p_strerrbuf;
  }
  MEMORY[0x22A614700](a2, v8);
  if (v6 >= 0x41) {
    free(p_strerrbuf);
  }
}

void sub_224259E18(_Unwind_Exception *a1)
{
}

uint64_t boost::system::detail::system_error_category::default_error_condition(boost::system::detail::system_error_category *this, unsigned int a2)
{
  uint64_t v2 = a2;
  switch(a2)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x41u:
    case 0x42u:
    case 0x4Du:
    case 0x4Eu:
    case 0x54u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Eu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x68u:
    case 0x69u:
      boost::system::detail::generic_category_ncx(this);
      break;
    default:
      boost::system::detail::system_category_ncx(this);
      break;
  }
  return v2;
}

uint64_t boost::system::detail::system_error_category::message(boost::system::detail::system_error_category *this)
{
  boost::system::detail::generic_category_ncx(this);
  uint64_t v1 = *(uint64_t (**)(void))(boost::system::detail::generic_category_ncx(void)::generic_category_instance + 24);
  return v1();
}

void boost::system::detail::system_error_category::~system_error_category(std::error_category *this)
{
  this->__vftable = (std::error_category_vtbl *)&unk_26D773CB8;
  std::error_category::~error_category(this + 1);
}

uint64_t *boost::system::detail::generic_category_ncx(boost::system::detail *this)
{
  {
    qword_268086658 = (uint64_t)&unk_26D773D00;
    unk_268086660 = &boost::system::detail::generic_category_ncx(void)::generic_category_instance;
    boost::system::detail::generic_category_ncx(void)::generic_category_instance = (uint64_t)&unk_26D7746B0;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::system::detail::generic_category_ncx(void)::generic_category_instance, &dword_223D44000);
  }
  return &boost::system::detail::generic_category_ncx(void)::generic_category_instance;
}

void boost::system::detail::generic_error_category::~generic_error_category(std::error_category *this)
{
  this->__vftable = (std::error_category_vtbl *)&unk_26D773CB8;
  std::error_category::~error_category(this + 1);
  JUMPOUT(0x22A614FA0);
}

const char *boost::system::detail::generic_error_category::name(boost::system::detail::generic_error_category *this)
{
  return "generic";
}

const char *boost::system::detail::system_error_category::name(boost::system::detail::system_error_category *this)
{
  return "system";
}

void *boost::unit_test::output::compiler_log_formatter::log_start(boost::unit_test::runtime_config *a1, void *a2, uint64_t a3)
{
  if (byte_26808D2CF >= 0) {
    size_t v6 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_color_output;
  }
  else {
    size_t v6 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_color_output;
  }
  uint64_t v7 = byte_26808D2CF;
  if (byte_26808D2CF < 0) {
    uint64_t v7 = unk_26808D2C0;
  }
  size_t v8 = &v6[v7];
  size_t v9 = boost::unit_test::runtime_config::argument_store(a1);
  v16[0] = v6;
  v16[1] = v8;
  uint64_t result = (void *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v9, v16);
  *((unsigned char *)a1 + 12) = *(unsigned char *)result;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Running ", 8);
    uint64_t v11 = (void *)std::ostream::operator<<();
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" test ", 6);
    if (a3 == 1) {
      uint64_t v13 = "case";
    }
    else {
      uint64_t v13 = "cases";
    }
    if (a3 == 1) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = 5;
    }
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"...\n", 4);
  }
  return result;
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_finish()
{
  return std::ostream::flush();
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_build_info(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Platform: ", 10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Mac OS", 6);
  char v16 = 10;
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v16, 1);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Compiler: ", 10);
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Clang version 16.0.0 (clang-1600.0.26.6) [+internal-os]", 55);
  char v17 = 10;
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v17, 1);
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"STL     : ", 10);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"libc++ version 180100", 21);
  char v18 = 10;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v18, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Boost   : ", 10);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
  int v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  uint64_t v14 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_22425A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void boost::unit_test::output::compiler_log_formatter::test_unit_start(unsigned char *a1, void *a2, uint64_t a3)
{
  if (a1[12]) {
    int v6 = 4;
  }
  else {
    int v6 = 9;
  }
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v21, (uint64_t)a2, a1[12], v6, 9);
  long long v20 = *(_OWORD *)(a3 + 24);
  (*(void (**)(unsigned char *, void *, long long *, void))(*(void *)a1 + 176))(a1, a2, &v20, *(void *)(a3 + 40));
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Entering test ", 14);
  std::string::basic_string[abi:ne180100](__p, *(void **)(a3 + 8), *(void *)(a3 + 16) - *(void *)(a3 + 8));
  if ((v23 & 0x80u) == 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v9 = v23;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" \"", 2);
  uint64_t v13 = *(void *)(a3 + 136);
  uint64_t v12 = a3 + 136;
  uint64_t v11 = v13;
  int v14 = *(char *)(v12 + 23);
  if (v14 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    uint64_t v16 = *(void *)(v12 + 8);
  }
  char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
  char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  std::locale v19 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v21);
}

void sub_22425A684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a11);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::test_unit_finish(unsigned char *a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1[12]) {
    int v8 = 4;
  }
  else {
    int v8 = 9;
  }
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v24, (uint64_t)a2, a1[12], v8, 9);
  long long v23 = *(_OWORD *)(a3 + 24);
  (*(void (**)(unsigned char *, void *, long long *, void))(*(void *)a1 + 176))(a1, a2, &v23, *(void *)(a3 + 40));
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Leaving test ", 13);
  std::string::basic_string[abi:ne180100](__p, *(void **)(a3 + 8), *(void *)(a3 + 16) - *(void *)(a3 + 8));
  if ((v26 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v11 = v26;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" \"", 2);
  uint64_t v15 = *(void *)(a3 + 136);
  uint64_t v14 = a3 + 136;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  std::locale v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
  if (a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"; testing time: ", 16);
    long long v20 = (void *)std::ostream::operator<<();
    if (a4 % 0x3E8) {
      uint64_t v21 = "us";
    }
    else {
      uint64_t v21 = "ms";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, 2);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v24);
}

void sub_22425A8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a11);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::test_unit_skipped(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1[12]) {
    int v8 = 3;
  }
  else {
    int v8 = 9;
  }
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v23, (uint64_t)a2, a1[12], v8, 9);
  long long v22 = *(_OWORD *)(a3 + 24);
  (*(void (**)(unsigned char *, void *, long long *, void))(*(void *)a1 + 176))(a1, a2, &v22, *(void *)(a3 + 40));
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Test ", 5);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a3 + 8), *(void *)(a3 + 16) - *(void *)(a3 + 8));
  if ((v26 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v11 = v26;
  }
  else {
    uint64_t v11 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v11);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" \"", 2);
  boost::unit_test::test_unit::full_name((boost::unit_test::test_unit *)a3, &v21);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v21;
  }
  else {
    uint64_t v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is skipped because ", 20);
  std::string::basic_string[abi:ne180100](&__p, *(void **)a4, *(void *)(a4 + 8) - *(void *)a4);
  if ((v26 & 0x80u) == 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v19 = v26;
  }
  else {
    uint64_t v19 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  long long v20 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v23);
}

void sub_22425AB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a18);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::log_exception_start(unsigned char *a1, void *a2, long long *a3, uint64_t a4)
{
  long long v30 = *(_OWORD *)(a4 + 24);
  (*(void (**)(unsigned char *, void *, long long *, void))(*(void *)a1 + 176))(a1, a2, &v30, *(void *)(a4 + 40));
  if (a1[12]) {
    int v8 = 1;
  }
  else {
    int v8 = 9;
  }
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v29, (uint64_t)a2, 4 * a1[12], v8, 9);
  uint64_t v9 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fatal error: in \"", 17);
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(a4 + 48);
  uint64_t v11 = *(void *)(a4 + 56);
  if (v11 == v12)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v28;
    }
    else {
      uint64_t v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = (char *)v13 + size;
  }
  else
  {
    uint64_t v13 = *(std::string **)(a4 + 48);
    uint64_t v14 = *(char **)(a4 + 56);
  }
  std::string::basic_string[abi:ne180100](&__p, v13, v14 - (char *)v13);
  if ((v33 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v17 = v33;
  }
  else {
    uint64_t v17 = v32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v17);
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\": ", 3);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a4 + 8), *(void *)(a4 + 16) - *(void *)(a4 + 8));
  if ((v33 & 0x80u) == 0) {
    uint64_t v19 = &__p;
  }
  else {
    uint64_t v19 = __p;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v20 = v33;
  }
  else {
    uint64_t v20 = v32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if (v11 == v12 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v29);
  if (*((void *)a3 + 1) != *(void *)a3)
  {
    LOBYTE(__p) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&__p, 1);
    long long v27 = *a3;
    (*(void (**)(unsigned char *, void *, long long *, void))(*(void *)a1 + 176))(a1, a2, &v27, *((void *)a3 + 2));
    if (a1[12]) {
      int v21 = 6;
    }
    else {
      int v21 = 9;
    }
    boost::unit_test::utils::scope_setcolor::scope_setcolor(&__p, (uint64_t)a2, a1[12], v21, 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"last checkpoint", 15);
    uint64_t v22 = *((unsigned __int8 *)a3 + 47);
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)a3 + 4);
    }
    if (v22)
    {
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)": ", 2);
      int v24 = *((char *)a3 + 47);
      if (v24 >= 0) {
        uint64_t v25 = (uint64_t)a3 + 24;
      }
      else {
        uint64_t v25 = *((void *)a3 + 3);
      }
      if (v24 >= 0) {
        uint64_t v26 = *((unsigned __int8 *)a3 + 47);
      }
      else {
        uint64_t v26 = *((void *)a3 + 4);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    }
    boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&__p);
  }
}

void sub_22425AE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void boost::unit_test::output::anonymous namespace'::test_phase_identifier(boost::unit_test::output::_anonymous_namespace_ *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (boost::unit_test::framework *)boost::unit_test::framework::test_in_progress(this);
  if (v3)
  {
    uint64_t v4 = (boost::unit_test::test_unit *)boost::unit_test::framework::current_test_unit(v3);
    boost::unit_test::test_unit::full_name(v4, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "Test setup");
  }
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_exception_finish(uint64_t a1, void *a2)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_22425AFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void boost::unit_test::output::compiler_log_formatter::log_entry_start(unsigned char *a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  switch(a4)
  {
    case 0:
      int v6 = *((char *)a3 + 23);
      BOOL v7 = v6 < 0;
      int v8 = (uint64_t *)*a3;
      if (v6 >= 0) {
        int v8 = a3;
      }
      uint64_t v9 = *((unsigned __int8 *)a3 + 23);
      if (v7) {
        uint64_t v9 = a3[1];
      }
      v38[0] = v8;
      v38[1] = (char *)v8 + v9;
      (*(void (**)(unsigned char *, void *, void *, uint64_t))(*(void *)a1 + 176))(a1, a2, v38, a3[3]);
      if (a1[12])
      {
        LODWORD(v39.__r_.__value_.__r.__words[2]) = sprintf((char *)&v39, "%c[%d;%d;%dm", 27, 1, 32, 49);
        if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
          std::ostream::write();
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"info: ", 6);
      return;
    case 1:
      if (a1[12])
      {
        LODWORD(v39.__r_.__value_.__r.__words[2]) = sprintf((char *)&v39, "%c[%d;%d;%dm", 27, 1, 36, 49);
        if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
          std::ostream::write();
        }
      }
      return;
    case 2:
      int v11 = *((char *)a3 + 23);
      BOOL v12 = v11 < 0;
      uint64_t v13 = (uint64_t *)*a3;
      if (v11 >= 0) {
        uint64_t v13 = a3;
      }
      uint64_t v14 = *((unsigned __int8 *)a3 + 23);
      if (v12) {
        uint64_t v14 = a3[1];
      }
      v37[0] = v13;
      v37[1] = (char *)v13 + v14;
      (*(void (**)(unsigned char *, void *, void *, uint64_t))(*(void *)a1 + 176))(a1, a2, v37, a3[3]);
      if (a1[12])
      {
        LODWORD(v39.__r_.__value_.__r.__words[2]) = sprintf((char *)&v39, "%c[%d;%d;%dm", 27, 1, 33, 49);
        if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
          std::ostream::write();
        }
      }
      uint64_t v15 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"warning: in \"", 13);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v16 = &v39;
      }
      else {
        int v16 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\": ", 3);
      goto LABEL_63;
    case 3:
      int v19 = *((char *)a3 + 23);
      BOOL v20 = v19 < 0;
      int v21 = (uint64_t *)*a3;
      if (v19 >= 0) {
        int v21 = a3;
      }
      uint64_t v22 = *((unsigned __int8 *)a3 + 23);
      if (v20) {
        uint64_t v22 = a3[1];
      }
      v36[0] = v21;
      v36[1] = (char *)v21 + v22;
      (*(void (**)(unsigned char *, void *, void *, uint64_t))(*(void *)a1 + 176))(a1, a2, v36, a3[3]);
      if (a1[12])
      {
        LODWORD(v39.__r_.__value_.__r.__words[2]) = sprintf((char *)&v39, "%c[%d;%d;%dm", 27, 1, 31, 49);
        if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
          std::ostream::write();
        }
      }
      uint64_t v23 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"error: in \"", 11);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v24 = &v39;
      }
      else {
        int v24 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\": ", 3);
      goto LABEL_63;
    case 4:
      int v27 = *((char *)a3 + 23);
      BOOL v28 = v27 < 0;
      uint64_t v29 = (uint64_t *)*a3;
      if (v27 >= 0) {
        uint64_t v29 = a3;
      }
      uint64_t v30 = *((unsigned __int8 *)a3 + 23);
      if (v28) {
        uint64_t v30 = a3[1];
      }
      v35[0] = v29;
      v35[1] = (char *)v29 + v30;
      (*(void (**)(unsigned char *, void *, void *, uint64_t))(*(void *)a1 + 176))(a1, a2, v35, a3[3]);
      if (a1[12])
      {
        LODWORD(v39.__r_.__value_.__r.__words[2]) = sprintf((char *)&v39, "%c[%d;%d;%dm", 27, 4, 31, 49);
        if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
          std::ostream::write();
        }
      }
      int v31 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fatal error: in \"", 17);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v39;
      }
      else {
        uint64_t v32 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v39.__r_.__value_.__l.__size_;
      }
      char v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\": ", 3);
LABEL_63:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      break;
    default:
      return;
  }
}

void sub_22425B4E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::compiler_log_formatter::log_entry_value(uint64_t a1, void *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100](__p, *(void **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if ((v7 & 0x80u) == 0) {
    std::locale v4 = __p;
  }
  else {
    std::locale v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22425B590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_entry_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_entry_finish(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 12))
  {
    int v7 = sprintf((char *)&v6, "%c[%d;%d;%dm", 27, 0, 39, 49);
    if (a2 == (void *)MEMORY[0x263F8C100] || a2 == (void *)MEMORY[0x263F8C0F8]) {
      std::ostream::write();
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  std::locale v4 = std::locale::use_facet(&v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_22425B6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
}

void boost::unit_test::output::compiler_log_formatter::print_prefix(uint64_t a1, void *a2, uint64_t a3)
{
  std::locale v4 = *(void **)a3;
  size_t v5 = *(void *)(a3 + 8) - *(void *)a3;
  if (v5)
  {
    std::string::basic_string[abi:ne180100](__p, v4, v5);
    if ((v10 & 0x80u) == 0) {
      std::locale v6 = __p;
    }
    else {
      std::locale v6 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v7 = v10;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    LOBYTE(__p[0]) = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
  }
}

void sub_22425B7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::unit_test::output::compiler_log_formatter::entry_context_start(uint64_t a1, void *a2, int a3)
{
  if (a3 == 2)
  {
    size_t v5 = "\n[context:";
    uint64_t v6 = 10;
  }
  else
  {
    if (a3) {
      uint64_t v8 = "\nFailure";
    }
    else {
      uint64_t v8 = "\nAssertion";
    }
    if (a3) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = 10;
    }
    a2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, v9);
    size_t v5 = " occurred in a following context:";
    uint64_t v6 = 33;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v5, v6);
}

uint64_t boost::unit_test::output::compiler_log_formatter::entry_context_finish(uint64_t a1, void *a2, int a3)
{
  if (a3 == 2) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
  }
  return std::ostream::flush();
}

void boost::unit_test::output::compiler_log_formatter::log_entry_context(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n    ", 5);
  std::string::basic_string[abi:ne180100](__p, *(void **)a4, *(void *)(a4 + 8) - *(void *)a4);
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22425B934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::compiler_log_formatter::~compiler_log_formatter(boost::unit_test::output::compiler_log_formatter *this)
{
}

void *boost::unit_test::unit_test_log_formatter::get_default_stream_description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "stdout");
}

void *boost::unit_test::utils::scope_setcolor::scope_setcolor(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a1 = a2;
  int v10 = sprintf(v9, "%c[%d;%d;%dm", 27, a3, a4 + 30, a5 + 40);
  if (a2 == MEMORY[0x263F8C100] || a2 == MEMORY[0x263F8C0F8]) {
    std::ostream::write();
  }
  return a1;
}

void boost::unit_test::utils::scope_setcolor::~scope_setcolor(boost::unit_test::utils::scope_setcolor *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    int v4 = sprintf(v3, "%c[%d;%d;%dm", 27, 0, 39, 49);
    if (v1 == MEMORY[0x263F8C100] || v1 == MEMORY[0x263F8C0F8]) {
      std::ostream::write();
    }
  }
}

void sub_22425BADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t boost::runtime::arguments_store::get<BOOL>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::find<boost::unit_test::basic_cstring<char const>>(a1, a2);
  if (a1 + 8 == v4)
  {
    uint64_t v11 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    BOOL v12 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v10 = &unk_26D7748B0;
    boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<((uint64_t)&v10, "There is no argument provided for parameter ", (uint64_t)v16);
    boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>((uint64_t)v16, (uint64_t)a2, (uint64_t)v17);
    boost::unit_test::ut_detail::throw_exception<boost::runtime::access_to_missing_argument>((uint64_t)v17);
  }
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v5 = *(atomic_uint **)(v4 + 56);
  unsigned __int8 v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
  if (*(_UNKNOWN **)(v6 + 8) != &boost::rtti::rtti_detail::rttid_holder<BOOL>::inst(void)::s_inst)
  {
    uint64_t v11 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    BOOL v12 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v10 = &unk_26D774930;
    boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<((uint64_t)&v10, "Access with invalid type for argument corresponding to parameter ", (uint64_t)v16);
    boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>((uint64_t)v16, (uint64_t)a2, (uint64_t)v17);
    boost::unit_test::ut_detail::throw_exception<boost::runtime::arg_type_mismatch>((uint64_t)v17);
  }
  uint64_t v7 = v6 + 16;
  boost::detail::shared_count::~shared_count(&v9);
  return v7;
}

void sub_22425BC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint **a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19)
{
  boost::runtime::param_error::~param_error((std::exception *)(v19 - 64));
  boost::runtime::param_error::~param_error(&a19);
  boost::runtime::param_error::~param_error(&a13);
  boost::detail::shared_count::~shared_count(a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::runtime::access_to_missing_argument>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  boost::runtime::access_to_missing_argument::access_to_missing_argument((uint64_t)exception, a1);
}

void sub_22425BCE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 24;
  std::string::append((std::string *)(a1 + 24), a2);
  *(void *)a3 = &unk_26D7748D8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v6 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    *(void *)(a3 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(void *)(v5 + 16);
  }
  *(void *)a3 = &unk_26D7748B0;
}

void sub_22425BD9C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::string *)(a1 + 24);
  boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(a2);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(v5, (const std::string::value_type *)v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a3 = &unk_26D7748D8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v8 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(void *)(a3 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *((void *)&v5->__r_.__value_.__l + 2);
  }
  *(void *)a3 = &unk_26D7748B0;
}

void sub_22425BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::runtime::arg_type_mismatch>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  boost::runtime::arg_type_mismatch::arg_type_mismatch((uint64_t)exception, a1);
}

void sub_22425BF08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 24;
  std::string::append((std::string *)(a1 + 24), a2);
  *(void *)a3 = &unk_26D7748D8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v6 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    *(void *)(a3 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(void *)(v5 + 16);
  }
  *(void *)a3 = &unk_26D774930;
}

void sub_22425BFBC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::string *)(a1 + 24);
  boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(a2);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(v5, (const std::string::value_type *)v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a3 = &unk_26D7748D8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v8 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(void *)(a3 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *((void *)&v5->__r_.__value_.__l + 2);
  }
  *(void *)a3 = &unk_26D774930;
}

void sub_22425C0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::find<boost::unit_test::basic_cstring<char const>>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](v5, (unsigned __int8 **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](v5, a2, (unsigned __int8 **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

BOOL std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = v4 - *a2;
  uint64_t v6 = *a3;
  unint64_t v7 = a3[1] - *a3;
  if (v5 != v7) {
    return v5 < v7;
  }
  if (!v5) {
    return 0;
  }
  for (uint64_t i = (unsigned __int8 *)(v3 - v4); ; ++i)
  {
    int v9 = *v3;
    int v10 = *v6;
    if (v9 != v10) {
      break;
    }
    ++v3;
    ++v6;
    if (__CFADD__(i, 1)) {
      return 0;
    }
  }
  return (char)v9 < (char)v10;
}

uint64_t boost::runtime::access_to_missing_argument::access_to_missing_argument(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D7748D8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)a1 = &unk_26D7748B0;
  return a1;
}

void sub_22425C264(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::access_to_missing_argument::~access_to_missing_argument(std::exception *this)
{
  boost::runtime::param_error::~param_error(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::runtime::param_error::what(boost::runtime::param_error *this)
{
  uint64_t result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

void boost::runtime::param_error::~param_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26D7748D8;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

uint64_t boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::string::basic_string[abi:ne180100](__dst, *(void **)a1, *(void *)(a1 + 8) - *(void *)a1);
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __dst;
  }
  else {
    uint64_t v2 = (void **)__dst[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__dst[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v2, v3);
  if ((char)v9 < 0) {
    operator delete(__dst[0]);
  }
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v7);
}

void sub_22425C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::runtime::arg_type_mismatch::arg_type_mismatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D7748D8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)a1 = &unk_26D774930;
  return a1;
}

void sub_22425C558(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = boost::unit_test::framework::setup_error::setup_error(exception, a1);
}

std::runtime_error *boost::unit_test::framework::setup_error::setup_error(std::runtime_error *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100](&__dst, *(void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  std::runtime_error::runtime_error(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D774958;
  return a1;
}

void sub_22425C624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *boost::unit_test::framework::setup_error::setup_error(std::runtime_error *a1, const std::runtime_error *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_26D774958;
  return result;
}

uint64_t *CoreML::FeatureType::FeatureType(uint64_t *a1, int a2)
{
  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
  switch(a2)
  {
    case 1:
      uint64_t v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 1;
        operator new();
      }
      return result;
    case 2:
      uint64_t v5 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v5 + 36) = 2;
        operator new();
      }
      return result;
    case 3:
      uint64_t v6 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v6 + 36) = 3;
        operator new();
      }
      return result;
    case 4:
      uint64_t v7 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 4)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v7 + 36) = 4;
        operator new();
      }
      return result;
    case 5:
      uint64_t v8 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 5)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v8 + 36) = 5;
        operator new();
      }
      return result;
    case 6:
      uint64_t v9 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 6)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v9 + 36) = 6;
        operator new();
      }
      return result;
    case 7:
      uint64_t v10 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 7)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v10 + 36) = 7;
        operator new();
      }
      return result;
    default:
      return a1;
  }
  return a1;
}

void sub_22425C8C0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40EE95837BLL);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

CoreML::FeatureType *CoreML::FeatureType::FeatureType(CoreML::FeatureType *this, const CoreML::Specification::FeatureType *a2)
{
  return this;
}

uint64_t *CoreML::FeatureType::Int64@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 1);
}

uint64_t *CoreML::FeatureType::String@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 3);
}

uint64_t *CoreML::FeatureType::Double@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 2);
}

void CoreML::FeatureType::Array(uint64_t **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  CoreML::FeatureType::FeatureType(a3, 5);
  uint64_t v6 = *a3;
  if (*(_DWORD *)(*a3 + 36) != 5)
  {
    CoreML::Specification::FeatureType::clear_Type(*a3);
    *(_DWORD *)(v6 + 36) = 5;
    operator new();
  }
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*a1 != v9)
  {
    int v10 = *(_DWORD *)(v7 + 16);
    do
    {
      uint64_t v11 = *v8;
      if (v10 == *(_DWORD *)(v7 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v7 + 16), v10 + 1);
        int v10 = *(_DWORD *)(v7 + 16);
      }
      uint64_t v12 = *(void *)(v7 + 24) + 8 * v10++;
      *(_DWORD *)(v7 + 16) = v10;
      *(void *)(v12 + 8) = v11;
      ++v8;
    }
    while (v8 != v9);
  }
  *(_DWORD *)(v7 + 36) = a2;
}

void sub_22425CAC0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C4053416F99);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void CoreML::FeatureType::Array(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  CoreML::FeatureType::Array((uint64_t **)&__p, 65600, a2);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_22425CB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CoreML::FeatureType::Dictionary@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result = CoreML::FeatureType::FeatureType(a2, 6);
  uint64_t v5 = *a2;
  if (*(_DWORD *)(*a2 + 36) != 6)
  {
    CoreML::Specification::FeatureType::clear_Type(*a2);
    *(_DWORD *)(v5 + 36) = 6;
    operator new();
  }
  uint64_t v6 = *(void *)(v5 + 24);
  switch(a1)
  {
    case 1:
      if (*(_DWORD *)(v6 + 28) != 1)
      {
        CoreML::Specification::V5::Dimension::clear_dimension(v6);
        *(_DWORD *)(v6 + 28) = 1;
        operator new();
      }
      break;
    case 2:
      if (*(_DWORD *)(v6 + 28) != 2)
      {
        CoreML::Specification::V5::Dimension::clear_dimension(v6);
        *(_DWORD *)(v6 + 28) = 2;
        operator new();
      }
      break;
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid dictionary key type. Expected one of: {int64, string}.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_22425CCD4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x22A614FA0](v3, 0x1081C40622C3295);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

BOOL CoreML::FeatureType::operator==(uint64_t *a1, uint64_t *a2)
{
  return CoreML::Specification::operator==(*a1, *a2);
}

uint64_t CoreML::FeatureType::toString@<X0>(CoreML::FeatureType *this@<X0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v41);
  int v4 = *(_DWORD *)(*(void *)this + 36);
  CoreML::featureTypeToString(v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = (CoreML::Specification::ImageFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  switch(v4)
  {
    case 4:
      if (*(_DWORD *)(*(void *)this + 36) == 4) {
        uint64_t v8 = *(int **)(*(void *)this + 24);
      }
      else {
        uint64_t v8 = (int *)CoreML::Specification::ImageFeatureType::default_instance(v7);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      CoreML::colorSpaceToString(v8[8], &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &__p;
      }
      else {
        uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CoreML::defaultSizeOf((CoreML *)v8, &__p);
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
        CoreML::dimensionsToString(&__p, 0);
        uint64_t v14 = (v39 & 0x80u) == 0 ? &v37 : (void **)v37;
        uint64_t v15 = (v39 & 0x80u) == 0 ? v39 : v38;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v14, v15);
        if ((char)v39 < 0) {
          operator delete(v37);
        }
      }
      goto LABEL_55;
    case 5:
      if (*(_DWORD *)(*(void *)this + 36) == 5) {
        uint64_t v9 = *(int **)(*(void *)this + 24);
      }
      else {
        uint64_t v9 = (int *)CoreML::Specification::ArrayFeatureType::default_instance(v7);
      }
      int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      CoreML::dataTypeToString(v9[9], &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &__p;
      }
      else {
        uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CoreML::defaultShapeOf((CoreML *)v9, &__p.__r_.__value_.__l.__data_);
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
        CoreML::dimensionsToString(&__p, 0);
        uint64_t v19 = (v39 & 0x80u) == 0 ? &v37 : (void **)v37;
        uint64_t v20 = (v39 & 0x80u) == 0 ? v39 : v38;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v19, v20);
        if ((char)v39 < 0) {
          operator delete(v37);
        }
      }
LABEL_55:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 6:
      if (*(_DWORD *)(*(void *)this + 36) == 6) {
        int v10 = *(uint64_t **)(*(void *)this + 24);
      }
      else {
        int v10 = CoreML::Specification::DictionaryFeatureType::default_instance(v7);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, off_2646D74D0[*((int *)v10 + 7)]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &__p;
      }
      else {
        int v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v21, v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" → ", 5);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Double");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &__p;
      }
      else {
        uint64_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_99;
    case 7:
      if (*(_DWORD *)(*(void *)this + 36) == 7) {
        uint64_t v11 = *(uint64_t **)(*(void *)this + 24);
      }
      else {
        uint64_t v11 = CoreML::Specification::SequenceFeatureType::default_instance(v7);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      int v25 = *((_DWORD *)v11 + 9);
      if (v25)
      {
        if (v25 == 1) {
          uint64_t v26 = "Int64";
        }
        else {
          uint64_t v26 = "String";
        }
      }
      else
      {
        uint64_t v26 = "Invalid";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v26);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = &__p;
      }
      else {
        int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v27, v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
      uint64_t v30 = (uint64_t *)v11[2];
      if (!v30) {
        uint64_t v30 = &CoreML::Specification::_SizeRange_default_instance_;
      }
      CoreML::rangeToString((CoreML *)v30[2], v30[3], 0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &__p;
      }
      else {
        int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_99:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  if (*(unsigned char *)(*(void *)this + 16)) {
    std::string::size_type v33 = "?";
  }
  else {
    std::string::size_type v33 = "";
  }
  char v34 = std::string::append(&__p, v33);
  *a2 = *v34;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v41[0] = *MEMORY[0x263F8C2B8];
  uint64_t v35 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v41 + *(void *)(v41[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v42[0] = v35;
  v42[1] = MEMORY[0x263F8C318] + 16;
  if (v43 < 0) {
    operator delete((void *)v42[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v44);
}

void sub_22425D3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *CoreML::featureTypeToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2646D7490[a1]);
}

void *CoreML::dataTypeToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 <= 65599)
  {
    if (a1 != 0x80000000 && a1)
    {
      uint64_t v2 = "Float32";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
LABEL_9:
    uint64_t v2 = "Invalid";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 0x7FFFFFFF) {
    goto LABEL_9;
  }
  if (a1 == 131104) {
    uint64_t v2 = "Int32";
  }
  else {
    uint64_t v2 = "Double";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void CoreML::defaultShapeOf(CoreML *this@<X0>, char **a2@<X8>)
{
  uint64_t v3 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((int *)this + 4) < 1)
  {
    int v18 = *((_DWORD *)this + 15);
    if (v18 == 21)
    {
      for (uint64_t i = 0; ; ++i)
      {
        std::string::size_type v33 = v18 == 21
            ? (uint64_t *)*((void *)v3 + 5)
            : CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance(this);
        if (i >= *(int *)(*(void *)(v33[4] + 8) + 16)) {
          break;
        }
        if (*((_DWORD *)v3 + 15) == 21) {
          this = (CoreML *)*((void *)v3 + 5);
        }
        else {
          this = (CoreML *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v33);
        }
        uint64_t v34 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 24) + 8 * i + 8);
        char v36 = (CoreML *)a2[1];
        unint64_t v35 = (unint64_t)a2[2];
        if ((unint64_t)v36 >= v35)
        {
          this = (CoreML *)*a2;
          uint64_t v38 = (v36 - (CoreML *)*a2) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v35 - (void)this;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            std::string::size_type v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v41);
            this = (CoreML *)*a2;
            char v36 = (CoreML *)a2[1];
          }
          else
          {
            std::string::size_type v42 = 0;
          }
          char v43 = &v42[8 * v38];
          *(void *)char v43 = v34;
          std::string v37 = v43 + 8;
          while (v36 != this)
          {
            uint64_t v44 = *((void *)v36 - 1);
            char v36 = (CoreML *)((char *)v36 - 8);
            *((void *)v43 - boost::detail::shared_count::~shared_count(this + 1) = v44;
            v43 -= 8;
          }
          *a2 = v43;
          a2[1] = v37;
          a2[2] = &v42[8 * v41];
          if (this) {
            operator delete(this);
          }
        }
        else
        {
          *(void *)char v36 = v34;
          std::string v37 = (char *)v36 + 8;
        }
        a2[1] = v37;
        int v18 = *((_DWORD *)v3 + 15);
      }
    }
    else if (v18 == 31)
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v20 = v18 == 31
            ? (int *)*((void *)v3 + 5)
            : (int *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance(this);
        if (j >= v20[6]) {
          break;
        }
        if (*((_DWORD *)v3 + 15) == 31) {
          this = (CoreML *)*((void *)v3 + 5);
        }
        else {
          this = (CoreML *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v20);
        }
        uint64_t v21 = *(void *)(*(void *)(*((void *)this + 4) + 8 * j + 8) + 16);
        uint64_t v23 = (CoreML *)a2[1];
        unint64_t v22 = (unint64_t)a2[2];
        if ((unint64_t)v23 >= v22)
        {
          this = (CoreML *)*a2;
          uint64_t v25 = (v23 - (CoreML *)*a2) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v22 - (void)this;
          if (v27 >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v28);
            this = (CoreML *)*a2;
            uint64_t v23 = (CoreML *)a2[1];
          }
          else
          {
            uint64_t v29 = 0;
          }
          uint64_t v30 = &v29[8 * v25];
          *(void *)uint64_t v30 = v21;
          std::string::size_type v24 = v30 + 8;
          while (v23 != this)
          {
            uint64_t v31 = *((void *)v23 - 1);
            uint64_t v23 = (CoreML *)((char *)v23 - 8);
            *((void *)v30 - boost::detail::shared_count::~shared_count(this + 1) = v31;
            v30 -= 8;
          }
          *a2 = v30;
          a2[1] = v24;
          a2[2] = &v29[8 * v28];
          if (this) {
            operator delete(this);
          }
        }
        else
        {
          *(void *)uint64_t v23 = v21;
          std::string::size_type v24 = (char *)v23 + 8;
        }
        a2[1] = v24;
        int v18 = *((_DWORD *)v3 + 15);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 2;
    do
    {
      uint64_t v8 = *(void *)(*((void *)v3 + 3) + 8 * v6 + 8);
      if ((unint64_t)v5 >= *v7)
      {
        int v10 = (CoreML *)*a2;
        uint64_t v11 = (v5 - (CoreML *)*a2) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = *v7 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v14);
          int v10 = (CoreML *)*a2;
          uint64_t v5 = (CoreML *)a2[1];
        }
        else
        {
          uint64_t v15 = 0;
        }
        int v16 = &v15[8 * v11];
        *(void *)int v16 = v8;
        uint64_t v9 = (CoreML *)(v16 + 8);
        while (v5 != v10)
        {
          uint64_t v17 = *((void *)v5 - 1);
          uint64_t v5 = (CoreML *)((char *)v5 - 8);
          *((void *)v16 - boost::detail::shared_count::~shared_count(this + 1) = v17;
          v16 -= 8;
        }
        *a2 = v16;
        a2[1] = (char *)v9;
        a2[2] = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(void *)uint64_t v5 = v8;
        uint64_t v9 = (CoreML *)((char *)v5 + 8);
      }
      a2[1] = (char *)v9;
      ++v6;
      uint64_t v5 = v9;
    }
    while (v6 < *((int *)v3 + 4));
  }
}

void sub_22425D854(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::dimensionsToString(void *a1, int a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a2) {
    int v4 = ", ";
  }
  else {
    int v4 = " × ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  if (a2) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
  }
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
    do
    {
      std::ostream::operator<<();
      unint64_t v6 = (uint64_t)(a1[1] - *a1) >> 3;
      if (v5 < v6 - 1)
      {
        if ((v12 & 0x80u) == 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        if ((v12 & 0x80u) == 0) {
          uint64_t v8 = v12;
        }
        else {
          uint64_t v8 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
        unint64_t v6 = (uint64_t)(a1[1] - *a1) >> 3;
      }
      ++v5;
    }
    while (v5 < v6);
  }
  if (a2) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v14[0] = v9;
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v16);
}

void sub_22425DADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *CoreML::colorSpaceToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 <= 19)
  {
    if (a1 != 0x80000000 && a1)
    {
      uint64_t v2 = "Grayscale";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
LABEL_9:
    uint64_t v2 = "Invalid";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 0x7FFFFFFF) {
    goto LABEL_9;
  }
  if (a1 == 30) {
    uint64_t v2 = "BGR";
  }
  else {
    uint64_t v2 = "RGB";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void CoreML::defaultSizeOf(CoreML *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = *((void *)this + 2);
  if (v5 < 1 || *((uint64_t *)this + 3) < 1)
  {
    int v14 = *((_DWORD *)this + 13);
    if (v14 == 31)
    {
      unint64_t v26 = *(uint64_t **)(*((void *)this + 5) + 16);
      if (!v26) {
        unint64_t v26 = &CoreML::Specification::_SizeRange_default_instance_;
      }
      uint64_t v27 = v26[2];
      unint64_t v28 = a2 + 2;
      uint64_t v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
      uint64_t v30 = (char *)*a2;
      uint64_t v31 = (char *)a2[1];
      std::string::size_type v33 = &v29[v32];
      void *v29 = v27;
      unint64_t v22 = v29 + 1;
      while (v31 != v30)
      {
        uint64_t v34 = *((void *)v31 - 1);
        v31 -= 8;
        *--uint64_t v29 = v34;
      }
      *a2 = v29;
      a2[1] = v22;
      a2[2] = v33;
      if (v30) {
        operator delete(v30);
      }
      a2[1] = v22;
      if (*((_DWORD *)this + 13) == 31)
      {
        char v36 = (uint64_t *)*((void *)this + 5);
      }
      else
      {
        char v36 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v30);
        unint64_t v22 = (uint64_t *)a2[1];
      }
      std::string::const_iterator v49 = (uint64_t *)v36[3];
      if (!v49) {
        std::string::const_iterator v49 = &CoreML::Specification::_SizeRange_default_instance_;
      }
      uint64_t v43 = v49[2];
      if ((unint64_t)v22 >= *v28)
      {
        std::string v37 = (char *)*a2;
        uint64_t v50 = ((uint64_t)v22 - *a2) >> 3;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = *v28 - (void)v37;
        if (v52 >> 2 > v51) {
          unint64_t v51 = v52 >> 2;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          unsigned int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v53);
          std::string v37 = (char *)*a2;
          unint64_t v22 = (uint64_t *)a2[1];
        }
        else
        {
          unsigned int v54 = 0;
        }
        std::string::size_type v55 = &v54[8 * v50];
        unsigned int v56 = &v54[8 * v53];
        *(void *)std::string::size_type v55 = v43;
        uint64_t v25 = v55 + 8;
        while (v22 != (uint64_t *)v37)
        {
          uint64_t v59 = *--v22;
          *((void *)v55 - boost::detail::shared_count::~shared_count(this + 1) = v59;
          v55 -= 8;
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (v14 != 21) {
        return;
      }
      uint64_t v15 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 32) + 8) + 16);
      uint64_t v16 = a2 + 2;
      uint64_t v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
      int v18 = (char *)*a2;
      uint64_t v19 = (char *)a2[1];
      uint64_t v21 = &v17[v20];
      *uint64_t v17 = v15;
      unint64_t v22 = v17 + 1;
      while (v19 != v18)
      {
        uint64_t v23 = *((void *)v19 - 1);
        v19 -= 8;
        *--uint64_t v17 = v23;
      }
      *a2 = v17;
      a2[1] = v22;
      a2[2] = v21;
      if (v18) {
        operator delete(v18);
      }
      a2[1] = v22;
      if (*((_DWORD *)this + 13) == 21)
      {
        unint64_t v35 = (uint64_t *)*((void *)this + 5);
      }
      else
      {
        unint64_t v35 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v18);
        unint64_t v22 = (uint64_t *)a2[1];
      }
      uint64_t v43 = *(void *)(*(void *)(v35[4] + 8) + 24);
      if ((unint64_t)v22 >= *v16)
      {
        std::string v37 = (char *)*a2;
        uint64_t v44 = ((uint64_t)v22 - *a2) >> 3;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = *v16 - (void)v37;
        if (v46 >> 2 > v45) {
          unint64_t v45 = v46 >> 2;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v47);
          std::string v37 = (char *)*a2;
          unint64_t v22 = (uint64_t *)a2[1];
        }
        else
        {
          int v48 = 0;
        }
        std::string::size_type v55 = &v48[8 * v44];
        unsigned int v56 = &v48[8 * v47];
        *(void *)std::string::size_type v55 = v43;
        uint64_t v25 = v55 + 8;
        while (v22 != (uint64_t *)v37)
        {
          uint64_t v58 = *--v22;
          *((void *)v55 - boost::detail::shared_count::~shared_count(this + 1) = v58;
          v55 -= 8;
        }
        goto LABEL_71;
      }
    }
    *unint64_t v22 = v43;
    uint64_t v25 = v22 + 1;
    goto LABEL_73;
  }
  unint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
  uint64_t v7 = (char *)*a2;
  uint64_t v8 = (char *)a2[1];
  int v10 = (char *)&v6[v9];
  void *v6 = v5;
  uint64_t v11 = (char *)(v6 + 1);
  unsigned __int8 v12 = v6;
  while (v8 != v7)
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *--unsigned __int8 v12 = v13;
  }
  *a2 = v12;
  a2[1] = v11;
  a2[2] = v10;
  if (v7)
  {
    operator delete(v7);
    int v10 = (char *)a2[2];
  }
  a2[1] = v11;
  uint64_t v24 = *((void *)this + 3);
  if (v11 >= v10)
  {
    std::string v37 = (char *)*a2;
    uint64_t v38 = (uint64_t)&v11[-*a2] >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = v10 - v37;
    if (v40 >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      std::string::size_type v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v41);
      std::string v37 = (char *)*a2;
      uint64_t v11 = (char *)a2[1];
    }
    else
    {
      std::string::size_type v42 = 0;
    }
    std::string::size_type v55 = &v42[8 * v38];
    unsigned int v56 = &v42[8 * v41];
    *(void *)std::string::size_type v55 = v24;
    uint64_t v25 = v55 + 8;
    while (v11 != v37)
    {
      uint64_t v57 = *((void *)v11 - 1);
      v11 -= 8;
      *((void *)v55 - boost::detail::shared_count::~shared_count(this + 1) = v57;
      v55 -= 8;
    }
LABEL_71:
    *a2 = v55;
    a2[1] = v25;
    a2[2] = v56;
    if (v37) {
      operator delete(v37);
    }
    goto LABEL_73;
  }
  v6[1] = v24;
  uint64_t v25 = v6 + 2;
LABEL_73:
  a2[1] = v25;
}

void sub_22425DF20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::rangeToString(CoreML *this, unint64_t a2, int a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = "]";
    uint64_t v9 = 1;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    goto LABEL_8;
  }
  if (this != (CoreML *)a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = "...";
      uint64_t v9 = 3;
      goto LABEL_3;
    }
    int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"...", 3);
  }
  std::ostream::operator<<();
LABEL_8:
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v14[0] = v11;
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v16);
}

void sub_22425E15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreML::FeatureType::allocateCopy(CoreML::FeatureType *this)
{
}

void sub_22425E1B8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22425E214(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D774998;
  CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)(a1 + 3));
  return a1;
}

void sub_22425E270(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D774998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D774998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<CoreML::Specification::FeatureType,std::allocator<CoreML::Specification::FeatureType>,CoreML::Specification::FeatureType const&,void>@<X0>(const CoreML::Specification::FeatureType *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::FeatureType const&,std::allocator<CoreML::Specification::FeatureType>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22425E368(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::FeatureType const&,std::allocator<CoreML::Specification::FeatureType>,0>(void *a1, const CoreML::Specification::FeatureType *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D774998;
  CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)(a1 + 3), a2);
  return a1;
}

void sub_22425E3C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void boost::unit_test::framework::impl::anonymous namespace'::s_frk_state(boost::unit_test::framework::impl::_anonymous_namespace_ *this)
{
  {
  }
}

void sub_22425E468(_Unwind_Exception *a1)
{
}

uint64_t boost::unit_test::framework::master_test_suite(boost::unit_test::framework *this)
{
    operator new();
}

void sub_22425E4DC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C40041A8715);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::framework::test_in_progress(boost::unit_test::framework *this)
{
  return byte_268086748;
}

void boost::unit_test::framework::register_test_unit(boost::unit_test::framework *this, boost::unit_test::test_suite *a2)
{
  if (*((void *)this + 7) != 0xFFFFFFFFLL)
  {
    v8[0] = "test suite already registered";
    v8[1] = "";
    boost::unit_test::framework::setup_error::setup_error(&v9, (uint64_t)v8);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(&v9);
  }
  int v4 = (std::runtime_error_vtbl *)qword_268086740;
  if (qword_268086740 == 65280)
  {
    v7[0] = "too many test suites";
    v7[1] = "";
    boost::unit_test::framework::setup_error::setup_error(&v9, (uint64_t)v7);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(&v9);
  }
  v9.__vftable = v4;
  v9.__imp_.__imp_ = (char *)this + 8;
  uint64_t v5 = std::__tree<std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_unit *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,boost::unit_test::test_unit *>>((uint64_t **)&unk_268086720, (unint64_t *)&v9, &v9);
  ++qword_268086740;
  *((void *)this + 7) = v4;
}

void sub_22425E604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t boost::unit_test::framework::deregister_test_unit(unint64_t *a1)
{
  return std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>((uint64_t)&unk_268086720, a1 + 6);
}

uint64_t boost::unit_test::framework::state::clear(uint64_t this)
{
  if (*(void *)(this + 56))
  {
    uint64_t v1 = this;
    do
    {
      uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 40);
      if (*(_WORD *)(v2 + 50))
      {
        boost::function0<void>::~function0((uint64_t *)(v2 + 264));
        boost::unit_test::test_unit::~test_unit((boost::unit_test::test_unit *)v2);
        this = MEMORY[0x22A614FA0]();
      }
      else
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(v2 - 8);
      }
    }
    while (*(void *)(v1 + 56));
  }
  return this;
}

void boost::unit_test::framework::clear_context(boost::unit_test::framework *this)
{
  int v1 = (int)this;
  if (v1 == -1)
  {
    if ((int)((unint64_t)(qword_268086770 - qword_268086768) >> 5) >= 1)
    {
      uint64_t v9 = ((unint64_t)(qword_268086770 - qword_268086768) >> 5);
      do
      {
        if (!*(unsigned char *)(qword_268086768 + 32 * (v9 - 1) + 28))
        {
          uint64_t v2 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>((uint64_t)&v15, (long long *)(qword_268086768 + 32 * (v9 - 1) + 32), (long long *)qword_268086770, qword_268086768 + 32 * (v9 - 1));
          uint64_t v12 = v11;
          for (uint64_t i = qword_268086770; i != v12; i -= 32)
          {
            if (*(char *)(i - 9) < 0) {
              operator delete(*(void **)(i - 32));
            }
          }
          qword_268086770 = v12;
        }
      }
      while (v9-- > 1);
    }
  }
  else
  {
    uint64_t v3 = qword_268086768;
    if (v3 != qword_268086770)
    {
      while (*(_DWORD *)(v3 + 24) != v1)
      {
        v3 += 32;
        if (v3 == qword_268086770)
        {
          uint64_t v3 = qword_268086770;
          break;
        }
      }
    }
    if (v3 != qword_268086770)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>((uint64_t)&v16, (long long *)(v3 + 32), (long long *)qword_268086770, v3);
      uint64_t v7 = v6;
      for (uint64_t j = qword_268086770; j != v7; j -= 32)
      {
        if (*(char *)(j - 9) < 0) {
          operator delete(*(void **)(j - 32));
        }
      }
      qword_268086770 = v7;
    }
  }
}

BOOL boost::unit_test::framework::context_generator::is_empty(boost::unit_test::framework::context_generator *this)
{
  return qword_268086768 == qword_268086770;
}

void boost::unit_test::framework::context_generator::next(boost::unit_test::framework::context_generator *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(unsigned int *)this;
  if (v4 >= (qword_268086770 - qword_268086768) >> 5)
  {
    uint64_t v7 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    uint64_t v11 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  }
  else
  {
    uint64_t v6 = *(unsigned int *)this;
    *(_DWORD *)this = v6 + 1;
    uint64_t v7 = (void *)(qword_268086768 + 32 * v6);
    LODWORD(v8) = *((char *)v7 + 23);
    BOOL v9 = (int)v8 < 0;
    uint64_t v10 = v7[1];
    if ((int)v8 < 0) {
      uint64_t v7 = (void *)*v7;
    }
    uint64_t v8 = v8;
    if (v9) {
      uint64_t v8 = v10;
    }
    uint64_t v11 = (char *)v7 + v8;
  }
  *a2 = v7;
  a2[1] = v11;
}

uint64_t boost::unit_test::framework::current_test_unit(boost::unit_test::framework *this)
{
  uint64_t v3 = &qword_268086718;
  return std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)&unk_268086720, (unint64_t *)&qword_268086718, (uint64_t)&std::piecewise_construct, &v3)[5];
}

uint64_t boost::unit_test::framework::current_test_case_id(boost::unit_test::framework *this)
{
  return qword_268086718;
}

_DWORD *boost::unit_test::framework::get(boost::unit_test::framework::impl::_anonymous_namespace_ *a1, int a2)
{
  uint64_t v6 = a1;
  v5.__vftable = (std::runtime_error_vtbl *)&v6;
  uint64_t result = (_DWORD *)std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)&unk_268086720, (unint64_t *)&v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v5)[5];
  if ((*result & a2) == 0)
  {
    v4[0] = "Invalid test unit type";
    v4[1] = "";
    boost::unit_test::framework::internal_error::internal_error(&v5, (uint64_t)v4);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::internal_error>(&v5);
  }
  return result;
}

void sub_22425EA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::internal_error>(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = boost::unit_test::framework::internal_error::internal_error(exception, a1);
}

uint64_t *boost::unit_test::lazy_ostream::instance(boost::unit_test::lazy_ostream *this)
{
  {
    boost::unit_test::lazy_ostream::instance(void)::inst = (uint64_t)&unk_26D774A08;
    byte_268067A30 = 1;
    __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::unit_test::lazy_ostream::instance(void)::inst, &dword_223D44000);
  }
  return &boost::unit_test::lazy_ostream::instance(void)::inst;
}

boost::unit_test::framework::state *boost::unit_test::framework::state::state(boost::unit_test::framework::state *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + boost::detail::shared_count::~shared_count(this + 1) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((_OWORD *)this + 4) = xmmword_2246E9140;
  *((unsigned char *)this + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1boost::detail::shared_count::~shared_count(this + 1) = (char *)this + 96;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 2CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((_DWORD *)this + 34) = 0;
  boost::execution_monitor::execution_monitor((uint64_t)this + 168);
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  uint64_t v2 = MEMORY[0x263F8C0F8];
  *((void *)this + 3CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *((void *)this + 3boost::detail::shared_count::~shared_count(this + 1) = v2;
  return this;
}

void sub_22425EBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = v5;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v6, *(void **)(v2 + 152));
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v4, *(void **)(v2 + 96));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v3, *(void **)(v2 + 48));
  uint64_t v8 = *(void **)(v2 + 8);
  if (v8)
  {
    *(void *)(v2 + 16) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(uint64_t a1, atomic_uint **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(a1, a2[1]);
    boost::detail::shared_count::~shared_count(a2 + 6);
    operator delete(a2);
  }
}

void boost::unit_test::framework::state::~state(boost::unit_test::framework::state *this)
{
  boost::unit_test::framework::state::clear((uint64_t)this);
  boost::detail::shared_count::~shared_count((atomic_uint **)this + 30);
  std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy((uint64_t)this + 208, *((atomic_uint ***)this + 27));
  uint64_t v2 = *((void *)this + 25);
  if (v2) {
    MEMORY[0x22A614F80](v2, 0x1000C8077774924);
  }
  boost::detail::shared_count::~shared_count((atomic_uint **)this + 24);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 144, *((void **)this + 19));
  uint64_t v4 = (void **)((char *)this + 112);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 88, *((void **)this + 12));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void boost::unit_test::lazy_ostream::~lazy_ostream(boost::unit_test::lazy_ostream *this)
{
}

std::runtime_error *boost::unit_test::framework::internal_error::internal_error(std::runtime_error *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100](&__dst, *(void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  std::runtime_error::runtime_error(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D774A30;
  return a1;
}

void sub_22425EDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::test_case_counter::visit(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 204) == 1) {
    ++*(void *)(result + 8);
  }
  return result;
}

BOOL boost::unit_test::test_case_counter::test_suite_start(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 212) == 1;
}

void boost::unit_test::unit_test_monitor_t::~unit_test_monitor_t(boost::unit_test::unit_test_monitor_t *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x22A614F80](v2, 0x1000C8077774924);
  }
  boost::detail::shared_count::~shared_count((atomic_uint **)this + 3);
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_unit *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,boost::unit_test::test_unit *>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      int v8 = *((_DWORD *)v5 + 6);
      *(unsigned char *)(a4 + 28) = *((unsigned char *)v5 + 28);
      *(_DWORD *)(a4 + 24) = v8;
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

std::runtime_error *boost::unit_test::framework::internal_error::internal_error(std::runtime_error *a1, const std::runtime_error *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_26D774A30;
  return result;
}

unsigned __int8 **boost::unit_test::output::file_basename@<X0>(unsigned __int8 **result@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v2 = (unint64_t)result[1];
  if (*result != (unsigned __int8 *)v2)
  {
    uint64_t v4 = *result;
    uint64_t v5 = (unsigned __int8 *)(v2 - 1);
    while (v5 != v3)
    {
      int v7 = *v5--;
      int v6 = v7;
      if (v7 == 47 || v6 == 92)
      {
        uint64_t v4 = v5 + 1;
        goto LABEL_7;
      }
    }
    int v8 = *v3;
    if (v8 != 47 && v8 != 92) {
      goto LABEL_12;
    }
LABEL_7:
    if (v4 != (unsigned __int8 *)v2)
    {
      if (v2 > (unint64_t)(v4 + 1)) {
        uint64_t v3 = v4 + 1;
      }
      else {
        uint64_t v3 = result[1];
      }
      *uint64_t result = v3;
    }
  }
LABEL_12:
  *a2 = v3;
  a2[1] = (unsigned __int8 *)v2;
  return result;
}

void boost::unit_test::output::junit_log_formatter::log_start(uint64_t a1)
{
  int v1 = (void *)(a1 + 24);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  *(v1 - boost::detail::shared_count::~shared_count(this + 1) = v1;
  *int v1 = 0;
  v1[1] = 0;
  std::__list_imp<unsigned long>::clear(v1 + 15);
  boost::unit_test::output::junit_impl::junit_log_helper::clear((boost::unit_test::output::junit_impl::junit_log_helper *)(v1 + 2));
}

void boost::unit_test::output::junit_impl::junit_log_helper::clear(boost::unit_test::output::junit_impl::junit_log_helper *this)
{
  uint64_t v3 = *((void *)this + 9);
  for (uint64_t i = *((void *)this + 10);
        i != v3;
        std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100]((uint64_t)this + 88, i))
  {
    i -= 80;
  }
  *((void *)this + 1CoreML::Specification::SupportVectorClassifier::New(this, 0) = v3;
  std::__list_imp<std::string>::clear(this);
  std::__list_imp<std::string>::clear((void *)this + 3);
  if (*((char *)this + 71) < 0)
  {
    **((unsigned char **)this + 6) = 0;
    *((void *)this + 7) = 0;
  }
  else
  {
    *((unsigned char *)this + 48) = 0;
    *((unsigned char *)this + 7boost::detail::shared_count::~shared_count(this + 1) = 0;
  }
  *((unsigned char *)this + 96) = 0;
}

void *boost::unit_test::output::junit_log_formatter::log_finish(uint64_t a1, void *a2)
{
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>", 38);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a1 + 32))
  {
    int v6 = boost::unit_test::framework::get(*(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*(void *)(a1 + 16) + 32), 17);
    int v7 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((void *)v6 + 7);
    if (v7 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL) {
      goto LABEL_3;
    }
    while (1)
    {
      uint64_t v10 = *(void **)(a1 + 24);
      if (!v10) {
        goto LABEL_3;
      }
      while (1)
      {
        unint64_t v11 = v10[4];
        if ((unint64_t)v7 >= v11) {
          break;
        }
LABEL_11:
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          goto LABEL_3;
        }
      }
      if (v11 < (unint64_t)v7) {
        break;
      }
      int v6 = boost::unit_test::framework::get(v7, 17);
      int v7 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((void *)v6 + 7);
      if (v7 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL)
      {
LABEL_3:
        char v8 = *(unsigned char *)(a1 + 168);
        v12.__locale_ = (std::locale::__imp *)&unk_26D774BA0;
        uint64_t v13 = a2;
        int v14 = v6;
        uint64_t v15 = a1 + 16;
        uint64_t v16 = a1 + 40;
        uint64_t v17 = 0;
        char v18 = v8;
        return boost::unit_test::traverse_test_tree(*((boost::unit_test::framework::impl::_anonymous_namespace_ **)v6 + 6), (uint64_t)&v12, 1);
      }
    }
    ++v10;
    goto LABEL_11;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testsuites errors=\"1\">", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testsuite errors=\"1\" name=\"boost-test-framework\">", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testcase assertions=\"1\" name=\"test-setup\">", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<system-out>Incorrect setup: no test case executed</system-out>", 63);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</testcase></testsuite></testsuites>", 36);
}

void sub_22425F320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::unit_test::output::junit_log_formatter::log_build_info(uint64_t result)
{
  *(unsigned char *)(result + 168) = 1;
  return result;
}

void boost::unit_test::output::junit_log_formatter::test_unit_start(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)operator new(0x18uLL);
  uint64_t v6 = *(void *)(a3 + 48);
  int v7 = a1[18];
  a1 += 18;
  v5[1] = (uint64_t)a1;
  void v5[2] = v6;
  uint64_t *v5 = (uint64_t)v7;
  v7[1] = (uint64_t)v5;
  *a1 = v5;
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v8[0] = v8;
  v8[1] = v8;
  void v8[2] = 0;
  v9[0] = v9;
  v9[1] = v9;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  memset(v12, 0, 25);
  std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62 const&,boost::unit_test::output::junit_impl::junit_log_helper,0>((uint64_t)v13, (void *)(a3 + 48), (uint64_t)v8);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_impl<std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>>(a1 - 16, (uint64_t)v13);
  char v18 = (void **)&v17;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (v16 < 0) {
    operator delete(v15[3]);
  }
  std::__list_imp<std::string>::clear(v15);
  std::__list_imp<std::string>::clear(v14);
  char v18 = (void **)v12;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  std::__list_imp<std::string>::clear(v9);
  std::__list_imp<std::string>::clear(v8);
}

void sub_22425F460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  std::__list_imp<std::string>::clear((void *)(a1 + 32));
  std::__list_imp<std::string>::clear((void *)(a1 + 8));
  return a1;
}

void boost::unit_test::output::junit_impl::junit_log_helper::~junit_log_helper(void **this)
{
  unint64_t v2 = this + 9;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::__list_imp<std::string>::clear(this + 3);
  std::__list_imp<std::string>::clear(this);
}

void boost::unit_test::output::junit_log_formatter::test_unit_finish(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 144);
  uint64_t v2 = *v1;
  *(void *)(v2 + 8) = v1[1];
  *(void *)v1[1] = v2;
  --*(void *)(a1 + 160);
  operator delete(v1);
}

void boost::unit_test::output::junit_log_formatter::test_unit_skipped(uint64_t a1, uint64_t a2, uint64_t a3, std::string::value_type **a4)
{
  uint64_t v6 = (void *)(a3 + 48);
  uint64_t v5 = std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 16), (unint64_t *)(a3 + 48), (uint64_t)&std::piecewise_construct, &v6);
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)(v5 + 11), *a4, a4[1], a4[1] - *a4);
}

uint64_t boost::unit_test::output::junit_log_formatter::log_exception_start(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v58);
  *((unsigned char *)a1 + 169) = 0;
  current_log_entry = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  char v57 = 0;
  *(_OWORD *)unint64_t v51 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  long long v53 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v55 = 0;
  MEMORY[0x22A614700](v51, "unexpected exception");
  int v56 = 1;
  int v8 = *(_DWORD *)a4;
  if (*(int *)a4 > 214)
  {
    switch(v8)
    {
      case 215:
        unint64_t v9 = "execution timeout";
        goto LABEL_15;
      case 220:
        unint64_t v9 = "user fatal error";
        goto LABEL_15;
      case 225:
        unint64_t v9 = "system fatal error";
        goto LABEL_15;
    }
  }
  else
  {
    switch(v8)
    {
      case 200:
        unint64_t v9 = "user, assert() or CRT error";
        goto LABEL_15;
      case 205:
        unint64_t v9 = "uncaught exception";
        goto LABEL_15;
      case 210:
        unint64_t v9 = "system error";
        goto LABEL_15;
    }
  }
  unint64_t v9 = "no error";
LABEL_15:
  MEMORY[0x22A614700](&v52[1], v9);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"UNCAUGHT EXCEPTION:", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  long long v11 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a4 + 56) != *(void *)(a4 + 48))
  {
    std::locale v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"- function: \"", 13);
    std::string::basic_string[abi:ne180100](__dst, *(void **)(a4 + 48), *(void *)(a4 + 56) - *(void *)(a4 + 48));
    if (v62 >= 0) {
      uint64_t locale = __dst;
    }
    else {
      uint64_t locale = __dst[0].__locale_;
    }
    if (v62 >= 0) {
      uint64_t v14 = HIBYTE(v62);
    }
    else {
      uint64_t v14 = (uint64_t)__dst[1].__locale_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)locale, v14);
    if (SHIBYTE(v62) < 0) {
      operator delete(__dst[0].__locale_);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    char v16 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"- file: ", 8);
  long long v48 = *(_OWORD *)(a4 + 24);
  boost::unit_test::output::file_basename((unsigned __int8 **)&v48, &v49);
  std::string::basic_string[abi:ne180100](__dst, v49, v50 - (void)v49);
  if (v62 >= 0) {
    char v18 = __dst;
  }
  else {
    char v18 = __dst[0].__locale_;
  }
  if (v62 >= 0) {
    uint64_t v19 = HIBYTE(v62);
  }
  else {
    uint64_t v19 = (uint64_t)__dst[1].__locale_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if (SHIBYTE(v62) < 0) {
    operator delete(__dst[0].__locale_);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v20 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"- line: ", 8);
  uint64_t v21 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  unint64_t v22 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v23 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\nEXCEPTION STACK TRACE: --------------\n", 39);
  std::string::basic_string[abi:ne180100](__dst, *(void **)(a4 + 8), *(void *)(a4 + 16) - *(void *)(a4 + 8));
  if (v62 >= 0) {
    uint64_t v25 = __dst;
  }
  else {
    uint64_t v25 = __dst[0].__locale_;
  }
  if (v62 >= 0) {
    uint64_t v26 = HIBYTE(v62);
  }
  else {
    uint64_t v26 = (uint64_t)__dst[1].__locale_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  if (SHIBYTE(v62) < 0) {
    operator delete(__dst[0].__locale_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n-------------------------------------", 38);
  if (*((void *)a3 + 1) != *(void *)a3)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24)));
    uint64_t v27 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24)));
    unint64_t v28 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Last checkpoint:", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"- message: \"", 12);
    int v32 = *((char *)a3 + 47);
    if (v32 >= 0) {
      uint64_t v33 = (uint64_t)a3 + 24;
    }
    else {
      uint64_t v33 = *((void *)a3 + 3);
    }
    if (v32 >= 0) {
      uint64_t v34 = *((unsigned __int8 *)a3 + 47);
    }
    else {
      uint64_t v34 = *((void *)a3 + 4);
    }
    unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
    char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\"", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
    std::string v37 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"- file: ", 8);
    long long v47 = *a3;
    boost::unit_test::output::file_basename((unsigned __int8 **)&v47, &v49);
    std::string::basic_string[abi:ne180100](__dst, v49, v50 - (void)v49);
    if (v62 >= 0) {
      unint64_t v39 = __dst;
    }
    else {
      unint64_t v39 = __dst[0].__locale_;
    }
    if (v62 >= 0) {
      uint64_t v40 = HIBYTE(v62);
    }
    else {
      uint64_t v40 = (uint64_t)__dst[1].__locale_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    if (SHIBYTE(v62) < 0) {
      operator delete(__dst[0].__locale_);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
    unint64_t v41 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"- line: ", 8);
    std::string::size_type v42 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
    uint64_t v43 = std::locale::use_facet(__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  std::stringbuf::str();
  if (SHIBYTE(v55) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)&__dst[0].__locale_;
  uint64_t v55 = v62;
  unint64_t v44 = current_log_entry[10];
  if (v44 >= current_log_entry[11])
  {
    uint64_t v45 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(current_log_entry + 9, (long long *)v51);
  }
  else
  {
    std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(current_log_entry + 88, (std::string *)current_log_entry[10], (long long *)v51);
    uint64_t v45 = v44 + 80;
    current_log_entry[10] = v44 + 80;
  }
  current_log_entry[10] = v45;
  if (SHIBYTE(v55) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[1]);
  }
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  v58[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v58 + *(void *)(v58[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v58[1] = MEMORY[0x263F8C318] + 16;
  if (v59 < 0) {
    operator delete((void *)v58[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v60);
}

void sub_224260020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  *(void *)(v7 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = v8;
  std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *boost::unit_test::output::junit_log_formatter::get_current_log_entry(boost::unit_test::output::junit_log_formatter *this)
{
  if (!*((void *)this + 20)) {
    return (void *)((char *)this + 40);
  }
  int v1 = (void *)*((void *)this + 3);
  if (!v1) {
    return (void *)((char *)this + 40);
  }
  unint64_t v2 = *(void *)(*((void *)this + 18) + 16);
  uint64_t v3 = (void *)((char *)this + 24);
  do
  {
    unint64_t v4 = v1[4];
    BOOL v5 = v4 >= v2;
    if (v4 >= v2) {
      uint64_t v6 = v1;
    }
    else {
      uint64_t v6 = v1 + 1;
    }
    if (v5) {
      uint64_t v3 = v1;
    }
    int v1 = (void *)*v6;
  }
  while (*v6);
  if (v3 != (void *)((char *)this + 24) && v2 >= v3[4]) {
    return v3 + 5;
  }
  else {
    return (void *)((char *)this + 40);
  }
}

void *boost::unit_test::output::junit_log_formatter::log_exception_finish(boost::unit_test::output::junit_log_formatter *a1)
{
  uint64_t result = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  *(unsigned char *)(result[10] - 4) = 1;
  return result;
}

void *boost::unit_test::output::junit_log_formatter::log_entry_start(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = boost::unit_test::output::junit_log_formatter::get_current_log_entry((boost::unit_test::output::junit_log_formatter *)a1);
  uint64_t v8 = result;
  *((unsigned char *)result + 96) = 0;
  *(unsigned char *)(a1 + 169) = 1;
  if (a4 == 2)
  {
    if (*(int *)(a1 + 172) >= 4) {
      goto LABEL_5;
    }
  }
  else if (a4 == 1)
  {
    if (*(int *)(a1 + 172) >= 3) {
      goto LABEL_5;
    }
  }
  else
  {
    if (a4)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
      __p[28] = 0;
      *(_OWORD *)long long v47 = 0u;
      *(_OWORD *)long long v48 = 0u;
      long long v49 = 0u;
      memset(__p, 0, 24);
      *(_DWORD *)&__p[24] = 2;
      MEMORY[0x22A614700](v47, "failure");
      if (a4 == 3) {
        uint64_t v27 = "assertion error";
      }
      else {
        uint64_t v27 = "fatal error";
      }
      MEMORY[0x22A614700](&v48[1], v27);
      unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"ASSERTION FAILURE:", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
      uint64_t v29 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"- file   : ", 11);
      int v31 = *(char *)(a3 + 23);
      BOOL v32 = v31 < 0;
      uint64_t v33 = *(unsigned __int8 **)a3;
      if (v31 >= 0) {
        uint64_t v33 = (unsigned __int8 *)a3;
      }
      uint64_t v34 = *(unsigned __int8 *)(a3 + 23);
      if (v32) {
        uint64_t v34 = *(void *)(a3 + 8);
      }
      v43[0] = v33;
      v43[1] = &v33[v34];
      boost::unit_test::output::file_basename(v43, &v45);
      std::string::basic_string[abi:ne180100](&__dst, v45, v46 - (void)v45);
      if ((v56 & 0x80u) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = __dst.__locale_;
      }
      if ((v56 & 0x80u) == 0) {
        uint64_t v36 = v56;
      }
      else {
        uint64_t v36 = v55;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)p_dst, v36);
      if ((char)v56 < 0) {
        operator delete(__dst.__locale_);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
      std::string v37 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"- line   : ", 11);
      uint64_t v38 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      unint64_t v39 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"- message: ", 11);
      std::stringbuf::str();
      if ((v56 & 0x80u) == 0) {
        uint64_t locale = (const std::string::value_type *)&__dst;
      }
      else {
        uint64_t locale = (const std::string::value_type *)__dst.__locale_;
      }
      if ((v56 & 0x80u) == 0) {
        std::string::size_type v41 = v56;
      }
      else {
        std::string::size_type v41 = v55;
      }
      std::string::append((std::string *)__p, locale, v41);
      if ((char)v56 < 0) {
        operator delete(__dst.__locale_);
      }
      unint64_t v26 = v8[10];
      if (v26 >= v8[11])
      {
        uint64_t v42 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 9, (long long *)v47);
        goto LABEL_64;
      }
      std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 88, (std::string *)v8[10], (long long *)v47);
      goto LABEL_61;
    }
    if (*(int *)(a1 + 172) >= 1)
    {
LABEL_5:
      *((unsigned char *)result + 96) = 1;
      return result;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
  long long v49 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)long long v47 = 0u;
  *(_OWORD *)long long v48 = 0u;
  MEMORY[0x22A614700](v47, "info");
  MEMORY[0x22A614700](&v48[1], "message");
  unint64_t v9 = "INFO:";
  if (a4 == 1) {
    unint64_t v9 = "MESSAGE:";
  }
  if (a4 == 2) {
    uint64_t v10 = "WARNING:";
  }
  else {
    uint64_t v10 = v9;
  }
  size_t v11 = strlen(v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  uint64_t v13 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"- file   : ", 11);
  int v15 = *(char *)(a3 + 23);
  BOOL v16 = v15 < 0;
  uint64_t v17 = *(unsigned __int8 **)a3;
  if (v15 >= 0) {
    uint64_t v17 = (unsigned __int8 *)a3;
  }
  uint64_t v18 = *(unsigned __int8 *)(a3 + 23);
  if (v16) {
    uint64_t v18 = *(void *)(a3 + 8);
  }
  v44[0] = v17;
  v44[1] = &v17[v18];
  boost::unit_test::output::file_basename(v44, &v45);
  std::string::basic_string[abi:ne180100](&__dst, v45, v46 - (void)v45);
  if ((v56 & 0x80u) == 0) {
    uint64_t v19 = &__dst;
  }
  else {
    uint64_t v19 = __dst.__locale_;
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v20 = v56;
  }
  else {
    uint64_t v20 = v55;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v19, v20);
  if ((char)v56 < 0) {
    operator delete(__dst.__locale_);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  uint64_t v21 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"- line   : ", 11);
  unint64_t v22 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v23 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"- message: ", 11);
  std::stringbuf::str();
  if ((v56 & 0x80u) == 0) {
    uint64_t v24 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v24 = (const std::string::value_type *)__dst.__locale_;
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v25 = v56;
  }
  else {
    std::string::size_type v25 = v55;
  }
  std::string::append((std::string *)__p, v24, v25);
  if ((char)v56 < 0) {
    operator delete(__dst.__locale_);
  }
  unint64_t v26 = v8[10];
  if (v26 >= v8[11])
  {
    uint64_t v42 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 9, (long long *)v47);
    goto LABEL_64;
  }
  std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 88, (std::string *)v8[10], (long long *)v47);
LABEL_61:
  uint64_t v42 = v26 + 80;
  void v8[10] = v26 + 80;
LABEL_64:
  void v8[10] = v42;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[1]);
  }
  if (SHIBYTE(v48[0]) < 0) {
    operator delete(v47[0]);
  }
  v51[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v51 + *(void *)(v51[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v51[1] = MEMORY[0x263F8C318] + 16;
  if (v52 < 0) {
    operator delete((void *)v51[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x22A614E30](&v53);
}

void sub_224260924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  *(void *)(v7 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = v8;
  std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::string *boost::unit_test::output::junit_log_formatter::log_entry_value(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, char **a3)
{
  uint64_t result = (std::string *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    BOOL v5 = (std::string::size_type *)result;
    std::string::size_type size = result[3].__r_.__value_.__l.__size_;
    if (result[3].__r_.__value_.__r.__words[0] == size)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v10, *a3, a3[1], a3[1] - *a3);
      uint64_t result = (std::string *)operator new(0x28uLL);
      *(_OWORD *)&result->__r_.__value_.__r.__words[2] = v10;
      result[1].__r_.__value_.__l.__size_ = v11;
      std::string::size_type v9 = *v5;
      result->__r_.__value_.__r.__words[0] = *v5;
      result->__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      *(void *)(v9 + 8) = result;
      std::string::size_type *v5 = (std::string::size_type)result;
      ++v5[2];
    }
    else
    {
      uint64_t v7 = *a3;
      uint64_t v8 = a3[1];
      return std::string::append[abi:ne180100]<char const*,0>((std::string *)(size - 32), v7, v8);
    }
  }
  return result;
}

void sub_224260A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::unit_test::output::junit_log_formatter::log_entry_finish(boost::unit_test::output::junit_log_formatter *a1)
{
  uint64_t result = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  unint64_t v2 = result;
  if (!*((unsigned char *)result + 96))
  {
    uint64_t v3 = result[10];
    if (result[9] == v3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v5, "\n\n");
      uint64_t result = operator new(0x28uLL);
      *((_OWORD *)result + boost::detail::shared_count::~shared_count(this + 1) = v5;
      result[4] = v6;
      uint64_t v4 = *v2;
      *uint64_t result = *v2;
      result[1] = v2;
      *(void *)(v4 + 8) = result;
      *unint64_t v2 = result;
      ++v2[2];
    }
    else
    {
      uint64_t result = std::string::append((std::string *)(v3 - 32), "\n\n");
      *(unsigned char *)(v3 - 4) = 1;
    }
  }
  *((unsigned char *)v2 + 96) = 0;
  return result;
}

void sub_224260B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::unit_test::output::junit_log_formatter::entry_context_start(boost::unit_test::output::junit_log_formatter *a1)
{
  uint64_t result = (std::string *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    uint64_t v3 = (std::string *)(result[3].__r_.__value_.__l.__size_ - 32);
    if (*((unsigned char *)a1 + 169)) {
      uint64_t v4 = "\n- context:\n";
    }
    else {
      uint64_t v4 = "\n\nCONTEXT:\n";
    }
    return std::string::append(v3, v4);
  }
  return result;
}

void boost::unit_test::output::junit_log_formatter::log_entry_context(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, uint64_t a3, char **a4)
{
  if (!*((unsigned char *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1) + 96))
  {
    uint64_t v6 = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1)[10];
    if (*((unsigned char *)a1 + 169)) {
      uint64_t v7 = "  - '";
    }
    else {
      uint64_t v7 = "- '";
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v14, *a4, a4[1], a4[1] - *a4);
    uint64_t v8 = std::string::insert(&v14, 0, v7);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    long long v10 = std::string::append(&v15, "'\n");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v17 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v17 >= 0) {
      std::string::size_type v13 = HIBYTE(v17);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(v6 - 32), (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224260CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_log_formatter::get_default_stream_description(boost::unit_test::output::junit_log_formatter *this@<X0>, void **a2@<X8>)
{
  v36[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = boost::unit_test::framework::master_test_suite(this);
  if (*(char *)(v3 + 167) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v3 + 144), *(void *)(v3 + 152));
  }
  else {
    std::string v31 = *(std::string *)(v3 + 144);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace, " ");
    std::string::basic_string[abi:ne180100]<0>(qword_268086830, "\"");
    std::string::basic_string[abi:ne180100]<0>(qword_268086848, "/");
    std::string::basic_string[abi:ne180100]<0>(qword_268086860, "\\"");
    std::string::basic_string[abi:ne180100]<0>(qword_268086878, ":");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_223D44000);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_2680868B0, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_2680868C8, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_2680868E0, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_2680868F8, "_");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_51, 0, &dword_223D44000);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v31;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v34;
  v31.__r_.__value_.__r.__words[2] = v35[0];
  HIBYTE(v35[0]) = 0;
  LOBYTE(v34) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  long long v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 4);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v5 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v31;
    }
    else {
      uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    memmove(v5, v6, size);
  }
  strcpy((char *)v5 + size, ".xml");
  std::ifstream::basic_ifstream((uint64_t *)&v34);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (std::string::size_type *)MEMORY[0x263F8C2A8];
  if ((*((unsigned char *)&v35[2] + *(void *)(v34 - 24)) & 5) != 0)
  {
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v8 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v8 = v31.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)a2, v8 + 4);
    if (*((char *)a2 + 23) < 0) {
      a2 = (void **)*a2;
    }
    if (v8)
    {
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v9 = &v31;
      }
      else {
        long long v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      memmove(a2, v9, v8);
    }
    strcpy((char *)a2 + v8, ".xml");
    std::string::size_type v10 = *v7;
    std::string::size_type v11 = v7[3];
  }
  else
  {
    int v29 = 0;
    std::string::size_type v10 = *MEMORY[0x263F8C2A8];
    std::string::size_type v11 = *(void *)(MEMORY[0x263F8C2A8] + 24);
    while (1)
    {
      uint64_t v12 = v7;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v13 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v13 = v31.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v13 + 1);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v14 = &v28;
      }
      else {
        std::string v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if (v13)
      {
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v15 = &v31;
        }
        else {
          std::string v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        memmove(v14, v15, v13);
      }
      *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 95;
      boost::unit_test::utils::string_cast<int>();
      if ((v27 & 0x80u) == 0) {
        uint64_t v16 = v26;
      }
      else {
        uint64_t v16 = (void **)v26[0];
      }
      if ((v27 & 0x80u) == 0) {
        std::string::size_type v17 = v27;
      }
      else {
        std::string::size_type v17 = (std::string::size_type)v26[1];
      }
      uint64_t v18 = std::string::append(&v28, (const std::string::value_type *)v16, v17);
      uint64_t v7 = v12;
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(__p, ".xml");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      a2[2] = (void *)v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)a2 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if ((char)v27 < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      std::ifstream::basic_ifstream((uint64_t *)__p);
      int v22 = *(_DWORD *)((unsigned char *)&__p[1].__r_.__value_.__r.__words[1]
                      + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) & 5;
      __p[0].__r_.__value_.__r.__words[0] = v10;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v10 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v11;
      MEMORY[0x22A614850](&__p[0].__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x22A614E30](&v33);
      if (v22) {
        break;
      }
      if (*((char *)a2 + 23) < 0) {
        operator delete(*a2);
      }
      int v23 = v29++;
      if (v23 >= 99)
      {
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v24 = v31.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)a2, v24 + 4);
        if (*((char *)a2 + 23) < 0) {
          a2 = (void **)*a2;
        }
        if (v24)
        {
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = &v31;
          }
          else {
            std::string::size_type v25 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          memmove(a2, v25, v24);
        }
        strcpy((char *)a2 + v24, ".xml");
        break;
      }
    }
  }
  *(void *)&long long v34 = v10;
  *(void *)((char *)&v35[-2] + *(void *)(v10 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v11;
  MEMORY[0x22A614850](v35);
  std::istream::~istream();
  MEMORY[0x22A614E30](v36);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_22426145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 boost::unit_test::utils::replace_all_occurrences_of<std::string,std::string const*>@<Q0>(std::string *__s@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = __s;
  if (a2 != a3)
  {
    uint64_t v7 = a4;
    if (a4 != a5)
    {
      size_t v8 = a2;
      int64_t v9 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      do
      {
        std::string::size_type v10 = v6;
        int64_t size = v9;
        if ((v9 & 0x80) != 0)
        {
          std::string::size_type v10 = (std::string *)v6->__r_.__value_.__r.__words[0];
          int64_t size = v6->__r_.__value_.__l.__size_;
        }
        uint64_t v12 = v8[23];
        uint64_t v13 = *((void *)v8 + 1);
        if ((v12 & 0x80u) == 0) {
          std::string v14 = v8;
        }
        else {
          std::string v14 = *(char **)v8;
        }
        if ((v12 & 0x80u) == 0) {
          int64_t v15 = v8[23];
        }
        else {
          int64_t v15 = *((void *)v8 + 1);
        }
        if (!v15)
        {
          std::string::size_type v22 = 0;
          goto LABEL_24;
        }
        if (size >= v15)
        {
          uint64_t v44 = v9;
          uint64_t v16 = (unsigned __int8 *)v10 + size;
          int v17 = *v14;
          uint64_t v18 = v10;
          while (1)
          {
            int64_t v19 = size - v15;
            if (v19 == -1 || (uint64_t v20 = (unsigned __int8 *)memchr(v18, v17, v19 + 1)) == 0)
            {
LABEL_19:
              uint64_t v6 = __s;
              int64_t v9 = v44;
              goto LABEL_20;
            }
            long long v21 = v20;
            if (!memcmp(v20, v14, v15)) {
              break;
            }
            uint64_t v18 = (std::string *)(v21 + 1);
            int64_t size = v16 - (v21 + 1);
            if (size < v15) {
              goto LABEL_19;
            }
          }
          int64_t v9 = v44;
          if (v21 == v16)
          {
LABEL_61:
            uint64_t v6 = __s;
          }
          else
          {
            std::string::size_type v22 = v21 - (unsigned __int8 *)v10;
            uint64_t v6 = __s;
            if (v21 - (unsigned __int8 *)v10 != -1)
            {
LABEL_24:
              do
              {
                std::string::size_type v23 = (v12 & 0x80u) == 0 ? v12 : v13;
                int v24 = *(char *)(v7 + 23);
                std::string::size_type v25 = v24 >= 0 ? (const std::string::value_type *)v7 : *(const std::string::value_type **)v7;
                std::string::size_type v26 = v24 >= 0 ? *(unsigned __int8 *)(v7 + 23) : *(void *)(v7 + 8);
                std::string::replace(v6, v22, v23, v25, v26);
                uint64_t v27 = *(char *)(v7 + 23) < 0 ? *(void *)(v7 + 8) : *(unsigned __int8 *)(v7 + 23);
                int64_t v9 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string v28 = (std::string *)v6->__r_.__value_.__r.__words[0];
                  std::string::size_type v29 = v6->__r_.__value_.__l.__size_;
                }
                else
                {
                  std::string v28 = v6;
                  std::string::size_type v29 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
                }
                v22 += v27;
                uint64_t v12 = v8[23];
                uint64_t v13 = *((void *)v8 + 1);
                uint64_t v30 = (v12 & 0x80u) == 0 ? v8 : *(char **)v8;
                int64_t v31 = (v12 & 0x80u) == 0 ? v8[23] : *((void *)v8 + 1);
                if (v29 < v22) {
                  break;
                }
                if (v31)
                {
                  BOOL v32 = (char *)v28 + v22;
                  uint64_t v33 = (char *)v28 + v29;
                  int64_t v34 = v29 - v22;
                  if ((uint64_t)(v29 - v22) < v31) {
                    goto LABEL_61;
                  }
                  uint64_t v44 = v9;
                  int v35 = *v30;
                  while (1)
                  {
                    int64_t v36 = v34 - v31;
                    if (v36 == -1) {
                      goto LABEL_19;
                    }
                    std::string v37 = (char *)memchr(v32, v35, v36 + 1);
                    if (!v37) {
                      goto LABEL_19;
                    }
                    uint64_t v38 = v37;
                    if (!memcmp(v37, v30, v31))
                    {
                      int64_t v9 = v44;
                      if (v38 == v33) {
                        goto LABEL_61;
                      }
                      std::string::size_type v22 = v38 - (char *)v28;
                      uint64_t v6 = __s;
                      break;
                    }
                    BOOL v32 = v38 + 1;
                    int64_t v34 = v33 - (v38 + 1);
                    if (v34 < v31) {
                      goto LABEL_19;
                    }
                  }
                }
              }
              while (v22 != -1);
            }
          }
        }
LABEL_20:
        v8 += 24;
        if (v8 == a3) {
          break;
        }
        v7 += 24;
      }
      while (v7 != a5);
    }
  }
  __n128 result = *(__n128 *)&v6->__r_.__value_.__l.__data_;
  *(_OWORD *)a6 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(void *)(a6 + 16) = *((void *)&v6->__r_.__value_.__l + 2);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t boost::unit_test::utils::string_cast<int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v3);
}

void sub_224261908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::junit_log_formatter::~junit_log_formatter(boost::unit_test::output::junit_log_formatter *this)
{
  *(void *)this = &unk_26D774AC8;
  std::__list_imp<unsigned long>::clear((void *)this + 18);
  char v2 = (void **)((char *)this + 112);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  std::__list_imp<std::string>::clear((void *)this + 8);
  std::__list_imp<std::string>::clear((void *)this + 5);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

{
  void **v2;

  *(void *)this = &unk_26D774AC8;
  std::__list_imp<unsigned long>::clear((void *)this + 18);
  char v2 = (void **)((char *)this + 112);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  std::__list_imp<std::string>::clear((void *)this + 8);
  std::__list_imp<std::string>::clear((void *)this + 5);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  MEMORY[0x22A614FA0](this, 0x10B3C40071BC865);
}

uint64_t boost::unit_test::output::junit_log_formatter::set_log_level(uint64_t result, int a2)
{
  if (a2 >= 4) {
    int v2 = 4;
  }
  else {
    int v2 = a2;
  }
  if (a2 == 1) {
    int v2 = 0;
  }
  *(_DWORD *)(result + 172) = v2;
  return result;
}

void std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void boost::unit_test::output::junit_result_helper::visit(boost::unit_test::output::junit_result_helper *a1, unint64_t *a2)
{
  uint64_t v5 = *((void *)a1 + 3);
  size_t v8 = *(void **)(v5 + 8);
  uint64_t v6 = (void *)(v5 + 8);
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  unint64_t v9 = a2[6];
  std::string::size_type v10 = v6;
  do
  {
    unint64_t v11 = v7[4];
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = v7 + 1;
    }
    if (v12) {
      std::string::size_type v10 = v7;
    }
    uint64_t v7 = (void *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    int v14 = v4[81];
    boost::unit_test::output::junit_result_helper::output_detailed_logs(a1, (const boost::unit_test::output::junit_impl::junit_log_helper *)(v10 + 5), (const boost::unit_test::test_unit *)a2, v14, (const boost::unit_test::test_results *)v4);
  }
  else
  {
LABEL_12:
    v15[0] = v15;
    v15[1] = v15;
    _OWORD v15[2] = 0;
    v16[0] = v16;
    v16[1] = v16;
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    memset(v19, 0, 25);
    boost::unit_test::output::junit_result_helper::output_detailed_logs(a1, (const boost::unit_test::output::junit_impl::junit_log_helper *)v15, (const boost::unit_test::test_unit *)a2, 1, (const boost::unit_test::test_results *)v4);
    uint64_t v20 = (void **)v19;
    std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[1]);
    }
    std::__list_imp<std::string>::clear(v16);
    std::__list_imp<std::string>::clear(v15);
  }
}

void sub_224261BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t boost::unit_test::output::junit_result_helper::test_suite_start(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_suite *a2)
{
  if (*(void *)(*((void *)this + 2) + 48) == *((void *)a2 + 7))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<testsuite", 10);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)" tests", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" skipped", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" errors", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" failures", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" id", 3);
    ++*((void *)this + 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" name", 5);
    if (*((char *)a2 + 167) < 0) {
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
    }
    else {
      std::string v57 = *(std::string *)((unsigned char *)a2 + 6);
    }
    std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    BOOL v12 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type size = v57.__r_.__value_.__l.__size_;
      BOOL v12 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      while (1)
      {
        int v13 = v12->__r_.__value_.__s.__data_[0];
        if (v13 == 47) {
          break;
        }
        if (v13 == 32)
        {
          char v14 = 95;
LABEL_12:
          v12->__r_.__value_.__s.__data_[0] = v14;
        }
        BOOL v12 = (std::string *)((char *)v12 + 1);
        if (!--size) {
          goto LABEL_14;
        }
      }
      char v14 = 46;
      goto LABEL_12;
    }
LABEL_14:
    __p[0] = v57;
    memset(&v57, 0, sizeof(v57));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=\"", 2);
    std::string::size_type v15 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    uint64_t v16 = (std::locale::__imp *)__p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v15 = __p[0].__r_.__value_.__l.__size_;
      uint64_t v16 = (std::locale::__imp *)__p[0].__r_.__value_.__r.__words[0];
    }
    v50.__locale_ = v16;
    unint64_t v51 = (char *)v16 + v15;
    boost::unit_test::utils::print_escaped(v10, (char **)&v50);
    LOBYTE(v50.__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v50, 1);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" time", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(v50.__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v50, 1);
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    int64_t v19 = std::locale::use_facet(&v50, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v50);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (*((unsigned char *)this + 48))
    {
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<properties>", 12);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      long long v21 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<property name=\"platform\" value", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mac OS", 6);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__p, 1);
      std::string::size_type v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
      int v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::string::size_type v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<property name=\"compiler\" value", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Clang version 16.0.0 (clang-1600.0.26.6) [+internal-os]", 55);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)__p, 1);
      std::string::size_type v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      uint64_t v27 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<property name=\"stl\" value", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"libc++ version 180100", 21);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)__p, 1);
      std::string::size_type v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
      uint64_t v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      int64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
      BOOL v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
      std::ostream::operator<<();
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<property name=\"boost\" value", 28);
      std::stringbuf::str();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"=\"", 2);
      unint64_t v34 = v52;
      uint64_t locale = (std::locale::__imp *)&v50;
      if ((v52 & 0x80u) != 0)
      {
        uint64_t locale = v50.__locale_;
        unint64_t v34 = (unint64_t)v51;
      }
      v58.__locale_ = locale;
      char v59 = (char *)locale + v34;
      boost::unit_test::utils::print_escaped(v33, (char **)&v58);
      LOBYTE(v58.__locale_) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v58, 1);
      int64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
      std::string v37 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v52 < 0) {
        operator delete(v50.__locale_);
      }
      uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"</properties>", 13);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      unint64_t v39 = std::locale::use_facet(&v50, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v50);
      std::ostream::put();
      std::ostream::flush();
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v55 < 0) {
        operator delete(v54);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22A614E30](&v56);
    }
  }
  if (!*((unsigned char *)v4 + 81))
  {
    uint64_t v41 = *((void *)this + 3);
    uint64_t v44 = *(void **)(v41 + 8);
    uint64_t v42 = (void *)(v41 + 8);
    uint64_t v43 = v44;
    if (v44)
    {
      unint64_t v45 = *((void *)a2 + 7);
      uint64_t v46 = v42;
      do
      {
        unint64_t v47 = v43[4];
        BOOL v48 = v47 >= v45;
        if (v47 >= v45) {
          long long v49 = v43;
        }
        else {
          long long v49 = v43 + 1;
        }
        if (v48) {
          uint64_t v46 = v43;
        }
        uint64_t v43 = (void *)*v49;
      }
      while (*v49);
      if (v46 != v42 && v45 >= v46[4]) {
        boost::unit_test::output::junit_result_helper::output_detailed_logs(this, (const boost::unit_test::output::junit_impl::junit_log_helper *)(v46 + 5), (const boost::unit_test::test_suite *)((char *)a2 + 8), 0, (const boost::unit_test::test_results *)v4);
      }
    }
  }
  return 1;
}

void sub_22426269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

boost::unit_test::output::junit_result_helper *boost::unit_test::output::junit_result_helper::test_suite_finish(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_suite *a2)
{
  if (*(void *)(*((void *)this + 2) + 48) == *((void *)a2 + 7))
  {
    uint64_t v2 = (uint64_t)this;
    boost::unit_test::output::junit_result_helper::write_testcase_system_out(this, *((const boost::unit_test::output::junit_impl::junit_log_helper **)this + 4), 0, 0);
    boost::unit_test::output::junit_result_helper::write_testcase_system_err(v2, *(const boost::unit_test::output::junit_impl::junit_log_helper **)(v2 + 32), 0, 0);
    uint64_t v3 = *(void **)(v2 + 8);
    return (boost::unit_test::output::junit_result_helper *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"</testsuite>", 12);
  }
  return this;
}

void boost::unit_test::output::junit_result_helper::~junit_result_helper(boost::unit_test::output::junit_result_helper *this)
{
}

boost::unit_test::output::junit_result_helper *boost::unit_test::output::junit_result_helper::output_detailed_logs(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, int a4, const boost::unit_test::test_results *a5)
{
  unint64_t v9 = this;
  if (*(_DWORD *)a3 != 16) {
    goto LABEL_8;
  }
  uint64_t v10 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 10);
  if (v10 != v11)
  {
    int v12 = 0;
    do
    {
      if (*(_DWORD *)(v10 + 72)) {
        ++v12;
      }
      v10 += 80;
    }
    while (v10 != v11);
    if (v12)
    {
LABEL_8:
      boost::unit_test::output::junit_result_helper::write_testcase_header(this, a3, a5);
      if (a4)
      {
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v9 + 1), (uint64_t)"<skipped/>", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        char v14 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        for (uint64_t i = (char *)*((void *)a2 + 9); i != *((char **)a2 + 10); i += 80)
          boost::unit_test::output::junit_result_helper::add_log_entry((uint64_t)v9, i);
      }
      boost::unit_test::output::junit_result_helper::write_testcase_system_out(v9, a2, a3, a4);
      boost::unit_test::output::junit_result_helper::write_testcase_system_err((uint64_t)v9, a2, a3, a5);
      std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v9 + 1), (uint64_t)"</testcase>", 11);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v18);
      std::ostream::put();
      return (boost::unit_test::output::junit_result_helper *)std::ostream::flush();
    }
  }
  return this;
}

void sub_2242629F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void boost::unit_test::output::junit_result_helper::write_testcase_header(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_unit *a2, const boost::unit_test::test_results *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  if (*((void *)a2 + 6) == *(void *)(*((void *)this + 2) + 48))
  {
    MEMORY[0x22A614700](&__p, "boost_test");
    goto LABEL_20;
  }
  boost::unit_test::output::junit_result_helper::get_class_name(this, a2, (uint64_t)v27);
  int v5 = *((char *)a2 + 159);
  *(_OWORD *)int v24 = *(_OWORD *)&v27[0].__locale_;
  uint64_t v25 = v28;
  if (v5 < 0) {
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else {
    std::string v23 = *(std::string *)((char *)a2 + 136);
  }
  std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  size_t v8 = &v23;
  std::string::size_type v9 = v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
    size_t v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    while (1)
    {
      int v10 = v8->__r_.__value_.__s.__data_[0];
      if (v10 == 47) {
        break;
      }
      if (v10 == 32)
      {
        char v11 = 95;
LABEL_13:
        v8->__r_.__value_.__s.__data_[0] = v11;
      }
      size_t v8 = (std::string *)((char *)v8 + 1);
      if (!--size)
      {
        std::string::size_type v9 = v23.__r_.__value_.__r.__words[0];
        char v7 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        goto LABEL_16;
      }
    }
    char v11 = 46;
    goto LABEL_13;
  }
LABEL_16:
  v27[0] = (std::locale)v23.__r_.__value_.__r.__words[1];
  *(std::locale::__imp **)((char *)&v27[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v23.__r_.__value_.__r.__words[1]
                                                                                   + 7);
  memset(&v23, 0, sizeof(v23));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v9;
    __p.__r_.__value_.__r.__words[1] = (std::string::size_type)v27[0];
    *(std::locale *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::locale *)((char *)&v27[0].__locale_ + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v7;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = v9;
    __p.__r_.__value_.__r.__words[1] = (std::string::size_type)v27[0];
    *(std::locale *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::locale *)((char *)&v27[0].__locale_ + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v7;
  }
LABEL_20:
  if (*(_DWORD *)a2 == 16) {
    std::string::append(&__p, "-setup-teardown");
  }
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)"<testcase assertions", 20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v27[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v27, 1);
  int v13 = SHIBYTE(v25);
  if (v25 >= 0) {
    char v14 = (char *)HIBYTE(v25);
  }
  else {
    char v14 = (char *)v24[1];
  }
  if (v14)
  {
    std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)" classname", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"=\"", 2);
    uint64_t v16 = (void **)v24[0];
    if (v13 >= 0) {
      uint64_t v16 = v24;
    }
    v27[0].__locale_ = (std::locale::__imp *)v16;
    v27[1].__locale_ = (std::locale::__imp *)&v14[(void)v16];
    boost::unit_test::utils::print_escaped(v15, (char **)v27);
    LOBYTE(v27[0].__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v27, 1);
  }
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"=\"", 2);
  std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = (std::locale::__imp *)&__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
    p_p = (std::locale::__imp *)__p.__r_.__value_.__r.__words[0];
  }
  v27[0].__locale_ = p_p;
  v27[1].__locale_ = (std::locale::__imp *)((char *)p_p + v18);
  boost::unit_test::utils::print_escaped(v17, (char **)v27);
  LOBYTE(v27[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v27, 1);
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" time", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v27[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v27, 1);
  long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)">", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  std::string::size_type v22 = std::locale::use_facet(v27, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(v27);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224262E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::add_log_entry(uint64_t a1, char *a2)
{
  int64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v4 = *((_DWORD *)a2 + 18);
  if (v4 == 1)
  {
    int v5 = "error";
  }
  else
  {
    if (v4 != 2) {
      return;
    }
    int v5 = "failure";
  }
  MEMORY[0x22A614700](&v31, v5);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"<", 1);
  if (v33 >= 0) {
    char v7 = &v31;
  }
  else {
    char v7 = v31;
  }
  if (v33 >= 0) {
    uint64_t v8 = HIBYTE(v33);
  }
  else {
    uint64_t v8 = v32;
  }
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" message", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=\"", 2);
  int v11 = a2[23];
  BOOL v12 = v11 < 0;
  int v13 = *(char **)a2;
  if (v11 >= 0) {
    int v13 = a2;
  }
  uint64_t v14 = a2[23];
  if (v12) {
    uint64_t v14 = *((void *)a2 + 1);
  }
  std::string __p = v13;
  uint64_t v27 = &v13[v14];
  boost::unit_test::utils::print_escaped(v10, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
  std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" type", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"=\"", 2);
  uint64_t v16 = (char *)*((void *)a2 + 3);
  int v17 = a2[47];
  if (v17 >= 0) {
    uint64_t v16 = a2 + 24;
  }
  uint64_t v18 = *((void *)a2 + 4);
  if (v17 >= 0) {
    uint64_t v18 = a2[47];
  }
  std::string __p = v16;
  uint64_t v27 = &v16[v18];
  boost::unit_test::utils::print_escaped(v15, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)">", 1);
  uint64_t v19 = a2[71];
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)a2 + 7);
  }
  if (v19)
  {
    uint64_t v30 = *(void **)(a1 + 8);
    std::operator+<char>();
    p_p = (char *)__p;
    if ((v28 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    long long v21 = (char *)v28;
    if ((v28 & 0x80u) != 0) {
      long long v21 = v27;
    }
    *(void *)&long long v29 = p_p;
    *((void *)&v29 + boost::detail::shared_count::~shared_count(this + 1) = &v21[(void)p_p];
    boost::unit_test::utils::operator<<(&v30, &v29);
    if ((char)v28 < 0) {
      operator delete(__p);
    }
  }
  std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"</", 2);
  if (v33 >= 0) {
    std::string v23 = &v31;
  }
  else {
    std::string v23 = v31;
  }
  if (v33 >= 0) {
    uint64_t v24 = HIBYTE(v33);
  }
  else {
    uint64_t v24 = v32;
  }
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)">", 1);
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
}

void sub_2242630DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::write_testcase_system_out(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, char a4)
{
  uint64_t v8 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "system-out");
  uint64_t v17 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    char v19 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v18 = __p;
    char v19 = 1;
  }
  std::string::size_type v9 = a2;
  if (a4)
  {
    boost::unit_test::output::junit_result_helper::build_skipping_chain(this, a3, &v14);
    for (uint64_t i = v15; i != &v14; uint64_t i = (uint64_t *)i[1])
      boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, (uint64_t)(i + 2));
    std::__list_imp<std::string>::clear(&v14);
    std::string::size_type v9 = a2;
  }
  while (1)
  {
    std::string::size_type v9 = (const boost::unit_test::output::junit_impl::junit_log_helper *)*((void *)v9 + 1);
    if (v9 == a2) {
      break;
    }
    boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, (uint64_t)v9 + 16);
  }
  uint64_t v12 = *((void *)a2 + 9);
  uint64_t v11 = *((void *)a2 + 10);
  if (v12 != v11)
  {
    uint64_t v13 = v12 + 48;
    do
    {
      if (!*(_DWORD *)(v13 + 24))
      {
        boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, v13);
        uint64_t v11 = *((void *)a2 + 10);
      }
      v13 += 80;
    }
    while (v13 - 48 != v11);
  }
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper((boost::unit_test::output::junit_result_helper::conditional_cdata_helper *)&v17);
}

void sub_224263274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::output::junit_result_helper::write_testcase_system_err(uint64_t this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, const boost::unit_test::test_results *a4)
{
  uint64_t v6 = this;
  if (a4 && !*((unsigned char *)a4 + 81))
  {
    this = boost::unit_test::test_results::passed(a4);
    int v7 = this ^ 1;
  }
  else
  {
    int v7 = 0;
  }
  if (*((void *)a2 + 5)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (v8) {
    return this;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v66);
  if (v7) {
    std::string::size_type v9 = "Failures detected in:";
  }
  else {
    std::string::size_type v9 = "ERROR STREAM:";
  }
  if (v7) {
    uint64_t v10 = 21;
  }
  else {
    uint64_t v10 = 13;
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)a3 != 16)
  {
    std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"- test case: ", 13);
    boost::unit_test::test_unit::full_name(a3, &v64);
    std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v64;
    }
    else {
      uint64_t v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    LOBYTE(v56[0]) = 10;
    std::string v18 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v17, (unsigned __int8 *)v17 + size, (unsigned __int8 *)v56);
    char v19 = (char *)&v64 + HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      uint64_t v20 = &v64;
    }
    else
    {
      char v19 = (char *)(v64.__r_.__value_.__r.__words[0] + v64.__r_.__value_.__l.__size_);
      uint64_t v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v64, v18 - (unsigned __int8 *)v20, v19 - (char *)v18);
    std::string __dst = v64;
    memset(&v64, 0, sizeof(v64));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_dst, v22);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (*((char *)a3 + 183) < 0)
    {
      if (!*((void *)a3 + 21))
      {
LABEL_65:
        std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(v66[0] - 24)));
        uint64_t v38 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"- file: ", 8);
        long long v63 = *(_OWORD *)((char *)a3 + 24);
        boost::unit_test::output::file_basename((unsigned __int8 **)&v63, (unsigned __int8 **)v56);
        std::string::basic_string[abi:ne180100](&__dst, v56[0], (char *)v56[1] - (char *)v56[0]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = &__dst;
        }
        else {
          uint64_t v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
        uint64_t v42 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"- line: ", 8);
        uint64_t v43 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
        uint64_t v44 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_74;
      }
    }
    else if (!*((unsigned char *)a3 + 183))
    {
      goto LABEL_65;
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" '", 2);
    int v34 = *((char *)a3 + 183);
    if (v34 >= 0) {
      int v35 = (char *)a3 + 160;
    }
    else {
      int v35 = (char *)*((void *)a3 + 20);
    }
    if (v34 >= 0) {
      uint64_t v36 = *((unsigned __int8 *)a3 + 183);
    }
    else {
      uint64_t v36 = *((void *)a3 + 21);
    }
    std::string v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"'", 1);
    goto LABEL_65;
  }
  if (*((void *)a3 + 6) == *(void *)(*(void *)(v6 + 16) + 48))
  {
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" boost.test global setup/teardown", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"- test suite: ", 14);
    boost::unit_test::test_unit::full_name(a3, &v65);
    std::string::size_type v24 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = &v65;
    }
    else {
      uint64_t v25 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = v65.__r_.__value_.__l.__size_;
    }
    LOBYTE(v56[0]) = 10;
    std::string::size_type v26 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v25, (unsigned __int8 *)v25 + v24, (unsigned __int8 *)v56);
    uint64_t v27 = (char *)&v65 + HIBYTE(v65.__r_.__value_.__r.__words[2]);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      unsigned __int8 v28 = &v65;
    }
    else
    {
      uint64_t v27 = (char *)(v65.__r_.__value_.__r.__words[0] + v65.__r_.__value_.__l.__size_);
      unsigned __int8 v28 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v65, v26 - (unsigned __int8 *)v28, v27 - (char *)v26);
    std::string __dst = v65;
    memset(&v65, 0, sizeof(v65));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &__dst;
    }
    else {
      long long v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = __dst.__r_.__value_.__l.__size_;
    }
    int64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    uint64_t v32 = std::locale::use_facet((const std::locale *)v56, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale((std::locale *)v56);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
  }
LABEL_74:
  if (*((void *)a2 + 5))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(v66[0] - 24)));
    unint64_t v45 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"STDERR BEGIN: ------------", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
    unint64_t v47 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  for (uint64_t i = *((void *)a2 + 4);
        (const boost::unit_test::output::junit_impl::junit_log_helper *)i != (const boost::unit_test::output::junit_impl::junit_log_helper *)((char *)a2 + 24);
        uint64_t i = *(void *)(i + 8))
  {
    int v49 = *(char *)(i + 39);
    if (v49 >= 0) {
      uint64_t v50 = i + 16;
    }
    else {
      uint64_t v50 = *(void *)(i + 16);
    }
    if (v49 >= 0) {
      uint64_t v51 = *(unsigned __int8 *)(i + 39);
    }
    else {
      uint64_t v51 = *(void *)(i + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v50, v51);
  }
  if (*((void *)a2 + 5))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(v66[0] - 24)));
    unsigned __int8 v52 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"STDERR END    ------------", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
    unsigned int v54 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  std::string::size_type v55 = *(void *)(v6 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "system-err");
  __dst.__r_.__value_.__r.__words[0] = v55;
  if (SHIBYTE(v59) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__dst.__r_.__value_.__r.__words[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    char v62 = 1;
    if (SHIBYTE(v59) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
    uint64_t v61 = v59;
    char v62 = 1;
  }
  std::stringbuf::str();
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&__dst, (uint64_t)v56);
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper((boost::unit_test::output::junit_result_helper::conditional_cdata_helper *)&__dst);
  v66[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v66 + *(void *)(v66[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v66[1] = MEMORY[0x263F8C318] + 16;
  if (v67 < 0) {
    operator delete((void *)v66[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v68);
}

void sub_224263D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
}

std::string *boost::unit_test::output::junit_result_helper::get_class_name@<X0>(boost::unit_test::output::junit_result_helper *this@<X0>, const boost::unit_test::test_unit *a2@<X1>, uint64_t a3@<X8>)
{
  std::locale v27[2] = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __n128 result = (std::string *)*((void *)a2 + 7);
  if (result != (std::string *)0xFFFFFFFFLL && result != *(std::string **)(*((void *)this + 2) + 48))
  {
    int v7 = (uint64_t *)(a3 + 8);
    do
    {
      BOOL v8 = boost::unit_test::framework::get((boost::unit_test::framework::impl::_anonymous_namespace_ *)result, 17);
      std::string::size_type v9 = v8;
      if (*((char *)v8 + 159) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 17), *((void *)v8 + 18));
      }
      else {
        std::string __p = *(std::string *)(v8 + 34);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        while (1)
        {
          int v12 = p_p->__r_.__value_.__s.__data_[0];
          if (v12 == 47) {
            break;
          }
          if (v12 == 32)
          {
            char v13 = 95;
LABEL_19:
            p_p->__r_.__value_.__s.__data_[0] = v13;
          }
          p_p = (std::string *)((char *)p_p + 1);
          if (!--size) {
            goto LABEL_21;
          }
        }
        char v13 = 46;
        goto LABEL_19;
      }
LABEL_21:
      std::string v25 = __p;
      memset(&__p, 0, sizeof(__p));
      uint64_t v14 = std::string::append(&v25, ".");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      int v16 = *(char *)(a3 + 23);
      if (v16 >= 0) {
        uint64_t v17 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v17 = *(const std::string::value_type **)a3;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(a3 + 8);
      }
      char v19 = std::string::append(&v26, v17, v18);
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
      v27[0] = v19->__r_.__value_.__l.__size_;
      *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v20;
      *int v7 = v27[0];
      *(void *)(a3 + 15) = *(void *)((char *)v27 + 7);
      *(unsigned char *)(a3 + 23) = v21;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __n128 result = (std::string *)*((void *)v9 + 7);
    }
    while (result != (std::string *)0xFFFFFFFFLL && result != *(std::string **)(*((void *)this + 2) + 48));
    if (*(char *)(a3 + 23) < 0)
    {
      uint64_t v22 = *v7;
      if (!*v7) {
        return result;
      }
      uint64_t v23 = *(void *)a3 + v22;
    }
    else
    {
      uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
      if (!*(unsigned char *)(a3 + 23)) {
        return result;
      }
      uint64_t v23 = a3 + v22;
    }
    if (*(unsigned char *)(v23 - 1) == 46) {
      return std::string::erase((std::string *)a3, v22 - 1, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

void sub_224264084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::utils::print_escaped(void *a1, char **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  {
    long long v15 = a2;
    a2 = v15;
    if (v16)
    {
      v17[0] = 60;
      std::string::size_type v18 = "lt";
      char v19 = 62;
      std::string::size_type v20 = "gt";
      char v21 = 38;
      uint64_t v22 = "amp";
      char v23 = 39;
      std::string::size_type v24 = "apos";
      char v25 = 34;
      std::string v26 = "quot";
      std::map<char,char const*>::map[abi:ne180100]((uint64_t)&boost::unit_test::utils::print_escaped(std::ostream &,boost::unit_test::basic_cstring<char const>)::char_type, v17, 5);
      __cxa_atexit((void (*)(void *))std::map<char,char const*>::~map[abi:ne180100], &boost::unit_test::utils::print_escaped(std::ostream &,boost::unit_test::basic_cstring<char const>)::char_type, &dword_223D44000);
      a2 = v15;
    }
  }
  uint64_t v3 = *a2;
  int v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      int v5 = *v3;
      uint64_t v6 = off_268067AB8;
      if (!off_268067AB8) {
        goto LABEL_13;
      }
      int v7 = &off_268067AB8;
      do
      {
        int v8 = *((char *)v6 + 32);
        BOOL v9 = v8 < v5;
        if (v8 >= v5) {
          uint64_t v10 = v6;
        }
        else {
          uint64_t v10 = v6 + 1;
        }
        if (!v9) {
          int v7 = (_UNKNOWN **)v6;
        }
        uint64_t v6 = (void *)*v10;
      }
      while (*v10);
      if (v7 != &off_268067AB8 && v5 >= *((char *)v7 + 32))
      {
        v17[0] = 38;
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v17, 1);
        int v12 = (const char *)v7[5];
        size_t v13 = strlen(v12);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        v17[0] = 59;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v17, 1);
      }
      else
      {
LABEL_13:
        v17[0] = *v3;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v17, 1);
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_2242642FC(_Unwind_Exception *a1)
{
}

uint64_t std::map<char,char const*>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<char,char const*>::map[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__emplace_hint_unique_key_args<char,std::pair<char const,char const*> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_2242643B0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__emplace_hint_unique_key_args<char,std::pair<char const,char const*> const&>(uint64_t **a1, uint64_t *a2, char *a3, _OWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__find_equal<char>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__find_equal<char>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((char *)a2 + 32), v6 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((char *)v10 + 32) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(char *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 32))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          int v22 = *(char *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *boost::unit_test::utils::operator<<(void **a1, long long *a2)
{
  int v4 = *a1;
  std::string::basic_string[abi:ne180100](&__p, "<![CDATA[", 9uLL);
  if ((v15 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v6 = v15;
  }
  else {
    uint64_t v6 = v14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
  if ((char)v15 < 0) {
    operator delete(__p);
  }
  int v7 = *a1;
  long long v12 = *a2;
  boost::unit_test::utils::print_escaped_cdata(v7, (char **)&v12);
  int v8 = *a1;
  std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
  if ((v15 & 0x80u) == 0) {
    BOOL v9 = &__p;
  }
  else {
    BOOL v9 = __p;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = v14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if ((char)v15 < 0) {
    operator delete(__p);
  }
  return v8;
}

void sub_2242646DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::utils::print_escaped_cdata(void *a1, char **a2)
{
  {
    boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_std::vector<std::string>::pointer end = (uint64_t)"]]>";
    *(void *)algn_268067AD8 = "";
  }
  int v4 = *a2;
  unint64_t v5 = *(void *)algn_268067AD8
     - boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end;
  if (*(void *)algn_268067AD8 == boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end)
  {
    size_t v7 = a2[1] - v4;
    goto LABEL_14;
  }
  uint64_t v6 = a2[1];
  size_t v7 = v6 - v4;
  if (v5 > v6 - v4 || v4 == &v6[-v5 + 1]) {
    goto LABEL_14;
  }
  int v8 = *a2;
  if (v5)
  {
    do
    {
      uint64_t v9 = 0;
      while (v8[v9] == *(unsigned char *)(boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end
                                 + v9))
      {
        if (v5 == ++v9) {
          goto LABEL_23;
        }
      }
    }
    while (v8++ != &v6[-v5]);
    goto LABEL_14;
  }
LABEL_23:
  int64_t v13 = v8 - v4;
  if (v8 - v4 == -1)
  {
LABEL_14:
    std::string::basic_string[abi:ne180100](&__p, v4, v7);
    if ((v26 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v12 = v26;
    }
    else {
      uint64_t v12 = v25;
    }
    goto LABEL_20;
  }
  unint64_t v14 = v13 + 2;
  if (v7 >= v13 + 2) {
    uint64_t v6 = v8 + 2;
  }
  std::string::basic_string[abi:ne180100](&__p, v4, v6 - v4);
  if ((v26 & 0x80u) == 0) {
    unsigned __int8 v15 = &__p;
  }
  else {
    unsigned __int8 v15 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v16 = v26;
  }
  else {
    uint64_t v16 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v15, v16);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100](&__p, (void *)boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end, *(void *)algn_268067AD8- boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end);
  if ((v26 & 0x80u) == 0) {
    uint64_t v17 = &__p;
  }
  else {
    uint64_t v17 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v18 = v26;
  }
  else {
    uint64_t v18 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v17, v18);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100](&__p, "<![CDATA[", 9uLL);
  if ((v26 & 0x80u) == 0) {
    char v19 = &__p;
  }
  else {
    char v19 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = v26;
  }
  else {
    uint64_t v20 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v19, v20);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  char v21 = a2[1];
  int v22 = (char *)(v21 - *a2);
  if (v22 == (char *)-1) {
    char v21 = *a2 - 1;
  }
  if ((unint64_t)v22 >= v14) {
    char v23 = &(*a2)[v14];
  }
  else {
    char v23 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  }
  if ((unint64_t)v22 < v14) {
    char v21 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  }
  std::string::basic_string[abi:ne180100](&__p, v23, v21 - v23);
  if ((v26 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v12 = v26;
  }
  else {
    uint64_t v12 = v25;
  }
LABEL_20:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v12);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
}

void sub_22426497C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::build_skipping_chain(boost::unit_test::output::junit_result_helper *this@<X0>, const boost::unit_test::test_unit *a2@<X1>, uint64_t *a3@<X8>)
{
  v44[2] = *MEMORY[0x263EF8340];
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  unint64_t v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((void *)a2 + 6);
  if (v5 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL
    || v5 == *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*((void *)this + 2) + 48))
  {
    uint64_t v7 = *((void *)this + 3);
    int v8 = *(void **)(v7 + 8);
  }
  else
  {
    do
    {
      char v23 = (boost::unit_test::test_unit *)boost::unit_test::framework::get(v5, 17);
      boost::unit_test::test_unit::full_name(v23, &v40);
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v40;
      }
      else {
        uint64_t v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      unsigned __int8 v42 = 10;
      unsigned __int8 v26 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v25, (unsigned __int8 *)v25 + size, &v42);
      uint64_t v27 = (char *)&v40 + HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        uint64_t v28 = &v40;
      }
      else
      {
        uint64_t v27 = (char *)(v40.__r_.__value_.__r.__words[0] + v40.__r_.__value_.__l.__size_);
        uint64_t v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      std::string::erase(&v40, v26 - (unsigned __int8 *)v28, v27 - (char *)v26);
      std::string v43 = v40;
      memset(&v40, 0, sizeof(v40));
      long long v29 = std::string::insert(&v43, 0, "- disabled test unit: '");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      int64_t v31 = std::string::append(&v41, "'\n");
      std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
      v44[0] = v31->__r_.__value_.__l.__size_;
      *(void *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v34 = operator new(0x28uLL);
      uint64_t v35 = v44[0];
      v34[2] = v32;
      v34[3] = v35;
      *(void *)((char *)v34 + 3boost::detail::shared_count::~shared_count(this + 1) = *(void *)((char *)v44 + 7);
      *((unsigned char *)v34 + 39) = v33;
      uint64_t v36 = *a3;
      *int v34 = *a3;
      v34[1] = a3;
      *(void *)(v36 + 8) = v34;
      *a3 = (uint64_t)v34;
      ++a3[2];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = *((void *)this + 3);
      int v8 = *(void **)(v7 + 8);
      if (v8)
      {
        std::string v37 = *(void **)(v7 + 8);
        do
        {
          unint64_t v38 = v37[4];
          if ((unint64_t)v5 >= v38)
          {
            if (v38 >= (unint64_t)v5) {
              goto LABEL_7;
            }
            ++v37;
          }
          std::string v37 = (void *)*v37;
        }
        while (v37);
      }
      unint64_t v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((void *)v23 + 7);
    }
    while (v5 != (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL
         && v5 != *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*((void *)this + 2) + 48));
  }
LABEL_7:
  if (v8)
  {
    uint64_t v9 = (void *)(v7 + 8);
    uint64_t v10 = (void *)(v7 + 8);
    do
    {
      unint64_t v11 = v8[4];
      BOOL v12 = v11 >= (unint64_t)v5;
      if (v11 >= (unint64_t)v5) {
        int64_t v13 = v8;
      }
      else {
        int64_t v13 = v8 + 1;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      int v8 = (void *)*v13;
    }
    while (*v13);
    if (v10 != v9 && (unint64_t)v5 >= v10[4])
    {
      std::operator+<char>();
      unint64_t v14 = std::string::append(&v41, "'");
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      uint64_t v17 = operator new(0x28uLL);
      std::string::size_type v18 = v43.__r_.__value_.__r.__words[0];
      long long v17[2] = v15;
      v17[3] = v18;
      *(void *)((char *)v17 + 3boost::detail::shared_count::~shared_count(this + 1) = *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7);
      *((unsigned char *)v17 + 39) = v16;
      uint64_t v19 = *a3;
      *uint64_t v17 = *a3;
      v17[1] = a3;
      *(void *)(v19 + 8) = v17;
      *a3 = (uint64_t)v17;
      ++a3[2];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v41, "Test case disabled because of the following chain of decision:\n");
      uint64_t v20 = (char *)operator new(0x28uLL);
      *(std::string *)(v20 + 16) = v41;
      memset(&v41, 0, sizeof(v41));
      char v21 = (void *)a3[1];
      *(void *)uint64_t v20 = a3;
      *((void *)v20 + boost::detail::shared_count::~shared_count(this + 1) = v21;
      void *v21 = v20;
      uint64_t v22 = a3[2] + 1;
      a3[1] = (uint64_t)v20;
      a3[2] = v22;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_224264D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__list_imp<std::string>::clear(v28);
  _Unwind_Resume(a1);
}

void *boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  char v5 = v4;
  uint64_t v6 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (*((unsigned char *)result + 32)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!v7) {
      return result;
    }
  }
  else
  {
    *((unsigned char *)result + 32) = 0;
    uint64_t v9 = (void *)*result;
    LOBYTE(__p[0]) = 60;
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    int v11 = *((char *)v3 + 31);
    if (v11 >= 0) {
      uint64_t v12 = (uint64_t)(v3 + 1);
    }
    else {
      uint64_t v12 = v3[1];
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)v3 + 31);
    }
    else {
      uint64_t v13 = v3[2];
    }
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    LOBYTE(__p[0]) = 62;
    std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
    std::string::basic_string[abi:ne180100](__p, "<![CDATA[", 9uLL);
    if ((v21 & 0x80u) == 0) {
      char v16 = __p;
    }
    else {
      char v16 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = v21;
    }
    else {
      uint64_t v17 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v6 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 23);
  }
  if (v5 >= 0) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v19 = v4;
  }
  else {
    uint64_t v19 = v6;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)*v3, v18, v19);
}

void sub_224264EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  __n128 result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    __n128 result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper(boost::unit_test::output::junit_result_helper::conditional_cdata_helper *this)
{
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v2 = *(void **)this;
    char v11 = 3;
    LODWORD(__p[0]) = 4087133;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)__p, 3);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"</", 2);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      char v5 = (char *)this + 8;
    }
    else {
      char v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    LOBYTE(__p[0]) = 62;
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v9 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_2242650B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__list_imp<unsigned long>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 80);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  std::__list_imp<std::string>::clear((void *)(a1 + 32));
  std::__list_imp<std::string>::clear((void *)(a1 + 8));
}

uint64_t std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62 const&,boost::unit_test::output::junit_impl::junit_log_helper,0>(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = (uint64_t *)(a1 + 8);
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v5, v5, (void *)a3);
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice(a1 + 32, (uint64_t *)(a1 + 32), (void *)(a3 + 24));
  long long v6 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 72) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 96) = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a3 + 96);
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_impl<std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  char v5 = (uint64_t *)operator new(0x90uLL);
  v12[0] = v5;
  v12[1] = v4;
  long long v6 = (unint64_t *)std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper,0>((uint64_t)(v5 + 4), a2);
  char v13 = 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v8 = *v6;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v4 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v4 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = v4;
LABEL_10:
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v4, v5);
    v12[0] = 0;
    uint64_t v9 = (uint64_t **)v5;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  return v9;
}

uint64_t std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v4, v4, (void *)(a2 + 8));
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice(a1 + 32, (uint64_t *)(a1 + 32), (void *)(a2 + 32));
  long long v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  unint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        long long v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (char *)operator new(0x90uLL);
    v14[1] = v7;
    *((void *)v12 + 4) = **a4;
    *((void *)v12 + 5) = v12 + 40;
    *((void *)v12 + 6) = v12 + 40;
    *((void *)v12 + 7) = 0;
    *((void *)v12 + 8) = v12 + 64;
    *((void *)v12 + 9) = v12 + 64;
    *(_OWORD *)(v12 + 12boost::detail::shared_count::~shared_count(this + 1) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    char v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = (std::string *)&v7[80 * v3];
  char v13 = &v7[80 * v6];
  std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer(&v10);
  return v8;
}

void sub_224265714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  int v9 = *((_DWORD *)a3 + 18);
  this[3].__r_.__value_.__s.__data_[4] = *((unsigned char *)a3 + 76);
  LODWORD(this[3].__r_.__value_.__l.__data_) = v9;
}

void sub_2242657E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + boost::detail::shared_count::~shared_count(this + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 8CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
      *(void *)(a3 - 56) = 0;
      long long v10 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v10;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      int v11 = *(_DWORD *)(a3 - 8);
      *(unsigned char *)(v7 - 4) = *(unsigned char *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v11;
      uint64_t v7 = *((void *)&v17 + 1) - 80;
      *((void *)&v17 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](v4, i - 80);
  }
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    if (*((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace
         + i
         + 119) < 0)
      operator delete(*(void **)((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace
                               + i
                               + 96));
  }
}

void __cxx_global_array_dtor_51()
{
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    if (*((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement
         + i
         + 119) < 0)
      operator delete(*(void **)((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement
                               + i
                               + 96));
  }
}

void boost::unit_test::progress_monitor_t::test_start(boost::unit_test::progress_monitor_t *this)
{
  if (byte_26808D2CF >= 0) {
    uint64_t v1 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_color_output;
  }
  else {
    uint64_t v1 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_color_output;
  }
  uint64_t v2 = byte_26808D2CF;
  if (byte_26808D2CF < 0) {
    uint64_t v2 = unk_26808D2C0;
  }
  uint64_t v3 = &v1[v2];
  uint64_t v4 = boost::unit_test::runtime_config::argument_store(this);
  v14[0] = v1;
  v14[1] = v3;
  uint64_t v5 = (boost::unit_test::_anonymous_namespace_ *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v4, v14);
  char v6 = *(unsigned char *)v5;
  byte_268086958 = v6;
  int v10 = byte_268086958;
  if (byte_268086958) {
    int v12 = 5;
  }
  else {
    int v12 = 9;
  }
  char v13 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(v14, v8, v10, v12, 9);
  operator new();
}

void sub_224265C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x22A614FA0](v9, 0x1020C406E8F4065);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a9);
  _Unwind_Resume(a1);
}

void boost::unit_test::anonymous namespace'::s_pm_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  {
    qword_268086950 = 0;
    byte_268086958 = 0;
  }
}

void boost::unit_test::progress_monitor_t::test_aborted(boost::unit_test::progress_monitor_t *this)
{
  int v3 = byte_268086958;
  if (byte_268086958) {
    int v5 = 5;
  }
  else {
    int v5 = 9;
  }
  char v6 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(&v9, v1, v3, v5, 9);
  uint64_t v7 = *(void *)(qword_268086950 + 8);
  boost::unit_test::progress_display::operator+=(qword_268086950, v7);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v9);
}

void sub_224265D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

unint64_t boost::unit_test::progress_display::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a1 + 8) + a2;
  *(void *)(a1 + 8) = result;
  if (result >= *(void *)(a1 + 24))
  {
    unsigned int v4 = ((double)result / (double)*(unint64_t *)(a1 + 16) * 50.0);
    do
    {
      int v5 = *(void **)a1;
      char v10 = 42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
      std::ostream::flush();
      unsigned int v6 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v6;
    }
    while (v6 < v4);
    unint64_t result = *(void *)(a1 + 8);
    unint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 24) = (unint64_t)((double)v6 / 50.0 * (double)v7);
    if (result == v7)
    {
      if (v6 <= 0x32)
      {
        uint64_t v8 = *(void **)a1;
        char v11 = 42;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
      }
      std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
      uint64_t v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v12);
      std::ostream::put();
      std::ostream::flush();
      return *(void *)(a1 + 8);
    }
  }
  return result;
}

void sub_224265EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void boost::unit_test::progress_monitor_t::test_unit_finish(boost::unit_test::progress_monitor_t *this, const boost::unit_test::test_unit *a2)
{
  int v5 = byte_268086958;
  if (byte_268086958) {
    int v7 = 5;
  }
  else {
    int v7 = 9;
  }
  uint64_t v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(&v9, v3, v5, v7, 9);
  if (*(_DWORD *)a2 == 1)
  {
    boost::unit_test::progress_display::operator+=(qword_268086950, 1);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v9);
}

void sub_224265FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

void boost::unit_test::progress_monitor_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, _DWORD *a2)
{
  int v5 = byte_268086958;
  if (byte_268086958) {
    int v7 = 5;
  }
  else {
    int v7 = 9;
  }
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v12, v3, v5, v7, 9);
  char v10 = &unk_26D774A70;
  uint64_t v11 = 0;
  if (*a2 == 1) {
    uint64_t v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::traverse_test_tree((uint64_t)a2, (uint64_t)&v10, 0);
  }
  else {
    uint64_t v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::traverse_test_tree((uint64_t)(a2 - 2), (uint64_t)&v10, 0);
  }
  uint64_t v9 = v11;
  boost::unit_test::progress_display::operator+=(qword_268086950, v9);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v12);
}

void sub_224266098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::test_observer::assertion_result(uint64_t result, unsigned int a2)
{
  if (a2 <= 1) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

void boost::unit_test::anonymous namespace'::progress_monitor_impl::~progress_monitor_impl(boost::unit_test::_anonymous_namespace_::progress_monitor_impl *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    MEMORY[0x22A614FA0](v1, 0x1020C406E8F4065);
  }
}

uint64_t boost::unit_test::progress_display::progress_display(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n0%   10   20   30   40   50   60   70   80   90   100%", 55);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n|----|----|----|----|----|----|----|----|----|----|", 52);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  unsigned int v6 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_224266210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL boost::unit_test::test_results::passed(boost::unit_test::test_results *this)
{
  return !*((unsigned char *)this + 81)
      && !*((void *)this + 6)
      && *((void *)this + 1) <= *((void *)this + 3)
      && *((unsigned char *)this + 80) == 0;
}

void *boost::unit_test::test_results::operator+=(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *result += *a2;
  result[1] = v2 + a2[1];
  result[2] += a2[2];
  uint64_t v3 = result[5];
  result[4] += a2[4];
  result[5] = v3 + a2[5];
  uint64_t v4 = result[7];
  result[6] += a2[6];
  result[7] = v4 + a2[7];
  uint64_t v5 = result[9];
  result[8] += a2[8];
  result[9] = v5 + a2[9];
  return result;
}

void boost::unit_test::results_collector_t::test_start(boost::unit_test::results_collector_t *this)
{
  qword_268086998 = 0;
  qword_268086990 = 0;
}

void boost::unit_test::anonymous namespace'::s_rc_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  {
    qword_268086998 = 0;
    qword_268086990 = 0;
  }
}

double boost::unit_test::results_collector_t::test_unit_start(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2)
{
  uint64_t v5 = (void *)((char *)a2 + 48);
  *((_WORD *)v3 + 6CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 13) = 0u;
  *(_OWORD *)(v3 + 1boost::detail::shared_count::~shared_count(this + 1) = 0u;
  *(_OWORD *)(v3 + 9) = 0u;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  v3[8] = (uint64_t *)*((void *)a2 + 24);
  return result;
}

void boost::unit_test::results_collector_t::test_unit_finish(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2, uint64_t *a3)
{
  if (*(_DWORD *)a2 == 16)
  {
    uint64_t v19 = (void *)((char *)a2 + 48);
    char v23 = &unk_26D774D98;
    std::string::size_type v24 = v4 + 5;
    uint64_t v25 = a2;
    if (*(_DWORD *)a2 == 1) {
      boost::unit_test::traverse_test_tree((uint64_t)a2, (uint64_t)&v23, 0);
    }
    else {
      boost::unit_test::traverse_test_tree((uint64_t)a2 - 8, (uint64_t)&v23, 0);
    }
    return;
  }
  char v23 = (void *)((char *)a2 + 48);
  v6[14] = a3;
  if (*((unsigned char *)v6 + 120)) {
    return;
  }
  int v7 = v6;
  std::locale v8 = v6[6];
  if (v8 >= v6[8]) {
    goto LABEL_10;
  }
  uint64_t v27 = "boost.test framework";
  uint64_t v28 = "";
  uint64_t v29 = 218;
  boost::unit_test::unit_test_log_t::operator()(v9, 2, &v30);
  char v16 = 0;
  char v15 = &unk_26D774DF0;
  long long v17 = boost::unit_test::lazy_ostream::instance(v10);
  uint64_t v18 = "Test case ";
  boost::unit_test::test_unit::full_name(a2, &__p);
  char v20 = 0;
  uint64_t v19 = &unk_26D774E30;
  unsigned __int8 v21 = &v15;
  p_p = &__p;
  LOBYTE(v24) = 0;
  char v23 = &unk_26D774E70;
  uint64_t v25 = (const boost::unit_test::test_unit *)&v19;
  unsigned __int8 v26 = " has fewer failures than expected";
  boost::unit_test::ut_detail::entry_value_collector::operator<<((uint64_t)&v30, (uint64_t)&v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v30);
  if (!*((unsigned char *)v7 + 120))
  {
    std::locale v8 = v7[6];
LABEL_10:
    if (!v8 && !v7[5])
    {
      uint64_t v27 = "boost.test framework";
      uint64_t v28 = "";
      uint64_t v29 = 222;
      boost::unit_test::unit_test_log_t::operator()(v11, 2, &v30);
      char v13 = boost::unit_test::lazy_ostream::instance(v12);
      char v16 = 0;
      char v15 = &unk_26D774DF0;
      long long v17 = v13;
      uint64_t v18 = "Test case ";
      boost::unit_test::test_unit::full_name(a2, &__p);
      char v20 = 0;
      uint64_t v19 = &unk_26D774E30;
      unsigned __int8 v21 = &v15;
      p_p = &__p;
      LOBYTE(v24) = 0;
      char v23 = &unk_26D774EB0;
      uint64_t v25 = (const boost::unit_test::test_unit *)&v19;
      unsigned __int8 v26 = " did not check any assertions";
      boost::unit_test::ut_detail::entry_value_collector::operator<<((uint64_t)&v30, (uint64_t)&v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v30);
    }
  }
}

void sub_224266734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)(v15 - 33));
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::results_collector_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a2 + 48);
  *(_WORD *)(result + 12CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0u;
  *(unsigned char *)(result + 12boost::detail::shared_count::~shared_count(this + 1) = 1;
  if (*(_DWORD *)a2 == 16)
  {
    uint64_t v4 = result;
    uint64_t v5 = &unk_26D774A70;
    uint64_t v6 = 0;
    uint64_t result = boost::unit_test::traverse_test_tree(a2 - 8, (uint64_t)&v5, 0);
    *(void *)(v4 + 96) = v6;
  }
  return result;
}

uint64_t **boost::unit_test::results_collector_t::assertion_result(boost::unit_test::_anonymous_namespace_ *a1, int a2)
{
  unint64_t v6 = boost::unit_test::framework::current_test_case_id(v3);
  int v7 = (uint64_t *)&v6;
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v5 = result + 7;
    }
    else
    {
      if (a2 != 1) {
        return result;
      }
      uint64_t v5 = result + 5;
    }
  }
  else
  {
    uint64_t v5 = result + 6;
  }
  ++*v5;
  return result;
}

uint64_t **boost::unit_test::results_collector_t::exception_caught(boost::unit_test::_anonymous_namespace_ *a1)
{
  unint64_t v3 = boost::unit_test::framework::current_test_case_id(v1);
  uint64_t v4 = (uint64_t *)&v3;
  result[6] = (uint64_t *)((char *)result[6] + 1);
  return result;
}

uint64_t **boost::unit_test::results_collector_t::test_unit_aborted(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2)
{
  uint64_t v4 = (void *)((char *)a2 + 48);
  *((unsigned char *)result + 12CoreML::Specification::SupportVectorClassifier::New(this, 0) = 1;
  return result;
}

uint64_t **boost::unit_test::results_collector_t::results(boost::unit_test::results_collector_t *this, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = &v3;
}

void boost::unit_test::anonymous namespace'::results_collector_impl::~results_collector_impl(boost::unit_test::_anonymous_namespace_::results_collector_impl *this)
{
}

void *boost::unit_test::results_collect_helper::visit(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = &v10;
  uint64_t result = boost::unit_test::test_results::operator+=(*((void **)a1 + 1), v3 + 5);
  if (*((unsigned char *)v3 + 121))
  {
    uint64_t v5 = (void *)(*((void *)a1 + 1) + 56);
  }
  else if (v3[11] || v3[6] > v3[8] || *((unsigned char *)v3 + 120))
  {
    unint64_t v6 = (void *)*((void *)a1 + 1);
    if (*((unsigned char *)v3 + 120)) {
      ++v6[8];
    }
    uint64_t v5 = v6 + 6;
  }
  else
  {
    int v7 = (void *)*((void *)a1 + 1);
    std::locale v8 = v7 + 4;
    uint64_t v9 = v7 + 5;
    if (v3[7]) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = v8;
    }
  }
  ++*v5;
  return result;
}

BOOL boost::unit_test::results_collect_helper::test_suite_start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 != v3)
  {
    unint64_t v7 = *(void *)(a2 + 56);
    std::locale v8 = &v7;
    boost::unit_test::test_results::operator+=(*(void **)(a1 + 8), v5 + 5);
  }
  return v2 == v3;
}

void boost::unit_test::results_collect_helper::~results_collect_helper(boost::unit_test::results_collect_helper *this)
{
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::test_results>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_results>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_results>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x80uLL);
    *((void *)v11 + 4) = **a4;
    *((_WORD *)v11 + 6CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 4CoreML::Specification::SupportVectorClassifier::New(this, 0) = 0u;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>::~lazy_ostream_impl()
{
}

void *boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>::operator()(uint64_t a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v3 = *(const char **)(a1 + 24);
  size_t v4 = strlen(v3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
}

void boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>,std::string,std::string const&>::~lazy_ostream_impl()
{
}

void *boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>,std::string,std::string const&>::operator()(uint64_t a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
}

uint64_t boost::unit_test::framework_init_observer_t::test_start(boost::unit_test::framework_init_observer_t *this)
{
  uint64_t result = boost::unit_test::framework::test_in_progress(this);
  if ((result & 1) == 0) {
  return result;
  }
}

void boost::unit_test::framework_init_observer_t::assertion_result(uint64_t a1, int a2)
{
  if (!a2) {
}
  }

void boost::unit_test::framework_init_observer_t::exception_caught()
{
}

void boost::unit_test::framework_init_observer_t::test_aborted(boost::unit_test::framework_init_observer_t *this)
{
}

uint64_t boost::unit_test::test_observer::test_unit_skipped(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

void turi::proprietary::style_transfer::MAMLCheckpoint::GetWeights(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    std::make_unique<turi::neural_net::model_spec,std::string const&>();
  }
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  a2[1] = v5;
  *a2 = v4;
  a2[2] = v3;
  *(void *)(v5 + 16) = a2 + 1;
  *a1 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  a1[1] = 0;
}

void sub_224266EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, turi::neural_net::model_spec *a9, turi::neural_net::model_spec *a10)
{
}

void std::make_unique<turi::neural_net::model_spec,std::string const&>()
{
}

void sub_224266F1C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::MAMLCheckpoint::MAMLCheckpoint(uint64_t a1, long long *a2, long long *a3, uint64_t *a4, void *a5)
{
  long long v26 = *a2;
  uint64_t v27 = *((void *)a2 + 2);
  unint64_t v8 = a4 + 1;
  uint64_t v9 = (void *)a4[1];
  char v20 = (void **)*a4;
  unsigned __int8 v21 = v9;
  if (a4[2])
  {
    void v9[2] = &v21;
    *a4 = (uint64_t)v8;
    *unint64_t v8 = 0;
    a4[2] = 0;
  }
  else
  {
    char v20 = &v21;
  }
  turi::proprietary::style_transfer::MAMLCheckpoint::GetWeights((uint64_t *)&v20, &v23);
  *(void *)a1 = &unk_26D758B80;
  *(_OWORD *)(a1 + 8) = v26;
  uint64_t v11 = v23;
  unint64_t v10 = v24;
  *(void *)(a1 + 24) = v27;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v10;
  uint64_t v12 = a1 + 40;
  uint64_t v13 = v25;
  *(void *)(a1 + 48) = v25;
  if (v13)
  {
    void v10[2] = v12;
    char v23 = &v24;
    std::string::size_type v24 = 0;
    uint64_t v25 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v12;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v23, v10);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v20, v21);
  *(void *)a1 = &unk_26D774FB8;
  long long v14 = *a3;
  *(void *)(a1 + 72) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 56) = v14;
  *((void *)a3 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 8std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = *a5;
  uint64_t v15 = a5 + 1;
  uint64_t v16 = a5[1];
  *(void *)(a1 + 88) = v16;
  uint64_t v17 = a1 + 88;
  uint64_t v18 = a5[2];
  *(void *)(a1 + 96) = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    *a5 = v15;
    *uint64_t v15 = 0;
    a5[2] = 0;
  }
  else
  {
    *(void *)(a1 + 8std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v17;
  }
  return a1;
}

void sub_2242670B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void turi::proprietary::style_transfer::MAMLCheckpoint::CreateModelTrainer(turi::proprietary::style_transfer::MAMLCheckpoint *this)
{
}

void std::make_unique<turi::proprietary::style_transfer::MAMLModelTrainer,turi::style_transfer::Config const&,std::string const&,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>()
{
}

void sub_224267218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x10B3C4048318760);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLCheckpoint::ExportToCoreML(turi::proprietary::style_transfer::MAMLCheckpoint *this@<X0>, uint64_t a2@<X8>)
{
}

void sub_2242672BC(_Unwind_Exception *a1)
{
  turi::neural_net::model_spec::~model_spec(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::MAMLModelTrainer::MAMLModelTrainer(uint64_t a1, uint64_t a2, long long *a3, void *a4, void *a5)
{
  uint64_t v7 = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)(a1 + 24) = v7;
  *(void *)a1 = &unk_26D774FE8;
  long long v8 = *a3;
  *(void *)(a1 + 48) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  *((void *)a3 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 56) = *a5;
  uint64_t v9 = a5 + 1;
  uint64_t v10 = a5[1];
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = a1 + 64;
  uint64_t v12 = a5[2];
  *(void *)(a1 + 72) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *a5 = v9;
    void *v9 = 0;
    a5[2] = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v11;
  }
  uint64_t v13 = (char *)operator new(0x40uLL);
  *((void *)v13 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)uint64_t v13 = &unk_26D775068;
  *((void *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v13 + 5) = v13 + 48;
  *(void *)(a1 + 8std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v13 + 24;
  *(void *)(a1 + 88) = v13;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign((uint64_t)(v13 + 40), a4);
  return a1;
}

void sub_2242673EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v2, *(void **)(v1 + 64));
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalTrainingConfig(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  turi::neural_net::shared_float_array::wrap(1.0, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v27, "st_training");
  uint64_t v29 = &unk_26D752D58;
  long long v4 = v24;
  long long v24 = 0uLL;
  long long v30 = v4;
  long long v31 = v25;
  long long v32 = v26;
  turi::neural_net::shared_float_array::wrap((float)*((int *)this + 2), (uint64_t)&p_p);
  std::string::basic_string[abi:ne180100]<0>(v33, "st_num_styles");
  int v34 = &unk_26D752D58;
  long long v5 = v20;
  long long v20 = 0uLL;
  v35[0] = v5;
  v35[1] = v21;
  void v35[2] = v22;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)a2, (const void **)v27, 2);
  for (unint64_t i = 0; i != -160; i -= 80)
  {
    uint64_t v7 = &v27[i / 8];
    *(void **)((char *)&v34 + i) = &unk_26D752D58;
    long long v8 = (std::__shared_weak_count *)*((void *)&v35[i / 0x10] + 1);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (*((char *)v7 + 103) < 0) {
      operator delete(v7[10]);
    }
  }
  p_p = (void **)&unk_26D752D58;
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  std::string __p = &unk_26D752D58;
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "st_");
  uint64_t v9 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)this + 7);
  if (v9 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64))
  {
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v27, (const void **)v9 + 4, (uint64_t)&__p);
      p_p = &__p;
      uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      uint64_t v11 = v10;
      uint64_t v13 = *((void *)v9 + 8);
      uint64_t v12 = *((void *)v9 + 9);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      long long v14 = (std::__shared_weak_count *)v10[9];
      v11[8] = v13;
      v11[9] = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      long long v15 = *((_OWORD *)v9 + 6);
      *((_OWORD *)v11 + 5) = *((_OWORD *)v9 + 5);
      *((_OWORD *)v11 + 6) = v15;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      uint64_t v16 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)v9 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(turi::proprietary::style_transfer::MAMLModelTrainer **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)v9 + 2);
          BOOL v18 = *(void *)v17 == (void)v9;
          uint64_t v9 = v17;
        }
        while (!v18);
      }
      uint64_t v9 = v17;
    }
    while (v17 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64));
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_2242676D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v29, *(void **)(v29 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalInferenceConfig(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  turi::neural_net::shared_float_array::wrap(0.0, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v27, "st_training");
  uint64_t v29 = &unk_26D752D58;
  long long v4 = v24;
  long long v24 = 0uLL;
  long long v30 = v4;
  long long v31 = v25;
  long long v32 = v26;
  turi::neural_net::shared_float_array::wrap((float)*((int *)this + 2), (uint64_t)&p_p);
  std::string::basic_string[abi:ne180100]<0>(v33, "st_num_styles");
  int v34 = &unk_26D752D58;
  long long v5 = v20;
  long long v20 = 0uLL;
  v35[0] = v5;
  v35[1] = v21;
  void v35[2] = v22;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)a2, (const void **)v27, 2);
  for (unint64_t i = 0; i != -160; i -= 80)
  {
    uint64_t v7 = &v27[i / 8];
    *(void **)((char *)&v34 + i) = &unk_26D752D58;
    long long v8 = (std::__shared_weak_count *)*((void *)&v35[i / 0x10] + 1);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (*((char *)v7 + 103) < 0) {
      operator delete(v7[10]);
    }
  }
  p_p = (void **)&unk_26D752D58;
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  std::string __p = &unk_26D752D58;
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "st_");
  uint64_t v9 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)this + 7);
  if (v9 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64))
  {
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v27, (const void **)v9 + 4, (uint64_t)&__p);
      p_p = &__p;
      uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      uint64_t v11 = v10;
      uint64_t v13 = *((void *)v9 + 8);
      uint64_t v12 = *((void *)v9 + 9);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      long long v14 = (std::__shared_weak_count *)v10[9];
      v11[8] = v13;
      v11[9] = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      long long v15 = *((_OWORD *)v9 + 6);
      *((_OWORD *)v11 + 5) = *((_OWORD *)v9 + 5);
      *((_OWORD *)v11 + 6) = v15;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      uint64_t v16 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)v9 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(turi::proprietary::style_transfer::MAMLModelTrainer **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((void *)v9 + 2);
          BOOL v18 = *(void *)v17 == (void)v9;
          uint64_t v9 = v17;
        }
        while (!v18);
      }
      uint64_t v9 = v17;
    }
    while (v17 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64));
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_224267AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v29, *(void **)(v29 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, _OWORD *a2@<X8>)
{
  long long v4 = (char *)operator new(0x30uLL);
  *((void *)v4 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = &unk_26D758C00;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 8);
  *((void *)v4 + 5) = *((void *)this + 3);
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v29, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v29 = *(std::string *)((char *)this + 32);
  }
  uint64_t v6 = *((void *)this + 10);
  long long v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v28, (const void ***)this + 7);
  *(void *)&long long v24 = v4 + 24;
  *((void *)&v24 + boost::detail::shared_count::~shared_count(this + 1) = v4;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v29;
  }
  *(void *)&long long v26 = v6;
  *((void *)&v26 + boost::detail::shared_count::~shared_count(this + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v27, v28);
  long long v17 = v24;
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v25;
  }
  long long v19 = v26;
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)&v20, v27);
  uint64_t v7 = (char *)operator new(0x80uLL);
  *((void *)v7 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26D7750B8;
  uint64_t v8 = (uint64_t)(v7 + 24);
  long long v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::string::size_type v9 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  long long v10 = v19;
  long long v19 = 0uLL;
  uint64_t v12 = v20;
  uint64_t v11 = v21;
  std::string::size_type v33 = v9;
  uint64_t v36 = v20;
  std::string v37 = v21;
  uint64_t v13 = v22;
  uint64_t v38 = v22;
  if (v22)
  {
    void v21[2] = &v37;
    long long v20 = &v21;
    long long v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v36 = &v37;
    uint64_t v12 = &v37;
  }
  *((void *)v7 + 14) = v11;
  long long v14 = v7 + 112;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 3) = &unk_26D775108;
  uint64_t v30 = 0;
  long long v31 = 0;
  long long v15 = v32;
  *((_OWORD *)v7 + 3) = v17;
  *((_OWORD *)v7 + 4) = v15;
  *((void *)v7 + 1std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v33;
  long long v32 = 0uLL;
  std::string::size_type v33 = 0;
  *(_OWORD *)(v7 + 88) = v10;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  *((void *)v7 + 13) = v12;
  *((void *)v7 + 15) = v13;
  if (v13)
  {
    v11[2] = v14;
    uint64_t v11 = 0;
    uint64_t v36 = &v37;
    std::string v37 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    *((void *)v7 + 13) = v14;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v36, v11);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v7 + 5);
  if (v16)
  {
    if (v16->__shared_owners_ != -1) {
      goto LABEL_35;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 2, 1uLL, memory_order_relaxed);
    *((void *)v7 + 4) = v8;
    *((void *)v7 + 5) = v7;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 2, 1uLL, memory_order_relaxed);
    *((void *)v7 + 4) = v8;
    *((void *)v7 + 5) = v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
LABEL_35:
  turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>::AsPublisher(v8, &v23);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
  *a2 = v23;
  long long v23 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v20, v21);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v27, v27[1]);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v28, v28[1]);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
}

void sub_224267FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *a36)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)&a25);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a35, a36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (*(char *)(v38 - 169) < 0) {
    operator delete(*(void **)(v38 - 192));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void sub_224268070(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  JUMPOUT(0x224268038);
}

void sub_2242680A0()
{
  if (!v0) {
    JUMPOUT(0x224268050);
  }
  JUMPOUT(0x224268048);
}

uint64_t turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 56, *(void **)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateTrainingBackend(turi::proprietary::style_transfer::MAMLModelTrainer *a1)
{
  turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalTrainingConfig(a1, &v1);
  turi::style_transfer::init_vgg_16();
}

void sub_22426826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void *);
  uint64_t v12 = va_arg(va2, void);
  if (a3) {
    turi::style_transfer::ResNet16ModelTrainer::CreateTrainingBackend(a3);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)va, v7);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)va1, v11);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)va2, 0);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v3 - 56, *(void **)(v3 - 48));
  _Unwind_Resume(a1);
}

void sub_2242682D4()
{
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInferenceBackend(const void ****this@<X0>, turi::neural_net::compute_context *a2@<X1>, void *a3@<X8>)
{
  turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalInferenceConfig((turi::proprietary::style_transfer::MAMLModelTrainer *)this, &v7);
  turi::style_transfer::ResNet16ModelTrainer::GetWeights(this[10], &v6);
  (*(void (**)(uint64_t *__return_ptr, turi::neural_net::compute_context *, uint64_t **, uint64_t *))(*(void *)a2 + 48))(&v8, a2, &v7, &v6);
  *a3 = v8;
  operator new();
}

void sub_2242683C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
  uint64_t v16 = *(void *)(v14 - 40);
  *(void *)(v14 - 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
  if (v16) {
    turi::style_transfer::ResNet16ModelTrainer::CreateTrainingBackend(v16);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLCheckpoint::~MAMLCheckpoint(turi::proprietary::style_transfer::MAMLCheckpoint *this)
{
  *(void *)this = &unk_26D774FB8;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  *(void *)this = &unk_26D758B80;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D774FB8;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  *(void *)this = &unk_26D758B80;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  JUMPOUT(0x22A614FA0);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::~MAMLModelTrainer(turi::proprietary::style_transfer::MAMLModelTrainer *this)
{
  *(void *)this = &unk_26D774FE8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D774FE8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::style_transfer::ResNet16ModelTrainer::ModelState>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7750B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7750B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(uint64_t a1)
{
  *(void *)a1 = &unk_26D775108;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 80, *(void **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(uint64_t a1)
{
  *(void *)a1 = &unk_26D775108;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 80, *(void **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::HasNext()
{
  return 1;
}

void turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::Next(uint64_t a1)
{
  turi::style_transfer::ResNet16ModelTrainer::GetWeights(*(const void ****)(a1 + 64), &v1);
  std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config &,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array> const&>();
}

void sub_2242688E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config &,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array> const&>()
{
}

void sub_224268A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::test_unit::test_unit(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 16;
  *(void *)(a1 + 8) = "module";
  *(void *)(a1 + 16) = "";
  *(void *)(a1 + 24) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  *(void *)(a1 + 32) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  *(_OWORD *)(a1 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = xmmword_2246E9810;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  std::string::basic_string[abi:ne180100](__p, *(void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  uint64_t v3 = (std::string *)(a1 + 136);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a1 + 152) = v6;
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 16std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 20std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0x300000002;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_224268B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v17 = *(void **)(v15 + 88);
  if (v17)
  {
    *(void *)(v15 + 96) = v17;
    operator delete(v17);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void boost::unit_test::test_unit::~test_unit(boost::unit_test::test_unit *this)
{
  boost::unit_test::framework::deregister_test_unit((unint64_t *)this);
  uint64_t v3 = (void **)((char *)this + 240);
  std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 216);
  std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  uint64_t v3 = (void **)((char *)this + 112);
  std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void boost::unit_test::test_unit::full_name(boost::unit_test::test_unit *this@<X0>, std::string *a2@<X8>)
{
  if (*((void *)this + 7) == 0xFFFFFFFFLL
    || (uint64_t v4 = boost::unit_test::framework::master_test_suite(this),
        uint64_t v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((void *)this + 7),
        v5 == *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(v4 + 56)))
  {
    if (*((char *)this + 159) < 0)
    {
      uint64_t v6 = (const std::string::value_type *)*((void *)this + 17);
      std::string::size_type v7 = *((void *)this + 18);
      std::string::__init_copy_ctor_external(a2, v6, v7);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
    }
  }
  else
  {
    uint64_t v8 = (boost::unit_test::test_unit *)boost::unit_test::framework::get(v5, 16);
    boost::unit_test::test_unit::full_name(v8);
    std::string::append(a2, "/");
    uint64_t v11 = (const std::string::value_type *)*((void *)this + 17);
    long long v10 = (char *)this + 136;
    uint64_t v9 = v11;
    int v12 = v10[23];
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = v10[23];
    }
    else {
      std::string::size_type v14 = *((void *)v10 + 1);
    }
    std::string::append(a2, v13, v14);
  }
}

void sub_224268D44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

boost::unit_test::framework *boost::unit_test::test_suite::test_suite(boost::unit_test::framework *a1, long long *a2)
{
  long long v5 = *a2;
  boost::unit_test::test_unit::test_unit((uint64_t)a1 + 8, (uint64_t)&v5);
  *(void *)a1 = &unk_26D775150;
  *((void *)a1 + 34) = 0;
  *((void *)a1 + 35) = 0;
  *((void *)a1 + 38) = 0;
  *((void *)a1 + 39) = 0;
  *((void *)a1 + 36) = 0;
  *((void *)a1 + 37) = (char *)a1 + 304;
  *((void *)a1 + 4boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a1 + 42) = 0;
  *((void *)a1 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
  boost::unit_test::framework::register_test_unit(a1, v3);
  return a1;
}

void sub_224268E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v9 = v7;
  std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v6, *v8);
  uint64_t v11 = *v9;
  if (*v9)
  {
    *(void *)(v5 + 28std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v11;
    operator delete(v11);
  }
  boost::unit_test::test_unit::~test_unit(v4);
  _Unwind_Resume(a1);
}

boost::unit_test::framework *boost::unit_test::master_test_suite_t::master_test_suite_t(boost::unit_test::master_test_suite_t *this)
{
  *(void *)&long long v2 = "Master Test Suite";
  *((void *)&v2 + boost::detail::shared_count::~shared_count(this + 1) = "";
  uint64_t result = boost::unit_test::test_suite::test_suite(this, &v2);
  *(void *)uint64_t result = &unk_26D775170;
  *((_DWORD *)result + 86) = 0;
  *((void *)result + 44) = 0;
  *((_DWORD *)result + 52) = 1;
  return result;
}

uint64_t boost::unit_test::traverse_test_tree(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 204) == 1 || a3 != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, result);
  }
  return result;
}

uint64_t boost::unit_test::traverse_test_tree(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((a3 & 1) != 0 || *(_DWORD *)(result + 212) == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, result);
    if (result)
    {
      uint64_t v6 = *(void *)(v5 + 272);
      uint64_t v7 = *(void *)(v5 + 280) - v6;
      if (v7)
      {
        unint64_t v8 = 0;
        unint64_t v9 = v7 >> 3;
        do
        {
          boost::unit_test::traverse_test_tree(*(void *)(v6 + 8 * v8), a2, a3);
          uint64_t v6 = *(void *)(v5 + 272);
          unint64_t v10 = (*(void *)(v5 + 280) - v6) >> 3;
          BOOL v11 = v9 > v10;
          if (v9 >= v10) {
            unint64_t v9 = (*(void *)(v5 + 280) - v6) >> 3;
          }
          if (!v11) {
            ++v8;
          }
        }
        while (v8 < v9);
      }
      int v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);
      return v12(a2, v5);
    }
  }
  return result;
}

_DWORD *boost::unit_test::traverse_test_tree(boost::unit_test::framework::impl::_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xFFFF0000) != 0)
  {
    uint64_t result = boost::unit_test::framework::get(a1, 1);
    if (result[51] == 1 || a3 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 8);
      return (_DWORD *)v7(a2, result);
    }
  }
  else
  {
    unint64_t v8 = boost::unit_test::framework::get(a1, 16) - 2;
    return (_DWORD *)boost::unit_test::traverse_test_tree((uint64_t)v8, a2, a3);
  }
  return result;
}

void boost::unit_test::test_suite::~test_suite(boost::unit_test::test_suite *this)
{
  boost::unit_test::test_suite::~test_suite(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26D775150;
  uint64_t v3 = (void **)((char *)this + 320);
  std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  long long v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  boost::unit_test::test_unit::~test_unit((boost::unit_test::test_suite *)((char *)this + 8));
}

void boost::unit_test::master_test_suite_t::~master_test_suite_t(boost::unit_test::master_test_suite_t *this)
{
  boost::unit_test::test_suite::~test_suite(this);
  JUMPOUT(0x22A614FA0);
}

void std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = boost::function0<void>::~function0(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
    uint64_t v5 = (void **)(i - 24);
    std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v5);
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 32));
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t boost::unit_test::ut_detail::entry_value_collector::operator<<(uint64_t a1, uint64_t a2)
{
  return a1;
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v8 = qword_268086A68;
  while (v5 != v8)
  {
    if (*(unsigned char *)v5)
    {
      int v14 = dword_268086A98;
      uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v5 + 32) + 160))(*(void *)(v5 + 32));
      if (v14 >= (int)v13 && *(unsigned char *)(a2 + 8) == 0)
      {
        uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::unit_test_log_t::log_entry_start(v13, *(_DWORD *)(v5 + 4));
        if (v13) {
          uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(v5 + 32) + 112))(*(void *)(v5 + 32), *(void *)(v5 + 8), a2);
        }
      }
    }
    v5 += 56;
  }
  return a1;
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, long long *a2)
{
  uint64_t v8 = qword_268086A68;
  while (v5 != v8)
  {
    if (*(unsigned char *)v5)
    {
      int v14 = dword_268086A98;
      uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v5 + 32) + 160))(*(void *)(v5 + 32));
      if (v14 >= (int)v13 && *((void *)a2 + 1) != *(void *)a2)
      {
        uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::unit_test_log_t::log_entry_start(v13, *(_DWORD *)(v5 + 4));
        if (v13)
        {
          uint64_t v15 = *(void *)(v5 + 32);
          uint64_t v16 = *(void *)(v5 + 8);
          long long v21 = *a2;
          uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v15 + 104))(v15, v16, &v21);
        }
      }
    }
    v5 += 56;
  }
  return a1;
}

void boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector(boost::unit_test::ut_detail::entry_value_collector *this)
{
  if (*(unsigned char *)this) {
}
  }

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1)
{
  {
    if (*(unsigned char *)(i + 48))
    {
      boost::unit_test::unit_test_log_t::log_entry_context(v4, dword_268086A98);
      uint64_t v10 = qword_268086A68;
      while (v7 != v10)
      {
        if (*(unsigned char *)v7) {
          BOOL v16 = *(unsigned char *)(v7 + 48) == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16) {
          uint64_t v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(**(void **)(v7 + 32) + 120))(*(void *)(v7 + 32), *(void *)(v7 + 8));
        }
        *(unsigned char *)(v7 + 48) = 0;
        v7 += 56;
      }
      break;
    }
  }
  boost::unit_test::framework::clear_context((boost::unit_test::framework *)0xFFFFFFFFLL);
  return a1;
}

void boost::unit_test::unit_test_log_t::test_start(boost::unit_test::unit_test_log_t *this, uint64_t a2)
{
  uint64_t v7 = qword_268086A68;
  while (v4 != v7)
  {
    if (*(unsigned char *)v4)
    {
      int v12 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v4 + 32) + 160))(*(void *)(v4 + 32));
      if (v12 != 8)
      {
        uint64_t v13 = (boost::unit_test::runtime_config *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(v4 + 32) + 16))(*(void *)(v4 + 32), *(void *)(v4 + 8), a2);
        if (byte_26808D29F >= 0) {
          int v14 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_build_info;
        }
        else {
          int v14 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_build_info;
        }
        uint64_t v15 = byte_26808D29F;
        if (byte_26808D29F < 0) {
          uint64_t v15 = unk_26808D290;
        }
        BOOL v16 = &v14[v15];
        long long v17 = boost::unit_test::runtime_config::argument_store(v13);
        v21[0] = v14;
        v21[1] = v16;
        int v12 = (boost::unit_test::_anonymous_namespace_ *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v17, v21);
        if (*(unsigned char *)v12) {
          int v12 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 32) + 32))(*(void *)(v4 + 32), *(void *)(v4 + 8));
        }
        *(unsigned char *)(v4 + 48) = 0;
      }
    }
    v4 += 56;
  }
}

void boost::unit_test::anonymous namespace'::s_log_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  {
    if (v1) {
  }
    }
}

void sub_224269864(_Unwind_Exception *a1)
{
}

void boost::unit_test::unit_test_log_t::test_finish(boost::unit_test::unit_test_log_t *this)
{
  uint64_t v6 = qword_268086A68;
  while (1)
  {
    if (v2 == v6) {
      break;
    }
    if (*(unsigned char *)v2)
    {
      uint64_t v10 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v2 + 32) + 160))(*(void *)(v2 + 32));
      if (v10 != 8)
      {
        (*(void (**)(void, void))(**(void **)(v2 + 32) + 24))(*(void *)(v2 + 32), *(void *)(v2 + 8));
        uint64_t v10 = (boost::unit_test::_anonymous_namespace_ *)std::ostream::flush();
      }
    }
    v2 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_aborted(boost::unit_test::unit_test_log_t *this)
{
  v2[0] = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/test/impl/"
          "unit_test_log.ipp";
  v2[1] = "";
  void v2[2] = 200;
  dword_268086A98 = 2;
  char v3 = 1;
  *(void *)&long long v4 = "Test is aborted";
  *((void *)&v4 + boost::detail::shared_count::~shared_count(this + 1) = "";
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v3);
}

void sub_2242699D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, void *a2)
{
  {
    if (*(unsigned char *)(i + 48))
    {
      long long v4 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  uint64_t v11 = qword_268086A68;
  while (1)
  {
    if (v7 == v11) {
      break;
    }
    if (*(unsigned char *)v7)
    {
      BOOL v16 = *(uint64_t **)(v7 + 16);
      uint64_t v17 = *v16;
      *(_OWORD *)(v17 + 16) = *((_OWORD *)v16 + 1);
      *(_DWORD *)(v17 + 8) = *((_DWORD *)v16 + 2);
    }
    v7 += 56;
  }
  long long v19 = std::string::erase((std::string *)&qword_268086A78, 0, 0xFFFFFFFFFFFFFFFFLL);
  qword_268086A90 = 0;
  dword_268086A98 = 8;
  uint64_t v20 = (boost::unit_test::_anonymous_namespace_ *)MEMORY[0x22A614710](&qword_268086A78, *a2, a2[1] - *a2);
  if (byte_268086A8F >= 0) {
    uint64_t v22 = &qword_268086A78;
  }
  else {
    uint64_t v22 = (uint64_t *)qword_268086A78;
  }
  uint64_t v24 = byte_268086A8F;
  if (byte_268086A8F >= 0) {
    std::string v25 = &qword_268086A78;
  }
  else {
    std::string v25 = (uint64_t *)qword_268086A78;
  }
  if (byte_268086A8F < 0) {
    uint64_t v24 = unk_268086A80;
  }
  long long v26 = (uint64_t *)((char *)v25 + v24);
  if (v22 != v26)
  {
    if (byte_268086A8F >= 0) {
      char v28 = &qword_268086A78;
    }
    else {
      char v28 = (uint64_t *)qword_268086A78;
    }
    do
    {
      int v30 = *(unsigned __int8 *)v22;
      uint64_t v22 = (uint64_t *)((char *)v22 + 1);
      char v29 = v30;
      if (v30 == 92) {
        char v29 = 47;
      }
      *(unsigned char *)char v28 = v29;
      char v28 = (uint64_t *)((char *)v28 + 1);
    }
    while (v22 != v26);
  }
  uint64_t v31 = a2[2];
  qword_268086A90 = v31;
  return a1;
}

void boost::unit_test::unit_test_log_t::operator()(boost::unit_test::_anonymous_namespace_ *a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  dword_268086A98 = a2;
  *a3 = 1;
}

void boost::unit_test::unit_test_log_t::test_unit_start(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2)
{
  {
    if (*(unsigned char *)(i + 48))
    {
      long long v4 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  uint64_t v11 = qword_268086A68;
  while (1)
  {
    if (v7 == v11) {
      break;
    }
    if (*(unsigned char *)v7)
    {
      uint64_t v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v7 + 32) + 160))(*(void *)(v7 + 32));
      if ((int)v15 <= 1) {
        uint64_t v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, const boost::unit_test::test_unit *))(**(void **)(v7 + 32) + 40))(*(void *)(v7 + 32), *(void *)(v7 + 8), a2);
      }
    }
    v7 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_finish(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2, uint64_t a3)
{
  qword_268086AA0 = qword_268086AA8;
  qword_268086AB0 = 0;
  if (byte_268086ACF < 0) {
    operator delete((void *)qword_268086AB8);
  }
  qword_268086AB8 = 0;
  qword_268086AC0 = 0;
  unk_268086AC8 = 0;
  {
    if (*(unsigned char *)(i + 48))
    {
      uint64_t v7 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  uint64_t v14 = qword_268086A68;
  while (1)
  {
    if (v10 == v14) {
      break;
    }
    if (*(unsigned char *)v10)
    {
      BOOL v18 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v10 + 32)
                                                                                         + 160))(*(void *)(v10 + 32));
      if ((int)v18 <= 1) {
        BOOL v18 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, const boost::unit_test::test_unit *, uint64_t))(**(void **)(v10 + 32) + 48))(*(void *)(v10 + 32), *(void *)(v10 + 8), a2, a3);
      }
    }
    v10 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2, long long *a3)
{
  {
    if (*(unsigned char *)(i + 48))
    {
      uint64_t v6 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  uint64_t v13 = qword_268086A68;
  while (1)
  {
    if (v9 == v13) {
      break;
    }
    if (*(unsigned char *)v9)
    {
      uint64_t v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v9 + 32) + 160))(*(void *)(v9 + 32));
      if ((int)v17 <= 1)
      {
        uint64_t v18 = *(void *)(v9 + 32);
        uint64_t v19 = *(void *)(v9 + 8);
        long long v21 = *a3;
        uint64_t v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v18 + 56))(v18, v19, a2, &v21);
      }
    }
    v9 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_aborted(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2)
{
  {
    if (*(unsigned char *)(i + 48))
    {
      long long v4 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  uint64_t v11 = qword_268086A68;
  while (1)
  {
    if (v7 == v11) {
      break;
    }
    if (*(unsigned char *)v7)
    {
      uint64_t v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v7 + 32) + 160))(*(void *)(v7 + 32));
      if ((int)v15 <= 1) {
        uint64_t v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, const boost::unit_test::test_unit *))(**(void **)(v7 + 32) + 72))(*(void *)(v7 + 32), *(void *)(v7 + 8), a2);
      }
    }
    v7 += 56;
  }
}

void boost::unit_test::unit_test_log_t::exception_caught(boost::unit_test::_anonymous_namespace_ *a1, int *a2)
{
  if (*a2 < 0xD8) {
    unsigned int v4 = 6;
  }
  else {
    unsigned int v4 = 7;
  }
  if (*a2 >= 206) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 5;
  }
  {
    if (*(unsigned char *)(i + 48))
    {
      uint64_t v6 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  uint64_t v12 = qword_268086A68;
  while (v9 != v12)
  {
    if (*(unsigned char *)v9)
    {
      uint64_t v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(v9 + 32) + 160))(*(void *)(v9 + 32));
      if ((int)v5 >= (int)v17)
      {
        uint64_t v18 = *(void *)(v9 + 32);
        uint64_t v19 = *(void *)(v9 + 8);
        uint64_t v20 = (turi::style_transfer::ResNet16ModelTrainer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(*(void *)v18 + 80))(v18, v19, &qword_268086AA0, a2);
        boost::unit_test::unit_test_log_t::log_entry_context(v20, v5);
        uint64_t v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void))(**(void **)(v9 + 32) + 88))(*(void *)(v9 + 32), *(void *)(v9 + 8));
      }
    }
    v9 += 56;
  }
  boost::unit_test::framework::clear_context((boost::unit_test::framework *)0xFFFFFFFFLL);
}

void boost::unit_test::unit_test_log_t::log_entry_context(turi::style_transfer::ResNet16ModelTrainer *a1, uint64_t a2)
{
  int v45 = turi::style_transfer::ResNet16ModelTrainer::SupportsLossComponents(a1);
  BOOL is_empty = boost::unit_test::framework::context_generator::is_empty((boost::unit_test::framework::context_generator *)&v45);
  if (!is_empty)
  {
    uint64_t v9 = qword_268086A68;
    while (1)
    {
      if (v5 == v9) {
        break;
      }
      if (*(unsigned char *)v5) {
        uint64_t v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(v5 + 32) + 128))(*(void *)(v5 + 32), *(void *)(v5 + 8), a2);
      }
      v5 += 56;
    }
    while (1)
    {
      boost::unit_test::framework::context_generator::next((boost::unit_test::framework::context_generator *)&v45, &v43);
      uint64_t v29 = v43;
      uint64_t v30 = v44;
      if (v44 == v43) {
        break;
      }
      uint64_t v20 = qword_268086A68;
      while (1)
      {
        if (v16 == v20) {
          break;
        }
        if (*(unsigned char *)v16)
        {
          uint64_t v25 = *(void *)(v16 + 32);
          uint64_t v26 = *(void *)(v16 + 8);
          v42[0] = v29;
          v42[1] = v30;
          uint64_t v24 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v25 + 136))(v25, v26, a2, v42);
        }
        v16 += 56;
      }
    }
    uint64_t v36 = qword_268086A68;
    while (1)
    {
      if (v32 == v36) {
        break;
      }
      if (*(unsigned char *)v32) {
        std::string v40 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(v32 + 32) + 144))(*(void *)(v32 + 32), *(void *)(v32 + 8), a2);
      }
      v32 += 56;
    }
  }
}

uint64_t boost::unit_test::unit_test_log_t::log_entry_start(boost::unit_test::_anonymous_namespace_ *a1, int a2)
{
  uint64_t v8 = qword_268086A68;
  while (1)
  {
    if (v4 == v8) {
      return 0;
    }
    if (*(_DWORD *)(v4 + 4) == a2) {
      break;
    }
    v4 += 56;
  }
  if (*(unsigned char *)(v4 + 48)) {
    return 1;
  }
  if (!*(unsigned char *)v4) {
    return 0;
  }
  uint64_t result = 0;
  switch(dword_268086A98)
  {
    case -1:
    case 1:
    case 8:
      return result;
    case 0:
      uint64_t v17 = *(void *)(v4 + 32);
      uint64_t v18 = *(void *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(*(void *)v17 + 96))(v17, v18, &qword_268086A78, 0);
      goto LABEL_15;
    case 2:
      uint64_t v19 = *(void *)(v4 + 32);
      uint64_t v20 = *(void *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v19 + 96))(v19, v20, &qword_268086A78, 1);
      goto LABEL_15;
    case 3:
      uint64_t v21 = *(void *)(v4 + 32);
      uint64_t v22 = *(void *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v21 + 96))(v21, v22, &qword_268086A78, 2);
      goto LABEL_15;
    case 4:
    case 5:
    case 6:
      uint64_t v15 = *(void *)(v4 + 32);
      uint64_t v16 = *(void *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v15 + 96))(v15, v16, &qword_268086A78, 3);
      goto LABEL_15;
    case 7:
      uint64_t v23 = *(void *)(v4 + 32);
      uint64_t v24 = *(void *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v23 + 96))(v23, v24, &qword_268086A78, 4);
      goto LABEL_15;
    default:
LABEL_15:
      uint64_t result = 1;
      *(unsigned char *)(v4 + 48) = 1;
      break;
  }
  return result;
}

void std::vector<boost::unit_test::anonymous namespace'::unit_test_log_data_helper_impl>::push_back[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = qword_268086A68;
  if (qword_268086A68 < (unint64_t)qword_268086A70)
  {
    *(_OWORD *)qword_268086A68 = *(_OWORD *)a1;
    *(void *)(v2 + 24) = 0;
    long long v3 = *(_OWORD *)(a1 + 16);
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(v2 + 16) = v3;
    *(void *)(a1 + 16) = 0;
    *(void *)(v2 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
    long long v4 = *(_OWORD *)(a1 + 32);
    *(void *)(a1 + 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
    *(_OWORD *)(v2 + 32) = v4;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(v2 + 48) = *(unsigned char *)(a1 + 48);
    uint64_t v5 = v2 + 56;
    goto LABEL_17;
  }
  uint64_t v7 = 0x6DB6DB6DB6DB6DB7
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL {
    unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v10 = (char *)operator new(56 * v9);
  uint64_t v11 = &v10[56 * v7];
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *((_OWORD *)v11 + boost::detail::shared_count::~shared_count(this + 1) = v12;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v11[48] = *(unsigned char *)(a1 + 48);
  if (v2 == v6)
  {
    uint64_t v5 = (uint64_t)(v11 + 56);
    qword_268086A68 = (uint64_t)(v11 + 56);
    qword_268086A70 = (uint64_t)&v10[56 * v9];
    if (!v2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = &v11[v13];
    uint64_t v15 = v2 + v13;
    *(_OWORD *)(v14 - 56) = *(_OWORD *)(v2 + v13 - 56);
    long long v16 = *(_OWORD *)(v2 + v13 - 40);
    *(void *)(v15 - 32) = 0;
    *(_OWORD *)(v14 - 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = v16;
    *(void *)(v15 - 4std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 0;
    long long v17 = *(_OWORD *)(v2 + v13 - 24);
    *(void *)(v15 - 16) = 0;
    *(_OWORD *)(v14 - 24) = v17;
    *(void *)(v15 - 24) = 0;
    *(v14 - 8) = *(unsigned char *)(v2 + v13 - 8);
    v13 -= 56;
  }
  while (v2 + v13 != v6);
  uint64_t v18 = qword_268086A68;
  uint64_t v5 = (uint64_t)(v11 + 56);
  qword_268086A68 = (uint64_t)(v11 + 56);
  for (qword_268086A70 = (uint64_t)&v10[56 * v9]; v18 != v2; v18 -= 56)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v18 - 16));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v18 - 32));
  }
  if (v2) {
LABEL_16:
  }
    operator delete((void *)v2);
LABEL_17:
  qword_268086A68 = v5;
}

void boost::unit_test::anonymous namespace'::unit_test_log_data_helper_impl::unit_test_log_data_helper_impl(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(unsigned char *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = MEMORY[0x263F8C100];
  operator new();
}

void sub_22426A8A4(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 40));
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::unit_test_log_formatter::log_entry_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  memset((char *)&v13[9] + 8, 0, 24);
  (*(void (**)(uint64_t, _OWORD *))(*(void *)a3 + 16))(a3, v9);
  std::stringbuf::str();
  if (SHIBYTE(v13[10]) < 0) {
    operator delete(*((void **)&v13[9] + 1));
  }
  *((void *)&v13[10] + boost::detail::shared_count::~shared_count(this + 1) = v16;
  *(_OWORD *)((char *)&v13[9] + 8) = v15;
  uint64_t v6 = HIBYTE(v16);
  uint64_t v7 = (char *)v15;
  if (v16 < 0) {
    uint64_t v6 = *(void *)&v13[10];
  }
  else {
    uint64_t v7 = (char *)&v13[9] + 8;
  }
  v14[0] = v7;
  v14[1] = &v7[v6];
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 104))(a1, a2, v14);
  if (SHIBYTE(v13[10]) < 0) {
    operator delete(*((void **)&v13[9] + 1));
  }
  *(void *)&v9[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v9 + *(void *)(*(void *)&v9[0] - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v9[0] + boost::detail::shared_count::~shared_count(this + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](v13);
}

void sub_22426AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::basic_wrap_stringstream<char>::~basic_wrap_stringstream(uint64_t a1)
{
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](a1 + 112);
  return a1;
}

uint64_t boost::unit_test::unit_test_log_formatter::set_log_level(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t boost::unit_test::unit_test_log_formatter::get_log_level(boost::unit_test::unit_test_log_formatter *this)
{
  return *((unsigned int *)this + 2);
}

void boost::unit_test::anonymous namespace'::unit_test_log_impl::unit_test_log_impl(boost::unit_test::_anonymous_namespace_::unit_test_log_impl *this)
{
  qword_268086A68 = 0;
  qword_268086A70 = 0;
  boost::unit_test::log_entry_data::log_entry_data((std::string *)&qword_268086A78);
  qword_268086AA0 = (uint64_t)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  qword_268086AA8 = (uint64_t)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  qword_268086AC0 = 0;
  unk_268086AC8 = 0;
  qword_268086AB8 = 0;
  operator new();
}

void sub_22426ADF4(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 40));
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 24));
  if (byte_268086ACF < 0) {
    operator delete((void *)qword_268086AB8);
  }
  if (byte_268086A8F < 0) {
    operator delete((void *)qword_268086A78);
  }
  _Unwind_Resume(a1);
}

void boost::unit_test::anonymous namespace'::unit_test_log_impl::~unit_test_log_impl(void **this)
{
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

uint64_t *std::vector<boost::unit_test::anonymous namespace'::unit_test_log_data_helper_impl>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    operator delete((void *)*a1);
  }
  return a1;
}

std::string *boost::unit_test::log_entry_data::log_entry_data(std::string *this)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(this, 0xC8uLL);
  return this;
}

void sub_22426AF30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<boost::unit_test::anonymous namespace'::unit_test_log_data_helper_impl>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 56)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 16));
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 32));
  }
  *(void *)(a1 + 8) = a2;
}

void boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::reset<boost::unit_test::unit_test_log_formatter>(uint64_t a1, uint64_t a2)
{
  boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::shared_ptr<boost::unit_test::unit_test_log_formatter>(&v2, a2);
}

void boost::shared_ptr<boost::io::ios_base_all_saver>::shared_ptr<boost::io::ios_base_all_saver>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::io::ios_base_all_saver>(&v2);
}

void sub_22426B04C(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::io::ios_base_all_saver>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_22426B0D0(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::io::ios_base_all_saver>(v1);
  __cxa_rethrow();
}

void sub_22426B0E4(_Unwind_Exception *a1)
{
}

uint64_t *boost::checked_delete<boost::io::ios_base_all_saver>(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    *(_OWORD *)(v1 + 16) = *((_OWORD *)result + 1);
    *(_DWORD *)(v1 + 8) = *((_DWORD *)result + 2);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t *boost::detail::sp_counted_impl_p<boost::io::ios_base_all_saver>::dispose(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 16);
  if (result)
  {
    uint64_t v2 = *result;
    *(_OWORD *)(v2 + 16) = *((_OWORD *)result + 1);
    *(_DWORD *)(v2 + 8) = *((_DWORD *)result + 2);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::shared_ptr<boost::unit_test::unit_test_log_formatter>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::unit_test::unit_test_log_formatter>(&v2);
}

void sub_22426B1B4(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::unit_test::unit_test_log_formatter>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_22426B238(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::unit_test::unit_test_log_formatter>(v1);
  }
  __cxa_rethrow();
}

void sub_22426B250(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::unit_test::unit_test_log_formatter>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void boost::runtime::arguments_store::~arguments_store(atomic_uint ***this)
{
}

uint64_t *boost::unit_test::runtime_config::argument_store(boost::unit_test::runtime_config *this)
{
}

void std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(uint64_t a1, atomic_uint **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(a1, a2[1]);
    boost::detail::shared_count::~shared_count(a2 + 7);
    operator delete(a2);
  }
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 2std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_22426B484(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void *boost::unit_test::output::xml_log_formatter::log_start(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<TestLog>", 9);
}

void *boost::unit_test::output::xml_log_formatter::log_finish(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</TestLog>", 10);
}

void *boost::unit_test::output::xml_log_formatter::log_build_info(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<BuildInfo", 10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" platform", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Mac OS", 6);
  char v11 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v11, 1);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" compiler", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clang version 16.0.0 (clang-1600.0.26.6) [+internal-os]", 55);
  char v12 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v12, 1);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" stl", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"libc++ version 180100", 21);
  char v13 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" boost=\"", 8);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".", 1);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
  uint64_t v8 = (void *)std::ostream::operator<<();
  char v14 = 34;
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v14, 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/>", 2);
}

void *boost::unit_test::output::xml_log_formatter::test_unit_start(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<", 1);
  uint64_t v6 = 0;
  if (*(_DWORD *)a3 == 1) {
    uint64_t v7 = "TestCase";
  }
  else {
    uint64_t v7 = "TestSuite";
  }
  while (v7[v6++])
    ;
  std::string::basic_string[abi:ne180100](__p, v7, v6 - 1);
  if ((v23 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v10 = v23;
  }
  else {
    uint64_t v10 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v9, v10);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
  char v12 = *(char **)(a3 + 136);
  int v13 = *(char *)(a3 + 159);
  BOOL v14 = v13 < 0;
  if (v13 >= 0) {
    char v12 = (char *)(a3 + 136);
  }
  uint64_t v15 = *(unsigned __int8 *)(a3 + 159);
  if (v14) {
    uint64_t v15 = *(void *)(a3 + 144);
  }
  __p[0] = v12;
  __p[1] = &v12[v15];
  boost::unit_test::utils::print_escaped(v11, (char **)__p);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
  if (*(void *)(a3 + 32) != *(void *)(a3 + 24))
  {
    std::string::basic_string[abi:ne180100](__p, " file", 5uLL);
    if ((v23 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v16, v17);
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"=\"", 2);
    *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 24);
    boost::unit_test::utils::print_escaped(a2, (char **)__p);
    char v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v21, 1);
    std::string::basic_string[abi:ne180100](__p, " line", 5uLL);
    if ((v23 & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v19 = v23;
    }
    else {
      uint64_t v19 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v18, v19);
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(__p[0]) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)">", 1);
}

void sub_22426B8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::unit_test::output::xml_log_formatter::test_unit_finish(uint64_t a1, void *a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<TestingTime>", 13);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"</TestingTime>", 14);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</", 2);
  uint64_t v7 = 0;
  if (*a3 == 1) {
    uint64_t v8 = "TestCase";
  }
  else {
    uint64_t v8 = "TestSuite";
  }
  while (v8[v7++])
    ;
  std::string::basic_string[abi:ne180100](__p, v8, v7 - 1);
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
}

void sub_22426B9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::unit_test::output::xml_log_formatter::test_unit_skipped(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<", 1);
  uint64_t v7 = 0;
  if (*(_DWORD *)a3 == 1) {
    uint64_t v8 = "TestCase";
  }
  else {
    uint64_t v8 = "TestSuite";
  }
  while (v8[v7++])
    ;
  std::string::basic_string[abi:ne180100](__p, v8, v7 - 1);
  if ((v23 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v11 = v23;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=\"", 2);
  uint64_t v15 = *(void *)(a3 + 136);
  uint64_t v14 = a3 + 136;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" skipped", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"yes", 3);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 1);
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" reason", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"=\"", 2);
  *(_OWORD *)std::string __p = *a4;
  boost::unit_test::utils::print_escaped(v20, (char **)__p);
  char v24 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v24, 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/>", 2);
}

void sub_22426BBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::unit_test::output::xml_log_formatter::log_exception_start(uint64_t a1, void *a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<Exception file", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
  long long v20 = *(_OWORD *)(a4 + 24);
  boost::unit_test::utils::print_escaped(v7, (char **)&v20);
  char v21 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v21, 1);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" line", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v2std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v20, 1);
  if (*(void *)(a4 + 56) != *(void *)(a4 + 48))
  {
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" function", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"=\"", 2);
    long long v20 = *(_OWORD *)(a4 + 48);
    boost::unit_test::utils::print_escaped(v9, (char **)&v20);
    char v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v21, 1);
  }
  *(void *)&long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)">", 1);
  long long v19 = *(_OWORD *)(a4 + 8);
  uint64_t result = boost::unit_test::utils::operator<<((void **)&v20, &v19);
  if (*((void *)a3 + 1) != *(void *)a3)
  {
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<LastCheckpoint file", 20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
    long long v20 = *a3;
    boost::unit_test::utils::print_escaped(v11, (char **)&v20);
    char v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" line", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(v2std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v20, 1);
    *(void *)&long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)">", 1);
    uint64_t v15 = *((void *)a3 + 3);
    uint64_t v14 = (uint64_t)a3 + 24;
    uint64_t v13 = v15;
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(v14 + 8);
    }
    else {
      uint64_t v13 = v14;
    }
    *(void *)&long long v18 = v13;
    *((void *)&v18 + boost::detail::shared_count::~shared_count(this + 1) = v13 + v16;
    uint64_t v17 = boost::unit_test::utils::operator<<((void **)&v20, &v18);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"</LastCheckpoint>", 17);
  }
  return result;
}

void *boost::unit_test::output::xml_log_formatter::log_exception_finish(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</Exception>", 12);
}

void boost::unit_test::output::xml_log_formatter::log_entry_start(uint64_t a1, void *a2, char *a3, unsigned int a4)
{
  {
    unsigned int v21 = a4;
    a4 = v21;
    if (v20)
    {
      boost::unit_test::output::xml_log_formatter::log_entry_start(std::ostream &,boost::unit_test::log_entry_data const&,boost::unit_test::unit_test_log_formatter::log_entry_types)::xml_tags[0] = (uint64_t)"Info";
      *(void *)algn_268086B78 = "";
      qword_268086B80 = (uint64_t)"Message";
      unk_268086B88 = "";
      qword_268086B90 = (uint64_t)"Warning";
      unk_268086B98 = "";
      qword_268086BA0 = (uint64_t)"Error";
      unk_268086BA8 = "";
      qword_268086BB0 = (uint64_t)"FatalError";
      unk_268086BB8 = "";
      a4 = v21;
    }
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&boost::unit_test::output::xml_log_formatter::log_entry_start(std::ostream &,boost::unit_test::log_entry_data const&,boost::unit_test::unit_test_log_formatter::log_entry_types)::xml_tags[2 * a4];
  LOBYTE(__p) = 60;
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  if ((v24 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v9 = v24;
  }
  else {
    uint64_t v9 = (uint64_t)v23;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, v9);
  if ((char)v24 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100](&__p, " file", 5uLL);
  if ((v24 & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = __p;
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v11 = v24;
  }
  else {
    uint64_t v11 = (uint64_t)v23;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, v11);
  if ((char)v24 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
  int v12 = a3[23];
  BOOL v13 = v12 < 0;
  uint64_t v14 = *(char **)a3;
  if (v12 >= 0) {
    uint64_t v14 = a3;
  }
  uint64_t v15 = a3[23];
  if (v13) {
    uint64_t v15 = *((void *)a3 + 1);
  }
  std::string __p = v14;
  unsigned __int8 v23 = &v14[v15];
  boost::unit_test::utils::print_escaped(v7, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, " line", 5uLL);
  if ((v24 & 0x80u) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = __p;
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v17 = v24;
  }
  else {
    uint64_t v17 = (uint64_t)v23;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v16, v17);
  if ((char)v24 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, "><![CDATA[", 0xAuLL);
  if ((v24 & 0x80u) == 0) {
    long long v18 = &__p;
  }
  else {
    long long v18 = __p;
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v19 = v24;
  }
  else {
    uint64_t v19 = (uint64_t)v23;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v18, v19);
  if ((char)v24 < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 32) = 0;
}

void sub_22426C128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}